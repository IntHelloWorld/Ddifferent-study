/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 13:32:55 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang3.ClassUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName("@xHQ|W.dif|!pi");
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) "@xHQ|W";
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      Class<Integer> class2 = Integer.class;
      String string1 = ClassUtils.getPackageCanonicalName(class2);
      String string2 = ClassUtils.getShortCanonicalName("_~Ct");
      Class<Byte> class3 = Byte.class;
      boolean boolean1 = ClassUtils.isInnerClass(class3);
      String string3 = ClassUtils.getPackageName("UjG?]");
      // Undeclared exception!
      try { 
        ClassUtils.getShortCanonicalName("[@xHQ|W.dif|!pi");
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      String string1 = ClassUtils.getShortCanonicalName(class0);
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 6);
      Class<Short> class1 = Short.class;
      classArray0[0] = class1;
      Class<Short> class2 = Short.class;
      classArray0[1] = class2;
      Class<Short> class3 = Short.class;
      classArray0[2] = class3;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[0] = class0;
      Class<ClassUtils>[] classArray1 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 7);
      Class<ClassUtils> class4 = ClassUtils.class;
      classArray1[0] = class4;
      Class<ClassUtils> class5 = ClassUtils.class;
      classArray1[1] = class5;
      Class<ClassUtils> class6 = ClassUtils.class;
      classArray1[3] = class6;
      Class<ClassUtils> class7 = ClassUtils.class;
      classArray1[4] = class7;
      Class<ClassUtils> class8 = ClassUtils.class;
      classArray1[5] = class8;
      Class<ClassUtils> class9 = ClassUtils.class;
      classArray1[6] = class9;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ClassUtils.getClass(classLoader0, "[java.lang.Integer");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 19);
      Class<Character> class0 = Character.class;
      classArray0[0] = class0;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, false);
      String string0 = ClassUtils.getShortClassName("");
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      Class<Byte> class2 = Byte.class;
      Class<?> class3 = ClassUtils.primitiveToWrapper(class2);
      Class<Short> class4 = Short.class;
      String string1 = ClassUtils.getShortClassName(class4);
      Class<Integer> class5 = Integer.class;
      String string2 = ClassUtils.getPackageCanonicalName(class5);
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      String string3 = ClassUtils.getPackageName("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<?> class0 = ClassUtils.primitiveToWrapper((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Character character0 = Character.valueOf('^');
      char char0 = Character.lowSurrogate(0);
      char char1 = Character.lowSurrogate(0);
      boolean boolean0 = Character.isIdeographic(0);
      String string0 = ClassUtils.getPackageName("L");
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Object> class3 = Object.class;
      classArray0[1] = class3;
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      String string1 = ClassUtils.getPackageName(")_]@6?");
      Class<Double> class4 = Double.class;
      Class<?> class5 = ClassUtils.wrapperToPrimitive(class4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "=J0mau|RICrh%riZk'T[]";
      boolean boolean0 = true;
      try { 
        ClassUtils.getClass("=J0mau|RICrh%riZk'T[]", true);
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      String string1 = ClassUtils.getShortCanonicalName("");
      ClassUtils classUtils0 = new ClassUtils();
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string2 = ClassUtils.getShortCanonicalName((Object) null, "");
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      try { 
        ClassUtils.getClass(classLoader0, ".");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      Class<Boolean> class2 = Boolean.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class2);
      Class<?>[] classArray0 = ClassUtils.primitivesToWrappers((Class<?>[]) null);
      Class<String> class3 = String.class;
      String string0 = ClassUtils.getShortClassName(class3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      Double double0 = new Double(1.0);
      double double1 = Double.max(0.0, 1.0);
      boolean boolean0 = Double.isFinite(0.0);
      String string0 = ClassUtils.getShortCanonicalName((Object) double0, ".");
      Class<Long> class0 = Long.class;
      Class<Integer> class1 = Integer.class;
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 0);
      String string1 = ClassUtils.getShortClassName("U@");
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, false);
      boolean boolean2 = ClassUtils.isAssignable(class0, class1, false);
      String string2 = ClassUtils.getPackageCanonicalName("$");
      Class<?> class2 = ClassUtils.getClass("org.apache.commons.lang3.ClassUtils");
      String string3 = ClassUtils.getShortClassName((Object) classUtils0, ".");
      Class<Integer> class3 = Integer.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class3);
      String string4 = "";
      try { 
        ClassUtils.getClass("");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      Class<Float> class1 = Float.class;
      String string1 = ClassUtils.getPackageCanonicalName(class1);
      boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("J");
      String string1 = ClassUtils.getPackageCanonicalName("java.vm.specification.version");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("long");
      String string0 = ClassUtils.getShortClassName("");
      String string1 = ClassUtils.getShortClassName(class0);
      ClassUtils classUtils0 = new ClassUtils();
      Integer integer0 = new Integer(2315);
      String string2 = ClassUtils.getShortCanonicalName((Object) integer0, "");
      String string3 = ClassUtils.getShortCanonicalName("");
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Object> class3 = Object.class;
      classArray0[1] = class3;
      Class<Object> class4 = Object.class;
      classArray0[2] = class4;
      Class<Object> class5 = Object.class;
      classArray0[3] = class5;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      String string4 = ClassUtils.getShortClassName(".");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      try { 
        ClassUtils.getClass(classLoader1, "", false);
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("/!JFv_1Bf)SPV)0");
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      Class<?> class2 = ClassUtils.primitiveToWrapper(class1);
      String string1 = ClassUtils.getPackageName((Object) class1, "S");
      String string2 = ClassUtils.getShortClassName("<f");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      try { 
        ClassUtils.getClass(classLoader0, ".");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      String string1 = ClassUtils.getPackageName("java.lang");
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Long>[] classArray1 = (Class<Long>[]) Array.newInstance(Class.class, 1);
      Class<Long> class3 = Long.class;
      classArray1[0] = class3;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string2 = null;
      // Undeclared exception!
      try { 
        ClassUtils.getClass(classLoader0, (String) null);
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtils.getClass(classLoader1, (String) null, false);
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[1] = class4;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      try { 
        ClassUtils.getClass((ClassLoader) null, "COv_]TS8aaFu+DS");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtils.getClass((String) null, false);
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = null;
      String string1 = ClassUtils.getShortCanonicalName((String) null);
      String string2 = "";
      String string3 = ClassUtils.getPackageName((Object) null, "");
      ClassUtils classUtils0 = new ClassUtils();
      String string4 = ClassUtils.getShortCanonicalName("w]75%3pHBx,- hw5|");
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      Object object0 = new Object();
      String string5 = ClassUtils.getPackageName(object0, ".");
      String string6 = ClassUtils.getShortCanonicalName((Object) "", (String) null);
      Class<Short> class1 = Short.class;
      List<Class<?>> list1 = ClassUtils.getAllSuperclasses(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      try { 
        ClassUtils.getClass(classLoader0, "4.1");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("?n7Orx!#0");
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) null);
      String string1 = ClassUtils.getPackageName("c2>dLh~+%%Ab'iTrp");
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 6);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Class<Boolean> class2 = Boolean.class;
      classArray0[2] = class2;
      Class<Boolean> class3 = Boolean.class;
      classArray0[3] = class3;
      Class<Boolean> class4 = Boolean.class;
      classArray0[4] = class4;
      Class<Boolean> class5 = Boolean.class;
      classArray0[5] = class5;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      String string0 = ClassUtils.getPackageName("zYT0.H%bzd");
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 4);
      Class<Double> class2 = Double.class;
      classArray0[0] = class2;
      Class<Double> class3 = Double.class;
      classArray0[1] = class3;
      Class<Double> class4 = Double.class;
      classArray0[2] = class4;
      Class<Double> class5 = Double.class;
      classArray0[3] = class5;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, true);
      Class<Object> class6 = Object.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class6);
      Class<ClassUtils> class7 = ClassUtils.class;
      try { 
        ClassUtils.getPublicMethod(class7, "", classArray0);
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Class<Long> class1 = Long.class;
      classArray0[0] = class1;
      Class<Long> class2 = Long.class;
      classArray0[1] = class2;
      Class<Long> class3 = Long.class;
      classArray0[2] = class3;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      String string0 = ClassUtils.getShortCanonicalName((Object) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtils.getPublicMethod(class0, (String) null, classArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("");
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = ClassUtils.isAssignable(class1, class1, true);
      List<Class<?>> list1 = ClassUtils.getAllSuperclasses(class1);
      String string1 = ClassUtils.getPackageCanonicalName("");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      List<Class<?>> list2 = ClassUtils.getAllSuperclasses(class1);
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray1);
      String string2 = ClassUtils.getShortCanonicalName("");
      String string3 = ClassUtils.getPackageCanonicalName("x5=Z\"QKswvK{*=.p+Y]");
      Class<?>[] classArray2 = ClassUtils.primitivesToWrappers(classArray1);
      String string4 = ClassUtils.getPackageName((Object) class0, "java.awt.printerjob");
      Class<Object> class2 = Object.class;
      boolean boolean2 = ClassUtils.isInnerClass(class2);
      Class<Double> class3 = Double.class;
      boolean boolean3 = ClassUtils.isInnerClass(class3);
      List<String> list3 = ClassUtils.convertClassesToClassNames(list2);
      List<Class<?>> list4 = ClassUtils.convertClassNamesToClasses(list3);
      List<String> list5 = ClassUtils.convertClassesToClassNames(list1);
      Class<String> class4 = String.class;
      Class<Boolean> class5 = Boolean.class;
      boolean boolean4 = ClassUtils.isAssignable(class4, class5, true);
      Class<?>[] classArray3 = ClassUtils.toClass(classArray2);
      Boolean boolean5 = new Boolean("");
      String string5 = ClassUtils.getShortCanonicalName((Object) boolean5, "K4");
      String string6 = ClassUtils.getShortClassName(class2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double double0 = new Double((-865.678599037197));
      String string0 = ClassUtils.getShortCanonicalName((Object) double0, "PM;IDqiP");
      String string1 = ClassUtils.getPackageCanonicalName("Double");
      Double double1 = new Double((-865.678599037197));
      String string2 = ClassUtils.getShortCanonicalName((Object) double1, "");
      try { 
        ClassUtils.getClass("", false);
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName("@xHQ|W.dif|!pi");
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "@xHQ|W";
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      Class<Integer> class2 = Integer.class;
      String string1 = ClassUtils.getPackageCanonicalName(class2);
      String string2 = ClassUtils.getShortCanonicalName("_~Ct");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("3|&");
      String string1 = ClassUtils.getPackageCanonicalName("");
      String string2 = ClassUtils.getShortClassName((Object) "", "!IQt{f7@0V*F2j<Cb+");
      try { 
        ClassUtils.getClass("");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      String string1 = ClassUtils.getPackageCanonicalName((Object) null, "JyJkQ.Kq\f3");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      try { 
        ClassUtils.getClass(classLoader1, "java.awt.printerjob");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 4);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[2] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ClassUtils.getClass(classLoader0, "[]");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("U?p|Y!C?k@_2$n1R");
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      String string1 = ClassUtils.getShortCanonicalName(class0);
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 6);
      Class<Short> class1 = Short.class;
      classArray0[0] = class1;
      Class<Short> class2 = Short.class;
      classArray0[1] = class2;
      Class<Short> class3 = Short.class;
      classArray0[2] = class3;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      Class<ClassUtils>[] classArray1 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 7);
      Class<ClassUtils> class4 = ClassUtils.class;
      classArray1[0] = class4;
      Class<ClassUtils> class5 = ClassUtils.class;
      classArray1[1] = class5;
      Class<ClassUtils> class6 = ClassUtils.class;
      classArray1[2] = class6;
      Class<ClassUtils> class7 = ClassUtils.class;
      classArray1[3] = class7;
      Class<ClassUtils> class8 = ClassUtils.class;
      classArray1[4] = class8;
      Class<ClassUtils> class9 = ClassUtils.class;
      classArray1[5] = class9;
      Class<ClassUtils> class10 = ClassUtils.class;
      classArray1[6] = class10;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      String string1 = ClassUtils.getShortCanonicalName((Object) class1, (String) null);
      String string2 = ClassUtils.getShortClassName((Object) null, "Short");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getShortClassName(class0);
      Class<Short> class1 = Short.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class2 = Integer.class;
      classArray0[0] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[1] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[2] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[3] = class5;
      try { 
        ClassUtils.getPublicMethod(class1, "Object", classArray0);
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("K)?5!%)Wn|TGk4[j");
      Class<Long> class0 = Long.class;
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 0);
      try { 
        ClassUtils.getPublicMethod(class0, "K)?5!%)Wn|TGk4[j", classArray0);
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      try { 
        ClassUtils.getClass((ClassLoader) null, "COv_]TS8aaFu+DS");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      Class<?>[] classArray2 = ClassUtils.toClass(classArray0);
      String string1 = ClassUtils.getShortCanonicalName("Long");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ClassUtils.getClass(classLoader0, "", true);
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, (Class<?>[]) null);
      try { 
        ClassUtils.getClass("p");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String string0 = ClassUtils.getPackageCanonicalName((Object) boolean0, "");
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      String string1 = ClassUtils.getShortClassName((String) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Byte> class1 = Byte.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1, false);
      String string0 = ClassUtils.getShortCanonicalName(class0);
      String string1 = ClassUtils.getShortClassName("");
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtils.wrapperToPrimitive(class2);
      Class<?> class4 = ClassUtils.wrapperToPrimitive((Class<?>) null);
      Class<Short> class5 = Short.class;
      Class<?> class6 = ClassUtils.primitiveToWrapper(class5);
      try { 
        ClassUtils.getClass("Object");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 2);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      Class<Short> class1 = Short.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      try { 
        ClassUtils.getClass(" ");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      boolean boolean1 = ClassUtils.isInnerClass(class1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      Short short0 = new Short((short)76);
      String string0 = ClassUtils.getShortCanonicalName((Object) short0, "");
      Class<Short> class2 = Short.TYPE;
      String string1 = ClassUtils.getPackageName((Object) class2, "");
      boolean boolean2 = ClassUtils.isInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = "";
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      classLoader1.setClassAssertionStatus("", false);
      try { 
        ClassUtils.getClass(classLoader0, "", false);
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = ClassUtils.getPackageName(class0);
      Class<ClassUtils> class1 = ClassUtils.class;
      boolean boolean0 = ClassUtils.isInnerClass(class1);
      try { 
        ClassUtils.getClass("");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getPackageName(class0);
      try { 
        ClassUtils.getClass("java.lang", false);
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      String string0 = ClassUtils.getShortClassName(class0);
      Class<Float> class1 = Float.class;
      String string1 = ClassUtils.getPackageCanonicalName(class1);
      ClassUtils classUtils0 = new ClassUtils();
      String string2 = ClassUtils.getPackageName((Object) "ClassUtils", "");
      Class<Object> class2 = Object.class;
      String string3 = ClassUtils.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      String string0 = ClassUtils.getShortCanonicalName((String) null);
      String string1 = ClassUtils.getPackageName((String) null);
      ClassUtils classUtils0 = new ClassUtils();
      Class<ClassUtils> class1 = ClassUtils.class;
      boolean boolean0 = ClassUtils.isAssignable(class1, class0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add((String) null);
      linkedList0.addFirst((String) null);
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      String string1 = ClassUtils.getPackageCanonicalName(class0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "java.lang";
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) "java.lang";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) class0;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 6);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      Class<Short> class1 = Short.class;
      classArray0[1] = class1;
      Class<Short> class2 = Short.class;
      classArray0[2] = class2;
      Class<Short> class3 = Short.class;
      classArray0[3] = class3;
      Class<Short> class4 = Short.class;
      classArray0[4] = class4;
      Class<Short> class5 = Short.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Object> class3 = Object.class;
      classArray0[1] = class3;
      Class<Object> class4 = Object.class;
      classArray0[2] = class4;
      Class<Object> class5 = Object.class;
      classArray0[3] = class5;
      classArray0[4] = class2;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      Class<Object> class7 = Object.class;
      classArray0[6] = class7;
      Class<Object> class8 = Object.class;
      classArray0[7] = class8;
      Class<Object> class9 = Object.class;
      classArray0[8] = class9;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, false);
      Boolean boolean1 = new Boolean("Kt== *H*5X");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      String string0 = ClassUtils.getShortClassName(class2);
      String string1 = ClassUtils.getPackageName("Object");
      Class<Double> class10 = Double.class;
      String string2 = ClassUtils.getShortCanonicalName(class10);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader4 = classLoader0.getParent();
      String string0 = ClassUtils.getShortCanonicalName("{}");
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class1);
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      Class<?>[] classArray0 = ClassUtils.toClass((Object[]) null);
      boolean boolean1 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null);
      Class<Short> class2 = Short.class;
      List<Class<?>> list1 = ClassUtils.getAllInterfaces(class2);
      Boolean boolean2 = new Boolean(true);
      String string1 = ClassUtils.getShortClassName((Object) boolean2, "{}");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 3);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Class<Boolean> class2 = Boolean.class;
      classArray0[2] = class2;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      List<Class<?>> list1 = ClassUtils.getAllSuperclasses(class0);
      String string0 = ClassUtils.getShortClassName("1.3");
      List<String> list2 = ClassUtils.convertClassesToClassNames(list0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ClassUtils.getClass(classLoader0, "3");
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      boolean boolean0 = ClassUtils.isAssignable(class0, class0, true);
      Class<Boolean> class2 = Boolean.class;
      String string0 = ClassUtils.getPackageName(class2);
      boolean boolean1 = ClassUtils.isAssignable(class1, class1);
      String string1 = ClassUtils.getPackageName("");
      String string2 = ClassUtils.getPackageName(class2);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class3 = String.class;
      classArray0[0] = class3;
      Class<String> class4 = String.class;
      classArray0[1] = class4;
      Class<String> class5 = String.class;
      classArray0[2] = class5;
      Class<String> class6 = String.class;
      classArray0[3] = class6;
      Class<String> class7 = String.class;
      classArray0[4] = class7;
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      List<Class<?>> list1 = ClassUtils.getAllInterfaces(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, false);
      Long long0 = new Long(1L);
      String string0 = ClassUtils.getPackageCanonicalName((Object) long0, (String) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getPackageName(class0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      Class<String> class4 = String.class;
      classArray0[3] = class4;
      Class<String> class5 = String.class;
      classArray0[4] = class5;
      Class<String> class6 = String.class;
      classArray0[5] = class6;
      Class<String> class7 = String.class;
      classArray0[6] = class7;
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      boolean boolean0 = ClassUtils.isAssignable(classArray1, classArray0, false);
      Class<?>[] classArray2 = ClassUtils.primitivesToWrappers(classArray1);
      Class<String> class8 = String.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class8);
      try { 
        ClassUtils.getClass("Windows 9");
      } catch(ClassNotFoundException e) {
      }
  }
}
