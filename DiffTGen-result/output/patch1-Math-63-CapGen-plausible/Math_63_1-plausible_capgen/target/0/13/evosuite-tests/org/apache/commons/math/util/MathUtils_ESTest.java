/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:19:22 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1430250008909141E-8, 1.1430250008909141E-8);
      double double0 = MathUtils.factorialLog(9);
      double double1 = MathUtils.binomialCoefficientLog(1128, 964);
      int int0 = MathUtils.lcm((-1015), 9);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 464.310275817552;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.binomialCoefficientLog(428, 428);
      double double2 = MathUtils.round(Double.NaN, 428);
      int[] intArray0 = new int[7];
      intArray0[0] = 428;
      intArray0[1] = 428;
      intArray0[2] = 428;
      intArray0[3] = 428;
      intArray0[4] = 428;
      intArray0[5] = 428;
      intArray0[6] = 428;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.pow((long) 428, 428);
      double double3 = MathUtils.binomialCoefficientDouble(428, 428);
      int int1 = MathUtils.pow(428, (long) 428);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 428;
      doubleArray0[1] = (double) 428;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.sign(428);
      double double5 = MathUtils.factorialDouble(657);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.pow((long) 428, 22);
      byte byte0 = MathUtils.indicator((byte) (-125));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double6 = MathUtils.sign((-912.4144746));
      try { 
        MathUtils.pow(20922789888000L, (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (20,922,789,888,000^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3, 3);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1031.19, 0.0, (-2083.50307));
      long long0 = MathUtils.pow(0L, 0);
      long long1 = MathUtils.subAndCheck((long) 0, (-4558L));
      double double1 = MathUtils.sign((double) 4558L);
      int int0 = MathUtils.lcm(14, 14);
      boolean boolean1 = MathUtils.equals((double) 0, (double) 14, 1256.891224391943);
      int int1 = MathUtils.subAndCheck(0, 0);
      long long2 = MathUtils.addAndCheck(1023L, (long) 14);
      double double2 = MathUtils.log(0.0, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-4558L);
      doubleArray0[2] = (double) 1023L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (-1794.183700315132);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-125));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = (-780);
      int int1 = 6;
      float float0 = MathUtils.round((-1523.0F), (-780), 6);
      long long0 = MathUtils.gcd(20922789888000L, (long) (-780));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-63));
      int[] intArray0 = new int[9];
      intArray0[0] = (-780);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (int) (byte) (-63);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = 6;
      intArray0[5] = 650;
      intArray0[6] = 6;
      intArray0[7] = (int) (byte) (-1);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.log(1060.05, 0.0);
      double double1 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.indicator((float) (short)0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)1;
      intArray0[5] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, (double) 1, 371.72584);
      int int1 = MathUtils.lcm((int) (short)0, 113);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 113;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (short)1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.indicator((-1416));
      int int1 = MathUtils.addAndCheck((-1416), (-1416));
      long long0 = MathUtils.mulAndCheck(2122L, (long) (-1416));
      int int2 = MathUtils.indicator((-597));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2832);
      intArray0[1] = (-1);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.sign(2280.04187205);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.scalb((-597), (-2077));
      long long1 = MathUtils.sign((long) (-1));
      int int4 = MathUtils.lcm(814, 1489);
      int int5 = MathUtils.distanceInf(intArray0, intArray0);
      int int6 = MathUtils.hash((double) (-597));
      double double4 = MathUtils.scalb(400.554127843, (-1));
      int int7 = MathUtils.subAndCheck(0, 0);
      long long2 = MathUtils.subAndCheck((long) (byte)1, 1477L);
      int int8 = MathUtils.indicator((-208));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)0, 19.0, (-1235.4043));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.sign((-302932621132653753L));
      long long1 = MathUtils.gcd(1715L, (-1L));
      int int0 = 201;
      long long2 = MathUtils.binomialCoefficient(201, 201);
      long long3 = (-2644281811660520851L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2644281811660520851L), 3887L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.log((-776.520752526705), 1.304E19);
      int int0 = MathUtils.pow(0, 5);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.304E19;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.normalizeAngle(5.0, 501.048091);
      long long0 = MathUtils.addAndCheck(0L, (long) 0);
      float float0 = MathUtils.round((float) 0, 0, 0);
      long long1 = MathUtils.lcm((long) 0, (long) 5);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly decreasing (5 <= 5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1856.64;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1258.4252732755;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-2756.98658);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1856.64;
      doubleArray1[4] = 6.283185307179586;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      int int0 = bigInteger3.intValue();
      BigInteger bigInteger4 = bigInteger3.shiftLeft((byte)0);
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger3);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 4043L);
      int int2 = bigInteger6.bitLength();
      BigInteger bigInteger7 = bigInteger0.and(bigInteger6);
      int int3 = MathUtils.gcd((int) (byte)0, (int) (byte)1);
      long long0 = MathUtils.binomialCoefficient((byte)1, 0);
      boolean boolean0 = MathUtils.equals(10.0, 10.0, 1);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-4035746434778044925L), (-379L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 258;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(258, 0);
      int int2 = MathUtils.indicator(0);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-918L), (-918L));
      float float0 = 1876.1956F;
      float float1 = MathUtils.sign(1876.1956F);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger1.toByteArray();
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger1.gcd(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      int int0 = bigInteger0.bitLength();
      try { 
        MathUtils.pow(bigInteger0, (-134L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-134)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.pow(103, 103);
      boolean boolean0 = MathUtils.equals((-503.8878063043275), (double) 75670679, 1853.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)127;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-3183605296591799669L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,770,687^-3,183,605,296,591,799,669)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1205);
      intArray0[1] = (-97);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 23;
      intArray0[6] = (-871);
      intArray0[7] = (-3552);
      int[] intArray1 = new int[4];
      intArray1[0] = (-871);
      intArray1[1] = 0;
      intArray1[2] = 23;
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2707.49);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-625.13408005);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-2,707.49 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 1;
      float float1 = MathUtils.round(Float.NaN, 1, 1);
      double double0 = MathUtils.binomialCoefficientDouble(1, 1);
      boolean boolean0 = MathUtils.equals(1.0, 1.0);
      float float2 = MathUtils.indicator(0.0F);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3573), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,573, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)51);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)51;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)51;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)51;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = (-79);
      // Undeclared exception!
      try { 
        MathUtils.round((-2012.19), (-79), (-79));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      byte byte0 = MathUtils.sign((byte)9);
      long long1 = MathUtils.indicator((-3634L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3634L);
      doubleArray0[1] = (double) (-3634L);
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (-3634L);
      doubleArray0[4] = (double) (-3634L);
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)9;
      doubleArray0[7] = (double) (byte)9;
      doubleArray0[8] = (double) (byte)9;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.mulAndCheck((-3634L), 0L);
      double double1 = MathUtils.round(9.0, (int) (byte)1);
      long long3 = MathUtils.lcm((-1030L), (-1L));
      short short0 = MathUtils.indicator((short) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0L, (-3634.0), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = 3.834E-20;
      double double1 = MathUtils.normalizeAngle(3.834E-20, 3.834E-20);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 3.834E-20;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = 693;
      int int1 = 211;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(693, 211);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.gcd(83, 3492);
      int int1 = MathUtils.mulAndCheck(0, 63);
      long long0 = MathUtils.pow((long) 63, 0);
      int int2 = MathUtils.gcd(1067, (-3300));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 83);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 83
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.3999999761581421;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.log(0.3999999761581421, 0.06666666666666667);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.sign((-816.916F));
      double double1 = MathUtils.normalizeAngle(0.0, 0.06666666666666667);
      long long0 = MathUtils.pow(2432902008176640000L, 66);
      long long1 = MathUtils.indicator(2432902008176640000L);
      double double2 = 1.0;
      double double3 = MathUtils.normalizeAngle(1.0, 0.3999999761581421);
      int int0 = 3293;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 3293);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 3,293
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        MathUtils.pow((-390L), (-390L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-390^-390)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1236.206141631;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2920.87;
      doubleArray0[4] = (-2.6033824355191673E-8);
      doubleArray0[5] = 72.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 4103.25;
      doubleArray0[8] = 1.01;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 2443.772342677028;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1773.5143091073, 2443.772342677028, 1773.5143091073);
      float float0 = MathUtils.sign(1.0F);
      int int0 = (-1918);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1918));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,918
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.round(0.7853981633974483, 1053);
      int int0 = MathUtils.sign(1053);
      int int1 = MathUtils.indicator((-3486));
      try { 
        MathUtils.pow((-3435), (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,435^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.binomialCoefficientLog(1292, 1292);
      double double2 = MathUtils.round(Double.NaN, 1292);
      int[] intArray0 = new int[7];
      intArray0[0] = 1292;
      intArray0[1] = 1292;
      intArray0[2] = 1292;
      intArray0[3] = 1292;
      intArray0[4] = 1292;
      intArray0[5] = 1292;
      intArray0[6] = 1292;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.gcd(20922789888000L, (long) 1292);
      double double3 = MathUtils.cosh((-1115.0));
      int int1 = MathUtils.pow(1292, (long) 1292);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1292;
      doubleArray0[1] = (double) 1292;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.sign(1292);
      double double5 = MathUtils.factorialDouble(657);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.pow((long) 1292, 22);
      byte byte0 = MathUtils.indicator((byte) (-125));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double6 = MathUtils.sign((-912.4144746));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 102;
      double double0 = MathUtils.factorialLog(102);
      int int1 = MathUtils.lcm(102, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = MathUtils.indicator((-1019L));
      long long1 = MathUtils.gcd(2227L, 0L);
      float float0 = MathUtils.round((float) 0L, 15);
      int int0 = 543;
      double double0 = MathUtils.factorialDouble(543);
      double double1 = MathUtils.scalb((-1020.75), 15);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("invalid row dimension: {0} (must be positive)");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.invalid row dimension: {0} (must be positive)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = (-1557L);
      long long1 = 1L;
      long long2 = MathUtils.pow((-1557L), 1L);
      int int0 = 343;
      // Undeclared exception!
      try { 
        MathUtils.factorial(343);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.factorialLog(2877);
      int[] intArray0 = new int[6];
      intArray0[0] = 2877;
      intArray0[1] = 287;
      intArray0[2] = 2877;
      intArray0[3] = 2877;
      intArray0[4] = 2877;
      intArray0[5] = 2877;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = 526;
      intArray0[1] = 526;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1114);
      intArray0[6] = (-1062);
      int[] intArray1 = new int[1];
      intArray1[0] = 5;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2082;
      intArray0[2] = 73;
      intArray0[3] = 57;
      intArray0[4] = 20;
      intArray0[5] = 1791;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.binomialCoefficientDouble(2082, 73);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short short0 = MathUtils.sign((short)13);
      double double0 = MathUtils.round((double) (short)13, (int) (short)1);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)13;
      intArray0[1] = (int) (short)13;
      intArray0[2] = (int) (short)13;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = MathUtils.sign((short)13);
      double double0 = MathUtils.round((double) (short)13, (int) (short)1);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)13;
      intArray0[1] = (int) (short)13;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.factorialLog(809);
      int int0 = MathUtils.subAndCheck(809, 809);
      double double1 = MathUtils.log(809, 153.4370845382);
      short short0 = MathUtils.indicator((short) (-674));
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 809;
      intArray0[2] = (int) (short) (-674);
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = 0;
      intArray0[5] = (int) (short) (-674);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.round(2257.161240310004, (-674));
      long long0 = MathUtils.sign((long) (-1));
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 686);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(66, 66);
      int int0 = MathUtils.lcm(66, 243);
      long long0 = MathUtils.subAndCheck((long) 243, (-744L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 243;
      doubleArray0[1] = (double) 987L;
      doubleArray0[2] = (-824.0303875404);
      doubleArray0[3] = (double) 5346;
      double double1 = 40.19140625;
      doubleArray0[4] = 40.19140625;
      doubleArray0[5] = (double) (-744L);
      doubleArray0[6] = (double) 987L;
      doubleArray0[7] = (double) 243;
      doubleArray0[8] = (double) 987L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (987 >= -824.03)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.sinh(1117.2961);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1117.2961;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 182.05;
      doubleArray0[1] = (-1447.9943684);
      doubleArray0[2] = (-13.307783);
      doubleArray0[3] = (-1964.9800370166056);
      doubleArray0[4] = 2206.24585794238;
      doubleArray0[5] = (-3697.8543);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2206.24585794238);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.mulAndCheck((-878L), (-878L));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = (-1849);
      int int1 = 11;
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-878L), (-1849), 11);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.pow(1886L, 0L);
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.sign((float) 1);
      int int1 = MathUtils.sign(5868);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 2.7553817452272217E-6);
      double double0 = MathUtils.cosh(0);
      float float1 = MathUtils.round(0.0F, 0, 0);
      long long1 = MathUtils.pow(0L, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1.0F, (-1507.81));
      float float1 = MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1178), (-1178));
      long long0 = MathUtils.lcm((-243L), 4503599627370496L);
      int int1 = MathUtils.gcd((-1178), (-1178));
      long long1 = MathUtils.addAndCheck((long) 1178, (long) (-1178));
      float float0 = MathUtils.indicator(0.0F);
      int int2 = MathUtils.sign(1178);
      short short0 = MathUtils.indicator((short)3512);
      double double0 = MathUtils.round((-1531.480857), 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("A9G\"Z0/%");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.A9G\"Z0/%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.sign(18);
      double double0 = MathUtils.scalb((-1700.86365), 1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.lcm(1, 52);
      int int2 = (-1456);
      double double1 = MathUtils.binomialCoefficientLog(1, (-1456));
      long long0 = 4398046511103L;
      long long1 = MathUtils.addAndCheck((-1379L), 4398046511103L);
      long long2 = MathUtils.indicator(4398046509724L);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1481.0);
      doubleArray0[1] = 1006.203866597408;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      double double0 = 969.46557615;
      doubleArray0[6] = 969.46557615;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 613.8168355;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 0;
      double double2 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 157);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.indicator(0L);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1347);
      intArray0[1] = 1591;
      int int0 = 76;
      intArray0[2] = 76;
      intArray0[3] = 67;
      intArray0[4] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long1 = (-675L);
      long long2 = MathUtils.addAndCheck(0L, (-675L));
      // Undeclared exception!
      try { 
        MathUtils.factorial(40);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.indicator((float) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.not();
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      boolean boolean0 = MathUtils.equals((-1.0), 0.0, (double) 0);
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      int int0 = 61;
      // Undeclared exception!
      try { 
        MathUtils.factorial(61);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(817.8, 0.0, 681);
      long long0 = MathUtils.binomialCoefficient(681, 681);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-395), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -395, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      int int2 = (-1535);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1535));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,535
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1850, 1850);
      int int0 = MathUtils.subAndCheck(1850, 1886);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1850;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1886;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.25, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.round((-0.25), 1850, 1850);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.cosh(0.0);
      long long0 = 393L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-4035746434778044925L), 393L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.log(3.141592653589793, 3.141592653589793);
      long long0 = MathUtils.gcd(0L, 0L);
      double double1 = MathUtils.binomialCoefficientDouble(215, (-2488));
      long long1 = MathUtils.subAndCheck(1426L, (-1767L));
      int int0 = MathUtils.compareTo(817.16303211686, 2300.8959465, 1.0);
      double double2 = MathUtils.normalizeAngle(1297.545615475, (-2488));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 210.393;
      doubleArray0[1] = (-4501.2582);
      doubleArray0[2] = (-1228.6077354120894);
      doubleArray0[3] = 1406.4902;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-4,501.258 <= -1,228.608)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.pow((long) 0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.log(0.0, 1994.7);
      int int1 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equals((double) 0, (-4765.109378008), -0.0);
      double double1 = MathUtils.indicator(2305.69936);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.indicator(188.544);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) 28629151);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.sign(61);
      int int1 = MathUtils.addAndCheck(0, 2574);
      double double0 = MathUtils.sign((double) 2574);
      short short0 = MathUtils.indicator((short)535);
      long long0 = MathUtils.addAndCheck((-3066L), (long) 2574);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.097;
      doubleArray0[1] = (-209.39860860564784);
      doubleArray0[2] = (-8282.70319312);
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.097 >= -209.399)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-13));
      int int0 = MathUtils.sign((-4081));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (-4081);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (-4081);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (byte) (-13);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2470.3760226608615;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.10526403784751892;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign(2470.3760226608615);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = (-1409);
      int int1 = 154;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1409), 154);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,409, k = 154
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.gcd(2761, 2761);
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = MathUtils.mulAndCheck(0, 0);
      int int3 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 2761;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.round(0.0, 2854, 0);
      long long0 = MathUtils.binomialCoefficient(0, (-147));
      int int0 = MathUtils.mulAndCheck(0, 707);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 161;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(51);
      boolean boolean0 = MathUtils.equals((-4103.95069972), (-929.4903), (double) 161);
      boolean boolean1 = MathUtils.equalsIncludingNaN(6.283185307179586, (-0.5));
      int int1 = MathUtils.hash((-269.71));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, 220);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 220, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.indicator((long) 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-282.804387173), (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.sign((int) (byte)0);
      float float1 = MathUtils.round(1.0F, 0);
      int int1 = MathUtils.pow(17, (long) (byte)0);
      long long0 = MathUtils.factorial(17);
      long long1 = MathUtils.indicator(355687428096000L);
      double double0 = MathUtils.sign(3.834E-20);
      long long2 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 355687428096000L;
      doubleArray0[4] = (double) 355687428096000L;
      doubleArray0[5] = (double) 1L;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.addAndCheck(0, (-4065));
      boolean boolean0 = MathUtils.equals(Double.NaN, 0.0);
      int int3 = MathUtils.compareTo(0.0, 1.0, 17);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 2110L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 16;
      intArray0[2] = 1883;
      intArray0[3] = 10;
      intArray0[4] = 61;
      intArray0[5] = 3659;
      intArray0[6] = 1151;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 3659, (double) 3659, 1753);
      boolean boolean1 = MathUtils.equals((double) 16, 0.0, 10.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = (-331.772);
      double double1 = MathUtils.round((-331.772), 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger2 = bigInteger1.clearBit(0);
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.hash((-935.98222));
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.gcd((-144), 0);
      long long0 = MathUtils.indicator(5040L);
      long long1 = MathUtils.mulAndCheck((-1261L), 976L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.round((double) 1, 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1, 219);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 219
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-596);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-596));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -596
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = MathUtils.round((-1358.84F), 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1359.0F), (double) 0, 1477);
      double double0 = MathUtils.sign((double) (-1358.84F));
      long long0 = MathUtils.lcm((long) 1477, (long) 0);
      long long1 = MathUtils.gcd((long) 0, (long) 1477);
      long long2 = MathUtils.gcd((long) 1477, 1477L);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.14285714285714285, 0.14285714285714285, 5057.802427);
      try { 
        MathUtils.pow(0L, (-324L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-324)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-290));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -290
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.hash(0.0);
      float float0 = MathUtils.indicator((-585.8F));
      int int1 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.lcm((long) 0, 3628800L);
      float float1 = MathUtils.sign((-585.8F));
      int int2 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.round(897.55255F, 295, 19);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 19, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 2514;
      int int1 = MathUtils.gcd(2514, 2514);
      int int2 = 0;
      double double0 = MathUtils.binomialCoefficientLog(2514, 0);
      int int3 = MathUtils.compareTo(0, 0.0, 774.9376498);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-2444);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2444));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,444
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1642.165042821906);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 266.574;
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = 1037L;
      long long1 = MathUtils.sign(1037L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.shiftLeft((-987234950));
      BigInteger bigInteger3 = bigInteger1.min(bigInteger0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger1);
      long long2 = MathUtils.addAndCheck(2L, (long) (-987234950));
      int int1 = MathUtils.addAndCheck((-525), (-525));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1050), Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,050
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-35.576425487166), (-35.576425487166));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      double double1 = bigInteger0.doubleValue();
      try { 
        MathUtils.pow(bigInteger0, (-2163));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,163)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.lcm(2409, (-2851));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      int int2 = (-1535);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1535));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,535
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 31);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.cosh(4498.1675);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 571L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte byte0 = (byte) (-22);
      byte byte1 = MathUtils.indicator((byte) (-22));
      byte byte2 = MathUtils.indicator((byte) (-22));
      double double0 = 2153.6869308651;
      double double1 = MathUtils.cosh(2153.6869308651);
      int int0 = (-562);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2238.647426689065), (double) (byte) (-1), (-562));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2814.34437692;
      doubleArray0[1] = 2425.55;
      doubleArray0[2] = 9.0;
      doubleArray0[3] = 1.633123935319537E16;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2290L, 4503599627370496L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.041666666666666664;
      doubleArray0[2] = 734.4742179289;
      doubleArray0[3] = (-0.09088450866185192);
      doubleArray0[4] = 205.65721695459968;
      doubleArray0[5] = (-200.307);
      doubleArray0[6] = 0.99;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-917L), (-917L));
      int int0 = 3;
      float float0 = MathUtils.round(5849.759F, 3);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 445L);
      int int1 = (-3138);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3138));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,138
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 2439.4;
      double double1 = MathUtils.sign(2439.4);
      long long0 = 2935890503282001226L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2935890503282001226L, 24L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.lcm((int) (short)0, 1264);
      int int1 = MathUtils.subAndCheck((int) (short)0, (-315));
      int int2 = MathUtils.compareTo((-3033.716415186346), (-1068.182909931566), (short)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 315;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 1264;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1264;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-315);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = MathUtils.hash((double) (-315));
      int int4 = MathUtils.lcm((-1066160128), (-1));
      int int5 = MathUtils.sign((-1066160128));
      double double0 = MathUtils.log(0.0, (-315.0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.round(0.0F, 1);
      double double0 = MathUtils.sinh(1);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.sinh(2178.788);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 1L, (double) 0.0F);
      double double2 = MathUtils.scalb(2178.788, 0);
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.round(2178.788, 0, 0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.cosh((-823.055570136));
      int int0 = MathUtils.subAndCheck(11, 11);
      long long0 = MathUtils.pow((long) 11, (long) 11);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 11, 11);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 11, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.indicator(1462L);
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, (-1349.358202), (-558.029492918));
      byte byte0 = (byte)52;
      byte byte1 = MathUtils.sign((byte)52);
      long long1 = MathUtils.mulAndCheck((long) 0, (long) (byte)52);
      long long2 = MathUtils.subAndCheck(1462L, 156L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-558.029492918);
      doubleArray0[1] = (-1349.358202);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) 1L;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.round((double) (byte)1, 53);
      long long3 = MathUtils.indicator((long) 1);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = 19;
      try { 
        MathUtils.pow(19, (-3038L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (19^-3,038)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.scalb(3.145894820876798E-6, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1935);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-270.2491063891302), 405.8486329955, (-270.2491063891302));
      int int0 = MathUtils.pow(1743, (long) 1743);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.binomialCoefficientLog(544, 0);
      int int0 = MathUtils.hash((double) 544);
      int int1 = MathUtils.mulAndCheck(1925, (-1126));
      long long0 = MathUtils.gcd((long) 1082195968, (long) 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.compareTo(20.0, 20.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        MathUtils.pow((-2963), (long) (-2963));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,963^-2,963)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.indicator(2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1151.51516244;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.06666666666666667, 0.0);
      double double0 = MathUtils.indicator(717.7549668250975);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.sinh(1.1430250008909141E-8);
      int int0 = MathUtils.gcd(0, 46);
      double double1 = MathUtils.scalb(1.1430250008909141E-8, 0);
      int int1 = MathUtils.addAndCheck(0, 113);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-0.1428571423679182);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1548.7154);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 311.63687643118794;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 311.63687643118794;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh(Double.POSITIVE_INFINITY);
      double double2 = MathUtils.round(1.0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, 0.1111111111111111);
      boolean boolean2 = MathUtils.equals(3510.53381, Double.POSITIVE_INFINITY);
      double double3 = MathUtils.scalb(0.0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 590;
      int int1 = MathUtils.pow(590, (long) 590);
      double double0 = MathUtils.sign((double) 590);
      int int2 = (-1955);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1955), (-798));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,955, k = -798
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-700.099772404), (-2159.5), 6);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-700.099772404);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (13,040,000,000,000,000,000 >= 6)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 42.0;
      int int0 = 961;
      int int1 = (-2355);
      // Undeclared exception!
      try { 
        MathUtils.round(42.0, 961, (-2355));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-0.33333333333333287);
      doubleArray0[1] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(0.0, (-0.33333333333333287), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-596));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -596
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.lcm(146L, 146L);
      long long1 = MathUtils.lcm((-238L), (-1208L));
      long long2 = MathUtils.pow((-1208L), 0L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3666.837, 0.0);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3910, 3910);
      int int0 = 68;
      int int1 = MathUtils.pow(3910, 68);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1408.397;
      doubleArray0[4] = (double) 68;
      doubleArray0[5] = (double) 3910;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (68 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.sign(3097);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1762.212626939);
      doubleArray0[1] = (double) 3097;
      doubleArray0[2] = (double) 3097;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3097;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (3,097 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      try { 
        MathUtils.pow(63, (-1111));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (63^-1,111)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      int int2 = 94;
      int int3 = 540;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(94, 540);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 94, k = 540
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.pow(170, (long) 170);
      long long0 = MathUtils.pow((long) 170, 0);
      int int1 = MathUtils.pow(4194304, (long) 4194304);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 4194304;
      intArray0[4] = 4194304;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.abs();
      boolean boolean0 = bigInteger0.testBit(0);
      BigInteger bigInteger2 = bigInteger0.flipBit(0);
      BigInteger bigInteger3 = bigInteger0.setBit(0);
      boolean boolean1 = bigInteger0.isProbablePrime(0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) 0);
      double double0 = MathUtils.factorialLog(3);
      int int3 = MathUtils.pow((-798), (long) 170);
      int int4 = MathUtils.distance1(intArray0, intArray0);
      long long2 = 2147483648L;
      long long3 = MathUtils.subAndCheck(2147483648L, 625L);
      try { 
        MathUtils.pow((-3419L), (-798));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,419^-798)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3780));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,780
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.pow(0, 0);
      boolean boolean0 = MathUtils.equals((-1192.11547), (double) 1, (double) 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.sign((-812L));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(78.48152827375, 78.48152827375);
      long long0 = MathUtils.lcm((-3453L), (-3453L));
      float float0 = MathUtils.round((float) (-3453L), 0);
      int int0 = MathUtils.lcm(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((-402.501F), (-1944), (-897));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -897, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.031, 0.031);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-391);
      intArray0[1] = (-668);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.pow(2043L, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.gcd(4607182418800017408L, 4607182418800017408L);
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.log(0.2222222089767456, (-687.6655839089393));
      int int0 = (-4101);
      try { 
        MathUtils.pow(613L, (-4101));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (613^-4,101)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.compareTo(0, (-1056.44653), 0);
      float float0 = MathUtils.round((-2891.8506F), 0);
      double double0 = MathUtils.scalb((-1056.44653), 0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.factorialLog(0);
      int int2 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2892.0F);
      doubleArray0[3] = (-1056.44653);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      int int3 = MathUtils.pow(3475, (long) 0);
      int int4 = MathUtils.lcm((-550), 1);
      try { 
        MathUtils.pow(134, (-550));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (134^-550)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.indicator(1385L);
      int int0 = MathUtils.pow((-501), 841L);
      double double0 = MathUtils.factorialLog(24);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1385L);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.pow(0, 276L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 0, (-9218868437227405313L));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-597.8068);
      doubleArray0[1] = (-0.1428571423679182);
      doubleArray0[2] = 3132.911;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-0.1428571423679182));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.addAndCheck((-2974L), (-2974L));
      double double1 = MathUtils.sinh((-0.1428571423679182));
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.distance1(doubleArray1, doubleArray1);
      int int0 = MathUtils.hash(doubleArray1);
      float float0 = MathUtils.round((float) (-344050959), (-344050959));
      long long1 = MathUtils.subAndCheck(1075L, (-5948L));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.lcm(222, 222);
      long long0 = MathUtils.gcd((long) 222, (-2661L));
      int int1 = MathUtils.hash((double) 222);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3L;
      doubleArray0[1] = (double) (-2661L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((-597.48F), 1080803328);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = (-3791.06);
      double double1 = MathUtils.sinh((-3791.06));
      int int0 = (-141);
      int int1 = MathUtils.sign((-141));
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double double2 = (-2646.0);
      double double3 = 1.494140625;
      // Undeclared exception!
      try { 
        MathUtils.equals((-2646.0), 1.494140625, (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      float float0 = bigInteger0.floatValue();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      long long0 = bigInteger1.longValue();
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 435L);
      long long1 = MathUtils.pow(87178291200L, 2578);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.036;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 1645.574405045;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.indicator((-361.3885963));
      int int0 = 113;
      int int1 = 0;
      int int2 = MathUtils.gcd(113, 0);
      long long0 = MathUtils.gcd((long) 113, 362880L);
      int int3 = 4028;
      double double1 = MathUtils.binomialCoefficientDouble(4028, 3063);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 4028;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 4028;
      doubleArray0[8] = (double) 113;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (\u221E >= \u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.cosh(3711.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3711.0, 31);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 292.059;
      doubleArray0[1] = 3711.0;
      doubleArray0[2] = 3711.0;
      doubleArray0[3] = 3711.0;
      doubleArray0[4] = (double) 31;
      doubleArray0[5] = (double) 31;
      doubleArray0[6] = (double) 31;
      doubleArray0[7] = 3711.0;
      doubleArray0[8] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 6.283185307179586);
      double double1 = MathUtils.sign(9.313225746154785E-10);
      byte byte0 = MathUtils.indicator((byte) (-31));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 9.313225746154785E-10;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble(4);
      long long0 = MathUtils.lcm((long) 4, (long) (byte) (-1));
      boolean boolean1 = MathUtils.equals(6.283185307179586, 0.0);
      boolean boolean2 = MathUtils.equals(31.84003061158, (double) 4, 0.1666666505023083);
      short short0 = MathUtils.sign((short) (byte) (-1));
      int int0 = MathUtils.gcd(4, 0);
      short short1 = MathUtils.sign((short) (byte) (-1));
      double double3 = MathUtils.log(0.0, 0.0);
      double double4 = MathUtils.binomialCoefficientLog(0, (-2372));
      int int1 = MathUtils.pow((-1503), 137);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float float0 = MathUtils.round(529.0F, 4);
      long long0 = MathUtils.subAndCheck((-6932L), (long) 4);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(389.267454523385, (-857.0));
      int int0 = MathUtils.pow(89, (long) 89);
      int int1 = 797;
      int int2 = MathUtils.pow(797, 89);
      double double1 = MathUtils.round(0.0, 376283545);
      byte byte0 = MathUtils.sign((byte)79);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(797, 1025);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 797, k = 1,025
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
