/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:19:25 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1418.0, 1418.0);
      double double0 = MathUtils.indicator(706.05);
      double double1 = MathUtils.factorialLog(81);
      double double2 = MathUtils.factorialLog(81);
      double double3 = 0.9999997615814209;
      double double4 = MathUtils.normalizeAngle(1418.0, 0.9999997615814209);
      int int0 = MathUtils.mulAndCheck(489, 81);
      int[] intArray0 = new int[5];
      intArray0[0] = 39609;
      intArray0[1] = 489;
      intArray0[2] = 39609;
      intArray0[3] = 39609;
      intArray0[4] = 39609;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      MathUtils.factorialDouble(39609);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 232.0003264406076;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 47.02157;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck((-2161L), (-2161L));
      double double1 = MathUtils.round(47.02157, 242);
      int int0 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(257426454, 257426454);
      int int1 = MathUtils.addAndCheck(242, 257426454);
      boolean boolean0 = MathUtils.equalsIncludingNaN(378.286783987, (double) 257426696);
      double double3 = MathUtils.binomialCoefficientLog(2146008727, (-2803));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)70);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)70;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)70;
      doubleArray0[7] = (double) (byte)1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) (byte)1, (int) (byte)1);
      int int0 = MathUtils.pow((int) (byte)1, 6402373705728000L);
      double double1 = MathUtils.log((-1525.44), 0.125);
      double double2 = MathUtils.safeNorm(doubleArray0);
      byte byte1 = MathUtils.indicator((byte) (-118));
      double double3 = MathUtils.round((double) (byte) (-118), (-2410), 4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.log(1462.0, 1462.0);
      int int0 = MathUtils.addAndCheck((-1119), (-1119));
      int[] intArray0 = new int[5];
      intArray0[0] = (-2238);
      intArray0[1] = (-1119);
      intArray0[2] = (-1119);
      intArray0[3] = (-1119);
      intArray0[4] = (-2238);
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 3;
      float float0 = MathUtils.round(0.0F, 3, 3);
      long long0 = 0L;
      long long1 = MathUtils.lcm((long) 3, 0L);
      double double0 = MathUtils.cosh(0.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 483.9110713955801;
      doubleArray0[4] = (double) (-0.001F);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray0);
      long long2 = MathUtils.gcd(9223372036854775807L, (long) 3);
      double double1 = MathUtils.sign(1.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = 62;
      BigInteger bigInteger1 = bigInteger0.shiftRight(6);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1L);
      // Undeclared exception!
      try { 
        mockRandom0.ints(0L, 3, (-699));
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 21;
      intArray0[1] = 2254;
      intArray0[2] = 454;
      intArray0[3] = 254;
      intArray0[4] = 258;
      intArray0[5] = (-2126);
      int int0 = (-350);
      intArray0[6] = (-350);
      intArray0[7] = 2539;
      int[] intArray1 = new int[3];
      intArray1[0] = 2539;
      intArray1[1] = (-2126);
      intArray1[2] = 258;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      short short0 = MathUtils.indicator((short)14);
      float float0 = MathUtils.round((float) (short)1, 5109, 0);
      int int0 = MathUtils.hash((double) 5109);
      int int1 = MathUtils.compareTo(1374.341, 6.123233995736766E-17, 4212.728154);
      // Undeclared exception!
      try { 
        MathUtils.factorial(5109);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = MathUtils.indicator(3.141592653589793);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.141592653589793, 3.141592653589793);
      byte byte0 = (byte)66;
      byte byte1 = MathUtils.indicator((byte)66);
      long long0 = MathUtils.mulAndCheck((long) (byte)1, 355687428096000L);
      float float0 = MathUtils.round((-3510.533F), (int) (byte)66);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) Float.NaN, (double) (byte)1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 3;
      float float0 = MathUtils.round(0.0F, 3, 3);
      long long0 = 0L;
      long long1 = MathUtils.lcm((long) 3, 0L);
      double double0 = MathUtils.cosh(0.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 483.9110713955801;
      doubleArray0[4] = (double) (-0.001F);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray0);
      long long2 = MathUtils.gcd(9223372036854775807L, (long) 3);
      double double1 = MathUtils.sign(1.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = 62;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        mockRandom0.ints(0L, 3, (-699));
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 348.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 439.23137242016065;
      doubleArray0[3] = 1035.703023111;
      doubleArray0[4] = 2.479773539153719E-5;
      doubleArray0[5] = (-64.91118);
      doubleArray0[6] = 2709.96276024357;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.addAndCheck((long) (-1299333933), 0L);
      long long1 = MathUtils.mulAndCheck((-400L), 0L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)2126);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.subAndCheck((-739L), (long) 1);
      int int1 = (-1559);
      double double0 = MathUtils.scalb((-739L), (-1559));
      long long1 = MathUtils.lcm((long) 1, (-3602L));
      double double1 = (-1801.2111044);
      double double2 = 0.0;
      boolean boolean0 = MathUtils.equals((-1801.2111044), 0.0, (double) (-3602L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(14, 14);
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.pow(43, 1095);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1095;
      doubleArray0[3] = (double) 43;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 822.21;
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1819315549), 2761.323716001);
      float float0 = MathUtils.sign((float) (-1819315549));
      boolean boolean1 = MathUtils.equals(1.0, 0.0);
      long long0 = MathUtils.gcd((long) 14, (long) (-1819315549));
      int int1 = MathUtils.addAndCheck(43, 52);
      double double3 = MathUtils.cosh(95);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 4607182418800017408L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4607182418800017408L, 4607182418800017408L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 448.3560243, 448.3560243);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 975.1030034674665;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 975.1030034674665;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 448.3560243;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 975.1030034674665;
      doubleArray1[7] = 975.1030034674665;
      doubleArray1[8] = 448.3560243;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double1 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1542.30956930612, (-2051.29634911353));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 746);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1658;
      int int1 = MathUtils.pow(1658, 0);
      double double0 = MathUtils.round((double) 1, 0);
      short short0 = (short) (-554);
      short short1 = MathUtils.sign((short) (-554));
      double double1 = 0.0;
      double double2 = MathUtils.log(0.0, 1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.log(3.141592653589793, (-429.0126146));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck(20, 0);
      int int1 = MathUtils.pow(20, 20);
      int int2 = MathUtils.addAndCheck(20, 235);
      long long0 = MathUtils.subAndCheck((-5034868814120038111L), (long) 235);
      long long1 = MathUtils.sign((long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(0);
      double double2 = MathUtils.sinh((-5034868814120038111L));
      int int3 = MathUtils.mulAndCheck(2, 2368);
      boolean boolean0 = MathUtils.equalsIncludingNaN(12.0, 3.141592653589793, 181);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 12.0;
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = 1073.052;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 20;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short)172);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1465910209, 391.08, (double) 1465910209);
      int[] intArray0 = new int[8];
      intArray0[0] = 1465910209;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)172;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (-4054);
      intArray0[5] = 1465910209;
      intArray0[6] = 2119;
      intArray0[7] = (int) (short)1;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2436.3595741180466);
      doubleArray0[1] = 0.1666666505023083;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 932.70811665552;
      doubleArray0[5] = 1153.484560227621;
      doubleArray0[6] = 1.304E19;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = (byte)9;
      byte byte1 = MathUtils.sign((byte)9);
      double double1 = MathUtils.log((-1.0), 0.0);
      float float0 = MathUtils.round(1.0F, (int) (byte)1);
      int int0 = MathUtils.gcd(1696, (int) (byte)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(1153.484560227621, (-1.0));
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.gcd(1, 0);
      double double4 = MathUtils.factorialDouble(0);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.indicator(894.5399);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      int int0 = MathUtils.mulAndCheck(1880, (-578));
      double double1 = MathUtils.sinh(1059.6461004168282);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 894.5399;
      doubleArray2[1] = (double) (-1086640);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (double) (-578);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (double) (-578);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (double) (-578);
      doubleArray3[7] = 1059.6461004168282;
      doubleArray3[8] = (double) (-1086640);
      double double2 = MathUtils.distanceInf(doubleArray2, doubleArray3);
      int int1 = MathUtils.pow((-1086640), 0);
      double double3 = MathUtils.indicator((-920.0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 560;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3973.06841209), (-3973.06841209), 560);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("h9GZCJP");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.h9GZCJP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.sign((-508L));
      long long1 = MathUtils.factorial(0);
      double double0 = MathUtils.cosh((-2403.18));
      long long2 = MathUtils.lcm(0L, (long) 0);
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray0);
      long long3 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("!l5$<TR@q`p=>Pj");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.!l5$<TR@q`p=>Pj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)26);
      double double0 = MathUtils.indicator((double) (byte)26);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)26;
      doubleArray0[1] = (double) (byte)26;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = 78.4296474563723;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)26;
      doubleArray0[6] = (double) (byte)1;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1361.0);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5;
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 91;
      int int1 = MathUtils.indicator(91);
      double double0 = MathUtils.cosh(91);
      int int2 = 123;
      int int3 = MathUtils.sign(123);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      byte byte0 = MathUtils.sign((byte) (-15));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-820);
      intArray0[0] = (-820);
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int2 = (-1287);
      intArray0[4] = (-1287);
      intArray0[5] = 230;
      intArray0[6] = 12;
      int int3 = 5;
      intArray0[7] = 5;
      int[] intArray1 = new int[1];
      intArray1[0] = 12;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(705.550346729, (-1.0));
      double double1 = MathUtils.factorialDouble(67);
      double double2 = MathUtils.log(42.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1767);
      double double1 = MathUtils.sinh(11449.584485519172);
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("lz");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.lz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.2246467991473532E-16;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-5968.72);
      doubleArray0[3] = 1047.638058208;
      doubleArray0[4] = 3584.74534;
      doubleArray0[5] = 2761.24994832088;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1620.9;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.2246467991473532E-16;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = MathUtils.gcd(1772, 0);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)94);
      long long0 = MathUtils.mulAndCheck((-134L), (long) 1772);
      int int1 = MathUtils.gcd(1253, (int) (byte)1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2.957007209750105E-8), 0.0, 0.0);
      short short0 = MathUtils.indicator((short) (-1254));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1188, (-1042));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1237896), 0.0, 2741.25);
      long long0 = MathUtils.addAndCheck(1903L, (-468L));
      long long1 = MathUtils.sign(4500L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1237896);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1188;
      intArray0[1] = 1188;
      intArray0[2] = (-1042);
      intArray0[3] = (-6085);
      intArray0[4] = (-1237896);
      intArray0[5] = (-1237896);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.sign(1188);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(4661, 13);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)18);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)1, (double) (byte)18, (int) (byte)18);
      long long0 = 812L;
      long long1 = MathUtils.addAndCheck(812L, 812L);
      long long2 = MathUtils.pow(1624L, 0L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1526.145);
      doubleArray0[1] = (-1102.98);
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 17);
      boolean boolean1 = MathUtils.equals((-0.7853981633974483), 0.3333333333332802, 0.0);
      long long0 = MathUtils.pow(4607182418800017408L, 17);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-3512.5644093), 0.0);
      int int0 = MathUtils.pow(17, 4607182418800017408L);
      float float0 = MathUtils.indicator(1.0F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.lcm((long) 1, (long) 17);
      boolean boolean3 = MathUtils.equals((-1102.98), 0.0, 0.3333333333332802);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      try { 
        MathUtils.pow((-304), (long) (-304));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-304^-304)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 20;
      try { 
        MathUtils.pow(20, (-3512299194304650054L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (20^-3,512,299,194,304,650,054)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-4438));
      long long0 = MathUtils.pow(6402373705728000L, 0L);
      int int0 = MathUtils.mulAndCheck(242, (-4438));
      float float0 = MathUtils.indicator((-910.0F));
      int int1 = MathUtils.pow(242, 6402373705728000L);
      double double1 = MathUtils.cosh((-1073996));
      double double2 = MathUtils.round((double) (-910.0F), 2215, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4438);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-910.0F);
      doubleArray0[4] = 0.5;
      doubleArray0[5] = (-407.71461);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      boolean boolean0 = MathUtils.equals(0.0, 2.0);
      int int0 = 10;
      int int1 = MathUtils.lcm(10, 10);
      long long0 = (-251L);
      long long1 = MathUtils.lcm((-251L), (-251L));
      int int2 = (-1663);
      int int3 = MathUtils.addAndCheck((-245), (-1663));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1908));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,908
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.gcd((-364), (-364));
      long long0 = MathUtils.gcd((long) (-364), 0L);
      double double0 = MathUtils.sign((double) (-364));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-364));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -364
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1138.0668356511128);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 1839;
      double double0 = MathUtils.scalb(1018.0, 1839);
      int[] intArray0 = new int[4];
      intArray0[0] = 1839;
      intArray0[1] = 1839;
      intArray0[2] = 1839;
      intArray0[3] = 1839;
      int[] intArray1 = new int[1];
      intArray1[0] = 1839;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = (-3958705157555305932L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3958705157555305932L), (-1940L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-9223372036854775808L), (-9223372036854775808L));
      double double0 = 3.834E-20;
      boolean boolean0 = MathUtils.equals((-2664.61135468008), 3.834E-20, (double) (-9223372036854775808L));
      // Undeclared exception!
      try { 
        MathUtils.lcm(9218868437227405312L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.gcd(237, 237);
      long long0 = MathUtils.addAndCheck((-1L), 1599L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-2134);
      try { 
        MathUtils.pow((-9223372036854775808L), (-2134));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-2,134)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        MathUtils.pow(714L, (-1516));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (714^-1,516)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-2687.67402631));
      long long0 = MathUtils.gcd(0L, 4095L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 4095L, (double) 4095L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2687.67402631);
      doubleArray0[1] = (double) 4095L;
      doubleArray0[2] = (-2687.67402631);
      doubleArray0[3] = (double) 4095L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 4095L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = Double.NaN;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck(0L, 4095L);
      long long2 = MathUtils.sign(4095L);
      int int0 = (-1085);
      int int1 = MathUtils.addAndCheck((-1085), 2212);
      long long3 = MathUtils.binomialCoefficient(2, (-1867));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("8P5lhC*db fY");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.8P5lhC*db fY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)67);
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 521.7799635569188, (int) (byte)1);
      int int0 = 740;
      int int1 = MathUtils.pow(740, (int) (byte)1);
      double double0 = MathUtils.binomialCoefficientLog(740, 740);
      int int2 = 0;
      int int3 = MathUtils.lcm(1082, 0);
      int int4 = (-3729);
      int int5 = MathUtils.subAndCheck((int) (byte)67, (-3729));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 516.27928, 541);
      long long0 = MathUtils.pow((long) (-3729), 541);
      float float0 = MathUtils.sign((float) 3931153481746670511L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("|xY=ZScveqmw");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.|xY=ZScveqmw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.round((-3232.45864737677), 0);
      byte byte0 = MathUtils.indicator((byte)9);
      long long0 = MathUtils.subAndCheck((long) 0, 113236205062349959L);
      double double1 = MathUtils.indicator((-3232.0));
      int int0 = MathUtils.lcm(0, 182);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      byte byte0 = MathUtils.indicator((byte)56);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) (byte)56);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)56;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 328;
      intArray0[5] = (int) (byte)56;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)56;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round(Float.NaN, 702, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-786L), 0L);
      long long1 = MathUtils.gcd(0L, 0L);
      long long2 = MathUtils.sign(7910884519577875640L);
      long long3 = MathUtils.lcm((-786L), 0L);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.cosh(794.6969541071753);
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.indicator((-264));
      long long0 = MathUtils.factorial(16);
      double double0 = MathUtils.sign(0.875);
      short short0 = MathUtils.indicator((short)243);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.0, (double) 16);
      double double1 = MathUtils.round((-1738.10878938361), (-1), 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1740.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (-2889.013064797392);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 16;
      doubleArray0[7] = (double) 16;
      doubleArray0[8] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1934L, 1934L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3742, 3742);
      int int0 = MathUtils.mulAndCheck(3742, 3742);
      long long0 = MathUtils.subAndCheck((long) 14002564, (long) 3742);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.sign(120L);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.binomialCoefficient((byte)0, (byte)0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-97);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.pow(9);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger3);
      BigInteger bigInteger5 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger6 = BigInteger.ONE;
      BigInteger bigInteger7 = bigInteger0.or(bigInteger6);
      int int1 = bigInteger0.intValueExact();
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, (long) 0);
      float float0 = MathUtils.indicator((float) 1L);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, (-778.17789379274));
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-441.1811097096059);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-778.17789379274);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.log((-441.1811097096059), (-7.44321345601866E-11));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 2758);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,758
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)31;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      double double0 = bigInteger0.doubleValue();
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-53));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,026,572,831^-53)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 189;
      intArray0[1] = 101;
      intArray0[2] = 685;
      intArray0[3] = 0;
      intArray0[4] = (-1149);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) 101, (long) (-1149));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 189, 0, 1030);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,030, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 408.09841;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = (-4319.3143);
      doubleArray0[5] = (-19.046);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.15;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 408.09841;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-19.046);
      doubleArray1[4] = 15.0;
      doubleArray1[5] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(286, 286);
      long long0 = MathUtils.sign(3884L);
      int[] intArray0 = new int[1];
      intArray0[0] = 286;
      int[] intArray1 = new int[2];
      intArray1[0] = 286;
      intArray1[1] = 286;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      double double1 = MathUtils.normalizeAngle(1.0, 783.59);
      short short0 = MathUtils.indicator((short)0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      long long1 = MathUtils.subAndCheck((-467L), (long) (short)0);
      boolean boolean0 = MathUtils.equals(1842.830635531245, (double) 286, (int) (short)1);
      long long2 = MathUtils.addAndCheck((-467L), 1742L);
      int int1 = MathUtils.sign((int) (short)0);
      long long3 = MathUtils.lcm(264L, 59L);
      double double3 = MathUtils.normalizeAngle(59L, 0.0);
      float float0 = MathUtils.indicator((float) 286);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 286;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 59L;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (1 < 59)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.pow(1969, (long) 1969);
      byte byte0 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 321009841;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.sign((int) (byte)0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((long) 321009841);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 321009841, (-1.5707963267948966));
      int int3 = MathUtils.addAndCheck((int) (byte)0, 1969);
      double double1 = MathUtils.binomialCoefficientLog(1969, 1969);
      int int4 = MathUtils.indicator(321009841);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int5 = MathUtils.mulAndCheck((-954), 1969);
      int int6 = MathUtils.gcd(0, 179);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.indicator((double) (short)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int int0 = MathUtils.sign(4808);
      int int1 = MathUtils.compareTo(0.0, 3214.068534505391, 0.0);
      int int2 = MathUtils.pow(6, (long) 4808);
      int int3 = MathUtils.hash(392.75);
      boolean boolean0 = MathUtils.equals(Double.NaN, 0.0, (-3443.0));
      MathUtils.OrderDirection mathUtils_OrderDirection1 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection1, false);
      int int4 = MathUtils.gcd(4808, (int) (short)0);
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_HALF_DOWN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_HALF_DOWN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2616.2997;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2616.2997;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2616.2997;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2616.2997;
      doubleArray1[6] = 2616.2997;
      int int0 = MathUtils.hash(doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1891.0751505183123, 93);
      double double2 = MathUtils.sinh(2616.2997);
      double double3 = MathUtils.cosh(93);
      long long0 = MathUtils.lcm((long) 93, (-2188L));
      int int1 = 61;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(93, 61);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = (byte)42;
      byte byte1 = MathUtils.indicator((byte)42);
      int int0 = 52;
      int int1 = MathUtils.gcd(52, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(52);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3.834E-20, 677.89, 3.834E-20);
      long long0 = MathUtils.indicator(9218868437227405312L);
      byte byte0 = (byte) (-22);
      byte byte1 = MathUtils.sign((byte) (-22));
      short short0 = MathUtils.sign((short)87);
      int int0 = MathUtils.lcm((int) (byte) (-22), 1211);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_DOWN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_DOWN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 21;
      double double0 = MathUtils.factorialDouble(21);
      boolean boolean0 = MathUtils.equals(5.109094217170942E19, (double) 21);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 21, 21, 21);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 21, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.indicator((-2441.19F));
      int int0 = MathUtils.compareTo((-1415.2782267826617), (-1335.8874), 0.0);
      boolean boolean0 = MathUtils.equals(0.0, 2690.5289671424);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = (-886.12);
      boolean boolean0 = MathUtils.equals(0.0, (-886.12), 0.0);
      int int0 = (-2650);
      int int1 = MathUtils.gcd((-2650), (-860));
      BigInteger bigInteger0 = BigInteger.ZERO;
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 10);
      try { 
        MathUtils.pow((long) 10, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, Double.NEGATIVE_INFINITY, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1070.556279289047), 1855.093855036909, (-1.0));
      double double0 = MathUtils.sign((double) (-1));
      double double1 = MathUtils.log((-1.0), (-1070.556279289047));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.scalb((-1), (-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-13);
      int int1 = MathUtils.addAndCheck((-13), 4);
      int[] intArray0 = new int[6];
      intArray0[0] = (-13);
      intArray0[1] = (-9);
      intArray0[2] = (-13);
      intArray0[3] = (-9);
      intArray0[4] = (-9);
      intArray0[5] = 4;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round((float) (-13), (-9));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-9));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-3512299194304650054L), (-3512299194304650054L));
      short short0 = MathUtils.sign((short)95);
      int int0 = MathUtils.sign((-1757));
      int int1 = MathUtils.compareTo(0.0, (-1757), 368.957);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 348.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 348.0;
      doubleArray0[3] = 1035.703023111;
      doubleArray0[4] = 2.479773539153719E-5;
      doubleArray0[5] = (-64.91118);
      doubleArray0[6] = 348.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.addAndCheck((long) (-954547002), 0L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)2126);
      double double2 = MathUtils.sign((-861.00617819));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.pow(1161, 1161);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-339030583));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -339,030,583
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1030;
      long long0 = MathUtils.pow(1370L, 1030);
      float float0 = MathUtils.indicator((float) 0L);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1370L;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 1030;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 1,030)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathUtils.log((-784.96149743783), (-784.96149743783));
      double double1 = MathUtils.sign(1287.365);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.compareTo(312.289102460513, 1017.26733, 312.289102460513);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), 977);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 977
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-0.2499999997677497), (-0.2499999997677497));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(854, 854);
      long long0 = MathUtils.mulAndCheck(0L, (long) 854);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 854;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 221.40774166;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 854;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 854;
      doubleArray1[7] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (854 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(498.0F, 0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1080.591;
      doubleArray0[2] = (double) 499.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 499.0F;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 498.0F;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2248.59;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-884.67);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        MathUtils.pow((-9223372036854775808L), (-1372L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-1,372)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.indicator((-3958705157555305932L));
      long long1 = MathUtils.addAndCheck((-1L), (-3958705157555305932L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3958705157555305933L);
      doubleArray0[1] = 759.237135;
      doubleArray0[2] = (double) (-3958705157555305932L);
      doubleArray0[3] = (double) (-3958705157555305933L);
      doubleArray0[4] = (double) (-3958705157555305933L);
      doubleArray0[5] = (double) (-3958705157555305932L);
      doubleArray0[6] = (double) (-3958705157555305932L);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-3958705157555305932L);
      doubleArray1[1] = (double) (-3958705157555305932L);
      doubleArray1[2] = 759.237135;
      doubleArray1[3] = 759.237135;
      doubleArray1[4] = (double) (-3958705157555305932L);
      doubleArray1[5] = (double) (-1L);
      doubleArray1[6] = (double) (-3958705157555305932L);
      doubleArray1[7] = (double) (-3958705157555305933L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2437L, (-3958705157555305933L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      byte byte0 = MathUtils.sign((byte)42);
      double double1 = MathUtils.sinh(63);
      long long0 = MathUtils.addAndCheck(4503599627370495L, (long) (byte)42);
      byte byte1 = MathUtils.sign((byte)1);
      long long1 = MathUtils.indicator(4503599627370495L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1.146891579734805E27;
      doubleArray0[2] = (double) 63;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,146,891,579,734,805,000,000,000,000 >= 63)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-1500);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1500));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,500
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1885;
      double double0 = MathUtils.factorialDouble(1885);
      long long0 = MathUtils.pow((long) 1885, (long) 1885);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1885);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1025.5879), (-861.00617819));
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.subAndCheck(87178291200L, 87178291200L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.scalb(3.834E-20, 0);
      double double1 = MathUtils.sign(2062.45);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3.834E-20, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-469));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -469
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.indicator(40320L);
      int int0 = MathUtils.pow(11, 1L);
      long long1 = MathUtils.factorial(11);
      long long2 = MathUtils.indicator((long) 11);
      double double0 = MathUtils.normalizeAngle(1434.4820250973842, 1434.4820250973842);
      int int1 = MathUtils.addAndCheck(0, 11);
      long long3 = MathUtils.lcm(40320L, (-414L));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = (-302932621132653753L);
      long long1 = (-3183605296591799669L);
      long long2 = MathUtils.gcd((-302932621132653753L), (-3183605296591799669L));
      int int0 = 67;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(67, 0);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-5215);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-5215), (-5215));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -5,215
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.round((-2365.9), Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 648.135;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (648.135 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.indicator((-993L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = BigInteger.TEN;
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-164));
      double double1 = MathUtils.round(0.0, 2629);
      double double2 = MathUtils.binomialCoefficientDouble(2968, 2968);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2968;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 2629;
      doubleArray0[4] = (double) (-164);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.lcm(1185L, 1185L);
      int int0 = MathUtils.sign(527);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1335, 1335);
      double double0 = MathUtils.factorialLog(0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1335;
      intArray0[1] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1214.733;
      doubleArray0[1] = 421.4761;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = (-1783);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, (-1783), (-1783));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,783, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short short0 = MathUtils.sign((short)231);
      int int0 = (-1662);
      try { 
        MathUtils.pow((-1662), (-6808));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,662^-6,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 2726;
      long long0 = MathUtils.pow((-3801L), 2726);
      long long1 = MathUtils.lcm(0L, (-496L));
      double double0 = MathUtils.sign(198.3186327822028);
      int int1 = (-1998);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.0, (double) 0L, (-1998));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-1795);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1795), (-1795));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,795
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 6754);
      long long0 = MathUtils.subAndCheck((long) (-6754), (long) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-6754);
      doubleArray0[1] = (double) (-6754);
      doubleArray0[2] = (double) (-6754L);
      doubleArray0[3] = (double) (-6754L);
      doubleArray0[4] = (double) (-6754L);
      doubleArray0[5] = (double) (-6754L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-6,754 >= -6,754)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(7, 7);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-344.952564903325);
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 49;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 49;
      doubleArray0[5] = (double) 49;
      doubleArray0[6] = (-2621.32708387932);
      doubleArray0[7] = (double) 49;
      doubleArray0[8] = (double) 49;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      short short0 = (short)63;
      short short1 = MathUtils.sign((short)63);
      float float0 = MathUtils.sign((float) 7);
      double[] doubleArray2 = new double[0];
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray2, doubleArray1);
      long long0 = MathUtils.pow((long) (short)63, 685L);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3349.392, 49.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((-3540L), (-3540L));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 933;
      try { 
        MathUtils.pow(933, (-3451));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (933^-3,451)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.indicator((int) (byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-267);
      intArray0[0] = (-267);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = (-2504);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-267), (-2504));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -267
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0.0F;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (-2467.702);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = MathUtils.indicator(292);
      long long0 = MathUtils.subAndCheck((long) 292, 1830L);
      long long1 = MathUtils.indicator((long) 292);
      double double0 = MathUtils.indicator((double) 1);
      long long2 = MathUtils.sign((long) 1);
      double double1 = MathUtils.round((-3.141592653589793), 1, 0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = (-1876.2F);
      float float1 = MathUtils.indicator((-1876.2F));
      double double0 = MathUtils.normalizeAngle((-1876.2F), 0.13333332538604736);
      long long0 = (-1258L);
      long long1 = MathUtils.addAndCheck((-1258L), (-1258L));
      boolean boolean0 = MathUtils.equals(0.10526403784751892, (-3842.487), 19);
      int int0 = 1409;
      double double1 = MathUtils.factorialLog(1409);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.gcd((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.sign(0);
      byte byte0 = MathUtils.sign((byte) (-80));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4383.841300678775);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte) (-80);
      doubleArray0[3] = (double) (byte) (-80);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) (byte) (-80);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((long) 0);
      float float0 = MathUtils.round((float) 1L, (int) (byte) (-1));
      int int2 = MathUtils.indicator(0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      float float1 = MathUtils.sign(164.1625F);
      double double2 = MathUtils.binomialCoefficientDouble(1, (-3687));
      long long1 = MathUtils.pow((-9218868437227405313L), 104);
      double double3 = MathUtils.round((double) 104, 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int4 = bigInteger0.signum();
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      long long2 = MathUtils.lcm((long) 0, (-525L));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0952233225107193, 0.0);
      boolean boolean1 = MathUtils.equals(2255.50731931, 0.0952233225107193);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 52);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 52, 1253);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 2044;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2044);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-123.6710892741);
      int int0 = MathUtils.compareTo(707.31, (-123.6710892741), (-123.6710892741));
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-123.6710892741));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      float float0 = MathUtils.indicator((float) 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 1.0F;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = MathUtils.indicator((-1876.2F));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 209;
      // Undeclared exception!
      try { 
        MathUtils.factorial(209);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.sinh(6.283185307179586);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 267.74489404101644;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 267.74489404101644;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 267.74489404101644;
      doubleArray0[5] = (-837.2744023983);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1827, 1);
      float float0 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      float float1 = bigInteger0.floatValue();
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 1);
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger4 = bigInteger3.xor(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger3, bigInteger3);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 372L);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.0, 9.219544613762692E-9, 9.219544613762692E-9);
      long long0 = MathUtils.pow((long) 0, 1025);
      long long1 = MathUtils.pow(2068L, 2068L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.pow((-2095L), 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.factorialLog(18);
      double double1 = MathUtils.cosh(1478.1654189657802);
      double double2 = MathUtils.binomialCoefficientDouble(18, (-1313));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4273.75);
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 18;
      intArray0[2] = 0;
      intArray0[3] = (-1313);
      intArray0[4] = (-1313);
      intArray0[5] = 18;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double3 = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(4273.75, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4273.75;
      doubleArray0[1] = (double) (-1313);
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,273.75 >= -1,313)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.compareTo(2260.0, 2097.088767135744, (-1944.9609166369));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.sign((byte)8);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      byte byte1 = MathUtils.sign((byte) (-55));
      long long0 = MathUtils.binomialCoefficient((byte)1, (byte) (-55));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1944.9609166369);
      doubleArray0[6] = (double) (byte) (-55);
      double double0 = MathUtils.safeNorm(doubleArray0);
      try { 
        MathUtils.pow(691L, (long) (byte) (-55));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (691^-55)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2084;
      intArray0[1] = 3216;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 156;
      intArray0[6] = 1619;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.indicator(2163L);
      int int0 = MathUtils.compareTo(2163L, 2163L, 2.2250738585072014E-308);
      double double0 = MathUtils.round((double) 2163L, 3268, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3268;
      doubleArray0[1] = (double) 2163L;
      doubleArray0[2] = (double) 3268;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.cosh(3268.0);
      short short0 = MathUtils.sign((short)27);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.lcm(3268, 197);
      boolean boolean0 = MathUtils.equals((-3595.415415618234), 3268.0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2163.0;
      doubleArray1[1] = 1.625;
      doubleArray1[2] = 2.2250738585072014E-308;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(219, 9);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 219;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (219 < \u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-3839L), 9193070505571053912L);
      short short0 = MathUtils.sign((short)0);
      short short1 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = MathUtils.indicator(159.58F);
      long long0 = MathUtils.indicator(364L);
      int int0 = MathUtils.indicator(98);
      float float1 = MathUtils.round(0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double double0 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equals(2.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.compareTo(3909.5533622983, 863.9489907303, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-4639L), (-4639L));
      long long1 = MathUtils.mulAndCheck(0L, (-4639L));
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.cosh(0);
      long long2 = MathUtils.binomialCoefficient(0, 0);
      int int1 = (-1281);
      int int2 = MathUtils.pow((-1281), 0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1281);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.9999997615814209, 55.6246087, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.pow(46, (long) 46);
      int int1 = MathUtils.pow(0, (long) 0);
      double double0 = 538.442563467053;
      double double1 = MathUtils.normalizeAngle(1, 538.442563467053);
      boolean boolean0 = MathUtils.equals(538.442563467053, 538.442563467053, 538.442563467053);
      int int2 = MathUtils.indicator(0);
      int int3 = 0;
      int int4 = MathUtils.subAndCheck(0, 1);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 223, 539);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 539, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.pow((-3761), 1708L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-696344511), (-696344511));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1234, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1234;
      doubleArray1[1] = (double) 1234;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (double) 1234;
      doubleArray1[4] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = MathUtils.addAndCheck(1234, 0);
      int int1 = MathUtils.hash(680.804501674911);
      long long0 = MathUtils.gcd((long) (-568869664), 4499201580859392L);
      float float0 = MathUtils.indicator(702.0F);
      long long1 = MathUtils.factorial(0);
      byte byte0 = MathUtils.sign((byte)2);
      int[] intArray0 = new int[6];
      intArray0[0] = 256;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (-568869664);
      intArray0[3] = 1234;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.lcm(496, 256);
      double double1 = MathUtils.sign((double) 1234);
      double double2 = MathUtils.distance(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(258, 2864);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 258, k = 2,864
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathUtils.scalb(2092.8454067736884, (-1199));
      long long0 = MathUtils.addAndCheck((-4107L), (-4107L));
      double double1 = MathUtils.normalizeAngle((-7.856036055720042E258), (-588.0));
      double double2 = MathUtils.sinh((-961.14632189));
      long long1 = MathUtils.binomialCoefficient(160, (-1199));
      long long2 = MathUtils.subAndCheck(6227020800L, (-2674L));
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 1L, (double) (-4107L), 24);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)17);
      boolean boolean0 = MathUtils.equals((double) (byte)17, (double) (byte)17, (double) (byte)17);
      double double0 = MathUtils.factorialDouble((byte)17);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)17;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.round((-3392.3040528), (int) (byte)17);
      double double3 = MathUtils.round((double) (byte)1, (int) (byte)17);
      long long0 = MathUtils.sign(99L);
      long long1 = MathUtils.lcm((long) (byte)1, 0L);
      short short0 = MathUtils.indicator((short) (byte)1);
      double double4 = MathUtils.safeNorm(doubleArray0);
      double double5 = MathUtils.factorialDouble(2660);
      float float0 = MathUtils.sign((float) (byte)17);
      double double6 = MathUtils.distance(doubleArray0, doubleArray0);
      float float1 = MathUtils.sign((float) 0L);
      int int0 = MathUtils.hash(0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-3392.3040528), (double) 0.0F);
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 2660;
      intArray0[2] = (int) (byte)17;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 2660;
      intArray0[5] = 0;
      intArray0[6] = (-55);
      double double7 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-2518);
      double double1 = MathUtils.round(0.0, (-2518));
      long long0 = (-3183605296591799669L);
      try { 
        MathUtils.pow((-3183605296591799669L), (-3183605296591799669L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,183,605,296,591,799,669^-3,183,605,296,591,799,669)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
