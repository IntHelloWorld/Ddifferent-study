/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:26:56 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = MathUtils.round((-1428.044F), 1, 1);
      int int0 = MathUtils.gcd(464, 464);
      double double0 = MathUtils.scalb(10.0, 70);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1428.0F);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 110.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1428.0), (-2632.50844626833));
      long long0 = MathUtils.factorial(2);
      int int1 = MathUtils.indicator((-1073741823));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.gcd(950L, 950L);
      double double0 = MathUtils.sign((double) 950L);
      int int0 = 167;
      long long1 = MathUtils.pow(2L, 167);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      float float0 = MathUtils.indicator((float) 950L);
      byte byte0 = MathUtils.indicator((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      byte[] byteArray0 = bigInteger0.toByteArray();
      float float1 = bigInteger0.floatValue();
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 167);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = (-1152.0F);
      float float1 = MathUtils.indicator((-1152.0F));
      long long0 = (-7278142539171889152L);
      long long1 = 9157703397040190617L;
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-7278142539171889152L), 9157703397040190617L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,157,703,397,040,190,617 + -7,278,142,539,171,889,152
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 0.031;
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = 235.13948935;
      doubleArray0[4] = (-2391.2);
      doubleArray0[5] = 698.8;
      double double0 = 17.7931;
      doubleArray0[6] = 17.7931;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-1742);
      int int1 = (-3215);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1742), (-3215));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,742
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(76);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(913.231048537, (-993.01512), 0.167);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 1, 0.167);
      double double1 = MathUtils.indicator(0.0);
      int int1 = MathUtils.subAndCheck(76, 76);
      int int2 = MathUtils.pow(76, 667L);
      float float0 = MathUtils.sign((float) 0);
      long long0 = MathUtils.addAndCheck((-1995L), 667L);
      byte byte0 = MathUtils.sign((byte)50);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double) (-1995L), (-1133.3613603), 1.304E19);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)50;
      intArray0[1] = 76;
      intArray0[2] = (int) (byte)1;
      int[] intArray1 = new int[8];
      intArray1[0] = 76;
      intArray1[1] = 76;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 76;
      intArray1[5] = 0;
      intArray1[6] = 123;
      intArray1[7] = (-1495);
      int int3 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = MathUtils.sign((short)7);
      short short1 = MathUtils.indicator((short)7);
      int int0 = MathUtils.addAndCheck((int) (short)7, (int) (short)1);
      long long0 = MathUtils.pow((long) (short)1, (long) (short)7);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)7;
      intArray0[2] = (int) (short)1;
      intArray0[3] = 8;
      intArray0[4] = (int) (short)1;
      intArray0[5] = 8;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) (short)7;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.sign((double) 7);
      int int2 = (-912);
      try { 
        MathUtils.pow((BigInteger) null, (-912));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-912)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = bigInteger0.longValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-2147483647));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,147,483,647)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.gcd(1484, 1484);
      long long0 = MathUtils.lcm(120L, (long) 1484);
      float float0 = MathUtils.indicator((float) 1484);
      int int1 = (-3550);
      double double0 = MathUtils.binomialCoefficientLog(1836, (-3550));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1484, (-273), 771);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.log(169.67399018, 6.283185307179586);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign(273.1F);
      long long0 = MathUtils.gcd(479001600L, 479001600L);
      long long1 = MathUtils.pow(479001600L, 2185);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-62));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-62);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-62));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,291,845,570^-62)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.indicator(196);
      double double0 = MathUtils.round((double) 0, 1);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      byte byte0 = MathUtils.indicator((byte)27);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1662, (byte)27);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = MathUtils.indicator(835.95F);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(128);
      long long0 = MathUtils.addAndCheck((long) 128, (long) 128);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.abs();
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      long long1 = MathUtils.subAndCheck(2935890503282001226L, 0L);
      short short0 = MathUtils.indicator((short) (-2432));
      int int0 = MathUtils.gcd(128, (int) (short) (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1309);
      intArray0[1] = 1030;
      intArray0[2] = 21;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 3;
      intArray0[6] = 161;
      intArray0[7] = 168;
      int[] intArray1 = new int[7];
      intArray1[0] = 21;
      intArray1[1] = 3;
      intArray1[2] = 161;
      intArray1[3] = 21;
      intArray1[4] = 0;
      intArray1[5] = 168;
      intArray1[6] = 3;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(238, 238);
      int[] intArray0 = new int[2];
      intArray0[0] = 238;
      intArray0[1] = 238;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.compareTo((-6.663542893624021E-14), 0.0, 0.0);
      int int1 = MathUtils.indicator((-1));
      double double0 = MathUtils.normalizeAngle(0.0, 1114.36644823);
      float float0 = MathUtils.sign((-5295.356F));
      double double1 = MathUtils.cosh((-5295.356F));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1114.36644823;
      doubleArray0[5] = (double) (-5295.356F);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3334.039448);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-5295.356F);
      doubleArray1[4] = (double) (-1.0F);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(103, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 103;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 103;
      intArray1[2] = 103;
      intArray1[3] = 103;
      intArray1[4] = 103;
      intArray1[5] = 0;
      intArray1[6] = 103;
      intArray1[7] = 103;
      intArray1[8] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 720L;
      long long1 = MathUtils.lcm(720L, 720L);
      int int0 = MathUtils.indicator((-2282));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = MathUtils.normalizeAngle(6.283185307179586, 6.283185307179586);
      int int0 = 2145;
      int int1 = (-3136);
      int int2 = MathUtils.addAndCheck(2145, (-3136));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 868.97369;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (double) (-3136);
      double double2 = (-721.19423261266);
      doubleArray0[5] = (-721.19423261266);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (6.283 <= 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(3584);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3584;
      doubleArray0[1] = (double) 3584;
      doubleArray0[2] = (double) 3584;
      doubleArray0[3] = (double) 3584;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (double) 3584;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.hash((-5367.0));
      double double0 = MathUtils.sign(0.5);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = (-1652);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-1061882112), (-1652));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.003;
      doubleArray0[4] = (-1320.815);
      doubleArray0[5] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1791.1708235);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-449.7323);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign((-1000.2320884112335));
      double double1 = MathUtils.binomialCoefficientDouble(20, 20);
      double double2 = MathUtils.factorialDouble(20);
      long long0 = MathUtils.gcd(0L, (long) 20);
      int int0 = MathUtils.subAndCheck(20, 20);
      int int1 = MathUtils.sign(20);
      long long1 = MathUtils.addAndCheck((long) 1, (-5190L));
      double double3 = MathUtils.round((-449.7323), (-4161));
      double double4 = MathUtils.log(1.1102230246251565E-16, 0L);
      int int2 = MathUtils.pow(0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3.141592653589793, (-3833.0298));
      double double5 = MathUtils.sinh(2.43290200817664E18);
      double double6 = MathUtils.scalb((-1090.171256264), 0);
      long long2 = MathUtils.lcm(0L, (long) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      double double7 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.pow((-425), 6L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      try { 
        MathUtils.pow((-236443727), (-425));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-236,443,727^-425)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = MathUtils.gcd(362880L, 362880L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 362880L;
      doubleArray0[2] = (double) 362880L;
      doubleArray0[3] = (double) 362880L;
      doubleArray0[4] = (double) 362880L;
      doubleArray0[5] = (double) 362880L;
      doubleArray0[6] = (double) 362880L;
      doubleArray0[7] = (double) 362880L;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.gcd((-1285270271), 0);
      int int2 = MathUtils.hash((double) (-1285270271));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1285270271);
      doubleArray1[1] = (double) 2115184362;
      doubleArray1[2] = (double) 1285270271;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = (double) 362880L;
      doubleArray1[5] = (double) 362880L;
      doubleArray1[6] = (double) (-1285270271);
      doubleArray1[7] = (-0.5);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.compareTo(1363.5966, (-7197.01566097), 1363.5966);
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      int int1 = 632;
      int int2 = MathUtils.subAndCheck(1, 632);
      try { 
        MathUtils.pow(632, (-2419));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (632^-2,419)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = MathUtils.sign((-1934.02F));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.factorialLog(136);
      int int0 = MathUtils.gcd(981, 236);
      double double1 = MathUtils.factorialLog(0);
      int int1 = MathUtils.pow(136, 981);
      long long0 = MathUtils.factorial(0);
      byte byte0 = MathUtils.indicator((byte)62);
      int int2 = MathUtils.pow(1, (long) 236);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-341.19193760363), (-3.141592653589793));
      try { 
        MathUtils.pow(121645100408832000L, (-963L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (121,645,100,408,832,000^-963)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.log(3.834E-20, 1L);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 1L, (-3567.06));
      float float0 = MathUtils.round(1.0F, 749, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 749;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-287.73698592);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-3567.06);
      doubleArray0[4] = (double) 0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = null;
      long long0 = 2288L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2288L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (-1235.427);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.19999999999923582;
      doubleArray0[6] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.lcm((long) 1778656551, (long) 1778656551);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1778656551, 0.0, 1778656551);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.lcm(1783, 1783);
      byte byte0 = (byte)61;
      byte byte1 = MathUtils.indicator((byte)61);
      int int1 = MathUtils.hash((double) (byte)1);
      double double0 = MathUtils.cosh(1783);
      int int2 = 0;
      int int3 = MathUtils.sign(0);
      double double1 = (-210.935);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (-210.935), 1072693248);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, (-1482));
      long long0 = MathUtils.gcd(1307674368000L, (long) 0);
      int int2 = MathUtils.hash((double) 0);
      long long1 = MathUtils.lcm((long) 0, 0L);
      double double0 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("(EB|q");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.(EB|q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 213;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 187;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.indicator((double) 0);
      long long0 = MathUtils.gcd((long) 0, 1280L);
      long long1 = MathUtils.indicator((-102L));
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.lcm(802, (-2917));
      boolean boolean0 = MathUtils.equals(1.0, 567.3797771931647, 2902);
      short short0 = MathUtils.indicator((short)2);
      short short1 = MathUtils.sign((short)1);
      short short2 = MathUtils.indicator((short)36);
      double double1 = MathUtils.log((short)1, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-960.9045014852);
      doubleArray0[2] = (double) 1280L;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 187;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-960.905 < 1,280)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      byte byte0 = (byte)2;
      byte byte1 = MathUtils.indicator((byte)2);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)2;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-946);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-946));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -946
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      int int0 = MathUtils.mulAndCheck(0, 67);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 67;
      intArray0[2] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 4047;
      double double0 = MathUtils.round((-2579.8), 4047);
      int int1 = (-1183);
      double double1 = MathUtils.scalb((-3322.0), (-1183));
      float float0 = MathUtils.round(1228.448F, 4047);
      // Undeclared exception!
      try { 
        MathUtils.round((-3322.0), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // Underflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1569;
      intArray0[1] = 0;
      intArray0[2] = 257;
      intArray0[3] = 63;
      intArray0[4] = 2468;
      intArray0[5] = 0;
      intArray0[6] = (-299);
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.indicator((float) 1569);
      int int0 = MathUtils.pow(0, (long) 1569);
      int int1 = MathUtils.lcm(2924, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2935890503282001226L, 2432902008176640000L);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2935890503282001226L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.sign((int) (short)1);
      long long1 = MathUtils.pow((long) 1, 997);
      int int1 = MathUtils.lcm(1, 3281);
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 2432902008176640000L, (double) 3281, (int) (short)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-103);
      try { 
        MathUtils.pow((-103), Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-103^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      float float0 = MathUtils.round((float) 0, 464);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short)297);
      float float1 = MathUtils.round((-1030.0F), 0);
      int int3 = 0;
      int int4 = MathUtils.mulAndCheck(0, 4818);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-874.42081586788), (-874.42081586788), 515);
      double double0 = MathUtils.round((-874.42081586788), 515);
      int int0 = MathUtils.pow(515, (long) 515);
      double double1 = MathUtils.normalizeAngle(3294198.0, 2.4384203044354907E-8);
      int int1 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.indicator((long) 515);
      double double2 = MathUtils.sign(3294198.0);
      double double3 = MathUtils.scalb(1.0, 381398555);
      double double4 = MathUtils.normalizeAngle(381398555, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 515;
      doubleArray0[1] = (-874.42081586788);
      doubleArray0[2] = 1.0010415475915505E-146;
      doubleArray0[3] = 1.9877241253852844;
      doubleArray0[4] = (double) 381398555;
      double double5 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (-1));
      double double6 = MathUtils.round((-632.533242087572), 12, 0);
      long long1 = MathUtils.mulAndCheck((long) 515, (long) 381398555);
      long long2 = MathUtils.indicator((long) (short) (-1));
      long long3 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0010415475915505E-146);
      long long4 = MathUtils.indicator((long) 0);
      double double7 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((long) 0);
      double double2 = MathUtils.sinh(0.0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 1L;
      doubleArray1[5] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      short short0 = MathUtils.indicator((short)168);
      long long1 = MathUtils.gcd((-1L), 1L);
      double double3 = MathUtils.log(0.0, 0);
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.lcm(807, 2410);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-108));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short) (-2594));
      int int0 = 0;
      try { 
        MathUtils.pow(0, (-660));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-660)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.gcd(87178291200L, (long) (short)0);
      long long2 = MathUtils.indicator(87178291200L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round(168.43228F, 104, 0);
      int int1 = MathUtils.gcd(0, 21);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (double) 21, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.compareTo(2059.8091, 2059.8091, (-0.2499999997677497));
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1609));
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1609);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 21);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 21;
      doubleArray0[3] = (double) 21;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = 0;
      int int3 = MathUtils.pow(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.5, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.lcm(31, 31);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.sign(142L);
      float float0 = MathUtils.round(652.8F, 1177);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 142L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.gcd((-2362), (-2362));
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)73);
      int int1 = (-732);
      // Undeclared exception!
      try { 
        MathUtils.equals((-2997.267849666), (-2089.5616786175938), (-732));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4254.242670332253);
      doubleArray0[1] = 5538.641920012105;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3538.649595739981;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3538.649595739981, 7829.251367635466, 1614);
      boolean boolean2 = MathUtils.equals((-4254.242670332253), 3538.649595739981, 0.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4580.020785;
      doubleArray0[1] = 1379.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (4,580.021 > 1,379)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.indicator((-1249.910135719215));
      double double1 = MathUtils.binomialCoefficientDouble(1827, 0);
      int int0 = MathUtils.pow(0, 3628800L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = 1296.32F;
      int int0 = (-1793);
      // Undeclared exception!
      try { 
        MathUtils.round(1296.32F, (-1793), (-1793));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,793, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1827, 0);
      int int0 = MathUtils.pow(0, 3628800L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      short short0 = MathUtils.indicator((short)240);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 13.0;
      int int0 = (-161);
      double double1 = MathUtils.round(13.0, (-161));
      float float0 = MathUtils.indicator((float) (-161));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-161), (-161));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -161
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1655.5722, 1655.5722);
      long long0 = MathUtils.pow((-2779L), 0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-702), mockRandom0);
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = MathUtils.hash(0.0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.15, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2084);
      float float0 = MathUtils.round((float) 2084, 2084, 0);
      long long0 = MathUtils.sign(6402373705728000L);
      byte byte0 = MathUtils.sign((byte) (-111));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2685.780086319837;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      boolean boolean1 = MathUtils.equals(1.5, (double) 2084);
      int int0 = MathUtils.mulAndCheck(0, 2900);
      double double1 = MathUtils.round(1431.451367159243, 0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)0, (double) (byte)0);
      int int0 = MathUtils.subAndCheck((int) (byte)0, (int) (byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int1 = bigInteger0.intValueExact();
      short short0 = bigInteger0.shortValueExact();
      int int2 = bigInteger0.signum();
      byte byte1 = bigInteger0.byteValueExact();
      int int3 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      String string0 = bigInteger0.toString();
      double double0 = MathUtils.factorialLog((byte)0);
      float float0 = MathUtils.round((float) 0, 115, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (byte)0, (double) 115, (double) 115);
      double double1 = MathUtils.factorialLog(21);
      byte byte2 = MathUtils.sign((byte)0);
      double double2 = MathUtils.normalizeAngle(1.4456468917292502E-16, 0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 203;
      // Undeclared exception!
      try { 
        MathUtils.factorial(203);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(52.426928, (-1989.6583), 3096);
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(102, 0);
      int int1 = MathUtils.sign(0);
      int int2 = (-4492);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-4492));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,492
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.lcm(106L, (long) 1484);
      float float0 = MathUtils.indicator((float) 1484);
      double double0 = MathUtils.binomialCoefficientLog(1836, 1484);
      double double1 = MathUtils.cosh(1244L);
      byte byte0 = (byte) (-79);
      byte byte1 = MathUtils.sign((byte) (-79));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1244L, (double) 1484);
      long long1 = MathUtils.addAndCheck(0L, (long) 1484);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4194304, 4194304);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 759;
      int int1 = 15;
      double double0 = MathUtils.binomialCoefficientLog(759, 15);
      int int2 = (-1259);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1259));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,259
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.pow((-1798), 3308);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-1076);
      int int1 = MathUtils.sign((-1076));
      double double0 = MathUtils.log((-1), (-1076));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1076);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (-15));
      int int2 = MathUtils.mulAndCheck((int) (short) (-1), (-3257));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1), (-3257), (-1076));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = (byte) (-62);
      byte byte1 = MathUtils.indicator((byte) (-62));
      float float0 = (-2936.368F);
      float float1 = MathUtils.round((-2936.368F), (int) (byte) (-62));
      double double0 = MathUtils.factorialDouble(63);
      int int0 = MathUtils.sign((int) (byte) (-62));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 10.0;
      int int0 = 403;
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 10.0, 403);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = MathUtils.pow(8, 8);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int1 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 8);
      short short0 = MathUtils.sign((short) (-4025));
      int int2 = MathUtils.mulAndCheck(11, 1392);
      int int3 = MathUtils.indicator(0);
      int int4 = MathUtils.compareTo(2931.84343904, 714.34022591422, 4.455505956692757);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.gcd((-1860), (-1860));
      int int1 = MathUtils.addAndCheck(1860, (-584));
      double double0 = MathUtils.sign((double) (-584));
      int[] intArray0 = new int[2];
      intArray0[0] = 1860;
      intArray0[1] = (-584);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.gcd(0L, 0L);
      float float0 = MathUtils.indicator((float) 1860);
      double double1 = MathUtils.scalb(1.0F, 237);
      int int3 = MathUtils.addAndCheck((-1860), 1860);
      int int4 = MathUtils.hash(2517.39093855387);
      long long1 = MathUtils.mulAndCheck(24L, (long) 1773843956);
      long long2 = MathUtils.gcd(24L, 3266L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, (double) 1773843956, (-18.8472871933));
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientDouble(1860, (-584));
      int int5 = MathUtils.gcd((-6232), 237);
      long long3 = MathUtils.mulAndCheck((-992L), (long) 1773843956);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      long long0 = (-705L);
      try { 
        MathUtils.pow(0, (-705L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-705)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-514.645282);
      doubleArray0[1] = (-964.93954077);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-0.25);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-514.645 >= -964.94)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-83));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-83);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-83);
      doubleArray0[5] = (double) (byte) (-83);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.indicator((double) (byte) (-83));
      int int0 = MathUtils.gcd((-1746), (int) (byte) (-83));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.mulAndCheck(31, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 2384.1543573888, (double) 0);
      double double1 = MathUtils.round((double) 0, 31);
      int int2 = MathUtils.mulAndCheck(31, (-911));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(7910884519577875640L, 6L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-813.66241804), (-813.66241804));
      double double1 = MathUtils.sign((-813.66241804));
      boolean boolean0 = MathUtils.equals((-813.66241804), (-1.0));
      byte byte0 = MathUtils.sign((byte)39);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1484;
      int int1 = MathUtils.gcd(1484, 1484);
      long long0 = MathUtils.lcm(106L, (long) 1484);
      float float0 = MathUtils.indicator((float) 1484);
      double double0 = MathUtils.binomialCoefficientLog(1836, 1484);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1484, (-273), 771);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.pow((-2527L), 1041);
      int int0 = MathUtils.hash(3794.9798607);
      int int1 = MathUtils.pow(1041, 31);
      int int2 = MathUtils.gcd((-509), (-509));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = bigInteger0.clearBit(55);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 9193070505571053912L);
      double double0 = MathUtils.indicator(1406.182);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1093.3475822), 6);
      int int0 = MathUtils.addAndCheck(6, 0);
      double double1 = MathUtils.binomialCoefficientDouble(199, 6);
      byte byte1 = MathUtils.sign((byte)105);
      boolean boolean1 = MathUtils.equals((-2038.92959456), (double) 9193070505571053912L);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2677.37);
      doubleArray0[1] = (-421.4206);
      doubleArray0[2] = 4534.427;
      doubleArray0[3] = (-479.61623);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(18, (-3534));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short short0 = (short)67;
      short short1 = MathUtils.sign((short)67);
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      float float0 = MathUtils.indicator((-1140.8744F));
      long long2 = MathUtils.gcd(0L, (long) (short)67);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short short0 = MathUtils.sign((short)61);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.round((-103.83557754), 1210, (int) (short)61);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1497.88346879959, 0.0, 1);
      long long0 = MathUtils.factorial(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round((float) 1L, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1L, 0.0);
      int int0 = MathUtils.compareTo(1L, 1, 1076.67107353007);
      double double0 = MathUtils.log(1076.67107353007, 1497.88346879959);
      double double1 = MathUtils.sinh(1739.219846190042);
      double double2 = MathUtils.factorialDouble(0);
      double double3 = MathUtils.log(367.0, 0.0);
      long long1 = MathUtils.indicator((long) 0);
      double double4 = MathUtils.round((double) 1.0F, 0, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long2 = MathUtils.addAndCheck((-5034868814120038111L), (long) 0);
      int int2 = MathUtils.compareTo(0.008333333333333333, 0.0, 1L);
      float float1 = MathUtils.indicator((-369.468F));
      long long3 = MathUtils.factorial(0);
      float float2 = MathUtils.round(0.0F, (-3767));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.log(1813.397343605471, 0);
      int int2 = (-2196);
      int int3 = 0;
      int int4 = MathUtils.gcd((-2196), 0);
      int int5 = MathUtils.pow(0, 1682L);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (double) 2196, (-2196));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1250;
      double double0 = MathUtils.round(0.0, 1250);
      boolean boolean0 = MathUtils.equals((double) 1250, 0.0, 1250);
      int int1 = MathUtils.pow(1250, (long) 1250);
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.indicator((float) (short)0);
      double double0 = MathUtils.factorialLog((short)1);
      float float1 = MathUtils.round((float) (short)1, (-1897), 0);
      long long0 = MathUtils.factorial((short)1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 100;
      intArray0[1] = (-1001);
      intArray0[2] = 323;
      intArray0[3] = (-1737);
      intArray0[4] = (-43);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.pow(323, 0L);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      long long1 = MathUtils.indicator(0L);
      double double1 = MathUtils.cosh(6.283185307179586);
      long long2 = MathUtils.addAndCheck((-1833L), (long) 100);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.indicator((-2175.86644623));
      double double1 = MathUtils.scalb((-2175.86644623), 14);
      double double2 = MathUtils.round(1518.9254, 14);
      float float0 = MathUtils.round(0.0F, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      float float1 = bigInteger0.floatValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 97);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 97
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.sinh((-884.7454437));
      int[] intArray0 = new int[8];
      intArray0[0] = (-1161);
      intArray0[1] = 21;
      intArray0[2] = (-2349);
      int int0 = 197;
      intArray0[3] = 197;
      int int1 = (-1145);
      intArray0[4] = (-1145);
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int2 = 944;
      intArray0[7] = 944;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.binomialCoefficient(197, 197);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("org.apache.commons.math.util.MathUtils$1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.org.apache.commons.math.util.MathUtils$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1468;
      int int1 = MathUtils.pow(1468, (long) 1468);
      double double0 = MathUtils.sign(2159.8753893);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-1.0F));
      double double1 = MathUtils.cosh(0.0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, 2159.8753893);
      long long0 = MathUtils.gcd((long) 1468, (long) 1468);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1246.133460447975;
      doubleArray0[1] = (-2847.1656);
      doubleArray0[2] = (-1195.542005179621);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4244.949718;
      doubleArray0[5] = 3914.2;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, (long) (-328665241));
      int int1 = 0;
      double double0 = MathUtils.factorialLog(0);
      float float0 = MathUtils.sign((-1428.044F));
      int int2 = (-1614);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0, (double) 0L, (-1614));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1801.719495897);
      doubleArray0[1] = 0.6366197723675814;
      doubleArray0[2] = 1.570796251296997;
      doubleArray0[3] = 3327.80772;
      doubleArray0[4] = 3061.9;
      doubleArray0[5] = (-2211.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3061.9);
      int int1 = MathUtils.addAndCheck((-24), (-24));
      long long0 = MathUtils.sign((-2010L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = 0;
      int int3 = 9;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 9);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      int int1 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 153);
      double double0 = MathUtils.factorialLog(0);
      int int1 = MathUtils.indicator(0);
      int int2 = MathUtils.sign(18);
      long long0 = MathUtils.gcd((long) 0, 1L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 153;
      doubleArray0[2] = (double) 153;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 153;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 153;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(153.0, 1096.191048935);
      boolean boolean1 = MathUtils.equals(10.0, 3402.34, 3402.34);
      short short0 = MathUtils.sign((short) (-2783));
      boolean boolean2 = MathUtils.equalsIncludingNaN(1096.191048935, (-540.5467));
      double double2 = MathUtils.cosh((-1049.0));
      double double3 = MathUtils.factorialDouble(15);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1475.536374), (-1475.536374));
      double double1 = MathUtils.scalb((-1475.536374), 0);
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.compareTo((-1475.536374), 0, 0.5);
      long long0 = MathUtils.subAndCheck(1921L, 1921L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1475.536374);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.lcm(2594L, (-1L));
      long long1 = MathUtils.sign((-1L));
      int int0 = MathUtils.pow(709, 709);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = 2819561105158720014L;
      long long1 = MathUtils.sign(2819561105158720014L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 2819561105158720014L, 0.0, (-647));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = bigInteger0.byteValueExact();
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 138);
      long long0 = MathUtils.binomialCoefficient(138, 138);
      double double1 = MathUtils.factorialDouble(138);
      float float0 = MathUtils.round((-3025.876F), (-187));
      int[] intArray0 = new int[2];
      intArray0[0] = (-187);
      intArray0[1] = (-187);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(167, 59);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.scalb((byte)0, 66);
      double double1 = MathUtils.indicator((-1993.4253447233));
      double double2 = MathUtils.round((double) (byte)0, 66, 0);
      long long0 = MathUtils.pow((-302932621132653753L), 59);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 66;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 167;
      doubleArray0[3] = (-1.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1507, 3728);
      double double0 = MathUtils.scalb(5618096, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3728;
      doubleArray0[1] = (double) 5618096;
      doubleArray0[2] = (double) 5618096;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 5618096.0;
      doubleArray0[5] = 5618096.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int0 = MathUtils.sign(2506);
      double double1 = 1492.9859570557396;
      // Undeclared exception!
      try { 
        MathUtils.equals(1492.9859570557396, (double) 1, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.indicator(166);
      float float0 = MathUtils.sign((-655.0F));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(588.728392, 588.728392, 0.0);
      double double0 = MathUtils.sinh(10.0);
      long long0 = MathUtils.binomialCoefficient(57, 57);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 10.0;
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1543), (-1543));
      long long0 = MathUtils.mulAndCheck((long) (-1543), (long) 0);
      long long1 = MathUtils.indicator((-3003L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3003L);
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3465.969482873227), (-3465.969482873227), (-3465.969482873227));
      // Undeclared exception!
      try { 
        MathUtils.round(1.1102230246251565E-16, 588, 588);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.gcd((-388L), (-388L));
      float float0 = MathUtils.indicator((float) (-388L));
      int[] intArray0 = new int[1];
      intArray0[0] = 72;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      double double0 = MathUtils.log(1.225743062930824E-8, 0.0);
      short short0 = MathUtils.sign((short) (-945));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      try { 
        MathUtils.pow((-4575L), (-4576));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,575^-4,576)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 305.2;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(0L, 0L);
      long long1 = MathUtils.pow(0L, 0L);
      long long2 = MathUtils.lcm(0L, (-3183605296591799669L));
      double double1 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.pow(0, 0L);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      double double2 = MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.factorialDouble(91);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 91, 9193070505571053912L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 1227L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equals((double) (short)0, (-874.050457188194));
      long long0 = MathUtils.addAndCheck(0L, (long) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-660));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-660);
      doubleArray0[1] = (double) (short) (-660);
      doubleArray0[2] = (double) (short) (-1);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.lcm((-2691), 1199);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.factorialLog(8);
      double double1 = MathUtils.log(10.60460290274525, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(5629);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1.0), (-1347.0));
      int int0 = MathUtils.pow(930, (long) 930);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1.0), (-1.0), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1967);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L, (-1161.057366832865));
      int int0 = MathUtils.pow(0, 3891L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.normalizeAngle(0.01745329052209854, (-56.71729));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-959.3);
      doubleArray0[1] = (-1199.6321);
      doubleArray0[2] = 0.6366197723675814;
      doubleArray0[3] = (-226.19820758141);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-226.19820758141));
      short short0 = MathUtils.indicator((short)3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 3.141592653589793);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 21);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 21
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-1102.8);
      boolean boolean0 = MathUtils.equals((-1102.8), (-1102.8), (-1102.8));
      int int0 = (-1751);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1751));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,751
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.gcd(950L, 950L);
      double double0 = MathUtils.sign((double) 950L);
      int int0 = 167;
      long long1 = MathUtils.pow(2L, 167);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long2 = MathUtils.binomialCoefficient(167, 167);
      float float0 = MathUtils.indicator((float) 950L);
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.indicator(63);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.remainder(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      int int1 = bigInteger0.intValue();
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger4 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.clearBit(79);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 2047L);
      BigInteger bigInteger8 = bigInteger7.multiply(bigInteger0);
      BigInteger bigInteger9 = bigInteger0.andNot(bigInteger7);
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger10 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.pow(127L, 451L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1051.0), 2497.76662176311);
      double double0 = MathUtils.sinh((byte)0);
      byte byte0 = MathUtils.indicator((byte)127);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1912);
      double double0 = MathUtils.sinh(1765.17866);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      float float1 = MathUtils.indicator((float) 0);
      byte byte0 = MathUtils.indicator((byte) (-87));
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      double double2 = MathUtils.sinh(0.0F);
      long long1 = MathUtils.subAndCheck(0L, (-2122L));
      double double3 = MathUtils.normalizeAngle(0, 0.0F);
      int int0 = MathUtils.subAndCheck(5016, 0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-264);
      intArray0[1] = 4536;
      intArray0[2] = 0;
      int int0 = 552;
      intArray0[3] = 552;
      double double0 = MathUtils.distance(intArray0, intArray0);
      try { 
        MathUtils.pow(0, (-424L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-424)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = (-2967.336F);
      int int0 = 618;
      // Undeclared exception!
      try { 
        MathUtils.round((-2967.336F), 618, 618);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 618, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.round(1585.512, 76, 76);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.cosh(6.283185307179586);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(2042.1466395048285, (-492.5442));
      int int0 = MathUtils.gcd((-970), (-970));
      long long0 = MathUtils.mulAndCheck((-162L), (long) 970);
      long long1 = MathUtils.lcm((-162L), 0L);
      long long2 = MathUtils.indicator(0L);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double2 = MathUtils.binomialCoefficientLog(2339, 156);
      float float0 = Float.NaN;
      float float1 = MathUtils.round(Float.NaN, 94, 0);
      long long3 = MathUtils.gcd((long) 156, (-904L));
      double double3 = MathUtils.round((-492.5442), 1989);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-302932621132653753L), 2753L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2086.9088533848894), (-2086.9088533848894));
      boolean boolean1 = MathUtils.equals((-2086.9088533848894), (-2086.9088533848894), 1.0);
      double double0 = MathUtils.binomialCoefficientLog(66, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 66;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      byte byte0 = MathUtils.indicator((byte) (-74));
      long long0 = MathUtils.binomialCoefficient(0, (-1536));
  }
}
