/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:27:00 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.IntStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.indicator(1507);
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(0, 1);
      long long0 = MathUtils.pow((-520L), 338L);
      double double0 = MathUtils.round((-2684.0527560119763), 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1507);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1004);
      int int1 = 250;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = 756.489039677975;
      boolean boolean0 = MathUtils.equalsIncludingNaN(756.489039677975, 756.489039677975);
      int int0 = 0;
      int int1 = MathUtils.pow(20, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3580.9286739782865, (double) 1, (-2258));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.compareTo(15.0, 15.0, 15.0);
      int int1 = MathUtils.pow(225, 105);
      short short0 = (short) (-1217);
      short short1 = MathUtils.indicator((short) (-1217));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.scalb(2629.42119279224, 943);
      byte byte0 = MathUtils.indicator((byte)12);
      short short0 = MathUtils.indicator((short)1114);
      double double1 = MathUtils.factorialDouble((byte)1);
      long long0 = MathUtils.gcd((long) (byte)1, (long) (short)1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)12;
      doubleArray0[1] = 1.954996886595941E287;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2629.42119279224;
      doubleArray0[5] = (double) (short)1114;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = 1.0;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, (-2605.452548962375));
      int int1 = MathUtils.pow((int) (short)1114, (long) (short)1114);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = 0;
      intArray0[5] = (-748623103);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-748623103), 1.954996886595941E287, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.compareTo(1423.31, 1591.72168, (-2544.6962033699));
      double double0 = MathUtils.sinh((-1399.6374888958264));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 1423.31;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 1591.72168;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = 1423.31;
      doubleArray0[8] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.gcd((-1), 9);
      int int2 = MathUtils.lcm(0, 9);
      int int3 = MathUtils.addAndCheck(0, 0);
      int int4 = MathUtils.lcm((-1), 9);
      long long0 = MathUtils.sign((-4035746434778044925L));
      double double2 = MathUtils.indicator((double) 0);
      int int5 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1212;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1212;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,212)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.compareTo(0L, 1L, (-1551.001031269782));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.pow((-1), 3077L);
      long long1 = MathUtils.addAndCheck((-1141L), 0L);
      long long2 = MathUtils.mulAndCheck(0L, (-493L));
      double double0 = MathUtils.cosh((-444.2999992));
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = 7;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1873.30190978, 1873.30190978, 7);
      long long0 = MathUtils.addAndCheck((long) 7, 362880L);
      long long1 = MathUtils.lcm(9218868437227405312L, 9218868437227405312L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 362887L;
      doubleArray0[1] = (-8.0E298);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 9218868437227405312L;
      doubleArray0[4] = (double) 9218868437227405312L;
      doubleArray0[5] = (double) 362880L;
      doubleArray0[6] = (double) (short)0;
      int int1 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (362,887 >= -80,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = (-231L);
      long long1 = 9154082963658192752L;
      long long2 = MathUtils.pow((-231L), 9154082963658192752L);
      double double0 = MathUtils.cosh(2566461417031214209L);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 61;
      int int1 = 791;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(61, 791);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 61, k = 791
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = 4635.828;
      int int0 = MathUtils.hash(4635.828);
      int int1 = MathUtils.pow((-1216560444), 398);
      double double1 = MathUtils.indicator((double) (-1216560444));
      int int2 = 1313;
      double double2 = MathUtils.scalb(398, 1313);
      long long0 = MathUtils.sign((long) (-1216560444));
      float float0 = MathUtils.round(0.0F, 1313);
      int[] intArray0 = new int[0];
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      int int4 = MathUtils.pow((-1216560444), (long) 398);
      int int5 = MathUtils.sign(0);
      short short0 = (short)2;
      short short1 = MathUtils.sign((short)2);
      int[] intArray1 = new int[5];
      intArray1[0] = (int) (short)2;
      intArray1[1] = 1313;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = (int) (short)2;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.mulAndCheck((-2421), 14);
      double[] doubleArray0 = null;
      int int2 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 1577L;
      long long1 = MathUtils.sign(1577L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator(613.15F);
      long long2 = MathUtils.subAndCheck(720L, 720L);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 613.15F, (-598.80507), 1072693279);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = (-4267615245585081135L);
      long long1 = MathUtils.sign((-4267615245585081135L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2409.1752;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-411.0055782);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign((-3744.4054719496));
      int int0 = MathUtils.lcm(654, 1519);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-923));
      double double1 = MathUtils.scalb(5789.215270421465, 625);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 8.060592924172837E191;
      doubleArray0[1] = (double) 625;
      doubleArray0[2] = (double) (-923);
      doubleArray0[3] = (double) 625;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte byte0 = (byte) (-75);
      byte byte1 = MathUtils.sign((byte) (-75));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.sinh((-694.26));
      int int0 = MathUtils.addAndCheck(2973, 0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.round(6.283185307179586, 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 7.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.pow(260, 0);
      int int1 = MathUtils.compareTo(349.87435309651, (-0.2499999701976776), 0.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1);
      double double2 = MathUtils.distance1(doubleArray1, doubleArray0);
      boolean boolean0 = MathUtils.equals(349.87435309651, 677.86713208936, 95);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int2 = bigInteger0.bitLength();
      int int3 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.negate();
      int int4 = bigInteger1.intValue();
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign((float) 95);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int5 = MathUtils.compareTo(0.0, 0, (-514.24170113));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.round(1.304E19, 15);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (\u221E >= 13,040,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1326;
      int int1 = MathUtils.mulAndCheck(1326, 1326);
      double double0 = MathUtils.normalizeAngle(1758276, 0.0);
      long long0 = MathUtils.lcm(0L, (-820L));
      double double1 = MathUtils.sinh(0.0);
      byte byte0 = (byte)13;
      byte byte1 = MathUtils.indicator((byte)13);
      // Undeclared exception!
      MathUtils.factorialDouble(1758276);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.indicator(4503599627370496L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4503599627370496L;
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (double) 4503599627370496L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 4503599627370496L;
      doubleArray0[6] = (double) 4503599627370496L;
      doubleArray0[7] = (double) 4503599627370496L;
      doubleArray0[8] = (double) 4503599627370496L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.indicator(3339L);
      float float0 = MathUtils.round(2281.443F, 0, 0);
      long long1 = MathUtils.addAndCheck((-265L), (-977L));
      double double0 = MathUtils.scalb(0, 1540);
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.1102230246251565E-16;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int int1 = MathUtils.mulAndCheck(1540, (-1176));
      short short0 = (short)968;
      short short1 = MathUtils.indicator((short)968);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.normalizeAngle(0, 0);
      int int3 = MathUtils.mulAndCheck((-1931), 0);
      boolean boolean0 = MathUtils.equals((double) (-1811040), 1243.090552553);
      int int4 = MathUtils.addAndCheck(0, 0);
      int int5 = MathUtils.hash((double) (-1242L));
      float float1 = MathUtils.sign((-764.0F));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-1.0F), 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-436.204158369668), (double) (-1.0F), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-859.5229), (-562.232275818925), (-2022.0093));
      double double0 = MathUtils.factorialLog(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-22,411^-22,411)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 3769;
      int int1 = MathUtils.sign(3769);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      double double0 = MathUtils.cosh(1);
      int int1 = 252;
      double double1 = MathUtils.factorialDouble(252);
      float float0 = MathUtils.sign(389.19F);
      int int2 = MathUtils.mulAndCheck(1, 0);
      int int3 = MathUtils.subAndCheck(15, 0);
      int int4 = MathUtils.compareTo((-3339.1391309637274), Double.POSITIVE_INFINITY, 1.5430806348152437);
      int int5 = MathUtils.lcm(0, 0);
      double double2 = MathUtils.sinh(0);
      int int6 = MathUtils.compareTo(573.682846905, 15, 1);
      long long0 = 0L;
      long long1 = MathUtils.lcm(0L, (long) (-1));
      short short0 = (short) (-4309);
      short short1 = MathUtils.sign((short) (-4309));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.abs();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      float float1 = bigInteger2.floatValue();
      BigInteger bigInteger3 = bigInteger2.or(bigInteger1);
      try { 
        MathUtils.pow(bigInteger2, (long) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10,000,000,000^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      long long1 = MathUtils.indicator(24L);
      double double0 = MathUtils.log(1750.755431, (-2090.5));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2090.5);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-2090.5);
      doubleArray0[3] = 1750.755431;
      doubleArray0[4] = (-2090.5);
      doubleArray0[5] = 1750.755431;
      doubleArray0[6] = (-2090.5);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2090.5));
      long long2 = MathUtils.addAndCheck(1L, 573L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 439L;
      long long1 = MathUtils.subAndCheck(439L, 494L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 494L;
      doubleArray0[1] = (double) 439L;
      doubleArray0[2] = (double) 439L;
      doubleArray0[3] = (double) 494L;
      doubleArray0[4] = (-1438.820948031);
      doubleArray0[5] = (double) 439L;
      doubleArray0[6] = (double) 439L;
      doubleArray0[7] = (double) 494L;
      doubleArray0[8] = (double) 494L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = bigInteger0.abs();
      BigInteger bigInteger3 = BigInteger.valueOf(494L);
      float float0 = bigInteger3.floatValue();
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger3);
      short short0 = bigInteger0.shortValueExact();
      int int0 = bigInteger0.signum();
      int int1 = (-1008);
      try { 
        MathUtils.pow(bigInteger0, (-1008));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,008)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(304, 304);
      double double0 = MathUtils.round((double) 304, 0);
      int int0 = MathUtils.pow(52, 0);
      long long1 = MathUtils.subAndCheck(24L, 1L);
      float float0 = MathUtils.indicator((-332.018F));
      boolean boolean0 = MathUtils.equals(304.0, (double) 304, 52);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 304);
      long long2 = MathUtils.sign(0L);
      long long3 = MathUtils.pow((-1031L), 304);
      byte byte0 = MathUtils.sign((byte) (-13));
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte) (-13);
      intArray0[3] = (int) (byte) (-13);
      intArray0[4] = 0;
      intArray0[5] = 304;
      intArray0[6] = (int) (byte) (-13);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(304, 304);
      double double0 = MathUtils.round((double) 304, 304);
      int int0 = MathUtils.pow(52, 304);
      long long1 = MathUtils.subAndCheck(24L, 1L);
      float float0 = MathUtils.indicator((-332.018F));
      boolean boolean0 = MathUtils.equals(304.0, (double) 304, 52);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 304);
      long long2 = MathUtils.sign(0L);
      long long3 = MathUtils.pow((-1031L), 304);
      int[] intArray0 = new int[7];
      intArray0[0] = 304;
      intArray0[1] = 0;
      intArray0[4] = 304;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.indicator((double) 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-576.0));
      double double1 = MathUtils.indicator((-576.0));
      int int0 = MathUtils.subAndCheck(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-576.0), 2655.5);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-576.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 5.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 15;
      int int1 = MathUtils.gcd(0, 15);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int2 = 0;
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      float float0 = bigInteger0.floatValue();
      int int3 = bigInteger0.bitLength();
      BigInteger bigInteger2 = BigInteger.ONE;
      int int4 = bigInteger0.bitLength();
      BigInteger bigInteger3 = bigInteger2.andNot(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.and(bigInteger2);
      int int5 = bigInteger2.intValueExact();
      int int6 = bigInteger0.compareTo(bigInteger2);
      int int7 = bigInteger0.bitLength();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 15);
      int int8 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.lcm((long) 15, 1557L);
      short short0 = (short) (-3269);
      // Undeclared exception!
      try { 
        bigInteger3.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double double0 = MathUtils.factorialLog((short)1);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitLength();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger2);
      BigInteger bigInteger4 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger5 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger6 = BigInteger.valueOf(646L);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.round((-3902.1897813), (int) (short)0, (int) (short)1);
      boolean boolean0 = MathUtils.equals(1.176342548272881E-8, (double) (short)0, 1);
      double double2 = MathUtils.scalb(0.0, 0);
      int int1 = MathUtils.hash((double) (short)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 265;
      intArray0[1] = 3136;
      intArray0[2] = 4144;
      int int0 = (-3800);
      intArray0[3] = (-3800);
      intArray0[4] = 1126;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.indicator((double) 4144);
      boolean boolean0 = MathUtils.equals((-510.85917), (double) 1126, (double) 1126);
      int int1 = MathUtils.sign(162);
      long long0 = 4607182418800017408L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(4607182418800017408L, (long) 265);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.factorial(81);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.lcm(201L, 201L);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.signum();
      int int1 = bigInteger0.bitLength();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.pow(89);
      long long1 = bigInteger1.longValueExact();
      BigInteger bigInteger3 = BigInteger.valueOf(4);
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger4 = bigInteger1.gcd(bigInteger2);
      BigInteger bigInteger5 = bigInteger1.shiftRight(0);
      BigInteger bigInteger6 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.cosh(1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)44;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = 1.5430806348152437;
      doubleArray0[3] = (double) 201L;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 201L;
      doubleArray0[6] = (double) (byte)44;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 1.543)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)81);
      byte byte1 = MathUtils.indicator((byte)1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short short0 = MathUtils.sign((short)2800);
      float float0 = MathUtils.sign((float) (short)2800);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (short)1);
      int int0 = MathUtils.indicator((int) (short)1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger4 = bigInteger1.pow(153);
      BigInteger bigInteger5 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger6 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.binomialCoefficient((short)2800, (-2804));
      byte byte0 = MathUtils.indicator((byte) (-88));
      int int1 = MathUtils.compareTo((short)1, (-2360.859491865775), 1);
      double double1 = MathUtils.round((double) (byte) (-1), (-2804));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2804);
      doubleArray0[3] = (double) (short)1;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      short short1 = MathUtils.indicator((short) (-2000));
      boolean boolean2 = MathUtils.equals(1.0, (double) 1L, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-981.5163047567), 0.0, (int) (short) (-2000));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.sign((-247.2974280148));
      int int0 = MathUtils.compareTo((-1.0), (-247.2974280148), (-1.0));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-247.2974280148);
      doubleArray0[3] = (-247.2974280148);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-247.2974280148);
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= -247.297)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-3593), (-3593));
      double double0 = MathUtils.log(0.0, 2374.183960663534);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3593);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = -0.0;
      doubleArray0[5] = (double) 2141L;
      doubleArray0[6] = (double) (-3593);
      doubleArray0[7] = (double) (-3593);
      int int1 = MathUtils.hash(doubleArray0);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("f)RrX20q9c>");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.f)RrX20q9c>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.addAndCheck((-2235), 0);
      double double1 = MathUtils.round((double) 0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int1 = (-1291);
      float float0 = MathUtils.round((float) 0L, (-1291));
      int int2 = 475;
      double double2 = MathUtils.binomialCoefficientDouble(475, (-1291));
      int int3 = 140;
      int int4 = MathUtils.addAndCheck((-4003), 140);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-67.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.sign(2216L);
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = 118;
      // Undeclared exception!
      try { 
        MathUtils.round(2013.15598, 118, (-951));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.subAndCheck((long) 0, 9218868437227405312L);
      double double0 = MathUtils.indicator(1630.804959779);
      float float0 = MathUtils.indicator((float) (-9218868437227405312L));
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, (-1225.13144));
      double double1 = MathUtils.round((double) 0, 0);
      double double2 = MathUtils.cosh((-1.0F));
      long long1 = MathUtils.sign((long) 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1225.13144);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long2 = MathUtils.addAndCheck((long) 0, (-9218868437227405312L));
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      int int1 = MathUtils.mulAndCheck(6695, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.gcd(0, 8);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, 2889.5741083697767, (int) (byte)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.pow(0, 19);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 19;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.factorial(19);
      boolean boolean1 = MathUtils.equals(19.0, 0.1666666505023083, 19);
      long long1 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1085L, 2679L);
      double double0 = MathUtils.binomialCoefficientLog(248, 0);
      float float0 = MathUtils.sign(1580.1F);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (double) 2679L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 67);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.pow(0, 19);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 19;
      doubleArray0[4] = (double) 0;
      long long0 = MathUtils.factorial(19);
      boolean boolean0 = MathUtils.equals(19.0, 0.1666666505023083, 19);
      long long1 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1085L, 1085L);
      double double0 = MathUtils.binomialCoefficientLog(248, 0);
      float float0 = MathUtils.sign(1580.1F);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (double) 1085L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2098L), (-2098L));
      double double0 = MathUtils.log(0L, (-2448.2491349703));
      long long1 = MathUtils.gcd(4503599627370496L, (-2098L));
      byte byte0 = (byte) (-121);
      byte byte1 = MathUtils.indicator((byte) (-121));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2098L);
      doubleArray0[1] = (double) (-2098L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.031;
      doubleArray0[4] = 1.1921056801463227E-8;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (byte) (-121);
      doubleArray0[8] = (double) 2L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.031;
      doubleArray1[2] = (-2448.2491349703);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-2448.2491349703);
      doubleArray1[5] = 1.1921056801463227E-8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0.031 >= -2,448.249)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.factorialLog(3177);
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double1 = MathUtils.log(3177, 0.0);
      int int2 = 12;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 12);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 12
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.lcm(40320L, 40320L);
      float float0 = MathUtils.round((float) 40320L, 1154);
      short short0 = MathUtils.sign((short)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long1 = bigInteger0.longValueExact();
      long long2 = bigInteger0.longValueExact();
      boolean boolean0 = bigInteger0.testBit(1154);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.factorialLog((short)0);
      long long3 = MathUtils.sign(20922789888000L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 18;
      long long0 = MathUtils.pow(2553L, 18);
      boolean boolean0 = MathUtils.equals(0.3333333333332802, 0.3333333333332802);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(138, 138);
      long long0 = MathUtils.pow((long) 138, 1719);
      int int0 = MathUtils.subAndCheck(1719, 1719);
      int[] intArray0 = new int[1];
      intArray0[0] = 138;
      double double1 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 657);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 1715;
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 80, 1715);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 80;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553359L, 4577762542105553359L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.cosh(3.834E-20);
      int int0 = MathUtils.addAndCheck((-998), (-998));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-998);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (double) (-1996);
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = (double) (-1996);
      doubleArray1[7] = 1.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.19999954120254515;
      doubleArray0[1] = (-809.2);
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1694.3212);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(166, 67);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(166, 67);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 0L;
      try { 
        MathUtils.pow(0L, (-510L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-510)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = 18;
      int int2 = MathUtils.addAndCheck(0, 18);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 18, (double) 18, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-322));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-322);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      long long0 = MathUtils.addAndCheck(0L, 3545L);
      int int0 = MathUtils.hash(0.0);
      double double1 = MathUtils.normalizeAngle(3490.0, (-3093.30650629487));
      int int1 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.cosh(0.0);
      int int2 = MathUtils.mulAndCheck((-322), 0);
      long long1 = MathUtils.indicator(0L);
      int int3 = MathUtils.addAndCheck(0, 4671);
      float float0 = MathUtils.indicator((float) 3545L);
      long long2 = MathUtils.indicator((long) 4671);
      double double3 = MathUtils.round(0.0, 0);
      double double4 = MathUtils.binomialCoefficientLog(4671, (-322));
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1322));
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), 63L);
      float float0 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.indicator((-89));
      double double0 = MathUtils.scalb((short) (-1), 0);
      boolean boolean0 = MathUtils.equals((-1.0), (-2661.1479133617277), (double) 1.0F);
      int int2 = MathUtils.lcm((int) (short) (-1), 28);
      int int3 = MathUtils.compareTo(3.9736429850260626E-8, 0.0, (-806.906239183));
      long long1 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-63L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (short) (-1322);
      doubleArray0[4] = 3.9736429850260626E-8;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int4 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.scalb((-1), (short) (-1322));
      double double2 = MathUtils.cosh((-1));
      int int5 = MathUtils.subAndCheck(11, (-1774));
      int int6 = MathUtils.hash(4819.2540596201);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1 >= -1,322)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = MathUtils.indicator(2537.3F);
      int int0 = MathUtils.lcm((-1251), 36);
      double double0 = MathUtils.log(2537.3F, 36);
      float float1 = MathUtils.round(1.0F, 36);
      double double1 = 850.0;
      double double2 = MathUtils.log((-1251), 850.0);
      int int1 = MathUtils.addAndCheck((-1251), 36);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(2047L, 1065L);
      double double1 = (-2389.73964964661);
      boolean boolean0 = MathUtils.equals((-2389.73964964661), Double.NEGATIVE_INFINITY);
      int int0 = (-1549);
      int int1 = MathUtils.gcd((-1549), (-1549));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1549), 1549);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,549, k = 1,549
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = MathUtils.indicator((-1396.0717F));
      int int0 = MathUtils.lcm((-484), (-484));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(1169.6039F, (-324), (-324));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -324, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0L);
      long long2 = MathUtils.indicator(2314L);
      int int0 = 1973;
      int int1 = MathUtils.subAndCheck(1973, 1973);
      long long3 = MathUtils.binomialCoefficient(1973, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = 0;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2546));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,546
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = MathUtils.indicator((-1396.0717F));
      try { 
        MathUtils.pow((-135L), (-135L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-135^-135)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-514);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-514));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -514
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1147;
      intArray0[3] = 10;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 1147;
      intArray1[3] = 10;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      double double0 = MathUtils.sign((double) 1147);
      long long0 = MathUtils.binomialCoefficient(1147, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0, (-1019.167));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-67));
      int int0 = MathUtils.subAndCheck((int) (byte) (-1), (int) (byte) (-1));
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.binomialCoefficient(424, (-564));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1147, 1147);
      int int1 = MathUtils.mulAndCheck(1315609, 597);
      int int2 = MathUtils.sign(1147);
      int[] intArray0 = new int[6];
      intArray0[0] = 1315609;
      intArray0[1] = 1;
      intArray0[2] = 1315609;
      intArray0[3] = 597;
      intArray0[4] = 785418573;
      intArray0[5] = 1147;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 1315609, (long) 785418573);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 597, (-2181));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,181, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 2676L;
      long long1 = MathUtils.indicator(2676L);
      byte byte0 = MathUtils.indicator((byte) (-78));
      int int0 = 0;
      double double0 = MathUtils.scalb((byte) (-78), 0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) (byte) (-78), (-229));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-7278142539171889152L), (long) (-229));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 36;
      int int1 = 1973;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(36, 1973);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 36, k = 1,973
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-83));
      int int0 = (-3644);
      int int1 = MathUtils.addAndCheck((-294), (-3644));
      double double0 = (-562.83);
      int int2 = MathUtils.hash((-562.83));
      boolean boolean0 = MathUtils.equals(1188.3096407, 40.19140625);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-294), 61, 61);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.pow(1006, 31);
      float float0 = MathUtils.round((float) 31, 229, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = 1006;
      intArray0[2] = 229;
      intArray0[3] = 0;
      intArray0[4] = 31;
      intArray0[5] = Integer.MIN_VALUE;
      intArray0[6] = 229;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.lcm(0, 1611);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 229);
      int int3 = MathUtils.indicator((-685));
      int int4 = (-1587);
      int int5 = MathUtils.gcd((-1587), 0);
      int int6 = MathUtils.subAndCheck(4194304, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("v9CD");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.v9CD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.indicator(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(2420);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2420;
      intArray0[1] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.lcm(2420, 0);
      long long0 = MathUtils.indicator((long) 0);
      float float0 = MathUtils.indicator(709.69F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1815.2496);
      doubleArray0[2] = 1365.06169144;
      doubleArray0[3] = 1154.908594134284;
      doubleArray0[4] = (-830.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(1417L, 1417L);
      int int0 = MathUtils.compareTo(2.2250738585072014E-308, (-1815.2496), (-830.0));
      float float0 = MathUtils.round((float) 2834L, 1, 1);
      float float1 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString(1);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      float float2 = bigInteger1.floatValue();
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger0);
      BigInteger bigInteger4 = bigInteger1.subtract(bigInteger0);
      String string1 = bigInteger1.toString();
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger1);
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger6 = bigInteger0.flipBit(1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 1417L);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign(1365.06169144);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.sign((double) 2834L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short)0, 2418);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,418
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.compareTo(6.283185307179586, 0.0, 0.0);
      int int1 = MathUtils.gcd(1560, 1560);
      int int2 = MathUtils.mulAndCheck(1560, 1);
      double double0 = MathUtils.binomialCoefficientDouble(1, 1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      long long0 = MathUtils.addAndCheck((long) 1560, 4499201580859392L);
      boolean boolean0 = MathUtils.equals(0.0, 2295.03279615);
      double double1 = MathUtils.round(6.283185307179586, 1560);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2989.76982360712, 1939.4140565136004, (double) 1560);
      double double2 = MathUtils.normalizeAngle(1939.4140565136004, 0.0);
      short short0 = MathUtils.sign((short)1030);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("y");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.normalizeAngle(0.0, 1.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 67;
      intArray0[1] = 6;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.cosh(738.787);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1, 1779.0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.sign(4896.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 4896.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = 1779.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (4,896 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.sign(12.0);
      long long0 = MathUtils.addAndCheck((-1362L), 0L);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      byte byte0 = MathUtils.indicator((byte)34);
      int int0 = MathUtils.hash((double) 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (-1239));
      double double1 = MathUtils.indicator(2.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = MathUtils.indicator((-1981.34F));
      int int0 = MathUtils.lcm(8, (-356));
      float float1 = MathUtils.sign((-1372.896F));
      double double0 = MathUtils.factorialLog(8);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = 10.60460290274525;
      doubleArray0[2] = (double) (-1372.896F);
      doubleArray0[3] = 1526.258551948;
      doubleArray0[4] = (double) (-1981.34F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.factorialDouble(0);
      double double2 = MathUtils.sinh(0.5);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1629.276), 505.1683);
      int int0 = MathUtils.compareTo(0.5210953054937474, 0.5, 3786.212547082837);
      long long0 = MathUtils.gcd((-2140L), (-78L));
      long long1 = MathUtils.sign((-78L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 0.5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 56);
      boolean boolean0 = MathUtils.equals((double) 0, (-2818.72478522971), 3716);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.indicator((-670L));
      double double0 = MathUtils.normalizeAngle(7.0, (-1L));
      boolean boolean0 = MathUtils.equals(0.0, 7.0, 0.7168146928204138);
      int int0 = MathUtils.sign((-949));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.625, 4360);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-670L);
      doubleArray0[2] = (double) (-670L);
      doubleArray0[3] = (double) (-949);
      doubleArray0[4] = 0.625;
      doubleArray0[5] = 7.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.indicator((-1L));
      double double2 = MathUtils.cosh((-670L));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -670)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, (-3800.5438));
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3800.5438);
      doubleArray0[2] = (-3800.5438);
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-614);
      intArray0[1] = 832;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 832;
      doubleArray1[1] = (double) 832;
      doubleArray1[2] = (-3801.3271108436497);
      doubleArray1[3] = (-3800.5438);
      doubleArray1[4] = (-3801.3271108436497);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 832;
      doubleArray1[7] = (double) (-614);
      doubleArray1[8] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-618);
      int int1 = 574;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-618), 574);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -618, k = 574
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = 113236205062349959L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(113236205062349959L, (-416L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2747), (-2747));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,747
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 223;
      intArray0[1] = 6;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.sinh(2.2250738585072014E-308);
      long long0 = MathUtils.mulAndCheck((long) 223, (long) 223);
      float float0 = MathUtils.sign((float) 6);
      double double3 = MathUtils.log((-1868.0578238719372), (-3280.201));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-1868.0578238719372);
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = (-3280.201);
      doubleArray0[5] = (double) 223;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      int int0 = MathUtils.sign(6);
      int int1 = MathUtils.pow(1, 1L);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-72));
      long long0 = MathUtils.mulAndCheck((long) (byte) (-1), 9223372036854775807L);
      long long1 = MathUtils.sign(362880L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (-0.2499999701976776);
      doubleArray0[4] = (-0.5);
      doubleArray0[5] = (double) 9223372036854775807L;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = 4503599627370496L;
      int int0 = (-1110);
      try { 
        MathUtils.pow(4503599627370496L, (-1110));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,503,599,627,370,496^-1,110)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(706, 706);
      double double1 = MathUtils.factorialDouble(706);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 706;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = (double) 706;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (706 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = MathUtils.sign((-1123.5616F));
      int int0 = 839;
      int int1 = MathUtils.pow(839, (long) 839);
      try { 
        MathUtils.pow(347L, (-1666218569));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (347^-1,666,218,569)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.pow(15, 474);
      long long0 = MathUtils.subAndCheck((long) 15, (long) 474);
      int int1 = MathUtils.addAndCheck((-2842), 474);
      int int2 = MathUtils.hash((double) 1721059169);
      int int3 = MathUtils.compareTo((-228.54513), (-459L), 0.0);
      int int4 = MathUtils.pow(15, (long) 15);
      long long1 = MathUtils.addAndCheck((-2027L), 916L);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-873.55);
      doubleArray0[1] = (-260.16);
      doubleArray0[2] = 3652.100569041;
      doubleArray0[3] = 0.2;
      doubleArray0[4] = (-1913.36);
      doubleArray0[5] = 20.0;
      doubleArray0[6] = (-1269.0);
      doubleArray0[7] = Double.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 20.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4784.602473839728;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 1368.774296196095;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 1405.28;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.indicator((-9218868437227405313L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1L), 10.0);
      int int0 = MathUtils.compareTo((-1L), 2426.49769, (-710.8749499732));
      try { 
        MathUtils.pow(2147483646, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,147,483,646^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(756.489039677975, 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1690.61146432), (-1690.61146432), 2.2250738585072014E-308);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-1690.61146432), (-1836.29625679438));
      int int1 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 536;
      int int1 = 237;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 536, 237);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 237, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3032));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,032
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, (-4973), 823);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 823, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.sign(10);
      int int1 = MathUtils.sign(0);
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.addAndCheck((long) 1, (long) 10);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(10, 114);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 10, k = 114
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      double double0 = MathUtils.sign(0.0);
      byte byte0 = MathUtils.indicator((byte) (-34));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      double double0 = MathUtils.normalizeAngle(0, 1406.8);
      try { 
        MathUtils.pow(0, (-2343L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,343)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.sign(1903.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 4577762542105553359L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3140.402655);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3648.076;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 736.5626;
      doubleArray0[5] = 4154.0;
      doubleArray0[6] = (-596.037652242297);
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-115.4602997858073), 13.07, (-115.4602997858073));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 13.07;
      doubleArray0[1] = (-115.4602997858073);
      doubleArray0[2] = 13.07;
      doubleArray0[3] = 13.07;
      doubleArray0[4] = 13.07;
      doubleArray0[5] = (-115.4602997858073);
      doubleArray0[6] = 13.07;
      doubleArray0[7] = (-115.4602997858073);
      doubleArray0[8] = (-115.4602997858073);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-115.4602997858073);
      doubleArray1[2] = 13.07;
      doubleArray1[3] = (-115.4602997858073);
      doubleArray1[4] = 13.07;
      doubleArray1[5] = 13.07;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = 4208363204685324176L;
      long long1 = MathUtils.addAndCheck(4208363204685324176L, (-423L));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-1611), (-1611));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,611^-1,611)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-554.297));
      double double0 = MathUtils.normalizeAngle((-3838.986584697001), 180.35409);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-3233L), (-3233L));
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3233L);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)109);
      long long0 = MathUtils.indicator((-1323L));
      long long1 = MathUtils.mulAndCheck((long) (byte)1, (long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-196L), (-196L));
      double double0 = MathUtils.normalizeAngle((-196L), (-392L));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.pow(2138205452, 2138205452);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 2138205452;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble(62);
      double double1 = MathUtils.scalb((-1.216560444E9), 62);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2983), 2138205452);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,983, k = 2,138,205,452
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1221.46620411347);
      doubleArray0[2] = 3287.8;
      doubleArray0[3] = 2546.5978809425;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.304E19, 0.0, 1.304E19);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2575;
      intArray0[2] = 0;
      intArray0[3] = (-3125);
      intArray0[4] = 382;
      intArray0[5] = 16;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 846.671923457;
      doubleArray0[1] = (-996.1467864820107);
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (-1189.2);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = MathUtils.indicator((-1035));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (846.672 > -996.147)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = 6.283185307179586;
      int int0 = (-3954);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(6.283185307179586, 6.283185307179586, (-3954));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.indicator((-2618));
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 204);
      long long1 = MathUtils.sign(4503599627370495L);
      short short0 = MathUtils.sign((short)66);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.gcd(6402373705728000L, (-9218868437227405313L));
      int int0 = MathUtils.compareTo(7L, (-9218868437227405313L), 0.0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 7L, 3418.743162934738);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      boolean boolean0 = bigInteger0.equals(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.sign((-5));
      long long0 = MathUtils.gcd(2432902008176640000L, 4607182418800017408L);
      double double0 = MathUtils.sinh(8650752L);
      long long1 = MathUtils.lcm((-1571L), (long) (-1));
      short short0 = MathUtils.sign((short)3);
      long long2 = MathUtils.gcd(0L, 412L);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1763.80356;
      doubleArray0[2] = 1169.20683;
      doubleArray0[3] = (-1272.263);
      doubleArray0[4] = 1553.6067434;
      doubleArray0[5] = (-664.9255962193);
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = 1228.00671;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (13,040,000,000,000,000,000 > 1,763.804)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(243L);
      long long1 = MathUtils.mulAndCheck(475L, 1L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.sign((-1213L));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.sign(1183);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.scalb(1.986821492305628E-8, (-4229));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.indicator((-1.0));
      int int0 = MathUtils.addAndCheck(1981, 1981);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.cosh(1631.7732);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1631.7732;
      doubleArray0[1] = 1631.7732;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)0, (-1865.899785));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3273.183035, (-1609.0), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 4073;
      int int1 = 515;
      int int2 = MathUtils.mulAndCheck(4073, 515);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-182);
      // Undeclared exception!
      try { 
        MathUtils.round(1219.0246484959, (-182), (-182));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 1068;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck((long) 4, (-1759L));
      long long1 = MathUtils.pow((long) 0, 1068);
      short short0 = MathUtils.indicator((short) (-1647));
      int int1 = MathUtils.compareTo((short) (-1), (short) (-1647), 0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1004.13358829));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = MathUtils.sign((short)2800);
      float float0 = MathUtils.sign((float) (short)2800);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (short)1);
      int int0 = MathUtils.indicator((int) (short)1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger4 = bigInteger1.pow(153);
      BigInteger bigInteger5 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger6 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.binomialCoefficient((short)2800, (-2804));
      byte byte0 = MathUtils.indicator((byte) (-88));
      int int1 = MathUtils.compareTo((short)1, (-2360.859491865775), 1);
      double double1 = MathUtils.round((double) (byte) (-1), (-2804));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2804);
      doubleArray0[3] = (double) (short)1;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      short short1 = (short) (-2000);
      boolean boolean2 = MathUtils.equals(1.0, (double) 1L, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-981.5163047567), 0.0, (int) (short) (-2000));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1962, 496);
      long long0 = MathUtils.subAndCheck((long) 496, (long) 1962);
      long long1 = MathUtils.subAndCheck((long) 973152, 112L);
      double double0 = MathUtils.binomialCoefficientLog(1962, 1962);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 496;
      doubleArray0[1] = (double) 1962;
      doubleArray0[2] = (double) 1962;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1962.0, 0.0);
      long long2 = MathUtils.subAndCheck((-2147483648L), 3093L);
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.cosh(3605.259688085898);
      int[] intArray0 = new int[4];
      intArray0[0] = 973152;
      intArray0[1] = 973152;
      intArray0[2] = 496;
      intArray0[3] = 1565055135;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double4 = MathUtils.factorialDouble(496);
      byte byte0 = MathUtils.indicator((byte)6);
      double double5 = MathUtils.cosh((-1911.8010389));
      int int2 = MathUtils.subAndCheck(1565055135, (-889));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 536;
      int int1 = 196;
      int int2 = 228;
      int int3 = MathUtils.pow(228, 536);
      long long0 = MathUtils.mulAndCheck((long) 228, 2046L);
      long long1 = MathUtils.indicator((long) 0);
      int int4 = MathUtils.addAndCheck(228, 536);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 196, (double) 536);
      boolean boolean1 = MathUtils.equals((double) 228, 13.07);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.normalizeAngle(536, 0.0F);
      // Undeclared exception!
      try { 
        MathUtils.equals((-261.957167), 1.1102230246251565E-16, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-33);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int1 = bigInteger0.compareTo(bigInteger1);
      IntStream intStream0 = mockRandom0.ints();
      // Undeclared exception!
      try { 
        mockRandom0.doubles(1038L, (double) 1038L, (double) 0);
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1444), 3482);
      long long0 = MathUtils.gcd(2933L, (-1284L));
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)0, (double) 2933L, 1291);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1444);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (-1444);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (-1284L);
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 414.5);
      double double0 = MathUtils.round(50.144713, (-850), 0);
      long long1 = MathUtils.mulAndCheck((-3338L), 3171L);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = MathUtils.round(612.402F, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.addAndCheck(1L, 749L);
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.indicator(3428);
      short short0 = MathUtils.sign((short)10);
      int int2 = MathUtils.lcm(1113, 1150);
      long long2 = MathUtils.subAndCheck(0L, (long) 0);
      int int3 = MathUtils.lcm(1, 1150);
      double double1 = MathUtils.log(671.8416253, 0.0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int4 = MathUtils.hash(0.0);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long3 = MathUtils.indicator(0L);
      double double4 = MathUtils.normalizeAngle(0.0, 0.0);
      double double5 = MathUtils.sinh((short)10);
      double double6 = MathUtils.cosh(0.2857142686843872);
      double double7 = MathUtils.factorialLog(0);
      float float1 = MathUtils.sign((float) 1113);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-253.0);
      doubleArray0[1] = 1803.92586938;
      doubleArray0[2] = 2801.177287775;
      doubleArray0[3] = (-1523.77);
      doubleArray0[4] = (-3781.86978511718);
      doubleArray0[5] = (-1458.8);
      doubleArray0[6] = 1056.490567354;
      doubleArray0[7] = (-1089.47966926942);
      doubleArray0[8] = (-85.26591);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1803.92586938);
      float float0 = MathUtils.indicator(0.0F);
  }
}
