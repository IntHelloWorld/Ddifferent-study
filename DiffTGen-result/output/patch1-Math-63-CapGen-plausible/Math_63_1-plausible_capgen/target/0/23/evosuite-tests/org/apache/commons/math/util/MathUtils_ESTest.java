/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:23:15 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.lcm((-1), (-2618));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2618);
      doubleArray0[1] = (double) 2618;
      doubleArray0[2] = (double) (-2618);
      doubleArray0[3] = (double) 2618;
      doubleArray0[4] = (double) (-2618);
      doubleArray0[5] = (double) 2618;
      doubleArray0[6] = (double) 2618;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3380.7434392;
      doubleArray0[1] = 3.07751399041761E64;
      doubleArray0[2] = 1.625;
      doubleArray0[3] = (-1119.71);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (30,775,139,904,176,100,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 >= 1.625)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1059;
      intArray0[1] = (-942);
      intArray0[2] = 537;
      intArray0[3] = (-299);
      intArray0[4] = 89;
      intArray0[5] = (-1054);
      intArray0[6] = (-4047);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.pow(2622L, 259L);
      int int1 = MathUtils.pow(0, (long) 0);
      int int2 = MathUtils.subAndCheck((-4047), (-1136));
      double double0 = MathUtils.cosh(0);
      boolean boolean0 = MathUtils.equals(277.5599107, 277.5599107, (double) (-4047));
      double double1 = MathUtils.binomialCoefficientLog(3420, (-2911));
      int int3 = MathUtils.indicator(246);
      long long1 = MathUtils.pow(963L, 0L);
      int int4 = MathUtils.pow(161, 3639L);
      int int5 = MathUtils.mulAndCheck(89, (-4047));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.pow((long) 1323, (long) 1323);
      boolean boolean0 = MathUtils.equals((-1702.68), (-1702.68), 1961.078865774);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.log((short)0, (short)1);
      short short1 = MathUtils.indicator((short)1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.lcm(2147483646, 2147483646);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2147483646;
      doubleArray0[1] = (double) 2147483646;
      doubleArray0[2] = (double) 2147483646;
      doubleArray0[3] = (double) 2147483646;
      doubleArray0[4] = (-4.9E-324);
      doubleArray0[5] = (double) 2147483646;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) 2147483646;
      doubleArray0[8] = (double) 2147483646;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (2,147,483,646 > -0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, (-5057L));
      long long1 = MathUtils.mulAndCheck((-5057L), 3117L);
      double double0 = MathUtils.round((-2074.0902699), 15);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.hash(0.5);
      float float0 = MathUtils.round(526.452F, 1071644672);
      long long0 = 0L;
      long long1 = 1210L;
      long long2 = MathUtils.addAndCheck(0L, 1210L);
      long long3 = MathUtils.mulAndCheck(1210L, 1678L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger2);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3621));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,621
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-324), (-324));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,964,037,880,982,008^-2,964,037,880,982,008)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1203;
      int int1 = MathUtils.addAndCheck(1203, 1203);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1203;
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = (-1338L);
      long long1 = MathUtils.lcm((long) 1083362335, (-1338L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2406, 1203);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = (byte) (-61);
      byte byte1 = MathUtils.sign((byte) (-61));
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 72.0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (byte) (-61);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((byte) (-61));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      float float1 = MathUtils.sign(1.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3393.89), 2199.9308);
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.log(1.0F, 1.0F);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 1.0F, (double) 1.0F);
      int int0 = MathUtils.compareTo(0.074, 0.0, 2.0);
      byte byte0 = MathUtils.sign((byte) (-55));
      long long0 = MathUtils.binomialCoefficient(68, 45);
      float float2 = MathUtils.sign(1.0F);
      boolean boolean2 = MathUtils.equals((double) 0, (double) 0);
      int int1 = MathUtils.hash((double) (short)0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte byte0 = (byte) (-61);
      byte byte1 = MathUtils.sign((byte) (-61));
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 72.0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (byte) (-61);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((byte) (-61));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.log((-2.9), (-2.9));
      long long0 = MathUtils.gcd(0L, 0L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = (-1322);
      int int2 = MathUtils.lcm(0, (-1322));
      long long1 = MathUtils.lcm(0L, (long) 0);
      int int3 = MathUtils.indicator((-3373));
      int int4 = 1051;
      int int5 = MathUtils.subAndCheck((-2210), 1051);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.valueOf((-187L));
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 837);
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      int int6 = bigInteger3.bitLength();
      BigInteger bigInteger4 = bigInteger3.max(bigInteger1);
      int int7 = bigInteger3.bitLength();
      try { 
        MathUtils.pow(bigInteger3, (long) (byte) (-47));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (209^-47)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-2592.527);
      doubleArray0[8] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int1 = 831;
      double double1 = MathUtils.scalb(0.0, 831);
      int int2 = 21;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(17, 21);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 17, k = 21
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)107);
      short short0 = MathUtils.sign((short) (byte)107);
      int int0 = MathUtils.hash((double) (byte)1);
      int int1 = MathUtils.lcm((int) (short)1, 2458);
      double double0 = MathUtils.scalb((byte)107, 4468);
      boolean boolean0 = MathUtils.equals((double) 2458, 3666.4685179885814);
      double double1 = MathUtils.log((byte)1, (-1986.5667));
      double double2 = MathUtils.round(1043.829082793747, 2458);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1986.5667);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1043.829082793747;
      doubleArray0[3] = (double) (short)1;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.sinh((-1068.1552));
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, 5149.2, 0.0);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(811.378310517373, 5149.2);
      long long1 = MathUtils.addAndCheck(0L, 0L);
      long long2 = MathUtils.subAndCheck(44L, 1439L);
      int int0 = 1266;
      boolean boolean2 = MathUtils.equalsIncludingNaN(5149.2, (double) 0L, 1266);
      int int1 = MathUtils.gcd((-2312), 1266);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = MathUtils.sign((-705.332F));
      double double0 = MathUtils.scalb(0.0, (-194));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(575, 575);
      double double0 = MathUtils.round(0.0, 534);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 330625;
      doubleArray0[2] = (double) 330625;
      doubleArray0[3] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 330,625)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.sign(0.2);
      float float0 = (-1192.1F);
      float float1 = MathUtils.round((-1192.1F), 6, 6);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) (-1192.1F);
      doubleArray0[4] = (double) (-1192.1F);
      doubleArray0[5] = (double) 6;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (1 < 6)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 0.0, 1.1102230246251565E-16);
      float float0 = MathUtils.round(0.0F, 0, 0);
      boolean boolean1 = MathUtils.equals((-2461.0), 0.0, (-43.4639283716));
      long long0 = MathUtils.gcd((-5034868814120038111L), 24L);
      long long1 = MathUtils.lcm(840L, 133L);
      long long2 = MathUtils.pow((long) 0, 0L);
      float float1 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 4607182418800017408L;
      int int0 = (-859);
      try { 
        MathUtils.pow(4607182418800017408L, (-859));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,607,182,418,800,017,408^-859)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 4204.4, 493.9864734802888);
      double double0 = MathUtils.binomialCoefficientDouble(323, (-1249));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1249));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,249
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[3];
      intArray0[0] = 414;
      intArray0[1] = 14;
      intArray0[2] = 17;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.pow(0, 0);
      boolean boolean0 = MathUtils.equals(2.3841857910019882E-8, 21.0);
      int int2 = MathUtils.subAndCheck(1851, 17);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.sign(3);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      double double0 = 0.0;
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) Float.NaN, 0.0, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(925.1001625203994, 925.1001625203994);
      int int0 = MathUtils.lcm(0, 0);
      short short0 = MathUtils.sign((short) (-1793));
      long long0 = MathUtils.pow((long) (short) (-1793), (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short) (-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 699);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.141592653589793, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 166;
      intArray0[4] = 3931;
      intArray0[5] = 15;
      intArray0[6] = 0;
      intArray0[7] = (-575);
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 15;
      intArray1[2] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      float float0 = MathUtils.round(Float.NaN, 0);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.01;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1236.7213907061684;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) Float.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 147;
      intArray0[1] = (-2337);
      intArray0[2] = 14;
      intArray0[3] = 0;
      intArray0[4] = 161;
      intArray0[5] = 0;
      intArray0[6] = 3332;
      intArray0[7] = 281;
      intArray0[8] = 2601;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 3332, 3.141592653589793, (double) 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 463.56723234, 3332);
      long long0 = MathUtils.pow((-1522L), (long) 0);
      long long1 = MathUtils.sign(0L);
      byte byte0 = MathUtils.indicator((byte)0);
      long long2 = MathUtils.pow((-2137L), 0L);
      int int1 = MathUtils.gcd(0, (-241));
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long3 = MathUtils.mulAndCheck((-222L), (-339L));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      long long1 = MathUtils.mulAndCheck(1986L, 1L);
      int int0 = MathUtils.sign(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-5359);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long2 = MathUtils.sign((-1005L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.85040095144011776E17;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte byte0 = bigInteger1.byteValueExact();
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.round((-843.6122822), 0);
      short short0 = MathUtils.sign((short) (-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-844.0);
      doubleArray0[2] = (-843.6122822);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-288.9181);
      doubleArray1[1] = (-844.0);
      doubleArray1[2] = (double) (short) (-1);
      doubleArray1[3] = (double) (short) (-1);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.log(513.6298476944525, 0.0);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.scalb(513.6298476944525, (-1844));
      BigInteger bigInteger0 = BigInteger.valueOf(1668L);
      long long0 = bigInteger0.longValue();
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-1844));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3.141592653589793, 3.141592653589793);
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator(0L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3.141592653589793;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1L;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      long long2 = MathUtils.indicator(2147483647L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) 1L);
      double double3 = MathUtils.round(801.581473639, 549);
      long long3 = MathUtils.pow(0L, 1290L);
      long long4 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.hash(0.0);
      double double4 = MathUtils.round((double) 2147483647L, 0);
      int int1 = MathUtils.lcm(549, 0);
      double double5 = MathUtils.indicator((-3213.9054));
      long long5 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.factorialDouble(31);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.lcm(2839L, (long) 31);
      double double1 = MathUtils.cosh(8.22283865417801E33);
      int int2 = MathUtils.lcm(2116, 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.pow(2436, 2436);
      int int1 = 1092;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2436, (double) 2436, 1092);
      int int2 = MathUtils.gcd(0, 2436);
      long long0 = MathUtils.sign((long) 2436);
      double double0 = MathUtils.scalb(1L, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2436;
      intArray0[1] = 0;
      intArray0[2] = 2436;
      intArray0[3] = 0;
      intArray0[4] = 2436;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.pow(2436, 2436);
      int int1 = 1092;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2436, (double) 2436, 1092);
      int int2 = MathUtils.gcd(0, 2436);
      long long0 = MathUtils.sign((long) 2436);
      double double0 = MathUtils.scalb(1L, 0);
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 2436;
      intArray0[3] = 0;
      intArray0[4] = 2436;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.sinh(15.0);
      double double1 = MathUtils.normalizeAngle((-1463.97302828562), 1.1102230246251565E-16);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1634508.6862359024;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = (-1463.97302828562);
      doubleArray0[3] = (-1977.4284916);
      doubleArray0[4] = 0.009148287223524676;
      doubleArray0[5] = (-403.4883465);
      doubleArray0[6] = 1634508.6862359024;
      doubleArray0[7] = 1634508.6862359024;
      doubleArray0[8] = 0.07842259109020233;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 234;
      intArray0[1] = 419;
      intArray0[2] = (-1972);
      intArray0[3] = (-4773);
      intArray0[4] = (-1796);
      intArray0[5] = 559;
      intArray0[6] = 0;
      intArray0[7] = 49;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 234;
      doubleArray0[2] = (double) 419;
      doubleArray0[3] = (double) (-4773);
      doubleArray0[4] = (double) (-1972);
      doubleArray0[5] = (double) 559;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3234.3402);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.round((-1972.0), 649);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.indicator((-2471L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-2471L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[0];
      int int0 = MathUtils.hash(doubleArray1);
      long long1 = 0L;
      long long2 = MathUtils.mulAndCheck((long) 1, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (-2471L), 1);
      try { 
        MathUtils.pow((-1L), (-2372L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-2,372)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.sign(1.0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      try { 
        MathUtils.pow(0L, (-3076L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,076)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0036;
      doubleArray0[1] = (-2550.6);
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(6722166367014452318L);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble(108);
      double double3 = MathUtils.scalb(1.3246418194520043E174, (-858));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1323);
      long long0 = MathUtils.pow((long) 1323, (long) 1323);
      boolean boolean0 = MathUtils.equals((-1702.68), 1338.832123, 1961.078865774);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2889.8);
      doubleArray0[1] = 489.371477164239;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1117.64201509868;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(15);
      double double1 = MathUtils.round(1117.64201509868, 132, 0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 15, (long) 0);
      double double3 = MathUtils.sign(0.0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow((long) 15, 15L);
      boolean boolean2 = MathUtils.equals(1615.5285505599504, 1143.63, 26.8363196);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 4045);
      float float0 = MathUtils.round(3068.6F, (-4045), 0);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 5322);
      float float0 = MathUtils.sign(1024.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1104), (byte) (-73));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,104, k = -73
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 987.50893;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 987.50893);
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      int int0 = MathUtils.mulAndCheck(133, 133);
      double double1 = MathUtils.log(0.0, 0.0);
      double double2 = MathUtils.normalizeAngle(987.50893, 17689);
      double double3 = MathUtils.sinh(0.0);
      int int1 = MathUtils.indicator(17689);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2864);
      intArray0[1] = 11;
      intArray0[2] = (-1865);
      intArray0[3] = (-1963);
      intArray0[4] = (-2549);
      intArray0[5] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = (-1586);
      int int2 = MathUtils.gcd((-1586), (-1586));
      long long0 = MathUtils.subAndCheck((long) 11, (long) (-2864));
      int[] intArray1 = new int[6];
      intArray1[0] = (-2864);
      intArray1[1] = 1586;
      intArray1[2] = (-2549);
      intArray1[3] = (-2864);
      intArray1[4] = (-2549);
      intArray1[5] = 0;
      int int3 = MathUtils.distanceInf(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 6);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 6
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.indicator((-1496L));
      long long1 = MathUtils.binomialCoefficient(0, (-175));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-175);
      intArray0[4] = 0;
      intArray0[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long2 = MathUtils.addAndCheck((long) (-175), (-1092L));
      double double1 = MathUtils.log(0.0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.mulAndCheck(0, 52);
      byte byte0 = MathUtils.indicator((byte)0);
      long long3 = MathUtils.lcm(1L, 113236205062349959L);
      double double2 = MathUtils.indicator((double) (-175));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.addAndCheck((-4176), (-4176));
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 14.0);
      long long0 = MathUtils.subAndCheck(4398046511103L, 2377L);
      long long1 = MathUtils.subAndCheck((long) (-8352), 2377L);
      try { 
        MathUtils.pow(2377L, (-8352));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,377^-8,352)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 3332;
      int int1 = MathUtils.sign(3332);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2222, 16);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 688);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(688, 2063);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 688, k = 2,063
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.signum();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1444L);
      int int1 = 0;
      int int2 = MathUtils.lcm(0, 0);
      int int3 = MathUtils.indicator(0);
      int int4 = bigInteger0.getLowestSetBit();
      short short0 = MathUtils.indicator((short)0);
      int int5 = MathUtils.compareTo(1, 1444L, 0);
      double double0 = MathUtils.sinh(0);
      double double1 = MathUtils.round((double) 0, 0, 1);
      int int6 = bigInteger0.intValue();
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.pow((long) 0, (int) (short)1);
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-641));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-641)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.round(0.9999997615814209, (-775));
      long long0 = MathUtils.subAndCheck((long) (-775), (long) (-775));
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.bitCount();
      try { 
        MathUtils.pow(bigInteger0, (-775));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-775)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.log(Double.NEGATIVE_INFINITY, (-1320.115));
      long long0 = MathUtils.pow(0L, 27);
      int int0 = MathUtils.gcd(27, 217);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[3];
      intArray0[0] = 27;
      intArray0[1] = 1;
      intArray0[2] = 217;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((-1112.058810724), 390.323285048);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.indicator(0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(20.0, 912.8766);
      // Undeclared exception!
      try { 
        MathUtils.lcm(2968L, 4607182418800017408L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.3;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4527.84);
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.gcd(0L, (-1L));
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-4527.84);
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1137.0);
      doubleArray1[6] = 4611.50911969;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray1);
      long long1 = MathUtils.lcm((-4602L), 0L);
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-401.5141203153427);
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      int int1 = MathUtils.pow(0, 373);
      long long0 = MathUtils.addAndCheck((long) 373313961, 0L);
      long long1 = MathUtils.pow((long) 0, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double0 = MathUtils.sign(437.6743688434);
      double double1 = MathUtils.scalb(1.0, 373313961);
      short short0 = MathUtils.indicator((short)147);
      MathUtils.checkOrder(doubleArray0);
      long long2 = MathUtils.addAndCheck((-4164L), 373313961L);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger4);
      BigInteger bigInteger6 = bigInteger3.min(bigInteger4);
      BigInteger bigInteger7 = bigInteger0.or(bigInteger3);
      boolean boolean1 = bigInteger0.equals(mathUtils_OrderDirection0);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, (int) (short)147);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 98);
      int int0 = MathUtils.indicator(98);
      long long0 = MathUtils.mulAndCheck(0L, (long) 98);
      double double0 = MathUtils.round(2901.5009090344, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 98;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, 2901.5009090344, 1);
      float float1 = MathUtils.sign((float) 0);
      int int3 = MathUtils.sign(0);
      boolean boolean1 = MathUtils.equals((double) 31, 0.030589580535888672, (double) 0);
      byte byte0 = MathUtils.indicator((byte)121);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1709.766;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.940510424527919E-20);
      doubleArray0[4] = (-391.329510213);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 1045.78884241;
      doubleArray0[7] = (-1612.043738977);
      doubleArray0[8] = (-1606.17128);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3.940510424527919E-20));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1795);
      intArray0[1] = (-15);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-504.852615708);
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.log(2.0, 1.304E19);
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.mulAndCheck((-1795), (-1795));
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.factorial(0);
      int int2 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.round((-265.4547201), 0, 0);
      long long1 = MathUtils.sign((long) (-15));
      double double3 = MathUtils.log((-1202.311915), (-1795));
      double double4 = MathUtils.round((-266.0), 422);
      int int3 = MathUtils.sign((-1795));
      int int4 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      int int0 = 152;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 152);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      float float0 = 3184.8F;
      int int0 = 0;
      float float1 = MathUtils.round(3184.8F, 0);
      short short0 = MathUtils.sign((short)4);
      double double0 = MathUtils.scalb((short)4, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 912.9987124, (double) (short)4);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = MathUtils.gcd(2101, 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 700.75226;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (700.752 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.cosh(0.058823529411764705);
      double double1 = MathUtils.factorialDouble(244);
      double double2 = MathUtils.scalb(Double.POSITIVE_INFINITY, 244);
      byte byte0 = MathUtils.indicator((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1752, 1752);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-3070);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-3070), (-3070));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,070
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 2.85040095144011776E17, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 2.85040095144011776E17;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean0 = MathUtils.equals(0.0, 2.85040095144011776E17);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2.85040095144011776E17;
      doubleArray1[2] = 2.85040095144011776E17;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2.85040095144011776E17;
      doubleArray1[6] = 2.85040095144011776E17;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double1 = MathUtils.sign(6.283185307179586);
      int[] intArray0 = new int[0];
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) (-1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(614, 614);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 614;
      doubleArray0[1] = (double) 614;
      doubleArray0[2] = (double) 614;
      doubleArray0[3] = (double) 614;
      doubleArray0[4] = (double) 376996;
      doubleArray0[5] = (double) 614;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 614;
      doubleArray1[1] = (double) 376996;
      doubleArray1[2] = (double) 376996;
      doubleArray1[3] = (double) 614;
      doubleArray1[4] = (double) 376996;
      doubleArray1[5] = (double) 614;
      doubleArray1[6] = (double) 376996;
      doubleArray1[7] = (double) 614;
      doubleArray1[8] = (double) 376996;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int1 = MathUtils.hash(614.0);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.hash(2676.8819107471);
      int int1 = 2469;
      // Undeclared exception!
      try { 
        MathUtils.lcm((-915744687), 2469);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.pow(11, 11);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2041.556191691);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 1843829075;
      doubleArray0[4] = (double) 1843829075;
      doubleArray0[5] = (double) 1843829075;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) 11;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.hash((-2041.556191691));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 11, 2860.3427, 0.0);
      double double1 = MathUtils.normalizeAngle(1.843829075E9, (-2041.556191691));
      boolean boolean2 = MathUtils.equals(1.0, (-2041.556191691));
      boolean boolean3 = MathUtils.equals(1.0, 11.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = MathUtils.indicator(1244.0F);
      double double0 = MathUtils.round(0.0, (-520), 0);
      double double1 = MathUtils.normalizeAngle(0.0, 2128.745);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) (-520));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-520);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(6575.0, 6575.0, 302);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 302, 7.0, 0.0);
      float float0 = MathUtils.sign((-44.9F));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-534);
      try { 
        MathUtils.pow((-534), (long) (-534));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-534^-534)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        MathUtils.pow((-868), (-2695L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-868^-2,695)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.lcm(9, 9);
      double double0 = MathUtils.log(9, 3262.2);
      double double1 = MathUtils.scalb(255.7846, (-2086));
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equals((-9.30538953980431E-10), 255.7846);
      double double2 = MathUtils.binomialCoefficientLog(4194304, (short)0);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean1 = MathUtils.equals(3294198.0, (double) 9);
      boolean boolean2 = MathUtils.equals(3294198.0, (-304.4214938598839));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.scalb(0.1666666505023083, (-4248));
      double double1 = MathUtils.indicator((-2160.427206473236));
      int int1 = MathUtils.lcm(0, 3090);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(55);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.sign((-1140));
      double double1 = MathUtils.binomialCoefficientDouble(0, (-1));
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.log(Double.NEGATIVE_INFINITY, (-1818.28483448));
      float float0 = (-828.973F);
      float float1 = MathUtils.indicator((-828.973F));
      int int0 = 3;
      int int1 = MathUtils.mulAndCheck(3, 666);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, 5.650007086920087E-9, 3);
      // Undeclared exception!
      try { 
        MathUtils.factorial(666);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.sign(1984);
      boolean boolean0 = MathUtils.equals((double) 1984, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-276);
      int int1 = MathUtils.subAndCheck((-276), (-276));
      int int2 = MathUtils.indicator((-589));
      double[] doubleArray0 = new double[0];
      double double0 = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.lcm((-3163L), (-3163L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3163L);
      doubleArray0[1] = (double) 3163L;
      doubleArray0[2] = (double) (-3163L);
      doubleArray0[3] = 1102.3949372;
      doubleArray0[4] = (double) (-3163L);
      doubleArray0[5] = (-133.88);
      doubleArray0[6] = (double) (-3163L);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-167.0);
      doubleArray1[1] = (double) (-3163L);
      doubleArray1[2] = (double) (-3163L);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 3163L;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(541, 541);
      short short0 = MathUtils.sign((short)18);
      long long0 = MathUtils.lcm(120L, (long) (short)18);
      long long1 = MathUtils.gcd(360L, 360L);
      double double1 = MathUtils.sinh(0.0);
      int int0 = MathUtils.indicator(61);
      int int1 = MathUtils.subAndCheck((int) (short)18, (int) (short)18);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 384;
      intArray0[1] = 166;
      intArray0[2] = 0;
      intArray0[3] = 20;
      intArray0[4] = 0;
      intArray0[5] = 1030;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 99;
      intArray1[1] = 20;
      intArray1[2] = 0;
      intArray1[3] = 384;
      int int1 = MathUtils.distance1(intArray1, intArray1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 384;
      doubleArray0[3] = (double) 99;
      doubleArray0[4] = 235.037073;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 20;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      int int1 = (-402);
      try { 
        MathUtils.pow(0, (-402));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-402)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.log(2043.640958397021, 2043.640958397021);
      double double1 = MathUtils.binomialCoefficientDouble(1759, 1759);
      double double2 = MathUtils.round(0.0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.pow(0);
      BigInteger[] bigIntegerArray0 = bigInteger1.divideAndRemainder(bigInteger0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger3 = bigInteger1.remainder(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.mulAndCheck(989, 3737);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-12.0169452359244);
      doubleArray0[7] = 2043.640958397021;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 146;
      int int1 = (-389);
      try { 
        MathUtils.pow(146, (-389));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (146^-389)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = (short) (-156);
      short short1 = MathUtils.indicator((short) (-156));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-156);
      doubleArray0[1] = (double) (short) (-156);
      doubleArray0[2] = (double) (short) (-156);
      doubleArray0[3] = (double) (short) (-156);
      doubleArray0[4] = (double) (short) (-156);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      double double0 = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (short) (-156);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-156 >= -156)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.round(0.0, 0, 0);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1084.6521896549);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1030, 61);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1030;
      doubleArray0[1] = (double) 62830;
      doubleArray0[2] = (double) 62830;
      doubleArray0[3] = (double) 61;
      doubleArray0[4] = (double) 1030;
      doubleArray0[5] = (double) 1030;
      doubleArray0[6] = (double) 61;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 61;
      doubleArray1[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(468, 468);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 468;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 468);
      float float0 = MathUtils.indicator((float) 468);
      long long0 = MathUtils.gcd((-4267615245585081135L), (-4267615245585081135L));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      int int0 = 432;
      double double0 = MathUtils.round((double) (short)0, 432, (int) (short)1);
      int int1 = MathUtils.gcd(2297, 19);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-738.14602065886);
      doubleArray0[4] = (double) 19;
      doubleArray0[5] = (double) 2297;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 222;
      intArray0[1] = 7;
      intArray0[2] = (-88);
      intArray0[3] = 0;
      intArray0[4] = 8;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 3474.748;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 40, 40);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 40, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-46.564759026872);
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 0.0);
      int int0 = (-622);
      int int1 = (-1012);
      int int2 = MathUtils.addAndCheck((-622), (-1012));
      long long0 = MathUtils.pow((long) (-1634), 0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1634));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,634
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 820;
      double double0 = MathUtils.factorialDouble(820);
      double double1 = MathUtils.factorialLog(820);
      int int1 = MathUtils.compareTo(Double.NEGATIVE_INFINITY, 2929.5357970536, 2424.2788306);
      int int2 = 0;
      int int3 = MathUtils.subAndCheck(0, 820);
      long long0 = MathUtils.sign((long) (-820));
      int int4 = MathUtils.indicator((-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2424.2788306;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) (-1));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-1.0F), (double) (-1.0F), (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-2041);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (int) (byte)0, (-2041));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1931.02;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2278.7055423751176;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2278.7055423751176;
      doubleArray1[1] = 2.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.pow(8, 672);
      boolean boolean0 = MathUtils.equals((double) 8, (double) 0, 0.0);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.round(305.1741, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-61));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(997, 997);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-165.28);
      doubleArray0[1] = 411.805763;
      doubleArray0[2] = (-1037.325648);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1615.6068256;
      doubleArray0[5] = (-0.16624882440418567);
      doubleArray0[6] = (-3633.1589947739085);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(3427);
      long long0 = MathUtils.sign(1173L);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow(1, 1);
      float float0 = MathUtils.round((-23.0F), 0);
      double[] doubleArray1 = new double[0];
      double double0 = MathUtils.distance1(doubleArray1, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      double double2 = MathUtils.distance(doubleArray1, doubleArray0);
      double double3 = MathUtils.factorialLog(9);
      long long0 = MathUtils.indicator((long) 1);
      long long1 = MathUtils.addAndCheck(0L, (-761L));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = MathUtils.indicator((short)179);
      double double0 = MathUtils.normalizeAngle((short)1, 0.0);
      double double1 = MathUtils.normalizeAngle(1034.84, (short)179);
      long long0 = MathUtils.sign((-1799L));
      int int0 = MathUtils.compareTo((-50.048231), 0.0, 0.0);
      double double2 = MathUtils.factorialDouble((short)1);
      float float0 = MathUtils.sign((float) (short)1);
      long long1 = MathUtils.pow((-9218868437227405313L), (int) (short)179);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.sign(1.5);
      long long0 = MathUtils.subAndCheck((-3186L), (-3186L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 1.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      short short0 = MathUtils.indicator((short) (byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.cosh((-3507.0));
      int int0 = MathUtils.subAndCheck(172, 172);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 180L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = (-1407L);
      try { 
        MathUtils.pow((BigInteger) null, (-1407L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,407)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 86);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.indicator((double) 1L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2463.395175329166;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(140, 140);
      boolean boolean1 = MathUtils.equals(48.46717, (-1868.6412359), 0.0);
      double double1 = MathUtils.round(0.0, 140);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1397));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(555, 134);
      byte byte0 = MathUtils.sign((byte)55);
      byte byte1 = MathUtils.sign((byte)64);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.scalb((-2823.8218), 1971);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      int int0 = bigInteger0.intValueExact();
      byte[] byteArray0 = bigInteger0.toByteArray();
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      short short1 = MathUtils.sign((short)0);
      long long1 = MathUtils.mulAndCheck(805L, 0L);
      boolean boolean0 = MathUtils.equals(0.0, (-2107.305438029));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.gcd(24L, 24L);
      int int0 = (-4114);
      // Undeclared exception!
      try { 
        MathUtils.round((-1155.3308F), (-4114), (-4114));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -4,114, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = (-152);
      int int1 = MathUtils.indicator((-152));
      int int2 = (-1514);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-82), (-1514));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -82
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-26));
      double double0 = MathUtils.factorialDouble(9);
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equals(0.2, (double) (byte) (-26), 558.0);
      double double1 = MathUtils.scalb(641.6214653993, 4);
      int int0 = MathUtils.pow(74, (long) (short)0);
      int int1 = MathUtils.gcd(12, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.indicator(3.07751399041761E64);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.sign((-591L));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(176.7, (-983.0), 176.7);
      int int0 = MathUtils.indicator((-1761));
      long long0 = MathUtils.addAndCheck(5040L, (long) (-1));
      int[] intArray0 = new int[5];
      intArray0[0] = (-854);
      intArray0[1] = (-1);
      intArray0[2] = 1733;
      intArray0[3] = (-1761);
      intArray0[4] = (-1761);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(63, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 62;
      doubleArray0[3] = (double) 62;
      doubleArray0[4] = (double) 62;
      doubleArray0[5] = (double) 63;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 63;
      doubleArray0[8] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1059;
      intArray0[1] = (-942);
      intArray0[2] = 537;
      intArray0[3] = (-299);
      intArray0[4] = 89;
      intArray0[5] = (-1054);
      intArray0[6] = (-4047);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.pow(2622L, 259L);
      int int1 = MathUtils.pow(0, (long) 0);
      int int2 = MathUtils.subAndCheck((-4047), (-1136));
      double double0 = MathUtils.cosh(0);
      boolean boolean0 = MathUtils.equals(277.5599107, 277.5599107, (double) (-4047));
      double double1 = MathUtils.binomialCoefficientLog(3420, (-2911));
      byte byte0 = MathUtils.sign((byte)68);
      int int3 = MathUtils.indicator(246);
      long long1 = MathUtils.pow(963L, 0L);
      int int4 = MathUtils.pow(161, 3639L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-385));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-385);
      doubleArray0[4] = (double) (short) (-385);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = 1.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(524L, 524L);
      float float0 = MathUtils.sign((-686.436F));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-686.436F);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 524L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 524L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-686.436 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN);
      long long0 = MathUtils.pow(4577762542105553359L, 0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(145L, 4577762542105553359L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.normalizeAngle((-196.81529622183635), (-196.81529622183635));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(492.567472447466, (-752.62119579667), 596);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-883.537951);
      doubleArray0[2] = 1.3245471311735498E-8;
      doubleArray0[3] = 0.11113807559013367;
      doubleArray0[4] = 1078.0576848357512;
      doubleArray0[5] = (-2578.76);
      doubleArray0[6] = 1026.23883142;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -883.538)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.pow((-2760), 15);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2760);
      doubleArray0[2] = 2554.4228586072;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) (-2760);
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = (double) (-2760);
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,760)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = MathUtils.round((-1650.5804F), 771, 0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.indicator(9);
      long long0 = MathUtils.mulAndCheck((long) 1, (-4267615245585081135L));
      double double0 = MathUtils.sinh((-2840.975340806));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1910), (-1910));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,910
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.5707963267948966, 1.5707963267948966);
      long long0 = MathUtils.indicator((-487L));
      long long1 = MathUtils.indicator((-1L));
      long long2 = MathUtils.lcm((-487L), 0L);
      int int0 = MathUtils.subAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3017.6649637545556, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.0, 2.0, 1707);
      long long0 = MathUtils.pow((long) 1707, 0);
      int int0 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.factorialDouble(682);
      float float0 = MathUtils.sign(3097.157F);
      long long1 = 284L;
      long long2 = MathUtils.mulAndCheck((long) 0, 284L);
      double double1 = MathUtils.factorialDouble(0);
      long long3 = MathUtils.indicator((long) 0);
      long long4 = MathUtils.addAndCheck((long) 1707, 1L);
      long long5 = MathUtils.indicator(1L);
      long long6 = MathUtils.pow((long) 0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(1799.497F, 0, 64);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 64, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.factorialDouble(1);
      int int1 = MathUtils.hash(112.793274980195);
      int int2 = MathUtils.pow(0, (long) 1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1144003022;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1L;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 0);
      long long0 = MathUtils.subAndCheck(0L, 3950L);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble(0);
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equals((double) (short)0, 1.0, 10.0);
      int int1 = MathUtils.pow(0, (long) (short)0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.pow(11, 11);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2041.556191691);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 1843829075;
      doubleArray0[4] = (double) 1843829075;
      doubleArray0[5] = (double) 11;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) 11;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.hash((-2041.556191691));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 11, 2860.3427, 0.0);
      double double1 = MathUtils.normalizeAngle(1.843829075E9, (-2041.556191691));
      boolean boolean2 = MathUtils.equals(1.0, (-2041.556191691));
      boolean boolean3 = MathUtils.equals(1.0, 11.0);
      short short0 = MathUtils.indicator((short) (-1985));
      double double2 = MathUtils.scalb(1255107237, (-1864));
      int int2 = MathUtils.compareTo((-3.07751399041761E64), 3110.389979406, (-712.6281021441507));
      int[] intArray0 = new int[3];
      intArray0[0] = 1255107237;
      intArray0[1] = 11;
      intArray0[2] = (-1);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      int int4 = MathUtils.compareTo(390.323285048, (-712.6281021441507), 1718.7);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0036, 0, 50);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 437;
      int int1 = (-1274);
      double double1 = MathUtils.binomialCoefficientLog(437, (-1274));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.gcd((-162L), (-162L));
      long long1 = MathUtils.gcd((-162L), 0L);
      int int0 = MathUtils.pow(0, 162L);
      long long2 = MathUtils.indicator(416L);
      short short0 = (short) (-14);
      short short1 = MathUtils.sign((short) (-14));
      long long3 = MathUtils.addAndCheck((long) 0, (long) (short) (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long4 = MathUtils.sign(0L);
      short short2 = MathUtils.indicator((short) (-1));
      long long5 = MathUtils.lcm((long) 0, 0L);
      long long6 = MathUtils.indicator(0L);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
