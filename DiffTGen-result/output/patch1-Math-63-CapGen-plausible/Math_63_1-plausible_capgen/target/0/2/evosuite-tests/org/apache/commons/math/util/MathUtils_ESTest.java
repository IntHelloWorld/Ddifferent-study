/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:15:42 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-900.1427379805873);
      doubleArray0[1] = 3.834E-20;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 2143289344;
      double double1 = MathUtils.scalb(4056.73692219723, 2143289344);
      short short0 = MathUtils.indicator((short) (-99));
      double double2 = MathUtils.binomialCoefficientDouble(2143289344, (short) (-99));
      long long0 = (-1L);
      long long1 = MathUtils.mulAndCheck((-1L), (long) (short) (-99));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1L), 2143289344, (int) (short) (-99));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (-771);
      intArray0[1] = (-2446);
      intArray0[2] = (-54);
      intArray0[3] = 129;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.pow(129, 406);
      long long0 = MathUtils.pow((long) (-2446), 4607182418800017408L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = bigInteger0.shiftRight(20);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
      double double0 = MathUtils.factorialDouble(12);
      int int1 = MathUtils.hash(4.790016E8);
      long long0 = MathUtils.mulAndCheck(0L, 479001600L);
      float float0 = MathUtils.indicator((float) 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.pow(4006, 0L);
      int int1 = MathUtils.lcm(4006, 1);
      double double0 = MathUtils.cosh(0L);
      int int2 = MathUtils.gcd(3308, 1);
      long long0 = MathUtils.binomialCoefficient(1, (-1502));
      long long1 = MathUtils.subAndCheck(1L, 0L);
      double double1 = MathUtils.sinh((-1929.545744279621));
      byte byte0 = MathUtils.sign((byte) (-21));
      byte byte1 = MathUtils.indicator((byte) (-1));
      byte byte2 = MathUtils.indicator((byte)0);
      double double2 = MathUtils.binomialCoefficientLog(1, (byte) (-1));
      long long2 = MathUtils.lcm((long) (byte) (-1), (-3495L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1, (double) 4006);
      int int3 = MathUtils.mulAndCheck(1262, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("`gDB2x+08N]");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.`gDB2x+08N]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 3.9736429850260626E-8);
      int int1 = MathUtils.pow(0, 1L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, 0.0);
      double double0 = MathUtils.cosh(1L);
      double double1 = MathUtils.cosh(2.2250738585072014E-308);
      int int2 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2559.9;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(2.2250738585072014E-308, (double) 0);
      long long0 = MathUtils.lcm((-3532L), 6402373705728000L);
      int int3 = MathUtils.indicator(0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double3 = MathUtils.round((-2982.8), (-1074), 0);
      double double4 = MathUtils.scalb(0, (-1388));
      int int4 = MathUtils.pow(0, (long) 0);
      long long1 = MathUtils.gcd((long) 0, 6402373705728000L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(102);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = MathUtils.indicator((-2644281811660520851L));
      double double0 = MathUtils.factorialDouble(798);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2644281811660520851L);
      doubleArray0[1] = (double) (-1L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double1 = MathUtils.cosh(354.7328592);
      int[] intArray0 = new int[5];
      intArray0[0] = 798;
      intArray0[1] = 798;
      intArray0[2] = 798;
      intArray0[3] = 0;
      intArray0[4] = 798;
      double double2 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(798);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger2.andNot(bigInteger0);
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger2);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 2341);
      long long1 = MathUtils.gcd((-2890L), 720L);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2341;
      doubleArray1[1] = (double) (-2644281811660520851L);
      doubleArray1[2] = 0.07490822288864472;
      doubleArray1[3] = (double) 798;
      doubleArray1[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(0.0F, (-882), 0);
      double double0 = MathUtils.round((double) 0L, 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.round((-2642.543), 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = MathUtils.indicator((-2704.0F));
      int int0 = MathUtils.pow(0, (long) 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.binomialCoefficient(0, (-307));
      double double1 = MathUtils.round(0.0, 2429);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1654;
      intArray0[1] = 31;
      intArray0[2] = (-2050);
      intArray0[3] = 3045;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.sign(2394);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) (-2050);
      doubleArray0[2] = (double) 3045;
      doubleArray0[3] = (double) 3045;
      doubleArray0[4] = (double) 1654;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.round((double) (-2050), 31);
      int[] intArray1 = new int[6];
      intArray1[0] = (-2050);
      intArray1[1] = 3045;
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[4] = 3045;
      intArray1[5] = 0;
      double double1 = MathUtils.distance(intArray1, intArray1);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.sinh((-3098.70069));
      double double4 = MathUtils.scalb((-2050.0), 3045);
      long long0 = MathUtils.lcm((long) 1654, (long) 3045);
      long long1 = MathUtils.indicator((long) 0);
      double double5 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.normalizeAngle(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 492.314);
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
      long long0 = MathUtils.addAndCheck(0L, 819L);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1538, 1538);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.scalb((-3050.03), 1538);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-142.9089756);
      doubleArray0[1] = 184.128705;
      doubleArray0[2] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (184.129 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = (short)1510;
      short short1 = MathUtils.sign((short)1510);
      long long0 = MathUtils.pow((long) (short)1, (int) (short)1510);
      short short2 = MathUtils.sign((short)805);
      double double0 = MathUtils.log((short)1, Double.NaN);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, 970.1909588557209, 3334.2);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = 487.0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(487.0, (double) (short)805, (-2080));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round(2154.8591F, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2155.0F;
      doubleArray0[2] = (double) 2154.8591F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2154.8591F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,155 >= 2,154.859)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValueExact();
      int int1 = 1873;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1873);
      int int2 = MathUtils.compareTo(1873, 1, 1873);
      BigInteger bigInteger6 = bigInteger1.shiftRight(1873);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      BigInteger bigInteger7 = bigInteger0.xor(bigInteger2);
      doubleArray0[3] = (-39.18229878);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1873;
      doubleArray0[7] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger8 = bigInteger0.pow(0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      BigInteger bigInteger4 = bigInteger3.xor(bigInteger0);
      BigInteger bigInteger5 = bigInteger0.subtract(bigInteger3);
      BigInteger bigInteger6 = bigInteger0.shiftLeft((-944));
      int int0 = bigInteger0.compareTo(bigInteger6);
      int int1 = 7;
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 7);
      double double0 = 0.0;
      double double1 = MathUtils.scalb(0.0, (-1605));
      float float0 = 1183.6682F;
      int int2 = (-2232);
      int int3 = 1371;
      // Undeclared exception!
      try { 
        MathUtils.round(1183.6682F, (-2232), 1371);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,371, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(0.0, 0);
      byte byte0 = MathUtils.sign((byte)68);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-1762);
      double double0 = MathUtils.round((-1076.0), (-1762));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 1.1730463525082348E-7);
      long long0 = MathUtils.pow(0L, 3192);
      int[] intArray0 = new int[9];
      intArray0[0] = 3192;
      intArray0[1] = 3192;
      intArray0[2] = 3192;
      intArray0[3] = 3192;
      intArray0[4] = 3192;
      intArray0[5] = 3192;
      intArray0[6] = 3192;
      intArray0[7] = 3192;
      intArray0[8] = 3192;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3192;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 3192;
      doubleArray0[3] = (double) 3192;
      doubleArray0[4] = (double) 3192;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.indicator(60);
      float float0 = MathUtils.round(503.2F, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.clearBit(3192);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      int int2 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.lcm(5, 5);
      double double0 = MathUtils.scalb((-1765.0), 464);
      long long0 = MathUtils.subAndCheck((long) 5, 2153L);
      double double1 = MathUtils.sinh(0.0);
      byte byte0 = MathUtils.sign((byte)126);
      int int1 = MathUtils.sign(5);
      boolean boolean0 = MathUtils.equals(864.9004, (double) (byte)1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)126);
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      long long1 = bigInteger0.longValue();
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = bigInteger4.andNot(bigInteger2);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger1, bigInteger4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)126;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = 864.9004;
      doubleArray0[4] = (-8.407419115154612E142);
      doubleArray0[5] = (double) 2153L;
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      int int0 = MathUtils.hash(0.0);
      long long1 = MathUtils.subAndCheck((long) 0, 20922789888000L);
      short short0 = MathUtils.indicator((short) (-2836));
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-2836);
      doubleArray0[3] = (double) (-20922789888000L);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 34);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = 9223372036854775807L;
      int int1 = MathUtils.pow((-2183), 9223372036854775807L);
      int int2 = 112;
      long long1 = MathUtils.pow((long) 0, 112);
      int int3 = 20;
      int int4 = MathUtils.gcd(20, 2347);
      float float0 = MathUtils.sign((float) (-769277239));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(273);
      boolean boolean0 = MathUtils.equals(3113.74363, 3113.74363, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 273;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 273;
      doubleArray0[4] = (double) 273;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (double) 273;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.round(1839.01552441226, 273);
      int[] intArray0 = new int[9];
      intArray0[0] = 273;
      intArray0[1] = 273;
      intArray0[2] = 273;
      intArray0[3] = 273;
      intArray0[4] = 0;
      intArray0[5] = 273;
      intArray0[6] = 273;
      intArray0[7] = 273;
      intArray0[8] = 273;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5830993332061267E-10;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.lcm((-134), 620);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 620;
      doubleArray0[1] = (double) 41540;
      doubleArray0[2] = (double) (-134);
      doubleArray0[3] = (double) 41540;
      doubleArray0[4] = (double) (-134);
      doubleArray0[5] = (double) (-134);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 620;
      intArray0[1] = 620;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 620, 620.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger1.clearBit((-33));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1581, 0);
      double double1 = MathUtils.sinh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.scalb(12.0, 52);
      double double1 = MathUtils.factorialDouble(52);
      double double2 = MathUtils.sinh(Double.NEGATIVE_INFINITY);
      int int0 = MathUtils.pow(0, 1030);
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, 760.0540239755111, (-1733.83724375));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 760.0540239755111;
      doubleArray0[1] = 8.065817517094494E67;
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 12.0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = MathUtils.round((-55.09F), 0);
      double double0 = MathUtils.indicator((double) 0);
      int int0 = MathUtils.lcm(0, (-2482));
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.indicator(0.0);
      float float1 = MathUtils.round((float) 0, 67, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2482);
      doubleArray0[1] = 2843.73384643312;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, 2.85040095144011776E17, 0.0);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 179;
      // Undeclared exception!
      try { 
        MathUtils.factorial(179);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.pow(3, 3);
      double double0 = MathUtils.normalizeAngle(27, 27);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      int int1 = 0;
      BigInteger bigInteger2 = bigInteger0.clearBit(0);
      BigInteger bigInteger3 = BigInteger.valueOf(3);
      long long0 = (-302932621132653753L);
      try { 
        MathUtils.pow(bigInteger0, (-302932621132653753L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-302,932,621,132,653,753)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(90, 0);
      int int2 = MathUtils.sign(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) 90;
      doubleArray0[2] = (double) 90;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 90);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.log((-1598.0), 0.0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.sign((short)1);
      double double3 = 1073.98531;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, 1723.8073127, 1073.98531);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = BigInteger.ZERO;
      double double4 = bigInteger1.doubleValue();
      // Undeclared exception!
      try { 
        bigInteger1.modInverse(bigInteger3);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(15, 15);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = BigInteger.valueOf((-664L));
      BigInteger bigInteger4 = bigInteger0.modInverse(bigInteger2);
      BigInteger bigInteger5 = bigInteger0.shiftRight(200);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, (long) 30);
      double double0 = MathUtils.binomialCoefficientDouble(30, 15);
      double double1 = MathUtils.scalb(15, 30);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 30;
      doubleArray0[2] = 1.5511752E8;
      MathUtils.checkOrder(doubleArray0);
      int int1 = MathUtils.sign(2862);
      long long0 = MathUtils.pow((-986L), 113236205062349959L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3.834E-20);
      long long1 = MathUtils.addAndCheck((-986L), (long) 200);
      double double2 = MathUtils.scalb(15.0, 15);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      int int2 = MathUtils.indicator(2862);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(7733, 7733);
      float float0 = MathUtils.sign((-1.0F));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-116);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = bigInteger0.isProbablePrime((-4096));
      try { 
        MathUtils.pow(bigInteger0, (-3122L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (595,084^-3,122)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 443.0;
      doubleArray0[4] = (-4580.626194);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-57));
      boolean boolean0 = MathUtils.equals(4601.997971442287, 443.0);
      int int0 = MathUtils.addAndCheck((int) (byte) (-1), 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.xor(bigInteger2);
      BigInteger bigInteger4 = BigInteger.ZERO;
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger4);
      // Undeclared exception!
      try { 
        bigInteger1.modInverse(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-4267615245585081135L), (-4267615245585081135L));
      try { 
        MathUtils.pow((-8535230491170162270L), (-3580L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-8,535,230,491,170,162,270^-3,580)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1997));
      try { 
        MathUtils.pow(3204L, (int) (short) (-1997));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,204^-1,997)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      try { 
        MathUtils.pow(0L, (-508L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-508)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1833.3841528819));
      double double1 = MathUtils.scalb(0, (-5054));
      double double2 = MathUtils.round(6.283185307179586, 0, 0);
      long long0 = MathUtils.pow(2057L, 0);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2057L);
      long long2 = MathUtils.pow((long) 0, 16);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,057 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1079.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2812.39082);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 797.0100814;
      doubleArray0[5] = 3570.0161;
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(215);
      int int0 = MathUtils.sign(215);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-90);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 215);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3461.821648687763);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 756.4362281975059;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1194.413);
      doubleArray0[7] = 1.176342548272881E-8;
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((-739L), (-739L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.indicator((long) 0);
      long long1 = MathUtils.sign((long) 0);
      byte byte0 = MathUtils.sign((byte) (-86));
      int int1 = MathUtils.pow((-1440), 0L);
      boolean boolean0 = MathUtils.equals((-1.9841269659586505E-4), (-2007.059899));
      boolean boolean1 = MathUtils.equals((double) 1, (-2007.059899), 2165);
      int int2 = MathUtils.sign(7);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.pow(6L, 100);
      float float0 = MathUtils.sign((float) 6L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 100;
      doubleArray0[2] = (double) 6L;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(528, 528);
      float float0 = MathUtils.sign(Float.NaN);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, Double.POSITIVE_INFINITY, 528);
      double double1 = MathUtils.sign(1.0);
      boolean boolean1 = MathUtils.equals(1.0, 0.1538461446762085);
      float float1 = MathUtils.sign(Float.NaN);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.NaN;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(528, 528);
      int int0 = 1607;
      int int1 = (-35);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 1607, (-35));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -35, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(15, 15);
      int int1 = MathUtils.addAndCheck(4389, 15);
      float float0 = Float.NaN;
      int int2 = 1491;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-144), 1491);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,491, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.lcm(13, 13);
      int int1 = MathUtils.subAndCheck(13, 13);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-2048);
      int int1 = 0;
      double double0 = MathUtils.round((-877.11), (-2048), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (-877.11));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.lcm((-4065L), (-4065L));
      double double0 = MathUtils.log(4512.16896365, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4512.16896365;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) (-4065L);
      doubleArray0[6] = (double) (-4065L);
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2199;
      intArray0[1] = (-1499);
      intArray0[2] = 64;
      intArray0[3] = 273;
      intArray0[4] = 0;
      intArray0[5] = 241;
      intArray0[6] = 31;
      intArray0[7] = 8;
      intArray0[8] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 241;
      intArray1[1] = 0;
      intArray1[2] = 2199;
      intArray1[3] = 273;
      intArray1[4] = 0;
      intArray1[5] = 8;
      intArray1[6] = 241;
      intArray1[7] = 2977;
      intArray1[8] = 3953;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.3;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.3, 0.3);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((-1352L));
      int int0 = 2935;
      int int1 = MathUtils.pow(2935, 2935);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.3, 0.3, 588845959);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2540;
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.round((-3218.0F), (-413));
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = 1307674368000L;
      long long1 = MathUtils.lcm((-1506L), 1307674368000L);
      double double2 = MathUtils.distance(intArray0, intArray0);
      float float1 = MathUtils.round((float) 328226266368000L, 2540, 0);
      try { 
        MathUtils.pow(2540, (-413));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,540^-413)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.hash(613.09619);
      int int1 = MathUtils.indicator((-1077909158));
      long long0 = MathUtils.indicator((long) (-1077909158));
      byte byte0 = MathUtils.indicator((byte)5);
      boolean boolean0 = MathUtils.equals((double) (byte)5, (double) (-1077909158));
      int int2 = MathUtils.pow((-1), 121645100408832000L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = 3125.233966691539;
      doubleArray0[2] = 613.09619;
      doubleArray0[3] = (double) (-1077909158);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (byte)5;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (byte)5;
      doubleArray0[8] = (double) (-1L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (double) 1, (-1077909158));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      double double0 = MathUtils.cosh((byte)0);
      float float0 = MathUtils.round((float) (byte)0, (int) (byte)0, (int) (byte)0);
      int int0 = MathUtils.lcm((int) (byte)0, (int) (byte)0);
      long long0 = MathUtils.mulAndCheck((-2372L), (long) (byte)0);
      int int1 = MathUtils.addAndCheck(0, 1424);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1424;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1424;
      doubleArray0[5] = (double) 1424;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) 1424;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,424 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.lcm(124, 0);
      float float0 = MathUtils.indicator(0.0F);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 27);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.factorialLog(836);
      byte byte0 = MathUtils.sign((byte)0);
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.sinh(0.0);
      int int0 = MathUtils.subAndCheck((int) (byte)0, 836);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 836;
      doubleArray0[2] = (double) 836;
      doubleArray0[3] = (double) 836;
      doubleArray0[4] = 4793.416873059578;
      doubleArray0[5] = 0.4342944622039795;
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-836);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-836);
      intArray0[4] = (-836);
      intArray0[5] = 836;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      int int3 = MathUtils.subAndCheck(836, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(24.7, 836.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1654.0);
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = 1.1102230246251565E-16;
      doubleArray0[3] = (-1527.64383638);
      doubleArray0[4] = 2.85040095144011776E17;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (0 > -1,527.644)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.indicator(1.0);
      float float0 = MathUtils.round((-426.0F), (-1260));
      int int0 = MathUtils.sign((-1260));
      double double1 = MathUtils.binomialCoefficientLog(2900, (-1));
      int int1 = MathUtils.subAndCheck((-1260), (-1));
      double double2 = MathUtils.normalizeAngle(0.0, 2478.66);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2475.5750110287568;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 2900;
      doubleArray0[5] = (double) (-1259);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-212.0980804425133);
      doubleArray0[8] = (double) (-1259);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(0L, (long) (-1260));
      double double4 = MathUtils.round(1.0, 1424, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2203.75459704195), 0.0, (-2797.08));
      int[] intArray0 = new int[4];
      intArray0[0] = (-2093);
      intArray0[1] = (-6319);
      intArray0[2] = 1918;
      intArray0[3] = (-302);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 659.9547;
      doubleArray0[1] = 17.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 501.8;
      doubleArray0[6] = 0.625;
      doubleArray0[7] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 1706.77327;
      int int0 = MathUtils.hash(1706.77327);
      int int1 = 3893;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1802639106), 3893);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,802,639,106, k = 3,893
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.lcm(0L, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 937;
      intArray0[1] = 2617;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-715);
      intArray0[5] = 0;
      intArray0[6] = 7;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(2401.5825F, (-436), (-985));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -985, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-683);
      intArray0[1] = 2721;
      intArray0[2] = (-1887);
      intArray0[3] = 248;
      intArray0[4] = 0;
      int[] intArray1 = new int[7];
      intArray1[0] = 2721;
      intArray1[1] = 0;
      intArray1[2] = (-1887);
      intArray1[3] = 248;
      intArray1[4] = 2721;
      intArray1[5] = 248;
      intArray1[6] = (-1887);
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = MathUtils.round((-470.8F), 0, 0);
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.addAndCheck(9218868437227405312L, (-1456L));
      long long1 = MathUtils.sign(834L);
      double double1 = MathUtils.log(0.0, (-470.8F));
      long long2 = MathUtils.factorial(0);
      long long3 = MathUtils.subAndCheck(9218868437227403856L, 0L);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, (double) 1, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, (-859.0));
      int int0 = MathUtils.indicator(0);
      double double1 = MathUtils.indicator((-859.0));
      int int1 = MathUtils.sign(0);
      int int2 = MathUtils.pow(0, 2638);
      double double2 = MathUtils.round((double) 2638, 0, 1);
      short short0 = MathUtils.sign((short)0);
      double double3 = MathUtils.binomialCoefficientDouble(0, 0);
      double double4 = MathUtils.normalizeAngle((-176.37866652768918), 426.814);
      long long0 = MathUtils.pow(479001600L, (long) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int3 = MathUtils.hash(0.5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-48);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (short)0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-883));
      int int0 = MathUtils.addAndCheck(163, 2851);
      byte byte0 = MathUtils.sign((byte) (-15));
      int[] intArray0 = new int[6];
      intArray0[0] = 2851;
      intArray0[1] = 163;
      intArray0[2] = 2851;
      intArray0[3] = 163;
      intArray0[4] = 2851;
      intArray0[5] = 173;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-3041));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-3,041)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1830);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Random.setNextRandom(51);
      int int0 = MathUtils.subAndCheck(51, (-44));
      long long0 = MathUtils.pow(598L, 2153L);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1647.02;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck(3333, 3333);
      int int1 = MathUtils.pow(6666, 6666);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-1621));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,621)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.gcd(40320L, 40320L);
      long long1 = MathUtils.sign(40320L);
      long long2 = MathUtils.addAndCheck((-2472L), 1L);
      boolean boolean0 = MathUtils.equals((double) 1L, (double) 1L, 0.0);
      int int0 = MathUtils.gcd(507, 1030);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1421);
      intArray0[1] = 0;
      intArray0[2] = (-948);
      intArray0[3] = (-1113);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      float float0 = MathUtils.indicator((-160.86F));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1952);
      intArray0[1] = (-1431);
      intArray0[2] = (-1095);
      intArray0[3] = (-1489);
      intArray0[4] = 0;
      intArray0[5] = (-1232);
      intArray0[6] = (-2583);
      intArray0[7] = 2;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = 117.52532581414;
      double double4 = MathUtils.indicator(117.52532581414);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1095));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,095
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1887.6579200232), (-1887.6579200232));
      int int0 = Integer.MIN_VALUE;
      int int1 = 192;
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(Integer.MIN_VALUE, 192);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: -2,147,483,648 - 192
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-1614);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1614));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,614
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int0 = MathUtils.pow((-2183), 9223372036854775807L);
      long long0 = MathUtils.pow((long) 0, 112);
      int int1 = MathUtils.gcd(20, 2347);
      float float0 = MathUtils.sign((float) (-769277239));
      long long1 = MathUtils.sign(0L);
      int int2 = MathUtils.pow(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-228.6008349415134);
      doubleArray0[6] = (double) 20;
      doubleArray0[7] = (double) 112;
      doubleArray0[8] = (double) 20;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = 2027.854421202149;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-332.99904876);
      doubleArray1[4] = (double) 9223372036854775807L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      double double1 = MathUtils.cosh(1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1363);
      int[] intArray0 = new int[8];
      intArray0[0] = 1363;
      intArray0[1] = 1363;
      intArray0[2] = 1363;
      intArray0[3] = 1363;
      intArray0[4] = 1363;
      intArray0[5] = 1363;
      intArray0[6] = 1363;
      intArray0[7] = 1363;
      int[] intArray1 = new int[3];
      intArray1[0] = 740;
      intArray1[1] = 1363;
      intArray1[2] = 1363;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float float0 = MathUtils.sign((-310.3404F));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 11.0;
      doubleArray0[1] = (double) (-310.3404F);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-310.3404F);
      doubleArray1[1] = (double) (-1.0F);
      doubleArray1[2] = 11.0;
      doubleArray1[3] = (double) (-1.0F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 1.2246467991473532E-16;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0.0, 1.2246467991473532E-16);
      byte byte0 = MathUtils.indicator((byte) (-125));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = bigInteger0.compareTo(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-136,341,522,219,009^-136,341,522,219,009)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.lcm(689L, 689L);
      boolean boolean0 = MathUtils.equals((double) 689L, 0.0, 1093);
      double double0 = MathUtils.round((double) 689L, 1093);
      boolean boolean1 = MathUtils.equals((double) 689L, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 689.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 689.0;
      doubleArray0[4] = (double) 689L;
      doubleArray0[5] = 689.0;
      doubleArray0[6] = 689.0;
      doubleArray0[7] = 689.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.log(689.0, 689.0);
      float float0 = MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 2875;
      boolean boolean0 = MathUtils.equals((-58.787958106826), (-58.787958106826), 2875);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-58.787958106826);
      doubleArray0[1] = (-58.787958106826);
      doubleArray0[2] = (double) 2875;
      doubleArray0[3] = (-58.787958106826);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 2875, (long) 2875);
      long long1 = MathUtils.sign((-717L));
      double double0 = 0.0;
      int int1 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (double) (-1L), 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2475.9494877809);
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-1080L), (-1853L));
      double double1 = MathUtils.cosh(2880.232153611159);
      long long1 = MathUtils.mulAndCheck((-99L), (-1080L));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-766.50813006));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-799.49293);
      doubleArray0[1] = (-191.7692);
      doubleArray0[2] = (-823.101);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-799.493 < -191.769)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.pow((-1518L), 178);
      int int0 = MathUtils.sign(0);
      byte byte0 = MathUtils.sign((byte) (-103));
      long long1 = MathUtils.gcd((-1294L), (long) 0);
      double double0 = MathUtils.cosh(2785.429);
      double double1 = MathUtils.scalb((-1848.946385035), 0);
      int int1 = MathUtils.compareTo(2785.429, (-1518L), (-1518L));
      int int2 = MathUtils.lcm(1, 8);
      byte byte1 = MathUtils.sign((byte) (-61));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        MathUtils.round(632.0F, 0, 178);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 178, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.gcd((-2177), (-2177));
      long long0 = MathUtils.pow((long) 2177, 127);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(127, mockRandom0);
      boolean boolean0 = bigInteger0.testBit(127);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.binomialCoefficient(0, (-1136));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 127;
      doubleArray0[2] = (double) 2177;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 390.31486387213;
      doubleArray0[1] = 0.3333333333333333;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck((-2148), 0);
      int int1 = MathUtils.pow(0, 0);
      double double1 = MathUtils.sinh(390.31486387213);
      byte byte0 = MathUtils.sign((byte) (-97));
      long long0 = MathUtils.lcm(718L, 0L);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = (-1653.748204925113);
      doubleArray0[2] = (-1653.748204925113);
      doubleArray0[3] = 4696.182;
      doubleArray0[4] = 1681.0557386;
      doubleArray0[5] = (-751.8290252);
      doubleArray0[6] = 1075.5598643;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 217.458810512;
      doubleArray1[1] = 4696.182;
      doubleArray1[2] = 1075.5598643;
      doubleArray1[3] = 4696.182;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      long long0 = MathUtils.indicator(616L);
      long long1 = MathUtils.gcd(1L, 616L);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 12);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 12
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.indicator(4309);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.pow(1L, 1703);
      try { 
        MathUtils.pow(1703, (-185L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,703^-185)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 18;
      intArray0[1] = (-1283);
      intArray0[2] = 2104;
      intArray0[3] = 0;
      intArray0[4] = (-537);
      intArray0[5] = 0;
      intArray0[6] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = (-2665L);
      long long1 = MathUtils.lcm((-2665L), (-2665L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("c%^gl}.{6&P0c[");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.c%^gl}.{6&P0c[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.lcm(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(2401.5825F, (-436), (-985));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -985, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 12);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 5029.8148032;
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-3656.861384723278));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-1188.4301293289504));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.875, 0.0, (-1188.4301293289504));
      boolean boolean4 = MathUtils.equals((-1188.4301293289504), 0.0, 0.0);
      int int0 = MathUtils.mulAndCheck(252, 252);
      long long0 = MathUtils.mulAndCheck(2461L, (long) 63504);
      long long1 = MathUtils.subAndCheck(2461L, 0L);
      boolean boolean5 = MathUtils.equals(1.2958646899018938E-9, 1910.541, (double) 2461L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(71, 1887);
      long long0 = MathUtils.sign(268435455L);
      boolean boolean0 = MathUtils.equals(5546.581243613846, 4798.0, (double) 133977);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equals((-20.2804319307), 1722.0, (double) 0);
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.hash(0.0);
      long long0 = MathUtils.sign((-1193L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.5, 1.0);
      int int3 = MathUtils.indicator(682);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, (double) 0, 2.0);
      short short0 = MathUtils.indicator((short)0);
      long long1 = MathUtils.subAndCheck(598L, (-633L));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 252);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash((double) 252);
      int int1 = MathUtils.subAndCheck(19, 252);
      int int2 = MathUtils.addAndCheck((-233), 19);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2194.3738451455);
      doubleArray0[3] = 0.036;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -2,194.374)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = (-27.55048629351169);
      int int0 = MathUtils.compareTo((-27.55048629351169), 0.0, 0.0);
      float float0 = MathUtils.sign((float) (-1));
      long long0 = 1L;
      long long1 = MathUtils.mulAndCheck((long) (-1), 1L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("org.apache.commons.math.util.MathUtils$1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.org.apache.commons.math.util.MathUtils$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0036;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.3333333134651184, (-5989.0), 9);
      // Undeclared exception!
      try { 
        MathUtils.round((-5989.0), (-235), 19);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1922.842674088297), (-1922.842674088297));
      float float0 = 5047.337F;
      float float1 = MathUtils.indicator(5047.337F);
      double double1 = -0.0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 1.0F, -0.0, Integer.MIN_VALUE);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 39916800L;
      int int0 = (-28);
      try { 
        MathUtils.pow(39916800L, (-28));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (39,916,800^-28)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.sign(3952090531849364496L);
      double double0 = MathUtils.indicator((double) 1L);
      int int0 = (-3426);
      double double1 = MathUtils.scalb(1.073741824E9, (-3426));
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5.2601359015483735E210;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-3426);
      doubleArray0[4] = 1.073741824E9;
      doubleArray0[5] = (double) 3952090531849364496L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = 1.073741824E9;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = (byte)2;
      byte byte1 = MathUtils.indicator((byte)2);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3426));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,426
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-4120);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-4120), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,120, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      int int0 = MathUtils.mulAndCheck((-152), 3150);
      double double0 = MathUtils.factorialDouble(474);
      long long0 = MathUtils.sign((long) 3150);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      int int0 = 3745;
      int int1 = MathUtils.gcd(3745, 3745);
      BigInteger bigInteger0 = BigInteger.ZERO;
      short short0 = bigInteger0.shortValueExact();
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-3896));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1784));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,784
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 302);
      long long0 = MathUtils.subAndCheck((long) 302, (-1066L));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5830993332061267E-10;
      doubleArray0[1] = 2761.954282387155;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(2761.954282387155, 2761.954282387155, 0.0);
      long long0 = MathUtils.lcm(1514L, (-836L));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int1 = bigInteger0.signum();
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.pow(523, 0);
      double double0 = MathUtils.indicator((double) 523);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 523;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 523;
      doubleArray0[4] = (double) 523;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-552.69984407128));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 688.68074890732;
      doubleArray0[1] = 1068.377528567;
      doubleArray0[2] = 1.1102230246251565E-16;
      doubleArray0[3] = 2.404307984052299E-9;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2215.487995025163);
      doubleArray0[6] = 760.128153;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1440));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,440
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 329.749545371266;
      doubleArray0[1] = 2815.3644397;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2867.880616825525);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(924, 0);
      int int1 = MathUtils.hash((double) 0);
      double double0 = MathUtils.sinh(924);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 2239);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,239
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.factorial(0);
      byte byte0 = MathUtils.sign((byte)6);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte)1, (int) (byte)1, 20);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.pow((int) (short)0, (int) (short)0);
      int int1 = MathUtils.gcd((-359), (-359));
      float float0 = MathUtils.round((-1.0F), (-359), 1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)0, (-1696.9921024), 1654.718481483535);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-229.109913), (-2812.009496282356));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (-1696.9921024);
      doubleArray0[2] = (-1696.9921024);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.sign(0);
      float float1 = MathUtils.indicator((float) 1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.sign(2072.9538);
      byte byte0 = MathUtils.sign((byte)16);
      double double1 = MathUtils.normalizeAngle(2072.9538, 2072.9538);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)16, (double) (byte)1, (int) (byte)16);
      int int0 = MathUtils.sign((int) (byte)16);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 1.0, (-860.0));
      boolean boolean0 = MathUtils.equalsIncludingNaN(3226.227777109213, 3.141592653589793);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = (-679.554182151523);
      double double1 = MathUtils.normalizeAngle((-679.554182151523), 0.0);
      byte byte0 = MathUtils.indicator((byte)58);
      double double2 = (-701.2162998);
      // Undeclared exception!
      try { 
        MathUtils.round((-701.2162998), 193, (int) (byte)58);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-3503);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3503), (-3503));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,503
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2318.58105324856), (-2318.58105324856), (-2318.58105324856));
      boolean boolean0 = MathUtils.equals((-2318.58105324856), 0.0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.gcd((-189L), 6722166367014452318L);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.log((-1886.55448715), 1758.7771705539);
      long long0 = MathUtils.binomialCoefficient(0, (-2841));
      long long1 = MathUtils.lcm(4208363204685324176L, 4208363204685324176L);
      double double1 = MathUtils.factorialLog(0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1758.7771705539;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1271.668885681841;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double2 = MathUtils.factorialDouble(1599);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash((double) 4208363204685324176L);
      int int2 = MathUtils.gcd(0, 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 4208363204685324176L);
      double double4 = MathUtils.factorialLog(2615);
      double double5 = MathUtils.sinh((-299.2));
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1599;
      double double6 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.2, 0.2);
      long long0 = MathUtils.indicator(0L);
      int int0 = 1268;
      int int1 = MathUtils.gcd(1268, 1268);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1268);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1352.0;
      doubleArray0[1] = 1212.779286;
      doubleArray0[2] = 0.1666666505023083;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3051.8);
      long long0 = MathUtils.gcd(2503L, 2503L);
      int int0 = MathUtils.addAndCheck(12, 12);
      short short0 = MathUtils.indicator((short)251);
      double double0 = MathUtils.distance1(doubleArray1, doubleArray0);
      float float0 = MathUtils.indicator((-1004.66925F));
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.safeNorm(doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 24, 4053.477820101812, 531);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-783.9108137460378), 79.424407846, 1312);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 1243;
      int int1 = MathUtils.lcm(1243, (-1128));
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = 66;
      int int1 = 0;
      long long1 = MathUtils.binomialCoefficient(66, 0);
      int int2 = MathUtils.addAndCheck(0, 1012);
      int int3 = (-990);
      try { 
        MathUtils.pow(1L, (-990));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-990)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      float float0 = MathUtils.round((float) 0, (-19));
      byte byte0 = MathUtils.indicator((byte)65);
      long long0 = MathUtils.indicator(542L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1295.5086159710445, (-572.552));
      float float0 = MathUtils.sign(1.0F);
      double double0 = MathUtils.normalizeAngle(1.0F, 1.0F);
      int[] intArray0 = new int[8];
      intArray0[0] = 31;
      intArray0[1] = 0;
      intArray0[2] = 678;
      intArray0[3] = 50;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 14;
      intArray0[7] = 739;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 678, 1295.5086159710445);
      int int1 = (-1761);
      try { 
        MathUtils.pow(0, (-1761));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,761)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      long long0 = (-1536L);
      long long1 = MathUtils.addAndCheck((long) 0, (-1536L));
      long long2 = MathUtils.gcd((long) 1, (long) 1);
      double double0 = MathUtils.scalb(5.669184079525E-24, 1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)0);
      long long3 = 6227020800L;
      long long4 = MathUtils.addAndCheck((long) 0, 6227020800L);
      int int2 = MathUtils.compareTo(1L, (-1536L), (short)1);
      int int3 = MathUtils.subAndCheck((int) (short)0, 1656);
      int int4 = MathUtils.addAndCheck(0, 1);
      int int5 = MathUtils.indicator(1);
      long long5 = MathUtils.binomialCoefficient(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, 3.834E-20, (-2947));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
