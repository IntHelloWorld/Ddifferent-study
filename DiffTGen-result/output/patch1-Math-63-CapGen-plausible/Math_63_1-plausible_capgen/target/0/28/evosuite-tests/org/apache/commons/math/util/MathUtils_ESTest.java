/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:26:59 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.indicator(1444L);
      long long1 = MathUtils.pow(1444L, 2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1444L;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1444L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(1L, 0.0, (-2391.501839644922));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(1444L, 1L);
      long long2 = MathUtils.binomialCoefficient(28, (-2264));
      double double3 = MathUtils.factorialDouble(21);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.sign((-9223372036854775808L));
      double double0 = MathUtils.TWO_PI;
      short short0 = MathUtils.sign((short)405);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3512299194304650054L), (long) (-1602));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2129735849;
      intArray0[2] = 21;
      intArray0[3] = 3072;
      intArray0[4] = (-947);
      intArray0[5] = 20;
      intArray0[6] = (-1708);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.binomialCoefficientLog(68, (-2875));
      int int1 = MathUtils.compareTo(21, (-2875), (-1708));
      long long0 = MathUtils.gcd(4635681760191971328L, (long) 21);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-740));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -740
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.indicator(1.1102230246251565E-16);
      int int0 = MathUtils.subAndCheck(0, 7);
      float float0 = MathUtils.round((float) (-7), 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1550.743390013867;
      doubleArray0[6] = 1.1102230246251565E-16;
      doubleArray0[7] = (double) (-7);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)80);
      float float1 = MathUtils.round((float) (byte)1, 63);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(1L, (long) 63);
      double double2 = MathUtils.factorialLog(98);
      double double3 = MathUtils.sign(Double.NaN);
      int int1 = MathUtils.mulAndCheck(0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.hash((-681.7));
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(1495061507, 1495061507);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 1,495,061,507 + 1,495,061,507
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.0);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.mulAndCheck((-63L), (long) 1);
      double double0 = MathUtils.SAFE_MIN;
      int int1 = MathUtils.compareTo(1.0, 2.2250738585072014E-308, 1.0);
      double double1 = MathUtils.round((double) (-63L), 4, 1);
      double double2 = MathUtils.factorialLog(0);
      int int2 = MathUtils.pow(2144553929, 3771);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-831.3947549);
      doubleArray0[2] = (-2512.3);
      doubleArray0[3] = 1850.071;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(3182.704242852, (-549.75936236062), 658381450);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-210), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.sign(0.5);
      int int0 = 0;
      int int1 = 9;
      int int2 = MathUtils.subAndCheck(0, 9);
      double double1 = 0.0;
      int int3 = MathUtils.hash(0.0);
      long long0 = MathUtils.sign((long) 9);
      boolean boolean0 = MathUtils.equals((-2463.549), (double) (-9));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-469.82618376263156), 1.0);
      short short0 = MathUtils.indicator((short)31);
      boolean boolean2 = MathUtils.equals(0.0, 1.0, 10.0);
      double double2 = 2.718281828459045;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-325.83), 2.718281828459045, (-9));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 2089L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2089L, 5648769086999809661L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 513;
      intArray0[1] = (-15);
      intArray0[2] = 58;
      intArray0[3] = 0;
      intArray0[4] = (-52);
      intArray0[5] = (-3414);
      intArray0[6] = 22;
      intArray0[7] = (-2379);
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.indicator(Float.NaN);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-15);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 22;
      doubleArray0[3] = (double) 58;
      doubleArray0[4] = (double) (-2379);
      doubleArray0[5] = (double) 22;
      doubleArray0[6] = (double) (-3414);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (58 >= -2,379)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.sign((-1369L));
      int int0 = 231;
      double double0 = MathUtils.scalb(0.0, 231);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1027.78499268471;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 231;
      doubleArray0[4] = (double) 231;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 231)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      double double1 = 2257.557402828382;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 2257.557402828382, 2257.557402828382);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = MathUtils.compareTo(0.0, 1.1102230246251565E-16, 1.1102230246251565E-16);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.sign(2.356194490192345);
      float float0 = MathUtils.sign(3914.9436F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 3914.9436F;
      doubleArray0[4] = (double) 3914.9436F;
      doubleArray0[5] = 2.356194490192345;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 3914.9436F;
      doubleArray1[1] = (double) 3914.9436F;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (double) 3914.9436F;
      doubleArray1[4] = 2.356194490192345;
      doubleArray1[5] = (double) 1.0F;
      doubleArray1[6] = (-2061.2473340025);
      doubleArray1[7] = 1.073741824E9;
      doubleArray1[8] = (double) 1.0F;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1648.425606), (-1648.425606), 1348);
      double double0 = MathUtils.sign(1047.378);
      long long0 = MathUtils.indicator((long) 1348);
      double double1 = MathUtils.sinh(1047.378);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 1L;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1.986821492305628E-8, 1.375, 123);
      int int0 = MathUtils.sign(0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.0, Double.POSITIVE_INFINITY, 3);
      short short0 = MathUtils.sign((short)0);
      byte byte0 = MathUtils.indicator((byte)0);
      long long1 = MathUtils.lcm(4294967295L, (long) (short)0);
      long long2 = MathUtils.pow(20922789888000L, 4294967295L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = 0.0F;
      int int0 = 6;
      float float1 = MathUtils.round(0.0F, 6, 6);
      int int1 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      int int2 = MathUtils.sign(1);
      long long0 = MathUtils.indicator((long) 1);
      boolean boolean0 = MathUtils.equals((-521.4183053), (double) (short)0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1874.266683893, 1874.266683893, 3.0);
      boolean boolean2 = MathUtils.equals(1874.266683893, (double) 1, (int) (short)1);
      int int3 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.lcm(4577762542105553359L, 4577762542105553359L);
      int int4 = MathUtils.subAndCheck((int) (short)1, 2058);
      double double1 = MathUtils.log(0.0, 0.0F);
      long long2 = MathUtils.gcd((long) (-2057), (-873L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.binomialCoefficientDouble(17, (-1807));
      long long0 = 0L;
      long long1 = MathUtils.lcm(0L, (long) (-1807));
      int[] intArray0 = new int[8];
      intArray0[0] = 17;
      intArray0[1] = (-1807);
      intArray0[2] = (-1807);
      intArray0[3] = (-1807);
      intArray0[4] = 17;
      intArray0[5] = 17;
      intArray0[6] = (-1807);
      intArray0[7] = (-1807);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = (-1416);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1416), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,416, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 2071.82418;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (\u221E >= 2,071.824)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.008333333333333333;
      doubleArray0[1] = 1.304E19;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-122.95);
      doubleArray1[1] = 0.008333333333333333;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 0.008333333333333333;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double1 = MathUtils.sinh(1.304E19);
      long long0 = MathUtils.lcm(1134L, 1134L);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-92));
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double4 = MathUtils.round(0.008333333333333333, 0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (byte) (-92);
      doubleArray2[1] = 0.0;
      double double5 = MathUtils.distance(doubleArray0, doubleArray2);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
      int int1 = 63;
      double double0 = MathUtils.round(0.0, 63);
      int int2 = MathUtils.compareTo(63, 0, 0.0);
      float float0 = MathUtils.round(0.0F, 52, 1);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double double1 = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(20.0, 0.0);
      short short2 = MathUtils.sign((short)244);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2837));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,837
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1812;
      intArray0[1] = 82;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.log(428.0, 0.0);
      long long0 = MathUtils.subAndCheck((-2581L), 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1812;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 1812;
      doubleArray0[4] = (double) 82;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.sinh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1812, 82);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)29);
      int int0 = 0;
      double double0 = MathUtils.round(10.0, (int) (byte)1, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 10.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (10 >= 10)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.scalb((-2085.78995575), (-1369));
      double double1 = MathUtils.log(4312.86393758, 2653.8);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.9419776729632275;
      doubleArray0[1] = 2653.8;
      doubleArray0[2] = 4312.86393758;
      doubleArray0[3] = 4312.86393758;
      doubleArray0[4] = (-5.23163730112532E207);
      doubleArray0[5] = 2653.8;
      doubleArray0[6] = (-5.23163730112532E207);
      doubleArray0[7] = 1562.401098999919;
      doubleArray0[8] = 0.9419776729632275;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (4,312.864 >= 4,312.864)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1127);
      double double0 = MathUtils.cosh((short)1);
      double double1 = MathUtils.cosh((short)1127);
      int int0 = MathUtils.lcm((int) (short)1127, (int) (short)1127);
      double double2 = MathUtils.factorialLog((short)1);
      int int1 = MathUtils.pow(0, 911L);
      long long0 = MathUtils.subAndCheck(450L, (long) (short)1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 449L;
      doubleArray0[1] = 1.5430806348152437;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 911L;
      doubleArray0[4] = (double) 449L;
      doubleArray0[5] = (double) (short)1127;
      doubleArray0[6] = (double) 1127;
      doubleArray0[7] = (double) 450L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short1 = MathUtils.indicator((short)473);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-119);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-505));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (398,473^-505)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-732.08977642955));
      int int0 = (-237);
      double double0 = MathUtils.round(0.0, (-237));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-237), (-237));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -237
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.hash((-1676.660317742));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1676.660317742);
      doubleArray0[1] = (double) (-355485237);
      doubleArray0[2] = (double) (-355485237);
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.indicator(636);
      double double0 = MathUtils.sinh((-1173.125));
      byte byte0 = MathUtils.sign((byte)4);
      short short0 = MathUtils.indicator((short)741);
      int int1 = MathUtils.compareTo((-426.6), (byte)4, (-1173.125));
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = (-5175.18759966813);
      boolean boolean0 = MathUtils.equals((-5175.18759966813), (-5175.18759966813), 2364);
      int int0 = 2580;
      int int1 = MathUtils.lcm(2580, 2364);
      byte byte0 = MathUtils.indicator((byte)94);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (byte)1, (int) (byte)1, (-559));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -559, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1177);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3405L);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = new int[2];
      intArray1[0] = (int) (byte)17;
      intArray1[1] = (int) (byte)0;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 4.455505956692757;
      int int0 = (-966);
      double double1 = MathUtils.round(4.455505956692757, (-966));
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)4);
      float float0 = MathUtils.indicator((float) (byte)4);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)4;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = (double) (byte)4;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) (byte)1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      float float1 = MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.cosh(11.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(278.12, 278.12);
      long long0 = MathUtils.gcd(0L, (-9218868437227405313L));
      double double1 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 29937.070865949758;
      MathUtils.checkOrder(doubleArray0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      long long1 = MathUtils.pow(0L, 0);
      int int0 = MathUtils.compareTo(1214.1, (-9218868437227405313L), 9218868437227405313L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 11.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.indicator(0);
      short short0 = MathUtils.indicator((short) (-1366));
      short short1 = MathUtils.indicator((short)0);
      double double3 = MathUtils.factorialDouble((short)0);
      int int2 = MathUtils.pow((int) (short) (-1), 52);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(3095, 0);
      int int2 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3095;
      doubleArray0[1] = (double) 3095;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.indicator((long) 1);
      int int3 = (-61);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-61));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(639, 0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.0);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.mulAndCheck((-63L), (long) 1);
      double double0 = MathUtils.scalb(1, 3771);
      int int1 = MathUtils.compareTo(1.0, 1.463023860841312E-98, 1.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.log(278.0254310788, (-526.47627));
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.sinh(Double.NaN);
      double double2 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 608.21979669, 1301.433774757752);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.sign(1287);
      double double0 = MathUtils.binomialCoefficientLog(68, 68);
      double double1 = MathUtils.cosh(68);
      long long0 = (-3376L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(9223372036854775807L, (-3376L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-265.8806957), 952.44552638244);
      long long0 = MathUtils.lcm(0L, 527L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-3129L), 1013L);
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = 0;
      int int3 = MathUtils.sign(0);
      int int4 = (-2672);
      int int5 = (-1575);
      try { 
        MathUtils.pow((-2672), (-1575));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,672^-1,575)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double double2 = MathUtils.cosh(1311.095898538151);
      short short0 = MathUtils.indicator((short)438);
      float float0 = MathUtils.sign((float) (short)1);
      double double3 = MathUtils.factorialLog((short)1);
      short short1 = MathUtils.indicator((short)1);
      double double4 = MathUtils.indicator(0.0);
      double double5 = MathUtils.cosh(0.5);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(290, (short)438);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 290, k = 438
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-399L));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1648.425606), (-1648.425606), 1348);
      double double0 = MathUtils.sign(1047.378);
      long long0 = MathUtils.indicator((long) 1348);
      double double1 = MathUtils.sinh(1047.378);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 1L;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1.986821492305628E-8, 1.375, 123);
      int int0 = MathUtils.sign(0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.0, Double.POSITIVE_INFINITY, 3);
      short short0 = MathUtils.sign((short)0);
      byte byte0 = MathUtils.indicator((byte)0);
      long long1 = MathUtils.lcm(4294967295L, (long) (short)0);
      long long2 = MathUtils.pow((long) (byte)1, 4294967295L);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1122.42, 0.0);
      int int0 = 581;
      int int1 = 66;
      int int2 = MathUtils.lcm(581, 66);
      double[] doubleArray0 = new double[0];
      double double0 = (-1824.330225082376);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1824.330225082376));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.indicator(1.304E19);
      boolean boolean0 = MathUtils.equals((-4140.6802), 0.0);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4140.6802);
      doubleArray0[1] = (double) (short)0;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2393;
      int int0 = (-2541);
      intArray0[1] = (-2541);
      intArray0[2] = 115;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-555.801886245379), 518.769, 115);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.1666666505023083;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 115;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-555.801886245379);
      doubleArray0[6] = (double) (-2541);
      doubleArray0[7] = (double) (-2541);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2541);
      doubleArray1[1] = 0.1666666505023083;
      doubleArray1[2] = (double) (-2541);
      doubleArray1[3] = 856.426363165697;
      doubleArray1[4] = (double) 115;
      doubleArray1[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.addAndCheck((-3958705157555305932L), (-3958705157555305932L));
      int int0 = MathUtils.indicator((-2106));
      BigInteger bigInteger0 = BigInteger.TEN;
      int int1 = 66;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(66);
      int int2 = (-773);
      BigInteger bigInteger2 = bigInteger0.shiftLeft((-773));
      int int3 = 0;
      BigInteger bigInteger3 = bigInteger0.pow(0);
      try { 
        MathUtils.pow(bigInteger0, (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.indicator(8);
      short short0 = MathUtils.indicator((short) (-183));
      long long0 = MathUtils.subAndCheck(515L, (-2679L));
      float float0 = MathUtils.round(1721.0F, (int) (short) (-1), 1);
      int int1 = MathUtils.sign(1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.compareTo((-3911.468249361), 0.0, 0.0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.sign(362880L);
      int int2 = 0;
      double double0 = MathUtils.round((double) 0, (-1), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0, (double) 0);
      int int3 = MathUtils.addAndCheck((-1), (-1));
      int int4 = MathUtils.compareTo(1L, 362880L, 1956.22594);
      long long1 = MathUtils.lcm(362880L, (long) (-1));
      long long2 = 2147483647L;
      try { 
        MathUtils.pow(2147483647L, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,147,483,647^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.scalb(10.0, 14);
      boolean boolean0 = MathUtils.equals(163840.0, 163840.0);
      double double1 = MathUtils.binomialCoefficientDouble(66, 14);
      long long0 = MathUtils.gcd(96302390510404L, 3049L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, (-1307.385329));
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) 0);
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = MathUtils.hash(0.0);
      long long0 = MathUtils.indicator(2721L);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      long long2 = MathUtils.binomialCoefficient(0, 0);
      long long3 = MathUtils.lcm(1L, (long) 0);
      double double1 = MathUtils.normalizeAngle(233.4, 0.0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.lcm(120L, 120L);
      long long1 = MathUtils.gcd(939L, (-1669L));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.99;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(2147483648L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.99 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-1025.1946F), 0, 0);
      int int1 = MathUtils.lcm(0, 0);
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, 1151L);
      double double0 = MathUtils.round((double) 0, 0, 0);
      int int2 = 190;
      // Undeclared exception!
      try { 
        MathUtils.factorial(190);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      int int0 = (-3531);
      int int1 = MathUtils.pow((-3531), 1L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(2017L, 740);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 5);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.pow(0, 29);
      int int1 = MathUtils.subAndCheck(3, 0);
      int int2 = MathUtils.subAndCheck(0, 0);
      int int3 = MathUtils.mulAndCheck((-422), 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-422);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 29;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 29;
      doubleArray0[8] = (double) 0;
      int int4 = MathUtils.hash(doubleArray0);
      int int5 = MathUtils.compareTo((-422), 3.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 10, 1118);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short short0 = MathUtils.sign((short)31);
      double double0 = MathUtils.factorialLog(92);
      float float0 = MathUtils.round((float) 92, 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(327.18528770377526, (-1538.3108351236));
      int int0 = MathUtils.lcm((int) (short)1, 0);
      double double1 = MathUtils.binomialCoefficientLog((short)1, 0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 5;
      int int1 = MathUtils.pow(5, (long) 5);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.addAndCheck((long) (byte)0, 0L);
      int int2 = (-3044);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 5, 1.0, (-3044));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.sign((-9223372036854775808L));
      int int0 = (-1602);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1602));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,602
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.pow(21, 8);
      int int1 = MathUtils.compareTo((-831846303), 0.0, 8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-1467.2326966818), 0);
      BigInteger bigInteger0 = null;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 199.707964557;
      doubleArray0[2] = 492.162999;
      doubleArray0[3] = (-2220.0);
      doubleArray0[4] = 10.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = 10.0;
      doubleArray1[2] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = (-2236);
      try { 
        MathUtils.pow(0, (-2236));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,236)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = MathUtils.sign((-1.0F));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = (-1063);
      try { 
        MathUtils.pow((-1063), (long) (-1063));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,063^-1,063)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 0, (double) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2185);
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 19;
      intArray0[5] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.pow((-4), 1);
      int int2 = MathUtils.indicator(4517);
      int int3 = MathUtils.gcd(636, (-501));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.indicator(48L);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, (long) 1);
      int int4 = MathUtils.gcd((-1087), 0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, (-4), (-930));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -930, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-626));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.scalb(10.0, 0);
      boolean boolean0 = MathUtils.equals(10.0, 10.0);
      double double1 = MathUtils.binomialCoefficientDouble(66, 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.lcm(200, 200);
      int int1 = 61;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 200, 4227, 61);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 61, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = Integer.MIN_VALUE;
      try { 
        MathUtils.pow((-2407), Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,407^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 1392;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1392);
      try { 
        MathUtils.pow(1392, (long) Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,392^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(5524L, 5524L);
      int int0 = 1621;
      long long1 = MathUtils.pow((-1023L), 1621);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.9999997615814209, (-889.141755737484), 1621);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.sign((-2063));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(3607, 3607);
      double double1 = MathUtils.sign((-3197.042583737859));
      int int0 = MathUtils.mulAndCheck(3607, (-1643));
      double double2 = MathUtils.binomialCoefficientDouble(0, 0);
      int int1 = MathUtils.indicator(2705);
      double double3 = MathUtils.binomialCoefficientDouble(795, 31);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.log(0.75, (-1668.2711005267));
      float float0 = MathUtils.indicator((-1.0F));
      short short0 = MathUtils.indicator((short) (-3710));
      double double1 = MathUtils.indicator((double) (short) (-3710));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = MathUtils.compareTo((-3452.3826448382), (-3452.3826448382), (-3452.3826448382));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.hash((double) 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(819.0, 819.0);
      double double0 = MathUtils.indicator(3.141592653589793);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 819.0;
      doubleArray0[1] = 4201.224;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = (-1756.418227);
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 3.141592653589793;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.sinh((-908.4));
      long long0 = MathUtils.indicator((-262L));
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 4201.224;
      doubleArray1[1] = 10.0;
      doubleArray1[2] = (double) (-262L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.16624879837036133), 5.650007086920087E-9);
      double double0 = MathUtils.indicator(5.650007086920087E-9);
      long long0 = MathUtils.binomialCoefficient(3688, 3688);
      short short0 = MathUtils.indicator((short)116);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      float float0 = MathUtils.round((float) 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      int int1 = bigInteger0.signum();
      BigInteger bigInteger2 = bigInteger0.shiftRight(215);
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.setBit(215);
      Object object0 = new Object();
      int int2 = bigInteger0.signum();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-846));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -846
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-1396);
      float float0 = MathUtils.round(0.0F, (-1396));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int1 = 0;
      int int2 = MathUtils.pow((-1396), 0);
      int int3 = MathUtils.lcm(1631, 0);
      double double0 = MathUtils.round((double) 0, 0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      try { 
        MathUtils.pow(bigInteger0, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 226;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 226;
      doubleArray0[3] = (double) 226;
      doubleArray0[4] = (double) 226;
      doubleArray0[5] = (double) 226;
      doubleArray0[6] = (double) 226;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 521.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-719.08569089509);
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2432902008176640000L, 2432902008176640000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.lcm((-4575L), 0L);
      double double0 = MathUtils.normalizeAngle(0L, (-4575L));
      int int0 = MathUtils.mulAndCheck((-2858), (int) (byte)0);
      long long1 = MathUtils.subAndCheck(0L, (-1051L));
      int int1 = MathUtils.indicator((int) (byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-4574.158903626739);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2858));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 9218868437227405312L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9218868437227405312L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 9,218,868,437,227,405,312 + 9,218,868,437,227,405,312
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      int int1 = MathUtils.sign(252);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(252);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger1.add(bigInteger0);
      float float0 = bigInteger2.floatValue();
      BigInteger bigInteger4 = bigInteger0.or(bigInteger2);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger5 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 1475L);
      int int2 = MathUtils.indicator((-2634));
      byte byte0 = MathUtils.sign((byte) (-45));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, (double) (-1), (-153.8));
      byte byte1 = MathUtils.indicator((byte) (-45));
      BigInteger bigInteger7 = BigInteger.TEN;
      BigInteger bigInteger8 = MathUtils.pow(bigInteger7, bigInteger4);
      try { 
        MathUtils.pow(1475L, (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,475^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-123);
      double double0 = MathUtils.scalb(1148.155, (-123));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-123);
      doubleArray0[1] = 1148.155;
      doubleArray0[2] = (double) (-123);
      doubleArray0[3] = 1148.155;
      doubleArray0[4] = (double) (-123);
      doubleArray0[5] = 1.0797197730946908E-34;
      int int1 = MathUtils.hash(doubleArray0);
      try { 
        MathUtils.pow((-1372L), (-1722));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,372^-1,722)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.sinh((-4678.161488296898));
      double double1 = MathUtils.log(0.0, Double.NEGATIVE_INFINITY);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4678.161488296898);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= -4,678.161)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 0);
      byte byte0 = MathUtils.sign((byte)26);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.round((double) 0.0F, 0);
      int int0 = MathUtils.sign(2);
      int int1 = MathUtils.indicator((-2924));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.log(4312.86393758, 2653.8);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.9419776729632275;
      doubleArray0[1] = 2653.8;
      doubleArray0[2] = 4312.86393758;
      doubleArray0[3] = 4312.86393758;
      doubleArray0[5] = 2653.8;
      doubleArray0[7] = 1562.401098999919;
      doubleArray0[8] = 0.9419776729632275;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (4,312.864 >= 4,312.864)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 2690);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 0L;
      try { 
        MathUtils.pow(0L, (-1120L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,120)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.gcd((-1158L), (-1158L));
      double double0 = MathUtils.sinh(1158L);
      double double1 = MathUtils.cosh(0.0);
      int int0 = (-2106);
      try { 
        MathUtils.pow((-530L), (-2106));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-530^-2,106)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.scalb((-1501.145563318891), 1098);
      float float0 = MathUtils.round((float) 1098, 1098);
      int int0 = MathUtils.indicator(1098);
      int int1 = MathUtils.lcm(0, 0);
      float float1 = MathUtils.round((-466.7934F), 0);
      int int2 = MathUtils.subAndCheck(5594, 1548);
      boolean boolean0 = MathUtils.equalsIncludingNaN(8.251545029714408E-9, 8.251545029714408E-9, (-2360.39975160056));
      int int3 = MathUtils.lcm(1098, (-342));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.gcd((-223L), (long) 0);
      int int4 = MathUtils.mulAndCheck(18, 5594);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-441.6613327950776), (-559.4272800972744), (-2360.39975160056));
      float float2 = MathUtils.indicator((float) 1098);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1098);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 20862;
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) (-466.7934F);
      doubleArray0[3] = (double) 18;
      doubleArray0[4] = (-441.6613327950776);
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = 8.251545029714408E-9;
      doubleArray0[7] = (-441.6613327950776);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-46);
      int int1 = MathUtils.gcd((-46), (-46));
      double double0 = MathUtils.normalizeAngle(46, (-46));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-46), Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -46
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.indicator((-767.524112749));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-767.524112749);
      doubleArray0[3] = (-767.524112749);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(0L, 958L);
      float float0 = MathUtils.sign((float) 0L);
      byte byte0 = MathUtils.indicator((byte) (-49));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1024.0, 1551.0, (int) (byte) (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short short0 = (short)1547;
      short short1 = MathUtils.indicator((short)1547);
      long long0 = MathUtils.addAndCheck((-1300L), (-859L));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 2.2250738585072014E-308;
      int int0 = MathUtils.compareTo(2.2250738585072014E-308, (-2472.0546526126), 2.2250738585072014E-308);
      int int1 = 124;
      // Undeclared exception!
      try { 
        MathUtils.factorial(124);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1997, 85);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 85;
      doubleArray0[1] = (double) 85;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(763L, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.9713522299314837E151, (double) 85, 3.834E-20);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.log(0, 1L);
      int int0 = MathUtils.subAndCheck(1997, 0);
      long long1 = MathUtils.subAndCheck(1L, 4294967295L);
      byte byte0 = MathUtils.indicator((byte) (-127));
      short short0 = MathUtils.indicator((short) (-4521));
      boolean boolean2 = MathUtils.equalsIncludingNaN((-1767.155255228), Double.NaN);
      double double3 = MathUtils.binomialCoefficientLog(1997, (-2813));
      int int1 = MathUtils.hash(1189.979684839);
      int int2 = MathUtils.pow(241, 1913784442);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = MathUtils.round((-1430.26F), 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.valueOf("DECREASING");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1430.26F);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.49999999999999994;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.scalb(0.0, 8);
      double double1 = MathUtils.binomialCoefficientLog(158, 61);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(127, 127);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 127;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 127;
      doubleArray0[3] = (double) 127;
      doubleArray0[4] = (double) 127;
      doubleArray0[5] = (double) 127;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.log(428.919065202, 428.919065202);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 428.919065202;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 428.919065202;
      doubleArray0[6] = 428.919065202;
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-944.1185093083));
      double double1 = 0.0;
      int int0 = MathUtils.compareTo(0.0, (-1704.0), 0.0);
      double double2 = MathUtils.factorialDouble(1);
      double double3 = MathUtils.factorialDouble(1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (-0 > -0.732)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-128L), 1143L);
      int int0 = MathUtils.pow((-9453), 2524);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-9453);
      doubleArray0[1] = (double) (-9453);
      doubleArray0[2] = (-852.56);
      doubleArray0[3] = (double) (-128L);
      doubleArray0[4] = (double) 1143L;
      doubleArray0[5] = (double) 1143L;
      doubleArray0[6] = (double) 864271217;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-9453.0));
      long long1 = MathUtils.pow(1314L, 864271217);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (-9453));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 242;
      boolean boolean0 = MathUtils.equals(0.0, 1859.908201049356, 242);
      // Undeclared exception!
      try { 
        MathUtils.factorial(242);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1298.055382081), (-1298.055382081), (-1298.055382081));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 16);
      try { 
        MathUtils.pow(bigInteger1, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (270,208,647,091,806,273,956,906,117,115,571,341,275,028,002,260,674,288,211,005,014,016^-12,288)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.indicator(1444L);
      long long1 = MathUtils.pow(1444L, 2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1444L;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2085136L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(1L, 0.0, (-2391.501839644922));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(1444L, 1L);
      long long2 = MathUtils.binomialCoefficient(28, (-2264));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(67, 67);
      short short0 = (short) (-2197);
      short short1 = MathUtils.indicator((short) (-2197));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2022));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,022
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.factorialLog(15);
      double double1 = MathUtils.factorialDouble(104);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      BigInteger[] bigIntegerArray0 = bigInteger2.divideAndRemainder(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      byte byte0 = bigInteger1.byteValueExact();
      BigInteger bigInteger4 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (long) 15);
      double double2 = MathUtils.log(Double.NEGATIVE_INFINITY, 27.89927138384089);
      long long0 = MathUtils.mulAndCheck((-1182L), 0L);
      int[] intArray0 = new int[5];
      intArray0[0] = (-4096);
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = 15;
      intArray0[4] = 104;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 3617.7777533320327;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double0 = MathUtils.normalizeAngle(3617.7777533320327, Double.POSITIVE_INFINITY);
      int int0 = MathUtils.sign((-844));
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, 3617.7777533320327);
      long long0 = MathUtils.pow((long) (-1), 1032L);
      // Undeclared exception!
      try { 
        MathUtils.equals((-531.3283415), Double.POSITIVE_INFINITY, (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.sign((-650L));
      int int0 = 20;
      long long1 = MathUtils.factorial(20);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1844.61;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-693.7477947759696);
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.19999954104423523;
      doubleArray0[6] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-693.748 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.indicator(79);
      int int1 = MathUtils.subAndCheck(79, 154);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.clearBit(154);
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int int2 = MathUtils.subAndCheck(1, 154);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(555, 3931);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 555, k = 3,931
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.indicator(113236205062349959L);
      int int0 = MathUtils.pow(0, 1375);
      double double0 = MathUtils.scalb(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2883));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,883
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.pow(8, 8);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.round(1399.11F, 1704);
      // Undeclared exception!
      MathUtils.factorialLog(16777216);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1465L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1465L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 1465L;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2046.2147928710065);
      doubleArray0[1] = (-3000.5565);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-2,046.215 >= -3,000.557)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      int int0 = MathUtils.pow(0, 0L);
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.mulAndCheck((long) 0, 0L);
      long long2 = MathUtils.gcd(0L, 3952090531849364496L);
      double double1 = MathUtils.sign((-76.026072670755));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.indicator((float) 3952090531849364496L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1);
      byte byte0 = MathUtils.sign((byte) (-76));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.addAndCheck(0L, 1L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 249.787;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2147483648L), (-2147483648L));
      int int0 = MathUtils.gcd(715, 159);
      long long1 = MathUtils.addAndCheck((long) 1, (long) 159);
      int[] intArray0 = new int[7];
      intArray0[0] = 715;
      intArray0[1] = 1;
      intArray0[2] = 159;
      intArray0[3] = 159;
      intArray0[4] = 159;
      intArray0[5] = 1;
      intArray0[6] = 715;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-20));
      int int0 = 17;
      double double0 = MathUtils.factorialDouble(17);
      float float0 = MathUtils.sign((float) (byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)7);
      short short0 = MathUtils.indicator((short) (byte)7);
      double double0 = MathUtils.binomialCoefficientDouble(4658, 172);
      int int0 = MathUtils.lcm((int) (short)1, 0);
      double double1 = MathUtils.sign((double) (byte)1);
      long long0 = MathUtils.indicator((long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (byte)1, (-692.010582769));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 278.463;
      doubleArray0[1] = (double) 172;
      doubleArray0[2] = (-692.010582769);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double2 = MathUtils.binomialCoefficientDouble(1542, 207);
      int int1 = MathUtils.addAndCheck((int) (byte)1, 0);
      long long1 = MathUtils.indicator((-4393L));
      long long2 = MathUtils.pow((long) 0, 1033);
      long long3 = MathUtils.mulAndCheck((-4393L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (short)1, (double) 172, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1188L, (-896L));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.log((-2227.7), 872.22);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.pow(3628800L, 0);
      double double0 = MathUtils.round((double) 1L, 0);
      long long1 = MathUtils.pow((long) 0, 0);
      float float0 = MathUtils.round(104.0F, 0);
      double double1 = MathUtils.scalb(2060.5, 0);
      double double2 = MathUtils.factorialDouble(3762);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      byte byte0 = MathUtils.indicator((byte) (-103));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 3036);
      long long0 = MathUtils.pow((-883L), (long) 3036);
      long long1 = MathUtils.addAndCheck((-883L), 2107080682085361393L);
      double double1 = MathUtils.binomialCoefficientDouble(1524, 14);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 3036;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.pow(605L, 605L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 605L;
      doubleArray0[1] = (double) 605L;
      doubleArray0[2] = (double) (-4201556419574414771L);
      doubleArray0[3] = (double) 605L;
      doubleArray0[4] = (double) (-4201556419574414771L);
      doubleArray0[5] = 0.5;
      doubleArray0[6] = 1528.1145809373277;
      doubleArray0[7] = (double) (-4201556419574414771L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (605 <= 605)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      int int0 = MathUtils.addAndCheck(2023, 66);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 833);
      boolean boolean0 = MathUtils.equals(0.0, 1091.45069057772);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.indicator(0.167);
      float float0 = MathUtils.sign((-1.0F));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-57);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-57));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (203,394,381,122,328,090,823^-57)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 8);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.gcd(4503599627370496L, 4503599627370496L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4503599627370496L;
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (double) 4503599627370496L;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.normalizeAngle(4818.46120654, 4503599627370496L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, 0.0);
      float float0 = MathUtils.indicator((float) 4503599627370496L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4503599627370496L);
      int int1 = MathUtils.subAndCheck((-124), (-2028));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      long long0 = MathUtils.addAndCheck(188L, 3985L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(904, 21);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1997, 85);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 85;
      doubleArray0[1] = (double) 85;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(763L, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.9713522299314837E151, (double) 85, 3.834E-20);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.log(0, 1L);
      int int0 = MathUtils.subAndCheck(1997, 0);
      long long1 = MathUtils.subAndCheck(1L, 4294967295L);
      byte byte0 = (byte) (-127);
      byte byte1 = MathUtils.indicator((byte) (-127));
      short short0 = (short) (-4521);
      short short1 = MathUtils.indicator((short) (-4521));
      boolean boolean2 = MathUtils.equalsIncludingNaN((-1767.155255228), Double.NaN);
      int int1 = (-2813);
      double double3 = MathUtils.binomialCoefficientLog(1997, (-2813));
      int int2 = MathUtils.hash(1189.979684839);
      int int3 = MathUtils.pow(241, 1913784442);
      try { 
        MathUtils.pow((int) (byte) (-127), (long) (short) (-4521));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-127^-4,521)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.pow(30, 30);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4095L);
      long long0 = MathUtils.indicator(4095L);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1178);
      intArray0[1] = (-437);
      intArray0[2] = (-2147);
      intArray0[3] = 1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.sign((-2147));
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.sinh(3294198.0);
      int[] intArray1 = new int[4];
      intArray1[0] = (-1);
      intArray1[1] = (-2147);
      intArray1[2] = 1069;
      intArray1[3] = (-1);
      int int2 = MathUtils.distance1(intArray0, intArray1);
      int int3 = MathUtils.lcm((-1), 4);
      int[] intArray2 = new int[5];
      intArray2[0] = (-1);
      intArray2[1] = 4;
      intArray2[2] = 1;
      intArray2[3] = (-2147);
      intArray2[4] = (-1178);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray2, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.sign(2974.554683);
      float float0 = MathUtils.round(1.0F, 7, 7);
      double double1 = MathUtils.factorialLog(7);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float1 = MathUtils.sign(0.0F);
      double double2 = MathUtils.normalizeAngle(0.0F, 0.0);
      double double3 = MathUtils.normalizeAngle(0.0, 0.0);
      short short0 = MathUtils.indicator((short)58);
      double double4 = MathUtils.round(2974.554683, (-1999));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (short)58;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (short)58;
      double double5 = MathUtils.safeNorm(doubleArray0);
      double double6 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(1180.6335271440746, 13, (-4002));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
