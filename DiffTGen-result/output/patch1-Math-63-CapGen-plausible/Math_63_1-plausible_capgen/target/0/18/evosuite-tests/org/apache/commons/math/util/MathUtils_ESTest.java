/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:23:19 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2.2250738585072014E-308, 2.2250738585072014E-308);
      double double0 = (-1245.83470829321);
      double double1 = MathUtils.sinh((-1245.83470829321));
      long long0 = 380L;
      long long1 = MathUtils.indicator(380L);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 380L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.pow((-302932621132653753L), 3094L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3094L;
      doubleArray0[1] = (double) 3094L;
      doubleArray0[2] = (double) 3094L;
      doubleArray0[3] = (double) 3094L;
      doubleArray0[4] = (double) (-6136483362528442991L);
      doubleArray0[5] = (double) (-6136483362528442991L);
      doubleArray0[6] = (double) (-302932621132653753L);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(410);
      int int0 = MathUtils.indicator((-1161));
      int int1 = MathUtils.lcm(410, (-1161));
      int int2 = MathUtils.pow((-1), 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.5000000000042687;
      int int3 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      MathUtils.factorialDouble(476010);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 222.4438690530185;
      doubleArray0[1] = (-0.49999999999999994);
      doubleArray0[2] = 1550.818;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1982.7031947);
      doubleArray0[5] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.log((-735.078056653), 2863.367939);
      float float0 = MathUtils.sign((-1.0F));
      int int0 = MathUtils.gcd(0, 1246);
      float float1 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.pow((long) 1246, (long) 1246);
      float float2 = MathUtils.sign(Float.NaN);
      int int1 = MathUtils.pow(238, 1246);
      double double1 = MathUtils.round((double) Float.NaN, 1246);
      int int2 = MathUtils.lcm((-4248), 0);
      long long1 = MathUtils.addAndCheck(0L, 1743L);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)79);
      long long0 = MathUtils.subAndCheck(4095L, 939L);
      double double0 = MathUtils.indicator(1423.825250652);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = 121645100408832000L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(121645100408832000L, 121645100408832000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 1263L;
      long long1 = MathUtils.mulAndCheck(1263L, 1263L);
      byte byte0 = MathUtils.sign((byte) (-90));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte) (-90);
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      int int0 = bigInteger0.compareTo(bigInteger3);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 1263L);
      try { 
        MathUtils.pow(bigInteger4, (int) (byte) (-90));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-90)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.pow((-1250), 74L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 565;
      intArray0[0] = 565;
      intArray0[1] = (-229);
      intArray0[2] = (-1889);
      int int1 = 193;
      intArray0[3] = 193;
      intArray0[4] = (-610);
      intArray0[5] = 0;
      int int2 = 21;
      intArray0[6] = 21;
      int int3 = 2;
      intArray0[7] = 2;
      int[] intArray1 = new int[1];
      intArray1[0] = 2972;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, 6.283185307179586, 0.08371849358081818);
      int int0 = MathUtils.compareTo(6.283185307179586, 0.0, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator((-137L));
      int int1 = MathUtils.hash(0.5);
      // Undeclared exception!
      try { 
        MathUtils.round(0.5, 1071644672);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4272.2673641585);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 40.19140625;
      doubleArray0[3] = 639.4051322098;
      doubleArray0[4] = 0.3999999761581421;
      doubleArray0[5] = 1197.0727554;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (639.405 > 0.4)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1430.676, 1430.676, 1430.676);
      int int0 = MathUtils.lcm(491, 491);
      float float0 = MathUtils.round((float) 491, 491);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 491;
      doubleArray0[1] = (double) 491;
      doubleArray0[2] = (double) 491;
      doubleArray0[3] = 1430.676;
      doubleArray0[4] = (double) 491;
      doubleArray0[5] = 1430.676;
      doubleArray0[6] = (double) 491;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 491;
      intArray0[1] = 249;
      intArray0[2] = 491;
      intArray0[3] = 491;
      intArray0[4] = 491;
      intArray0[5] = 491;
      intArray0[6] = 6;
      intArray0[7] = (-720);
      intArray0[8] = 491;
      int[] intArray1 = new int[2];
      intArray1[0] = 491;
      intArray1[1] = (-720);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray1);
      double double1 = MathUtils.safeNorm(doubleArray1);
      double double2 = MathUtils.safeNorm(doubleArray1);
      int int0 = 180;
      // Undeclared exception!
      try { 
        MathUtils.factorial(180);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck(555, 555);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int[] intArray1 = new int[1];
      int int3 = 256;
      intArray1[0] = 256;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 658L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-996), (-996));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -996
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-575.1);
      doubleArray0[1] = 1.2246467991473532E-16;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4329.97969;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.setBit(407);
      BigInteger bigInteger3 = bigInteger1.subtract(bigInteger2);
      Object object0 = new Object();
      boolean boolean0 = bigInteger1.equals(object0);
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger1);
      int int1 = bigInteger0.bitLength();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1L);
      long long1 = MathUtils.indicator(0L);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2560L), (-9218868437227405313L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-3512299194304650054L), 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,807 + -3,512,299,194,304,650,054
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.indicator((long) 0);
      float float0 = MathUtils.sign((float) 1L);
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.compareTo(0, 0, 1L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 3229.7831, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.sign((long) 0);
      int int1 = MathUtils.indicator(0);
      BigInteger bigInteger0 = null;
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, bigInteger1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 123;
      intArray0[0] = 123;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-5827.52406856);
      doubleArray0[0] = (-5827.52406856);
      int int0 = MathUtils.hash(doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      int int1 = MathUtils.hash((double) (-370299467));
      int int2 = (-1616);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-5827.52406856), (double) (-370299467), (-1616));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.gcd(0, 0);
      long long0 = 2101L;
      int int3 = MathUtils.pow((-325), 2101L);
      byte byte0 = MathUtils.indicator((byte)0);
      int int4 = 1451;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-325), 1451);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -325, k = 1,451
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1083.5121153895077;
      doubleArray0[2] = 15.0;
      doubleArray0[3] = 4969.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator((-357));
      float float0 = MathUtils.round((-1.0F), (-255));
      int int1 = MathUtils.hash((double) (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      int int2 = bigInteger0.intValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.log((-255), 1083.5121153895077);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.round((-3887.7), 0);
      double double1 = MathUtils.factorialLog(0);
      int int0 = 0;
      float float0 = MathUtils.round((float) 0, 0);
      int int1 = 902;
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.7553817452272217E-6, (double) 0, 902);
      int int2 = MathUtils.gcd(12, 902);
      double double2 = MathUtils.log(0.0, 0.0);
      int int3 = 3365;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1664), 3365);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,664, k = 3,365
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 10;
      long long0 = MathUtils.pow((-1797L), 10);
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.pow(10, 10);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 10, 10, 10);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-274), 6);
      double double0 = MathUtils.factorialLog(6);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-268);
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) (-274);
      doubleArray0[3] = (double) (-268);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2686.122532938901);
      doubleArray0[6] = (double) (-274);
      doubleArray0[7] = (double) (-268);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 1595L);
      float float0 = bigInteger4.floatValue();
      short short0 = bigInteger4.shortValueExact();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger4);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger2, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      float float0 = MathUtils.round(1166.0F, 0, 0);
      int int0 = MathUtils.sign(20);
      long long0 = MathUtils.subAndCheck((long) 0, 4499201580859392L);
      short short0 = MathUtils.sign((short)750);
      double double0 = MathUtils.indicator((-153.0));
      int int1 = MathUtils.pow(1, 9193070505571053912L);
      double double1 = MathUtils.sinh(4499201580859392L);
      float float1 = MathUtils.indicator((-120.0F));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1024.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2847.285;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1380.591933073;
      doubleArray0[5] = 0.2;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator(0.0);
      long long0 = (-4399L);
      long long1 = MathUtils.addAndCheck((-4399L), (-4399L));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,024 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 140);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      boolean boolean0 = bigInteger0.equals(bigInteger2);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 125L);
      int int1 = MathUtils.addAndCheck(140, 121);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 121;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(14, 14);
      boolean boolean0 = MathUtils.equals((double) 14, 678.45052224);
      long long0 = 293L;
      long long1 = MathUtils.gcd(293L, (long) 14);
      double double1 = 1866.3040247862;
      double double2 = 3.834E-20;
      boolean boolean1 = MathUtils.equalsIncludingNaN(1866.3040247862, 3.834E-20);
      int int0 = 142;
      int int1 = (-3326);
      double double3 = MathUtils.binomialCoefficientLog(142, (-3326));
      long long2 = (-253L);
      try { 
        MathUtils.pow(14, (-253L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (14^-253)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(166, 0);
      long long0 = MathUtils.subAndCheck(1077L, (long) 166);
      double double0 = MathUtils.scalb(911L, 166);
      long long1 = MathUtils.indicator(6160L);
      int int1 = MathUtils.compareTo(166, 1.4456468917292502E-16, (-3970.177));
      int int2 = MathUtils.lcm(166, 1);
      int[] intArray0 = new int[0];
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(166, 20);
      int int4 = MathUtils.compareTo(0, (-2920.0), 20);
      int int5 = MathUtils.subAndCheck(0, 1);
      short short0 = MathUtils.indicator((short)0);
      int int6 = MathUtils.pow(196, 166);
      int int7 = MathUtils.pow((-2153), 20);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 196, (int) (short)1);
      int int8 = MathUtils.subAndCheck(0, (-874));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-112), (-112));
      byte byte0 = MathUtils.sign((byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (byte) (-1), 3.834E-20, (-3509));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = 5;
      double double0 = MathUtils.round((-802.0250052), 5, 5);
      boolean boolean0 = MathUtils.equals((double) 0.0F, 457.24, 5);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-802.0250052);
      doubleArray0[2] = 457.24;
      doubleArray0[3] = (-802.02501);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 5, (long) 5);
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.gcd(5, (int) (byte)0);
      double double2 = MathUtils.sinh((-1750.9052555));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1030, 8);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-2723.89389401519));
      long long0 = MathUtils.gcd(40320L, 0L);
      byte byte0 = MathUtils.sign((byte)56);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.3333333134651184, (double) (byte)56, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 40320L);
      int int0 = 0;
      int int1 = MathUtils.gcd((-419), 0);
      float float0 = MathUtils.round((float) 0L, (int) (byte)56, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-419);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.round((-0.12502530217170715), 294);
      int int0 = 0;
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      boolean boolean0 = MathUtils.equals((-0.12502530217170715), (double) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1392, 834);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 2029;
      double double0 = MathUtils.round((-1209.759774836148), 2029);
      double double1 = MathUtils.sinh((-1209.759774836148));
      float float0 = MathUtils.indicator((float) 2029);
      byte byte0 = MathUtils.indicator((byte) (-100));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.indicator((-1209.759774836148));
      double double4 = MathUtils.round(424.0955434567, 2029, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2029;
      intArray0[2] = (int) (byte) (-100);
      intArray0[3] = (int) (byte) (-100);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double5 = MathUtils.normalizeAngle(2029, 1.997844754509471E-9);
      boolean boolean0 = MathUtils.equals(0.06666666666666667, (double) (-100));
      boolean boolean1 = MathUtils.equals(0.09090909090909091, (double) 1.0F, 2029);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-100));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 2.0, 0.0);
      double double0 = MathUtils.indicator((-1626.2));
      long long0 = MathUtils.subAndCheck((long) (-1), 0L);
      double double1 = MathUtils.log(0.0, (-2784.257961673));
      double double2 = MathUtils.cosh(0.0);
      short short0 = MathUtils.indicator((short)3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1626.2);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (-1.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign((-1));
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double3 = MathUtils.scalb((-1.0), (-1));
      short short1 = MathUtils.sign((short) (-1254));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 969);
      long long1 = MathUtils.pow(0L, 5049L);
      int int0 = MathUtils.sign(969);
      long long2 = MathUtils.indicator((long) 969);
      boolean boolean0 = MathUtils.equals((double) 0L, 0.0, 107);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      boolean boolean0 = MathUtils.equals(1065.543, (-799.6598396783188), 2805);
      int int1 = MathUtils.pow(0, (long) 2805);
      float float0 = MathUtils.round(0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1574.0), 0.0, 8);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.sign(895);
      boolean boolean0 = MathUtils.equals((double) 1, (-321.0));
      double double0 = MathUtils.binomialCoefficientDouble(895, 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-321.0);
      doubleArray0[3] = (double) 895;
      doubleArray0[4] = (-321.0);
      doubleArray0[5] = 895.0;
      doubleArray0[6] = 895.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-321 < 895)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.scalb(677.509185965, 105);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 11);
      float float0 = MathUtils.sign(0.0F);
      int[] intArray0 = new int[6];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[3] = 11;
      intArray0[4] = 11;
      intArray0[5] = 105;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2, 0);
      float float0 = MathUtils.sign((float) 0);
      double double1 = MathUtils.normalizeAngle((-4.503599627370496E15), 0.0);
      int int0 = MathUtils.addAndCheck(2, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float1 = MathUtils.sign(85.78361F);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1359.02680769623), (-1359.02680769623), 2);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 2);
      int int1 = MathUtils.addAndCheck((-1787), 2);
      double double2 = MathUtils.cosh(2);
      int int2 = MathUtils.gcd((-5106), 4);
      int int3 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = (-4267615245585081135L);
      try { 
        MathUtils.pow(0, (-4267615245585081135L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,267,615,245,585,081,135)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double0 = MathUtils.binomialCoefficientDouble(34, 0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte byte0 = (byte) (-111);
      byte byte1 = MathUtils.sign((byte) (-111));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (byte) (-1), (double) (byte) (-111), (int) (byte) (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(929.9100314, 3302.4804493798483);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1867);
      intArray0[1] = 0;
      intArray0[2] = 179;
      intArray0[3] = 119;
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.sign(0);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      // Undeclared exception!
      try { 
        bigInteger0.add((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.indicator(8L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      float float0 = MathUtils.sign(0.0F);
      float float1 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.binomialCoefficientLog(1, 1);
      byte byte0 = MathUtils.indicator((byte) (-109));
      int int0 = MathUtils.compareTo(1.5, 0.0, 3456.00540673265);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 3163;
      int int1 = MathUtils.lcm(3163, 3163);
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, (long) 3163);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 3163;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 3163;
      doubleArray0[8] = (double) 3163;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-312));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -312
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 115;
      intArray0[1] = (-919);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.round((-603.65199827512), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 3749;
      intArray0[1] = (-1093);
      intArray0[2] = 1024;
      intArray0[3] = (-408);
      intArray0[4] = 0;
      intArray0[5] = 1874;
      intArray0[6] = (-671);
      intArray0[7] = 0;
      intArray0[8] = 223;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.binomialCoefficientLog(4026, (-408));
      int[] intArray1 = new int[6];
      intArray1[0] = (-1093);
      intArray1[1] = 223;
      intArray1[2] = (-1093);
      intArray1[3] = 4026;
      intArray1[4] = (-671);
      intArray1[5] = 0;
      double double1 = MathUtils.distance(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathUtils.sign((-1.0));
      boolean boolean0 = MathUtils.equals(660.0446785592, (-1.0), 2094.990750097598);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 660.0446785592;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 660.0446785592;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (660.045 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equals((double) 1L, (double) 0, 10.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2029;
      intArray0[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.log(2.85040095144011776E17, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 10.0;
      doubleArray1[2] = (-3018.2);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.19999999999923582;
      doubleArray1[5] = (-763.0);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger1);
      boolean boolean0 = bigInteger3.isProbablePrime(598);
      BigInteger bigInteger4 = bigInteger0.and(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3004));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,004
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight(2640);
      byteArray0[0] = (byte)57;
      BigInteger bigInteger4 = new BigInteger(byteArray0);
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger4);
      try { 
        MathUtils.pow(bigInteger0, (-1781L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,781)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.pow((-4267615245585081135L), 0);
      long long1 = MathUtils.sign((long) 0);
      long long2 = MathUtils.addAndCheck((-4267615245585081135L), 0L);
      float float0 = MathUtils.round((-1.0F), 1884, 0);
      int int0 = MathUtils.lcm(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.lcm((-788L), (-788L));
      double double0 = MathUtils.normalizeAngle((-788L), 788L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-788L);
      doubleArray0[1] = (double) (-788L);
      doubleArray0[2] = 789.0795121020763;
      doubleArray0[3] = 557.7323169171771;
      doubleArray0[4] = (double) 788L;
      doubleArray0[5] = 789.0795121020763;
      doubleArray0[6] = 2567.3045066120053;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(0.0, 788.0, 789.0795121020763);
      long long1 = MathUtils.gcd(0L, (long) 0);
      long long2 = MathUtils.indicator((-237L));
      int int1 = 1025;
      // Undeclared exception!
      try { 
        MathUtils.round(788.0, 0, 1025);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 73;
      double double0 = MathUtils.binomialCoefficientLog(73, 73);
      int int1 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3956.18293044);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-3,956.183 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = 3;
      float float0 = MathUtils.round(0.0F, 3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-869.3120549);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0.0F;
      double double1 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3344.2438921061, (-1542.9138549), 0.0);
      double double2 = MathUtils.binomialCoefficientLog(3, 0);
      int int1 = (-3972);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3972));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,972
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = MathUtils.round(1525.0F, 21);
      double double0 = MathUtils.binomialCoefficientLog(21, 0);
      float float1 = MathUtils.indicator(1525.0F);
      double double1 = MathUtils.cosh(1.0F);
      long long0 = MathUtils.indicator(18L);
      boolean boolean0 = MathUtils.equals(0.0, (double) 1525.0F);
      long long1 = MathUtils.sign(120L);
      long long2 = MathUtils.sign((long) 21);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-492.3806531781);
      doubleArray0[2] = 1.375;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-2699.149);
      doubleArray0[5] = (-2886.72);
      doubleArray0[6] = 10.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(391.1268, 391.1268, 391.1268);
      double double0 = MathUtils.factorialLog(0);
      int int0 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.factorial(0);
      float float0 = MathUtils.sign((float) 0);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean1 = MathUtils.equals((double) 0, 391.1268);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 0;
      intArray0[5] = (int) (byte)0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      float float1 = MathUtils.sign(454.7061F);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.subtract((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.sign((-530));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-530);
      doubleArray0[2] = (double) (-530);
      doubleArray0[3] = (double) (-530);
      doubleArray0[4] = (double) (-530);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-530);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -530)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1007.142), (-1007.142));
      int int0 = MathUtils.compareTo((-1007.142), 1807.1070066645675, 1807.1070066645675);
      int int1 = 10;
      double double0 = MathUtils.binomialCoefficientDouble(10, (-1));
      boolean boolean1 = MathUtils.equals((-1007.142), 1.073741824E9);
      float float0 = MathUtils.sign(1719.5F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1738;
      intArray0[2] = 0;
      intArray0[3] = 15;
      intArray0[4] = 115;
      intArray0[5] = (-1347);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (double) (-1347), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1280.7352;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck((-3766), 0);
      short short0 = MathUtils.sign((short)2840);
      int int2 = MathUtils.pow(4, 14);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2003));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,003
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.lcm((-2554L), 0L);
      boolean boolean0 = MathUtils.equals((double) 0L, 2135.456984010037);
      double double0 = MathUtils.sinh((-2554L));
      float float0 = MathUtils.round(0.0F, 6230);
      int int0 = MathUtils.lcm(6230, 0);
      int int1 = MathUtils.subAndCheck(0, 0);
      long long1 = MathUtils.pow((long) 0, 0);
      long long2 = MathUtils.binomialCoefficient(6230, 6230);
      long long3 = MathUtils.sign(6402373705728000L);
      long long4 = MathUtils.subAndCheck(1L, 0L);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2554L));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-6.663542893624021E-14);
      double double1 = MathUtils.normalizeAngle((-6.663542893624021E-14), (-6.663542893624021E-14));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-6.663542893624021E-14);
      doubleArray0[1] = (-6.663542893624021E-14);
      doubleArray0[2] = (-6.663542893624021E-14);
      doubleArray0[3] = (-6.663542893624021E-14);
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-829834495));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -829,834,495
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.scalb((-4994.0), (-3013));
      int int1 = MathUtils.gcd((-3013), (-3013));
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3013;
      doubleArray0[1] = (-4994.0);
      doubleArray0[2] = (double) 3013;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (-3075.270446235);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-1864.3076971244095);
      double double1 = 0.0;
      double double2 = MathUtils.log((-1864.3076971244095), 0.0);
      int int0 = 97;
      int int1 = 16;
      int int2 = MathUtils.gcd(97, 16);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 38;
      int int1 = (-1467);
      try { 
        MathUtils.pow(38, (-1467));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (38^-1,467)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.log(1442.892312, 1442.892312);
      int int0 = MathUtils.hash((-3416.41856947));
      int int1 = MathUtils.indicator((-1911135916));
      float float0 = MathUtils.indicator((float) (-1911135916));
      int int2 = MathUtils.gcd((-1), 67);
      int int3 = MathUtils.lcm(1, (-1911135916));
      // Undeclared exception!
      try { 
        MathUtils.round(939.68237805, 1824, 1911135916);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3467.26046206);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (-3.940510424527919E-20);
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = (byte)17;
      byte byte1 = MathUtils.sign((byte)17);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.bitCount();
      // Undeclared exception!
      try { 
        bigInteger0.intValueExact();
      } catch(ArithmeticException e) {
         //
         // BigInteger out of int range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-438.878702111), (-5139.07882624587), 5);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equals((-438.878702111), (-2041.742830488977), (-5139.07882624587));
      int int0 = MathUtils.compareTo((-5139.07882624587), 0.0, 0.0);
      boolean boolean2 = MathUtils.equals((-5139.07882624587), (-5139.07882624587));
      double double0 = MathUtils.round(2927.9816082047014, 5);
      boolean boolean3 = MathUtils.equals((-2041.742830488977), (double) 5);
      double[] doubleArray0 = null;
      int int1 = MathUtils.hash((double[]) null);
      byte byte0 = (byte)82;
      byte byte1 = MathUtils.sign((byte)82);
      boolean boolean4 = MathUtils.equalsIncludingNaN((-2041.742830488977), (-2653.3702), (double) 5);
      double double1 = MathUtils.round(1227.046381, (-2294), (int) (byte)1);
      double double2 = MathUtils.round(0.0, (int) (byte)82);
      long long0 = MathUtils.sign((-993L));
      try { 
        MathUtils.pow((int) (byte)1, (-2294));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,294)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.gcd(2213L, 121645100408832000L);
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1054.2671146362648);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3087, 3087);
      boolean boolean0 = MathUtils.equals((-1402.123), (-1.0));
      float float0 = MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)8);
      int int0 = MathUtils.compareTo((byte)1, (byte)1, (-1491.0));
      int int1 = MathUtils.sign((int) (byte)8);
      int int2 = MathUtils.hash((double) (byte)1);
      long long0 = MathUtils.pow((-1032L), 1072693248);
      long long1 = MathUtils.indicator((-2964L));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 509.788397;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2702.4061534943444;
      doubleArray0[4] = 10.0;
      doubleArray0[5] = 1331.657257685906;
      doubleArray0[6] = 199.3048677;
      doubleArray0[7] = 2.4384203044354907E-8;
      doubleArray0[8] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 384;
      // Undeclared exception!
      try { 
        MathUtils.round(910.75988, 384, 384);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.25), (-0.25), (-0.25));
      int int0 = MathUtils.compareTo((-1322.814021), (-367.3222297), (-1322.814021));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-367.3222297);
      doubleArray0[2] = (double) (-1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -367.322)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1784;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1784);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-429.2764), (-429.2764), (-429.2764));
      int int0 = 1948;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1948);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(208);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 208;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.pow((long) 208, 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)106);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (-2416.277255737);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.gcd(514, 6);
      long long0 = MathUtils.gcd((long) 2, (long) (byte)106);
      float float0 = MathUtils.round((float) (byte)106, (-4040));
      byte byte1 = MathUtils.sign((byte)106);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.gcd(2759L, (-5034868814120038111L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.633123935319537E16;
      doubleArray0[1] = (double) 2759L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-5034868814120038111L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.round((-402.844), 0, 0);
      double double1 = MathUtils.sinh(1783.7096649000582);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1610, (-710));
      double double0 = MathUtils.log(1.9868161777724352E-8, 1.9868161777724352E-8);
      int[] intArray0 = new int[4];
      intArray0[0] = 1610;
      intArray0[1] = (-710);
      intArray0[2] = 900;
      intArray0[3] = 1610;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(211, 157);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      int int1 = MathUtils.pow(1, 1);
      float float0 = MathUtils.round((-1281.0228F), 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 185;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.sign(3.141592653589793);
      long long0 = MathUtils.pow(0L, 0L);
      double double1 = MathUtils.scalb(3.141592653589793, 6);
      long long1 = MathUtils.pow((-1L), 0);
      short short0 = MathUtils.sign((short)46);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)46;
      intArray0[1] = 190;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (-576);
      intArray0[7] = (int) (short)46;
      intArray0[8] = 218;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4503599627370496L, (-561L));
      float float0 = MathUtils.round((float) (-561L), 4194304);
      short short0 = MathUtils.indicator((short)0);
      byte byte0 = (byte)20;
      byte byte1 = MathUtils.indicator((byte)20);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-561L), (-2712.4714956146286), (int) (short)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-1769.4581070618);
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= -1,769.458)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 637;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 637, 637);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 637, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = 226;
      intArray0[3] = 1228;
      intArray0[4] = 1408;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign(4208363204685324176L);
      double double2 = MathUtils.normalizeAngle(1228, 0);
      try { 
        MathUtils.pow((long) 226, (-9218868437227405313L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (226^-9,218,868,437,227,405,313)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 249;
      int int1 = 2202;
      int int2 = MathUtils.gcd(249, 2202);
      long long0 = MathUtils.lcm((-7278142539171889152L), 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2202;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-7278142539171889152L);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 249;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = (short)130;
      short short1 = MathUtils.sign((short)130);
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, (int) (short)1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 40.7535564);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = (-782L);
      int int0 = (-5300);
      try { 
        MathUtils.pow((-782L), (-5300));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-782^-5,300)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.sign(60.169071);
      double double1 = 1.1102230246251565E-16;
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 1.0, 70);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = 60.169071;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(70, 70);
      int int0 = 12;
      // Undeclared exception!
      try { 
        MathUtils.round(1.4456468917292502E-16, 70, 12);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2061.873430426499);
      doubleArray0[3] = 4537.55352;
      doubleArray0[4] = 0.25;
      doubleArray0[5] = 1170.69218;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((-431L), (-431L));
      long long1 = MathUtils.gcd((-892L), 185761L);
      long long2 = MathUtils.lcm(2314L, 1L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.sign((-1367L));
      int int0 = MathUtils.compareTo(Double.NaN, Double.NaN, 0.125);
      double double0 = MathUtils.cosh((-1367L));
      long long1 = MathUtils.gcd((-1L), 1298L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = MathUtils.sign(3031.6414F);
      double double0 = MathUtils.scalb(0.0, 1);
      int int0 = MathUtils.gcd((-1591), 1);
      double double1 = MathUtils.round((double) 1.0F, 2410);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 3626.99, 8);
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.lcm((long) 8, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3626.99;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1986.6039501882756;
      doubleArray0[4] = 3626.99;
      doubleArray0[5] = 3626.99;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 8;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.binomialCoefficientLog(8, (-1875727233));
      double double2 = MathUtils.round(0.0, (int) (short)0);
      double double3 = MathUtils.scalb(4.455505956692757, 17);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-72), (-72));
      int int1 = MathUtils.subAndCheck((-72), (-72));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-72);
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator((float) 0);
      long long0 = MathUtils.gcd((long) (-72), (long) 0);
      short short0 = MathUtils.sign((short)211);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-72));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -72
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.3333333333333333, 0.0, 966);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.indicator((short) (-3903));
      byte byte0 = MathUtils.sign((byte) (-61));
      double double0 = MathUtils.round((double) 0, (-1052));
      byte byte1 = MathUtils.sign((byte) (-123));
      float float0 = MathUtils.indicator((-3215.8218F));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 1345;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 1345, 1345);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,345, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.pow(1003, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1003, (double) 1003);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 565.08244354282;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) 1003;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1438.1885;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      double double0 = MathUtils.sign((-2140.4196));
      int int0 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.addAndCheck(537L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(138, 3437);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 138, k = 3,437
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1915.4;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-725.709475633559);
      doubleArray0[4] = (-2644.599);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-0.09088450866185192);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-1620L), (-1620L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,620^-1,620)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 1493.224606670243, 90);
      double double0 = MathUtils.log(902.1076998448, 373.36685586911);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.lcm(2797L, (-488L));
      boolean boolean0 = MathUtils.equals(0.0, (double) (-488L), 0.0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.pow(15, 228);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2397.32048);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.round((double) 0L, 207);
      long long1 = MathUtils.lcm(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, 0.0);
      double double1 = MathUtils.normalizeAngle(0L, 0.0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-345.6660694431414), (-345.6660694431414), 0.058823529411764705);
      short short0 = MathUtils.indicator((short)9);
      int int0 = MathUtils.subAndCheck((int) (short)1, (-1560));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.round(1255.3174679822, (-6));
      short short0 = MathUtils.sign((short) (-1518));
      long long0 = MathUtils.indicator((long) (-6));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 14;
      float float0 = MathUtils.round((-76.88F), 14);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign((long) 14);
      double double1 = MathUtils.sign((double) (-76.88F));
      try { 
        MathUtils.normalizeArray(doubleArray0, 1L);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1954.96241571289);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1954.96241571289));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.lcm(414L, 414L);
      boolean boolean0 = MathUtils.equals((double) 414L, (double) 414L);
      int int0 = MathUtils.indicator((-1012));
      try { 
        MathUtils.pow(414L, (-1012));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (414^-1,012)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(953.0, (-647.776497461253));
      double double0 = MathUtils.round((-647.776497461253), (-523));
      long long0 = MathUtils.gcd(0L, (-2093L));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.indicator((-0.5));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-0.5);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash((-1.0));
      long long0 = MathUtils.pow(0L, 9223372036854775807L);
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.addAndCheck(0, 598);
      float float0 = MathUtils.round((-2687.6816F), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      float float1 = bigInteger0.floatValue();
      byte byte0 = bigInteger0.byteValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-1074790400));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,074,790,400)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 196);
      int int0 = MathUtils.lcm(2221, 196);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2221, Double.POSITIVE_INFINITY, (-587.6085794));
      double double1 = MathUtils.cosh((-1.7168146928204135));
      long long0 = MathUtils.binomialCoefficient(2221, 0);
      int int1 = MathUtils.gcd(0, (-178));
      boolean boolean1 = MathUtils.equals((-133.624225552373), (-1.0));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 435316;
      doubleArray0[1] = (double) 2221;
      doubleArray0[2] = (-587.6085794);
      doubleArray0[3] = 0.10526403784751892;
      doubleArray0[4] = (double) 178;
      doubleArray0[5] = (-231.6445809656647);
      doubleArray0[6] = (double) (-178);
      doubleArray0[7] = (double) 435316;
      doubleArray0[8] = (-587.6085794);
      double double2 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-587.609 < 0.105)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.flipBit(0);
      BigInteger bigInteger3 = bigInteger1.and(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.divide(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.pow((-9218868437227405313L), 0);
      short short0 = MathUtils.indicator((short)1024);
      long long1 = MathUtils.pow(0L, 1981);
      float float0 = MathUtils.indicator((float) (short)1024);
      long long2 = MathUtils.mulAndCheck((long) (short)1, (long) (short)1024);
      byte byte0 = MathUtils.sign((byte)0);
      float float1 = MathUtils.sign((float) 0L);
      long long3 = MathUtils.sign(1543L);
      int[] intArray0 = new int[4];
      intArray0[0] = 432;
      intArray0[1] = (int) (short)1024;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 1981;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long4 = MathUtils.gcd((-507L), (long) 0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble((short)1024);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 432, (double) (byte)0, (-1878.65721412659));
      long long5 = MathUtils.addAndCheck((-9218868437227405313L), 0L);
      int int2 = MathUtils.lcm((int) (short)1, 0);
      byte byte1 = MathUtils.sign((byte) (-74));
      short short1 = MathUtils.indicator((short)3182);
      long long6 = MathUtils.pow((long) (byte)0, (int) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 735);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 735
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 72.0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (-1793.7813404489);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.sinh(600.24453223931);
      int int0 = 0;
      double double1 = MathUtils.factorialLog(0);
      long long0 = MathUtils.sign((long) 0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1018.8499), 3218.49947, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1766, 1766);
      double double1 = MathUtils.sinh(0.0);
      double double2 = MathUtils.indicator(0.0);
      long long0 = MathUtils.subAndCheck((long) 1766, (long) 1766);
      int int0 = MathUtils.indicator(1766);
      byte byte0 = MathUtils.sign((byte)79);
      float float0 = MathUtils.round((float) 1, 1766);
      try { 
        MathUtils.pow((BigInteger) null, (-986));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-986)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.570796251296997;
      doubleArray0[1] = (-62.0163364652018);
      doubleArray0[2] = (-623.528);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-52);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1418));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (851,758,363,153,364,940^-1,418)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
