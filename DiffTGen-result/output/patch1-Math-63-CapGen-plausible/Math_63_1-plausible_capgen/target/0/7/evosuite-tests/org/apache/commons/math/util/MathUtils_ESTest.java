/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:15:26 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 291.67141633;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 291.671)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (short)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1060;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)1277;
      double[] doubleArray1 = new double[6];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 39916800L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 70;
      int[] intArray1 = new int[2];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1883);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.sinh(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-3329.97);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-37.49843832));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.scalb((-68.0), (-1143));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.lcm((-1060), (-1060));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.indicator(147);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)40);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 21);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(61);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 1235, (long) 214432819);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-747), (-747));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (byte)0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 78, 0L);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1, (-49));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 15);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.sinh(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.sinh((-839.552546));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.scalb(1.304E19, (-1060));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 2419, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = MathUtils.round((float) (byte)1, (int) (byte)1, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = MathUtils.round((float) (short)0, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = MathUtils.round(3774.4204F, 8);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-3529), 4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.round(1.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.round((-8.0E298), 0, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.round(4558.26473478, 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 66);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 393);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.pow(546L, (long) 19);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.pow((-2463L), 1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.pow(78, (long) 78);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.pow(0, 1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0, 0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3497.126, (-3497.126));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, (-1442));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((int) (short) (-1), (int) (byte)91);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.log(15.0, 15.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.hash(1.304E19);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.hash(292.2868372552);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-193L);
      double[] doubleArray1 = new double[2];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3036.2;
      double[] doubleArray1 = new double[1];
      double double0 = MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1060;
      int[] intArray1 = new int[7];
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1L, (long) (-1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1, 0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0, (-92), (-92));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-747));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (byte)1, (double) 1.1F, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[3];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-119), (-119));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -119
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3389, 925);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(78L, 4901L);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 64);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-949L), 2147483647L);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1183L), (-10L));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553359L, 4577762542105553359L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1415, 1415);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.gcd(479001600L, 1033L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.gcd(1321, 1321);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.factorialLog(218);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.factorial(8);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1.0), (-173.099), 157);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 347);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.49999999999999994, 0.0, 5078.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 8.251545029714408E-9, (-1280.0393818));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1.0F, (double) 1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1823, 588);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = Double.NaN;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-193L);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 662.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 662)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.677156716669423E43;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (byte)70;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (70 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-116^-116)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-906L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-906)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-1501149727));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,501,149,727)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 39916800L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        MathUtils.pow((long) (-1411), (long) (-320));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,411^-320)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.pow((-325L), 0L);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        MathUtils.pow(2389L, (int) (short) (-3209));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,389^-3,209)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 64);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.pow(4257, (long) 4257);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        MathUtils.pow((-517), (long) (-517));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-517^-517)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.pow((-2717), 664);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        MathUtils.pow(0, (-565));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-565)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-536));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short short0 = MathUtils.sign((short)6);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.sign(677L);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.sign((-558L));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.sign(574);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.sign((-3122));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float float0 = MathUtils.sign(2584.736F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.sign((-3344.54596137));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.sign(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathUtils.sign(3146.0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)58);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-69));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-859.2512F), 2296, 2296);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,296, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float float0 = MathUtils.round((float) (-1846), 2230, 2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-84), (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2584.736F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.NaN, 708);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-911859793));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(3952090531849364496L, (long) 147);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(9218868437227405312L, 0L);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2795L), 0L);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = MathUtils.lcm((-465L), (-465L));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = MathUtils.lcm(677L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 1716L);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = MathUtils.lcm((-897), 0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = MathUtils.lcm(160, 63);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      short short0 = MathUtils.indicator((short)727);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-584));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long long0 = MathUtils.indicator((long) 2230);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long long0 = MathUtils.indicator((-193L));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = MathUtils.indicator((-1060));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float float0 = MathUtils.indicator((-836.1343F));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 1, 0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathUtils.indicator((-173.099));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = MathUtils.indicator(1.625);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-5));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long long0 = MathUtils.gcd((-1644L), (-1644L));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long long0 = MathUtils.gcd((-4717L), 0L);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = MathUtils.gcd(912, (-104));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = MathUtils.gcd((-1501149727), (-2717));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = MathUtils.gcd((-2911), 0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-943));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -943
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3447));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,447
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(245);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[1];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (double) 160, 456);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 242);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 4257, (double) 0, (-37505887));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2203.2286852547395, (double) 0L, (double) 9218868437227404788L);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2293.007503631084), (-2293.007503631084), (-2293.007503631084));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 664.0, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1884.1298574, (double) 0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-0.2499999997677497), (-4768.525398415462));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2037961981003L), (byte)1, 1157.0F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = MathUtils.compareTo(1925.626835028255, 2788.841639195469, 1925.626835028255);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = MathUtils.compareTo(2.85040095144011776E17, 0.0, (-623.736967145842));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-990), (-990));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -990
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 227);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 227
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3583, (-2624));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-21));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(255, 9);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(20, (-1579));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1436, 1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(13, 0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(672, (-87));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(67, 67);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4347, 3);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1, 0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-556));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1, 1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, (long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = MathUtils.log(938.0452574072, 0.0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-1883));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = MathUtils.cosh(0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(88.9583794157, 88.9583794157);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = MathUtils.sinh(912);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) (-3122), (long) (-3122));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
  }
}
