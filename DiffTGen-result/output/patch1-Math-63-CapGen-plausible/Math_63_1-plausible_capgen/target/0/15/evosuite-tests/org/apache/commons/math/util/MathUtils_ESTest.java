/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:19:26 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Random.setNextRandom(4039);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4039;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.factorialLog(2290);
      long long0 = MathUtils.subAndCheck(116L, (long) 4039);
      float float0 = MathUtils.indicator((-1382.966F));
      int int0 = 21;
      int int1 = MathUtils.lcm(2290, 21);
      double double1 = MathUtils.binomialCoefficientDouble(48090, 2290);
      BigInteger bigInteger0 = BigInteger.ZERO;
      float float1 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 66L);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger2 = bigInteger0.not();
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 669.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 2141832375;
      intArray0[2] = 2141832375;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.compareTo(2141832375, 3734.592938216732, 669.0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3653.368997534898, 3653.368997534898);
      int int0 = (-2981);
      int int1 = MathUtils.subAndCheck((-2981), (-2981));
      long long0 = MathUtils.indicator(120L);
      double double0 = MathUtils.round((double) 1L, (-2981));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2981);
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = 3653.368997534898;
      doubleArray0[6] = (double) 120L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (-1.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.2250738585072014E-308;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.pow(1, 877L);
      long long0 = MathUtils.factorial(1);
      float float0 = MathUtils.sign(648.0F);
      int int1 = MathUtils.pow(1, 166L);
      int int2 = MathUtils.pow(1, 1);
      long long1 = MathUtils.addAndCheck(1L, 4890904797277847552L);
      double double0 = MathUtils.factorialDouble(1);
      double double1 = MathUtils.binomialCoefficientDouble(1, (-1709));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-93);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1259L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (32,493,914,436,597,667^-1,259)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 3084;
      int int1 = (-968);
      int int2 = MathUtils.mulAndCheck(3084, (-968));
      try { 
        MathUtils.pow((-968), (-968));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-968^-968)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-5655.554691242), (-3735.263093201417));
      double[] doubleArray0 = new double[1];
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(2958, 2958);
      int int1 = MathUtils.pow(601, (long) 2958);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.375;
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.cosh((-2272.755476));
      int int1 = 0;
      int int2 = MathUtils.gcd(0, 234);
      short short0 = MathUtils.sign((short)5181);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.375, (double) (short)5181, 2.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = MathUtils.distance(doubleArray1, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-564));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-564)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int1 = MathUtils.compareTo((-3416.456294087), 0, (-1.0));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3416.456294087);
      doubleArray0[1] = (-3416.456294087);
      doubleArray0[2] = (-3416.456294087);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3416.456294087);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)82;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)1);
      short short0 = MathUtils.sign((short) (byte)1);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (byte)10;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.sinh(2436.40394496471);
      byte byte0 = (byte)6;
      byte byte1 = MathUtils.sign((byte)6);
      double double1 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2436.40394496471;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (1 < 2,436.404)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = (byte) (-106);
      byte byte1 = MathUtils.sign((byte) (-106));
      int int0 = MathUtils.subAndCheck((int) (byte) (-106), 0);
      long long0 = (-5721L);
      try { 
        MathUtils.pow((-5721L), (long) (byte) (-106));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-5,721^-106)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = (byte)65;
      byte byte1 = MathUtils.sign((byte)65);
      double double0 = MathUtils.scalb((byte)65, (byte)1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 130.0;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = 0.875;
      doubleArray0[4] = (double) (byte)1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2.2250738585072014E-308);
      int int0 = (-1372);
      long long0 = MathUtils.binomialCoefficient((byte)65, (-1372));
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1372);
      doubleArray2[1] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray2, mathUtils_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.lcm(671L, 0L);
      double double0 = MathUtils.round((-715.5531103236), 128);
      float float0 = MathUtils.round((-1804.175F), 0);
      int int0 = MathUtils.subAndCheck((-335), 2457);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1804.175F);
      doubleArray0[1] = (double) (-1804.0F);
      doubleArray0[2] = (double) (-2792);
      doubleArray0[3] = (double) 2457;
      doubleArray0[4] = (double) 2457;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-4768.0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-253.56193444497);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      byte byte0 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
      float float0 = MathUtils.indicator((float) 0);
      double double3 = MathUtils.round(327.6469, 2328, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.log((-0.25), 3.834E-20);
      long long0 = 20922789888000L;
      long long1 = MathUtils.lcm(20922789888000L, 0L);
      int int0 = 76;
      int int1 = MathUtils.pow(76, 20922789888000L);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 1752;
      intArray0[2] = (-2986);
      intArray0[3] = (-3121);
      int[] intArray1 = new int[1];
      intArray1[0] = (-3121);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      int int0 = (-2504);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-2504), 1168);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,168, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      int int0 = bigInteger0.bitLength();
      int int1 = bigInteger0.signum();
      long long0 = 2147483647L;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 2147483647L);
      long long1 = (-865L);
      long long2 = MathUtils.mulAndCheck((long) 0, (-865L));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0, 614, 9);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 64;
      intArray0[3] = 0;
      intArray0[4] = 2967;
      intArray0[5] = 959;
      intArray0[6] = 0;
      intArray0[7] = (-2342);
      intArray0[8] = 0;
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 2967;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 959;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.pow(1118, 1118);
      long long0 = MathUtils.pow((long) 0, 53);
      int int1 = (-128);
      int int2 = 955;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-128), 955);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -128, k = 955
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.pow(1099, 2487L);
      double double0 = MathUtils.cosh((-338.633284));
      long long0 = MathUtils.addAndCheck(0L, (-1678L));
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigInteger0.equals((Object) null);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1011900483);
      double double1 = MathUtils.sinh(909.1400361755365);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 735.91164117;
      doubleArray0[1] = (-1490.10855);
      doubleArray0[2] = (-68.7405921867372);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign((-68.7405921867372));
      float float0 = MathUtils.indicator((-498.0F));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.sinh(302.23375599501924);
      long long0 = MathUtils.subAndCheck((-1488L), (-1488L));
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3187.07965, 3884.33083694177, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-968.4415499525539);
      doubleArray0[1] = (-556.0);
      doubleArray0[2] = (-848.65671);
      doubleArray0[3] = 834.8765822279;
      doubleArray0[4] = (-1943.45535);
      doubleArray0[5] = (-2168.037296);
      doubleArray0[6] = 1538.46469;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1538.46469;
      doubleArray1[1] = (-556.0);
      doubleArray1[2] = 834.8765822279;
      doubleArray1[3] = 774.058;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.gcd((-339), (-339));
      int int1 = 0;
      int int2 = MathUtils.addAndCheck(0, (-3541));
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 339;
      doubleArray0[3] = (double) (short)0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (339 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 1.9868161777724352E-8);
      double double1 = MathUtils.indicator(1166.68869988872);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double2 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 12);
      int int0 = MathUtils.compareTo(12, 12, Double.NaN);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = MathUtils.pow(bigInteger2, bigInteger2);
      short short0 = MathUtils.sign((short) (-3924));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-3924);
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 122.933224);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      long long0 = MathUtils.mulAndCheck(1L, (long) 1);
      float float0 = MathUtils.round((float) 1L, 1);
      float float1 = MathUtils.round((float) 1L, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1.0F;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.lcm((int) (byte)0, 1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(3085, 3085);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3085;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1631.3902308897643);
      doubleArray0[3] = (-8.0E298);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = 1537.756;
      double double1 = MathUtils.log(0.087, 1537.756);
      double double2 = 0.0;
      double double3 = MathUtils.cosh(0.0);
      long long0 = 9223372036854775807L;
      long long1 = (-3059L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(9223372036854775807L, (-3059L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3137, 21);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 21, (-1147.1144351));
      double double0 = MathUtils.round((double) 3158, (-2888));
      double double1 = MathUtils.cosh(21);
      double double2 = MathUtils.round(0.0, (-1314));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3653.368997534898, 3653.368997534898);
      int int0 = MathUtils.subAndCheck((-2981), (-2981));
      long long0 = MathUtils.indicator(120L);
      double double0 = MathUtils.round((double) 1L, (-2981));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2981);
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = 3653.368997534898;
      doubleArray0[6] = (double) 120L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (-1.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.lcm(39916800L, 39916800L);
      long long1 = MathUtils.subAndCheck(307L, 39916800L);
      byte byte0 = MathUtils.sign((byte)112);
      int int0 = MathUtils.mulAndCheck((int) (byte)112, (int) (byte)1);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign(0);
      short short0 = MathUtils.indicator((short)0);
      long long2 = MathUtils.pow((long) (byte)1, 61);
      long long3 = MathUtils.pow((-1597L), 0);
      boolean boolean0 = MathUtils.equals(0.0, 4.0);
      int int2 = MathUtils.addAndCheck((-2344), 0);
      int int3 = MathUtils.pow((int) (short)1, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-739), 5217);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -739, k = 5,217
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-1512));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,512)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.lcm(2343L, 0L);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, (-174.8096536640147));
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.pow((long) 0, 0);
      double double1 = MathUtils.sinh(0.0);
      int int1 = 477;
      int int2 = MathUtils.indicator(477);
      double double2 = MathUtils.indicator(0.0);
      int int3 = MathUtils.mulAndCheck(1, 1705);
      double[] doubleArray0 = new double[0];
      int int4 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign((float) 477);
      int int5 = MathUtils.compareTo(1.0F, 1, 0.0);
      int int6 = (-3808);
      try { 
        MathUtils.pow(1, (-3808));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-3,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.log(915.49852, 915.49852);
      int int0 = MathUtils.pow(117, (long) 117);
      int int1 = 0;
      int int2 = 67;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 67);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 67
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.round((-39.39391911), 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-118);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2499L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,326,220,043,559,624,835,210^-2,499)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.indicator((-2571L));
      double double0 = MathUtils.binomialCoefficientLog(1064, 1064);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1816.8792772072838;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 564323895, 1816.8792772072838, (double) 564323895);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = 4095L;
      long long1 = MathUtils.pow(0L, 4095L);
      long long2 = (-5068L);
      long long3 = MathUtils.sign((-5068L));
      int int1 = (-22);
      int int2 = MathUtils.subAndCheck((-22), 564323895);
      float float0 = MathUtils.indicator((float) (-22));
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(0.0, (-526.02), 0.0);
      try { 
        MathUtils.pow(564323895, (long) (-564323917));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (564,323,895^-564,323,917)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.gcd((-2046), (-2046));
      double double0 = MathUtils.factorialLog(813);
      long long0 = MathUtils.mulAndCheck((long) (-2046), (long) 813);
      boolean boolean0 = MathUtils.equals((double) (-2046), (-2613.784374752164), 392);
      float float0 = MathUtils.indicator(369.0997F);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 813);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 194;
      double double0 = MathUtils.factorialLog(194);
      int int1 = MathUtils.indicator(194);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 831.5177800239061;
      doubleArray0[1] = (double) 194;
      doubleArray0[2] = 831.5177800239061;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 194;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (194 <= 831.518)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 827.242185685;
      doubleArray0[1] = (-889.38628);
      doubleArray0[2] = 3307.468836106251;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = 67;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round((float) (-1762257953), 14);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 14;
      doubleArray1[1] = (double) 67;
      doubleArray1[2] = (double) 67;
      doubleArray1[3] = (double) Integer.MIN_VALUE;
      doubleArray1[4] = 827.242185685;
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray1);
      short short0 = MathUtils.sign((short) (-2189));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.sinh(14);
      long long0 = MathUtils.gcd((-9223372036854775808L), (long) (short) (-1));
      boolean boolean2 = MathUtils.equalsIncludingNaN(1.0, (-732.8434350966711), 10);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(9218868437227405312L, 908L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5434.37084531014;
      doubleArray0[1] = (double) 908L;
      doubleArray0[2] = (double) 908L;
      doubleArray0[3] = (double) 9218868437227406220L;
      doubleArray0[4] = (double) 9218868437227405312L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(Float.NaN, 183);
      byte byte0 = MathUtils.indicator((byte)0);
      float float1 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.scalb(1.0F, 778);
      short short0 = MathUtils.sign((short) (-101));
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.log(908.0, 778);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 9218868437227406220L, (double) Float.NaN);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3.834E-20, 0.11113807559013367, 1359719409);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.binomialCoefficient(9, (-3515));
      int int0 = MathUtils.subAndCheck(2188, (int) (byte)1);
      long long1 = MathUtils.pow(4499201580859392L, 379);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.log(2.2250738585072014E-308, 2.2250738585072014E-308);
      double double1 = MathUtils.scalb(1.0, 3175);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.negate();
      BigInteger bigInteger4 = bigInteger2.multiply(bigInteger0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger2);
      double double2 = MathUtils.scalb((byte) (-68), 3175);
      int int0 = MathUtils.hash(1983.78688566716);
      int int1 = MathUtils.subAndCheck(3175, (-511));
      short short0 = MathUtils.indicator((short) (byte) (-68));
      try { 
        MathUtils.pow(bigInteger3, bigInteger5);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (17,256^-17,256)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-2493), (-2493));
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1637;
      double double0 = MathUtils.factorialDouble(1637);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 1637, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 149.7114575806;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      short short0 = MathUtils.sign((short)2723);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.indicator((float) (short)2723);
      MathUtils.checkOrder(doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.sign((double) 1.0F);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.indicator((-1949.7767056));
      int int2 = MathUtils.subAndCheck(215, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.19999998807907104, 149.7114575806, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2200.04), (-2200.04), 705);
      double double0 = MathUtils.normalizeAngle(2707.26413, (-2200.04));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.pow((-9223372036854775808L), 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 1534;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = MathUtils.lcm(2L, 2L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = (-936L);
      long long1 = MathUtils.lcm((-936L), (-936L));
      int int0 = 2125;
      boolean boolean1 = MathUtils.equals((double) (-936L), 0.0, 2125);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2125);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-550.64109183);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 1.9868161777724352E-8;
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.gcd((-875L), (-719L));
      int int0 = 243;
      boolean boolean0 = MathUtils.equals((double) (-719L), (-2055.0), 243);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-2055.0);
      doubleArray0[2] = 2859.0;
      doubleArray0[3] = (double) (-719L);
      doubleArray0[4] = (double) 243;
      doubleArray0[5] = (double) 243;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = 17.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck(1L, (-719L));
      int int1 = MathUtils.subAndCheck(0, 0);
      float float0 = MathUtils.indicator((float) 243);
      int int2 = MathUtils.hash(243.0);
      float float1 = MathUtils.indicator((float) 1080975360);
      short short0 = MathUtils.sign((short)1758);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 243, (double) (-875L), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1669, 1669);
      double double0 = MathUtils.log(2785561, 1669);
      double double1 = MathUtils.binomialCoefficientDouble(2785561, 2785561);
      int int1 = MathUtils.mulAndCheck(1669, 9);
      int int2 = MathUtils.compareTo(0.0, 1.0, 0.008333333333329196);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.sinh(0.0F);
      long long0 = 1196L;
      long long1 = MathUtils.pow(0L, 1196L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1096.017, (-2250.7686));
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 196;
      intArray0[2] = (-3638);
      intArray0[3] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2668.65, (-1810.1804219589633), 0.0);
      double double1 = MathUtils.cosh(0.0);
      int int0 = MathUtils.compareTo(0.0, (-900.87), 2668.65);
      long long0 = MathUtils.sign((long) 0);
      int int1 = MathUtils.gcd(15, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.flipBit((-3653));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathUtils.log(2196.9782060119, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 0.0);
      byte byte0 = MathUtils.sign((byte)59);
      int int0 = MathUtils.lcm(0, 2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(204, (-76));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-76);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= -76)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1916.893819052638);
      doubleArray0[1] = 2762.9522640057066;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1120.2366;
      doubleArray0[4] = 0.058823529411764705;
      doubleArray0[5] = (-3644.0);
      doubleArray0[6] = (-0.16624879837036133);
      doubleArray0[7] = (-1927.0);
      doubleArray0[8] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,762.952 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.0, 0.0, 0.0);
      double double0 = MathUtils.scalb(0.0, 1574);
      short short0 = MathUtils.sign((short) (-2557));
      float float0 = MathUtils.round((float) (short) (-2557), (int) (short) (-2557));
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      boolean boolean1 = MathUtils.equals(1.0, 1.176342548272881E-8, 3301.3723890646884);
      try { 
        MathUtils.pow(0, (-3485));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,485)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 216;
      int int1 = MathUtils.indicator(216);
      long long0 = MathUtils.addAndCheck((long) 216, (long) 216);
      long long1 = MathUtils.gcd((-9218868437227405313L), (long) 1);
      int int2 = 2984;
      double double0 = MathUtils.scalb(0.0, 2984);
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 216);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 216
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.indicator(2004.2821706);
      try { 
        MathUtils.pow(0, (-1185));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,185)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 0);
      boolean boolean1 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (double) 0);
      long long0 = MathUtils.mulAndCheck(2819561105158720014L, 0L);
      long long1 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean1 = MathUtils.equals((-1.0), 6.283185307179586, 6.283185307179586);
      long long0 = MathUtils.sign((long) 0);
      boolean boolean2 = MathUtils.equals(6.283185307179586, (double) 0L, 6.283185307179586);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long1 = MathUtils.pow(0L, 0L);
      int int0 = MathUtils.pow(0, 0);
      boolean boolean4 = MathUtils.equalsIncludingNaN((-666.79), 6.283185307179586, 2426.7692081);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(6.283185307179586, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, 0.0);
      long long0 = MathUtils.binomialCoefficient(2772, 2772);
      int[] intArray0 = new int[5];
      intArray0[0] = 2772;
      intArray0[1] = 2772;
      intArray0[2] = 2772;
      intArray0[3] = 2772;
      intArray0[4] = 2772;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 17.0;
      int int0 = (-1998);
      // Undeclared exception!
      try { 
        MathUtils.round(17.0, (-1998), (-1998));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(616, 616);
      double double0 = MathUtils.sinh(0.14982303977012634);
      long long1 = MathUtils.gcd(1L, 1653L);
      int int0 = MathUtils.mulAndCheck(93, 616);
      long long2 = MathUtils.subAndCheck((-7278142539171889152L), 285L);
      short short0 = MathUtils.sign((short)94);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.lcm(750, 0);
      int int1 = MathUtils.compareTo(0.0, 0, 750);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-24));
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((float) (short)1, (-199), 0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.gcd(1L, 4294967295L);
      int int0 = MathUtils.gcd((-1570), (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.gcd(537, 537);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 537);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 537
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.factorialLog(146);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 146, 585.0178793888392, 146);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.indicator(73);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 73;
      doubleArray0[3] = (double) 73;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 73;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (73 >= 73)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 138;
      double double0 = MathUtils.factorialDouble(138);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.cosh(935.47906118);
      long long0 = MathUtils.gcd(0L, (-48L));
      long long1 = MathUtils.addAndCheck(0L, 48L);
      int int0 = MathUtils.hash(0.003);
      double double1 = MathUtils.normalizeAngle((-48L), 0.0);
      int int1 = MathUtils.compareTo(935.47906118, 48L, Double.POSITIVE_INFINITY);
      int int2 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-794), 777);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -794, k = 777
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 1, (long) 0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1);
      int int2 = (-1871);
      int int3 = MathUtils.lcm((-1871), 1);
      long long1 = MathUtils.pow((long) 1, 1);
      long long2 = 0L;
      try { 
        MathUtils.pow(0L, (-1871));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,871)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.lcm((-1401), (-1401));
      short short0 = MathUtils.indicator((short)12);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short)12, 189);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 12, k = 189
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1L, 514L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-5655.554691242), (-3735.263093201417));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-513L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(2958, 2958);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.binomialCoefficientLog(874, 874);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short short0 = MathUtils.sign((short)19);
      double double0 = MathUtils.sign((double) (short)1);
      long long0 = MathUtils.sign((long) (short)19);
      long long1 = MathUtils.sign(1L);
      long long2 = MathUtils.indicator(1L);
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equals((-705.9517557076166), (double) 0);
      long long3 = MathUtils.indicator(1856L);
      int int1 = MathUtils.pow(1267, (int) (short)19);
      double double1 = MathUtils.cosh((short)1);
      short short1 = MathUtils.sign((short)1);
      short short2 = MathUtils.indicator((short)19);
      double double2 = MathUtils.factorialDouble((short)19);
      int int2 = MathUtils.pow(0, 0);
      long long4 = MathUtils.lcm(881L, (long) (short)1);
      float float0 = MathUtils.sign(2278.75F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = (short)94;
      short short1 = MathUtils.indicator((short)94);
      int int0 = MathUtils.addAndCheck((-520), (int) (short)1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-520);
      doubleArray0[1] = (double) (short)94;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (-519);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-520);
      doubleArray0[6] = (double) (short)94;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (94 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 2.2250738585072014E-308);
      double double0 = MathUtils.sign(0.0);
      float float0 = MathUtils.sign(0.0F);
      byte byte0 = MathUtils.sign((byte) (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-1.0E-6));
      long long0 = MathUtils.binomialCoefficient(0, (byte) (-1));
      long long1 = MathUtils.pow((long) (byte) (-1), 209);
      double double1 = MathUtils.indicator(2.2250738585072014E-308);
      int int1 = MathUtils.sign(475);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1903.8, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(5.650007086920087E-9, 1590.5628, (-2121));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 212);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      int[] intArray0 = new int[3];
      intArray0[0] = 212;
      intArray0[1] = 212;
      intArray0[2] = 212;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.mulAndCheck(212, 212);
      float float0 = MathUtils.indicator((float) 212);
      double double3 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 212, 0.0, (double) 212);
      double double4 = MathUtils.scalb(44944, (-4796));
      byte byte0 = MathUtils.sign((byte)0);
      double double5 = MathUtils.round(6.283185307179586, (-770));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1.0F;
      double double6 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1796.7208, 1796.7208);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1796.7208;
      doubleArray0[1] = 1796.7208;
      doubleArray0[2] = 1796.7208;
      doubleArray0[3] = 1796.7208;
      doubleArray0[4] = 1796.7208;
      doubleArray0[5] = 1796.7208;
      doubleArray0[6] = 1583.009279443807;
      doubleArray0[7] = 1796.7208;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(0.016, 66);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double[] doubleArray1 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray1, (-2.6033824355191673E-8));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = (short) (-2483);
      short short1 = MathUtils.sign((short) (-2483));
      short short2 = MathUtils.sign((short) (-2483));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (-1067.062194753485);
      doubleArray0[2] = (double) (short) (-2483);
      doubleArray0[3] = (double) (short) (-2483);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short) (-1);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 780.9980651;
      doubleArray1[1] = (double) (short) (-2483);
      doubleArray1[2] = (double) (short) (-2483);
      doubleArray1[3] = (double) (short) (-1);
      doubleArray1[4] = (double) (short) (-2483);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck((-1845), 0);
      double double0 = MathUtils.log((-2483.0), 0.3);
      double double1 = MathUtils.distance(doubleArray1, doubleArray0);
      long long0 = MathUtils.addAndCheck(1997L, 1643L);
      int int2 = MathUtils.sign(226);
      // Undeclared exception!
      try { 
        MathUtils.factorial(226);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.binomialCoefficient(9, (-3515));
      int int0 = MathUtils.subAndCheck(2188, (int) (byte)0);
      long long1 = MathUtils.pow(4499201580859392L, 379);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)82;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftRight((byte) (-79));
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) (byte)0);
      short short0 = MathUtils.sign((short) (byte)0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (byte)10;
      intArray0[2] = (int) (byte)0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)82);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)82;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-1802));
      double double1 = MathUtils.indicator(8.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1802);
      doubleArray0[1] = 1.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.indicator((double) 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = 3;
      long long0 = MathUtils.pow((long) 0, 3);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16);
      byte byte0 = MathUtils.sign((byte) (-2));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 2565;
      int int1 = MathUtils.indicator(2565);
      float float0 = MathUtils.round(0.0F, 0, 1);
      long long0 = (-3958705157555305932L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-3958705157555305932L), (-3958705157555305932L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-2752);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2752));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,752
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 175;
      // Undeclared exception!
      try { 
        MathUtils.factorial(175);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.normalizeAngle(3.834E-20, 0.0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      double double3 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3.834E-20, 201.29179834189713, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1952.1764534465904;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1952.1764534465904;
      doubleArray1[1] = 1952.1764534465904;
      doubleArray1[2] = 1952.1764534465904;
      doubleArray1[3] = 1952.1764534465904;
      doubleArray1[4] = 1952.1764534465904;
      doubleArray1[5] = 1952.1764534465904;
      doubleArray1[6] = 1952.1764534465904;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.gcd((-5216L), (-5216L));
      int int0 = MathUtils.addAndCheck(0, 0);
      long long1 = MathUtils.lcm((long) 0, (-6151L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)113;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(11, byteArray0);
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.sign(1574);
      double double0 = MathUtils.cosh(1574);
      int int1 = MathUtils.subAndCheck(1, 2118);
      short short0 = MathUtils.sign((short)1916);
      int int2 = MathUtils.pow(1495, (long) (short)1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.lcm((-2147483648L), 4095L);
      double double0 = MathUtils.round((double) 8793945538560L, 4123);
      byte byte0 = MathUtils.sign((byte) (-38));
      short short0 = MathUtils.indicator((short)750);
      long long1 = MathUtils.lcm((long) (short)750, 4095L);
      long long2 = MathUtils.mulAndCheck((-193L), 3628800L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 8.79394553856E12;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (-0.12502530217170715);
      doubleArray0[3] = (double) (byte) (-38);
      doubleArray0[4] = 161.75080083239;
      doubleArray0[5] = (double) (short)750;
      doubleArray0[6] = 8.79394553856E12;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 4123, 0.0, 989);
      double double1 = MathUtils.normalizeAngle((-193L), 4123);
      float float0 = MathUtils.round((float) 4123, (int) (byte) (-38));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-1335);
      int int1 = MathUtils.gcd((-1335), (-1335));
      int int2 = MathUtils.indicator((-1335));
      long long0 = MathUtils.addAndCheck((long) 1335, (long) 1335);
      double double0 = MathUtils.binomialCoefficientDouble(183, (-880));
      long long1 = MathUtils.subAndCheck((-5378L), (-5378L));
      double double1 = 1159.02;
      boolean boolean0 = MathUtils.equals((double) (-880), 1159.02, 0.0);
      long long2 = MathUtils.pow(4890L, 1335);
      try { 
        MathUtils.pow((-1335), (-1221L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,335^-1,221)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.indicator((-224));
      float float0 = MathUtils.round(0.0F, 0);
      double double0 = MathUtils.scalb((-1), (-224));
      int int1 = MathUtils.compareTo((-3.7092061506874214E-68), 0, 1784.05);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-3.7092061506874214E-68);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1784.05;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(638.1209210277898, (-1));
      double double2 = MathUtils.log((-626.171), 3032.8953);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3500);
      intArray0[1] = (-1028);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.lcm((-1028), (-1028));
      long long0 = MathUtils.indicator((-2644281811660520851L));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-226L));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0L, (-408.519666), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 755L;
      long long1 = MathUtils.pow(755L, 1331L);
      int int0 = 20;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 20);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = 0.6666666269302368;
      double double1 = MathUtils.cosh(0.6666666269302368);
      try { 
        MathUtils.pow((-2027), (long) (-2027));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,027^-2,027)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-853), 378);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = 1909;
      int int2 = MathUtils.subAndCheck(1909, (-475));
      long long0 = MathUtils.gcd((long) 378, 0L);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(378, (-853));
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int3 = MathUtils.compareTo(0.0, 0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (long) (-853));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-853)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.cosh(78.29485113);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double double2 = MathUtils.normalizeAngle((-3671.048026004), (-3671.048026004));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-758), (-1954));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -758
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3484L, 3484L);
      long long1 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equals((double) 0L, 889.424166, 15);
      long long2 = MathUtils.gcd(3484L, 3484L);
      float float0 = MathUtils.sign((-1558.0F));
      double double0 = MathUtils.cosh((-337.236376527782));
      float float1 = MathUtils.round((float) 3484L, (-1078), 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0L, (-135.65), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-41));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.addAndCheck((int) (byte) (-1), (int) (byte) (-41));
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (int) (byte) (-41), (int) (byte) (-41));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.indicator(193);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(0L, (long) 1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 872.78619031231;
      doubleArray0[2] = 1.1730463525082348E-7;
      doubleArray0[3] = (-4205.0);
      doubleArray0[4] = (-1309.3191);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 0.7853981633974483;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.indicator((-4205.0));
      short short0 = MathUtils.sign((short) (-4466));
      int int0 = MathUtils.subAndCheck((-1366), 15);
      long long0 = MathUtils.gcd((long) (short) (-1), (long) (-1366));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1381);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.normalizeAngle((-4205.0), 1.1730463525082348E-7);
      long long1 = MathUtils.indicator((long) 15);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 2348.1, (-870));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      double double0 = MathUtils.factorialDouble(3810);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.0, 1.5707963267948966);
      boolean boolean1 = MathUtils.equals((-577.6847), (double) (-1.0F), 3.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(1828, 82);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 3810);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(Double.NaN);
      // Undeclared exception!
      try { 
        MathUtils.round(1831.0F, 0, (-1628));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,628, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-4050));
      double double0 = MathUtils.cosh(Float.NaN);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.pow(961, 961);
      float float1 = MathUtils.indicator(842.43164F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(Double.NaN, 0.0, 961);
      boolean boolean2 = MathUtils.equals((double) 1433146305, (double) 1.0F, 2769);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 488.113429848976;
      doubleArray0[1] = (-6072.69607);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.cosh(0.19999998807907104);
      long long0 = MathUtils.pow((-2246L), 6);
      int int0 = MathUtils.sign(682);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 96);
      long long1 = MathUtils.lcm((long) 6, (long) 1);
      long long2 = MathUtils.addAndCheck((long) 96, 0L);
      double double1 = MathUtils.cosh(96);
      byte byte0 = MathUtils.sign((byte)114);
      double double2 = MathUtils.log(96L, 0.0F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(-0.0, -0.0, 3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short short0 = MathUtils.sign((short)1282);
      int int0 = MathUtils.sign((int) (short)1282);
      double double0 = MathUtils.sinh((-3037.973362794));
      int int1 = MathUtils.indicator(1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.pow(19, 851L);
      int int1 = MathUtils.sign((-213));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2050.0), (-2050.0), 0.0);
      long long0 = MathUtils.binomialCoefficient(75, 63);
      double double0 = MathUtils.cosh(75);
      double double1 = MathUtils.round(135.30479633, 63);
      int int0 = MathUtils.subAndCheck(1013, 75);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.8666209983995007E32;
      doubleArray0[1] = (-2050.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 75;
      doubleArray0[4] = (-2050.0);
      doubleArray0[5] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(1502043934, 1013);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(3038L, 3038L);
      double double0 = MathUtils.normalizeAngle(2.2250738585072014E-308, 0.3333333333332802);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = (double) 9229444L;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm(9229444L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (9,229,444 >= -\u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.008333333333333333, (-1925.849136025));
      int int0 = MathUtils.mulAndCheck((-866), (-866));
      int int1 = MathUtils.indicator(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      long long0 = bigInteger0.longValue();
      int int2 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 1);
      double double0 = MathUtils.sign(2274.9719964137);
      long long1 = MathUtils.indicator((long) 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1814));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,814
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        MathUtils.pow(2147483648L, (-2044L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,147,483,648^-2,044)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.indicator(35.0338638);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = MathUtils.indicator((short)302);
      float float0 = MathUtils.round(0.0F, (int) (short)302);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, (double) 0.0F, 0.0);
      long long0 = MathUtils.lcm((long) (short)1, 2136L);
      double double0 = 1.2958646899018938E-9;
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (short)1, 1.2958646899018938E-9, 1210.1);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2857L);
      double double1 = 2342.421334;
      double double2 = MathUtils.normalizeAngle(2342.421334, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("number of sample is not positive: {0}");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.number of sample is not positive: {0}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-47));
      float float0 = MathUtils.sign((float) (byte) (-47));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1467.07), 2.0, 2.0);
      long long0 = MathUtils.sign(2042L);
      int[] intArray0 = new int[1];
      intArray0[0] = 2028;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte1 = MathUtils.sign((byte) (-1));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 2028;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) 2042L;
      doubleArray0[7] = (double) (byte) (-47);
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.pow(1781, 0L);
      long long0 = MathUtils.lcm((long) 1781, (long) 1781);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1781L;
      doubleArray0[1] = (double) 1781;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1781;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      long long1 = MathUtils.lcm(1L, 1781L);
      int int1 = MathUtils.indicator(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 926;
      intArray0[2] = 1;
      intArray0[3] = 1781;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 1781;
      intArray0[8] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.round((float) 926, 2691, 0);
      double double1 = MathUtils.round(0.0, 1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-3765));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-3,765)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = (-2473);
      float float0 = MathUtils.round(0.0F, (-2473));
      int int1 = 1217;
      double double0 = MathUtils.factorialDouble(1217);
      byte byte0 = (byte) (-123);
      byte byte1 = MathUtils.sign((byte) (-123));
      long long0 = MathUtils.mulAndCheck((-1527L), (long) 1217);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int2 = bigInteger1.signum();
      int int3 = bigInteger1.intValue();
      int int4 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int int5 = (-273);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte) (-1), 0, (-273));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)37);
      long long0 = MathUtils.addAndCheck((-570L), 441L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3801.721570863168, 501.3256795);
  }
}
