/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:23:20 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1669, 1669);
      double double1 = MathUtils.sinh(1.0);
      int int0 = MathUtils.mulAndCheck(0, 1669);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.indicator(1616.7);
      long long0 = MathUtils.gcd(2432902008176640000L, (-313L));
      long long1 = MathUtils.pow((long) 1669, 889);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      int int0 = MathUtils.subAndCheck((-5125), (-5125));
      // Undeclared exception!
      try { 
        MathUtils.equals((-1753.050763), 1235.88596748, 2145059851);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(874.316871319, 1633.648013624682, Double.POSITIVE_INFINITY);
      int int0 = MathUtils.hash(313.837193);
      long long0 = MathUtils.subAndCheck((-706L), (long) 1678715502);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = 1218.1F;
      int int0 = 8;
      int int1 = 0;
      float float1 = MathUtils.round(1218.1F, 8, 0);
      int int2 = 4194304;
      // Undeclared exception!
      MathUtils.factorialLog(4194304);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 42.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = (-130);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-130));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -130
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1327.2522, 1327.2522);
      int int0 = 0;
      int int1 = (-2287);
      double double1 = MathUtils.binomialCoefficientDouble(0, (-2287));
      int int2 = (-1439);
      double double2 = MathUtils.binomialCoefficientLog(0, (-1439));
      int int3 = 206;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 206);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 697.7671396;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 485.168337411433;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(3.834E-20, 2.0);
      double double0 = MathUtils.indicator(2.0);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean1 = MathUtils.equals(1545.638214179, 0.0);
      long long0 = MathUtils.subAndCheck(667L, (long) (byte)0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.sign(2120L);
      long long2 = MathUtils.pow(1L, 667L);
      long long3 = MathUtils.indicator((-1021L));
      double double1 = MathUtils.cosh(0.0);
      float float0 = MathUtils.sign((-1667.61F));
      double double2 = MathUtils.factorialDouble(2312);
      double double3 = MathUtils.factorialLog(19);
      long long4 = MathUtils.addAndCheck((-1191L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2336.13075118), (-2336.13075118), (-3.37246066));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-2336.13075118);
      doubleArray0[2] = (-2336.13075118);
      doubleArray0[3] = (-2336.13075118);
      doubleArray0[4] = (-3.37246066);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 114;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.factorialDouble(1549);
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.lcm(6, 0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.hash(doubleArray0);
      boolean boolean1 = MathUtils.equals(Double.NEGATIVE_INFINITY, (-3.37246066), 3);
      MockRandom mockRandom0 = new MockRandom(0);
      BigInteger bigInteger0 = BigInteger.probablePrime(6, mockRandom0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      int int3 = MathUtils.sign(0);
      long long0 = MathUtils.indicator((-3512299194304650054L));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(720L, 0L);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 720L, (double) 720L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(720L, (-2644281811660520851L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      double double0 = 0.0;
      double double1 = MathUtils.normalizeAngle((-3.141592653589793), 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = MathUtils.round(1105.519F, 2702);
      double double0 = MathUtils.factorialDouble(2702);
      long long0 = MathUtils.subAndCheck((-3183605296591799669L), (long) 2702);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-3183605296591799669L), (double) 2702, 2702);
      boolean boolean1 = MathUtils.equals(0.11764700710773468, (double) Float.NaN);
      double double1 = MathUtils.cosh((-188.21780710216));
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString(2702);
      boolean boolean2 = bigInteger0.testBit(2702);
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = BigInteger.valueOf((-332L));
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      double double2 = MathUtils.round(212.29415189, 2702);
      int int0 = MathUtils.addAndCheck(2702, 19);
      long long2 = MathUtils.lcm(0L, (-863L));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.pow(9218868437227405312L, 0);
      double double0 = MathUtils.log((-434.0), 1039.817014036);
      long long1 = MathUtils.addAndCheck(1L, 9218868437227405312L);
      int int0 = MathUtils.pow((-1502), 17);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1039.817014036;
      doubleArray0[1] = (double) (-1502);
      doubleArray0[2] = 1039.817014036;
      doubleArray0[3] = (double) 9218868437227405313L;
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.indicator(138);
      int int3 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.cosh(1039.817014036);
      int int4 = MathUtils.pow((-1502), 9218868437227405312L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 690.2373296);
      boolean boolean1 = MathUtils.equals((-1579.9722930143878), (-3851.8217175), 1587);
      double double2 = MathUtils.factorialLog(17);
      int[] intArray0 = new int[0];
      int int5 = MathUtils.distance1(intArray0, intArray0);
      int int6 = MathUtils.gcd((-1620), (-1502));
      int int7 = MathUtils.sign(2);
      int int8 = MathUtils.hash(doubleArray0);
      long long2 = MathUtils.gcd(0L, (long) (-1620));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.round(0.0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, 0.0);
      boolean boolean1 = MathUtils.equals(0.074, 0.0);
      double double1 = MathUtils.sign((double) 0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.074);
      int int0 = MathUtils.mulAndCheck((-1339), 805);
      double double3 = MathUtils.indicator((double) 1L);
      long long1 = MathUtils.mulAndCheck((-2704L), (long) (-1077895));
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 805, 0.0);
      boolean boolean3 = MathUtils.equals((-1360.880196879), 0.0, 4228.55);
      int int1 = MathUtils.sign((-1077895));
      double double4 = MathUtils.round((double) (-1077895), (-1339));
      long long2 = MathUtils.addAndCheck((long) 0, (long) (-1339));
      boolean boolean4 = MathUtils.equals(0.0, (double) (-1077895), (double) (-1339L));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      short short0 = MathUtils.indicator((short)352);
      int int0 = MathUtils.hash((double) (short)352);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1121.0);
      doubleArray0[1] = (double) 1081475072;
      doubleArray0[2] = (double) (short)352;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (short)352;
      doubleArray0[7] = (double) 1081475072;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (double) (short)1;
      doubleArray1[2] = (double) 1L;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-786));
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.cosh(206.099546);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-786);
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 206.099546;
      doubleArray0[3] = 2118.01571;
      doubleArray0[4] = (double) (short) (-786);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (short) (-786);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-786 <= 0.5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 14;
      double double0 = MathUtils.factorialLog(14);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (-502.49578223065);
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = 25.19122118273868;
      doubleArray0[6] = 25.19122118273868;
      int int1 = MathUtils.hash(doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-6.663542893624021E-14);
      doubleArray0[8] = (-371.225046457);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-6.663542893624021E-14));
      byte byte0 = MathUtils.indicator((byte)6);
      long long0 = MathUtils.addAndCheck((long) (byte)6, (long) (byte)6);
      double double1 = MathUtils.round(0.0, (-551), (int) (byte)1);
      double double2 = MathUtils.sinh(1.0);
      int int0 = MathUtils.pow(0, 729);
      long long1 = MathUtils.indicator(3340L);
      long long2 = MathUtils.lcm(12L, (long) 0);
      boolean boolean0 = MathUtils.equals((double) (byte)6, (-2760.052958001));
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (byte)1;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.1752011936438014;
      doubleArray2[4] = (-2760.052958001);
      int int1 = MathUtils.hash(doubleArray2);
      int int2 = MathUtils.pow(0, (long) 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      short short0 = MathUtils.indicator((short) (byte)6);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(9);
      long long0 = MathUtils.sign((long) 9);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 9, 362880.0);
      long long1 = (-2069L);
      long long2 = MathUtils.addAndCheck(7910884519577875640L, (-2069L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 362880.0;
      doubleArray0[1] = (double) (-2069L);
      doubleArray0[2] = 362880.0;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 7910884519577873571L;
      doubleArray0[5] = (double) 7910884519577875640L;
      doubleArray0[6] = (double) 9;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long3 = MathUtils.subAndCheck((long) 9, 1495L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 7.9108845195778755E18);
      boolean boolean3 = MathUtils.equals(3524.6459, 0.0, (double) 1495L);
      boolean boolean4 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      try { 
        MathUtils.pow(7910884519577875640L, (-1486L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (7,910,884,519,577,875,640^-1,486)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(6285L, (-4715L));
      short short0 = MathUtils.indicator((short)0);
      long long1 = MathUtils.mulAndCheck(6285L, 6285L);
      int int0 = MathUtils.hash(68.188);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 234;
      int int1 = MathUtils.sign(234);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.factorialLog(2414);
      double double1 = MathUtils.log(16393.55702285604, 16393.55702285604);
      long long0 = MathUtils.sign((long) 2414);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 16393.55702285604;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 2414;
      doubleArray0[4] = 16393.55702285604;
      doubleArray0[5] = 16393.55702285604;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (1 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double double1 = MathUtils.binomialCoefficientLog(66, (-1624));
      int int0 = MathUtils.pow((-1624), 66);
      long long0 = MathUtils.factorial(18);
      long long1 = MathUtils.subAndCheck((long) 66, (-9218868437227405313L));
      long long2 = MathUtils.sign(9218868437227405379L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 6402373705728000L;
      doubleArray0[2] = (double) 66;
      doubleArray0[3] = (double) 18;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(653, 653);
      boolean boolean0 = MathUtils.equals(0.14285714285714285, (-234.823598), 1.304E19);
      double double0 = MathUtils.binomialCoefficientLog(256, 0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      short short0 = MathUtils.sign((short)2708);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 653;
      doubleArray0[2] = (double) 653;
      doubleArray0[3] = (-234.823598);
      doubleArray0[4] = (double) (short)2708;
      doubleArray0[5] = (double) 653;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 653;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 587.25694;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = (byte) (-46);
      byte byte1 = MathUtils.sign((byte) (-46));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 587.25694);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 587.25694;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (byte) (-1);
      doubleArray1[4] = (double) (byte) (-46);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 587.25694;
      doubleArray1[7] = 587.25694;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (587.257 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = (-1269.3189061771325);
      int int0 = MathUtils.hash((-1269.3189061771325));
      // Undeclared exception!
      MathUtils.factorialDouble(1338282077);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2047L, 2047L);
      int int0 = 0;
      int int1 = 0;
      float float0 = MathUtils.round(Float.NaN, 0, 0);
      int int2 = 9;
      int int3 = MathUtils.lcm(0, 9);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 2527.23869941951;
      double double1 = MathUtils.normalizeAngle(2527.23869941951, 0.0);
      double double2 = MathUtils.factorialLog(2597);
      int int0 = 1789;
      int int1 = (-872);
      double double3 = MathUtils.binomialCoefficientDouble(1789, (-872));
      double double4 = 942.854179227276;
      double double5 = (-1487.337206037821);
      // Undeclared exception!
      try { 
        MathUtils.equals(942.854179227276, (-1487.337206037821), (-872));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 1109L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.pow(479001600L, 50);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1081.912, 2279.2382247574856, 0.0);
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2279.2382247574856;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 16;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 5451.2112119943895;
      doubleArray1[3] = (-2770.3634295867046);
      doubleArray1[4] = (double) 16;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 16;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 337.1716123859596;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-2854.8505461212458);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 3186.168952413;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)7);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2854.8505461212458), 4790.4034536);
      int int0 = MathUtils.lcm((-3506), (-3506));
      double double1 = MathUtils.scalb(0.0, 122);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2096, 2096);
      long long0 = MathUtils.binomialCoefficient(23, (-81));
      int int0 = MathUtils.pow((-81), (long) 2096);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.log(1.0, 0.0);
      int int1 = MathUtils.pow(23, 507L);
      long long1 = MathUtils.lcm((long) 2096, (-1185L));
      int[] intArray0 = new int[8];
      intArray0[0] = 2096;
      intArray0[1] = (-81);
      intArray0[2] = 0;
      intArray0[3] = 2096;
      intArray0[4] = 70;
      intArray0[5] = 23;
      intArray0[6] = (-81);
      intArray0[7] = 2096;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double3 = MathUtils.log(0.0, 2096);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2096;
      doubleArray0[1] = (double) 2096;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equals(0.0, (-0.0013888888689039883), 252);
      byte byte0 = MathUtils.indicator((byte)17);
      int int0 = MathUtils.gcd(252, 252);
      short short0 = MathUtils.sign((short) (-2383));
      boolean boolean1 = MathUtils.equals((-0.0013888888689039883), 0.0, 252);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 432.0959643877239, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = (short) (-1168);
      short short1 = MathUtils.indicator((short) (-1168));
      try { 
        MathUtils.pow((long) (short) (-1168), (long) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,168^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 464;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.indicator((short) (-199));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-1363L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,363)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-6.032174644509064E-23), (-6.032174644509064E-23), 1428);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.2246467991473532E-16, 1.2246467991473532E-16, 119);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-124);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1108L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (5,384,836^-1,108)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 62.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator((-3047.72543542871));
      MathUtils.OrderDirection mathUtils_OrderDirection1 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection1, true);
      int int0 = MathUtils.compareTo((-3047.72543542871), 62.0, 0.0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      try { 
        MathUtils.pow((-1), (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.lcm(178, 178);
      boolean boolean0 = MathUtils.equals(0.0, (double) 178, 0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-7278142539171889152L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-7,278,142,539,171,889,152)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.6366197723675814;
      doubleArray0[1] = (-349.00803345);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.6366197723675814;
      doubleArray1[2] = 0.6366197723675814;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-349.00803345);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.6366197723675814;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      double double0 = MathUtils.distance(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-5761);
      int int1 = MathUtils.indicator((-5761));
      int int2 = MathUtils.indicator((-1));
      int int3 = 0;
      float float0 = MathUtils.round((float) (-1), 0);
      int int4 = (-1390);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-5761), (-1390));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -5,761, k = -1,390
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-911.803);
      doubleArray0[4] = 0.08371849358081818;
      doubleArray0[5] = 2662.11149;
      doubleArray0[6] = 1051.792787501;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.08371849358081818;
      doubleArray1[1] = (-911.803);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.08371849358081818;
      doubleArray1[4] = 2662.11149;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.factorialLog(19);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-255,931,400,750,605,734,595^-255,931,400,750,605,734,595)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 174;
      boolean boolean0 = MathUtils.equals((-692.92), (-454.689836), 174);
      double double0 = MathUtils.sign((double) 174);
      int int1 = 1135;
      int int2 = MathUtils.gcd(174, 1135);
      int int3 = MathUtils.gcd(1135, 174);
      int int4 = 1673;
      double double1 = MathUtils.factorialLog(1673);
      long long0 = MathUtils.binomialCoefficient(1, 1);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-961));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -961
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-1256);
      int int1 = (-1988);
      try { 
        MathUtils.pow((-1256), (-1988));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,256^-1,988)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-363.089760500144), (-363.089760500144));
      float float0 = MathUtils.round((-1.0F), 0, 0);
      long long0 = MathUtils.pow((long) 0, 0);
      float float1 = MathUtils.indicator((-1.0F));
      // Undeclared exception!
      try { 
        MathUtils.equals(3106.4424515, 3106.4424515, (-3));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = (-1444.899566411);
      doubleArray1[2] = 10.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2.479773539153719E-5;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-2043);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2043));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,043
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 58.376075;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.sign(58.376075);
      long long1 = MathUtils.pow((long) 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.scalb((-3308.0), 1897);
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 1897;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 1897;
      intArray0[6] = (int) (byte)0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = MathUtils.indicator(438.069F);
      double double0 = MathUtils.cosh(0.5000000000042687);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.0F);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2708.5);
      doubleArray0[1] = 4787.66;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.375;
      doubleArray0[4] = (-1857.76685297886);
      doubleArray0[5] = 3366.0421;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator(0.5);
      float float0 = MathUtils.indicator(Float.NaN);
      long long0 = MathUtils.gcd(1575L, 1575L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float1 = MathUtils.round(1666.8347F, 263, 0);
      long long1 = MathUtils.addAndCheck((-7278142539171889152L), (-1L));
      // Undeclared exception!
      try { 
        MathUtils.factorial(258);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1756);
      intArray0[0] = (-1756);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) (-1756), (-693L));
      double double1 = (-1872.272);
      double double2 = (-1188.464295843);
      // Undeclared exception!
      try { 
        MathUtils.equals((-1872.272), (-1188.464295843), (-1756));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 124);
      long long0 = MathUtils.lcm(0L, 0L);
      long long1 = MathUtils.gcd((long) 124, (-506L));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2.0, (-0.16666666666666666));
      int int0 = MathUtils.hash(369.77240885);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = 105.4750906;
      double double1 = MathUtils.round(105.4750906, 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 106.0;
      doubleArray0[1] = 106.0;
      doubleArray0[2] = (double) 0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.lcm((long) 0, (long) 1588622431);
      boolean boolean0 = MathUtils.equals(106.0, 106.0);
      long long1 = MathUtils.binomialCoefficient(1588622431, 0);
      long long2 = MathUtils.indicator(362880L);
      boolean boolean1 = MathUtils.equals((double) 1L, 0.0, 105.4750906);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1L, 1588622431);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.compareTo(-0.0, 3558.69361473708, 3558.69361473708);
      double double0 = MathUtils.cosh(0);
      double double1 = MathUtils.cosh(3558.69361473708);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int[] intArray0 = new int[3];
      intArray0[0] = 94;
      intArray0[1] = 198;
      intArray0[2] = 419;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 94;
      doubleArray0[1] = (double) 94;
      doubleArray0[2] = (double) 419;
      doubleArray0[3] = (double) 419;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 198;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 94;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (94 <= 94)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1342));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,342)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 5;
      double double0 = MathUtils.factorialLog(5);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4.787491742782046;
      doubleArray0[2] = 4.787491742782046;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = 36;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 5, (-325), 36);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 36, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 61;
      int int1 = 2010;
      int int2 = MathUtils.pow(61, 2010);
      int int3 = 38;
      // Undeclared exception!
      try { 
        MathUtils.factorial(38);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.log(0.0, (-2130.0));
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.intValueExact();
      int int1 = bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      int int2 = 81;
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 81);
      int int3 = 0;
      long long0 = MathUtils.binomialCoefficient(81, 0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      float float0 = MathUtils.round(699.625F, 1, 1);
      int int1 = MathUtils.mulAndCheck(1, 47);
      boolean boolean0 = MathUtils.equals((double) 699.625F, (double) 699.625F, (double) 699.6F);
      long long0 = MathUtils.subAndCheck(0L, 1307674368000L);
      boolean boolean1 = MathUtils.equals((double) 0L, (double) 699.6F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1307674368000L);
      doubleArray0[2] = (double) 1307674368000L;
      doubleArray0[3] = (double) 699.6F;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow((long) 0, 0L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.lcm((-3512299194304650054L), (-3512299194304650054L));
      int int0 = MathUtils.lcm(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-31,580,168,998,035,968^-31,580,168,998,035,968)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 0, 2037);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,037, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 131;
      // Undeclared exception!
      try { 
        MathUtils.factorial(131);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 418;
      long long0 = MathUtils.binomialCoefficient(418, (-4499));
      double double0 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      double double1 = MathUtils.indicator(763.728);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 340.888;
      doubleArray0[2] = (double) 418;
      doubleArray0[3] = (double) 418;
      doubleArray0[4] = (double) 418;
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 186, 418);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathUtils.log(192.95225918596, 192.95225918596);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-652L), (-652L));
      int int0 = 16;
      int int1 = MathUtils.subAndCheck((-263), 16);
      double double0 = MathUtils.cosh(16);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("E&74(XhIThE{C4bCf");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.E&74(XhIThE{C4bCf
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3952090531849364496L, 779L);
      int int0 = MathUtils.hash((double) 3952090531849364496L);
      boolean boolean0 = MathUtils.equals((double) 3952090531849363717L, (-1822.326));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1822.326);
      doubleArray0[1] = (double) 3952090531849363717L;
      doubleArray0[2] = (double) (-252910560);
      doubleArray0[3] = (double) (-252910560);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,952,090,531,849,364,000 >= -252,910,560)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 533;
      long long0 = MathUtils.binomialCoefficient(533, 533);
      int int1 = MathUtils.mulAndCheck(533, 533);
      double double0 = MathUtils.sinh(1708.71);
      long long1 = (-74L);
      long long2 = MathUtils.subAndCheck(3427L, (-74L));
      int int2 = 0;
      double double1 = MathUtils.factorialLog(0);
      int int3 = (-4571);
      try { 
        MathUtils.pow(1L, (-4571));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-4,571)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = MathUtils.lcm((-1), 1055);
      byte byte0 = MathUtils.indicator((byte)110);
      int int1 = MathUtils.pow(1055, (long) 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = MathUtils.mulAndCheck(0, 1592);
      double double0 = MathUtils.factorialDouble(219);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 219;
      intArray0[2] = 0;
      intArray0[3] = 219;
      int int3 = 193;
      intArray0[4] = 193;
      intArray0[5] = 0;
      int int4 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.cosh(2.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2297));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,297
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.lcm(0L, 0L);
      int int0 = 1007;
      int int1 = MathUtils.indicator(1007);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (short)0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.sign(24L);
      boolean boolean0 = MathUtils.equals(42.99, (-1001.68149598766), (-372.42998));
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long1 = bigInteger0.longValue();
      boolean boolean1 = bigInteger0.testBit(31);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.valueOf((-1123L));
      String string0 = bigInteger0.toString();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 145);
      int int0 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("o");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 449.022304;
      doubleArray0[2] = 769.70725637;
      MathUtils.checkOrder(doubleArray0);
      float float0 = MathUtils.sign(673.5021F);
      boolean boolean0 = MathUtils.equals((-4163.2938283), (double) 1.0F);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 769.70725637);
      int int0 = MathUtils.sign(17);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-5034868814120038111L));
      int int0 = MathUtils.lcm((-1534), 309);
      long long1 = MathUtils.sign((long) 474006);
      long long2 = MathUtils.indicator(0L);
      long long3 = MathUtils.indicator(0L);
      double double0 = MathUtils.log((-3788.689653840423), (-3788.689653840423));
      int int1 = MathUtils.mulAndCheck(309, (-1534));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.addAndCheck(Integer.MIN_VALUE, 28);
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.lcm((int) (byte)0, Integer.MIN_VALUE);
      long long0 = MathUtils.addAndCheck(1345L, 1345L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-343.9135081), (double) 2690L, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.sign((-2858L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.1818181574344635, (double) (-1L), 252);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN, 0.0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(2282.6006F, (int) (short)0);
      long long1 = MathUtils.subAndCheck((long) (short)0, 725L);
      double double2 = MathUtils.binomialCoefficientLog((short)0, 0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.binomialCoefficientDouble((short)0, 0);
      int int1 = MathUtils.hash(0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2220L, 2019L);
      boolean boolean0 = MathUtils.equals(0.0, (double) 2220L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = (-876);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-876));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -876
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.indicator(0.7853981633974483);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-606.5541232);
      doubleArray0[3] = 0.7853981633974483;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1079L), (-1079L));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      byte byte0 = MathUtils.indicator((byte)53);
      double double0 = MathUtils.factorialDouble((byte)1);
      double double1 = MathUtils.binomialCoefficientLog(1795, (byte)53);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.141592653589793, 3.141592653589793, 3.141592653589793);
      double double0 = MathUtils.sinh(3.141592653589793);
      boolean boolean1 = MathUtils.equals((-1418.6), 0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 865.67;
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.pow(61, (long) 61);
      float float0 = MathUtils.indicator(987.66364F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-92.0);
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-3249);
      try { 
        MathUtils.pow(20922789888000L, (-3249));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (20,922,789,888,000^-3,249)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.scalb(6.283185307179586, 61);
      int int0 = MathUtils.pow(61, 1509);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      short short0 = MathUtils.indicator((short)516);
      int int0 = MathUtils.gcd((-1047), (int) (short)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1047), (double) (short)1, 1);
      int int1 = MathUtils.hash((double) 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      float float0 = MathUtils.round(2548.28F, 1);
      float float1 = MathUtils.sign((float) (-1047));
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)516;
      intArray0[1] = 251;
      intArray0[2] = (-1047);
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)516;
      int[] intArray1 = new int[3];
      intArray1[0] = (int) (short)1;
      intArray1[1] = (int) (short)516;
      intArray1[2] = 1072693248;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sinh((short)1);
      long long0 = MathUtils.indicator((long) (short)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = 1.1752011936438014;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 1.1752011936438014;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2693, 0);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      double double1 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2693;
      doubleArray0[2] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2537L, (-3310L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-8397470L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      byte byte0 = MathUtils.sign((byte)5);
      double double0 = MathUtils.sign((-123.736687));
      int int0 = MathUtils.addAndCheck((int) (byte)5, (int) (byte)5);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = 10;
      intArray0[2] = (int) (byte)5;
      intArray0[3] = (int) (byte)5;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = 16;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3243;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 3243, (double) 3243);
      int int1 = MathUtils.indicator(112);
      byte byte0 = MathUtils.indicator((byte) (-109));
      long long0 = MathUtils.gcd((long) (byte) (-109), 0L);
      double double0 = MathUtils.cosh(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3243;
      doubleArray0[1] = (double) (byte) (-109);
      doubleArray0[2] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,243 >= -109)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.sign((-5364.327901305968));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 181;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (181 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1048.655483;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(193, 193);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 193);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 193;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-662);
      // Undeclared exception!
      try { 
        MathUtils.equals((-7413.82268644933), (-7413.82268644933), (-662));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.indicator(21);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 21;
      doubleArray0[2] = (double) 21;
      doubleArray0[3] = (double) 21;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 10.0;
      boolean boolean0 = MathUtils.equals(10.0, 10.0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) (byte)101);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.cosh(0.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (double) (byte) (-114);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = 2935890503282001226L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2935890503282001226L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(497, 497);
      double double0 = MathUtils.log(0.0, 0.0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(379);
      double double1 = MathUtils.indicator(Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      int int1 = MathUtils.hash((double) 0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double double1 = MathUtils.indicator(1.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("q$_@?]>2AEx!oKXOj");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.q$_@?]>2AEx!oKXOj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 5833.0);
      double double0 = MathUtils.cosh(1125.106308005);
      double double1 = MathUtils.factorialLog(5);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.pow(0L, 11);
      int int1 = MathUtils.pow(0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(4.787491742782046, (double) 0L);
      int int2 = MathUtils.compareTo((-2840.4856), (-2864.19724470092), (-2840.4856));
      int int3 = MathUtils.gcd(2273, 5537);
      int int4 = MathUtils.subAndCheck(1625, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (-3288.263226852656), (-1840));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      float float0 = MathUtils.indicator((float) 0L);
      int int0 = (-850);
      int int1 = MathUtils.addAndCheck((-850), (-850));
      int int2 = MathUtils.hash((double) 0L);
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.normalizeAngle(0L, 0.0);
      long long1 = MathUtils.gcd((long) 0, (long) (-850));
      long long2 = MathUtils.pow(0L, 0L);
      int int3 = MathUtils.indicator((-1700));
      int int4 = MathUtils.compareTo((-2617.74689685633), 0.0, (-850));
      long long3 = MathUtils.lcm(1088L, (long) (-1));
      int int5 = MathUtils.sign((-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-850);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int6 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0L, (-553), 169);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.pow((-1157L), 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1157L);
      doubleArray0[2] = 1357.98302613;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1157L);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int int0 = MathUtils.subAndCheck((-5125), (-5125));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.lcm(2050L, (-746L));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.lcm(2314L, 2314L);
      float float0 = MathUtils.indicator((float) 2314L);
      byte byte0 = MathUtils.sign((byte) (-107));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 4);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.pow(20, (long) 20);
      long long0 = MathUtils.gcd(0L, (-1783L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1783L);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1783L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1608.122;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(0.0, 1608.122, 987.88189);
      int int1 = MathUtils.lcm((-1), (-1));
      long long0 = 3945L;
      long long1 = MathUtils.pow((long) (-1), 3945L);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int2 = bigInteger0.intValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.compareTo((-0.49404692204877), (-0.49404692204877), Double.NEGATIVE_INFINITY);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.mulAndCheck(0, (-1662));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(177, 63);
      int int1 = MathUtils.lcm(9, 202);
      int int2 = MathUtils.addAndCheck(1818, 17);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = 2199;
      intArray0[2] = 2199;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-2872);
      int int1 = 13;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2872), 13);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,872, k = 13
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.sinh(2433.75056985);
      int int0 = (-3882);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3882), (-3882));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,882
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-926), (-926));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -926
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 671;
      int int1 = MathUtils.subAndCheck(671, 671);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 671;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 671;
      doubleArray0[4] = (double) 671;
      doubleArray0[5] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-393), (-4353L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-393^-4,353)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(238, 238);
      int int1 = MathUtils.hash((double[]) null);
      int int2 = MathUtils.pow(1463, 33L);
      long long0 = MathUtils.binomialCoefficient(1463, 1);
      int[] intArray0 = new int[5];
      intArray0[0] = 704239799;
      intArray0[1] = 56644;
      intArray0[2] = 238;
      intArray0[3] = 56644;
      intArray0[4] = 0;
      int int3 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-502));
      double double1 = MathUtils.sign(2.2250738585072014E-308);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = 940.728484501;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 466.5547586969;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2450.512);
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-2633.0), 0.0);
      long long0 = MathUtils.pow(0L, 2106);
      long long1 = MathUtils.addAndCheck(0L, 1370L);
      int[] intArray0 = new int[3];
      intArray0[0] = 2106;
      intArray0[1] = 2106;
      intArray0[2] = 2106;
      double double1 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.sign((short)7);
      double double2 = MathUtils.binomialCoefficientDouble(2106, 522);
      boolean boolean0 = MathUtils.equals((double) 2106, (-2173.1), 522);
      long long2 = MathUtils.addAndCheck((-3975L), (-281L));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.cosh(3452.06);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1164.7), 3452.06);
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      long long0 = 0L;
      long long1 = MathUtils.lcm((long) 0, 0L);
      int int2 = (-3246);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3246), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,246, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.indicator(167);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 167;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 167;
      doubleArray0[3] = (double) 167;
      doubleArray0[4] = (double) 167;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = 1164L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(5648769086999809661L, 1164L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.hash(0.0);
      int int3 = MathUtils.lcm(0, 3558);
      double[] doubleArray1 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((long) 3558, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 3,558 + 9,223,372,036,854,775,807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 3194);
      double double0 = MathUtils.round((double) 0L, 0, 0);
      double double1 = MathUtils.round(0.07692307692307693, 3194);
      boolean boolean0 = MathUtils.equals(0.0, 2180.6811);
      boolean boolean1 = MathUtils.equals((double) 0, 0.0, 0.07692307692307693);
      int int0 = MathUtils.pow(563, 0L);
      double double2 = MathUtils.binomialCoefficientLog(4, (-581));
      boolean boolean2 = MathUtils.equals((-2.6033824355191673E-8), (double) (-581), 0.11113807559013367);
      long long1 = MathUtils.mulAndCheck(0L, (long) 563);
      try { 
        MathUtils.pow((-581), (-1483));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-581^-1,483)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(7.0, 7.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("w/6@qx%<?s'{.NRm_r`");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.w/6@qx%<?s'{.NRm_r`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.sign((-2618));
      double double0 = MathUtils.scalb((-2618), 0);
      byte byte0 = MathUtils.sign((byte) (-52));
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = (-2618);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-52);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.cosh(0);
      byte byte1 = MathUtils.indicator((byte) (-52));
      double double2 = MathUtils.sinh((-1));
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double3 = MathUtils.log(0, (-2618));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1.1752011936438014);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (-2618.0);
      doubleArray0[7] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not decreasing (-1.175 < -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1265);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.sinh((-2050.980574734549));
      float float0 = MathUtils.sign((float) (-1265));
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2050.980574734549);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }
}
