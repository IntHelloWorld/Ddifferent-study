/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:15:37 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1292.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(1226.506F);
      long long0 = MathUtils.indicator(45965631744376832L);
      int int0 = MathUtils.mulAndCheck(235, (-996));
      boolean boolean1 = MathUtils.equals((double) (-996), 1362.829985, 1.3039999999520997E19);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int[] intArray0 = new int[5];
      intArray0[0] = (-996);
      intArray0[1] = (-996);
      intArray0[2] = 235;
      intArray0[3] = (-234060);
      intArray0[4] = (-996);
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 2136060862;
      int int1 = 2468;
      double double0 = MathUtils.binomialCoefficientLog(2136060862, 2468);
      int int2 = (-403);
      int int3 = 172;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-403), 172);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -403, k = 172
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(355687428096000L, 2L);
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.cosh((-487.8652607675321));
      int int2 = MathUtils.mulAndCheck(0, 0);
      double double2 = MathUtils.factorialDouble(0);
      long long1 = 1700L;
      long long2 = MathUtils.mulAndCheck(239L, 1700L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte byte0 = bigInteger1.byteValueExact();
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = (-2657);
      int int3 = MathUtils.gcd((-2657), 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4194304, 4194304);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 826.7084892664;
      doubleArray0[4] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int[] intArray0 = new int[4];
      intArray0[1] = (-916);
      intArray0[2] = (-371);
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.sign((-916));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float float0 = MathUtils.sign((-1266.0F));
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 0;
      intArray0[3] = (-511);
      int int0 = 0;
      intArray0[4] = 0;
      intArray0[5] = 3775;
      intArray0[6] = 0;
      intArray0[7] = (-2001);
      intArray0[8] = 7;
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = (-511);
      intArray1[2] = 3775;
      intArray1[3] = (-2001);
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = (-202);
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (-202));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("xc");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.xc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = MathUtils.sign((short)244);
      long long0 = MathUtils.addAndCheck(479001600L, (long) (short)244);
      int int0 = MathUtils.compareTo(479001844L, 1.304E19, 1.304E19);
      double double0 = MathUtils.cosh(0);
      short short1 = MathUtils.indicator((short) (-2218));
      double double1 = MathUtils.sign(224.66884614);
      double double2 = MathUtils.factorialDouble(3723);
      double double3 = MathUtils.log((short) (-1), 2277.271962682142);
      long long1 = MathUtils.indicator((long) (short) (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.compareTo(Double.POSITIVE_INFINITY, 66.79578298, 0);
      long long2 = MathUtils.gcd(2147483648L, (-3958705157555305932L));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(3077.08282, 2302.32601);
      int int0 = MathUtils.lcm(523, 27);
      int int1 = MathUtils.compareTo(2302.32601, 2026.0, 27);
      double double0 = MathUtils.factorialLog(523);
      long long0 = MathUtils.gcd((long) 27, (long) 14121);
      short short0 = MathUtils.sign((short)385);
      double double1 = MathUtils.indicator((double) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.factorial((short)385);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.indicator((-5L));
      boolean boolean0 = MathUtils.equals((double) (-5L), (-2.957007209750105E-8));
      int int0 = 144;
      double double0 = MathUtils.scalb((-1L), 144);
      int int1 = 0;
      double double1 = MathUtils.round((double) (-1L), 144, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-5L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (-2.957007209750105E-8);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.log((-1000.46612056), 0);
      double double4 = MathUtils.cosh((-2.957007209750105E-8));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-5 < -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-44));
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.mulAndCheck(205, (int) (byte) (-44));
      float float0 = MathUtils.indicator(442.0797F);
      boolean boolean1 = MathUtils.equals((double) 205, 2.4384203044354907E-8, Double.NaN);
      float float1 = MathUtils.indicator(1749.5F);
      int[] intArray0 = new int[2];
      intArray0[0] = 205;
      intArray0[1] = (int) (byte) (-1);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.hash((double) 205);
      double double0 = MathUtils.scalb(1749.5F, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1080664064;
      MathUtils.checkOrder(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-9020));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-9,020)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 170.89315, 0.0);
      boolean boolean1 = MathUtils.equals(0.0, 2942.79420366184);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2064.97974832;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 170.89315;
      doubleArray0[4] = 170.89315;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-380.012250733106);
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValue();
      try { 
        MathUtils.pow(bigInteger0, (-3958705157555305932L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-3,958,705,157,555,305,932)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.log((-1.0), (-1.0));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.addAndCheck(28629151, 28629151);
      long long0 = MathUtils.indicator(0L);
      double double1 = MathUtils.indicator(649.0);
      long long1 = MathUtils.pow((-724L), 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(48, 320);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 48, k = 320
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.141592653589793, (-4201.397547635126), 16);
      int int0 = MathUtils.sign(217);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 217;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 16;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.log(1, 1543.3453);
      double double2 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.factorialDouble(1);
      boolean boolean1 = MathUtils.equals(3.141592653589793, 3.141592653589793);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 16, (double) 1);
      int int2 = MathUtils.addAndCheck(1862, 2549);
      double double4 = MathUtils.distance(intArray0, intArray0);
      double double5 = MathUtils.distance(doubleArray0, doubleArray0);
      int int3 = MathUtils.hash(0.0);
      int int4 = MathUtils.addAndCheck(Integer.MIN_VALUE, 0);
      long long0 = MathUtils.pow((-2644281811660520851L), 2L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = (short)921;
      short short1 = MathUtils.indicator((short)921);
      double double0 = 933.325;
      boolean boolean0 = MathUtils.equalsIncludingNaN(933.325, (double) (short)1, (int) (short)1);
      long long0 = MathUtils.mulAndCheck((-2232L), 376L);
      double double1 = MathUtils.log((-358.0), 376L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((short)921);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.valueOf(0L);
      boolean boolean1 = bigInteger0.isProbablePrime(14);
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      long long1 = MathUtils.addAndCheck(763L, (-264L));
      double double0 = MathUtils.binomialCoefficientDouble(1030, 1030);
      float float0 = MathUtils.round((float) 763L, 1030);
      double double1 = MathUtils.cosh((-758.843718452));
      double double2 = MathUtils.sinh(Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-264L);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (-264L);
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (-260.5978071);
      doubleArray0[6] = (-758.843718452);
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = Double.POSITIVE_INFINITY;
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-684.2518793);
      doubleArray0[2] = (-2192.66599607);
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.sinh(0.008336750013465571);
      double double1 = MathUtils.cosh((-2192.66599607));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(272.162703166, (-509.4481675));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(0.0F, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      double double2 = bigInteger0.doubleValue();
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 20922789888000L);
      long long1 = MathUtils.mulAndCheck(3020L, (-2111L));
      long long2 = MathUtils.gcd((-311L), (-2635L));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1447);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = (-412);
      int int1 = MathUtils.indicator((-412));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-412);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-412);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = 0;
      int int3 = MathUtils.sign(0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int4 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator((float) (-1));
      int int5 = MathUtils.gcd((-412), (-2355));
      long long0 = MathUtils.sign((long) (-1));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("!!d],\"kV]%");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.!!d],\"kV]%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.indicator(125);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 125;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 125;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1893.3;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 125;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 0;
      double double0 = MathUtils.round(0.0, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.valueOf("DECREASING");
      long long0 = 9218868437227405312L;
      long long1 = MathUtils.gcd((long) 0, 9218868437227405312L);
      byte byte0 = (byte) (-107);
      byte byte1 = MathUtils.indicator((byte) (-107));
      double[] doubleArray1 = new double[0];
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (int) (byte) (-1), (int) (byte) (-107));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(65, 65);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1582L);
      boolean boolean0 = MathUtils.equals((-1275.0), 3295.109, 0.0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-3551), (-3551));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 12609601;
      doubleArray0[1] = (double) 12609601;
      doubleArray0[2] = (double) (-3551);
      doubleArray0[3] = (double) (-3551);
      doubleArray0[4] = (double) 12609601;
      doubleArray0[5] = (double) 12609601;
      doubleArray0[6] = (double) 12609601;
      doubleArray0[7] = (double) 12609601;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (12,609,601 > -3,551)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.round(2300.1991352714, 903);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 903;
      doubleArray0[1] = 2300.1991352714;
      doubleArray0[2] = 2300.1991352714;
      doubleArray0[3] = 2300.1991352714;
      doubleArray0[4] = (-589.786);
      doubleArray0[5] = 2300.1991352714;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2300.1991352714;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(903, 903);
      int int1 = MathUtils.indicator(903);
      double double1 = MathUtils.binomialCoefficientLog(1782, 903);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2131));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,131
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-103L));
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 103L, (double) 0L, (double) (short)0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.sinh((-100.611));
      double double1 = MathUtils.factorialDouble((byte)1);
      byte byte1 = MathUtils.sign((byte)1);
      boolean boolean1 = MathUtils.equals((double) (-103L), (double) 103L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)94;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-523,969,167,010^-523,969,167,010)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-103L));
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 103L, (double) 0L, (double) (short)0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.sinh((-100.611));
      double double1 = MathUtils.factorialDouble((byte)1);
      byte byte1 = MathUtils.sign((byte)1);
      boolean boolean1 = MathUtils.equals((double) (-103L), (double) 103L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)94;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-523,969,167,266^-523,969,167,266)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = 1058.66;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1443;
      int int1 = MathUtils.subAndCheck(1443, 1443);
      double double0 = MathUtils.log(0.0, 0.0);
      int int2 = MathUtils.pow(0, 0);
      int int3 = (-176);
      int int4 = 0;
      int int5 = MathUtils.pow((-176), 0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1790.9897969957117), 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.16666666666745392;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-2425.915);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3545.731936;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.sinh((-74.43168433988));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0574011829049198E32);
      doubleArray0[1] = (-74.43168433988);
      doubleArray0[2] = (-74.43168433988);
      doubleArray0[3] = (-1.0574011829049198E32);
      doubleArray0[4] = (-74.43168433988);
      doubleArray0[5] = (-1.0574011829049198E32);
      doubleArray0[6] = (-74.43168433988);
      doubleArray0[7] = (-1.0574011829049198E32);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator((-1542.4846873504318));
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)0);
      int int1 = MathUtils.gcd(0, 1338);
      double double3 = MathUtils.indicator((double) (short)0);
      int int2 = MathUtils.pow((int) (short)0, 3349);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 217;
      int int1 = MathUtils.indicator(217);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = (-2938L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2938L), (-3512299194304650054L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.round(776.493606315177, (-1361));
      double double1 = MathUtils.log(776.493606315177, (-1361));
      double double2 = MathUtils.cosh(0.5);
      try { 
        MathUtils.pow((long) (-1361), (-1361));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,361^-1,361)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = 705;
      intArray0[2] = (-1068);
      intArray0[3] = (-522);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.indicator((-522));
      int int1 = MathUtils.pow((-1), 3801L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = MathUtils.round((-1396.7F), 2941);
      int int0 = MathUtils.pow(0, 0L);
      float float1 = MathUtils.indicator((-1139.0314F));
      short short0 = MathUtils.indicator((short)0);
      int int1 = MathUtils.pow((-2234), 17);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.cosh((-1795.0815510581606));
      double double1 = MathUtils.sign((double) (-1139.0314F));
      boolean boolean0 = MathUtils.equals(694.18412464, (-641.0), (int) (short)1);
      short short1 = MathUtils.indicator((short)0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals((-3525.0511464548), (double) (-960102400), (double) 1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      float float0 = MathUtils.round((-1635.0F), 0);
      int int0 = 322;
      try { 
        MathUtils.pow(322, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (322^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.sign(3800);
      int int1 = MathUtils.pow(26, (long) 26);
      int int2 = MathUtils.gcd(603979776, 0);
      byte byte0 = MathUtils.sign((byte)66);
      long long0 = MathUtils.sign(1232L);
      double double0 = MathUtils.log(1L, 1.2675934823758863E-8);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 603979776;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 603979776;
      doubleArray0[3] = (double) 603979776;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1L;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 603979776;
      doubleArray1[1] = (double) (byte)66;
      doubleArray1[2] = 1.2675934823758863E-8;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 3800;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = (double) 26;
      doubleArray1[8] = (double) (byte)66;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = (-1266);
      try { 
        MathUtils.pow((-1266), (-1266));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,266^-1,266)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = MathUtils.indicator(1235.3746F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3614.948214433868, 3614.948214433868, 5);
      int int0 = MathUtils.mulAndCheck(5, 5);
      float float1 = MathUtils.indicator((float) 5);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, (double) 1235.3746F, 2671);
      long long0 = MathUtils.factorial(5);
      double double0 = MathUtils.normalizeAngle((-1871.658), 120L);
      double double1 = MathUtils.factorialDouble(5);
      long long1 = MathUtils.gcd(9223372036854775807L, 9223372036854775807L);
      long long2 = MathUtils.indicator((-507L));
      double double2 = MathUtils.sinh((-970.744939897376));
      double double3 = MathUtils.normalizeAngle(120.111742375929, (-1871.658));
      boolean boolean2 = MathUtils.equals((-1656.0), 1.073741824E9);
      double double4 = MathUtils.scalb(120L, 52);
      long long3 = MathUtils.subAndCheck((-2481L), 1878L);
      double double5 = MathUtils.cosh(3144.2822875681);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.lcm(2543, 2543);
      BigInteger bigInteger0 = BigInteger.valueOf(2543);
      BigInteger bigInteger1 = BigInteger.TEN;
      short short0 = bigInteger0.shortValueExact();
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = bigInteger1.remainder(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.indicator(74.906113);
      String string0 = bigInteger0.toString(2543);
      double double2 = MathUtils.factorialDouble(2543);
      int int1 = MathUtils.pow(178, (int) (short)2543);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4139.832612767662), (-4139.832612767662), 14);
      short short0 = (short) (-760);
      short short1 = MathUtils.indicator((short) (-760));
      int int0 = MathUtils.pow(1696, 14);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-760);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.indicator(1238.0311);
      float float0 = MathUtils.round((-1960.957F), 830);
      boolean boolean0 = MathUtils.equals(0.0, 1.0, 151);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) (-1960.957F);
      doubleArray0[3] = 1238.0311;
      doubleArray0[4] = (double) 151;
      doubleArray0[5] = (double) 151;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(1238.0311, 680.7, 830);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean3 = bigInteger0.isProbablePrime(151);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 151);
      int int0 = MathUtils.lcm(0, 975);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-32);
      BigInteger bigInteger4 = new BigInteger(byteArray0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger4, bigInteger3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.scalb((short)0, (short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)0, (double) (short)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = null;
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = MathUtils.lcm((int) (short)0, (int) (short)1);
      boolean boolean2 = MathUtils.equals((double[]) null, doubleArray0);
      int int1 = MathUtils.compareTo((short)0, 537.37, 0);
      double double2 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.subAndCheck((long) (short)0, (long) (short)1);
      byte byte0 = MathUtils.sign((byte)87);
      float float0 = MathUtils.round((-1.0F), (int) (short)1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.round((-769.1716F), (int) (short)0, 750);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 750, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, Double.POSITIVE_INFINITY, 3825);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 691.682322, 3825);
      double double1 = 0.0;
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.indicator((long) 3825);
      double double3 = MathUtils.sinh(1L);
      boolean boolean2 = MathUtils.equalsIncludingNaN(691.682322, 0.0);
      double double4 = MathUtils.log((-147.155673474834), 728.4550968140883);
      int int0 = (-42);
      int int1 = MathUtils.mulAndCheck((-42), 17);
      short short0 = MathUtils.indicator((short)49);
      try { 
        MathUtils.pow((long) (-42), (long) (-714));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-42^-714)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.sign(2826L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2826L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2826L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2826L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.sign((byte)66);
      long long1 = (-92L);
      long long2 = MathUtils.gcd((-92L), 0L);
      double double1 = MathUtils.normalizeAngle(2496.58328, (-2955.48));
      double double2 = MathUtils.round((-590.7948), (-2788));
      long long3 = MathUtils.addAndCheck(0L, 92L);
      double double3 = MathUtils.log(2826.0, 4.503599627370496E15);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1292);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.1666666505023083;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      double double1 = MathUtils.factorialDouble(2726);
      int int0 = MathUtils.sign(2726);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        MathUtils.pow((-1056L), (-1056L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,056^-1,056)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.pow((-1196), 3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = 0;
      boolean boolean0 = bigInteger0.testBit(0);
      BigInteger bigInteger1 = BigInteger.ONE;
      String string0 = bigInteger0.toString();
      // Undeclared exception!
      try { 
        bigInteger1.modPow(bigInteger0, bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = (-2237.0F);
      float float1 = MathUtils.sign((-2237.0F));
      int int0 = 2006;
      int int1 = 250;
      // Undeclared exception!
      try { 
        MathUtils.round((-2237.0F), 2006, 250);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 250, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      float float0 = 3323.65F;
      float float1 = MathUtils.sign(3323.65F);
      int int0 = 284;
      int int1 = 66;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(284, 66);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 129;
      int int1 = 4281;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 129, 4281);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 3748;
      int int1 = MathUtils.pow(3748, (long) 3748);
      int int2 = 0;
      long long0 = MathUtils.factorial(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.factorialLog(3748);
      long long1 = 1513L;
      long long2 = MathUtils.subAndCheck((long) 0, 1513L);
      int int3 = (-935);
      int int4 = MathUtils.addAndCheck(0, (-935));
      int int5 = (-1951);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1951), (-935));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,951, k = -935
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, 6.283185307179586);
      int int0 = 496;
      int int1 = 32;
      double double0 = MathUtils.binomialCoefficientDouble(496, 32);
      int int2 = 2;
      long long0 = MathUtils.factorial(2);
      float float0 = MathUtils.round((float) 2, 17);
      int int3 = (-272);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-272));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -272
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.indicator((-529));
      long long0 = MathUtils.lcm((long) (-529), (long) (-1));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-623.70903);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (double) (-529);
      doubleArray0[3] = (double) (-529);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.scalb((-1446.3858348024), (-1));
      int int1 = MathUtils.hash((double) (-1));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-723.1929174012);
      doubleArray1[1] = (double) (-1074790400);
      doubleArray1[2] = (-623.70903);
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = (double) (-1074790400);
      doubleArray1[5] = 1.304E19;
      doubleArray1[6] = (double) (-1);
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 815.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign((-3124.172));
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int0 = MathUtils.subAndCheck(6695, 6695);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 109.7482, (-3.141592653589793));
      double double1 = MathUtils.binomialCoefficientDouble(6695, 210);
      int int1 = MathUtils.indicator((-3712));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.sinh((-3612.357429249));
      boolean boolean0 = MathUtils.equals((-3612.357429249), 287.5585323496, 2);
      float float0 = 1.0F;
      float float1 = MathUtils.round(1.0F, 2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3612.357429249);
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-3612.357429249);
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = 0L;
      long long1 = (-2086L);
      long long2 = MathUtils.addAndCheck(0L, (-2086L));
      int int1 = (-440);
      // Undeclared exception!
      try { 
        MathUtils.round((-3808.9082F), 0, (-440));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -440, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2007.5962903655507);
      doubleArray0[1] = 681.42342;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-2715.414899108);
      doubleArray0[4] = 0.097;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-2596L), 0L);
      long long1 = MathUtils.sign((-2596L));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-5530.339254368694), (-5530.339254368694));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5530.339254368694);
      doubleArray0[1] = (-5530.339254368694);
      doubleArray0[2] = (-5530.339254368694);
      doubleArray0[3] = (-5530.339254368694);
      doubleArray0[4] = (-5530.339254368694);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-4046), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,046, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.pow(121645100408832000L, 0);
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.lcm(0L, 1L);
      long long2 = MathUtils.lcm((long) (short)0, (-2309L));
      boolean boolean0 = MathUtils.equals(0.008333333333329196, 0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1537L), (-1537L));
      int int0 = MathUtils.sign(1);
      double double0 = MathUtils.round(0.0, 0, 1);
      int int1 = MathUtils.indicator(1279);
      long long1 = MathUtils.pow((long) 1, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1537L);
      doubleArray0[7] = (double) (-3074L);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger3);
      boolean boolean0 = bigInteger0.isProbablePrime(1);
      try { 
        MathUtils.pow(bigInteger0, (-690));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-690)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2999.11795), 0.0, 1176);
      double double0 = MathUtils.sign(7.549789948768648E-8);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 2948.6131083082);
      double double1 = MathUtils.cosh(20.0);
      double double2 = MathUtils.factorialDouble(1176);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      double double3 = MathUtils.scalb(1921.27, 2410);
      double double4 = MathUtils.factorialLog(1176);
      int int0 = MathUtils.sign(2410);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.round(783.3182F, 1176, (-2004));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,004, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-952));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-952)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.sign(4577762542105553359L);
      int int0 = MathUtils.gcd(31, 4);
      double double0 = MathUtils.normalizeAngle(4, 1.0);
      short short0 = MathUtils.indicator((short)6);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("M(pI6.7J=sVaz@h");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.M(pI6.7J=sVaz@h
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.lcm((-1023L), (-1023L));
      double double0 = MathUtils.round((double) 1023L, (-433));
      float float0 = MathUtils.indicator((float) 1023L);
      double double1 = MathUtils.normalizeAngle(1023L, (-433));
      int int0 = MathUtils.mulAndCheck((-433), (-433));
      int int1 = MathUtils.indicator(115);
      double double2 = MathUtils.scalb((-434.69899126566406), (-1081));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 187489, (double) (-1023L));
      boolean boolean1 = MathUtils.equals((-5.422436058013084E293), (double) 115);
      int int2 = MathUtils.subAndCheck(1, (-433));
      short short0 = MathUtils.sign((short)1810);
      int int3 = (-2596);
      int int4 = MathUtils.gcd((int) (short)1, (-2596));
      boolean boolean2 = MathUtils.equals(0.0, (double) 115);
      int int5 = MathUtils.gcd(1, 761);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1081), 434);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,081, k = 434
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-3287), (-3287));
      int int1 = MathUtils.pow(10804369, (long) 10804369);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.lcm((-806L), (-806L));
      try { 
        MathUtils.pow((-2637), (-499L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,637^-499)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(190);
      long long0 = MathUtils.factorial(0);
      double double1 = MathUtils.factorialLog(190);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-3841.1141);
      doubleArray0[2] = 810.4774628758636;
      doubleArray0[3] = 810.4774628758636;
      doubleArray0[4] = 810.4774628758636;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck(1L, 1L);
      int int0 = MathUtils.pow(190, 190);
      double double3 = MathUtils.round((double) 1L, 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3117.0));
      long long2 = MathUtils.pow(0L, 190);
      long long3 = MathUtils.indicator(9218868437227405312L);
      boolean boolean0 = MathUtils.equals((double) 0, 1.304E19, 190);
      long long4 = MathUtils.pow((-867L), 0);
      long long5 = MathUtils.gcd(9193070505571053912L, 1L);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 3473.8;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3473.8, 3473.8, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.round(0.097, (-167));
      long long0 = MathUtils.sign((long) (-167));
      long long1 = MathUtils.indicator((long) (-167));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.097, (-2164.5541190773), 7);
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = (-1095);
      intArray0[4] = 7;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1008.5063280538, 0.625, 0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int int0 = (-643);
      int int1 = 471;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-643), 471);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -643, k = 471
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.round(Double.NaN, 717, 717);
      int int0 = MathUtils.pow(717, 717);
      long long0 = MathUtils.lcm((long) 614423741, 1558L);
      double double1 = MathUtils.round((-1529.6), 0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1558L, (-3214), 137);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-2129);
      // Undeclared exception!
      try { 
        MathUtils.equals(3.834E-20, (-1.0), (-2129));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), (-5949));
      int int0 = MathUtils.lcm((-5949), 2046);
      long long0 = MathUtils.subAndCheck((long) 4057218, (long) 4057218);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2046, 2.2250738585072014E-308, 4057218);
      long long1 = MathUtils.gcd((long) 2046, 2432902008176640000L);
      int int1 = MathUtils.hash((double) 4057218);
      int int2 = 16;
      double double0 = MathUtils.factorialDouble(16);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2.2250738585072014E-308, 0.0);
      int int3 = MathUtils.hash((double[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3360.3419442111);
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      int int1 = 551;
      int int2 = MathUtils.indicator(551);
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
      double double2 = MathUtils.factorialDouble(1);
      long long0 = MathUtils.addAndCheck((long) 0, 362880L);
      double double3 = MathUtils.round((double) 551, 1, 1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.003;
      doubleArray0[2] = (-3602.1290964213);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.subAndCheck(1175, 652856313);
      boolean boolean1 = MathUtils.equals((double) 1175, (double) (-652855138), (-4071.3));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 634);
      long long0 = MathUtils.addAndCheck(4577762542105553359L, 774L);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1903.7), (-1903.7), 1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 2631L;
      long long1 = MathUtils.pow(2631L, 2631L);
      long long2 = MathUtils.addAndCheck(2631L, 5212009332240293559L);
      double double0 = MathUtils.sign((-957.00721));
      double double1 = MathUtils.log(5212009332240293559L, 279.68794487446013);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 1514;
      double double0 = MathUtils.scalb((-2642.1448), 1514);
      int int1 = MathUtils.indicator(1514);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double double1 = MathUtils.indicator((double) 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1514;
      doubleArray0[1] = (double) 1514;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (-3193.4260647);
      doubleArray0[4] = (-4.6982803772852E-158);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short2 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short)0, (short)1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)240);
      int int0 = MathUtils.hash((double) (short)1);
      int int1 = MathUtils.pow(1072693248, 7);
      double double0 = MathUtils.sign((-474.49104));
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 2033.623681533788);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 7;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4577762542105553354L, 774L);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = (-684.587151813036);
      double double1 = MathUtils.cosh((-684.587151813036));
      int int0 = MathUtils.compareTo(1.0265791007930555E297, (-684.587151813036), 1.0265791007930555E297);
      double double2 = MathUtils.log(672.476734723926, 194.77);
      int int1 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.gcd(0L, (-463L));
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.max((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.sinh(42.0);
      int int0 = MathUtils.addAndCheck(858, 858);
      long long0 = MathUtils.gcd((long) 1716, 323L);
      short short0 = MathUtils.sign((short)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = bigInteger0.toString();
      String string1 = bigInteger0.toString();
      BigInteger bigInteger1 = bigInteger0.setBit(1716);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.lcm((long) (short)0, 1L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-618);
      int int1 = MathUtils.gcd((-2015), (-618));
      float float0 = MathUtils.indicator(278.5F);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2015);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2521.78707);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-325.787541);
      doubleArray0[3] = (-2324.923719246897);
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(0, 462);
      byte byte0 = MathUtils.sign((byte) (-118));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(0.0);
      long long0 = MathUtils.mulAndCheck(479001600L, 0L);
      short short0 = MathUtils.sign((short) (byte) (-1));
      long long1 = MathUtils.pow(0L, 0);
      double double1 = MathUtils.indicator(2.7553817452272217E-6);
      int int2 = MathUtils.indicator(0);
      double double2 = MathUtils.factorialLog(2344);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short short0 = MathUtils.indicator((short)576);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)576;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)576;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.pow((-2047), 12);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 276799489;
      doubleArray0[1] = (double) (-2047);
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) 12;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.round((-63.290081), (-2832));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1389.0);
      long long0 = MathUtils.gcd(2248L, 0L);
      float float0 = MathUtils.round((float) 0L, 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2248L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1.0F;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-952.2791873);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(19, 19);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("wc\"sdb6qo *+<TbH");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.wc\"sdb6qo *+<TbH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.sign(2579.111710936264);
      int int0 = 1611;
      long long0 = MathUtils.pow(1917L, 1611);
      int int1 = MathUtils.pow(1611, 1611);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(8557922473763810181L, (-814L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.indicator((-2215));
      float float0 = MathUtils.round((float) (-1), 67);
      long long0 = MathUtils.binomialCoefficient(67, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2215);
      doubleArray0[2] = (double) (-2215);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 67;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-1934);
      int int1 = MathUtils.mulAndCheck(0, (-1934));
      double double0 = MathUtils.cosh(0);
      long long0 = MathUtils.subAndCheck(900L, 917L);
      int int2 = MathUtils.compareTo(0, 0, 917L);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.mulAndCheck(0L, 900L);
      double double2 = MathUtils.scalb(335.41, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-1934), (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.compareTo(2.2250738585072014E-308, 2.2250738585072014E-308, 2.2250738585072014E-308);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.2250738585072014E-308, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1738.959634340025);
      doubleArray0[2] = 2664.39;
      doubleArray0[3] = 2442.0251;
      doubleArray0[4] = 239.99068516;
      doubleArray0[5] = 1835.55;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1,738.96)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.3333333333332802;
      doubleArray0[1] = (-1152.64550771);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1959);
      intArray0[1] = 1023;
      intArray0[2] = 0;
      intArray0[3] = 61;
      intArray0[4] = 1412;
      intArray0[5] = 2953;
      intArray0[6] = 1412;
      intArray0[7] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.indicator(4323.29F);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck((long) (-1959), (long) (-1959));
      double double1 = MathUtils.sinh(61);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(61, 61);
      long long0 = MathUtils.indicator(2432902008176640000L);
      float float0 = MathUtils.indicator((float) 1L);
      byte byte0 = (byte)57;
      byte byte1 = MathUtils.indicator((byte)57);
      long long1 = MathUtils.gcd(5236L, 2432902008176640000L);
      float float1 = MathUtils.sign(947.259F);
      double double1 = MathUtils.log(3.834E-20, 5236L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1956);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 21;
      intArray0[4] = (-400);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 31);
      double double1 = MathUtils.sinh(31);
      int int0 = MathUtils.pow(2127, 1924L);
      byte byte0 = MathUtils.sign((byte)31);
      double double2 = MathUtils.normalizeAngle(0.0, 2.4384203044354907E-8);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.cosh(0.0);
      long long1 = MathUtils.subAndCheck(1L, (-1248L));
      long long2 = MathUtils.binomialCoefficient(0, 0);
      int int0 = MathUtils.gcd(0, 2532);
      double double1 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(3564.783, (-170.0251894167));
      long long0 = MathUtils.sign(4208363204685324176L);
      int[] intArray0 = new int[5];
      intArray0[0] = (-713);
      intArray0[1] = (-621);
      intArray0[2] = (-1607);
      intArray0[3] = (-1285);
      intArray0[4] = 145;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.cosh(3.141592653589793);
      long long1 = MathUtils.pow(0L, 0);
      int int2 = MathUtils.lcm(145, (-1607));
      double double1 = MathUtils.factorialDouble(145);
      double double2 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      int int1 = 13;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 13);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 13
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-506);
      int int1 = MathUtils.gcd((-506), 708);
      float float0 = MathUtils.indicator((float) 2);
      double double0 = MathUtils.factorialDouble(2);
      int int2 = 229;
      int int3 = MathUtils.lcm(708, 229);
      short short0 = (short) (-4598);
      short short1 = MathUtils.indicator((short) (-4598));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) (-506);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 229;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 162132;
      doubleArray0[7] = (double) (short) (-1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.indicator((-1807.28667940019));
      int int0 = 82;
      double double1 = MathUtils.round((-1.0), 82);
      long long0 = 157L;
      long long1 = MathUtils.gcd(157L, (-1919L));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2065));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,065
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(148, (-4568));
      float float0 = MathUtils.round(0.0F, (-4568));
      short short0 = MathUtils.sign((short)1);
      long long0 = MathUtils.pow(0L, (long) (short)1);
      double double0 = MathUtils.sinh((-676064));
      int int1 = MathUtils.sign((-1411));
      int int2 = 10;
      int int3 = MathUtils.pow(10, (long) (short)1);
      long long1 = MathUtils.pow(39916800L, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4568);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-4,568 >= -\u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = (short) (-1810);
      short short1 = MathUtils.indicator((short) (-1810));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) (-1810), (-628.2), (-1.9841269659586505E-4));
      long long0 = MathUtils.pow((long) (short) (-1), 2033L);
      // Undeclared exception!
      try { 
        MathUtils.round(2479.0986F, (int) (short) (-1), (-713));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -713, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.sign(40320L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 40320L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck(4846L, (-3958705157555305932L));
      int int0 = MathUtils.gcd((-1288), (-1288));
      double double0 = MathUtils.cosh(1.2958646899018938E-9);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.hash((-3046.73870751557));
      int int1 = MathUtils.sign((-143076313));
      double double0 = MathUtils.indicator((-3046.73870751557));
      long long0 = MathUtils.lcm((long) (-143076313), 0L);
      int int2 = MathUtils.sign((-7159));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2920));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,920
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = (-3256.792);
      double double1 = MathUtils.normalizeAngle(0.5, (-3256.792));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2556), (-368));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,556, k = -368
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1249.451697419388;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2309.39474695;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 17.0;
      doubleArray0[6] = 2095.481;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (2 <= 2,309.395)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.030589580535888672;
      doubleArray0[4] = (-721.5944821036);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 410.81;
      doubleArray0[7] = 866.3;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 0.031)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      short short0 = MathUtils.indicator((short)1233);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-114);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.lcm((long) (-114), (long) 0);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.factorialDouble((byte)0);
      long long1 = MathUtils.pow((-2037L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (int) (byte)0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-415);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-415));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -415
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-1231);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1231));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,231
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1031.64);
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 0.625;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.3333333333332802;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = 137.408923744231;
      doubleArray0[8] = (-0.12502530217170715);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0.625 >= 0.625)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3937, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3937;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3937;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3937;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,937 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short short0 = MathUtils.sign((short)1267);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 3436);
      double double0 = MathUtils.factorialLog(1619);
      int int0 = MathUtils.mulAndCheck(20, 0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.sign(221);
      long long0 = MathUtils.mulAndCheck(0L, (long) 1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 221);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.pow(1, (long) 221);
      long long1 = MathUtils.subAndCheck(7910884519577875640L, (long) 221);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.sign(232L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.factorialLog(191);
      double double1 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd(2268, (-1826));
      double double0 = MathUtils.normalizeAngle((-4.9E-324), (-4044.90137114));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.lcm(1347, 1347);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1347, (double) 1347, 949.7972131564658);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1347, 1395, 1347);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((-2147483648L), (-166L));
      double double1 = MathUtils.round((double) (-166L), 3367);
      double double2 = MathUtils.round((double) (-166L), 3367);
      double double3 = MathUtils.sinh(3271.3);
      double double4 = MathUtils.safeNorm(doubleArray0);
      double double5 = MathUtils.log((-612.81), Double.POSITIVE_INFINITY);
      double double6 = MathUtils.sinh((-2147483648L));
      int int0 = MathUtils.pow(3367, 0L);
      long long1 = MathUtils.pow(0L, (long) 1);
      double double7 = MathUtils.log(5971.080407808, 5971.080407808);
      float float0 = MathUtils.round(0.0F, (-1), 0);
      long long2 = MathUtils.lcm((long) 0, (long) 1);
      long long3 = MathUtils.indicator((-1873L));
      long long4 = MathUtils.subAndCheck((-1350L), 362880L);
      double double8 = MathUtils.scalb((-364230L), 11);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = (-1556.0);
      double double1 = MathUtils.indicator((-1556.0));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-4647), (-4647));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -4,647
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2644L), 0L);
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-27.9283), 10.0);
      double double2 = MathUtils.cosh(0L);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (-280.11296557921);
      doubleArray1[5] = 10.0;
      double double3 = MathUtils.safeNorm(doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(449.130781, (double) 0L, 10.0);
      int int1 = MathUtils.hash(10.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 1076101120, 0.0, 1076101120);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, (-1434.277292571));
      long long0 = MathUtils.pow(0L, 2615);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byte byte0 = (byte)21;
      byteArray0[1] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = BigInteger.valueOf(1746L);
      BigInteger bigInteger2 = bigInteger0.pow(210);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)12, (-358.27116170086), (int) (byte)12);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = MathUtils.normalizeAngle(0.0, (-1.0));
      int int0 = 60;
      double double2 = MathUtils.binomialCoefficientDouble(60, 60);
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 60, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.log(0.0, 0.2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.2;
      doubleArray0[4] = 0.2;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialLog(0);
      long long0 = MathUtils.gcd((-2372L), (-2372L));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.indicator(3576L);
      byte byte0 = (byte)16;
      byte byte1 = MathUtils.sign((byte)16);
      double double0 = MathUtils.binomialCoefficientLog((byte)16, (byte)16);
      double double1 = MathUtils.factorialLog((byte)1);
      int int0 = MathUtils.compareTo(9.0, 0.0, 3974.101412451);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)16;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.pow(0, (long) (byte)1);
      long long1 = MathUtils.pow((long) 0, (long) 0);
      int int4 = MathUtils.pow(16, 0);
      String string0 = "UP! (";
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("UP! (");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.UP! (
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 798;
      double double0 = MathUtils.factorialDouble(798);
      int[] intArray0 = new int[7];
      intArray0[0] = 798;
      intArray0[1] = 798;
      int int1 = 2462;
      intArray0[2] = 2462;
      intArray0[3] = 798;
      intArray0[4] = 798;
      intArray0[5] = 798;
      intArray0[6] = 798;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 798);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
