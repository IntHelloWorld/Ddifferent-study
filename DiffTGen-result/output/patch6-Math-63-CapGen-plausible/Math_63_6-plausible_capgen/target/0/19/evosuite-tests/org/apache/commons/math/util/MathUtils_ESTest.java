/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:27:28 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = (-652.34F);
      int int0 = 66;
      float float1 = MathUtils.round((-652.34F), 66);
      long long0 = MathUtils.pow(9218868437227405312L, 9218868437227405312L);
      long long1 = MathUtils.pow((long) 66, 9218868437227405312L);
      byte byte0 = MathUtils.sign((byte)21);
      boolean boolean0 = MathUtils.equalsIncludingNaN(12.0, 8.251545029714408E-9, (-2147.04));
      double double0 = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 0.0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) Float.NaN, (-1042.078368919336), (double) (-86L));
      long long2 = 487L;
      long long3 = MathUtils.lcm(487L, 1554L);
      long long4 = MathUtils.gcd(487L, (-86L));
      try { 
        MathUtils.pow((-86L), (-167L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-86^-167)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 2772);
      int int0 = MathUtils.compareTo(0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(2115007583, 2772);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.indicator(Double.NEGATIVE_INFINITY);
      double double1 = MathUtils.factorialLog((byte)0);
      int int0 = MathUtils.mulAndCheck((-1119), (-1119));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 19.83847702253;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1119);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 1252161;
      doubleArray0[6] = (double) (-1119);
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.round(827.366, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1628.5599, Double.POSITIVE_INFINITY, 827.0);
      double double1 = MathUtils.round(1656.1379250287, 0, 0);
      double double2 = MathUtils.sinh(1628.5599);
      int int0 = MathUtils.pow(0, 159);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1656.1379250287;
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.addAndCheck(0, (-3835));
      byte byte0 = MathUtils.indicator((byte)88);
      long long0 = MathUtils.mulAndCheck((-845L), (long) 159);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(4781.361701436, (-710.12856));
      double double5 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)37);
      long long0 = MathUtils.addAndCheck((-301L), (long) (byte)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)37, (double) (-300L), (double) (byte)37);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = (int) (byte)1;
      intArray1[1] = (int) (byte)1;
      intArray1[2] = (int) (byte)37;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (-301L);
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)37;
      doubleArray0[4] = 1659.0234058801;
      doubleArray0[5] = (double) 1;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.factorial(1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.85040095144011776E17;
      doubleArray0[1] = 7.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = (-73);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(Integer.MIN_VALUE, (-73));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(7, 7);
      float float0 = MathUtils.sign(1.0F);
      int int0 = MathUtils.subAndCheck(41, 41);
      double double0 = MathUtils.sign(719.137);
      short short0 = MathUtils.indicator((short)136);
      int int1 = MathUtils.addAndCheck((int) (short)136, 1140);
      long long1 = MathUtils.subAndCheck((long) 1140, (-2326L));
      float float1 = MathUtils.round(1.0F, 1276, 0);
      long long2 = MathUtils.binomialCoefficient(1276, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1276;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 7;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(7, 7);
      float float0 = MathUtils.sign(1.0F);
      int int0 = MathUtils.subAndCheck(41, 41);
      double double0 = MathUtils.sign(0.15);
      short short0 = MathUtils.indicator((short)136);
      int int1 = MathUtils.addAndCheck((int) (short)136, 1140);
      long long1 = MathUtils.subAndCheck((long) 1140, (-2316L));
      float float1 = MathUtils.round(1.0F, 1276, 0);
      long long2 = MathUtils.binomialCoefficient(1276, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1276;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[4] = 0;
      intArray0[5] = 7;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-1.0));
      double double0 = MathUtils.round((-1.0), 7);
      double double1 = MathUtils.round((-1.0), 0);
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 7);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 7;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2306, 2306);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.gcd(2306, 0);
      int int1 = MathUtils.compareTo(2306, 2306, 1.0);
      double double0 = MathUtils.indicator((double) 2306);
      int[] intArray0 = new int[5];
      intArray0[0] = 2306;
      intArray0[1] = 0;
      intArray0[2] = 2306;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.sign(3539.686F);
      int int2 = MathUtils.addAndCheck(0, 2306);
      double double2 = MathUtils.round((-765.996462756529), (-2034), 0);
      float float1 = MathUtils.sign((float) 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.pow((-1936), 0L);
      double double0 = MathUtils.round((double) 1, 1, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1936);
      intArray0[3] = 1;
      double double2 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(0.0, 1.0, (double) 1);
      int int1 = 838;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(605, 838);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 605, k = 838
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.indicator(1853L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.19999954120254515, 0.19999954120254515);
      boolean boolean1 = MathUtils.equals((double) 1853L, 2472.4797245, 7);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2472.4797245;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 1853L;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean3 = MathUtils.equals((-396.8103), 2472.4797245);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2389);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = 0.13333332538604736;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)2389;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double1 = MathUtils.distance(doubleArray1, doubleArray1);
      double double2 = MathUtils.round(0.0, (int) (short)1, (int) (short)1);
      long long0 = MathUtils.binomialCoefficient((short)2389, (short)1);
      boolean boolean1 = MathUtils.equals((double) (short)2389, 1.0, 856);
      int int0 = MathUtils.indicator((-972));
      int int1 = MathUtils.sign((int) (short)2389);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.gcd(2720L, 0L);
      int int0 = MathUtils.pow(67, 67);
      double double0 = MathUtils.binomialCoefficientDouble(67, 67);
      boolean boolean0 = MathUtils.equals(0.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)1916);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.hash((double) (short)1916);
      float float0 = MathUtils.indicator((float) (short)1916);
      double double0 = MathUtils.cosh(0.07692307692307693);
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.log((short)1916, (byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, Double.NEGATIVE_INFINITY);
      double double2 = MathUtils.normalizeAngle((-0.33333333333333287), 1.0029600390352513);
      double double3 = MathUtils.normalizeAngle(0.0, 1.0029600390352513);
      long long0 = MathUtils.indicator(1999L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 14);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 3.834E-20, (double) (byte)1);
      long long1 = MathUtils.subAndCheck((long) (short)1, 1L);
      long long2 = MathUtils.lcm(3952090531849364496L, 24L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      long long0 = MathUtils.sign((-2059L));
      boolean boolean1 = MathUtils.equals((-2933.48), 0.0, (-2933.48));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Object object0 = new Object();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((-325), byteArray0);
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1455.4154584), (-1455.4154584), 3482);
      double double0 = MathUtils.binomialCoefficientLog(3482, (-16));
      short short0 = MathUtils.indicator((short) (-1245));
      int int0 = MathUtils.mulAndCheck((int) (short) (-1245), 0);
      double double1 = 0.0;
      double double2 = MathUtils.cosh(0.0);
      double double3 = MathUtils.log(1.0, 0.0);
      byte byte0 = MathUtils.sign((byte)16);
      BigInteger bigInteger0 = BigInteger.TEN;
      short short1 = bigInteger0.shortValueExact();
      // Undeclared exception!
      try { 
        bigInteger0.multiply((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double double0 = MathUtils.factorialLog(63);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 63;
      doubleArray0[4] = 201.00931639928152;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      long long1 = MathUtils.pow(1L, 0L);
      double double0 = MathUtils.log(1L, 0L);
      double double1 = MathUtils.normalizeAngle((-930.766705), 1L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.indicator(2517);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2517;
      doubleArray0[2] = (double) 2517;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3.940510424527919E-20);
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2517;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2517;
      doubleArray2[1] = (-3.940510424527919E-20);
      doubleArray2[2] = (-26.188111);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 2517;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      double double1 = MathUtils.distance1(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 124;
      int int1 = MathUtils.lcm(124, 124);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.indicator(6);
      double double1 = MathUtils.indicator((-2898.589798632));
      short short0 = MathUtils.indicator((short)709);
      short short1 = MathUtils.sign((short) (-1889));
      double double2 = MathUtils.sinh(1612.7151916976973);
      double double3 = MathUtils.round(458.1, 962);
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.lcm((-2873L), (-2873L));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-127);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2873L);
      boolean boolean0 = MathUtils.equals(0.0, 1613.25091007);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2147483647L, 2147483647L);
      int int0 = 63;
      int int1 = MathUtils.mulAndCheck(63, 63);
      short short0 = MathUtils.sign((short)21);
      float float0 = MathUtils.indicator(0.0F);
      long long1 = MathUtils.subAndCheck((long) (short)21, (long) (short)1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 63;
      doubleArray0[1] = (double) 63;
      doubleArray0[2] = (double) 3969;
      doubleArray0[3] = (double) 3969;
      doubleArray0[4] = (double) 3969;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not increasing (3,969 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int int0 = MathUtils.pow(17, 848L);
      boolean boolean0 = MathUtils.equals((-845.717), 0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 17;
      intArray0[1] = (-186249983);
      intArray0[2] = (-186249983);
      intArray0[3] = 17;
      intArray0[4] = (-186249983);
      intArray0[5] = 17;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.sign((-845.717));
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.round(3468.45, 63);
      double double1 = MathUtils.sign((-404.6));
      double double2 = MathUtils.indicator(3468.45);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3468.45;
      doubleArray0[1] = 3468.45;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.lcm(791L, 791L);
      int int0 = MathUtils.addAndCheck(0, 0);
      int int1 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.log(10.0, 791L);
      int int2 = MathUtils.addAndCheck(0, 2548);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1068.57464), (-1068.57464));
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean2 = bigInteger0.testBit((byte)0);
      Object object0 = new Object();
      boolean boolean3 = bigInteger0.equals(object0);
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte byte2 = bigInteger1.byteValueExact();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (int) (byte)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        bigInteger2.modPow(bigInteger1, bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.mulAndCheck(2093, 2093);
      double double1 = MathUtils.log((-634.94214185), (-1.0));
      double double2 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.sign(4380649);
      int int2 = MathUtils.gcd(385, 1);
      int int3 = MathUtils.pow(0, 281L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, (-262L));
      double double0 = MathUtils.scalb(0L, (-2292));
      boolean boolean0 = MathUtils.equals((double) 0L, 2.2250738585072014E-308, (-0.0013888888689039883));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-262L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-262L);
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 262L;
      doubleArray1[3] = (double) (-2292);
      doubleArray1[4] = (double) 262L;
      doubleArray1[5] = (double) 262L;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) (-262L);
      doubleArray1[8] = (double) 0L;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 0.0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1304.984512423953;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3261.71344);
      doubleArray0[3] = 1.304E19;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.304E19, 1.304E19, (-3261.71344));
      double double0 = MathUtils.scalb(8.251545029714408E-9, 282);
      boolean boolean2 = MathUtils.equals(1304.984512423953, 1304.984512423953, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(4294967295L, (-3958705157555305932L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.normalizeAngle((-2873.4987), 1176.64);
      long long1 = MathUtils.gcd(0L, (-2385L));
      boolean boolean0 = MathUtils.equals((-4645.3426927), 595.508801102);
      int int0 = MathUtils.sign(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1176.64;
      doubleArray0[3] = (double) 2385L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1176.64;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      double[] doubleArray0 = new double[1];
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger3 = bigInteger1.and(bigInteger0);
      byte byte1 = bigInteger1.byteValueExact();
      long long0 = MathUtils.gcd(0L, (long) (byte)0);
      long long1 = (-5034868814120038111L);
      try { 
        MathUtils.pow(bigInteger1, (-5034868814120038111L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-5,034,868,814,120,038,111)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-3151));
      int int0 = MathUtils.pow((int) (short) (-1), 697);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 697;
      doubleArray0[1] = (double) 697;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-3151);
      doubleArray0[4] = (double) (short) (-1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)62;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (97,335,614^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.indicator((-2546));
      int int1 = 4;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1, 4);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.cosh(687.1);
      long long0 = MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.cosh((-684.318819));
      boolean boolean0 = MathUtils.equals(7.849770480409623E296, (-684.318819), 0.0);
      boolean boolean1 = MathUtils.equals((-684.318819), (-684.318819), 642);
      double double1 = MathUtils.binomialCoefficientDouble(642, 642);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round((float) 642, 1945);
      boolean boolean2 = MathUtils.equals(1900.16, (-684.318819));
      int int0 = MathUtils.mulAndCheck(0, 1945);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      short short0 = MathUtils.sign((short)1274);
      int int1 = MathUtils.sign((-221));
      int int2 = MathUtils.pow(67, 18);
      int int3 = MathUtils.addAndCheck(10, 2483);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.scalb((-1362.0409012), 636);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.mulAndCheck(199, 2849);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 199;
      doubleArray0[1] = (double) 199;
      doubleArray0[2] = (double) 2849;
      doubleArray0[3] = (double) Float.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 224;
      int int1 = 1812;
      int int2 = MathUtils.pow(224, 1812);
      boolean boolean0 = MathUtils.equals(6.283185307179586, (double) 1812);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 224;
      doubleArray0[1] = (double) 224;
      doubleArray0[2] = (double) 1812;
      doubleArray0[3] = (double) 1812;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = (double) 224;
      doubleArray0[6] = 6.283185307179586;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1812;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 224;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = (-652.34F);
      int int0 = 66;
      float float1 = MathUtils.round((-652.34F), 66);
      long long0 = MathUtils.pow(9218868437227405312L, 9218868437227405312L);
      long long1 = (-86L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-86L), 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.lcm(1777L, 0L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.indicator(1.0);
      double double1 = MathUtils.binomialCoefficientDouble(63, 63);
      double double2 = MathUtils.factorialDouble(8);
      int int0 = MathUtils.lcm((-408), (-408));
      double double3 = MathUtils.sign(1250.3);
      boolean boolean0 = MathUtils.equals(1.0, 1307.4226561698, 6);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-6.032174644509064E-23), (-1027.0), (-1.0E-6));
      double double4 = MathUtils.normalizeAngle((-1.0E-6), (-1099.9681));
      double double5 = MathUtils.binomialCoefficientDouble(1030, 408);
      int int1 = MathUtils.indicator(6);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.pow(234, 1904);
      byte byte0 = MathUtils.indicator((byte) (-81));
      long long0 = MathUtils.mulAndCheck((long) (byte) (-1), (long) (byte) (-1));
      long long1 = MathUtils.mulAndCheck((long) (byte) (-1), (long) (byte) (-1));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2554.348419733214);
      doubleArray0[1] = (double) 234;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 1904;
      doubleArray0[4] = (double) 1L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2554.348419733214);
      doubleArray1[1] = (double) 234;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = (double) (byte) (-1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (234 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1368);
      intArray0[1] = 3616;
      intArray0[2] = 1023;
      intArray0[3] = 0;
      intArray0[4] = (-1542);
      intArray0[5] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((-364L), (-4219L));
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.round(17.848918712, (-1542), 0);
      int int1 = MathUtils.mulAndCheck((-2374), 0);
      long long1 = MathUtils.sign(0L);
      double double2 = MathUtils.binomialCoefficientDouble(0, (-1170));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(6.0, (double) 3616);
      long long2 = MathUtils.sign((long) 0);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2640);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 2640;
      doubleArray0[3] = (double) 2640;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 2640;
      doubleArray0[6] = (double) 2640;
      try { 
        MathUtils.normalizeArray(doubleArray0, 2640.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2, 2);
      byte byte0 = (byte)70;
      byte byte1 = MathUtils.indicator((byte)70);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1014, 143);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.pow(0, 0L);
      double double0 = (-2641.0896);
      double double1 = MathUtils.indicator((-2641.0896));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1425));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,425
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.pow(16, 16);
      long long0 = MathUtils.indicator((long) 0);
      boolean boolean0 = MathUtils.equals(2919.748516639, (-4062.8));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-502), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -502, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 231;
      intArray0[2] = 3246;
      intArray0[3] = 0;
      intArray0[4] = (-2989);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.indicator((long) 231);
      int int1 = MathUtils.gcd(10, 0);
      int int2 = MathUtils.gcd(0, 3246);
      float float0 = MathUtils.indicator((float) 231);
      boolean boolean0 = MathUtils.equals(0.0, (double) 231);
      long long1 = MathUtils.gcd((long) 0, (long) 3246);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger0.negate();
      BigInteger bigInteger5 = bigInteger0.or(bigInteger3);
      int int0 = (-2642);
      BigInteger bigInteger6 = BigInteger.valueOf(121645100408832000L);
      try { 
        MathUtils.pow(bigInteger0, (-2642));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,642)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2008.805349), (-2008.805349), (-1.0));
      int int0 = 2367;
      int int1 = MathUtils.sign(2367);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2367;
      doubleArray0[1] = (-2008.805349);
      doubleArray0[2] = (-2008.805349);
      doubleArray0[3] = (-1116.373596898074);
      doubleArray0[4] = (-2008.805349);
      doubleArray0[5] = (-2008.805349);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int2 = (-430);
      int int3 = MathUtils.sign((-430));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, 0L);
      short short0 = (short) (-3328);
      short short1 = MathUtils.sign((short) (-3328));
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0L, (double) (-1.0F), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, (-1524.5), (-657.6));
      int[] intArray0 = new int[7];
      intArray0[0] = 612;
      intArray0[1] = 1754;
      intArray0[2] = 1506;
      intArray0[3] = (-914);
      intArray0[4] = 5;
      intArray0[5] = (-876);
      intArray0[6] = 1709;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      try { 
        MathUtils.pow(74, (-1636));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (74^-1,636)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1188.6313259761985);
      doubleArray0[3] = 1.1730463525082348E-7;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3275.571739992826;
      doubleArray0[6] = 2567.431533331;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.1730463525082348E-7, 636.211606525118, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.lcm((-3633L), (-3633L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3633L;
      doubleArray0[1] = (double) (-3633L);
      doubleArray0[2] = (double) 3633L;
      doubleArray0[3] = (double) 3633L;
      doubleArray0[4] = (double) 3633L;
      doubleArray0[5] = 1024.2071074208577;
      doubleArray0[6] = (double) (-3633L);
      doubleArray0[7] = (double) (-3633L);
      doubleArray0[8] = (double) (-3633L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(0.0, 1024.2071074208577, 2993);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitLength();
      try { 
        MathUtils.pow(bigInteger0, (-3835));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-3,835)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.round(2635.6497771253, 0, 0);
      double double1 = MathUtils.log(2635.6497771253, 0);
      double double2 = MathUtils.sinh((-669.247));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1266.1250886);
      doubleArray0[1] = 2635.6497771253;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2.2348538874074982E290);
      doubleArray0[4] = (-2.2348538874074982E290);
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      int int0 = MathUtils.hash((double[]) null);
      float float0 = MathUtils.round(0.0F, 0, 0);
      int int1 = MathUtils.lcm(0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, (-22.133593), 10);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 427;
      intArray0[2] = 61;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)626);
      float float0 = MathUtils.sign((-582.4179F));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 427;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-582.4179F);
      doubleArray0[4] = (double) 427;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 427;
      doubleArray0[7] = 1027.7537;
      doubleArray0[8] = (double) 61;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2634));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,634
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger0.toByteArray();
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = bigInteger0.setBit(1530);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 219);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 219;
      doubleArray0[1] = (double) 1530;
      doubleArray0[2] = (double) 219;
      doubleArray0[3] = (double) 219;
      doubleArray0[4] = (double) 219;
      doubleArray0[5] = 0.25;
      doubleArray0[6] = (double) 219;
      doubleArray0[7] = (-911.4357);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 219.0);
      long long0 = MathUtils.addAndCheck(0L, (long) 1530);
      double double0 = MathUtils.factorialDouble(15);
      int int1 = MathUtils.indicator(219);
      long long1 = MathUtils.sign(0L);
      int int2 = MathUtils.compareTo(0.0, 987.379367537538, 219.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.indicator(388L);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 3037;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 3037);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.factorialLog(205);
      byte byte0 = (byte) (-33);
      byte byte1 = MathUtils.sign((byte) (-33));
      double double1 = MathUtils.log((-1427.55), (byte) (-1));
      double double2 = MathUtils.log(205, (-4346.458));
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.sign((-2161L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-2161L);
      doubleArray0[6] = (double) (-1L);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.round((float) (-2161L), 0);
      int int2 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      double double2 = MathUtils.distance1(doubleArray1, doubleArray1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.indicator((-1051L));
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.sign((-1986L));
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      int int2 = MathUtils.compareTo((-1L), (-1L), 0);
      try { 
        MathUtils.pow((-4035746434778044925L), (-2123));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,035,746,434,778,044,925^-2,123)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.factorialDouble(1);
      byte byte0 = MathUtils.sign((byte) (-82));
      int int1 = MathUtils.compareTo(2.2250738585072014E-308, (byte) (-1), (byte) (-82));
      int int2 = MathUtils.subAndCheck(0, (int) (byte) (-82));
      long long0 = MathUtils.addAndCheck((-649L), 2432902008176640000L);
      int int3 = MathUtils.sign(164);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1352), (-1870));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,352
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-1590.9820191572));
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      int int1 = 13;
      double double1 = MathUtils.binomialCoefficientDouble(13, 0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1822.13539817);
      doubleArray0[2] = 2.85040095144011776E17;
      doubleArray0[3] = (-2719.7911916629087);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 58.2555074;
      doubleArray0[1] = 13.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-1063);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1063));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,063
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.log((-1391.343), 1.2958646899018938E-9);
      float float0 = MathUtils.round(4399.1F, 8);
      int int0 = MathUtils.compareTo(4399.1F, 1.2958646899018938E-9, 10.0);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.log((short)0, 4399.1F);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 0;
      intArray0[2] = 8;
      intArray0[3] = (-2418);
      intArray0[4] = 1;
      intArray0[5] = (-3667);
      intArray0[6] = 1;
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 8;
      intArray1[2] = (-3667);
      intArray1[3] = 1;
      intArray1[4] = 8;
      intArray1[5] = (int) (short)0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = MathUtils.sign(2888.574F);
      boolean boolean0 = MathUtils.equals(0.0, (double) 2888.574F, 0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-781));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -781
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-2442);
      try { 
        MathUtils.pow((-2442), (long) (-2442));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,442^-2,442)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-77), (-77));
      int int1 = MathUtils.compareTo(0, (-2631.15388516), (-1551.405107111294));
      short short0 = MathUtils.sign((short)25);
      boolean boolean0 = MathUtils.equals((double) 1, (double) (short)25);
      boolean boolean1 = MathUtils.equals(1820.420056863, 0.0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 0.0, 2.2250738585072014E-308);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MockRandom mockRandom0 = new MockRandom((-77));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-564), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.pow(12, 737L);
      double double0 = MathUtils.scalb(3854.0815148, 0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double double2 = MathUtils.round((double) 0, 0, 0);
      int int1 = MathUtils.addAndCheck(208, 0);
      double[] doubleArray0 = new double[0];
      int int2 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.round(1.304E19, 208, 0);
      long long0 = MathUtils.mulAndCheck((long) 1, 0L);
      boolean boolean0 = MathUtils.equals(3854.0815148, 1.304E19, 208);
      boolean boolean1 = MathUtils.equals(1.304E19, (double) 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short short0 = MathUtils.sign((short)93);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)93;
      doubleArray0[1] = (double) (short)93;
      doubleArray0[2] = (double) (short)93;
      int int0 = MathUtils.hash(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.mulAndCheck((long) (short)1, 0L);
      try { 
        MathUtils.pow(0L, (-1838173089));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,838,173,089)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float float0 = MathUtils.round(2912.3687F, 185);
      int int0 = MathUtils.subAndCheck((-4124), 0);
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float1 = MathUtils.sign((-1.0F));
      double double2 = MathUtils.round((-4.9E-324), (-4124));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = (-2222);
      float float0 = MathUtils.round((-3943.182F), (-2222));
      double double0 = MathUtils.scalb((-3943.182F), (-2222));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("SQ>]B?");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.SQ>]B?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(4392.58010465188, (int) (byte)1);
      int int0 = MathUtils.hash(0.008336750013465571);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, (int) (byte)1);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.pow((int) (byte)0, 3424L);
      int int2 = MathUtils.addAndCheck(0, (-1205));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((byte)0, 21);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 21
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.indicator(12);
      int int1 = MathUtils.pow(297, 12);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-579333535);
      doubleArray0[1] = (double) 12;
      double double0 = MathUtils.safeNorm(doubleArray0);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short)0;
      doubleArray1[1] = (double) (-579333535);
      doubleArray1[2] = (double) 12;
      doubleArray1[3] = (double) 12;
      doubleArray1[4] = (double) (short)0;
      doubleArray1[5] = 5.793335350000001E8;
      doubleArray1[6] = (double) (-579333535);
      double double1 = MathUtils.distance1(doubleArray1, doubleArray1);
      int int2 = MathUtils.pow(12, (long) (short)0);
      float float0 = MathUtils.round((float) 12, 0);
      double double2 = MathUtils.factorialDouble(102);
      double double3 = MathUtils.scalb((-1430.3227449), 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 12, (double) 0, (-366));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.scalb(1.2246467991473532E-16, 0);
      double double1 = MathUtils.sinh(0.0);
      double double2 = MathUtils.normalizeAngle((-3682.3992058002937), (-176.516934868));
      try { 
        MathUtils.pow((-679), (-1484));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-679^-1,484)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 0;
      int int0 = 1472;
      intArray0[2] = 1472;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1758;
      int int1 = 0;
      intArray0[6] = 0;
      intArray0[7] = 1330;
      int int2 = 63;
      intArray0[8] = 63;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 4);
      short short0 = MathUtils.indicator((short)0);
      int int1 = MathUtils.sign((int) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(121645100408832000L, (-3183605296591799669L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.indicator((-2903.349407));
      long long0 = MathUtils.mulAndCheck(2648L, 2648L);
      int int0 = (-58);
      try { 
        MathUtils.pow(125, (-58));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (125^-58)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short short0 = (short)1831;
      short short1 = MathUtils.indicator((short)1831);
      float float0 = MathUtils.round((float) (short)1831, 0);
      double double0 = MathUtils.cosh(1831.0F);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-477.2842));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4.503599627370496E15;
      doubleArray0[2] = (-1109.5571095);
      doubleArray0[3] = (-1543.9122180954);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1771.3251171613;
      doubleArray0[6] = 16.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1771.3251171613);
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-686763399);
      intArray0[1] = (-686763399);
      intArray0[2] = (-686763399);
      intArray0[3] = (-686763399);
      intArray0[4] = (-686763399);
      intArray0[5] = (-686763399);
      intArray0[6] = (-686763399);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.safeNorm(doubleArray1);
      int int2 = MathUtils.gcd((-686763399), (-686763399));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1286.02954732, 0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.compareTo(1401.0, 1401.0, 1401.0);
      int int1 = MathUtils.gcd((-2616), 142);
      float float0 = MathUtils.indicator((float) 142);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-2616);
      intArray0[2] = 0;
      intArray0[3] = (-2616);
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.pow(53, (long) 53);
      double double0 = MathUtils.round((double) (-1690305179), 65);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 65;
      doubleArray0[1] = (double) 65;
      doubleArray0[2] = (double) 53;
      doubleArray0[3] = (-1.690305179E9);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      int int0 = MathUtils.lcm((-1769), (-1769));
      boolean boolean0 = MathUtils.equals(1.304E19, 1.304E19);
      float float0 = MathUtils.indicator((float) 1769);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1769);
      intArray0[1] = (-1769);
      intArray0[2] = 1769;
      intArray0[3] = 1769;
      double double1 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1769);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.indicator(251);
      int[] intArray0 = new int[3];
      intArray0[0] = 251;
      intArray0[1] = 251;
      intArray0[2] = 1;
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 251;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        MathUtils.pow((-9223372036854775808L), (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.sinh(0.6931470632553101);
      double double1 = MathUtils.log(0.0, 0.0);
      int int0 = (-581);
      double double2 = MathUtils.scalb(1.304E19, (-581));
      int int1 = 0;
      int int2 = MathUtils.addAndCheck((-581), 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(2154.7585094505303, (double) (-581), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = MathUtils.indicator((short)95);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)95;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)95;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (95 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, Double.NaN);
      int int0 = MathUtils.subAndCheck(1193, 4363);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-13);
      BigInteger bigInteger0 = BigInteger.TEN;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = MathUtils.indicator((short)3612);
      int int0 = MathUtils.gcd((int) (short)3612, 4);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (short)1, (-312.8));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(55.0, (double) (short)1, (-1643));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.subAndCheck((-440L), 0L);
      double double1 = MathUtils.round(1.0, 0);
      long long1 = MathUtils.pow((long) 0, 160);
      double double2 = MathUtils.scalb(0.625, (-2444));
      int int0 = (-1132);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-440L), 160, (-1132));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.sign(39916800L);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      int int0 = 3584;
      double double0 = MathUtils.scalb(0L, 3584);
      double double1 = MathUtils.normalizeAngle(0.0, 1L);
      int int1 = (-2670);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2670), 3584);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,670, k = 3,584
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)8);
      long long0 = MathUtils.addAndCheck((-1528L), (-1528L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)8, (-616.458));
      long long1 = MathUtils.subAndCheck((-3056L), (-1462L));
      byte byte1 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3056L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck((int) (byte)0, (int) (byte)8);
      long long2 = MathUtils.sign(0L);
      MathUtils.checkOrder(doubleArray0);
      int int1 = MathUtils.hash((-616.458));
      // Undeclared exception!
      try { 
        MathUtils.round((-3056.0), (int) (byte)1, (-8));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(6722166367014452318L, 6722166367014452318L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 6722166367014452318L, 245);
      byte byte0 = MathUtils.indicator((byte)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.hash((double) 245);
      int int1 = MathUtils.sign(135);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-3909);
      try { 
        MathUtils.pow(4503599627370495L, (-3909));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,503,599,627,370,495^-3,909)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3157.498031958611);
      doubleArray0[1] = 0.16666666666745392;
      doubleArray0[2] = (-2328.840394910154);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-177.82), (-1776.0), (-2328.840394910154));
      double double1 = MathUtils.indicator((-0.33333333333333287));
      long long0 = 267L;
      long long1 = MathUtils.addAndCheck(267L, 267L);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 534L);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.hash(892.243606961706);
      double double0 = (-785.4685093986619);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-785.4685093986619), (double) (-1463874267));
      try { 
        MathUtils.pow((long) (-1463874267), (long) (-1463874267));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,463,874,267^-1,463,874,267)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-833);
      intArray0[1] = 0;
      intArray0[2] = (-1821);
      intArray0[3] = 1226;
      intArray0[4] = 3849;
      intArray0[5] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4343.269);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.625;
      doubleArray0[4] = (-7.800414592973399E-9);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.gcd((-333L), (-333L));
      int int0 = 175;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 175, 175);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 175, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 151;
      intArray0[1] = 54;
      intArray0[2] = (-317);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.sign(2140L);
      double double0 = MathUtils.sinh(676.4685);
      float float0 = MathUtils.sign((-2945.448F));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0584876818675352E293;
      doubleArray0[1] = 676.4685;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.pow(2140L, 1946);
      int int0 = MathUtils.pow(1946, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.lcm((-366L), 2140L);
      int int1 = MathUtils.sign(1);
      int int2 = MathUtils.subAndCheck(1946, 16);
      int int3 = MathUtils.compareTo(0.5, 0.5000000000042687, 16);
      boolean boolean0 = MathUtils.equals(1.125, (double) 1L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1946;
      intArray0[1] = 1930;
      int int4 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = MathUtils.compareTo(1535.605999, 0.0, 1535.605999);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1535.605999;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1535.605999;
      doubleArray0[5] = (-160.2865);
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,535.606)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2076.2405759332632);
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-62));
      long long0 = MathUtils.sign(3952090531849364496L);
      int int0 = MathUtils.compareTo(1L, 1L, 1.304E19);
      long long1 = MathUtils.pow(0L, 0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.sinh((-3123.81710569285));
      double double1 = MathUtils.sign(0.0);
      long long0 = MathUtils.gcd(37L, 37L);
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 1;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-3822.93295);
      doubleArray0[6] = (-3123.81710569285);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2596.314;
      doubleArray0[1] = 1223.845311616;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.mulAndCheck(1307674368000L, (-51425L));
      int int0 = 52;
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-51425L), 52, 52);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 52, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2700.6139897214225);
      doubleArray0[1] = (-1287.3355140389388);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,700.614 <= -1,287.336)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.sign(31);
      int[] intArray0 = new int[1];
      intArray0[0] = 31;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 31;
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (31 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.gcd((-1038L), (-1038L));
      double double0 = MathUtils.factorialDouble(1342);
      int int0 = MathUtils.pow(789, 1038L);
      int int1 = MathUtils.sign(1342);
      boolean boolean0 = MathUtils.equals((double) 1038L, (double) 1342, 1);
      int int2 = MathUtils.pow(2068787529, (long) 789);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1342;
      doubleArray0[1] = (double) 789;
      doubleArray0[2] = (double) 1038L;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 789;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)17);
      long long0 = MathUtils.pow(2391L, 362880L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 362880L;
      doubleArray0[2] = 1.125;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2581.34;
      doubleArray0[1] = 0.3;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[3];
      intArray0[0] = 1098;
      intArray0[1] = 424;
      intArray0[2] = 219;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1428), (-1428));
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 5);
      float float0 = MathUtils.round(0.0F, 5, 5);
      double double0 = MathUtils.sign((double) 5);
      float float1 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)15);
      byte byte1 = MathUtils.sign((byte)1);
      int int0 = MathUtils.pow(1526, 230);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = MathUtils.subAndCheck(3, 3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.sign((-2374));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      long long0 = MathUtils.gcd(1888L, 677L);
      long long1 = (-4035746434778044925L);
      long long2 = MathUtils.lcm((-4035746434778044925L), 1L);
      double double0 = 0.0;
      double double1 = MathUtils.log(677L, 0.0);
      long long3 = MathUtils.mulAndCheck(125L, 1L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-802L), 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-802L);
      doubleArray0[5] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.lcm((-1263L), (-1263L));
      int int0 = (-889);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-889));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -889
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.scalb(1185.176428896, 2888);
      int int0 = MathUtils.pow(0, 0L);
      double double1 = MathUtils.binomialCoefficientDouble(113, 0);
      double double2 = MathUtils.factorialLog(0);
      long long0 = MathUtils.gcd((-1720L), (long) 2888);
      float float0 = MathUtils.sign((-4443.5527F));
      int int1 = MathUtils.hash((-5586.81572887));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      double double0 = (-3153.8574858);
      doubleArray0[2] = (-3153.8574858);
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-997);
      try { 
        MathUtils.pow(2098L, (-997));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,098^-997)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, 2819561105158720014L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2819561105158720014L;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1862.725736);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.mulAndCheck(55, (-703));
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray1);
      boolean boolean1 = MathUtils.equals((-3146.0), (double) 55);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-402.3093519235723), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.pow(4607182418800017408L, 9223372036854775807L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9223372036854775807L;
      doubleArray0[1] = (double) 4607182418800017408L;
      doubleArray0[2] = (double) 9223372036854775807L;
      doubleArray0[3] = (double) 9223372036854775807L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(1030, 4);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.gcd(9223372036854775807L, (-1L));
      boolean boolean2 = MathUtils.equals((double) 9223372036854775807L, (double) 1030);
      // Undeclared exception!
      try { 
        MathUtils.factorial(57);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2917.87637494;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.factorialLog(794);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.lcm(565L, 565L);
      boolean boolean0 = MathUtils.equals((-527.2), (double) (short)0);
      double double1 = MathUtils.normalizeAngle(0.097, 0.0);
      long long1 = MathUtils.pow(0L, (int) (short)0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      byte byte0 = MathUtils.sign((byte)66);
      long long2 = MathUtils.gcd((-3311L), (long) (byte)1);
      double double2 = MathUtils.normalizeAngle((short)0, (short)0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3090.1757);
      doubleArray0[2] = (-2362.0);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.sign(39916800L);
      double double0 = MathUtils.scalb(515.69474, (-1070));
      double double1 = MathUtils.sign((double) 39916800L);
      double double2 = MathUtils.sinh(0.0);
      double double3 = MathUtils.cosh((-1070));
      int int1 = MathUtils.addAndCheck(518757494, (-1070));
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(515.69474, 1.0, (-3203.985743258));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(1083);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 518756424);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.indicator((-727.7775194456));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-727.7775194456);
      doubleArray0[2] = (-727.7775194456);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-1 > -727.778)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
