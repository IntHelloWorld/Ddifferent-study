/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:23:29 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int1 = MathUtils.lcm((-2376), 701);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 3.141592653589793;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)115;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1418);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 19;
      double double0 = MathUtils.factorialDouble(19);
      double double1 = MathUtils.log((-3229.2609368339), (-3229.2609368339));
      int int1 = 1931;
      long long0 = MathUtils.binomialCoefficient(1931, 1931);
      double double2 = MathUtils.sinh(Double.NaN);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = 3420.4;
      int int0 = 1994091958;
      // Undeclared exception!
      try { 
        MathUtils.equals(72.0, 3420.4, 1994091958);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.indicator(4672L);
      BigInteger bigInteger0 = BigInteger.valueOf((-4267615245585081135L));
      BigInteger bigInteger1 = bigInteger0.abs();
      int int0 = bigInteger0.signum();
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 4672L);
      int int1 = (-7004);
      int int2 = 2663;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-7004), 2663);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -7,004, k = 2,663
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.sign(3105L);
      float float0 = MathUtils.sign((float) 1L);
      boolean boolean0 = MathUtils.equals(1.1921056801463227E-8, (double) 3105L);
      int int0 = 0;
      double double0 = MathUtils.round((double) 1.0F, 0);
      long long1 = MathUtils.gcd((-2147483648L), (-2147483648L));
      float float1 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.1921056801463227E-8;
      doubleArray0[1] = (-0.09088450866185192);
      doubleArray0[2] = (double) 2147483648L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long2 = MathUtils.sign(2147483648L);
      BigInteger bigInteger0 = BigInteger.TEN;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 74;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 853);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.clearBit(853);
      BigInteger bigInteger2 = bigInteger0.pow(853);
      BigInteger bigInteger3 = bigInteger0.min(bigInteger1);
      boolean boolean1 = bigInteger0.isProbablePrime(853);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.gcd((-1148L), 0L);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, Double.POSITIVE_INFINITY, 853);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)44);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (byte)44;
      doubleArray1[2] = 3645.576;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) (byte)44;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) (byte)1;
      double double1 = MathUtils.distance1(doubleArray1, doubleArray1);
      long long0 = MathUtils.pow(40320L, (int) (byte)44);
      try { 
        MathUtils.normalizeArray(doubleArray0, 44.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-956.15731);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-613.1602676583);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 194, 1301);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 362.63704;
      doubleArray0[2] = 1.1102230246251565E-16;
      doubleArray0[3] = 0.19999999999923582;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 57.2957763671875;
      doubleArray0[6] = (-3147.248118);
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (362.637 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int[] intArray0 = new int[1];
      intArray0[0] = 67;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.subAndCheck(67, 1030);
      double double1 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4194304, 4194304);
      int int0 = MathUtils.compareTo(4194304, 1L, 1L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4194304;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 4194304;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = 3447.71231184;
      doubleArray0[6] = (double) 1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.factorial(1);
      int int1 = MathUtils.gcd(212, 66);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 1L, (-536.6937));
      boolean boolean2 = MathUtils.equals(10.0, 0.0);
      int int2 = MathUtils.gcd(0, 0);
      long long2 = MathUtils.indicator((long) 2);
      double double1 = MathUtils.binomialCoefficientLog(212, 0);
      int int3 = MathUtils.subAndCheck(2, 1);
      double double2 = MathUtils.indicator((double) 212);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.0, 1.0, (-2233));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-3183605296591799669L), 0L);
      boolean boolean0 = MathUtils.equals((double) (-3183605296591799669L), (double) 0L, 10);
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 0;
      intArray0[6] = 10;
      intArray0[7] = 10;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(264.0597842, 264.0597842, (-5577.45505));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 264.0597842;
      doubleArray0[1] = 0.1818181574344635;
      int int0 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      String string0 = bigInteger1.toString((-429881391));
      BigInteger bigInteger2 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.negate();
      float float0 = bigInteger0.floatValue();
      try { 
        MathUtils.pow(bigInteger0, (long) (-429881391));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-429,881,391)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.cosh(2.0);
      long long0 = MathUtils.mulAndCheck(2935890503282001226L, 0L);
      double double1 = MathUtils.indicator((double) 2935890503282001226L);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3684);
      intArray0[1] = (-2843);
      intArray0[2] = 235;
      intArray0[3] = 20;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.3, 10.0, 0.0);
      int int1 = MathUtils.sign(20);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.gcd((long) (-3684), 1307674368000L);
      double double2 = MathUtils.log((-3684), (-2689.69268736928));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)96);
      float float0 = MathUtils.round((-219.6F), (-2227));
      boolean boolean0 = MathUtils.equalsIncludingNaN(13.07, 0.0);
      double double0 = MathUtils.binomialCoefficientDouble(414, 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = MathUtils.round(831.0438F, 0);
      int int0 = MathUtils.addAndCheck(0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)109;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.sinh(0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int2 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int int3 = MathUtils.addAndCheck(0, 64);
      float float0 = MathUtils.round((float) 64, 364);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-26.34), 0.0);
      int int4 = MathUtils.subAndCheck(64, 419);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 364;
      intArray0[4] = (-1);
      intArray0[5] = 64;
      intArray0[6] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.factorialDouble(932);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-9218868437227405313L), 483L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.pow(417, 696L);
      float float0 = MathUtils.sign((-2656.788F));
      long long0 = MathUtils.indicator(21361414L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.round(3.141592653589793, 0);
      int int0 = MathUtils.indicator(998);
      int int1 = MathUtils.compareTo(998, 0.3333333333333333, (-670.84938));
      short short0 = MathUtils.indicator((short)18);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.3333333333333333;
      doubleArray0[1] = (-670.84938);
      doubleArray0[2] = (-670.84938);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (short)18;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) (short)18, (long) (short)18);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(902.7131486133, 902.7131486133);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals(0.0, 902.7131486133, (-994.7385186004635));
      int int0 = MathUtils.pow(34, (long) 34);
      long long0 = MathUtils.mulAndCheck((-768L), 987L);
      double double1 = MathUtils.cosh((-731.09814873));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 8);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1599.1705214498;
      doubleArray0[1] = 902.7131486133;
      doubleArray0[2] = 902.7131486133;
      doubleArray0[3] = 902.7131486133;
      doubleArray0[4] = (double) 987L;
      doubleArray0[5] = (double) 34;
      doubleArray0[6] = 902.7131486133;
      doubleArray0[7] = (double) 34;
      doubleArray0[8] = (double) 34;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (902.713 < 987)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = 0;
      long long2 = MathUtils.pow(1763L, 0);
      double double0 = MathUtils.sinh(1763L);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathUtils.normalizeArray((double[]) null, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) Float.NaN, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf(1668L);
      int int0 = 63;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 63);
      double double0 = 0.0;
      double double1 = 430.39;
      double double2 = MathUtils.normalizeAngle(0.0, 430.39);
      int int1 = MathUtils.sign(63);
      BigInteger bigInteger3 = bigInteger1.clearBit(63);
      double double3 = MathUtils.log(1589.709703621, 1.986821492305628E-8);
      double double4 = Double.NaN;
      double double5 = MathUtils.normalizeAngle(Double.NaN, 430.39);
      float float0 = MathUtils.round(0.0F, 63);
      boolean boolean0 = MathUtils.equalsIncludingNaN(427.2566008882119, 430.39, (double) 0.0F);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 6.283185307179586, 0.0);
      double double0 = MathUtils.indicator(0.030589580535888672);
      double double1 = MathUtils.log(1.0, 0.0);
      double double2 = MathUtils.cosh(0.030589580535888672);
      boolean boolean1 = MathUtils.equals(3.834E-20, (-3060.617916));
      double double3 = MathUtils.binomialCoefficientLog(0, (-528));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3060.617916);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-3060.617916);
      doubleArray0[6] = 1.0004678977021721;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double5 = MathUtils.indicator(Double.NEGATIVE_INFINITY);
      double double6 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      long long1 = MathUtils.lcm(4499201580859392L, 4499201580859392L);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.addAndCheck(1500, 0);
      float float0 = MathUtils.sign((-248.49985F));
      float float1 = MathUtils.round(Float.NaN, 11);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1030, (-140));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2136.2371848289;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-140);
      doubleArray0[3] = (double) (-140);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-140 <= -140)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(513, 5);
      float float0 = MathUtils.round(1.0F, 513);
      long long0 = MathUtils.subAndCheck(24L, 0L);
      long long1 = MathUtils.lcm((long) 5, 24L);
      byte byte0 = MathUtils.sign((byte)42);
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 2565;
      intArray0[2] = (int) (byte)42;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 24L, 16.0, 459.0644);
      long long2 = MathUtils.binomialCoefficient(63, 5);
      double double0 = MathUtils.log((-1120.06843614012), 0.0);
      double double1 = MathUtils.log(5, 24L);
      byte byte1 = MathUtils.sign((byte)1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)42;
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 205);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-373.6392);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 205;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(3);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((-841.1F), 0, 0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = (-316);
      int int1 = MathUtils.sign((-316));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, 0.6366197723675814, 0.0);
      int int2 = MathUtils.subAndCheck((-1), 54);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 54;
      doubleArray1[1] = (double) (-842.0F);
      doubleArray1[2] = (double) 3;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = null;
      try { 
        MathUtils.pow((BigInteger) null, (-1831L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,831)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, (-1L));
      float float0 = MathUtils.round((float) (-1L), 21);
      byte byte0 = MathUtils.sign((byte)96);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-1L), (int) (byte)96, 137);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 137, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = MathUtils.round(1657.5719F, 0);
      int int0 = MathUtils.compareTo(0.0, (-1768.866778), 0);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.gcd((-1444), (-2879));
      int int3 = MathUtils.gcd((-1444), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1444;
      doubleArray0[1] = 0.003;
      doubleArray0[2] = (-1918.2946680318);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-1721.3227178952295);
      boolean boolean0 = MathUtils.equals((-1721.3227178952295), (-1721.3227178952295));
      int int0 = MathUtils.pow(1871, 1871);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1036427089), 1998);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,036,427,089, k = 1,998
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-3339));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      long long0 = MathUtils.indicator((long) (short) (-1));
      byte byte0 = MathUtils.sign((byte)0);
      short short1 = MathUtils.sign((short) (-1));
      long long1 = MathUtils.subAndCheck(1325L, (-2527L));
      short short2 = MathUtils.sign((short)3929);
      long long2 = MathUtils.mulAndCheck((-1L), (-1281L));
      long long3 = MathUtils.sign((-2017L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.indicator((float) (short)3929);
      int int0 = MathUtils.sign(1557);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.lcm((-2376), 701);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 1.986821492305628E-8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.indicator(Double.NEGATIVE_INFINITY);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.mulAndCheck((-2716L), 0L);
      float float0 = MathUtils.indicator((float) 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) 0L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float1 = MathUtils.indicator((float) (-2716L));
      double double2 = MathUtils.normalizeAngle(10.0, 0.0);
      double double3 = MathUtils.normalizeAngle(397.0, (-1.0F));
      short short0 = MathUtils.sign((short)22);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.sign(463);
      double double0 = MathUtils.log(463, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 463;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 463;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 3388.918439;
      doubleArray0[8] = (double) 1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 463)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      int int2 = MathUtils.hash((double) 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-4127.0));
      byte byte0 = MathUtils.sign((byte)43);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = bigInteger0.abs();
      int int0 = bigInteger0.bitLength();
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (int) (byte)1);
      Object object0 = new Object();
      boolean boolean1 = bigInteger3.equals(object0);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger3);
      long long0 = MathUtils.binomialCoefficient(0, (-1956));
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 1.25, 3.141592653589793);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = MathUtils.subAndCheck(0, 6);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1055.918182471);
      doubleArray0[1] = (-488.91582935);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-919.561063495);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1783.724;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not increasing (0 > -919.561)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-4267615245585081135L), (-3098L));
      int int0 = MathUtils.lcm((-2987), (-2987));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-4267615245585078037L);
      doubleArray0[1] = (double) (-4267615245585078037L);
      doubleArray0[2] = (double) (-2987);
      doubleArray0[3] = (double) (-4267615245585081135L);
      doubleArray0[4] = (double) (-2987);
      doubleArray0[5] = (double) (-4267615245585081135L);
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(833.93537985065, 0.0, (double) (-4267615245585078037L));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2987;
      doubleArray1[1] = 833.93537985065;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (-2987);
      doubleArray1[4] = (double) (-3098L);
      doubleArray1[5] = 0.0;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 843.382);
      double double1 = MathUtils.sinh((-2987.0));
      double double2 = MathUtils.normalizeAngle(2987, 129.3813922149957);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.intValue();
      long long0 = 0L;
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      int int1 = 118;
      int int2 = 0;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.pow(0);
      boolean boolean0 = bigInteger0.testBit(118);
      long long1 = bigInteger0.longValue();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long2 = 3979L;
      int int3 = (-118);
      try { 
        MathUtils.pow(3979L, (-118));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,979^-118)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3100.788721), (-3100.788721));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 17);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.pow(55, (long) 55);
      byte byte0 = MathUtils.sign((byte) (-116));
      int int1 = MathUtils.pow(1600, 0);
      int int2 = MathUtils.pow(0, 1496L);
      byte byte1 = MathUtils.sign((byte) (-116));
      double double0 = MathUtils.binomialCoefficientDouble(2006722247, (byte) (-1));
      long long0 = MathUtils.gcd((long) (byte) (-116), (long) (byte) (-1));
      int int3 = MathUtils.sign((int) (byte) (-1));
      long long1 = MathUtils.gcd(125L, (-5034868814120038111L));
      byte byte2 = MathUtils.indicator((byte) (-116));
      double double1 = MathUtils.sinh(1496L);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = 0;
      intArray0[4] = 55;
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (int) (byte) (-116);
      int int4 = MathUtils.distance1(intArray0, intArray0);
      int int5 = MathUtils.distance1(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int6 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, (-3441));
      int int1 = MathUtils.gcd(0, 0);
      float float0 = MathUtils.indicator(57.0F);
      float float1 = MathUtils.round((float) 0, 746, 0);
      int int2 = MathUtils.sign((-3441));
      long long0 = MathUtils.lcm(5378L, 2317L);
      double double0 = MathUtils.scalb(0.008333333333333333, 746);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(629, (-150));
      int int0 = MathUtils.pow((-794), 871);
      double double1 = MathUtils.sign(1.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 871;
      intArray0[1] = 629;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = (-1164);
      double double2 = MathUtils.scalb(1.0, (-1164));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 7);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 7
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.log(554.87229203895, 554.87229203895);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.cosh((-1081.05));
      int int0 = MathUtils.compareTo((-789.378), (-1081.05), 0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, (-3441));
      int int1 = MathUtils.gcd(0, 0);
      float float0 = MathUtils.indicator(57.0F);
      int int2 = MathUtils.sign((-3441));
      long long0 = MathUtils.lcm(5378L, 2317L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(3810, 242);
      short short0 = MathUtils.indicator((short)2722);
      long long0 = MathUtils.binomialCoefficient(242, (-229));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-229), (-2773.441945615));
      int int0 = MathUtils.pow(204, (int) (short)1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 242;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)2722;
      doubleArray0[3] = (double) 204;
      doubleArray0[4] = (double) (short)2722;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (-2773.441945615);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short)0, 3029);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 3,029
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 4194304;
      int int1 = MathUtils.lcm(4194304, 4194304);
      int int2 = 746;
      // Undeclared exception!
      try { 
        MathUtils.factorial(746);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-6.91211102981863), (-1020.0), (-6.91211102981863));
      float float0 = MathUtils.round(1946.6615F, 0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.sign((double) 0);
      int int1 = MathUtils.compareTo(0, 1946.6615F, 0);
      int int2 = MathUtils.lcm(9, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.indicator((-0.09088450866185192));
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(9218868437227405312L, 9218868437227405312L);
      double double3 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.sign((byte)69);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long1 = bigInteger0.longValue();
      try { 
        MathUtils.pow(bigInteger0, (-3697));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (16,843,333^-3,697)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = MathUtils.round((-3175.0F), 3402);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1538);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.factorialLog(3402);
      boolean boolean0 = MathUtils.equals((double) (-3175.0F), (double) 3402);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1538));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,538
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-435.2222155), (-435.2222155));
      boolean boolean0 = MathUtils.equalsIncludingNaN(658.9596945587, 658.9596945587, (-1.0E-6));
      try { 
        MathUtils.pow((-408L), (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-408^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.pow(290, (long) 290);
      long long0 = MathUtils.lcm((long) 290, 0L);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long1 = MathUtils.sign(0L);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 290;
      intArray0[4] = 0;
      intArray0[5] = 290;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-919));
      long long0 = (-2387L);
      long long1 = MathUtils.subAndCheck((long) (-919), (-2387L));
      long long2 = 0L;
      long long3 = MathUtils.indicator(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger3, bigInteger3);
      try { 
        MathUtils.pow(bigInteger0, (-919));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-919)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-2675);
      long long0 = (-2639L);
      try { 
        MathUtils.pow((-2675), (-2639L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,675^-2,639)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.indicator((-693.82F));
      double double0 = MathUtils.scalb(0.0, (-1171));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 1.1102230246251565E-16);
      long long0 = MathUtils.lcm((-753L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1171), (-1625));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,171
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.subAndCheck((long) 0, 720L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        MathUtils.pow(0, (-2147483648L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-493);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-493));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -493
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-1538);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1538));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,538
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 720L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, 9);
      long long1 = MathUtils.indicator((-999L));
      long long2 = MathUtils.gcd(1286L, (long) 9);
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 3.141592653589793, 9);
      boolean boolean2 = MathUtils.equalsIncludingNaN(3.141592653589793, (double) (-999L));
      long long3 = MathUtils.addAndCheck(0L, 720L);
      double double0 = MathUtils.binomialCoefficientLog(9, 9);
      // Undeclared exception!
      try { 
        MathUtils.round((-714.914F), 9, 9);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 9, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short)586);
      double double1 = MathUtils.scalb((short)1, 0);
      float float0 = MathUtils.indicator((float) (short)1);
      long long0 = MathUtils.sign((long) 0);
      long long1 = MathUtils.pow(3700L, (int) (short)1);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 1.0);
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-334));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -334
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.indicator(138L);
      int int0 = MathUtils.pow(0, 1L);
      int int1 = MathUtils.lcm((-707), 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int2 = bigInteger1.bitLength();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = MathUtils.pow(bigInteger3, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1494;
      // Undeclared exception!
      try { 
        MathUtils.round((-704.115947701), 1494, 1494);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1305L), (-1305L));
      long long1 = MathUtils.gcd((-1305L), (-1305L));
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-616.1442463507), 105.2881011, (-616.1442463507));
      long long0 = MathUtils.lcm((-1682L), (-1682L));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1341);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0.0F, (double) 0.0F, (double) 1.0F);
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      long long2 = 355687428096000L;
      long long3 = MathUtils.gcd(0L, 355687428096000L);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 355687428096000L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.compareTo((-3690.38064523907), (-3690.38064523907), (-3690.38064523907));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.gcd(338L, (-490L));
      double double0 = MathUtils.cosh((-490L));
      double double1 = MathUtils.round(0.0, 0, 0);
      double double2 = MathUtils.round((-720.30535649311), 89);
      byte byte0 = MathUtils.indicator((byte)57);
      long long1 = MathUtils.subAndCheck((-683L), (long) 89);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(42.0, (-3772.818), 1939.46681);
      int int0 = MathUtils.gcd(1850, 1850);
      double double0 = MathUtils.round(3552.357973259793, 1296);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1850, 1.0, (-1913));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = MathUtils.sign(3153.43F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.hash((-2963.0));
      float float0 = MathUtils.indicator(1.0F);
      // Undeclared exception!
      try { 
        MathUtils.round(2653.0327F, 3021, 3021);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,021, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.indicator((-127));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.cosh((-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-127), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -127, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.gcd(496, 496);
      float float0 = MathUtils.sign(0.0F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow(0L, 496);
      byte byte0 = MathUtils.indicator((byte)111);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-98));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-6.663542893624021E-14), Double.NaN, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, (-302932621132653753L));
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 302932621132653753L;
      doubleArray0[2] = (double) (-302932621132653753L);
      doubleArray0[3] = (double) (-302932621132653753L);
      doubleArray0[4] = (-1730.544420958332);
      doubleArray0[5] = 118.35605;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (302,932,621,132,653,760 > -302,932,621,132,653,760)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.sinh(0.3999999761581421);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 3628800L);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.pow(21L, 292);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(",JZZrpUq1U7DR(i*'G");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.,JZZrpUq1U7DR(i*'G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.scalb((-1580.977958722), (-1259));
      double double1 = MathUtils.indicator(1221.349419);
      float float0 = MathUtils.round(0.0F, (-1259));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-5.147453050206654E240);
      doubleArray0[1] = 1221.349419;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-5.147453050206654E240);
      doubleArray0[4] = (-1580.977958722);
      doubleArray0[5] = (-5.147453050206654E240);
      doubleArray0[6] = (double) 0.0F;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.factorialLog(95);
      long long0 = MathUtils.gcd((long) 95, (long) 95);
      int int0 = MathUtils.gcd(0, (-1259));
      byte byte0 = MathUtils.indicator((byte)0);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.subAndCheck((int) (byte)1, 14);
      double double0 = MathUtils.sinh((byte)0);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.hash((double[]) null);
      int int2 = (-672);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-672));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -672
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      double double0 = bigInteger0.doubleValue();
      int int0 = (-2134);
      try { 
        MathUtils.pow(bigInteger0, (-2134));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,134)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.compareTo(1226.40519793164, (-1859.40491384), 0.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) (byte)52);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-2471));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,471)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 258);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -9,223,372,036,854,775,808
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-4209L), (-4209L));
      int int0 = 357;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(357, 976);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 357, k = 976
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.gcd((-2043L), 2122L);
      long long1 = MathUtils.sign(1L);
      int int0 = MathUtils.mulAndCheck((-2371), (-2371));
      int int1 = MathUtils.subAndCheck((-2371), 5621641);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      byte byte0 = MathUtils.sign((byte) (-3));
      long long0 = MathUtils.mulAndCheck((long) (byte) (-1), (long) (byte) (-3));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
      byte byte0 = MathUtils.sign((byte)97);
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.mulAndCheck(39916800L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-539L), (-539L));
      int int0 = 7;
      int int1 = MathUtils.sign(7);
      int int2 = 0;
      int int3 = MathUtils.gcd(0, 7);
      double double0 = MathUtils.log(0, (-356.8841));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) (-539L);
      doubleArray0[2] = (-356.8841);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-539 < -356.884)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 5648769086999809661L;
      try { 
        MathUtils.pow(5648769086999809661L, (-2704L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (5,648,769,086,999,809,661^-2,704)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.log((-1195.4748150595), 1474.4069);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-210.46382);
      doubleArray0[1] = (-1195.4748150595);
      doubleArray0[2] = (-1195.4748150595);
      doubleArray0[3] = 1474.4069;
      double double1 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,195.475 < 1,474.407)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.scalb((-145.0), 11);
      int int0 = MathUtils.compareTo((-145.0), (-296960.0), (-2669.21671));
      long long0 = MathUtils.indicator((-168L));
      long long1 = MathUtils.gcd(1817L, (-1L));
      long long2 = MathUtils.mulAndCheck((-404L), 0L);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.indicator(2602L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2602L;
      doubleArray0[1] = (double) 2602L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.pow(0L, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.indicator(1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short short0 = MathUtils.indicator((short)199);
      boolean boolean0 = MathUtils.equals(1.2675934823758863E-8, (double) (short)1, (double) (short)1);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0.008333333333329196, (short)199);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)199;
      intArray0[1] = (int) (short)199;
      intArray0[2] = (int) (short)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.log(762.8, 762.8);
      double double1 = MathUtils.binomialCoefficientDouble(2, (-1014));
      int[] intArray0 = new int[2];
      intArray0[0] = (-1014);
      intArray0[1] = 2;
      int[] intArray1 = new int[7];
      intArray1[0] = (-1014);
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = (-1014);
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 2;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1014);
      doubleArray0[1] = (double) 2;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = 4513;
      int int2 = MathUtils.mulAndCheck(695, 4513);
      int int3 = MathUtils.compareTo((-1014), (-336.41600352), 0.0);
      long long0 = MathUtils.pow((long) 2, 220L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1435.4798603183, 695);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1014), 2);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,014, k = 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      float float1 = MathUtils.sign(0.0F);
      int int0 = MathUtils.hash((double) 0.0F);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      int int1 = MathUtils.indicator(1059);
      long long1 = MathUtils.subAndCheck(6227020800L, 1508L);
      long long2 = MathUtils.binomialCoefficient(10, 0);
      double double0 = MathUtils.round(0.0, 0, 0);
      long long3 = MathUtils.sign((long) 1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1059;
      intArray0[1] = 1059;
      double double1 = MathUtils.distance(intArray0, intArray0);
      float float2 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(446.9669743008532, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2034.98125425;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.compareTo(2034.98125425, 0.0, 2034.98125425);
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2.957007209750105E-8), 0.0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short short0 = MathUtils.sign((short)572);
      BigInteger bigInteger0 = BigInteger.TEN;
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.scalb(1775.687540299041, (short)572);
      double double1 = MathUtils.binomialCoefficientLog(5, 0);
      long long0 = MathUtils.sign((long) 5);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.gcd(63, 17);
      double double0 = MathUtils.scalb(0.0, 17);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.indicator(1982.4330782294878);
      int[] intArray0 = new int[1];
      intArray0[0] = (-857);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.round((-545.3658895350611), (-365), 0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 99.36850264631;
      doubleArray0[5] = (double) (byte)2;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.sign(247);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (double) 247, 1);
      byte byte0 = MathUtils.sign((byte)66);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.compareTo(12.0, 0.041666666666621166, 0.041666666666621166);
      double double0 = MathUtils.binomialCoefficientDouble(1, (-127));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.041666666666621166;
      doubleArray0[1] = 486.6;
      doubleArray0[2] = 0.041666666666621166;
      doubleArray0[3] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (486.6 >= 0.042)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1422));
      double double0 = MathUtils.cosh((short) (-1422));
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1422);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.pow(1438L, 5246L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1438L;
      doubleArray0[1] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,438 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 647.75666083888;
      double double0 = 753.0;
      doubleArray0[2] = 753.0;
      doubleArray0[3] = 486.4599873;
      doubleArray0[4] = 241.3;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 5256;
      int int1 = MathUtils.pow(5256, 5256);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1434.327104904, 241.3, 647.75666083888);
      long long0 = MathUtils.pow((long) 0, 5256);
      // Undeclared exception!
      try { 
        MathUtils.factorial(5256);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = MathUtils.log((-1106.6301775573), 3.141592653589793);
      try { 
        MathUtils.pow((-1094), (-1094));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,094^-1,094)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.sign((-2692L));
      float float0 = MathUtils.sign((float) (-2692L));
      double double0 = 16.0;
      int int0 = (-723);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 16.0, (-723));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1046.696379005754, (-666.84691677219));
      int int0 = MathUtils.pow(18, (long) 18);
      double double0 = 1710.0;
      double double1 = MathUtils.log(1710.0, 1710.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.6366197723675814, (-1893.214166629));
      float float0 = 3156.441F;
      int int1 = 1007;
      // Undeclared exception!
      try { 
        MathUtils.round(3156.441F, 1007, 368);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 368, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals((-735.0), (-735.0), (-735.0));
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.sign((long) (byte)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (byte)0, 1221.695776330375, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(12, 220);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 12, k = 220
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.pow((-794), 871);
      int[] intArray0 = new int[2];
      intArray0[0] = 871;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 7);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 7
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-1927));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.sign((-1339L));
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.gcd(0, 134);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 134;
      doubleArray0[1] = (double) (-1339L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 134;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-1L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-917.29);
      doubleArray0[2] = 1055.880394;
      doubleArray0[3] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.sign(14);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.log((-648.968579275), (-1351.2514));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 750.55801699;
      doubleArray0[3] = (-1.7168146928204135);
      doubleArray0[4] = 2323.5195;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.gcd((-799), (-799));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.1538461446762085;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 799;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((-1589L), (long) 799);
      long long1 = MathUtils.addAndCheck((long) 799, (-106L));
      int int2 = MathUtils.pow(799, 1);
      int int3 = MathUtils.hash((double) 693L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0.154)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2493.5929);
      doubleArray0[1] = 1.2958646899018938E-9;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(31);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = (byte) (-72);
      byte byte1 = MathUtils.sign((byte) (-72));
      try { 
        MathUtils.pow((int) (byte) (-1), (int) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = MathUtils.round(2232.4F, 282);
      long long0 = MathUtils.binomialCoefficient(2268, 2268);
      int int0 = MathUtils.addAndCheck(0, 2268);
      byte byte0 = MathUtils.sign((byte)10);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1146, 1146);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.pow(2031, (long) 2031);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.sign(1799.0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 0, (-279));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -279, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.log((-4922.963), 0.0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.08713622391223907;
      doubleArray0[3] = 0.13333332538604736;
      doubleArray0[4] = 1759.3;
      doubleArray0[5] = (-361.13608236286046);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.13333332538604736);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float float0 = MathUtils.sign(969.0F);
      double double0 = MathUtils.sign((-3481.288729));
      short short0 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1.0F);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      MathUtils.factorialDouble(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0952233225107193;
      doubleArray0[1] = 1450.32;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2093.6601483311;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1068.8363763979482);
      doubleArray0[6] = 0.07490822288864472;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble(159);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 0);
      float float0 = MathUtils.round((-34.82339F), 1670, 0);
      double double1 = MathUtils.factorialDouble(3069);
      double double2 = MathUtils.distance(intArray0, intArray0);
      float float1 = MathUtils.round((float) 0, (-1963), 0);
      double double3 = MathUtils.sign(1404.8747953911);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.sign((byte) (-85));
      float float2 = MathUtils.indicator(1500.3627F);
      int int1 = MathUtils.compareTo(20.65968, 2878.353106996, 0.0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3160.1);
      doubleArray0[1] = 1993.6309588;
      doubleArray0[2] = (-37.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 12.0;
      doubleArray0[5] = 622.8187;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.7029898543501842E-8;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = MathUtils.lcm(1022L, (-170L));
      long long1 = MathUtils.sign(0L);
      short short0 = MathUtils.sign((short)467);
      long long2 = MathUtils.pow(0L, 18);
      float float0 = MathUtils.round((float) 0L, (int) (short)1, 0);
      long long3 = MathUtils.gcd(0L, (long) 18);
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1022L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 18L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) 18L;
      doubleArray0[7] = 8.251545029714408E-9;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.binomialCoefficientLog(19, 0);
      double double2 = MathUtils.normalizeAngle(0.0, 0);
      boolean boolean1 = MathUtils.equals(Double.POSITIVE_INFINITY, (-1482.665), 1.0);
      int int0 = MathUtils.lcm(0, 19);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.pow((long) 0, 16L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = 2432902008176640000L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2432902008176640000L, 2432902008176640000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(0.0, (-3671.62602770897), 0.0);
      long long0 = MathUtils.factorial(1);
      double double1 = MathUtils.indicator((double) 1);
      int int1 = 108;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), 108);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 108
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 960L);
      boolean boolean0 = MathUtils.equals(822.0, (-2939.4321), 1555.0138);
      boolean boolean1 = MathUtils.equals(1555.0138, 1555.0138, (double) 0L);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0L, (-2939.4321), Double.NEGATIVE_INFINITY);
      boolean boolean3 = MathUtils.equals((-2939.4321), (-2939.4321), 45);
      int int0 = MathUtils.lcm(45, 194);
      int int1 = MathUtils.pow(0, 0);
      double double0 = MathUtils.cosh(822.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-371));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -371
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
