/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:27:30 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.lcm(2146805352, 2146805352);
      double double0 = MathUtils.indicator((double) 2146805352);
      short short0 = MathUtils.sign((short)38);
      int int1 = MathUtils.lcm((-2139), (-3072));
      double double1 = MathUtils.binomialCoefficientDouble(9, (-2189));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2189);
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (-95.0);
      doubleArray0[3] = (double) (-3072);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-3072);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) 2190336;
      doubleArray1[3] = (double) (short)38;
      doubleArray1[4] = (double) (-3072);
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3072);
      intArray0[1] = 2146805352;
      intArray0[2] = 2190336;
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.addAndCheck(2, 9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.pow(0, 0);
      int int2 = MathUtils.hash(0.0);
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = MathUtils.indicator(2521.8381F);
      int int0 = MathUtils.addAndCheck(3095, 3095);
      double double0 = MathUtils.factorialLog(6190);
      long long0 = MathUtils.pow((long) 3095, 3095);
      int int1 = 256;
      double double1 = MathUtils.binomialCoefficientDouble(6190, 256);
      long long1 = MathUtils.sign((long) 256);
      double double2 = MathUtils.factorialDouble(762);
      short short0 = (short)6539;
      short short1 = MathUtils.indicator((short)6539);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("_1WuiN&dF(vK86iI2");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection._1WuiN&dF(vK86iI2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4499201580859392L, 4499201580859392L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 4499201580859392L, (-409.354421));
      int int0 = 2146132179;
      int int1 = 489;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2146132179, 489);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(209, 153);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)1);
      double double1 = MathUtils.factorialDouble(153);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 153;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = 2.006343905096134E269;
      doubleArray0[3] = (double) 209;
      doubleArray0[4] = (double) 153;
      doubleArray0[5] = (double) 153;
      doubleArray0[6] = 0.3333333134651184;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.round((double) (byte)72, (int) (byte)72);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.pow(2976, (long) 2976);
      long long0 = MathUtils.subAndCheck(2538L, (long) 2976);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)30);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(138, 138);
      double double0 = MathUtils.indicator((-1938.52143));
      int int1 = MathUtils.sign(276);
      short short0 = MathUtils.sign((short) (-9363));
      byte byte0 = MathUtils.sign((byte) (-98));
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), 295L);
      long long1 = MathUtils.sign((long) (short) (-9363));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.indicator(1540L);
      long long1 = MathUtils.pow((-2250L), 1540L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2250L);
      doubleArray0[1] = (double) (-2250L);
      doubleArray0[2] = (double) (-2250L);
      doubleArray0[3] = (double) (-2250L);
      doubleArray0[4] = (double) (-2250L);
      doubleArray0[5] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.sinh(0.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-746.27083213803);
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 1540L;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) (-2250L);
      doubleArray2[3] = (-746.27083213803);
      doubleArray2[4] = (double) 1540L;
      double double2 = MathUtils.distance1(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-1300L), (-2644281811660520851L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.indicator(0.0);
      int int0 = MathUtils.sign((-1312));
      long long0 = MathUtils.binomialCoefficient(1437, (-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1312);
      doubleArray0[2] = (double) (-1312);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= -1,312)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-479L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-479)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.compareTo(2.0, 2.0, 2.0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double double1 = MathUtils.cosh((-393.461917278807));
      long long0 = MathUtils.pow((long) 0, (long) 0);
      int int1 = MathUtils.gcd(0, 0);
      long long1 = MathUtils.factorial(0);
      int int2 = (-776);
      int int3 = MathUtils.addAndCheck((-776), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.7784137898986616E170, 0.0, 0.097);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.097;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) (-776);
      doubleArray0[5] = (double) (-776);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = -0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0.097 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2689.846196977);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-2011.754986639529);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-\u221E < -2,011.755)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, (-1));
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 3.834E-20, 2.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.addAndCheck(362880L, 479001600L);
      long long1 = MathUtils.binomialCoefficient(2257, 2257);
      double double0 = MathUtils.cosh(Double.NEGATIVE_INFINITY);
      double double1 = 0.074;
      boolean boolean1 = MathUtils.equals(3.141592653589793, 0.074, 2257);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 2257);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,257
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 121645100408832000L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(10.0, 0.0, 10.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.11113807559013367;
      doubleArray0[5] = 10.0;
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = (short)2327;
      short short1 = MathUtils.indicator((short)2327);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-2012), byteArray0);
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.compareTo(4.455505956692757, (-3308.3995362512), (-3308.3995362512));
      double double0 = MathUtils.sign((double) 1);
      long long0 = MathUtils.subAndCheck((long) 1, (-276L));
      boolean boolean0 = MathUtils.equals(1.0, 4.455505956692757, 2991.667276);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0, 11.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1302;
      intArray0[2] = (-891);
      intArray0[3] = 66;
      intArray0[4] = 1731;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1302;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-891);
      doubleArray0[4] = (double) 1302;
      doubleArray0[5] = (double) 1731;
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 1302, 19.5572436921937, (double) (-891));
      short short0 = MathUtils.sign((short)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.sign((long) 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, 0.11111095942313305, 2499);
      double double0 = MathUtils.round((double) (short)0, 986738497);
      double double1 = MathUtils.binomialCoefficientLog(4256, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1035;
      intArray0[1] = 3527;
      intArray0[2] = 196;
      int int0 = 329;
      intArray0[3] = 329;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.indicator((-138.0F));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 196;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double1 = MathUtils.sign((double) (-1.0F));
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)1357);
      short short1 = MathUtils.sign((short)1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 18);
      short short0 = MathUtils.indicator((short)13);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 367.966361;
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) (short)13;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-51));
      int int1 = 2002;
      double double1 = MathUtils.binomialCoefficientLog(2002, (short)13);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (367.966 >= 18)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4897L);
      long long0 = MathUtils.indicator(911L);
      double double0 = MathUtils.normalizeAngle(1.1102230246251565E-16, 83.0);
      int int0 = MathUtils.pow(3834, 1L);
      int int1 = MathUtils.sign(132);
      double double1 = MathUtils.indicator(0.0);
      float float0 = MathUtils.sign((float) 132);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 132;
      doubleArray0[1] = 81.68140899333463;
      doubleArray0[2] = (double) 911L;
      doubleArray0[3] = 81.68140899333463;
      doubleArray0[4] = (double) 4897L;
      doubleArray0[5] = 0.1428571343421936;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 911L;
      doubleArray0[8] = (double) 1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (132 > 81.681)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(1155, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3999.048), 612.9454);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1155;
      doubleArray0[1] = 612.9454;
      doubleArray0[2] = 612.9454;
      doubleArray0[3] = (double) 1155;
      doubleArray0[4] = (double) 1155;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-3999.048);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.pow((-800), 0L);
      long long0 = MathUtils.gcd((long) 1, 1603L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) (-800), (-367.2617031887));
      long long1 = MathUtils.lcm((-1952L), 350L);
      double double0 = MathUtils.log((-38.2607119), 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 341600L;
      doubleArray0[3] = (double) (-800);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-800);
      doubleArray0[7] = (double) 1603L;
      doubleArray0[8] = Double.NaN;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(58, (-4265));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.factorial(20);
      double double0 = MathUtils.round((double) 20, 20);
      double double1 = 0.0;
      int int0 = MathUtils.compareTo(20.0, 0.0, 1.1102230246251565E-16);
      int int1 = MathUtils.sign(20);
      int int2 = (-1270);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1270));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,270
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.log(16.0, 16.0);
      int int0 = MathUtils.compareTo(4.455505956692757, 4.455505956692757, 1.0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int1 = MathUtils.pow(0, 1L);
      int int2 = MathUtils.pow(0, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(16.0, (-2440.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 16.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-2440.0);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 4.455505956692757;
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.factorialDouble(0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.gcd(16, 16);
      double double0 = MathUtils.sign((double) 16);
      byte byte0 = MathUtils.indicator((byte)124);
      long long0 = MathUtils.subAndCheck((-316L), (-499L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1628.0, (double) 16, (double) 16);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.log((-1775.370608172), 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1775.370608172);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1775.370608172);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1775.370608172);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-427.532645772);
      MathUtils.checkOrder(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-427.532645772), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 10.0);
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.mulAndCheck((-875L), (long) 1);
      boolean boolean1 = MathUtils.equals(10.0, 4.503599627370496E15, 1060.99);
      try { 
        MathUtils.pow(3952090531849364496L, (-1904L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,952,090,531,849,364,496^-1,904)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1.9841269659586505E-4), 0.0);
      boolean boolean0 = MathUtils.equals(9.220590270857665E-9, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long0 = MathUtils.gcd(120L, (-9223372036854775808L));
      int int0 = MathUtils.mulAndCheck((-1667), (-2456));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-9223372036854775808L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 460.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 4094152;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int1 = MathUtils.gcd((-1667), 2160);
      double double2 = MathUtils.indicator(1.625);
      long long1 = MathUtils.addAndCheck((long) 4094152, (long) 1);
      double double3 = MathUtils.scalb(0.0, 2160);
      int int2 = MathUtils.indicator((-733));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.lcm((-1772L), 0L);
      long long1 = MathUtils.addAndCheck(706L, 706L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1380.4838813761696), (double) 0L, (-0.1428571423679182));
      byte byte0 = MathUtils.indicator((byte)68);
      long long2 = MathUtils.mulAndCheck(3576L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(3.7F, (int) (byte)1, (-99));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -99, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 44);
      double double0 = MathUtils.scalb(0.0, 44);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1516.8928, 0.0, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 44;
      doubleArray0[1] = (double) 44;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((-1434L), (long) 44);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = (byte) (-109);
      byte byte1 = MathUtils.sign((byte) (-109));
      int int0 = MathUtils.subAndCheck((int) (byte) (-1), (int) (byte) (-109));
      int int1 = MathUtils.compareTo(0.14285714285714285, (-3019.9785861374353), (-1406.20945));
      double double0 = MathUtils.log(1, (byte) (-1));
      int int2 = (-623);
      int int3 = MathUtils.sign((-623));
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.cosh((-1));
      int int4 = MathUtils.hash((-2179.0));
      double double3 = MathUtils.scalb((-3019.9785861374353), 108);
      long long0 = MathUtils.gcd((long) (byte) (-1), (long) (-623));
      int int5 = MathUtils.sign((-1063188992));
      int int6 = MathUtils.compareTo((-9.80039082852741E35), (byte) (-1), 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-465), (-144));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -465, k = -144
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1806), (-1806));
      int int1 = 2778;
      int int2 = MathUtils.addAndCheck(2778, 0);
      double double0 = MathUtils.sinh(2011.47801);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3.141592653589793;
      doubleArray1[1] = (double) (-1806);
      doubleArray1[2] = 2011.47801;
      doubleArray1[3] = (double) 2778;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (\u221E <= \u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 712;
      int int1 = MathUtils.pow(712, (long) 712);
      int int2 = (-693);
      double double0 = MathUtils.binomialCoefficientDouble(712, (-693));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-693), (-693));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -693
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.sign((-94.257078492469));
      double double1 = MathUtils.log((-1.0), (-1.0));
      int int0 = MathUtils.pow(0, (long) 0);
      boolean boolean0 = MathUtils.equals(0.0, (-94.257078492469));
      long long0 = MathUtils.lcm((long) 1, 1648L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.round(176.169, 1, 0);
      float float0 = MathUtils.round(1588.0F, 19);
      int int1 = MathUtils.subAndCheck(22, 1609);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN((-707.0747037534), (double) 19, (double) 1588.0F);
      float float1 = MathUtils.round(1588.0F, (-781));
      double double4 = MathUtils.log(187.6543501484391, 1950.1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-864.0);
      doubleArray0[1] = 1.570796251296997;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1176.31805951;
      doubleArray0[4] = (-1375.3933912743);
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1.571 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.cosh((-3012.95305370542));
      int int0 = MathUtils.addAndCheck((-382), (-382));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1543.5739169781684);
      doubleArray0[1] = 55.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1971.8405150070696);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 4048.5087;
      try { 
        MathUtils.normalizeArray(doubleArray0, 4048.5087);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2642.53563, 2642.53563);
      short short0 = MathUtils.indicator((short)1883);
      double double0 = MathUtils.round((-107.6716119), (int) (short)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-107.7);
      doubleArray0[1] = (-107.7);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-107.7 >= -107.7)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.sign(2428.214);
      int int0 = (-3514);
      int int1 = (-2269);
      int int2 = MathUtils.lcm((-3514), (-2269));
      int int3 = (-1890);
      try { 
        MathUtils.pow((long) (-3514), (-1890));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,514^-1,890)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.gcd((-3183605296591799669L), (-3183605296591799669L));
      int int0 = 371;
      double double0 = MathUtils.binomialCoefficientDouble(371, 371);
      long long1 = MathUtils.indicator(3183605296591799669L);
      double double1 = MathUtils.round(Double.NaN, 371, 371);
      double double2 = MathUtils.binomialCoefficientDouble(371, 371);
      int int1 = 2018;
      int int2 = MathUtils.mulAndCheck(2018, 1133);
      double double3 = MathUtils.sign(Double.NaN);
      long long2 = MathUtils.sign((long) 2018);
      long long3 = MathUtils.sign(0L);
      int int3 = 2970;
      int int4 = MathUtils.subAndCheck(2018, 2970);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 2286394, 2018);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,018, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        MathUtils.pow(4095L, (-1038));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,095^-1,038)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-3527.0063722640057));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-24,206,049,133,199,360^-24,206,049,133,199,360)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.indicator(0L);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-25);
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-408,354,744^-408,354,744)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.indicator((-1592));
      double double0 = MathUtils.binomialCoefficientDouble(232, (-1592));
      float float0 = MathUtils.indicator(291.8F);
      long long0 = MathUtils.subAndCheck((long) (-1592), 0L);
      boolean boolean0 = MathUtils.equals((double) (-1), (double) 1.0F);
      float float1 = MathUtils.sign((float) 232);
      double double1 = MathUtils.normalizeAngle(0L, (-1592));
      int[] intArray0 = new int[2];
      intArray0[0] = 232;
      intArray0[1] = (-1);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.sign((-3958705157555305932L));
      long long2 = MathUtils.pow(3362L, 9218868437227405312L);
      short short0 = (short)141;
      short short1 = MathUtils.sign((short)141);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1080.2, 1577.8877912, (double) 232);
      int int2 = MathUtils.gcd(232, (-1689));
      // Undeclared exception!
      try { 
        MathUtils.factorial(896);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      double double0 = MathUtils.sign(0.0);
      long long1 = MathUtils.pow(0L, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((-1181L));
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      int int1 = 0;
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger3);
      int int2 = 25;
      float float1 = MathUtils.round((float) 1L, 25);
      BigInteger bigInteger5 = bigInteger1.divide(bigInteger3);
      long long2 = bigInteger0.longValue();
      int int3 = 1576;
      long long3 = MathUtils.pow(3952090531849364496L, 1576);
      int int4 = MathUtils.hash(856.8999279);
      // Undeclared exception!
      try { 
        bigInteger1.modInverse(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.hash((-944.96154255111));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-944.96154255111);
      doubleArray0[1] = (double) (-38464922);
      doubleArray0[2] = (-944.96154255111);
      doubleArray0[3] = (double) (-38464922);
      doubleArray0[4] = 5801.02664756821;
      doubleArray0[5] = (-944.96154255111);
      doubleArray0[6] = (double) (-38464922);
      doubleArray0[7] = (double) (-38464922);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.log(Double.NaN, Double.NaN);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      BigInteger bigInteger3 = bigInteger0.setBit(3660);
      int int0 = (-2592);
      try { 
        MathUtils.pow(bigInteger0, (-2592));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,592)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.cosh((-799.339));
      short short0 = MathUtils.sign((short) (-2655));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-2655);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-799.339);
      doubleArray1[2] = (-799.339);
      doubleArray1[3] = (double) (short) (-1);
      doubleArray1[4] = (-799.339);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (double) (short) (-1);
      doubleArray1[7] = (-799.339);
      doubleArray1[8] = (double) (short) (-2655);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.binomialCoefficientLog(1068, 1068);
      int int0 = MathUtils.mulAndCheck(9, (-886));
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-886);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1068;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-886);
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-642);
      int int1 = 73;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-642), 73);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -642, k = 73
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-8.0E298);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-514), (-328));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -514, k = -328
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = 2976;
      float float1 = MathUtils.round(1.0F, 2976);
      try { 
        MathUtils.pow((-2276), (long) (-2276));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,276^-2,276)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 623);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.intValueExact();
      String string0 = bigInteger0.toString(0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 13);
      byte byte0 = MathUtils.sign((byte)64);
      long long0 = MathUtils.pow((long) (byte)1, (long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.lcm((-751L), (-751L));
      long long1 = MathUtils.factorial(11);
      byte byte0 = MathUtils.sign((byte) (-124));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-751L);
      doubleArray0[1] = 1535.9402582185;
      doubleArray0[2] = (double) (byte) (-124);
      doubleArray0[3] = (double) (byte) (-1);
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short) (byte) (-124));
      long long2 = MathUtils.indicator(751L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.13333332538604736, 1.0, 0.13333332538604736);
      long long3 = MathUtils.addAndCheck(9218868437227405312L, (long) (-111867390));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.compareTo(0.0F, 0.0F, 1495.36302);
      short short0 = MathUtils.indicator((short) (-5237));
      // Undeclared exception!
      try { 
        MathUtils.round(0.016, (int) (short) (-5237), (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-1631);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1631));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,631
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.indicator((-1901));
      short short0 = MathUtils.indicator((short) (-1277));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.lcm((-1940L), (-1940L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 127.8924188296292;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 1940L);
      int int0 = 0;
      float float1 = MathUtils.round(1.0F, 0, 0);
      long long1 = MathUtils.lcm(0L, 1940L);
      short short0 = MathUtils.sign((short)0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 127.8924188296292;
      doubleArray1[1] = (double) 1.0F;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-922.7627272398922);
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, (short)0);
      byte byte0 = (byte)107;
      byte byte1 = MathUtils.indicator((byte)107);
      long long2 = MathUtils.gcd((long) 0, 2935890503282001226L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray2);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-0 >= -0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short short0 = MathUtils.indicator((short)9);
      long long0 = MathUtils.mulAndCheck((long) (short)1, (-1L));
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.pow((int) (short)9, 920L);
      long long2 = MathUtils.gcd((-433L), 2828L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2620.179908727), (double) 2828L);
      double double0 = MathUtils.sinh((-1711.19497309));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-433L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1870651841;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-83.04403);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.5;
      double double0 = (-484.59057139308);
      doubleArray0[4] = (-484.59057139308);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-484.59057139308);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, (-484.59057139308));
      short short0 = MathUtils.sign((short) (-489));
      double double2 = MathUtils.log((-1.0), 0.0);
      long long0 = MathUtils.subAndCheck((long) (short) (-489), (long) (short) (-489));
      long long1 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short) (-489), (int) (short) (-489), 2413);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,413, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1907.5478500079), 0.0);
      int int0 = 2304;
      int int1 = MathUtils.indicator(2304);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.factorial(11);
      byte byte0 = MathUtils.sign((byte) (-124));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1535.9402582185;
      doubleArray0[2] = (double) (byte) (-124);
      doubleArray0[3] = (double) (byte) (-1);
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short) (byte) (-124));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.13333332538604736, 1.0, 0.13333332538604736);
      long long1 = MathUtils.addAndCheck(9218868437227405312L, (long) 615481858);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        MathUtils.pow((-2125), (-2125));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,125^-2,125)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 369.744481);
      int int0 = MathUtils.pow((int) (byte)0, (long) (byte)0);
      float float0 = MathUtils.round(0.0F, (int) (byte)0);
      int int1 = MathUtils.indicator((int) (byte)0);
      long long0 = MathUtils.mulAndCheck((long) (byte)0, 2963L);
      double double0 = MathUtils.sign(532.65);
      long long1 = MathUtils.gcd((long) 1, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.pow(4662L, 0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(62.0, 62.0);
      double double2 = MathUtils.binomialCoefficientDouble(4484, 0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-3995);
      int int1 = MathUtils.sign((-3995));
      long long0 = (-956L);
      try { 
        MathUtils.pow((long) (-3995), (-956L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,995^-956)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-201L), (-201L));
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.sign((float) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5802.6962388068;
      doubleArray0[1] = (double) (-201L);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-402L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (5,802.696 >= -201)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = (-5034868814120038111L);
      long long1 = 278L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-5034868814120038111L), 278L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.lcm(1570L, (-2465L));
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-1.0), 0.0, (-729));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-822L));
      boolean boolean0 = MathUtils.equals((double) 0L, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-125), 134);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 134, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.lcm(29, 29);
      int int1 = MathUtils.pow(29, 29);
      float float0 = MathUtils.indicator((-785.2F));
      int int2 = MathUtils.hash(0.0);
      long long0 = MathUtils.pow((long) 29, (long) 0);
      long long1 = MathUtils.pow(1215L, (long) 29);
      int int3 = MathUtils.pow(0, 29);
      double double0 = MathUtils.log(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-426.313), (-426.313));
      int int0 = MathUtils.hash(21.0);
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 1077215232);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,077,215,232
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round(2647.9847, 177);
      int int0 = MathUtils.gcd(177, (-2083));
      boolean boolean0 = MathUtils.equals((double) (-2083), 0.036, 1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.pow(4001, 4001);
      double double0 = MathUtils.scalb(2038.9679873933, 1172);
      byte byte0 = MathUtils.sign((byte) (-90));
      int int1 = MathUtils.gcd((-1248), 3);
      float float0 = MathUtils.sign((float) 3);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(4001);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2038.9679873933;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 4001;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(5.0, 0.008333333333329196, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      float float0 = MathUtils.round((float) 1, 1);
      double double1 = MathUtils.binomialCoefficientLog(1, 0);
      float float1 = MathUtils.sign((-1.0F));
      int int2 = MathUtils.mulAndCheck(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      BigInteger bigInteger4 = bigInteger2.subtract(bigInteger0);
      String string0 = bigInteger3.toString(0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 6197L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger6 = bigInteger2.gcd(bigInteger3);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger2, 2329);
      long long0 = MathUtils.subAndCheck(195L, 2047L);
      long long1 = MathUtils.pow(759L, 2047L);
      double double2 = MathUtils.sinh(1.073741824E9);
      int int3 = (-347);
      // Undeclared exception!
      try { 
        MathUtils.round(3294198.0, 0, (-347));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.lcm(0L, 1404L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0L, 2380.9170684);
      // Undeclared exception!
      try { 
        MathUtils.factorial(211);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2983L, 2983L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2983L);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 2233);
      boolean boolean0 = MathUtils.equals(2718.895057418, 2718.895057418, (double) 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2233;
      intArray0[1] = 2233;
      intArray0[2] = 0;
      intArray0[3] = 2233;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2233;
      intArray0[7] = 0;
      intArray0[8] = 2233;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(4208363204685324176L, 422L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1061.251491358;
      doubleArray0[1] = 2067.0;
      doubleArray0[2] = (-2233.354421408969);
      doubleArray0[3] = 3357.0;
      doubleArray0[4] = 0.99;
      doubleArray0[5] = 4910.036809;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1,061.251 <= 2,067)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1669);
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.gcd(24L, 14L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      boolean boolean0 = MathUtils.equals(1794.484108973, (double) 1L, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)20);
      int int1 = 1155;
      int int2 = 49;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1155, 49);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.lcm((-2147483648L), (-2147483648L));
      short short0 = MathUtils.indicator((short)19);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-3419), (-3419));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, (long) 0);
      short short0 = MathUtils.sign((short)17);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (short)17;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) (-3419);
      doubleArray1[4] = (double) (-3419);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.indicator((-4035746434778044925L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (double) (-4035746434778044925L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 13,040,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      int int1 = MathUtils.hash((double[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)80;
      byte byte0 = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      double double0 = MathUtils.round((-1156.01), 0, 0);
      int int2 = 0;
      int int3 = MathUtils.indicator(0);
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-1157.0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 1, 19);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 19, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-200.5816);
      doubleArray0[1] = 3823.546;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = (-2.957007209750105E-8);
      doubleArray0[6] = (-5493.133538532);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.pow((-2644281811660520851L), 1105L);
      int int0 = 169;
      int int1 = MathUtils.lcm(169, 258);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 258);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.indicator((long) 0);
      double double0 = MathUtils.normalizeAngle(1L, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.binomialCoefficientLog(503, 503);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1229.83;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1824.2);
      int int0 = MathUtils.hash(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.pow(1096L, 1488L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-109.09);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1096L;
      doubleArray0[3] = (double) 1488L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck((-3282), (-1383));
      int int1 = MathUtils.gcd((-1899), 773);
      int int2 = MathUtils.mulAndCheck(0, 1485);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = (-1758.0);
      double double1 = MathUtils.sinh((-1758.0));
      int int0 = MathUtils.compareTo(0.0, (-1758.0), 0.0);
      int int1 = MathUtils.pow(67, 1289L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-906575069);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd(0, 1);
      boolean boolean1 = MathUtils.equals((double) 1289L, (double) (-906575069), 36);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 67, (double) 67, 259);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 36);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 36
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.compareTo(0.0, 0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.pow((long) 0, 1);
      double double1 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 0, 0.0);
      int int3 = MathUtils.compareTo((-438227745), 0.0, (-438227745));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-7278142539171889152L), (-7278142539171889152L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-7278142539171889152L);
      doubleArray0[2] = (double) (-7278142539171889152L);
      doubleArray0[3] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm((-2694), 107);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long1 = bigInteger0.longValueExact();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      boolean boolean0 = bigInteger0.isProbablePrime(288258);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 107);
      BigInteger bigInteger4 = bigInteger0.shiftLeft((-2694));
      BigInteger bigInteger5 = bigInteger0.add(bigInteger4);
      long long2 = MathUtils.pow((-1607L), 288258);
      short short0 = MathUtils.sign((short) (byte)1);
      double double1 = MathUtils.factorialDouble(107);
      // Undeclared exception!
      try { 
        MathUtils.round(2548.48F, 107, (-2694));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,694, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.lcm((-211), 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-211);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-211);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -211)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1535.9402582185, 1535.9402582185, 1991);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.lcm((-2125), (-2125));
      float float0 = MathUtils.sign((-196.42148F));
      float float1 = MathUtils.sign(Float.NaN);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.pow(6L, 6L);
      double double0 = MathUtils.round(0.0, 7);
      int int0 = MathUtils.pow(7, 6L);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.log(1.1102230246251565E-16, 2.0);
      int int1 = MathUtils.addAndCheck(728, 728);
      double double3 = MathUtils.round(0.0, 1030);
      float float0 = MathUtils.round((float) 1030, 1456);
      double double4 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      int int1 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.sinh(0);
      int int2 = 2;
      int int3 = 1794;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(2, 1794);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 2, k = 1,794
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.sign((-399L));
      int int0 = MathUtils.indicator((-1716));
      float float0 = MathUtils.round((float) (-1), 19, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1982));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,982
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3.141592653589793);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 0);
      int int2 = MathUtils.compareTo((-296.4498181775), 1165.840403508902, 0);
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.sign((long) 0);
      int int3 = MathUtils.hash((-110.59));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      int int4 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.sinh((-1834.841964634183));
      try { 
        MathUtils.pow((-2352L), (-723L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,352^-723)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 205);
      byte byte0 = MathUtils.indicator((byte) (-62));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, (byte) (-1), 302.2230449924296);
      boolean boolean1 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double1 = MathUtils.binomialCoefficientLog(205, Integer.MIN_VALUE);
      double double2 = MathUtils.factorialLog(59);
      byte byte1 = MathUtils.indicator((byte)125);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = MathUtils.pow((-1798L), 0);
      long long1 = MathUtils.indicator((-1798L));
      float float0 = MathUtils.sign((float) (-1L));
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      int int1 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.sign(3494L);
      int int0 = MathUtils.indicator((-1901));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1L, (-1901), (-1));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1231L), (-1934L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1975.6258), (-1106.6964783643618));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.indicator((-3152L));
      double double0 = MathUtils.sign((double) (-1L));
      int int0 = MathUtils.mulAndCheck(0, 428);
      int int1 = MathUtils.lcm((-1478), 0);
      float float0 = MathUtils.round((float) 428, 428);
      long long1 = MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 4095L);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-576);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-576), (-576));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      try { 
        MathUtils.pow(0L, (-679L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-679)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1810.0675908, 1810.0675908, (-994));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1152.506121, 1152.506121);
      long long0 = MathUtils.binomialCoefficient(4194304, 0);
      short short0 = MathUtils.indicator((short)41);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1617);
      intArray0[2] = (-471);
      intArray0[3] = 96;
      intArray0[4] = (-2153);
      intArray0[5] = (-1525);
      intArray0[6] = 1146;
      intArray0[7] = 186;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-934.66768);
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.pow((long) 3, (long) 3);
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.sign((long) 3);
      double double2 = MathUtils.indicator((double) 27L);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.lcm(1049, 24);
      double double3 = MathUtils.sinh(703.0071376);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)16);
      int int0 = MathUtils.lcm(4, 2487);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      float float0 = MathUtils.indicator(1.0F);
      int int0 = MathUtils.pow((-1924), 875);
      double double0 = MathUtils.sinh(0.0);
      boolean boolean1 = MathUtils.equals(3.834E-20, 0.0, 0.0);
      float float1 = MathUtils.round((-1198.0F), 2219);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)15);
      long long0 = MathUtils.mulAndCheck((long) (byte)15, 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = BigInteger.valueOf((byte)15);
      BigInteger bigInteger4 = bigInteger0.clearBit((byte)15);
      int int0 = bigInteger0.bitCount();
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger5 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(111, 175);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 175;
      doubleArray0[1] = (double) 175;
      doubleArray0[2] = (double) 19425;
      doubleArray0[3] = (double) 19425;
      doubleArray0[4] = (double) 111;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.indicator(175);
      float float0 = MathUtils.sign((-1590.2F));
      BigInteger bigInteger0 = BigInteger.ONE;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
      short short0 = bigInteger2.shortValueExact();
      BigInteger bigInteger3 = bigInteger2.shiftLeft(19425);
      long long0 = MathUtils.lcm((long) 1, (long) 1);
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger2);
      double double1 = MathUtils.sinh((-731.2));
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.sign(1L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 111, (double) 0L);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd(19425, 19425);
      double double3 = MathUtils.normalizeAngle(0.0, 0L);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.cosh(1.2246467991473532E-16);
      short short0 = (short)1054;
      short short1 = MathUtils.sign((short)1054);
      double double1 = MathUtils.binomialCoefficientLog((short)1, (short)1);
      try { 
        MathUtils.pow((-861L), (-861L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-861^-861)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.33333333333333287);
      doubleArray0[1] = 1681.50531755;
      doubleArray0[2] = 5182.254320246887;
      doubleArray0[3] = (-0.1666666567325592);
      doubleArray0[4] = (-1296.74113741);
      doubleArray0[5] = (-54.36);
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(1964);
      int int1 = MathUtils.gcd(1, 1964);
      double double1 = MathUtils.sign(1504.405808);
      // Undeclared exception!
      try { 
        MathUtils.round((-54.36), (-1423), (-1423));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.lcm(40, (-865));
      long long0 = MathUtils.sign((long) 6920);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, (double) (-865), 6920);
      float float0 = MathUtils.round((float) 6920, (-21), 0);
      double double0 = MathUtils.log(0.0, 2227.324410185584);
      int[] intArray0 = new int[4];
      intArray0[0] = (-21);
      intArray0[1] = 0;
      intArray0[2] = (-21);
      intArray0[3] = 40;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientLog(0, (-21));
      long long1 = MathUtils.sign(0L);
      int int1 = MathUtils.pow((-1650), 0L);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1292.987, 1292.987, 1292.987);
      double double0 = MathUtils.factorialDouble(1317);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 67;
      long long0 = MathUtils.pow((long) 1317, 67);
      int int1 = 194;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(194, 1317);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 194, k = 1,317
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2.2250738585072014E-308, (-2217.369075));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2217.964413434394);
      doubleArray0[1] = (-2217.369075);
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 2.2250738585072014E-308;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(5040L, 5040L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck((-1785), (-1785));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1475.0321538955773, 0.0);
      double double2 = MathUtils.log((-1785), 3355.1935139502);
      int int1 = MathUtils.hash(10.0);
      float float0 = MathUtils.sign((float) (-1785));
      long long1 = MathUtils.lcm(3699L, (long) 3186225);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.mulAndCheck((-1785), (-998));
      long long2 = MathUtils.addAndCheck((long) 1076101120, 350L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1652);
      int int0 = 853;
      intArray0[1] = 853;
      int int1 = 0;
      intArray0[2] = 0;
      intArray0[3] = 2439;
      int int2 = 16;
      intArray0[4] = 16;
      intArray0[5] = 178;
      intArray0[6] = 2676;
      intArray0[7] = (-1336);
      intArray0[8] = (-3436);
      int int3 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0, 0, 420);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
