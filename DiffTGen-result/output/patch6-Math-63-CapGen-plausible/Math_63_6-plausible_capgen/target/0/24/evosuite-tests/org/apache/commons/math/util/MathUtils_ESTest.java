/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:31:20 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 3430;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 3430, 3430);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,430, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 9.313225746154785E-10;
      doubleArray0[1] = (-3790.0);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = (-795.0);
      doubleArray0[5] = (-1320.155928739438);
      doubleArray0[6] = 10.0;
      doubleArray0[7] = 2221.938994026866;
      doubleArray0[8] = 0.058823529411764705;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1320.155928739438);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.058823529411764705;
      doubleArray1[3] = 0.058823529411764705;
      doubleArray1[4] = (-3790.0);
      doubleArray1[5] = (-1320.155928739438);
      doubleArray1[6] = 10.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.round(1646.9676, 7, 7);
      double double1 = MathUtils.factorialLog(7);
      int int0 = MathUtils.mulAndCheck(7, 141);
      int int1 = MathUtils.gcd(7, 987);
      long long0 = MathUtils.lcm(2580L, (long) 141);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double2 = MathUtils.indicator(2.0);
      double double3 = MathUtils.scalb((-206.79635), (-377));
      double double4 = MathUtils.sign(8.525161361065415);
      int int2 = MathUtils.sign(7);
      byte byte0 = MathUtils.indicator((byte)2);
      double double5 = MathUtils.factorialDouble((byte)2);
      int int3 = MathUtils.pow(141, 7);
      long long1 = MathUtils.subAndCheck((-136L), (long) 1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1170.0, 1456.397813543, 422);
      double double0 = MathUtils.round((-4236.9), 422);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = MathUtils.gcd(Integer.MAX_VALUE, Integer.MAX_VALUE);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = 1.0;
      int int0 = (-2142101482);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, (-2142101482));
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = (-1530.6);
      boolean boolean0 = MathUtils.equals((-1530.6), 9.313225746154785E-10, 0.2222222089767456);
      boolean boolean1 = MathUtils.equals((-2215.116128369), 9.313225746154785E-10);
      int int0 = MathUtils.lcm(63, 3721);
      double double1 = MathUtils.round(0.0, 63);
      double double2 = MathUtils.indicator(9.0);
      short short0 = (short) (-2682);
      short short1 = MathUtils.sign((short) (-2682));
      int int1 = MathUtils.addAndCheck(0, 3721);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.2222222089767456;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (short) (-1);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-2215.116128369);
      doubleArray1[5] = (double) (short) (-1);
      doubleArray1[6] = (double) 63;
      doubleArray1[7] = 0.0;
      double double3 = MathUtils.distance(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = (-1897);
      int int3 = MathUtils.mulAndCheck((-1897), (-1897));
      int int4 = (-2900);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(3598609, (-2900));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 854.834781263686;
      doubleArray0[2] = 3059.28811;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-0.09088450866185192);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(566.247535, 0);
      double double1 = MathUtils.log(566.247535, 1.0E-6);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.gcd(121645100408832000L, (long) (byte)1);
      long long1 = MathUtils.indicator(1L);
      long long2 = MathUtils.indicator(0L);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 566.247535;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.gcd(5040L, 5040L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)44;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4298L);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (byte)0, (double) (byte)0, (-621));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.sign(1.25);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 6);
      double double1 = MathUtils.sinh(1390.688745);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short) (-2715));
      long long0 = MathUtils.addAndCheck((long) (short) (-1), 121645100408832000L);
      boolean boolean0 = MathUtils.equals((-789.7378678397482), (-2233.0), (-1272.175785));
      boolean boolean1 = MathUtils.equals(130.06146994, (double) 121645100408831999L, (double) (short) (-1));
      byte byte0 = MathUtils.indicator((byte)80);
      int int0 = MathUtils.sign(175);
      double double0 = MathUtils.binomialCoefficientDouble(175, 1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (-2233.0);
      doubleArray0[2] = 130.06146994;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-1272.175785);
      doubleArray0[6] = (-2233.0);
      doubleArray0[7] = (double) (short) (-1);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = MathUtils.indicator((short)11);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-582.19436546));
      long long0 = MathUtils.gcd((long) (short)1, (-1069L));
      double double0 = MathUtils.normalizeAngle((-582.19436546), 0.0);
      int int0 = MathUtils.indicator(0);
      long long1 = MathUtils.pow((-593L), 0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-50);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-484,092,210^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.sign(2016);
      double double0 = MathUtils.factorialLog(1);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1581;
      double double0 = MathUtils.factorialDouble(1581);
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(362880L, 0L);
      int int1 = 708;
      int int2 = MathUtils.addAndCheck(1581, 708);
      int int3 = 11;
      double double1 = MathUtils.scalb(Double.POSITIVE_INFINITY, 11);
      double double2 = MathUtils.round(69.5508, 708);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2289;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 362880L;
      doubleArray0[4] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,289 >= 11)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-302932621132653753L));
      float float0 = MathUtils.indicator(269.0F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-302932621132653753L);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 2011.100161531505;
      doubleArray0[5] = (double) (-302932621132653753L);
      doubleArray0[6] = (double) 269.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = (-904.10508);
      double double1 = MathUtils.normalizeAngle((-904.10508), (-904.10508));
      boolean boolean0 = MathUtils.equals((-904.10508), (-904.10508));
      int int0 = MathUtils.mulAndCheck(597, 0);
      int int1 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = (-813);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, (-813), (-3036));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,036, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2.6033824355191673E-8);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-1739.955339569);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-3516), 16);
      long long0 = MathUtils.sign((long) (-3516));
      double double0 = MathUtils.sinh((-1L));
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short) (-2149));
      byte byte0 = MathUtils.indicator((byte)61);
      long long1 = MathUtils.gcd((-302932621132653753L), 0L);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-302932621132653753L));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.pow(5040L, 5040L);
      int int0 = MathUtils.subAndCheck(5, 5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 713;
      double double0 = MathUtils.factorialLog(713);
      double double1 = MathUtils.sign(3459.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 713;
      intArray0[1] = 713;
      intArray0[2] = 713;
      intArray0[3] = 713;
      intArray0[4] = 713;
      intArray0[5] = 713;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.indicator(0.0);
      int int0 = 742;
      double double2 = MathUtils.binomialCoefficientDouble(742, 742);
      byte byte0 = (byte) (-93);
      byte byte1 = MathUtils.indicator((byte) (-93));
      long long0 = 1983L;
      int int1 = 20;
      long long1 = MathUtils.pow(1983L, 20);
      long long2 = MathUtils.indicator((long) (byte) (-1));
      byte byte2 = MathUtils.indicator((byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte) (-93), 20);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -93, k = 20
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.sign((int) (short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)0, (double) (short)0, (double) (short)0);
      boolean boolean1 = MathUtils.equals((double) (short)0, 0.10526403784751892, 15);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.10526403784751892;
      doubleArray0[1] = 0.10526403784751892;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (short)0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 15;
      intArray0[2] = (-736);
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = (-3371L);
      long long1 = MathUtils.lcm((-3371L), (-3371L));
      long long2 = MathUtils.pow((-3371L), 0);
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short)0, 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.2250738585072014E-308, 6.283185307179586);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 2.2250738585072014E-308;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (0 < 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.compareTo((-883.0880769), (-883.0880769), (-883.0880769));
      int int1 = MathUtils.subAndCheck(2, (-901));
      double double0 = MathUtils.sign((double) 2);
      double double1 = MathUtils.binomialCoefficientDouble(3478, 3478);
      boolean boolean0 = MathUtils.equals((double) 903, 0.0, 903);
      double double2 = MathUtils.indicator((-1099.0055440218));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = (-1210);
      try { 
        MathUtils.pow(bigInteger0, (-1210));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,210)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      float float0 = MathUtils.round(0.0F, 584);
      int[] intArray0 = new int[5];
      intArray0[0] = (-46);
      intArray0[1] = 584;
      intArray0[2] = 584;
      intArray0[3] = 584;
      intArray0[4] = 584;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (double) 584, (-46));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(648, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3207.8676852, 3207.8676852, 3207.8676852);
      double double0 = MathUtils.log(0, 1L);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 648;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 648;
      intArray0[5] = 648;
      intArray0[6] = 648;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.pow((long) 648, (long) 0);
      float float0 = MathUtils.round((float) 648, 84);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-890.9805903006);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-298.51811);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2850.87;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-890.9805903006);
      doubleArray1[2] = 2850.87;
      doubleArray1[3] = (-890.9805903006);
      doubleArray1[4] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      float float0 = MathUtils.round(0.0F, 61);
      boolean boolean1 = MathUtils.equals((-2389.0), 0.0);
      int int0 = MathUtils.subAndCheck(61, 61);
      double double0 = MathUtils.binomialCoefficientDouble(466, 225);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      float float0 = MathUtils.round(1.0F, 217);
      double double0 = MathUtils.factorialLog(2893);
      int[] intArray0 = new int[5];
      intArray0[0] = (-4856);
      intArray0[1] = 217;
      intArray0[2] = 217;
      intArray0[3] = 0;
      intArray0[4] = 217;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-498));
      boolean boolean0 = MathUtils.equals(1.304E19, 2875.8834938442287);
      short short1 = MathUtils.indicator((short) (-1));
      long long0 = MathUtils.addAndCheck(9218868437227405312L, (long) (short) (-498));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9218868437227404814L;
      doubleArray0[1] = (double) (short) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, 253.017);
      float float0 = MathUtils.indicator((float) 0L);
      short short0 = MathUtils.indicator((short) (-2906));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-265), (-265));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -265
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-82));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      int[] intArray1 = new int[7];
      intArray1[0] = (-3360);
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (byte) (-82);
      intArray1[3] = (int) (byte) (-82);
      intArray1[4] = (int) (byte) (-1);
      intArray1[5] = (int) (byte) (-82);
      intArray1[6] = 2824;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-32));
      long long0 = MathUtils.sign((-3405L));
      long long1 = MathUtils.pow(1152L, 37);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-764);
      int int1 = 1;
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (-764), 1);
      try { 
        MathUtils.pow((long) 1, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = (-647.669);
      int int0 = 106;
      boolean boolean0 = MathUtils.equals((-647.669), (-647.669), 106);
      boolean boolean1 = MathUtils.equals((double) 106, 3126.676170403, 106);
      int int1 = MathUtils.lcm(106, 1310);
      long long0 = MathUtils.addAndCheck((long) 1310, (long) 69430);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 45.74;
      doubleArray0[1] = 3126.676170403;
      doubleArray0[2] = (double) 69430;
      doubleArray0[3] = (double) 106;
      doubleArray0[4] = (-647.669);
      doubleArray0[5] = (double) 69430;
      doubleArray0[6] = (double) 106;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (69,430 >= 106)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 14.0;
      doubleArray0[1] = 2404.4;
      doubleArray0[2] = 698.1615;
      doubleArray0[3] = 1967.398217010665;
      doubleArray0[4] = (-3591.1);
      doubleArray0[5] = (-2063.4540875010935);
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)2869);
      int int0 = MathUtils.gcd(0, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 295;
      int int0 = 1559;
      intArray0[1] = 1559;
      intArray0[2] = 0;
      intArray0[3] = 3872;
      int int1 = 142;
      intArray0[4] = 142;
      intArray0[5] = 3265;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = MathUtils.mulAndCheck(0, 295);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.binomialCoefficientDouble(3265, (-48));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 295, 0, (-807));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -807, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2000.16545046);
      doubleArray0[1] = (-445.86912491618);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh((-751.33909008));
      int int0 = MathUtils.hash((-751.33909008));
      double double2 = MathUtils.cosh((-2000.16545046));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.divide(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, 119.1, 3782.75804834647);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals((-2000.16545046), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.scalb((-1768.9978261614895), 0);
      byte byte0 = (byte)15;
      byte byte1 = MathUtils.sign((byte)15);
      float float0 = (-2104.2136F);
      float float1 = MathUtils.round((-2104.2136F), (int) (byte)15);
      try { 
        MathUtils.pow((int) (byte)1, (-457));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-457)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      byte byte0 = MathUtils.indicator((byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.25);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (byte)0, 0.25);
      boolean boolean2 = MathUtils.equals(0.0, 0.0, 0.0);
      float float0 = MathUtils.indicator((float) (byte)1);
      double double1 = MathUtils.factorialDouble(31);
      double double2 = MathUtils.binomialCoefficientLog((byte)0, (byte)0);
      double double3 = MathUtils.sinh(31);
      double double4 = MathUtils.cosh(8.22283865417801E33);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.9999997615814209;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (byte)0;
      doubleArray1[6] = 1.4524424832623713E13;
      double double5 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4067.632290267999);
      double double0 = (-4554.634770644879);
      doubleArray0[1] = (-4554.634770644879);
      doubleArray0[2] = (-268.8875147593986);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2021.490768693606);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-4,554.635 <= -268.888)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.pow(249L, 2305);
      long long1 = MathUtils.gcd((-5682948245635933959L), (-5682948245635933959L));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 2225;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2225;
      doubleArray0[1] = (double) 2225;
      doubleArray0[2] = (double) 2225;
      doubleArray0[3] = (double) 2225;
      doubleArray0[4] = (double) 2225;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.hash(2225.0);
      double double0 = MathUtils.cosh(1084318208);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (2,225 <= 2,225)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(100, 100);
      long long0 = MathUtils.indicator((long) 100);
      long long1 = MathUtils.mulAndCheck((-1314L), 1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1314L), (double) 1L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 200;
      doubleArray0[1] = (double) 200;
      doubleArray0[2] = (double) 1L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 749.262535;
      doubleArray0[1] = (-993.89718);
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (-2519.0);
      doubleArray0[4] = (-2589.14948);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2553.1598802783355;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 749.262535);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1608.357108), (-1608.357108), (-1608.357108));
      double double0 = MathUtils.factorialLog(608);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.gcd(16, (-1085));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1085);
      doubleArray0[1] = (double) 608;
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.log(0.0, (-1085.0));
      int int3 = MathUtils.addAndCheck((-1844408383), (-1307));
      float float0 = MathUtils.indicator((float) 608);
      int int4 = MathUtils.gcd((-1844408383), 2);
      try { 
        MathUtils.pow(16, (-943));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (16^-943)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) (short)1;
      doubleArray0[8] = (double) (short)1;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (short)1;
      doubleArray1[1] = (double) (short)1;
      doubleArray1[2] = (double) (short)1;
      doubleArray1[3] = (double) (short)1;
      doubleArray1[4] = (double) (short)1;
      doubleArray1[5] = (double) (short)1;
      doubleArray1[6] = 822.23299944;
      doubleArray1[7] = (double) (short)1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1366L), (-1366L));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.sinh(0.5);
      int[] intArray0 = new int[3];
      intArray0[0] = 708;
      intArray0[1] = 175;
      intArray0[2] = 63;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.log(Double.NEGATIVE_INFINITY, 1.1102230246251565E-16);
      int int1 = MathUtils.sign((-883));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.pow(494, 494);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.compareTo(5.650007086920087E-9, (-1764.109093840754), 5.650007086920087E-9);
      int int1 = MathUtils.sign(1426);
      int int2 = (-2990);
      try { 
        MathUtils.pow((long) 1, (-2990));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,990)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.1818181574344635, 0.1818181574344635);
      int int0 = 247;
      int int1 = MathUtils.pow(247, 0);
      long long0 = MathUtils.mulAndCheck((long) 247, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 247;
      doubleArray0[1] = (double) 247;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 247;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(1);
      double double2 = MathUtils.scalb((-2781.7340011), 247);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = Integer.MIN_VALUE;
      int int3 = MathUtils.subAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 247);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = 10.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 10.0);
      float float0 = (-1092.0F);
      float float1 = MathUtils.indicator((-1092.0F));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 804;
      int int1 = MathUtils.sign(804);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck((long) 0, 0L);
      double double0 = MathUtils.sinh(804);
      double double1 = MathUtils.sinh(0L);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = MathUtils.round((-202.79F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 87178291200L;
      int int0 = (-2588);
      try { 
        MathUtils.pow(87178291200L, (-2588));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (87,178,291,200^-2,588)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 2495);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2072.6713742;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = (double) 2495;
      doubleArray0[6] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)9);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 0.0, (int) (byte)1);
      int int0 = MathUtils.subAndCheck(2495, (-491));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3333.3955), (-3333.3955), (-2737.3233322939));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3333.3955);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2365);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2560;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.compareTo(2878.5872, 2878.5872, 0.15);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-437);
      intArray0[1] = (-2425);
      intArray0[2] = 0;
      intArray0[3] = 4194304;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.log(0, (-1121.1741));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4194304;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-2425);
      doubleArray0[7] = (-1192.36653693);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.indicator(0L);
      try { 
        MathUtils.pow((-9223372036854775808L), (-1889L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-1,889)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1843.27222496;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.19999954120254515;
      doubleArray0[3] = 0.167;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 634;
      double double1 = MathUtils.factorialDouble(634);
      int int1 = 38;
      // Undeclared exception!
      try { 
        MathUtils.factorial(38);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = MathUtils.sign(1531.0F);
      int[] intArray0 = new int[5];
      intArray0[0] = 63;
      intArray0[1] = 19;
      intArray0[2] = (-1207);
      intArray0[3] = 0;
      intArray0[4] = (-2420);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 827.0;
      double double1 = MathUtils.normalizeAngle(827.0, 827.0);
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1, 145);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 145
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3732.256));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.pow((-700L), 0);
      long long1 = MathUtils.addAndCheck(3628800L, (-700L));
      long long2 = MathUtils.addAndCheck(0L, (-700L));
      long long3 = MathUtils.sign(3337L);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 3919L;
      long long1 = MathUtils.subAndCheck(3919L, 417L);
      long long2 = MathUtils.addAndCheck(3502L, (-3875L));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 417L, (double) 3502L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.log(1553.0, 9.219544613762692E-9);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(498L, 498L);
      float float0 = MathUtils.sign((float) 248004L);
      long long1 = MathUtils.mulAndCheck(0L, 248004L);
      int int0 = MathUtils.mulAndCheck(0, 1420);
      double double0 = MathUtils.normalizeAngle(2576.124711133, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      MockRandom mockRandom0 = new MockRandom(1420);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1615, 1615);
      int int0 = MathUtils.pow(0, (long) 1615);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1615;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 489.8382046625282);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-228.9);
      doubleArray0[2] = 456.11;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((-3711L), 0L);
      double double0 = MathUtils.indicator(1121.7);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 0.0, 6192);
      try { 
        MathUtils.pow((-3711L), (-412L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,711^-412)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = 3012L;
      long long1 = MathUtils.subAndCheck((-194L), 3012L);
      int int0 = 193;
      double double0 = MathUtils.binomialCoefficientDouble(193, 193);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      long long2 = (-2279L);
      try { 
        MathUtils.pow((-2279L), (-194L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,279^-194)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-0.16624879837036133);
      doubleArray0[2] = (-442.539792129);
      doubleArray0[3] = (-1412.9822394);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.pow((-792L), 0);
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.scalb(0, 0);
      float float0 = MathUtils.indicator((float) (-792L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-792L);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = 1.4456468917292502E-16;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 95;
      int int1 = MathUtils.pow(95, 21);
      int int2 = MathUtils.compareTo(Double.POSITIVE_INFINITY, (-6.032174644509064E-23), (-1672.0));
      try { 
        MathUtils.pow(1, (-657));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-657)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.gcd(5635L, 5635L);
      double double0 = MathUtils.indicator(1.0);
      int int0 = MathUtils.lcm((-1778), 4805);
      long long1 = MathUtils.indicator((-1272L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      MockRandom mockRandom0 = new MockRandom(1749L);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-198), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(19, 19);
      int int1 = 0;
      int int2 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(38);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.indicator((-416L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-416L), (-1333.4841), 0.0);
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) (-416L), (double) (-1L));
      int int1 = MathUtils.gcd(0, 0);
      int int2 = MathUtils.addAndCheck(1056, (-3048));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.scalb(0, 0);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.addAndCheck(0, 736);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 736;
      intArray0[2] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.sign((long) 0);
      byte byte0 = MathUtils.sign((byte)116);
      double double0 = MathUtils.scalb(3909.55130534, 736);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(417L, 24L);
      int int0 = 0;
      long long1 = MathUtils.pow((-7278142539171889152L), 0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sinh((short)0);
      double double1 = MathUtils.factorialLog((short)0);
      int int0 = MathUtils.addAndCheck(0, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-2780);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-1.0), (-2780));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3958.346998474), (-3958.346998474));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3958.346998474);
      doubleArray0[1] = (-3958.346998474);
      doubleArray0[2] = (-3958.346998474);
      doubleArray0[3] = (-3958.346998474);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(61);
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-3,958.347 >= -3,958.347)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equals((double) (short)1, (double) (short)0, (double) (short)1);
      int int0 = MathUtils.sign((-2147483646));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-252.7244801337);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-2147483646);
      doubleArray0[4] = (double) (short)1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 4.0;
      double double1 = MathUtils.indicator(4.0);
      int int0 = 15;
      int int1 = 66;
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, 15, 66);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double double0 = 4838.2978437636;
      boolean boolean1 = MathUtils.equals(0.0, 3090.4252413238614, 4838.2978437636);
      int int1 = (-2040);
      int int2 = 24;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2040), 24);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,040, k = 24
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-506.2578455253), (-506.2578455253));
      byte byte0 = MathUtils.indicator((byte)11);
      short short0 = MathUtils.sign((short) (byte)1);
      int int0 = MathUtils.gcd((int) (byte)1, (-1756));
      boolean boolean0 = MathUtils.equals((double) (byte)1, 1444.2105852047202, 0.0);
      long long0 = MathUtils.sign((long) (-1756));
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-959));
      float float0 = MathUtils.round((-1426.8119F), (-959));
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2132, 1293);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 56.1427904;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign((-1258486462));
      int int2 = 12;
      float float0 = MathUtils.round(151.3F, 12);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.lcm(1306L, 1306L);
      long long1 = MathUtils.gcd((long) 0, (long) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1306L;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-1368.16472), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[4];
      int int0 = 1348;
      intArray0[0] = 1348;
      int int1 = (-1056);
      intArray0[1] = (-1056);
      intArray0[2] = 437;
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1559));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,559
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-467));
      int int0 = MathUtils.lcm((-467), (-467));
      double double1 = MathUtils.sign((double) (-467));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-467);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(298.875, 868.67082, (-2107));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.sign((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 3.834E-20, 992);
      double double0 = MathUtils.round((double) 992, 862);
      double double1 = MathUtils.cosh(2.7553817452272217E-6);
      double double2 = MathUtils.binomialCoefficientLog(862, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 862;
      intArray0[1] = 992;
      intArray0[2] = 992;
      double double3 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-1.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.0), 1414.03656736);
      long long0 = MathUtils.mulAndCheck(0L, 1307674368000L);
      double double1 = 0.0;
      int int0 = MathUtils.compareTo((-1.0), 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2220));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,220
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 1.25;
      boolean boolean0 = MathUtils.equals(1.25, 1.25, 1.25);
      float float0 = MathUtils.indicator(Float.NaN);
      short short0 = (short) (-76);
      short short1 = MathUtils.sign((short) (-76));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = (-675.960017821388);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3356.2443), (-3356.2443), (-675.960017821388));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3356.2443);
      doubleArray0[1] = (-675.960017821388);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3356.2443));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-4046));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,046
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.lcm((-742), (-2991));
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.sign((float) (-742));
      byte byte0 = MathUtils.indicator((byte) (-89));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-1430.69054502);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.subAndCheck((-1804), 12);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-88));
      int int0 = MathUtils.lcm((-274), 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 9.219544613762692E-9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 775.0128827;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 21;
      // Undeclared exception!
      try { 
        MathUtils.round(185.15F, 21, 21);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 21, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.cosh(265.595097535059);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.110338207308034E115;
      doubleArray0[1] = (-309.85760920871);
      doubleArray0[2] = 265.595097535059;
      doubleArray0[3] = 1.110338207308034E115;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.sign((-1766.668693756267));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.flipBit(1);
      BigInteger bigInteger5 = bigInteger0.add(bigInteger2);
      BigInteger bigInteger6 = bigInteger0.shiftRight(1);
      BigInteger bigInteger7 = bigInteger0.shiftLeft(67);
      try { 
        MathUtils.pow(bigInteger0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(4516, 4516);
      boolean boolean0 = MathUtils.equals((-2685.3123), (-2685.3123), 0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1753L);
      int[] intArray0 = new int[4];
      intArray0[0] = 4516;
      intArray0[1] = 4516;
      intArray0[2] = 190;
      intArray0[3] = 4516;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.subAndCheck((long) 4516, (long) 190);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, (-1207.6620821027982));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = MathUtils.indicator(3292.232F);
      double double0 = MathUtils.sign((double) 1.0F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-1467.5178F), 1034, 178);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 178, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-1791);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1791));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,791
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-3529.9589985570205), (-3529.9589985570205));
      int int0 = (-2398);
      double double1 = MathUtils.round(0.0, (-2398));
      int int1 = 16;
      long long0 = (-4035746434778044925L);
      try { 
        MathUtils.pow(16, (-4035746434778044925L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (16^-4,035,746,434,778,044,925)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 709;
      long long0 = (-1L);
      try { 
        MathUtils.pow(709, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (709^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      double double0 = MathUtils.round(0.041666666666666664, 13);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3614.533189033625, (-1058.547));
      double double1 = MathUtils.scalb((-1765.7197), 0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2680.007019, 3);
      long long0 = MathUtils.factorial(11);
      double double0 = MathUtils.factorialDouble(648);
      long long1 = MathUtils.pow(0L, 2L);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.indicator((-1072));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 648;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 648;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) (byte)1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (\u221E >= 648)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(225, 225);
      long long1 = MathUtils.subAndCheck(1L, 1L);
      long long2 = MathUtils.lcm(0L, (long) 225);
      long long3 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = (byte)20;
      byte byte1 = MathUtils.sign((byte)20);
      long long0 = 1272L;
      long long1 = MathUtils.pow(1272L, 204);
      double double0 = MathUtils.factorialLog(204);
      long long2 = MathUtils.mulAndCheck(81L, 3019L);
      int int0 = 99;
      float float0 = MathUtils.round((float) 244539L, 99);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)20;
      intArray0[1] = 204;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.pow((-3227), 3019L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(6722166367014452318L, 81L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 172;
      double double0 = MathUtils.factorialDouble(172);
      int int1 = MathUtils.hash((double) 172);
      // Undeclared exception!
      try { 
        MathUtils.round(2204.912, 111, 111);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = MathUtils.indicator((short)39);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)39;
      MathUtils.checkOrder(doubleArray0);
      int int0 = Integer.MIN_VALUE;
      int int1 = 2658;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(Integer.MIN_VALUE, 2658);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,147,483,648, k = 2,658
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-656L), 0L);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.lcm((long) 0, 0L);
      long long2 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.log(2759.9652571308, 737.370505768138);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(389, 389);
      boolean boolean0 = MathUtils.equalsIncludingNaN(452.465273, 452.465273);
      int[] intArray0 = new int[5];
      intArray0[0] = 389;
      intArray0[1] = 389;
      intArray0[2] = 389;
      intArray0[3] = 389;
      intArray0[4] = 389;
      int[] intArray1 = new int[2];
      intArray1[0] = 389;
      intArray1[1] = 389;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3321);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)101);
      byte byte1 = MathUtils.indicator((byte)1);
      int int1 = MathUtils.addAndCheck((int) (byte)1, 0);
      int int2 = MathUtils.sign(0);
      double double0 = MathUtils.cosh((-3321));
      long long0 = MathUtils.indicator((long) (byte)1);
      float float0 = MathUtils.sign((-2366.5806F));
      float float1 = MathUtils.indicator(0.0F);
      int int3 = MathUtils.hash(3.834E-20);
      short short0 = MathUtils.indicator((short) (byte)1);
      int int4 = MathUtils.gcd(3465, (-3321));
      int int5 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 153);
      long long2 = MathUtils.lcm((-1386L), 20922789888000L);
      double double1 = MathUtils.cosh(1611.7706460367233);
      double double2 = MathUtils.round((double) 20922789888000L, 21, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-1934.1639);
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 153;
      doubleArray0[6] = (-640.61459);
      doubleArray0[7] = (double) (byte)101;
      doubleArray0[8] = (double) 1L;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 20922789888000L;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2172.234552466;
      doubleArray1[4] = (double) (-2366.5806F);
      doubleArray1[5] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
