/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:31:19 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = (-1.2279900020775764E287);
      double double1 = MathUtils.scalb((-1.2279900020775764E287), 296);
      int int0 = (-1697);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1697));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,697
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2364.2289410160156;
      doubleArray0[2] = 1135.0;
      doubleArray0[3] = 2536.7642777008;
      doubleArray0[4] = 1.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = (-0.12502530217170715);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 208979858, (double) 208979858);
      // Undeclared exception!
      try { 
        MathUtils.equals(2536.7642777008, 0.0, 208979858);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(67, 67);
      long long0 = MathUtils.indicator(4398046511103L);
      double double1 = MathUtils.indicator((-1.0));
      long long1 = MathUtils.lcm(1L, (-1053L));
      long long2 = MathUtils.addAndCheck(1L, 395L);
      int int0 = MathUtils.subAndCheck(1295, 31);
      long long3 = MathUtils.addAndCheck(4398046511103L, 396L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1295;
      intArray0[1] = 31;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 396L;
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (-979.997614185611);
      doubleArray0[3] = (double) 4398046511499L;
      doubleArray0[4] = (double) 4398046511103L;
      doubleArray0[5] = (double) 1295;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 396L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1409.719797185);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2781.7310913568667), (-2781.7310913568667), 2877);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.lcm((-61L), (-61L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 61L;
      doubleArray0[1] = (double) (-61L);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int0 = bigInteger1.bitCount();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      BigInteger bigInteger4 = bigInteger2.andNot(bigInteger0);
      BigInteger bigInteger5 = bigInteger1.modPow(bigInteger2, bigInteger0);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger1);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 201, (-718));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -718, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1369.77426400728, 1695.58);
      long long0 = MathUtils.pow(0L, 0L);
      int[] intArray0 = new int[2];
      intArray0[0] = 20;
      intArray0[1] = (-992);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.sinh((-565.6125));
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte) (-125));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-565.6125);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.round((double) 0, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(0.0F);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.indicator((-843L));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.pow((-1586), 0);
      byte byte0 = MathUtils.indicator((byte)42);
      long long0 = MathUtils.sign((-20L));
      int int2 = MathUtils.gcd((-1586), 9);
      int int3 = (-736);
      int int4 = MathUtils.pow((-736), 5040L);
      long long1 = MathUtils.subAndCheck(0L, (-2644281811660520851L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.factorialDouble(1);
      long long2 = 0L;
      long long3 = MathUtils.subAndCheck((-2494L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Inexact result from rounding");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Inexact result from rounding
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-74));
      double double0 = MathUtils.normalizeAngle(3052.65572612338, 1L);
      double double1 = MathUtils.cosh((-484.38317715531));
      long long1 = MathUtils.mulAndCheck(0L, 362880L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-74);
      doubleArray0[1] = (-0.9723331658988172);
      doubleArray0[2] = 1.1585398312008712E210;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-484.38317715531);
      doubleArray0[6] = 3052.65572612338;
      doubleArray0[7] = (-484.38317715531);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 0L, 18);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.signum();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float1 = bigInteger1.floatValue();
      float float2 = MathUtils.round((-1.0F), (-74), 0);
      int int1 = MathUtils.sign(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, bigInteger1);
      int int2 = MathUtils.indicator((-214));
      int[] intArray0 = new int[1];
      intArray0[0] = (-214);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger2 = BigInteger.probablePrime(21, mockRandom0);
      BigInteger bigInteger3 = bigInteger0.shiftRight(21);
      byte byte0 = bigInteger0.byteValueExact();
      long long0 = bigInteger0.longValueExact();
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.factorial(0);
      long long2 = MathUtils.factorial(0);
      double double1 = MathUtils.scalb(0.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 63);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(205, 205);
      int[] intArray0 = new int[5];
      intArray0[0] = 205;
      intArray0[1] = 205;
      intArray0[2] = 205;
      intArray0[3] = 205;
      intArray0[4] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 205;
      intArray1[1] = 0;
      intArray1[2] = (-295);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 205;
      intArray1[6] = 205;
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      double double0 = MathUtils.sign(737.58956);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 205, 1801.181);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2831.4), (-598.7263250705079), (double) (-295));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 205;
      doubleArray0[1] = (double) 0;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)1472);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1003.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-4038.10867);
      doubleArray0[4] = (-0.09088450866185192);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2033.6777903;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 39916800L);
      int int0 = MathUtils.compareTo((-558.1809720496548), 0L, (-39916800L));
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-744.666), 7.0);
      int int0 = MathUtils.gcd(181, 181);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1782.32218;
      doubleArray0[1] = 2.2250738585072014E-308;
      int int1 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = bigInteger0.shiftLeft(0);
      boolean boolean0 = bigInteger0.equals((Object) null);
      BigInteger bigInteger3 = bigInteger0.negate();
      int int2 = bigInteger0.bitCount();
      BigInteger bigInteger4 = bigInteger0.pow(0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (long) 0);
      double double2 = MathUtils.binomialCoefficientDouble(2042400263, (-1025));
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.log(480.39957351671205, (-4812.7671187));
      int int0 = MathUtils.gcd(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = 1765;
      double double1 = MathUtils.binomialCoefficientDouble(1765, 183);
      int int2 = MathUtils.sign(1765);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1765;
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 1382.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4319.722190998;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.384185791015625E-7;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 385.8;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-2683);
      float float0 = MathUtils.round((-3508.0F), (-2683));
      double double0 = 2582.05276979224;
      double double1 = MathUtils.log(0.0, 2582.05276979224);
      int int1 = 1490;
      double double2 = MathUtils.scalb(0.0, 1490);
      int int2 = MathUtils.addAndCheck((-1028), 1490);
      long long0 = MathUtils.gcd((long) (-1028), (long) (-1028));
      int int3 = MathUtils.lcm(0, 66);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 0, 462);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 462, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)8);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, (-3698));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 2270;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 2270, 618);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 618, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 563.2153);
      int int0 = MathUtils.sign(48);
      long long0 = MathUtils.lcm((long) 48, (long) 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 48;
      intArray0[2] = 1;
      intArray0[3] = 48;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals((double) 48L, 2289.8042796775485, 2289.8042796775485);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 563.2153;
      doubleArray0[3] = 563.2153;
      doubleArray0[4] = 2289.8042796775485;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-305.3775));
      int int2 = MathUtils.mulAndCheck(0, 11);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = (-1776);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 48;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 0;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 585.0;
      doubleArray0[1] = (-776.3511458573328);
      doubleArray0[2] = (-339.472081679536);
      doubleArray0[3] = (-619.76857787);
      doubleArray0[4] = 9.220590270857665E-9;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 2.3841857910019882E-8;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.factorialDouble(114);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.lcm(63, (-1479));
      double double0 = MathUtils.normalizeAngle(873.25, 873.25);
      double double1 = MathUtils.round(1071.23, 61);
      long long0 = MathUtils.mulAndCheck((long) (-1479), (long) 63);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (-0.1666666567325592);
      int int1 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.normalizeAngle(0.0, (-0.1666666567325592));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 31059, 0.0, 1230.0032412336068);
      long long1 = MathUtils.mulAndCheck((-686L), 0L);
      int int2 = MathUtils.indicator((-3075));
      long long2 = MathUtils.addAndCheck((long) 31059, (long) 61);
      double double3 = MathUtils.sign((double) 31120L);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-4909L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-4,909)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.indicator(120L);
      byte byte0 = MathUtils.sign((byte)44);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.binomialCoefficient((byte)1, (-4416));
      float float0 = MathUtils.round((float) 1L, (int) (byte)1);
      int int0 = MathUtils.indicator((-1281));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(720L, 0L);
      int int0 = (-1205);
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1205));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1205);
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = 0;
      int int2 = MathUtils.lcm(0, 19);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.hash(1.633123935319537E16);
      int int1 = MathUtils.mulAndCheck(19, 20);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.addAndCheck((-4561L), (long) 380);
      int int2 = MathUtils.indicator(245);
      boolean boolean0 = MathUtils.equals((double) (-4561L), 925.4107, 4299.49665);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.5, 0.0, 1466.928);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1466.928;
      doubleArray0[1] = 1466.928;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-0.037657746));
      double double0 = MathUtils.binomialCoefficientDouble(1527, 0);
      long long0 = MathUtils.mulAndCheck((long) 1527, (long) 1527);
      int int0 = MathUtils.pow((-1), 2331729L);
      int int1 = MathUtils.addAndCheck((-1), 33);
      long long1 = MathUtils.pow((-3279L), 32);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1527;
      intArray0[2] = 32;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 15;
      intArray0[6] = 0;
      intArray0[7] = 33;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 148.0;
      doubleArray0[1] = 4968.67456178;
      doubleArray0[2] = (-4481.8593554);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((-3153.4476), (-113.0), 1072);
      int int0 = MathUtils.addAndCheck(1072, 1072);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-562.2052580019));
      double double0 = MathUtils.binomialCoefficientDouble(1734, 1734);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, (-4481.8593554), 157);
      // Undeclared exception!
      try { 
        MathUtils.round(148.0, 3520, (-3691));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      short short0 = MathUtils.indicator((short)4254);
      boolean boolean0 = MathUtils.equals((double) 0, (-3306.351983), (double) (short)4254);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3306.351983);
      doubleArray0[1] = (double) (short)1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-3306.351983), 1.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 14.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2991.94813343172);
      doubleArray0[3] = 3487.30365;
      doubleArray0[4] = 2651.855520191;
      doubleArray0[5] = (-101.8);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3487.30365);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (15.958 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int1 = 130;
      int int2 = MathUtils.subAndCheck(130, 0);
      double double1 = MathUtils.factorialDouble(0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = MathUtils.gcd(3474, 3474);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.cosh(2.2250738585072014E-308);
      double double1 = MathUtils.factorialLog(437);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2.2250738585072014E-308;
      doubleArray1[1] = (double) 3474;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1981.714133788;
      doubleArray1[4] = 2223.8899020816207;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2223.8899020816207;
      doubleArray1[7] = (double) 437;
      doubleArray1[8] = 0.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      long long0 = MathUtils.sign(4398046511103L);
      double double3 = MathUtils.sinh(1.5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int0 = MathUtils.sign(0);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double double0 = MathUtils.normalizeAngle((short)0, (short)0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.1730463525082348E-7);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = 1.5707963267948966;
      int int0 = 93;
      double double1 = MathUtils.scalb(1.5707963267948966, 93);
      double double2 = MathUtils.binomialCoefficientDouble(93, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = bigInteger0.shiftLeft((-360));
      double double3 = bigInteger0.doubleValue();
      try { 
        MathUtils.pow(bigInteger0, (-330L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-330)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2777, 2777);
      double double1 = MathUtils.normalizeAngle(0.0, 2777);
      int int0 = (-1364);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1364));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,364
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 226);
      short short0 = MathUtils.indicator((short)0);
      double double1 = MathUtils.factorialLog((short)0);
      long long0 = MathUtils.factorial((short)0);
      float float0 = MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(1305L, 0);
      float float0 = MathUtils.indicator((-2188.0F));
      int int1 = MathUtils.hash((double) 0);
      long long1 = MathUtils.lcm(2147483648L, (long) 0);
      long long2 = MathUtils.sign(1L);
      int int2 = MathUtils.pow(0, 330);
      long long3 = MathUtils.subAndCheck(0L, 2991L);
      long long4 = MathUtils.indicator(368L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 983.7317757;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1623.0);
      doubleArray0[3] = (-970.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-465.971059);
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(720L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = 1243.27F;
      float float1 = MathUtils.round(1243.27F, 98);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte1 = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byte byte2 = (byte)24;
      byteArray0[3] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int0 = bigInteger1.signum();
      String string0 = bigInteger1.toString();
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      try { 
        MathUtils.pow(1904, (-863L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,904^-863)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.lcm(12, 709);
      boolean boolean0 = MathUtils.equals((double) 8508, (-2783.6474));
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 12);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 8508;
      doubleArray0[2] = (double) 12;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 640);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 808;
      int int1 = MathUtils.subAndCheck(808, 2088);
      try { 
        MathUtils.pow(808, (long) (-1280));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (808^-1,280)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = (-1639);
      int int1 = MathUtils.gcd((-1639), (-1639));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2.6033824355191673E-8), (double) (-1639), 2545.8013879083);
      boolean boolean1 = MathUtils.equals(3439.498931386, (-127.93538870635));
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 2545.8013879083, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1517.6764), (-1517.6764));
      double double0 = MathUtils.factorialDouble(6);
      short short0 = MathUtils.sign((short)2621);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 720.0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (-1517.6764);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (6 <= 6)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1798.19018047192, 0.0);
      int int0 = MathUtils.gcd(0, 0);
      float float0 = MathUtils.round((float) 0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-6429.423977036945);
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-6429.423977036945);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(549, (-3499));
      int int1 = MathUtils.pow(249, 2434L);
      long long0 = MathUtils.mulAndCheck(529L, (-2149L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("overflow: mul");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.overflow: mul
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2330.5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-40.768653095);
      doubleArray0[6] = (-453.7144);
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.lcm((-2203), 258);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 258;
      doubleArray0[1] = (double) (-2203);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1971);
      intArray0[2] = (-1380);
      intArray0[3] = 4194304;
      intArray0[4] = 2;
      intArray0[5] = (-292);
      intArray0[6] = 4;
      intArray0[7] = 0;
      intArray0[8] = 579;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      try { 
        MathUtils.pow(0L, (-771L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-771)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = (-582.0262474);
      double double1 = MathUtils.normalizeAngle(0.0, (-582.0262474));
      int int0 = MathUtils.subAndCheck((int) (byte)0, (int) (byte)0);
      int int1 = (-451);
      double double2 = MathUtils.binomialCoefficientLog(11, (-451));
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.factorial((byte)0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.lcm(108, 108);
      int[] intArray0 = new int[1];
      intArray0[0] = 108;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.addAndCheck(108, (-245));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 108;
      doubleArray0[1] = (double) 108;
      int int3 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.round((double) (-137), 3, 0);
      float float0 = MathUtils.round(2398.5618F, 108);
      float float1 = MathUtils.round(2970.07F, (-75));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.sinh(1999.4359020667);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1174.129);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-667), (-2095));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -667
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(175, 3349);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 586075, (double) 175, 3510);
      int int1 = MathUtils.pow(0, 0);
      long long0 = MathUtils.lcm((long) 1, (-2653L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 3510);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2109, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2109;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.mulAndCheck(0, (-262));
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 2109);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.sinh(0);
      double double2 = MathUtils.factorialDouble(0);
      try { 
        MathUtils.pow(0, (-419));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-419)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 55.0;
      doubleArray0[1] = 2676.26180872;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2676.26180872);
      float float0 = MathUtils.sign(0.0F);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)43;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-7,814,226,773,173,973^-7,814,226,773,173,973)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.pow((-609L), 1336);
      int int0 = MathUtils.lcm(1336, (-1032));
      int int1 = MathUtils.indicator(0);
      long long1 = MathUtils.subAndCheck((long) 1, (long) 172344);
      boolean boolean0 = MathUtils.equals(0.25, (double) 1336, 0.25);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.compareTo((-172343L), 0.25, (-4821.153311316215));
      long long2 = MathUtils.pow((-1122L), 1336);
      int int3 = MathUtils.mulAndCheck(72, (-1632));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-427.617626347558), 925.56729, 0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 4217;
      int int1 = (-3222);
      int int2 = MathUtils.lcm(4217, (-3222));
      int int3 = MathUtils.subAndCheck(13587174, 114);
      int int4 = 20;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(20, 114);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 20, k = 114
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1922.528661418);
      float float1 = MathUtils.indicator((float) 0);
      int int0 = MathUtils.hash((double) 0);
      byte byte0 = MathUtils.sign((byte) (-51));
      // Undeclared exception!
      try { 
        MathUtils.lcm(892L, 4208363204685324176L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(2797, 6);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 2651;
      int int1 = MathUtils.sign(2651);
      byte byte0 = MathUtils.indicator((byte)0);
      int int2 = 21;
      int int3 = MathUtils.mulAndCheck(1, 21);
      int int4 = MathUtils.hash((double) 21);
      boolean boolean0 = MathUtils.equalsIncludingNaN(5156.54856, (-148.423569), 1551);
      long long0 = MathUtils.indicator((long) 21);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 1629.203817398407;
      int int0 = MathUtils.hash(1629.203817398407);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-182753570), (-182753570));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4607182418800017408L);
      long long0 = MathUtils.factorial(0);
      int int0 = MathUtils.indicator(0);
      long long1 = MathUtils.pow(0L, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      double double0 = 0.0;
      double double1 = MathUtils.log(0L, 0.0);
      int int0 = MathUtils.mulAndCheck(2489, 2489);
      double double2 = MathUtils.log(6195121, 10.204917);
      long long2 = (-275L);
      long long3 = MathUtils.addAndCheck(0L, (-275L));
      double double3 = MathUtils.binomialCoefficientLog(6195121, (-673));
      double double4 = 1017.9795402;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 1017.9795402, 6195121);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2682L, 24L);
      double double0 = MathUtils.log(110.0, 2682L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2682L;
      doubleArray0[1] = (double) 24L;
      doubleArray0[2] = (double) 24L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator(2706L);
      double double1 = MathUtils.binomialCoefficientLog(177, (-636));
      double double2 = MathUtils.cosh(2682L);
      long long2 = MathUtils.lcm(1L, 0L);
      int int0 = MathUtils.addAndCheck((-636), 177);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long3 = bigInteger0.longValueExact();
      int int1 = bigInteger0.getLowestSetBit();
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-20,987^-20,987)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.indicator(2.356194490192345);
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 2.356194490192345);
      int int1 = MathUtils.hash(59.424);
      int int2 = MathUtils.subAndCheck((-511215930), (-511215930));
      long long0 = MathUtils.mulAndCheck((long) (-511215930), (-230L));
      int int3 = MathUtils.lcm(0, (-684));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)31;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.indicator((double) 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-960.683);
      doubleArray0[7] = 1478.5476509;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.cosh((-1078.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 825.5071528469;
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.lcm((-584L), (-584L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 584L;
      doubleArray0[1] = (double) 584L;
      doubleArray0[2] = (double) (-584L);
      doubleArray0[3] = (double) (-584L);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4697.4505);
      doubleArray0[6] = (double) (-584L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck((-766L), 0L);
      double double0 = MathUtils.scalb(0.0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 0.008333333333333333, 0.0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(833.81539568, 2200.680895);
      long long2 = MathUtils.mulAndCheck((-766L), (-766L));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.indicator((-1613.985031763));
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 41);
      int[] intArray0 = new int[8];
      intArray0[0] = 1901;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 41;
      intArray0[6] = 41;
      intArray0[7] = 41;
      double double1 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 1901, 243);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 243, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 19;
      double double0 = MathUtils.binomialCoefficientDouble(19, 19);
      short short0 = MathUtils.indicator((short)775);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2236), 1121);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,236, k = 1,121
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = MathUtils.round(1586.2483F, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (-2713L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1586.0F;
      doubleArray0[1] = (double) (-2713L);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle((-2713L), 0.5);
      int int0 = MathUtils.lcm((-799), 0);
      float float1 = MathUtils.sign(Float.NaN);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2713.0));
      long long1 = MathUtils.subAndCheck((long) (-799), 6722166367014452318L);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.sinh(2963.32052024);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 6.0, 1525);
      int int0 = MathUtils.pow(881, 881);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1975907215);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 881;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 2963.32052024;
      doubleArray0[5] = 2963.32052024;
      doubleArray0[6] = 2963.32052024;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.cosh(4279.275);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = 184;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0L, 184, 184);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.round(4828.574373177, 136, 0);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.gcd(1, 4);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2957);
      intArray0[1] = (-1349);
      intArray0[2] = (-2256);
      intArray0[3] = 31;
      intArray0[4] = (-374);
      intArray0[5] = (-2238);
      intArray0[6] = 0;
      intArray0[7] = 17;
      intArray0[8] = (-944);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.1538461446762085, (double) (-2957), (-3388));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1790.25272;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4770.065604201485);
      doubleArray0[3] = (-3139.31331);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      float float0 = MathUtils.round(0.0F, 109, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = 1L;
      long long1 = MathUtils.sign(1L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-437.49754);
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) 1L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = (-8765);
      int int1 = MathUtils.gcd((-8765), 119);
      double double0 = MathUtils.indicator(Double.NaN);
      double double1 = MathUtils.sign((double) (-8765));
      double double2 = MathUtils.factorialDouble(1);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.round(1890.8447F, 0);
      int int0 = MathUtils.sign(2685);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1891.0F);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4294967295L, 0L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.scalb((-1651.615385240824), 943);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 943;
      doubleArray0[1] = (-1.2279900020775764E287);
      doubleArray0[2] = (-1.2279900020775764E287);
      doubleArray0[3] = (-1651.615385240824);
      doubleArray0[4] = (-1651.615385240824);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 2.0, 2.0);
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.lcm(2898, 0);
      double double0 = MathUtils.cosh((-704.4552527366895));
      boolean boolean1 = MathUtils.equalsIncludingNaN(1165.7288066, (double) 2898, 31);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 0;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1884L, 1361L);
      int int0 = MathUtils.compareTo(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.5);
      int int1 = MathUtils.sign(0);
      double double0 = MathUtils.log(3245L, 0.0);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.lcm(0L, (-3512299194304650054L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3245L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1323);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1323));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,323
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.lcm((-686), 0);
      int int1 = MathUtils.lcm(0, (-1495));
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1495);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1495);
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2305.3329866241384), 0.008333333333329196, (-2305.3329866241384));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2305.3329866241384), (-2305.3329866241384), 0.008333333333329196);
      long long0 = MathUtils.indicator((-7278142539171889152L));
      int int0 = MathUtils.mulAndCheck(960, 2407);
      byte byte0 = MathUtils.sign((byte)18);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = (-1074.9F);
      float float1 = MathUtils.round((-1074.9F), 0);
      long long0 = MathUtils.pow(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-623));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -623
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.sinh((-633.44895));
      int int0 = MathUtils.lcm(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1272.64219);
      doubleArray0[1] = (-6.3438595120195296E274);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-417.094);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2374.7701;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = 252;
      long long0 = MathUtils.pow(439L, 252);
      MathUtils.checkOrder(doubleArray0);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(241, (-1274190252));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.sign(148);
      int int1 = MathUtils.lcm(0, 1);
      int int2 = MathUtils.pow(2521, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-16.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 148;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.hash(0.5);
      int int1 = MathUtils.hash((double) 1071644672);
      float float0 = MathUtils.sign((float) 1071644672);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1259, 1104146432);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,259, k = 1,104,146,432
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      byte byte1 = MathUtils.indicator((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)1, (double) (byte)0);
      double double0 = MathUtils.round(409.4504661491, (int) (byte)1, (int) (byte)1);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.304E19, (double) (byte)0, 1.304E19);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = 409.4504661491;
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.pow(0L, (long) (byte)0);
      long long1 = MathUtils.sign((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)33);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)33;
      doubleArray0[1] = (double) (byte)33;
      doubleArray0[2] = (double) (byte)33;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3816.6398719413883);
      int int0 = MathUtils.indicator((-4155));
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = MathUtils.round(438.205F, 0, 0);
      int int0 = (-2036);
      int int1 = MathUtils.sign((-2036));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2036), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,036, k = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(40.54, 9.220590270857665E-9);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 40.54;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (40.54 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.pow(2144, (long) 2144);
      long long0 = MathUtils.sign(1669L);
      double double0 = MathUtils.round((-1716.72812222), 2144);
      double double1 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      double double2 = MathUtils.round((-770.91066), 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short) (-1216));
      int int1 = MathUtils.subAndCheck((int) (short) (-1), (int) (short) (-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-771.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1463.100894);
      double double4 = MathUtils.normalizeAngle(0.0, 0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-771 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.sign((-3767));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-3767), (-166.04267854726));
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-3767), (-1));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-182.8500399373498), 0.0952233225107193, 258);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0952233225107193, 258);
      double double0 = MathUtils.sign(0.0);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.gcd(258, 258);
      float float0 = MathUtils.sign((-182.6608F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = MathUtils.sign((short) (-1271));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-2147483648L));
      double double0 = MathUtils.indicator((-282.94));
      float float0 = MathUtils.sign((float) (-2147483648L));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-482));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -482
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(539L, (-4267615245585081135L));
      double double0 = MathUtils.normalizeAngle((-4267615245585081135L), (-4267615245585080596L));
      boolean boolean0 = MathUtils.equals((-2853.8335845), (-2853.8335845));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 539L, 955.60150398);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("factorial value is too large to fit in a long");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.factorial value is too large to fit in a long
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-268.4123687), 0);
      int int1 = MathUtils.compareTo((-2281.68676412), (-268.4123687), (-268.4123687));
      double double1 = MathUtils.sign((-1122.774717));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = MathUtils.round(635.7585F, 3143, 0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.indicator(2272.7073994);
      float float0 = MathUtils.indicator(2485.858F);
      double double1 = MathUtils.normalizeAngle((-1357.804214), 0.0);
      int int0 = MathUtils.addAndCheck(2564, 0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1595);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1595);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1595);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.indicator(1688);
      int[] intArray0 = new int[6];
      intArray0[0] = 1688;
      intArray0[1] = 1688;
      intArray0[2] = 1;
      intArray0[3] = (-1519);
      intArray0[4] = 1;
      intArray0[5] = 1688;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.pow((-1147L), (long) 1);
      long long1 = MathUtils.lcm((long) (-1519), (long) 1);
      long long2 = MathUtils.sign((long) 1);
      double double1 = MathUtils.sign((double) 1688);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1548.4080780970917);
      doubleArray0[1] = (double) (-1519);
      doubleArray0[2] = (double) 1688;
      doubleArray0[3] = (double) 1519L;
      int int1 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.shiftLeft(3160);
      double double3 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = bigInteger1.not();
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 4398046511103L);
      double double4 = MathUtils.safeNorm(doubleArray0);
      double double5 = MathUtils.binomialCoefficientLog(1688, 1);
      long long3 = MathUtils.addAndCheck((-1436L), 3952090531849364496L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.5707963267948966);
      doubleArray0[1] = 1.1102230246251565E-16;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = MathUtils.indicator(2854.85F);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1.0F);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.mulAndCheck(0L, 2552L);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.round((double) 2552L, 31);
      short short0 = MathUtils.indicator((short)31);
      long long2 = MathUtils.sign(1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.2499999997677497), 0.0, (-2368.93341851));
      short short1 = MathUtils.sign((short)1);
      int int1 = MathUtils.mulAndCheck((int) (short)1, 31);
      long long3 = MathUtils.lcm((long) (short)1, 2L);
      boolean boolean1 = MathUtils.equals((double) 2L, 0.0, 31);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(11.0, 2466.77);
      int int0 = MathUtils.subAndCheck(109, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 109;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) 109);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      float float0 = MathUtils.sign((float) 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0, (double) 0);
      double double0 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 5);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.sign((-1076L));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(556, 556);
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.indicator(640);
      double double0 = MathUtils.round((double) 556, (-688));
      long long1 = MathUtils.lcm((long) (short)1, (long) (-688));
      int int1 = MathUtils.subAndCheck(640, (int) (short)0);
      int int2 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 17;
      int int1 = MathUtils.pow(17, 17);
      int int2 = 0;
      int int3 = MathUtils.pow(0, 17);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("NOT_STRICTLY_INCREASING_KNOT_VALUES");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.NOT_STRICTLY_INCREASING_KNOT_VALUES
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2508.21);
      doubleArray0[1] = 845.88;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      double double2 = MathUtils.distance1(doubleArray1, doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 845.88);
      int int0 = MathUtils.addAndCheck((-2181), (-2181));
      int int1 = MathUtils.compareTo(845.88, (-4362), 1514.140564727711);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.compareTo(800.35861455343, 800.35861455343, 800.35861455343);
      long long0 = MathUtils.indicator((long) 0);
      double double0 = MathUtils.round(800.35861455343, 0);
      double double1 = MathUtils.normalizeAngle(1L, 800.35861455343);
      long long1 = MathUtils.indicator((long) 0);
      boolean boolean0 = MathUtils.equals(3.141592653589793, 800.35861455343);
      double double2 = MathUtils.log(798.9645340118075, 429.005599);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = (-899);
      try { 
        MathUtils.pow(361L, (-899));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (361^-899)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.round(0.5, (-1), 0);
      int int0 = 2325;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2325);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.sinh((-226.0807406));
      double double1 = MathUtils.binomialCoefficientLog(3478, 0);
      float float0 = MathUtils.indicator((float) 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-7.666340623733636E97);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3478;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-226.0807406);
      doubleArray0[6] = (-226.0807406);
      doubleArray0[7] = (-33.00843704140861);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-226.0807406);
      doubleArray1[2] = (-205.5117590033);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.pow(18, 18);
      double double0 = MathUtils.binomialCoefficientLog(61, 18);
      int[] intArray0 = new int[5];
      intArray0[0] = 457441280;
      intArray0[1] = 18;
      intArray0[2] = 18;
      intArray0[3] = 18;
      intArray0[4] = 61;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = 34.81052056437321;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = 34.81052056437321;
      doubleArray0[4] = 3269.654839;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.pow((-398), 903);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-274.179);
      doubleArray0[1] = (double) (-398);
      doubleArray0[2] = (double) (-398);
      doubleArray0[3] = (double) 903;
      doubleArray0[4] = (-185.68927329);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1030);
      int int0 = (-3784);
      try { 
        MathUtils.pow(2953, (-3784));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,953^-3,784)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.log((-960.95534803), (-960.95534803));
      double double1 = MathUtils.binomialCoefficientLog(1031, 1031);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2260.301, 2.0);
      int int0 = MathUtils.indicator((-1));
      try { 
        MathUtils.pow((long) (-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.lcm((-915L), 0L);
      double double0 = MathUtils.sign(10.0);
      byte byte0 = MathUtils.indicator((byte)56);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.factorial((byte)1);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      int int0 = 596;
      int int1 = (-140);
      int int2 = MathUtils.addAndCheck(596, (-140));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-140));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -140
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      int int0 = 0;
      int int1 = MathUtils.gcd((int) (short)1, 0);
      int int2 = MathUtils.sign(1207);
      long long0 = MathUtils.mulAndCheck(0L, (long) 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short)0, 1207);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,207
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (-149));
      int int0 = 61;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short) (-1), 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.pow(118, 9218868437227405312L);
      boolean boolean0 = MathUtils.equals((double) 0, (-1782.1554541));
      double double0 = MathUtils.scalb(1561.786624924, 0);
      short short0 = MathUtils.sign((short) (-326));
      int int1 = MathUtils.mulAndCheck(471, 1030);
      int int2 = MathUtils.sign(114);
      float float0 = MathUtils.sign((float) 1030);
      long long0 = MathUtils.gcd((long) 1030, 1335L);
      double double1 = MathUtils.scalb(0.0, 485130);
      double double2 = MathUtils.round(2.2250738585072014E-308, 485130);
      int int3 = MathUtils.subAndCheck(0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2709.14016), (double) 1.0F, Double.NaN);
      long long1 = MathUtils.addAndCheck(3553L, (long) 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-326);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 1561.786624924;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1782.1554541);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-326 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 1627.1775649;
      doubleArray0[2] = 362.942127281997;
      doubleArray0[3] = (-1902.7848602);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 418.806966;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck(63, 63);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 17;
      int int1 = 537;
      int int2 = MathUtils.addAndCheck(17, 537);
      long long0 = MathUtils.lcm((long) 537, (-2835L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 507465L, (double) 554, (double) 537);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 109.09687;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 507465L;
      doubleArray0[3] = (double) (-2835L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (109.097 >= 17)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 61;
      int int1 = (-1032);
      int int2 = MathUtils.mulAndCheck(61, (-1032));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_FLOOR");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_FLOOR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.factorialLog(434);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.lcm(182L, (long) 434);
      long long1 = MathUtils.pow((-3958705157555305932L), 5642L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2396.09403477;
      doubleArray0[1] = 1399.258873386;
      doubleArray0[2] = 0.2857142686843872;
      doubleArray0[3] = 0.16666666666666666;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh(1.2393345855018391E-8);
      short short0 = MathUtils.indicator((short)0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.indicator(2272L);
      int int0 = MathUtils.addAndCheck(1, 85);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      short short1 = MathUtils.sign((short)1);
      double double3 = MathUtils.binomialCoefficientDouble(17, 0);
      int int2 = MathUtils.mulAndCheck((int) (short)1, 20);
      int int3 = MathUtils.pow(1, 1L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short2 = MathUtils.sign((short)1458);
      int int4 = MathUtils.mulAndCheck((int) (short)1, 0);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1746L), (-1746L));
      double double0 = MathUtils.cosh((-1746L));
      long long1 = MathUtils.gcd(0L, 423L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 423L;
      doubleArray0[1] = (double) (-1746L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double1 = MathUtils.factorialDouble(1590);
      boolean boolean0 = MathUtils.equals((double) 1590, (double) 1590);
      long long2 = MathUtils.pow(0L, 162);
      long long3 = MathUtils.subAndCheck((-1746L), 0L);
      int int0 = MathUtils.compareTo(0.07842259109020233, 0L, (-927.273272));
      short short0 = MathUtils.indicator((short) (-344));
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.mulAndCheck(0, 12);
      int int2 = MathUtils.lcm(1934, 1442);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, (-1838.588518134675));
      long long4 = MathUtils.lcm(2147483648L, (long) 1590);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = MathUtils.sign(2524);
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, 5075L);
      float float0 = 0.0F;
      float float1 = MathUtils.round(0.0F, 1);
      long long2 = 1062L;
      long long3 = MathUtils.gcd(1062L, 39916800L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }
}
