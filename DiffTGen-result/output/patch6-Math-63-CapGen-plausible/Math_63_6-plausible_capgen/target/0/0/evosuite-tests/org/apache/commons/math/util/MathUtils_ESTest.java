/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:19:49 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2172.92695), (-221.0), (-221.0));
      float float0 = MathUtils.sign((-706.54F));
      boolean boolean1 = MathUtils.equals((-54.0), 1.633123935319537E16);
      double double0 = MathUtils.binomialCoefficientLog(4194304, 4194304);
      int int0 = MathUtils.sign(4194304);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-221.0);
      doubleArray0[1] = (double) 4194304;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2248.407805337635);
      double double1 = MathUtils.factorialLog(1);
      double double2 = MathUtils.scalb(0.0, 173);
      double double3 = MathUtils.distance1(doubleArray1, doubleArray0);
      int int1 = 70;
      int int2 = MathUtils.subAndCheck(70, (-226));
      int int3 = MathUtils.pow(3301, (long) 173);
      // Undeclared exception!
      try { 
        MathUtils.factorial(3301);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 199);
      float float1 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equals((double) 199, (double) 0.0F);
      long long0 = MathUtils.lcm(3153L, 6402373705728000L);
      boolean boolean1 = MathUtils.equals((double) 0.0F, (double) 0.0F);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.normalizeAngle(0.0F, 0.0);
      double double1 = MathUtils.normalizeAngle(0.0F, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3153L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 3153L;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      float float2 = MathUtils.round((float) 3153L, 0, 0);
      double double2 = MathUtils.log(4539.417, 0.0);
      double double3 = MathUtils.binomialCoefficientLog(199, 199);
      int int1 = MathUtils.hash(0.0);
      long long1 = MathUtils.lcm((long) 199, 3153L);
      double double4 = MathUtils.round(3042.171089126081, 0);
      long long2 = MathUtils.addAndCheck(1175L, 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.round(0.21871023960265942, 1946);
      boolean boolean0 = MathUtils.equals(0.5, (double) 1946);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.21871023960265942;
      doubleArray0[1] = 0.5;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.5);
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck(0, 1946);
      long long0 = MathUtils.subAndCheck(20922789888000L, (-507L));
      short short0 = MathUtils.sign((short) (-165));
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean2 = MathUtils.equals(doubleArray1, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(370772332, 0);
      short short1 = MathUtils.sign((short) (-1));
      boolean boolean3 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      int int2 = MathUtils.indicator((int) (byte)0);
      double double3 = MathUtils.scalb(1, 1946);
      boolean boolean4 = MathUtils.equalsIncludingNaN((-1338.591908), (double) (byte)0, 619);
      boolean boolean5 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)7);
      long long0 = MathUtils.lcm((long) (byte)7, (long) (byte)1);
      long long1 = MathUtils.addAndCheck(1715L, 6402373705728000L);
      long long2 = MathUtils.lcm(7L, 6402373705728000L);
      long long3 = MathUtils.lcm(2958L, 7L);
      long long4 = MathUtils.mulAndCheck(2268L, 2268L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equals((double) 0L, 0.11111095942313305, 10.0);
      long long1 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.pow(250, 250);
      int[] intArray0 = new int[3];
      intArray0[0] = 250;
      intArray0[1] = 0;
      intArray0[2] = 250;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck(250, 2102);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-14);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger0);
      BigInteger bigInteger4 = bigInteger2.xor(bigInteger0);
      boolean boolean0 = bigInteger0.isProbablePrime(27);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger5 = bigInteger0.add(bigInteger2);
      int int2 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.addAndCheck(0L, 40320L);
      long long1 = MathUtils.indicator((long) 27);
      long long2 = MathUtils.mulAndCheck(1415L, (long) (byte) (-14));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2093796556;
      // Undeclared exception!
      MathUtils.factorialDouble(2093796556);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      short short0 = MathUtils.sign((short)8);
      byte byte0 = MathUtils.indicator((byte) (-54));
      long long0 = MathUtils.sign((long) (byte) (-1));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)8;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte) (-54);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (byte) (-54);
      doubleArray0[7] = (double) (short)1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.binomialCoefficient(3, 2);
      boolean boolean0 = MathUtils.equalsIncludingNaN(982.03, (double) 3, (-54.0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.indicator(4607182418800017408L);
      byte byte0 = (byte)66;
      int int0 = 1989;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-706.54F));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.gcd((-10), 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1284));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,284
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1283));
      int int0 = MathUtils.gcd((-1283), 4194304);
      long long0 = MathUtils.pow((-3183605296591799669L), 261888L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = (-1854L);
      long long1 = MathUtils.lcm((-1854L), (-1854L));
      double double0 = MathUtils.sign((double) (-1854L));
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = MathUtils.sign((short)3);
      double double0 = MathUtils.factorialLog((short)1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.625;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.subAndCheck(2948, 1920);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, (double) 1920, (double) 1028);
      int int1 = MathUtils.pow(2948, 1920);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("c!Gh$9");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.c!Gh$9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 2147483602;
      // Undeclared exception!
      try { 
        MathUtils.lcm(2147483602, (-541));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.scalb((-3959.4817), 0);
      short short0 = (short)2804;
      short short1 = MathUtils.indicator((short)2804);
      int int0 = (-3277);
      int int1 = MathUtils.indicator((-3277));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (short)2804;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 3117;
      intArray0[0] = 3117;
      intArray0[1] = 0;
      int int1 = (-3328);
      intArray0[2] = (-3328);
      intArray0[3] = 1121;
      intArray0[4] = 2381;
      intArray0[5] = 0;
      int int2 = 13;
      intArray0[6] = 13;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int3 = (-2586);
      int int4 = MathUtils.sign((-2586));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = 2787.56207199;
      int int0 = MathUtils.hash(2787.56207199);
      int int1 = 515;
      int int2 = MathUtils.lcm(515, 0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("{0} method needs at least one previous point", 0);
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-82);
      int int1 = MathUtils.indicator((-82));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-82);
      doubleArray0[1] = 3970.21767007898;
      doubleArray0[2] = 0.3333333333333333;
      doubleArray0[3] = (double) (-82);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-82);
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 13;
      int int1 = MathUtils.pow(13, 13);
      int int2 = MathUtils.addAndCheck(13, (-1692154371));
      double double0 = MathUtils.factorialLog(13);
      int int3 = 224;
      int int4 = 362;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(224, 362);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 224, k = 362
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 254L);
      float float0 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1630.052691776629, 0.0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.7076972171162197;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.7076972171162197;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1630.052691776629;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2563));
      long long0 = MathUtils.pow((-451L), 0L);
      int int0 = MathUtils.gcd(18, 2965);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1122.6), (-2824.069));
      long long1 = MathUtils.indicator(4398046511103L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1026);
      double double1 = MathUtils.indicator(0.016);
      double double2 = MathUtils.log(0.0, 6092.077755667361);
      int[] intArray0 = new int[2];
      intArray0[0] = 1026;
      intArray0[1] = 1026;
      double double3 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (double) 1026;
      doubleArray0[4] = 0.016;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 6092.077755667361;
      doubleArray0[7] = 0.0;
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double5 = MathUtils.sinh(2565.10412730195);
      double double6 = MathUtils.cosh(-0.0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1026;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (double) 1026;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = -0.0;
      doubleArray1[6] = 2565.10412730195;
      doubleArray1[7] = (double) 1026;
      double double7 = MathUtils.distanceInf(doubleArray1, doubleArray0);
      double double8 = MathUtils.sinh(0.0);
      long long0 = MathUtils.pow(24L, 0L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = (-1430L);
      long long1 = MathUtils.subAndCheck((-1430L), (-1430L));
      long long2 = MathUtils.mulAndCheck((-1430L), (-1430L));
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.indicator((byte) (-1));
      int int0 = (-559);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-559), (-559));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -559
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 1);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-3183605296591799669L), (-3183605296591799669L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      float float1 = MathUtils.indicator((-1.0F));
      int int0 = 61;
      // Undeclared exception!
      try { 
        MathUtils.factorial(61);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.sign(699.0);
      int int0 = MathUtils.pow(1005, (long) 1005);
      int int1 = 3503;
      long long0 = MathUtils.pow((long) 1807744989, 3503);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1807744989;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 699.0;
      doubleArray0[4] = 699.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,807,744,989 > 10)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-195.0480333392686);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4061.995720379116;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.2222222089767456;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1631L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 87178291200L;
      long long1 = MathUtils.sign(87178291200L);
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      double double0 = MathUtils.scalb(87178291200L, 0);
      double double1 = MathUtils.round((double) 0, 2783, 0);
      int int2 = 0;
      double double2 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1512.311954;
      doubleArray0[2] = 2.7553817452272217E-6;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1083;
      double double0 = MathUtils.binomialCoefficientLog(1083, 1083);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1083;
      doubleArray0[1] = (double) 1083;
      doubleArray0[2] = (double) 1083;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1083.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1083;
      intArray0[2] = 1083;
      intArray0[3] = 1083;
      intArray0[4] = 1083;
      intArray0[5] = 1083;
      int int1 = 1444;
      intArray0[6] = 1444;
      int[] intArray1 = new int[4];
      intArray1[0] = 1083;
      intArray1[1] = 1444;
      intArray1[2] = 1444;
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1284));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,284
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 2347;
      int int1 = MathUtils.sign(2347);
      byte byte0 = MathUtils.indicator((byte) (-78));
      double double0 = MathUtils.round((-897.5602167024887), (int) (byte) (-1));
      float float0 = MathUtils.round((float) 1, 2347);
      long long0 = MathUtils.subAndCheck((-9223372036854775808L), (-985L));
      float float1 = MathUtils.round((float) 2347, 0);
      try { 
        MathUtils.pow(2300, (-1259L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,300^-1,259)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 189;
      intArray0[0] = 189;
      int int1 = (-1985);
      intArray0[1] = (-1985);
      intArray0[2] = 863;
      int int2 = 0;
      intArray0[3] = 0;
      intArray0[4] = 189;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.log(642.7066, 642.7066);
      long long0 = (-1126L);
      long long1 = MathUtils.mulAndCheck((-1126L), 0L);
      long long2 = MathUtils.sign(9193070505571053912L);
      int int0 = 0;
      double double1 = MathUtils.round((double) 0L, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.lcm(6227020800L, 6227020800L);
      long long1 = MathUtils.mulAndCheck((-652L), 140L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6227020800L;
      doubleArray0[1] = (double) 140L;
      doubleArray0[2] = (double) (-91280L);
      doubleArray0[3] = (double) 6227020800L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.indicator(0.0);
      long long0 = MathUtils.subAndCheck((-2400L), (-2400L));
      long long1 = MathUtils.binomialCoefficient(0, (-386));
      byte byte0 = MathUtils.sign((byte)18);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2400L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-2400L);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1829;
      intArray0[1] = (-386);
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)18;
      intArray0[4] = (int) (byte)1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(120);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.sign((-2683L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-2683L);
      doubleArray0[3] = (double) (-2683L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2683L);
      doubleArray1[1] = (double) (-2683L);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(223, 223);
      int int0 = MathUtils.indicator((-4218));
      double double0 = MathUtils.cosh((-1));
      int int1 = MathUtils.compareTo(1L, 0.0, 1L);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-2098);
      try { 
        MathUtils.pow(0L, (-2098));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,098)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byte byte1 = (byte)6;
      byteArray0[1] = (byte)6;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.abs();
      int int0 = (-1494);
      try { 
        MathUtils.pow(bigInteger0, (-1494));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10,758^-1,494)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1796);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1796;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1796;
      intArray0[4] = (int) (short)1796;
      intArray0[5] = (int) (short)1796;
      intArray0[6] = (-2042);
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1796);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-2042), 20, (-2042));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,042, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(230, 230);
      int int1 = MathUtils.pow(1705, (long) 230);
      long long0 = MathUtils.lcm((long) (-1525392207), 0L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2078.49869798, 1868.0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int[] intArray0 = new int[3];
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals((double) (short)0, 2078.49869798);
      long long0 = MathUtils.addAndCheck((long) (short)0, 0L);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.compareTo(0.0, 0, 1868.0);
      double double1 = MathUtils.sign((double) 0);
      double double2 = MathUtils.scalb(2.0, (-471));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 1061);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((-2733L), (long) 1061);
      int int0 = MathUtils.lcm(0, (-1505));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.sign(1.0);
      int int0 = MathUtils.gcd(560, 560);
      short short0 = MathUtils.sign((short)2445);
      double double1 = MathUtils.normalizeAngle((short)2445, 1.0);
      double double2 = MathUtils.round(Double.POSITIVE_INFINITY, 19);
      boolean boolean0 = MathUtils.equals((-1087.0), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-975);
      intArray0[1] = (-755);
      intArray0[2] = 158;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.scalb(624.7215838204196, 729);
      int int1 = MathUtils.lcm(2728, (-755));
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      int int2 = bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.abs();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int int3 = MathUtils.addAndCheck(0, 158);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 158;
      doubleArray0[1] = (double) (byte)10;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 158;
      doubleArray0[4] = (double) (-975);
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) (-975);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (158 >= 10)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2.0;
      doubleArray0[0] = 2.0;
      double double1 = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.5;
      double double2 = 0.13333332538604736;
      doubleArray0[3] = 0.13333332538604736;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)96;
      byteArray0[0] = (byte)96;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      String string0 = "org.apache.commons.math.util.MathUtils$1";
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("org.apache.commons.math.util.MathUtils$1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.org.apache.commons.math.util.MathUtils$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)37);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-286.8), (-514.1699855));
      // Undeclared exception!
      try { 
        MathUtils.round((-2237.837F), (int) (byte)37, 2520);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,520, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 1334;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 1334);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,334
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-0.16624879837036133);
      doubleArray0[4] = 4820.30031105528;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(302);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((-2147483648L), (long) 1);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 4820.30031105528;
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      short short0 = MathUtils.sign((short)2690);
      int int1 = MathUtils.mulAndCheck((int) (short)1, (-347));
      double double3 = MathUtils.cosh(Double.NaN);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.pow(6402373705728000L, 6402373705728000L);
      double double0 = MathUtils.cosh(0.0);
      double double1 = MathUtils.binomialCoefficientLog(1357, 1357);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.hash((-1756.8647));
      long long0 = MathUtils.subAndCheck((long) (-1284390883), (long) (-1284390883));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (-286.85), (-582.74129556));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(47, 1240);
      long long0 = MathUtils.addAndCheck(0L, (long) 47);
      long long1 = MathUtils.gcd((long) 47, 3628800L);
      long long2 = MathUtils.lcm((long) 47, (long) 1240);
      int int1 = MathUtils.mulAndCheck(1240, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3628800L;
      doubleArray0[1] = (double) 58280;
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)7);
      long long0 = MathUtils.lcm((long) (byte)7, (long) (byte)1);
      long long1 = MathUtils.addAndCheck(1715L, 6402373705728000L);
      long long2 = MathUtils.lcm(0L, 6402373705728000L);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-924.751094074019), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 6402373705728000L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 683.66748003;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = (-3119.40537250713);
      int int0 = MathUtils.compareTo(0.0, (-2178.53430291), (-3119.40537250713));
      int int1 = 0;
      double double2 = MathUtils.binomialCoefficientLog(1, 0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(763L, 121645100408832000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(67, 67);
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 0.0, 67);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2666);
      intArray0[1] = 67;
      intArray0[2] = 67;
      intArray0[3] = 134;
      intArray0[4] = 67;
      intArray0[5] = 134;
      intArray0[6] = 134;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(0, (-323));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("$ph'xSk;HNP");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.$ph'xSk;HNP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 9;
      // Undeclared exception!
      try { 
        MathUtils.round((-1011.715F), 9, 9);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 9, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 3711;
      int int1 = 17;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3711, 17);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.7853981633974483, 6297);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, Double.NaN);
      long long0 = MathUtils.binomialCoefficient(674, (-58));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-640L), (-640L));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-255);
      int int1 = (-1125);
      int int2 = MathUtils.lcm((-255), (-1125));
      long long0 = MathUtils.lcm((long) (-1125), 6402373705728000L);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)30;
      byteArray0[0] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int3 = bigInteger1.signum();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      boolean boolean0 = bigInteger1.equals("Dx;R1(&<~n7");
      BigInteger bigInteger3 = bigInteger1.or(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.shiftLeft((-255));
      // Undeclared exception!
      try { 
        bigInteger0.pow((-1125));
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.indicator((long) 0);
      int int1 = MathUtils.gcd(0, (-184));
      long long1 = MathUtils.factorial(4);
      float float0 = MathUtils.sign((float) 4);
      float float1 = MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.pow(5L, 5L);
      double double0 = MathUtils.sign((double) (short)0);
      long long1 = MathUtils.pow(9154082963658192752L, 130);
      long long2 = MathUtils.factorial((short)0);
      double double1 = MathUtils.binomialCoefficientLog(1067, 0);
      int int0 = MathUtils.subAndCheck((int) (short)0, 197);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3125L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-2644281811660520851L), (long) (-197));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,644,281,811,660,520,851^-197)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.986821492305628E-8, (-1377.57491), (-1377.57491));
      int int0 = 1048;
      double double0 = MathUtils.binomialCoefficientLog(1932735283, 1048);
      int int1 = 2879;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1932735283, 2879);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.sign(206.020236518929);
      int int0 = MathUtils.pow((-1617), 10);
      int int1 = MathUtils.mulAndCheck(5, (-3116));
      double double1 = MathUtils.indicator((double) (-1617));
      long long0 = MathUtils.gcd((long) (-15580), (long) (-1617));
      long long1 = MathUtils.subAndCheck(0L, 1L);
      double double2 = MathUtils.normalizeAngle((-1L), 1.625);
      // Undeclared exception!
      try { 
        MathUtils.round((-942.94F), 0, 92);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 92, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-767.5F), 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1635.181718;
      doubleArray0[3] = (double) (-767.5F);
      doubleArray0[4] = (double) (-768.0F);
      doubleArray0[5] = (double) (-768.0F);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-767.5F);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1,635.182 > -767.5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.indicator(998.8);
      int int0 = MathUtils.hash(998.8);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2107.720887525216, (-1846.478759104426), 67);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("org.apache.commons.math.util.MathUtils", 0);
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-821.373);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = (-1466.42859163909);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1288.726404177);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign((-59L));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-107^-107)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1070.860027082), (-942.797902711813));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,711,276,025^-1,711,276,025)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = 168;
      int int1 = 7;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 168, 7);
      } catch(ArithmeticException e) {
         //
         // Inexact result from rounding
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = (-522L);
      long long1 = MathUtils.lcm(1493L, (-522L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 3032;
      float float0 = MathUtils.round(1824.441F, 3032);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 3032;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) 1824.441F;
      doubleArray0[5] = 0.008336750013465571;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = (double) Float.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, Float.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-2179);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2179));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,179
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2811);
      int[] intArray1 = new int[4];
      intArray1[0] = (-2811);
      intArray1[1] = 189;
      intArray1[2] = (-2811);
      intArray1[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-814.5), 0.0, 3899.0440761019213);
      long long0 = MathUtils.sign((-764L));
      double double0 = MathUtils.sinh(3899.0440761019213);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.11764700710773468, 0.11764700710773468, 0.11764700710773468);
      int[] intArray0 = new int[2];
      int int0 = 63;
      intArray0[0] = 63;
      intArray0[1] = 464;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.indicator(1.0F);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3101.484544;
      doubleArray0[2] = (-1.951032035);
      doubleArray0[3] = 896.0;
      doubleArray0[4] = 197.551;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,101.485 >= -1.951)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-188.89), (-188.89));
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.indicator((-1797L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round(832.8422195204413, 1);
      float float0 = MathUtils.round((float) (-1L), 82);
      int int0 = MathUtils.indicator(1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = 156.23686F;
      float float1 = MathUtils.indicator(156.23686F);
      int int0 = (-1042);
      float float2 = MathUtils.round(156.23686F, (-1042));
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (long) (-1042));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,042)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3443.307);
      doubleArray0[1] = 0.041666663879186654;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.distance(doubleArray1, doubleArray1);
      boolean boolean0 = MathUtils.equals(0.041666663879186654, (-4238.75), 66);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-3443.307), (-3443.307), 66);
      int int0 = MathUtils.mulAndCheck(66, 66);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 0.041666663879186654);
      long long0 = MathUtils.pow(0L, 4356);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(203, 203);
      double double1 = MathUtils.sinh(1151.7);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-63));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      int int0 = MathUtils.pow(0, 0);
      double double0 = MathUtils.binomialCoefficientDouble(1, 0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(849, 1994);
      int int1 = MathUtils.pow(1652, 2848);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.subAndCheck(741L, 2380L);
      double double0 = MathUtils.normalizeAngle((-655.4637498), 1.304E19);
      double double1 = MathUtils.normalizeAngle(2380L, 1.304E19);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.addAndCheck(1456L, (-479L));
      long long1 = MathUtils.gcd(0L, 977L);
      double double1 = MathUtils.log(0.008333333333329196, (-479L));
      int int0 = MathUtils.lcm(52, 895);
      int int1 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      int int0 = (-2726);
      try { 
        MathUtils.pow((-2726), (long) (-2726));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,726^-2,726)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(18.6228, 18.6228);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 18.6228;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int0 = MathUtils.compareTo(18.6228, 18.6228, 18.6228);
      int int1 = MathUtils.compareTo(1.1921056801463227E-8, 54.46, (-978.288));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-45);
      try { 
        MathUtils.pow((-45), (long) (-45));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-45^-45)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.pow(2L, 241);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      int int0 = MathUtils.lcm(241, 241);
      double double0 = MathUtils.sinh((-1.5707963267948966));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.sign((-566));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) (-566);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-566);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-566);
      doubleArray0[6] = (double) (-566);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.19999999999923582);
      int int1 = MathUtils.compareTo(0.0, 1.304E19, 1.304E19);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 3.141592653589793;
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 2;
      int int1 = 521;
      // Undeclared exception!
      try { 
        MathUtils.round(1.3245471311735498E-8, 2, 521);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1265), (-1265));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,265
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = MathUtils.sign((-707));
      int int1 = MathUtils.sign((-996));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(185, 185);
      int int0 = 6;
      double double1 = MathUtils.round((double) 185, 6);
      double double2 = MathUtils.scalb(6, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1101.7181435821662;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = 185.0;
      doubleArray0[7] = 185.0;
      doubleArray0[8] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 1,101.718)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = (-234L);
      long long1 = MathUtils.addAndCheck((-234L), 1950L);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1634));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,634
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(214.494445533404, 214.494445533404);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(6, 3563);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 6, k = 3,563
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1318.9689259919;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-768.66520403);
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(54, 54);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) 54;
      doubleArray0[2] = (double) 54;
      doubleArray0[3] = (double) 54;
      doubleArray0[4] = 0.3999999761581421;
      doubleArray0[5] = (double) 2916;
      doubleArray0[6] = (double) 2916;
      doubleArray0[7] = (double) 54;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.lcm(1205, 54);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.gcd(20, 59);
      int int1 = MathUtils.compareTo(59, 59, 3727.589432339);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.scalb(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.indicator(0L);
      int int1 = (-4350);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-4350), (-4350));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -4,350
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1713.37);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = (-4.503599627370496E15);
      doubleArray0[5] = (-548.0097604985508);
      doubleArray0[6] = (-2.356194490192345);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,713.37 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = MathUtils.round((-1988.048F), 1583, 0);
      long long0 = MathUtils.gcd(87178291200L, (-4413L));
      double double0 = MathUtils.sinh(0);
      int int0 = MathUtils.subAndCheck(0, 0);
      long long1 = MathUtils.lcm((long) 1583, (long) 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1583;
      doubleArray0[1] = (double) 87178291200L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1988.048F);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 87178291200L;
      doubleArray0[6] = (double) 3L;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1583;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = 20922789888000L;
      long long1 = MathUtils.sign(20922789888000L);
      int int0 = (-2008);
      int int1 = MathUtils.subAndCheck((-2008), 41);
      int int2 = 21;
      // Undeclared exception!
      try { 
        MathUtils.factorial(21);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-57));
      int int0 = (-1473);
      int int1 = 21;
      int int2 = MathUtils.subAndCheck((-1473), 21);
      int int3 = (-634);
      try { 
        MathUtils.pow((int) (byte) (-1), (-634));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-634)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-269);
      intArray0[1] = (-3309);
      intArray0[2] = 13;
      intArray0[3] = 7;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign(4503599627370495L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-82));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long0 = MathUtils.subAndCheck((-1774L), (-1774L));
      int int0 = MathUtils.hash(1.1102230246251565E-16);
      long long1 = MathUtils.sign((-1774L));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 1017118720, 0.625, (-858));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1012.8243, 1012.8243, 63);
      // Undeclared exception!
      try { 
        MathUtils.factorial(63);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.hash(0.125);
      double double0 = MathUtils.factorialLog(0);
      int int1 = MathUtils.pow(1069547520, (long) 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-937.54);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-1285.6795135);
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.equals(5607.269188, (-1362.589), (-635));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1424.2059032, (-1092.8464));
      float float0 = MathUtils.round((-804.5711F), 164);
      float float1 = MathUtils.round((float) 164, 164);
      long long0 = MathUtils.pow((long) 164, 164);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.5;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2280.629791);
      doubleArray0[3] = 3352.721532876;
      doubleArray0[4] = 3945.8;
      doubleArray0[5] = (-1942.166965421541);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1942.166965421541);
      doubleArray1[1] = (-2280.629791);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      double double1 = MathUtils.log(13.0, 3945.8);
      try { 
        MathUtils.pow(8, (-3653));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (8^-3,653)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1979);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (short)1);
      float float0 = MathUtils.round((float) (short)1, (-3055));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1979;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-933);
      intArray0[1] = (-2053);
      intArray0[2] = 2782;
      intArray0[3] = (-128);
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd(1307674368000L, 158L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1307674368000L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2053);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-933);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.indicator(5648769086999809661L);
      int int0 = MathUtils.gcd((-837), (-837));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5648769086999809661L;
      doubleArray0[1] = (double) 5648769086999809661L;
      doubleArray0[2] = (double) (-837);
      doubleArray0[3] = (-1109.1500545105077);
      doubleArray0[4] = (double) 5648769086999809661L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 5648769086999809661L;
      doubleArray0[7] = (double) 5648769086999809661L;
      doubleArray0[8] = (double) 5648769086999809661L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (5,648,769,086,999,810,000 > -837)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1283, 1283);
      int int0 = MathUtils.compareTo(1L, 1L, 1L);
      long long1 = MathUtils.lcm(798L, (long) 1283);
      double double0 = MathUtils.factorialLog(2301);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1060.16113427), (-6644.4117), (-6644.4117));
      int int1 = MathUtils.indicator(1);
      long long0 = MathUtils.pow((long) 1, 0L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1217.6964), Double.POSITIVE_INFINITY, 2797.4798061);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.log(787.35, 787.35);
      short short0 = MathUtils.indicator((short)0);
      short short1 = MathUtils.sign((short)534);
      double double1 = MathUtils.sinh((-1906.463271029416));
      float float0 = MathUtils.sign(Float.NaN);
      int int0 = MathUtils.subAndCheck((int) (short)534, (int) (short)1);
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 533;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = 0;
      intArray0[7] = (int) (short)534;
      intArray0[8] = (int) (short)1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1691);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1691;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1691;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1691;
      doubleArray0[5] = (double) (short)1691;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (1 <= 1,691)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3788.1;
      doubleArray0[1] = (-468.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,788.1 > -468)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.pow((-3105L), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0, (double) (-3105L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3105L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = (short)6;
      short short1 = MathUtils.indicator((short)6);
      double double0 = MathUtils.log((short)6, (short)1);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (short)6);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.gcd((-3094), 95);
      int int1 = MathUtils.pow(1, 1);
      double double0 = MathUtils.binomialCoefficientDouble(5593, 95);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-3094);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((long) 1);
      int int2 = MathUtils.pow(0, 1L);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 5593;
      doubleArray1[4] = (double) 0;
      double double2 = MathUtils.distance1(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(217, (-1312));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 217;
      doubleArray0[2] = (double) 217;
      doubleArray0[3] = (double) (-1312);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (-1312);
      doubleArray0[6] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1744);
      intArray0[1] = 0;
      intArray0[2] = 7;
      intArray0[3] = 3239;
      intArray0[4] = 0;
      intArray0[5] = 69;
      intArray0[6] = 100;
      intArray0[7] = 250;
      intArray0[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.factorialLog(2694);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2694, 1438);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 1946);
      boolean boolean0 = MathUtils.equals(0.5, (double) 1946);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.5);
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck(0, 1946);
      long long0 = MathUtils.subAndCheck(20922789888000L, (-507L));
      short short0 = MathUtils.indicator((short) (-165));
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean2 = MathUtils.equals(doubleArray1, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(1071645633, 0);
      short short1 = MathUtils.sign((short) (-1));
      boolean boolean3 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      int int2 = MathUtils.indicator((int) (byte)0);
      double double3 = MathUtils.scalb(1, 1946);
      boolean boolean4 = MathUtils.equalsIncludingNaN((-1338.591908), (double) (byte)0, 619);
      boolean boolean5 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = MathUtils.indicator(4607182418800017408L);
      byte byte0 = (byte)66;
      byte byte1 = MathUtils.indicator((byte)66);
      float float0 = (-706.54F);
      int int0 = 3807;
      // Undeclared exception!
      try { 
        MathUtils.round((-706.54F), 1989, 3807);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,807, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = MathUtils.gcd(3628800L, (-7278142539171889152L));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.sign(4044.3);
      int int0 = MathUtils.pow(31, (long) 31);
      long long0 = MathUtils.subAndCheck((long) (-2010103841), (long) 31);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 31, 0, (-2010103841));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      boolean boolean0 = MathUtils.equals((double) Float.NaN, (double) Float.NaN, (double) Float.NaN);
      int int0 = 2751;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 2751, 2751);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,751, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1283));
      int int0 = MathUtils.gcd(0, 4194304);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(6956, 6956);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      short short0 = MathUtils.indicator((short)1903);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1903;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(3952090531849364496L, (long) (short)1903);
      int int1 = MathUtils.mulAndCheck(67, (int) (short)1903);
      double double0 = MathUtils.factorialLog(1532);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck(0L, (-616L));
      int int2 = MathUtils.sign(11);
      boolean boolean2 = MathUtils.equals(0.0, 0.0, 3306);
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.factorialDouble(3306);
      byte byte0 = MathUtils.sign((byte)16);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2249);
      intArray0[1] = (int) (short)1903;
      double double4 = MathUtils.distance(intArray0, intArray0);
      double double5 = MathUtils.binomialCoefficientDouble(14, 11);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = MathUtils.gcd(720L, 0L);
      boolean boolean0 = MathUtils.equals((double) 0L, 0.11111095942313305, 10.0);
      long long1 = MathUtils.indicator(0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-2582.38302227));
  }
}
