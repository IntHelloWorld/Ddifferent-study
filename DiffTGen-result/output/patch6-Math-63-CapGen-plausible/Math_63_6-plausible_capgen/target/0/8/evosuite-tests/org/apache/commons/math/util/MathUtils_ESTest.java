/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:23:26 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.gcd(6L, 396L);
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = (-287);
      intArray0[2] = 20;
      intArray0[3] = (-182);
      intArray0[4] = (-1218);
      int[] intArray1 = new int[8];
      intArray1[0] = (-182);
      intArray1[1] = 17;
      intArray1[2] = 20;
      intArray1[3] = 20;
      intArray1[4] = 20;
      intArray1[5] = 20;
      intArray1[6] = (-1218);
      intArray1[7] = (-287);
      double double0 = MathUtils.distance(intArray0, intArray1);
      double double1 = MathUtils.distance(intArray1, intArray1);
      Random.setNextRandom(2142194279);
      long long1 = MathUtils.subAndCheck((long) 2142194279, (long) (-287));
      boolean boolean0 = MathUtils.equals((double) 396L, (double) 20);
      long long2 = MathUtils.sign((-5421L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 138.76687667144);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = (-426L);
      long long1 = MathUtils.indicator((-426L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      String string0 = bigInteger1.toString(8);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.mod(bigInteger2);
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger4 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(4563L, 9193070505571053912L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = (-566.052063929);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-566.052063929));
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = (-2803);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2803), (-2803));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,803
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.log(6.283185307179586, (-536.703528));
      int int0 = MathUtils.pow(529, (long) 529);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-536.703528);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = (-536.703528);
      doubleArray0[6] = (-536.703528);
      doubleArray0[7] = (double) 529;
      doubleArray0[8] = (-536.703528);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.pow(1180, 1180);
      int[] intArray0 = new int[3];
      intArray0[0] = 529;
      intArray0[1] = 0;
      intArray0[2] = 1180;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.factorial((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 826L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      byte byte0 = MathUtils.sign((byte)47);
      double double0 = MathUtils.factorialDouble(234);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (double) (-1.0F), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9193070505571053912L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 9,193,070,505,571,053,912 + 9,218,868,437,227,405,312
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = MathUtils.indicator(0);
      int int3 = (-4184);
      int int4 = 0;
      int int5 = MathUtils.pow((-4184), 0);
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 1.0, (-2911));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.indicator(2906);
      long long0 = MathUtils.pow((-700L), (long) 1);
      double double0 = MathUtils.factorialLog(1);
      float float0 = MathUtils.indicator(592.9225F);
      double double1 = MathUtils.cosh(2.0);
      int int1 = 89;
      int int2 = MathUtils.addAndCheck(1524, 89);
      long long1 = MathUtils.pow((long) 1524, 1046L);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.sign(2520L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2520L;
      doubleArray0[1] = (double) 2520L;
      doubleArray0[2] = (double) 2520L;
      doubleArray0[3] = (double) 2520L;
      doubleArray0[4] = (double) 1L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.indicator(2520L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1L, 244);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.valueOf("INCREASING");
      float float0 = MathUtils.sign(Float.NaN);
      double double1 = MathUtils.normalizeAngle(0.0, 2434.9880718179506);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) Float.NaN;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (-2320.725126392646);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2434.9880718179506;
      doubleArray1[7] = (double) 244;
      double double2 = MathUtils.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1141.1973512351);
      long long0 = MathUtils.subAndCheck(3628800L, 3628800L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1141.1973512351;
      doubleArray0[2] = (double) 3628800L;
      doubleArray0[3] = 1141.1973512351;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = 1720.25921793026;
      doubleArray0[7] = (double) 3628800L;
      doubleArray0[8] = (double) 3628800L;
      boolean boolean1 = MathUtils.equals(doubleArray0, (double[]) null);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.round((-3.940510424527919E-20), 75);
      long long1 = MathUtils.gcd(0L, 3062L);
      double double2 = MathUtils.indicator((-1541.5797345));
      long long2 = MathUtils.sign(3062L);
      double double3 = MathUtils.sign((-3.940510424527919E-20));
      int int0 = MathUtils.hash(16.63);
      long long3 = MathUtils.gcd(0L, 2513L);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1140.4696975432;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(0L, 0L);
      double double1 = MathUtils.binomialCoefficientDouble(1420, 1420);
      long long1 = MathUtils.addAndCheck(0L, 1021L);
      boolean boolean0 = MathUtils.equals((-1183.3600385035), (double) 0L, (double) 1021L);
      int int0 = MathUtils.mulAndCheck(0, 1420);
      double double2 = MathUtils.factorialDouble(1420);
      boolean boolean1 = MathUtils.equalsIncludingNaN(5434.01638507, 0.1538461446762085, 3716.0865585);
      double double3 = MathUtils.round(0.0, 0, 0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.mulAndCheck(1420, 0);
      double double4 = MathUtils.normalizeAngle(1140.4696975432, (-255.6));
      double double5 = MathUtils.binomialCoefficientLog(1420, (-3212));
      long long2 = MathUtils.gcd(20922789888000L, (long) 0);
      double double6 = MathUtils.sign((-1595.3));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      int int3 = bigInteger0.bitLength();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1021L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.round(3.834E-20, 173);
      double double1 = MathUtils.binomialCoefficientLog(79, 6);
      long long0 = MathUtils.mulAndCheck(3737L, 3737L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 6, 1645.9377039592132, (-3003.74245));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 173;
      doubleArray0[2] = 1645.9377039592132;
      doubleArray0[3] = 1645.9377039592132;
      doubleArray0[4] = 19.442997436027007;
      doubleArray0[5] = 3.834E-20;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck(0, 186);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3.834E-20, 1645.9377039592132);
      int[] intArray0 = new int[2];
      intArray0[0] = 186;
      intArray0[1] = (-598);
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.pow(79, 79);
      short short0 = MathUtils.sign((short) (-1283));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(39916800L, 121645100408832000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 2.0;
      // Undeclared exception!
      try { 
        MathUtils.equals(2.0, 2.0, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 39;
      int int1 = MathUtils.addAndCheck(39, 39);
      int int2 = 0;
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.indicator(Double.NaN);
      int int3 = MathUtils.hash((double) 1L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      int int4 = 18;
      BigInteger bigInteger2 = bigInteger0.clearBit(18);
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.compareTo((-742.1629257), (-742.1629257), (-742.1629257));
      int int1 = MathUtils.compareTo(1116.40801043, 0.0, 0);
      double double0 = MathUtils.scalb(0.0, 1);
      long long0 = MathUtils.addAndCheck(9193070505571053912L, (long) 1);
      long long1 = MathUtils.mulAndCheck((long) 1, (long) 1);
      byte byte0 = MathUtils.sign((byte) (-30));
      int int2 = MathUtils.indicator((-1171));
      long long2 = MathUtils.sign(4607182418800017408L);
      double double1 = MathUtils.round((-1009.4666625999105), 1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte) (-30);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-30);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 160;
      boolean boolean0 = MathUtils.equals((-326.4876061995), (-353.72574412547), 160);
      float float0 = MathUtils.indicator(153.1F);
      float float1 = MathUtils.indicator(153.1F);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-353.72574412547), Double.NaN, (-680.3518744218654));
      byte byte0 = MathUtils.sign((byte) (-105));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (-353.72574412547);
      doubleArray0[4] = (double) (byte) (-105);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(Double.NaN);
      int int2 = 4;
      int int3 = (-597);
      try { 
        MathUtils.pow(4, (-597));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4^-597)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = (double) 1L;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 3.141592653589793;
      doubleArray1[3] = 3.141592653589793;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) 1L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      long long1 = MathUtils.indicator(1L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("-'U\"iRPmY^<>N,+|");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.-'U\"iRPmY^<>N,+|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-80.4031);
      doubleArray0[5] = (-47.27474333611);
      doubleArray0[6] = (-1710.2748488);
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)4462);
      byte byte0 = MathUtils.indicator((byte)67);
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-811));
      float float0 = MathUtils.indicator((float) (short) (-1));
      double double0 = MathUtils.log(150.652245192, 0.0);
      double double1 = MathUtils.log((-179.90895952660279), 1543.48818668891);
      float float1 = MathUtils.round(0.0F, (int) (short) (-811));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)93;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, (-1044));
      long long1 = MathUtils.mulAndCheck((long) (-1044), 1L);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.or((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 206;
      intArray0[1] = 14;
      intArray0[2] = 158;
      intArray0[3] = 0;
      intArray0[4] = (-811);
      intArray0[5] = 1767;
      intArray0[6] = 0;
      intArray0[7] = (-1353);
      int[] intArray1 = new int[8];
      intArray1[0] = 14;
      intArray1[1] = 0;
      intArray1[2] = (-811);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-1353);
      intArray1[6] = (-1353);
      intArray1[7] = 206;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 8018, 11, (-2396));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,396, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = MathUtils.sign((-2016.07F));
      long long0 = MathUtils.gcd(6L, 6L);
      long long1 = 3628800L;
      long long2 = MathUtils.mulAndCheck((-3721L), 3628800L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.abs();
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger2);
      int int0 = bigInteger1.compareTo(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger2);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1626);
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)20;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-101,979,116,264,428^-101,979,116,264,428)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = MathUtils.lcm((-302932621132653753L), 0L);
      double double0 = MathUtils.round(0.0, 5, 5);
      double double1 = MathUtils.cosh(5);
      int int0 = MathUtils.hash((double) 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 5);
      long long1 = MathUtils.lcm(6227020800L, 6L);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 5;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 5;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.indicator((-1450.1F));
      int int2 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 61;
      intArray0[2] = 451;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 0);
      float float1 = MathUtils.sign((-2853.21F));
      double double1 = MathUtils.sign(6.283185307179586);
      int int1 = MathUtils.lcm(34, 1931);
      double double2 = MathUtils.round(3158.4645556993382, 2096);
      double double3 = MathUtils.binomialCoefficientLog(65654, 848);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(146, 146);
      long long0 = MathUtils.factorial(0);
      double double1 = MathUtils.round((double) 146, 230, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(146.0, (-986.456610371), 2.2250738585072014E-308);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-986.456610371);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 251.16439;
      MathUtils.checkOrder(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1L, 1491.13307, 251.16439);
      double double2 = MathUtils.scalb((-3382.1644123504), 0);
      short short0 = MathUtils.sign((short) (-2893));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.sign((-781.4815226));
      int int0 = MathUtils.pow(19, (long) 19);
      int[] intArray0 = new int[3];
      intArray0[0] = 19;
      intArray0[1] = 19;
      intArray0[2] = 19;
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 19;
      intArray1[2] = 19;
      int int1 = MathUtils.distanceInf(intArray0, intArray1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-306639989);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 19;
      doubleArray0[4] = (double) 19;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-482));
      byte byte0 = (byte) (-8);
      byte byte1 = MathUtils.sign((byte) (-8));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-8);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (-1693.67177862504);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo((-1.0), (-1449.389211), (byte) (-8));
      long long0 = MathUtils.subAndCheck((long) (byte) (-1), (long) 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(1461.506493412);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = (-1);
      int int2 = MathUtils.addAndCheck((-1), (int) (short) (-482));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-1 >= -1,693.672)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      long long2 = MathUtils.lcm(0L, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.pow(121645100408832000L, 0);
      int int0 = MathUtils.subAndCheck(493, 222);
      int int1 = MathUtils.subAndCheck(31, 271);
      double double0 = MathUtils.binomialCoefficientLog(271, 0);
      byte byte0 = MathUtils.indicator((byte) (-77));
      int int2 = (-807);
      try { 
        MathUtils.pow(271, (-807));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (271^-807)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1969.09492), (-1.0), (-43));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = MathUtils.round(3152.15F, (-2047));
      short short0 = MathUtils.indicator((short)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)23;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)23);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1131.4158727307997, 1.0);
      float float0 = MathUtils.indicator((-1635.794F));
      int int0 = MathUtils.subAndCheck(0, (-1893));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-1447);
      int int1 = MathUtils.sign((-1447));
      int int2 = MathUtils.compareTo(0.0, (-1447), 0.0);
      int int3 = (-1648);
      int int4 = (-979);
      int int5 = MathUtils.gcd((-1648), (-979));
      long long0 = (-813L);
      try { 
        MathUtils.pow((-813L), (-1648));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-813^-1,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      int int1 = 938;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 938);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 938
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4555.320952043;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1250.404139);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2993.23850269288;
      doubleArray0[5] = 0.19999999999923582;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = 461.03842871;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-1,250.404 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.cosh(2596.387580651904);
      int int0 = (-1016);
      int int1 = MathUtils.sign((-1016));
      int int2 = (-705);
      int int3 = 198;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-705), 198);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -705, k = 198
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-132);
      try { 
        MathUtils.pow((-132), (long) (-132));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-132^-132)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(351.7532782716, Double.POSITIVE_INFINITY);
      int int0 = MathUtils.lcm(3280, 3280);
      int int1 = MathUtils.pow(3280, 1929);
      int[] intArray0 = new int[4];
      intArray0[0] = 3280;
      intArray0[1] = 1929;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1929;
      intArray1[6] = 1929;
      intArray1[7] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-2430);
      try { 
        MathUtils.pow((-2430), (long) (-2430));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,430^-2,430)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(256);
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      int int1 = 0;
      boolean boolean0 = bigInteger4.isProbablePrime(0);
      long long0 = MathUtils.indicator((-4035746434778044925L));
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger2, bigInteger4);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-4035746434778044925L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 256;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -4,035,746,434,778,044,900)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      int int0 = bigInteger0.intValue();
      int int1 = 343;
      BigInteger bigInteger1 = bigInteger0.flipBit(343);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int int2 = MathUtils.indicator(343);
      double double0 = MathUtils.binomialCoefficientLog(48, 1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("window size must be positive ({0})");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.window size must be positive ({0})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.sign((-1601.65307277228));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1601.65307277228);
      doubleArray0[1] = (-1601.65307277228);
      doubleArray0[2] = (-1601.65307277228);
      doubleArray0[3] = (-1601.65307277228);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1601.65307277228);
      doubleArray0[7] = (-1601.65307277228);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,601.653 >= -1,601.653)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 719);
      long long0 = MathUtils.subAndCheck((long) 719, (long) 719);
      boolean boolean0 = MathUtils.equals(0.0, (double) 0L, 495);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 719;
      doubleArray0[6] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck((-3153), 495);
      int int1 = 226;
      int int2 = MathUtils.mulAndCheck(1269, 226);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) (-3153);
      doubleArray1[3] = (double) 226;
      doubleArray1[4] = (double) 226;
      doubleArray1[5] = (double) 495;
      doubleArray1[6] = (double) (-3153);
      double double2 = MathUtils.distance1(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1151.4863, 495.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1390L), (-1390L));
      byte byte0 = MathUtils.indicator((byte) (-70));
      long long1 = MathUtils.addAndCheck(4577762542105553359L, 4577762542105553359L);
      int int0 = MathUtils.compareTo((byte) (-1), 1869.0, 1869.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-70);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 9155525084211106718L;
      doubleArray1[1] = 1259.7;
      doubleArray1[2] = 1869.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int1 = (-233);
      float float0 = MathUtils.round((float) (byte) (-1), (-233));
      int int2 = 0;
      double double1 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int1 = MathUtils.sign(0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1L, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      float float0 = MathUtils.indicator((float) 0);
      short short0 = MathUtils.sign((short)8);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(16);
      double double2 = MathUtils.scalb(838.0316690597422, 665);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 905.5046222546583);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 905.5046222546583;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (-1437.58440954012);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int1 = MathUtils.gcd(665, 989);
      long long1 = MathUtils.pow(661L, 4130);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4043.53721;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.7553817452272217E-6;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-683));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -683
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(306.577064717805, 1021.64368, 13);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = MathUtils.sign((-1919.198F));
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.pow((long) (byte)0, (int) (byte)0);
      int int0 = MathUtils.mulAndCheck(1, (int) (byte)0);
      double double0 = MathUtils.log(1164.349, (-1919.198F));
      short short0 = MathUtils.sign((short) (byte)0);
      long long1 = MathUtils.pow(2443L, (int) (byte)0);
      short short1 = MathUtils.sign((short)1517);
      double double1 = MathUtils.sinh(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)1517;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.lcm(666L, (-2362L));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.sign((-3060L));
      long long1 = MathUtils.gcd(729L, (-3060L));
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 9L;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.compareTo(0, 1, 2.2250738585072014E-308);
      float float0 = MathUtils.round((-1258.7756F), 2959, 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1), (double) 2959);
      byte byte0 = MathUtils.sign((byte) (-126));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, (-389.8645897179), (-389.8645897179));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-389.8645897179), (-389.8645897179));
      double double0 = 0.0;
      double double1 = MathUtils.log(1173.6750992905, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1778), 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,778, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      float float0 = mockRandom0.nextFloat();
      long long0 = mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(66, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.add(bigInteger0);
      int int0 = bigInteger0.compareTo(bigInteger1);
      int int1 = bigInteger0.signum();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 66);
      long long1 = MathUtils.pow(0L, 0L);
      long long2 = MathUtils.sign(87178291200L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 87178291200L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 1;
      byte[] byteArray0 = bigInteger1.toByteArray();
      doubleArray1[4] = (-102.49689129801);
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 0.0F;
      doubleArray1[8] = (double) 87178291200L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double0 = MathUtils.sign((double) 87178291200L);
      byte byte0 = MathUtils.sign((byte)61);
      boolean boolean1 = MathUtils.equalsIncludingNaN(848.4967, 0.0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 41;
      int int1 = MathUtils.pow(41, 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      float float0 = MathUtils.round((-2872.9978F), (-2684), 0);
      long long0 = MathUtils.addAndCheck((-1030L), 1121L);
      long long1 = MathUtils.subAndCheck((-1030L), 91L);
      int int0 = MathUtils.hash((double) 91L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.factorial((short)0);
      float float0 = MathUtils.round(Float.NaN, (int) (short)0);
      int int0 = MathUtils.gcd(0, (int) (short)0);
      int int1 = 9;
      float float1 = MathUtils.round(Float.NaN, 9, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign(469.8522139593);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.pow((long) (short)0, (long) (short)0);
      long long2 = 1089L;
      int int2 = MathUtils.pow(0, 1089L);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 14);
      long long0 = MathUtils.pow((long) 14, 14);
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, (-48.6929277), (double) 14);
      long long1 = MathUtils.gcd((long) 14, 1819L);
      float float1 = MathUtils.round(899.9326F, 14);
      int int0 = MathUtils.gcd(76, 76);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) 11112006825558016L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.375);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-335.2722376642);
      doubleArray0[2] = (-479.6032200533);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-753.9587828978356), (-753.9587828978356), (-753.9587828978356));
      long long0 = MathUtils.addAndCheck((-2299L), 0L);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(190);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = 345;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1, 345);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 345
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.11113807559013367, 0.19999999999923582, 0.19999999999923582);
      boolean boolean0 = MathUtils.equals(6.283185307179586, (-6690.2169));
      short short0 = MathUtils.sign((short)1944);
      boolean boolean1 = MathUtils.equals((double) 0, (-1012.4));
      boolean boolean2 = MathUtils.equals(0.01745329052209854, (-6690.2169));
      int int1 = MathUtils.pow(0, 0);
      int int2 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.cosh(1057.8279996437195);
      int int3 = MathUtils.addAndCheck(138, 0);
      short short1 = MathUtils.indicator((short)445);
      double double1 = MathUtils.cosh(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)1944;
      int int4 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.19999999999923582);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-1379);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1379), (-1379));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,379
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-374.1627);
      doubleArray0[2] = 0.008333333333333333;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(0.0);
      float float0 = MathUtils.round(657.446F, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-374.1627), (-374.1627), (double) 657.446F);
      double double2 = MathUtils.scalb(0.0, 0);
      int int0 = MathUtils.lcm(0, 0);
      float float1 = MathUtils.sign((float) 0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.gcd((-1350111497), 0);
      boolean boolean1 = MathUtils.equals(0.0, 1807.0937, 0.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-361.398);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1952.977);
      doubleArray0[5] = 10.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1101.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.sign(158);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 174;
      int int1 = MathUtils.mulAndCheck(174, 174);
      double double0 = MathUtils.normalizeAngle(174, 0.0);
      double double1 = MathUtils.factorialLog(174);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 32;
      int int1 = MathUtils.subAndCheck(19, 32);
      long long0 = MathUtils.subAndCheck(3492L, 6244L);
      long long1 = MathUtils.gcd(121645100408832000L, (long) 19);
      int int2 = 478;
      int int3 = MathUtils.mulAndCheck(19, 478);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (-13));
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      BigInteger bigInteger4 = bigInteger3.add(bigInteger1);
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger5 = bigInteger0.and(bigInteger3);
      BigInteger bigInteger6 = bigInteger0.not();
      BigInteger bigInteger7 = BigInteger.valueOf(0L);
      BigInteger bigInteger8 = bigInteger0.shiftLeft(626);
      BigInteger bigInteger9 = MathUtils.pow(bigInteger0, 0L);
      short short0 = MathUtils.sign((short)239);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(1061L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 2185);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,185
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathUtils.round((-3693.5), 169);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3693.5), (double) 169, (-1371.0));
      float float0 = MathUtils.sign((-2532.71F));
      double double1 = MathUtils.sinh((-1.0F));
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (-1536));
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1236.6671002, 286.044, 2.2250738585072014E-308);
      double double3 = MathUtils.binomialCoefficientLog(203, 169);
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 169;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-1536);
      intArray0[4] = 203;
      intArray0[5] = 203;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = MathUtils.sign((-2876.14F));
      long long0 = MathUtils.sign((-2754L));
      double double0 = (-1730.84602935);
      boolean boolean0 = MathUtils.equals((-1730.84602935), (double) (-2754L), (-1730.84602935));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2610, 105);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      short short0 = bigInteger0.shortValueExact();
      long long0 = (-538L);
      try { 
        MathUtils.pow(bigInteger0, (-538L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-538)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.sign((-1245L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1245L), Double.NaN, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1245L), 0.0, (-1818.208));
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-717.0107636), (double) 0L);
      double double1 = MathUtils.sign((-1.0));
      double double2 = MathUtils.scalb(0.0952233225107193, 138);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 138);
      byte byte0 = MathUtils.indicator((byte)12);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      try { 
        MathUtils.pow(bigInteger0, (-1941L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,941)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.pow(0, 2957);
      float float0 = MathUtils.round((float) 2957, 0);
      double double0 = MathUtils.sign(Double.NaN);
      int int1 = MathUtils.addAndCheck((-1281), 0);
      double double1 = MathUtils.binomialCoefficientDouble(0, (-4143));
      boolean boolean0 = MathUtils.equals((-916.9726058), 1.0, (double) 0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1281);
      intArray0[1] = (-1281);
      intArray0[2] = (-1281);
      intArray0[3] = (-4143);
      intArray0[4] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-4143);
      doubleArray0[2] = 1.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int3 = MathUtils.addAndCheck((-1281), 16);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.indicator((-370L));
      int int0 = MathUtils.pow(3053, 3053);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1395685411);
      intArray0[1] = (-1395685411);
      intArray0[2] = 3053;
      intArray0[3] = (-1395685411);
      intArray0[4] = (-1395685411);
      intArray0[5] = (-1395685411);
      intArray0[6] = (-1395685411);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm((long) (-1395685411), (long) (-1395685411));
      int int2 = MathUtils.hash((double) (-1L));
      int int3 = MathUtils.distance1(intArray0, intArray0);
      int int4 = MathUtils.gcd((-1395685411), 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(915.621851301353, (-2425.19682), (double) (-1L));
      long long2 = MathUtils.binomialCoefficient(1395685411, (-820));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 3841.4028364;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 6.283185307179586);
      long long0 = MathUtils.factorial(7);
      double double0 = MathUtils.log(6.283185307179586, 6.283185307179586);
      int int0 = MathUtils.pow(3140, (long) 3140);
      float float0 = MathUtils.indicator((float) 5040L);
      int int1 = MathUtils.pow(0, 7);
      double double1 = MathUtils.round((double) 7, 8);
      double double2 = MathUtils.sinh(7.0);
      int int2 = 0;
      int int3 = MathUtils.subAndCheck(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-35.98778956372), 0.0, (double) 3140);
      MathUtils.checkOrder(doubleArray1);
      int int4 = MathUtils.sign(0);
      long long1 = MathUtils.addAndCheck((long) 0, (long) 8);
      byte byte0 = MathUtils.indicator((byte) (-86));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.lcm(4501L, 4501L);
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.indicator((double) 4501L);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double double2 = MathUtils.cosh(0.0F);
      long long1 = MathUtils.addAndCheck((long) 0, (-2751L));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float float0 = 1539.4F;
      int int0 = 0;
      float float1 = MathUtils.round(1539.4F, 0, 0);
      boolean boolean0 = MathUtils.equals((double) 1539.4F, 1386.598533);
      long long0 = 6227020800L;
      long long1 = MathUtils.mulAndCheck(0L, 6227020800L);
      long long2 = MathUtils.pow((-4035746434778044925L), 0L);
      int int1 = MathUtils.pow(193, 19);
      long long3 = MathUtils.gcd(140L, 0L);
      int int2 = 2771;
      double double0 = MathUtils.binomialCoefficientDouble(2771, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Q8[y{_8Uc2");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Q8[y{_8Uc2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float float0 = MathUtils.round((-1376.4783F), 0);
      int int0 = 0;
      int int1 = MathUtils.lcm((-4297), 0);
      long long0 = MathUtils.gcd((long) 0, 4533L);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 2478, (-2269));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,269, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1346.676460932798);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 10.0;
      doubleArray0[5] = 2.384185791015625E-7;
      doubleArray0[6] = 0.5;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sign(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.compareTo(716.38468, 716.38468, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 716.38468;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 716.38468;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 13;
      double double0 = MathUtils.factorialLog(13);
      int int1 = (-117);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-117), 13);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -117, k = 13
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.binomialCoefficientDouble(1, 1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.5, 0.15, 12);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1888L), (-1888L));
      long long1 = MathUtils.gcd(0L, 0L);
      long long2 = MathUtils.addAndCheck((-1888L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.pow(214, 7);
      int int1 = MathUtils.lcm(276, (-1308));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.gcd((-382), (-382));
      long long0 = 3794L;
      long long1 = MathUtils.indicator(3794L);
      long long2 = MathUtils.gcd(1L, 3794L);
      double double0 = MathUtils.cosh(1L);
      int int1 = (-4589);
      int int2 = MathUtils.subAndCheck(1213, (-4589));
      // Undeclared exception!
      try { 
        MathUtils.factorial(306);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle((-997.0), (-997.0));
      boolean boolean0 = MathUtils.equals(190.035678, (-997.0));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-997.0);
      doubleArray0[1] = (-997.0);
      doubleArray0[2] = (-997.0);
      doubleArray0[3] = (-997.0);
      doubleArray0[4] = 190.035678;
      doubleArray0[5] = 190.035678;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int int0 = MathUtils.lcm(0, 0);
      short short0 = MathUtils.indicator((short) (-3007));
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short) (-3007), (-1262), (-1997));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,997, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-1821L), (-3974));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,821^-3,974)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.cosh(0.5);
      float float0 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      byte byte0 = MathUtils.sign((byte)8);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.1276259652063807;
      doubleArray0[1] = 1.1276259652063807;
      doubleArray0[2] = 2910.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(4208363204685324176L, (long) (byte)1);
      boolean boolean1 = MathUtils.equals(1.1276259652063807, 1.1276259652063807, (double) (byte)1);
      long long1 = MathUtils.subAndCheck((long) (byte)1, (-1254L));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      boolean boolean2 = MathUtils.equals(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-1254L);
      doubleArray2[2] = 1.1276259652063807;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 4208363204685324176L;
      double double3 = MathUtils.safeNorm(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = (-3140);
      int int1 = (-456);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-3140), (-456));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.sign(2419L);
      int int0 = MathUtils.indicator((-264));
      int int1 = MathUtils.addAndCheck(233, (-264));
      int int2 = MathUtils.subAndCheck(233, (-1401));
      double double0 = MathUtils.log(0.0, 2419L);
      double double1 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.04168701738764507;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = -0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1 > -0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2936L, 2147483648L);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      int int0 = MathUtils.addAndCheck(0, 246);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 246;
      doubleArray0[1] = (double) 246;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (246 <= 246)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 11;
      double double0 = MathUtils.factorialDouble(11);
      int int1 = MathUtils.subAndCheck(11, 11);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1008.8704024185), (double) 0);
      long long0 = MathUtils.subAndCheck((long) 11, 0L);
      byte byte0 = (byte)109;
      byte byte1 = MathUtils.sign((byte)109);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = (-2510L);
      try { 
        MathUtils.pow((-2510L), (-2510L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,510^-2,510)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.gcd(6L, 6L);
      long long1 = MathUtils.gcd(0L, (-890L));
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = 9;
      long long2 = MathUtils.factorial(9);
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = (-1993);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 6L, (-1993), (-1993));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.cosh((-15.2442225623857));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = (-1447L);
      int int0 = 0;
      long long1 = MathUtils.pow((-1447L), 0);
      double double0 = MathUtils.round((double) (-1447L), 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1447L);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1447L);
      doubleArray0[3] = (-1447.0);
      doubleArray0[4] = 1573.8;
      doubleArray0[5] = (-1447.0);
      doubleArray0[6] = (double) (-1447L);
      doubleArray0[7] = (double) (-1447L);
      doubleArray0[8] = (-1447.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1947.237842030054);
      double double1 = (-123.486);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(5261.433496696122, (-123.486), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1096.0;
      doubleArray0[2] = (-501.896693337024);
      doubleArray0[3] = 2.718281828459045;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = (short)1024;
      short short1 = MathUtils.sign((short)1024);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (short)1;
      doubleArray1[1] = (-501.896693337024);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double0 = MathUtils.distance1(doubleArray1, doubleArray1);
      double double1 = MathUtils.log((-501.896693337024), 2.718281828459045);
      int int0 = 61;
      long long0 = MathUtils.binomialCoefficient(61, 0);
      int int1 = 0;
      int int2 = MathUtils.addAndCheck(61, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (6.283 < 1,096)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)67);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      short short0 = MathUtils.sign((short)2516);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      double double0 = MathUtils.normalizeAngle(3.141592653589793, 0.2222222089767456);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean3 = MathUtils.equals(0.14285714285714285, 3.141592653589793, 3.141592653589793);
      double double1 = MathUtils.round(0.0, 2796, 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.log((-25.0078746209), (-3543.51381));
      double double2 = MathUtils.scalb((-673.59), 191);
      int int0 = MathUtils.gcd((-568), (-928));
      float float0 = MathUtils.sign((float) 0);
      short short0 = MathUtils.sign((short) (-871));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(11);
      boolean boolean0 = MathUtils.equals(1892.2389, (-656.0), 11);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.pow((-2197), 2523);
      int[] intArray0 = new int[2];
      intArray0[0] = 2044562099;
      intArray0[1] = 2523;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      try { 
        MathUtils.pow(0L, (long) (-2197));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,197)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      float float0 = MathUtils.round((float) 0, 0);
      double double0 = MathUtils.indicator((-1169.2213160930992));
      int int1 = MathUtils.mulAndCheck(0, (-384));
      double double1 = MathUtils.round((double) 0, (-384));
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      int int2 = MathUtils.sign(940);
      double double2 = MathUtils.factorialLog(17);
      short short0 = MathUtils.indicator((short)0);
      double double3 = MathUtils.scalb(10.0, 2491);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-346.0);
      doubleArray0[1] = 8.0E298;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-4141.946905586);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.indicator(8.0E298);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1157);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.addAndCheck(0L, (-441L));
      int int1 = MathUtils.subAndCheck(1066, 1157);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-4141.946905586);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) 1066;
      doubleArray1[3] = (double) 1157;
      doubleArray1[4] = (double) (byte)0;
      doubleArray1[5] = (double) (byte)0;
      doubleArray1[6] = (-346.0);
      doubleArray1[7] = (double) (-441L);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 706.48131559245;
      doubleArray0[2] = 31.1156307915547;
      doubleArray0[3] = 1.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(10, 10);
      double double0 = MathUtils.sinh((-1513.1019));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1513.1019);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 10;
      MathUtils.checkOrder(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 20;
      intArray0[1] = 10;
      intArray0[2] = 20;
      intArray0[3] = 10;
      intArray0[4] = 20;
      intArray0[5] = 12;
      intArray0[6] = 20;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-1L));
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (0 > -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-4594.0);
      doubleArray0[4] = (-666.8932788388867);
      doubleArray0[5] = (-1095.25401360014);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -4,594)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 702;
      intArray0[1] = 14;
      intArray0[2] = 128;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(5329.738207480816, 0.2);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.subAndCheck((-3183605296591799669L), (-2613L));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (-1802.283);
      doubleArray0[2] = (-1004.481);
      doubleArray0[3] = 1.304E19;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1.0), 1.9699272335463627E-8);
      int int0 = MathUtils.mulAndCheck(1128, 1128);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.pow((-1977L), 0);
      long long1 = MathUtils.addAndCheck(437L, (-1571L));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-116));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -116
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = (-2543);
      try { 
        MathUtils.pow(0L, (-2543));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,543)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.factorialLog(15);
      float float0 = MathUtils.round((float) 15, (-2330));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(2860);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = (-458.021539523);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 161.76255765411742;
      doubleArray0[4] = (-0.12502530217170715);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 6.283185307179586;
      doubleArray0[8] = 138.026899669094;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-458.022 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.indicator(984);
      double double0 = MathUtils.round(3305.83608526368, (-1392));
      int int1 = MathUtils.gcd((-1272), (-1392));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 24);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, bigInteger0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-188.944077468856);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(750);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 750;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (-3567.29);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.074, (-8.0E298), 0.19999954120254515);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(163, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.subAndCheck((-649), 34);
      float float0 = MathUtils.sign((float) 163);
      double double0 = MathUtils.sinh((-49.383840020074));
      long long1 = MathUtils.pow(0L, 720L);
      int int1 = MathUtils.pow(4194304, 1L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-649);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 2.2250738585072014E-308, (-2411.69));
      long long2 = MathUtils.pow(1L, 0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(9, 9);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2598);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.sign((-1556.6424));
      double double2 = MathUtils.normalizeAngle((-1556.6424), 9);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 1500;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 1500, 1500);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,500, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = (-2756);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2756));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,756
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1L), 3008L);
      double double0 = MathUtils.log(3007L, (-3743.36503));
      double double1 = MathUtils.normalizeAngle((-3743.36503), (-1L));
      // Undeclared exception!
      try { 
        MathUtils.round(678.16144F, (-1896), 9);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 9, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 257);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 150;
      int int1 = (-211);
      int int2 = MathUtils.addAndCheck(150, (-211));
      float float0 = MathUtils.sign((-601.87225F));
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1102.9065321734986, (double) (-601.87225F), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      float float0 = MathUtils.sign((-1081.5148F));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-109.55017612597936);
      doubleArray0[1] = (double) (-538L);
      doubleArray0[2] = 316.1;
      doubleArray0[3] = (double) (-1081.5148F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1081.5148F);
      doubleArray0[6] = 1.0E-6;
      doubleArray0[7] = (double) (-538L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 316.1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2170), (-2170));
      int int1 = MathUtils.subAndCheck(52, (-2170));
      int int2 = 236;
      int int3 = MathUtils.lcm(16, 236);
      int int4 = MathUtils.mulAndCheck(20, 2222);
      long long0 = MathUtils.indicator(2935890503282001226L);
      int int5 = 2715;
      int int6 = MathUtils.pow(2715, (long) 52);
      double double0 = MathUtils.indicator(13.0);
      long long1 = 1834L;
      long long2 = 187L;
      long long3 = MathUtils.mulAndCheck(1834L, 187L);
      int int7 = MathUtils.hash((-1510.98426905772));
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 10);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 10
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 2);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(191L, (long) 2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.scalb((-521.5), 1322);
      long long0 = MathUtils.pow((long) 1322, 11);
      long long1 = MathUtils.addAndCheck((long) 1322, (-357L));
      int int0 = (-792);
      int int1 = 1030;
      int int2 = MathUtils.lcm((-792), 1030);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-792);
      doubleArray0[1] = (double) 965L;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1262.3398332846243));
      double double2 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator(286.7899F);
      double double3 = MathUtils.factorialDouble(1322);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-792));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -792
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 560;
      intArray0[1] = (-975);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 560, (long) (-975));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.gcd(3226L, 3226L);
      long long1 = MathUtils.indicator(3226L);
      byte byte0 = MathUtils.indicator((byte)97);
      short short0 = MathUtils.indicator((short) (-1337));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1337);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.round(0.0F, (-1255));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1038.4838936), (double) (byte)1, 0.0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.sign((double) 0);
      long long0 = MathUtils.sign((long) 0);
      byte byte0 = MathUtils.sign((byte)115);
      double double1 = 6.283185307179586;
      double double2 = MathUtils.round(6.283185307179586, 0);
      int int1 = 42;
      double double3 = MathUtils.binomialCoefficientDouble(42, 8);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 2.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathUtils.scalb(1382.0, (-3338));
  }
}
