/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:23:29 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(512L, 1443L);
      long long1 = MathUtils.pow(4398046511103L, 98);
      byte byte0 = MathUtils.sign((byte)82);
      float float0 = MathUtils.round((float) (-431008558088191L), (int) (byte)1);
      long long2 = MathUtils.pow(1443L, (int) (byte)82);
      int int0 = MathUtils.pow((int) (byte)82, (int) (byte)82);
      int int1 = MathUtils.compareTo((-431008558088191L), 0.0, (-7948863223069781495L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 738816L;
      doubleArray0[1] = (double) (byte)82;
      doubleArray0[2] = (double) (-7948863223069781495L);
      doubleArray0[3] = (double) (byte)82;
      doubleArray0[4] = (double) 738816L;
      doubleArray0[5] = (double) (-1);
      int int2 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.round((-7.948863223069781E18), (-1731));
      short short0 = MathUtils.indicator((short) (byte)82);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1731), 98);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,731, k = 98
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.3333333134651184, 51.0, (-1328.13041410263));
      boolean boolean1 = MathUtils.equalsIncludingNaN(84.91022969232375, 84.91022969232375);
      int int0 = MathUtils.mulAndCheck((-424), (-424));
      int int1 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4194304, (-2627));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.indicator(879);
      long long0 = MathUtils.lcm(0L, 4093L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.subtract(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger5 = bigInteger0.shiftRight(205);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.addAndCheck(477, 1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1260L, 1260L);
      int int0 = 838;
      double double0 = MathUtils.binomialCoefficientLog(1731, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 838;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(148, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 0L, 0.0);
      int int1 = MathUtils.pow(1486, 821);
      MathUtils.checkOrder(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 148;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(883L, 188);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2047L, (-5624370520089290127L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.lcm(1267L, 1267L);
      int int0 = MathUtils.gcd(189, 139);
      short short0 = MathUtils.indicator((short)18);
      double double0 = MathUtils.scalb(6.283185307179586, 1);
      long long1 = MathUtils.subAndCheck((long) (short)18, 1L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1267L;
      doubleArray0[1] = (double) (short)18;
      doubleArray0[2] = (-2420.4727);
      doubleArray0[3] = (double) 139;
      doubleArray0[4] = 6.283185307179586;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.gcd((-1229), 190);
      double double1 = MathUtils.indicator((double) (short)1);
      short short1 = MathUtils.sign((short)3494);
      int int2 = MathUtils.subAndCheck((int) (short)1, 1);
      long long2 = MathUtils.subAndCheck((long) 139, 3628800L);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.indicator(456.58853850824);
      double double1 = MathUtils.sign(456.58853850824);
      boolean boolean0 = MathUtils.equals(1.0, (-2420.4727), (-2420.4727));
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2067);
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.sign(0);
      boolean boolean1 = MathUtils.equals((double) 0, (double) 0);
      double double3 = MathUtils.factorialDouble(207);
      double double4 = MathUtils.log(0, (-2067));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger3 = bigInteger1.flipBit(0);
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      double double5 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.indicator(70);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 21;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.indicator((long) 0);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 21;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (double) 21;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 118;
      boolean boolean0 = bigInteger0.testBit(118);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      int int1 = 0;
      double double0 = MathUtils.factorialLog(0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.11764700710773468, 0.11764700710773468, 0.0);
      int int2 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.11764700710773468;
      doubleArray0[1] = 0.11764700710773468;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.11764700710773468;
      doubleArray0[5] = (double) 0;
      byte[] byteArray0 = bigInteger0.toByteArray();
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int3 = 954;
      BigInteger bigInteger2 = bigInteger0.setBit(954);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (0 < 0.118)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.sign(0.3333333134651184);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 384;
      int int1 = MathUtils.addAndCheck(384, 384);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 768;
      doubleArray0[1] = (double) 384;
      doubleArray0[2] = 0.333333333333333;
      doubleArray0[3] = (double) 768;
      doubleArray0[4] = (double) 768;
      doubleArray0[5] = (double) 384;
      doubleArray0[6] = (double) 768;
      doubleArray0[7] = (double) 768;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 768);
      long long0 = MathUtils.sign(708L);
      short short0 = MathUtils.indicator((short)20);
      int int2 = (-396);
      double double1 = MathUtils.binomialCoefficientLog((short)20, (-396));
      float float1 = MathUtils.round((float) (short)1, 0);
      long long1 = MathUtils.factorial((short)1);
      double double2 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.031;
      doubleArray0[2] = 2073.40720341;
      doubleArray0[3] = (-3910.090321151162);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2.2250738585072014E-308;
      doubleArray0[6] = (-4508.4263312);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0.031)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.gcd((-540L), (-3792L));
      double double0 = MathUtils.cosh((-654.8714049586547));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = MathUtils.hash(2277.4408934396);
      long long0 = MathUtils.mulAndCheck((long) (-60212524), 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 2277.4408934396;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-60212524);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-60212524);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-60212524));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -60,212,524
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 82;
      int int1 = 18;
      long long0 = MathUtils.binomialCoefficient(82, 18);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 82, 18, 82);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 82, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      byte byte0 = (byte)39;
      byte byte1 = MathUtils.indicator((byte)39);
      float float2 = MathUtils.round(Float.NaN, 25);
      int int0 = MathUtils.compareTo((byte)39, (byte)1, (byte)39);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) Float.NaN;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (byte)39);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-383L), (-383L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 146689L;
      doubleArray0[1] = (double) (-383L);
      doubleArray0[2] = (double) (-383L);
      doubleArray0[3] = (double) 146689L;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sinh((-383.0));
      int int1 = 0;
      double double1 = MathUtils.round((double) 246069889, 0, 0);
      float float0 = MathUtils.round((float) 246069889, 246069889);
      float float1 = MathUtils.sign(Float.NaN);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = (-5565);
      boolean boolean1 = bigInteger0.isProbablePrime((-5565));
      double double2 = bigInteger0.doubleValue();
      boolean boolean2 = bigInteger0.testBit(246069889);
      byte byte0 = bigInteger0.byteValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-383L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-383)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      double double0 = (-2620.754020408135);
      boolean boolean0 = MathUtils.equals(13.0, (-2620.754020408135));
      double double1 = MathUtils.cosh(0L);
      double double2 = 1628.105385;
      double double3 = MathUtils.indicator(1628.105385);
      double double4 = MathUtils.scalb(3564.795, 183);
      double double5 = 1.625;
      boolean boolean1 = MathUtils.equals(4.370425953280813E58, 1.625, 183);
      int int0 = (-724);
      int int1 = MathUtils.pow((-724), 1L);
      int int2 = 4194304;
      int int3 = MathUtils.gcd(4194304, (-724));
      double double6 = 0.5;
      // Undeclared exception!
      try { 
        MathUtils.round(0.5, 183, 136);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.sign((-512L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-512L);
      doubleArray0[1] = (double) (-512L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-512L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1373.0, 0.2857142686843872, (-1.0));
      int int0 = MathUtils.lcm((-4433), (-267));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(10, 1183611);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 10, k = 1,183,611
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1471.3700502979;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (\u221E > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4294967295L, 4294967295L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 218;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 218);
      double double0 = MathUtils.binomialCoefficientDouble(656, 656);
      double double1 = MathUtils.cosh(0.0);
      double double2 = MathUtils.normalizeAngle((-841.01991), 0.0);
      long long0 = MathUtils.pow((long) 656, (long) 656);
      int int1 = MathUtils.pow(0, 2357);
      try { 
        MathUtils.pow(4, (-835));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4^-835)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 15;
      int int1 = MathUtils.gcd(15, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = 15;
      intArray0[3] = 15;
      intArray0[4] = 15;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int[] intArray1 = new int[6];
      intArray1[0] = 15;
      intArray1[1] = 15;
      intArray1[2] = 0;
      intArray1[3] = 15;
      intArray1[4] = 15;
      intArray1[5] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3596.485300441);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 1024.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1024.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.scalb((-4484.896), (-648));
      long long0 = MathUtils.addAndCheck((long) (-648), 0L);
      int int0 = (-2850);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2850));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,850
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = MathUtils.sign(596.28577F);
      int int0 = MathUtils.gcd((-3580), (-3580));
      int[] intArray0 = new int[4];
      intArray0[0] = 3580;
      intArray0[1] = (-3347);
      intArray0[2] = 3580;
      intArray0[3] = (-3580);
      int[] intArray1 = new int[9];
      intArray1[0] = 3580;
      intArray1[1] = (-3347);
      intArray1[2] = (-3347);
      intArray1[3] = (-3347);
      intArray1[4] = (-3347);
      intArray1[5] = (-3347);
      intArray1[6] = 3580;
      intArray1[7] = (-3347);
      intArray1[8] = (-3347);
      int int1 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.lcm(40, 4348);
      byte byte0 = MathUtils.indicator((byte)10);
      int int1 = MathUtils.mulAndCheck(43480, (int) (byte)1);
      int int2 = MathUtils.lcm(4348, (-1885));
      float float0 = MathUtils.round((float) 40, 2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(343.9, 343.9, Double.NEGATIVE_INFINITY);
      int int0 = 1791;
      int int1 = MathUtils.gcd(1791, 1791);
      int int2 = MathUtils.compareTo(1.997844754509471E-9, 2007.64936175, (-147.6194409514288));
      int int3 = MathUtils.gcd(0, 1791);
      int int4 = 0;
      int int5 = MathUtils.mulAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 1791, (-3958705157555305932L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 1L;
      long long1 = MathUtils.subAndCheck(1L, 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 0;
      double double1 = MathUtils.round(Double.NEGATIVE_INFINITY, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 148;
      int int1 = MathUtils.subAndCheck(148, 2675);
      int int2 = 523;
      double double0 = MathUtils.scalb((-2527), 523);
      int int3 = MathUtils.compareTo(148, 2675, (-6.93893747486002E160));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2527), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,527, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 846L);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 47;
      // Undeclared exception!
      try { 
        MathUtils.factorial(47);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = (-759.0);
      int int0 = 2480;
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, (-759.0), 2480);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = (byte)75;
      byte byte1 = MathUtils.sign((byte)75);
      float float0 = MathUtils.round((-791.077F), (int) (byte)75, (int) (byte)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-1586.5));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = (-1419L);
      try { 
        MathUtils.pow((-1419L), (-1419L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,419^-1,419)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.round(0.0, 4194304);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-35);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.clearBit(18);
      int int0 = bigInteger0.intValueExact();
      byte[] byteArray1 = bigInteger0.toByteArray();
      String string0 = bigInteger0.toString(18);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 4194304);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int1 = bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 61);
      double double0 = MathUtils.cosh(61);
      int int2 = MathUtils.addAndCheck(61, 1307);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 61;
      doubleArray0[3] = (-1311.5);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1307;
      doubleArray0[6] = (-1429.014829);
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.5830993332061267E-10, 54.4994049505347, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2205);
      double double0 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2205);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      double double3 = MathUtils.indicator(976.889361907533);
      float float0 = MathUtils.round(Float.NaN, (int) (byte)0, (int) (byte)0);
      byte byte1 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-616);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-616), (-616));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -616, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-549.8), 1300.4421, 1300.4421);
      long long0 = MathUtils.mulAndCheck((-1840L), (-1840L));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      String string0 = bigInteger1.toString();
      BigInteger bigInteger2 = bigInteger1.flipBit(123);
      BigInteger bigInteger3 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 66);
      // Undeclared exception!
      try { 
        MathUtils.round(2954.081, (-3225), (int) (byte) (-128));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 716L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 716L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.sign(3190);
      double double0 = MathUtils.round(1162.1975378772, (-2199), 1);
      int int1 = MathUtils.indicator(1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1162.1975378772, 734);
      int int2 = MathUtils.indicator(1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      boolean boolean0 = MathUtils.equals(1274.7910630741046, (double) 0);
      int int0 = MathUtils.pow(0, 0);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      long long2 = MathUtils.binomialCoefficient(0, 0);
      int int1 = MathUtils.lcm(1791, 15);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1791;
      doubleArray0[2] = (double) 8955;
      doubleArray0[3] = (double) 8955;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1791;
      doubleArray1[1] = (double) 8955;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 8955;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 4992;
      double double0 = MathUtils.factorialDouble(4992);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4992;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.gcd(9218868437227405312L, 9218868437227405312L);
      boolean boolean0 = MathUtils.equals((double) 9218868437227405312L, (-2411.1572795568154), 107);
      long long1 = MathUtils.pow(1307674368000L, 107);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-64.8050970823967), (double) 9218868437227405312L, 107);
      int int0 = MathUtils.pow(107, 9218868437227405312L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      short short0 = bigInteger0.shortValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-2352));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,352)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short short0 = MathUtils.sign((short)927);
      int int0 = MathUtils.gcd((int) (short)927, (int) (short)927);
      long long0 = MathUtils.addAndCheck((long) (short)927, (long) (short)927);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)927;
      doubleArray0[1] = (double) (short)927;
      doubleArray0[2] = (double) (short)927;
      doubleArray0[3] = (double) 927;
      doubleArray0[4] = (double) 1854L;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) (short)927;
      doubleArray0[8] = (double) 927;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(113);
      int int0 = MathUtils.pow(2204, 4294967295L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4294967295L;
      doubleArray0[1] = (double) 113;
      doubleArray0[2] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,294,967,295 >= 113)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 2628;
      BigInteger bigInteger1 = bigInteger0.shiftRight(2628);
      int int1 = (-1749);
      try { 
        MathUtils.pow(bigInteger0, (-1749));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,749)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equals(0.0, 2226.1585318);
      double double0 = MathUtils.log(0.0, 2226.1585318);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = (-1941);
      try { 
        MathUtils.pow(0, (-1941));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,941)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.lcm(18, 4348);
      byte byte0 = MathUtils.indicator((byte)10);
      int int1 = MathUtils.mulAndCheck(39132, (int) (byte)1);
      int int2 = MathUtils.subAndCheck((-1871), 2);
      float float0 = MathUtils.round(3430.8F, 2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-3958705157555305932L));
      int int0 = MathUtils.pow(31, 31);
      int int1 = MathUtils.pow(31, 0);
      int int2 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 31;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int3 = MathUtils.indicator(1);
      int int4 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 921884831;
      doubleArray1[1] = (double) (-2010103841);
      doubleArray1[2] = (double) (-3958705157555305932L);
      doubleArray1[3] = 1.3245471311735498E-8;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-2010103841);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (921,884,831 >= -2,010,103,841)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.0013888888689039883);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2146160981);
      intArray0[1] = (-578);
      int[] intArray1 = new int[4];
      intArray1[0] = (-578);
      intArray1[1] = (-2146160981);
      intArray1[2] = (-578);
      intArray1[3] = (-578);
      int int1 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.round((-144.635), 453);
      int int0 = MathUtils.subAndCheck(453, 453);
      int int1 = MathUtils.pow(16, (long) 16);
      boolean boolean0 = MathUtils.equalsIncludingNaN(966.80761459, (-2000.5317176445185), 9.0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = MathUtils.subAndCheck(453, 0);
      long long1 = MathUtils.sign((-5034868814120038111L));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 6.283185307179586);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.setBit(0);
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger3 = bigInteger1.max(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger5 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.flipBit(0);
      BigInteger bigInteger7 = bigInteger1.abs();
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger8 = bigInteger1.andNot(bigInteger0);
      BigInteger bigInteger9 = bigInteger0.abs();
      BigInteger bigInteger10 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger11 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.sign(6.283185307179586);
      short short1 = MathUtils.sign((short)64);
      long long0 = bigInteger1.longValueExact();
      double double1 = MathUtils.log((short)64, 0.0);
      long long1 = MathUtils.mulAndCheck((long) (short)64, (long) 1);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      short short2 = MathUtils.indicator((short) (-582));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 6
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(710, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 710;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 710;
      doubleArray0[8] = (double) 710;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.gcd((-4526), 0);
      int int2 = 0;
      double double1 = MathUtils.binomialCoefficientDouble(0, (-1));
      long long0 = MathUtils.pow((long) 710, (long) 0);
      double double2 = 2853.277;
      int int3 = 2377;
      double double3 = MathUtils.scalb(2853.277, 2377);
      float float0 = (-2526.0F);
      float float1 = MathUtils.sign((-2526.0F));
      long long1 = MathUtils.subAndCheck((long) 710, (long) (-1258446561));
      short short0 = MathUtils.indicator((short)5307);
      int int4 = MathUtils.addAndCheck((-1258446561), 710);
      double double4 = 1224.5999499068;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-1258445851), 1224.5999499068, (-1258446561));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1333));
      double double0 = 316.78686812;
      double double1 = MathUtils.indicator(316.78686812);
      int int0 = 6;
      double double2 = MathUtils.binomialCoefficientDouble(6, (short) (-1));
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), (long) (short) (-1));
      long long1 = 4095L;
      long long2 = (-293L);
      long long3 = MathUtils.mulAndCheck(4095L, (-293L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1059.6282801), (-1059.6282801), 1.0);
      double double3 = 0.49999999999999994;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.49999999999999994, (double) (short) (-1333), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.cosh(6.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(507.28679086675567, (-1716.25064861), (-933));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      float float0 = MathUtils.sign((-2136.446F));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-2136.446F);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2136.446F);
      doubleArray0[5] = (double) (-2136.446F);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.pow(500L, 500L);
      double double0 = MathUtils.scalb(2795.822969566369, 0);
      boolean boolean0 = MathUtils.equals((double) 0L, (-978.824035913));
      boolean boolean1 = MathUtils.equals((-978.824035913), 2795.822969566369, 2795.822969566369);
      short short0 = MathUtils.indicator((short) (-273));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)116;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 306.38745911394;
      doubleArray0[1] = 4172.3910443808;
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-4065L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,065)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.log(81.99714301281027, 81.99714301281027);
      double double1 = MathUtils.indicator(1.0);
      long long0 = MathUtils.gcd((-812L), (-812L));
      int int0 = 187;
      int int1 = MathUtils.pow(187, (long) 187);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd(2088835875, 187);
      short short0 = MathUtils.indicator((short) (-235));
      try { 
        MathUtils.pow((-1524), (-812L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,524^-812)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = MathUtils.gcd((-2984L), 0L);
      short short0 = MathUtils.indicator((short)244);
      byte byte0 = MathUtils.sign((byte)13);
      boolean boolean0 = MathUtils.equals((double) (short)1, (double) (byte)13, (int) (short)244);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-2984L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,984)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short short0 = MathUtils.sign((short)3056);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.scalb((short)1, 2310);
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.addAndCheck(6402373705728000L, 2657L);
      long long1 = MathUtils.pow(0L, (long) 2310);
      long long2 = MathUtils.lcm(0L, 0L);
      boolean boolean0 = MathUtils.equals((double) (short)3056, (double) 0L, 2061.1285820085);
      byte byte0 = MathUtils.indicator((byte)0);
      long long3 = MathUtils.addAndCheck((long) (short)1, 6402373705730657L);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-755);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-755), (-755));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -755
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.sinh((-1106.0));
      boolean boolean0 = MathUtils.equals((-1371.9), 2320.762);
      double double1 = MathUtils.sinh((-118.46324082533));
      int int0 = 195;
      long long0 = MathUtils.pow(2748L, 195);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-3534);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-72), (-3534));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -72
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-4271L), (-3166L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3166L);
      doubleArray0[1] = (double) (-4271L);
      doubleArray0[2] = (double) (-7437L);
      doubleArray0[3] = (double) (-7437L);
      doubleArray0[4] = (double) (-7437L);
      doubleArray0[5] = (double) (-3166L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-3,166 > -4,271)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 4376);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      double double0 = MathUtils.round(0.0, 215);
      int int0 = MathUtils.hash(2.85040095144011776E17);
      double double1 = MathUtils.scalb(0.0, (-452866541));
      int int1 = MathUtils.gcd(4194304, 0);
      float float0 = MathUtils.round(0.0F, 4194304);
      short short0 = MathUtils.sign((short) (-2189));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4194304;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 4194304;
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,194,304 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 16.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-135.28981734407424);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3960.9137184370884);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.normalizeAngle(3963.25583574668, (-3960.9137184370884));
      double double2 = MathUtils.round((-1028.9879), 201, 0);
      double double3 = MathUtils.normalizeAngle(2.0, (-3960.9137184370884));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 14;
      intArray0[2] = 201;
      intArray0[3] = 0;
      intArray0[4] = 201;
      intArray0[5] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 201;
      intArray1[2] = 201;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 201;
      intArray1[6] = 201;
      intArray1[7] = 14;
      intArray1[8] = 201;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3293, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3293;
      doubleArray0[1] = (double) 3293;
      doubleArray0[2] = (double) 3293;
      doubleArray0[3] = (double) 3293;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(0, 3293);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 3293;
      intArray0[2] = 0;
      intArray0[3] = (-5242);
      int[] intArray1 = new int[7];
      intArray1[0] = 3293;
      intArray1[1] = (-3293);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 3293;
      intArray1[5] = 3293;
      intArray1[6] = (-3293);
      int int2 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      int int0 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, (-560), (-560));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -560, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4.0;
      doubleArray0[4] = 0.06666666666666667;
      doubleArray0[5] = 1810.7696696490264;
      doubleArray0[6] = 9.313225746154785E-10;
      doubleArray0[7] = (-2022.650015863);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.pow((-302932621132653753L), 4499201580859392L);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double double0 = MathUtils.log((-1439.2011363), 4499201580859392L);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-3331.895553038);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-3,331.896 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-363);
      // Undeclared exception!
      try { 
        MathUtils.round((-377.458F), 34, (-363));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -363, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1260L, 1260L);
      int int0 = (-2688);
      int int1 = 148;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2688), 148);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,688, k = 148
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-996);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2483);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 0, 0L);
      double double1 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.indicator((-312.1616));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-312.1616), (-652.11));
      long long0 = MathUtils.factorial(0);
      float float0 = MathUtils.round((float) 0, (-1123));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = (-2659);
      int int1 = MathUtils.indicator((-2659));
      long long0 = (-3958705157555305932L);
      long long1 = 0L;
      long long2 = MathUtils.subAndCheck((-3958705157555305932L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-814));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -814
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      double double0 = MathUtils.indicator(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2205);
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.sign(0.0);
      long long0 = MathUtils.indicator((long) (-2205));
      short short0 = MathUtils.sign((short) (-3675));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-1101);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1101));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,101
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.sign((-425));
      double double0 = MathUtils.binomialCoefficientLog(2898, 2898);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-26));
      int int0 = 0;
      try { 
        MathUtils.pow(0, (int) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1375);
      try { 
        MathUtils.pow((-1375), (long) (-1375));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,375^-1,375)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = (-2135L);
      long long1 = MathUtils.subAndCheck((-1401L), (-2135L));
      int int0 = MathUtils.sign((-1963));
      int int1 = MathUtils.gcd(0, 0);
      double double0 = 1625.626941;
      int int2 = 103;
      double double1 = MathUtils.round(1625.626941, 103, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1030);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short short0 = MathUtils.indicator((short)178);
      int int0 = MathUtils.subAndCheck((int) (short)1, (int) (short)178);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double0 = MathUtils.factorialLog((short)1);
      short short1 = MathUtils.sign((short)178);
      float float0 = MathUtils.round(3253.0F, (int) (short)1);
      long long0 = MathUtils.indicator((-2927L));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, 2.2250738585072014E-308, 1019);
      int int0 = MathUtils.indicator(1019);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1930.8, 1930.8, 2.2250738585072014E-308);
      double double0 = MathUtils.binomialCoefficientDouble(228, 1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 226;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 484.86570047, 226);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 484.86570047;
      doubleArray0[2] = (double) 226;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(0.0, 226);
      double double2 = MathUtils.log(0.0, 0.0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int1 = (-364);
      int int2 = MathUtils.gcd((-364), 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-364));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -364
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.indicator(160);
      long long0 = MathUtils.pow((long) 1, 2866L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      int int1 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)3836);
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1072693279;
      intArray0[1] = 160;
      intArray0[2] = 1072693279;
      intArray0[3] = 1072693279;
      intArray0[4] = (int) (short)3836;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int3 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-6787L), (-6787L));
      double double0 = MathUtils.normalizeAngle(0.0, (-3878.51403344369));
      int int0 = 561;
      double double1 = MathUtils.binomialCoefficientLog(2946, 561);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (-3878.51403344369);
      doubleArray0[5] = (-3876.7253345298045);
      doubleArray0[7] = (double) 561;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.round(1.1102230246251565E-16, 343);
      int int0 = (-909);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-909), 31);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -909, k = 31
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        MathUtils.pow((-4804), (-4804));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,804^-4,804)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.log(0.25, 0.25);
      double double1 = MathUtils.binomialCoefficientDouble(1067, 0);
      int int0 = MathUtils.gcd((-108), 7);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1659;
      intArray0[1] = (-1060);
      intArray0[2] = 2879;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      try { 
        MathUtils.pow(4053L, (-409L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,053^-409)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, (-1229L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1229L), 1539.2456918, 8.0E298);
      try { 
        MathUtils.pow(318, (-1229L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (318^-1,229)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1394.6, 1394.6, 1394.6);
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      double double0 = MathUtils.indicator((double) 0.0F);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 21;
      int int1 = MathUtils.indicator(21);
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.factorial(21);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.pow((-2860L), 0);
      int int0 = MathUtils.lcm(68, 68);
      byte byte0 = MathUtils.sign((byte) (-32));
      long long1 = MathUtils.indicator(2898L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2898L;
      doubleArray0[1] = 1.375;
      doubleArray0[2] = (double) 68;
      doubleArray0[3] = (double) (-2860L);
      doubleArray0[4] = (double) (-2860L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(1347, (int) (byte) (-32));
      byte byte1 = MathUtils.indicator((byte) (-32));
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.lcm(2019L, (long) 68);
      long long3 = MathUtils.indicator(0L);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1347;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 0.2857142686843872);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 701);
      byte byte0 = MathUtils.sign((byte) (-43));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.cosh(0.0);
      long long0 = MathUtils.addAndCheck(0L, 2537L);
      double double1 = MathUtils.normalizeAngle(0.0, (byte) (-1));
      int int0 = MathUtils.hash(0.0);
      long long1 = MathUtils.gcd(0L, 1564L);
      long long2 = MathUtils.indicator(0L);
      int int1 = MathUtils.subAndCheck(0, 0);
      boolean boolean1 = MathUtils.equals(0.0, (double) 0, 23);
      long long3 = MathUtils.indicator(2537L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(362880L, 362880L);
      int int0 = (-158);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-158), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -158, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-2348);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2348));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,348
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 2703;
      int int1 = 128;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2703, 128);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, (-99.0), (-99.0));
      int int1 = 1654;
      boolean boolean0 = MathUtils.equals((-99.0), (double) 1, 1654);
      double double0 = 2895.1330952;
      int int2 = 11;
      int int3 = 685;
      // Undeclared exception!
      try { 
        MathUtils.round(2895.1330952, 11, 685);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-0.2499999997677497), (-0.2499999997677497));
      byte byte0 = MathUtils.sign((byte) (-1));
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2703, 128);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 31, 1452L);
      int int1 = MathUtils.compareTo(0.0, 0.0, (-616));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-921);
      int int1 = MathUtils.gcd((-921), 321);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-416));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -416
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.indicator(1463L);
      double double0 = MathUtils.scalb(1L, (-1286));
      double double1 = MathUtils.scalb(0.0, 138);
      int int0 = MathUtils.mulAndCheck((-1286), 2314);
      double double2 = MathUtils.indicator(1348.4895235);
      short short0 = MathUtils.indicator((short)0);
      long long1 = MathUtils.indicator(2359L);
      try { 
        MathUtils.pow((-1915L), (-1915L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,915^-1,915)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)66);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)66;
      doubleArray0[1] = (double) (byte)66;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)66;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)66;
      doubleArray0[6] = (double) (byte)1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(10.0);
      float float0 = MathUtils.indicator((-1125.6F));
      float float1 = MathUtils.round(0.0F, (int) (byte)1);
      double double2 = MathUtils.factorialDouble((byte)1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger2 = bigInteger0.negate();
      BigInteger bigInteger3 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) (byte)66);
      int int0 = MathUtils.lcm(0, 66);
      double double3 = MathUtils.cosh((-8.0E298));
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = (double) 4194304;
      doubleArray1[8] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 10.0;
      double double1 = MathUtils.indicator(10.0);
      long long0 = MathUtils.subAndCheck(0L, 2819561105158720014L);
      long long1 = MathUtils.addAndCheck(2819561105158720014L, 2819561105158720014L);
      double double2 = MathUtils.normalizeAngle((-2819561105158720014L), (-3390.0368382191778));
      int int0 = MathUtils.pow(237, 4503599627370496L);
      float float0 = MathUtils.round((-578.13403F), 2206);
      short short0 = MathUtils.indicator((short)3);
      double double3 = MathUtils.cosh((short)3);
      double double4 = MathUtils.sign((-1824.78));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("e%'G");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.e%'G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 119;
      int int1 = MathUtils.pow(119, 119);
      double double0 = MathUtils.sign(2934.2845776);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 978910855;
      doubleArray0[1] = (double) 978910855;
      doubleArray0[2] = (double) 978910855;
      doubleArray0[3] = (double) 978910855;
      doubleArray0[4] = (double) 978910855;
      doubleArray0[5] = (-1608.134083);
      doubleArray0[6] = (double) 119;
      doubleArray0[7] = 2934.2845776;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2934.2845776);
      short short0 = (short) (-1819);
      short short1 = MathUtils.sign((short) (-1819));
      try { 
        MathUtils.pow((long) 978910855, (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (978,910,855^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.sign((-11.920573040657597));
      int int0 = (-2659);
      int int1 = MathUtils.indicator((-2659));
      long long0 = (-3958705157555305932L);
      long long1 = 0L;
      long long2 = MathUtils.subAndCheck((-3958705157555305932L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-814));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -814
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.indicator(1151L);
      int int0 = MathUtils.mulAndCheck(0, 39);
      long long1 = MathUtils.factorial(0);
      double double1 = MathUtils.indicator(3554.8158767135624);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long2 = MathUtils.lcm(2307L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.indicator((double) 1L);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-449));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3437.458630111612, (-1543.42088));
      int[] intArray0 = new int[2];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.sign(0.08371849358081818);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1545.1073184818001);
      doubleArray0[3] = (-1543.42088);
      doubleArray0[4] = (-1545.1073184818001);
      doubleArray0[5] = (-1545.1073184818001);
      doubleArray0[6] = (-1740.0920423266598);
      doubleArray0[7] = (double) 0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3333.6113913;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = 550;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1223542342, 550);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.cosh(Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-805.054);
      doubleArray0[1] = (-805.054);
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1833L), (-1833L));
      int int0 = MathUtils.lcm(1985, 1985);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.gcd((-761L), (-761L));
      boolean boolean0 = MathUtils.equals(3768.30501519866, (-3142.3), 3768.30501519866);
      int int0 = MathUtils.pow(1559, 1559);
      double double0 = MathUtils.sign(0.0);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-7278142539171889152L), (long) 1831380199);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2030L, 0L);
      int int0 = MathUtils.indicator(1956);
      float float0 = MathUtils.indicator((-3308.1611F));
      long long1 = MathUtils.lcm(2030L, (-109L));
      short short0 = MathUtils.indicator((short)21);
      int int1 = MathUtils.sign(1);
      int int2 = MathUtils.pow(20, 1956);
      int int3 = MathUtils.pow((int) (short)21, 0L);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)21;
      intArray0[2] = 1;
      intArray0[3] = 1030;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.lcm(1096L, 4503599627370496L);
      float float0 = MathUtils.round((float) 616993148949757952L, (-2566));
      long long1 = MathUtils.lcm(0L, (-2615L));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      float float0 = MathUtils.round(0.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1500.6826, (double) 0, 1500.6826);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1500.6826;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 1500.6826;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1393.6003);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-404.953309974661), 1.125, (-404.953309974661));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(157, (-3400));
      short short0 = MathUtils.sign((short)3);
      long long0 = MathUtils.indicator((long) 3557);
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.round((-645.91296F), (int) (short)1);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble((short)3);
      int int1 = MathUtils.compareTo(13.07, 1L, 3557);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      long long0 = MathUtils.binomialCoefficient(2628, (-1749));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-77.36972974251321), 0.0, 5222);
      double double0 = MathUtils.indicator((-77.36972974251321));
      int[] intArray0 = new int[2];
      intArray0[0] = 5222;
      intArray0[1] = 5222;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd((-3807), 1);
      double double1 = MathUtils.scalb(853.9879478, 0);
      long long0 = MathUtils.subAndCheck((long) 1, 4503599627370496L);
      double double2 = MathUtils.factorialDouble(1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 5222;
      doubleArray0[2] = 853.9879478;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 853.9879478;
      doubleArray0[6] = (-1.0);
      int int2 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.lcm((long) 5222, (long) 5222);
      int int3 = MathUtils.pow(5222, 1);
      double double3 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 198;
      float float0 = MathUtils.round(760.14F, 198);
      double double0 = MathUtils.cosh(198);
      int int1 = 0;
      int int2 = MathUtils.pow(0, (long) 0);
      double double1 = MathUtils.normalizeAngle(Float.NaN, 0.097);
      int int3 = 3194;
      int int4 = MathUtils.pow(3194, (long) 3194);
      byte byte0 = (byte)63;
      byte byte1 = MathUtils.sign((byte)63);
      boolean boolean0 = MathUtils.equals((double) (byte)63, 1349.2056855, 0.7853981633974483);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int5 = MathUtils.indicator((int) (byte)1);
      double double2 = MathUtils.sinh(760.14F);
      float float1 = MathUtils.sign((float) 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.factorialLog(731);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 731;
      doubleArray0[1] = 4093.7324983392523;
      doubleArray0[2] = (double) 731;
      doubleArray0[3] = 4093.7324983392523;
      doubleArray0[4] = (double) 731;
      doubleArray0[5] = (double) 731;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash(731.0);
      long long0 = MathUtils.sign((long) 1082578944);
      double double1 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.mulAndCheck(0L, (-592L));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.gcd(1L, 0L);
      double double3 = MathUtils.scalb(1277.65597, 0);
      byte byte0 = MathUtils.indicator((byte) (-27));
      int int2 = MathUtils.gcd((int) (byte) (-27), 0);
      long long3 = MathUtils.binomialCoefficient(1185, 0);
      try { 
        MathUtils.pow(0L, (-2456));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,456)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.factorialLog(0);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.5, 0.5, 2);
      long long1 = MathUtils.lcm(1L, 1L);
      boolean boolean1 = MathUtils.equals((double) 0, (-1219.3919067116));
      short short0 = MathUtils.indicator((short)1140);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(512L, 1443L);
      int int0 = 98;
      long long1 = MathUtils.pow(4398046511103L, 98);
      float float0 = MathUtils.sign(353.7F);
      byte byte0 = (byte)82;
      byte byte1 = MathUtils.sign((byte)82);
      float float1 = MathUtils.round(1.0F, (int) (byte)1);
      long long2 = MathUtils.pow(1443L, (int) (byte)82);
      int int1 = MathUtils.pow((int) (byte)82, (int) (byte)82);
      int int2 = MathUtils.compareTo(1.0F, 0.0, (-7948863223069781495L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (byte)82;
      doubleArray0[2] = (double) (-7948863223069781495L);
      doubleArray0[3] = (double) (byte)82;
      doubleArray0[4] = (double) 738816L;
      doubleArray0[5] = (double) 1;
      int int3 = MathUtils.hash(doubleArray0);
      int int4 = (-1731);
      double double0 = MathUtils.round((-7.948863223069781E18), (-1731));
      short short0 = MathUtils.indicator((short) (byte)82);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1731), 98);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,731, k = 98
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
