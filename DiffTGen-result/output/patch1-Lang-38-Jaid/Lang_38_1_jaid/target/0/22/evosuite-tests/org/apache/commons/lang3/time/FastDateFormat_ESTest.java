/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:32:29 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.zone.ZoneRules;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1508), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1508
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string1 = fastDateFormat0.toString();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      TimeZone timeZone0 = TimeZone.getTimeZone("MFjNkF/xos@`&%iyj");
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 15, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 15
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7.x$");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "";
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(";H~", (TimeZone) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) null, (Locale) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 2;
      String string0 = fastDateFormat0.parseToken(";H~", intArray0);
      StringBuffer stringBuffer0 = new StringBuffer(";H~");
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      int int0 = 2934;
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2934, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2934
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("0P;Le", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "The pattern must not be null";
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.GERMAN;
      Locale.setDefault(locale0);
      String string1 = locale0.getDisplayScript();
      Set<Character> set0 = locale0.getExtensionKeys();
      boolean boolean0 = locale0.hasExtensions();
      String string2 = locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The pattern must not be null", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1%B");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1979, "");
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.UK;
      String string1 = locale0.getDisplayName(locale1);
      String string2 = simpleTimeZone0.getDisplayName(locale0);
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ie5}");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 0, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "-t(^";
      int int0 = (-2042);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2042), "");
      simpleTimeZone0.setStartRule((-2042), 0, 0, 0, true);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-t(^", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "+Htc./A9py/^HoU";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("+Htc./A9py/^HoU");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, timeZone0);
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      fastDateFormat0.init();
      fastDateFormat1.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(402, 0, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 402
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int int0 = 1060;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-1634), 1, 1, 0, 1060);
      int int1 = mockGregorianCalendar0.getMaximum(0);
      Instant instant0 = mockGregorianCalendar0.toInstant();
      StringBuffer stringBuffer0 = new StringBuffer(1755);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      String string0 = "k";
      String string1 = "Z7w\\2s,m`E2Y-";
      int int2 = (-1984);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1060, "Z7w\u0002s,m`E2Y-", (-2385), 0, 0, (-1984), (-1634), (-755), 1438, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -1634
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.JAPAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getExtension('e');
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(2884);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(date0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date pattern for locale: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "V[/&( ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("V[/&( ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      int int0 = (-2696);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2696), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2696
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format(0L);
      fastDateFormat0.init();
      String string1 = fastDateFormat0.format(0L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ZoneRules zoneRules0 = zoneOffset0.getRules();
      boolean boolean0 = zoneOffset0.equals(zoneRules0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("g1cuf Rk!bnc-;", timeZone0, locale0);
      int int0 = fastDateFormat0.hashCode();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1733), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1733
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = "";
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      DateFormat dateFormat0 = DateFormat.getTimeInstance(0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2962, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2962
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      String string1 = "K)h";
      TimeZone timeZone0 = TimeZone.getTimeZone("K)h");
      ZoneId zoneId0 = timeZone0.toZoneId();
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      String string2 = Locale.lookupTag(linkedList0, set0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      String string3 = "?T04lYvn{alg`YE";
      try { 
        mockSimpleDateFormat0.parse("?T04lYvn{alg`YE");
      } catch(ParseException e) {
         //
         // Unparseable date: \"?T04lYvn{alg`YE\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E(d]yK");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("E(d]yK");
      boolean boolean0 = fastDateFormat0.equals(mockSimpleDateFormat0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1508), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1508
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Object object0 = fastDateFormat0.clone();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 3;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = 2;
      String string0 = fastDateFormat0.parseToken("@X{Bi8a![`(", intArray0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 3);
      try { 
        fastDateFormat0.parseObject("@X{Bi8a![`(");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2100, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2100
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "+HFcZ/A9p?/-H<oU";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("+HFcZ/A9p?/-H<oU");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      String string0 = fastDateFormat0.getPattern();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = (-1230);
      MockDate mockDate0 = new MockDate((-1230), 690, 0, 690, 0, 538);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, 690);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("8'6!MU", (TimeZone) null, locale0);
      int int0 = (-1179);
      ParsePosition parsePosition0 = new ParsePosition((-1179));
      parsePosition0.setIndex(0);
      parsePosition0.setErrorIndex(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string0 = fastDateFormat0.format(calendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      int int1 = fastDateFormat0.hashCode();
      int int2 = 928;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 928, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 928
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, 18);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 18
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      String string0 = "zxi\\)?lZ&h\"";
      Locale locale0 = Locale.forLanguageTag("zxi)?lZ&h\"");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      TimeZone timeZone0 = null;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1213), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1213
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      String string0 = locale0.getDisplayScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string1 = "qJx3_6M{}";
      String[] stringArray0 = Locale.getISOCountries();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("qJx3_6M{}", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1340), (-1340));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1340
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Unknown class: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      boolean boolean1 = fastDateFormat0.equals(mockSimpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      try { 
        fastDateFormat0.parseObject("@X{Bi8a![`(");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      long long0 = 0L;
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 1, 1, 0);
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = (-352);
      int[] intArray0 = new int[6];
      intArray0[0] = (-352);
      intArray0[1] = 1;
      intArray0[2] = (-282);
      intArray0[3] = 3;
      intArray0[4] = 60000;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("<DH#Xp'UE Y", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(750);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-1), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale0 = Locale.CHINESE;
      boolean boolean0 = linkedHashSet0.add(locale0);
      Locale locale1 = Locale.lookup(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2864, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2864
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, 498, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 498
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 451;
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(451, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 451
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 3, timeZone0);
      MockDate mockDate0 = new MockDate(0, 3, (-306), 0, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat1.format((long) 1, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat1.format((Date) mockDate0, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.format(0L, stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer("$gh");
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("L;G#", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      String string0 = fastDateFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, (TimeZone) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 122;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      String string0 = fastDateFormat1.parseToken("Qx&^~{uT", intArray0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(97, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 97
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1875, 1875, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1875
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(82, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 82
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1), (-1), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(400);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 400
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("[");
      FastDateFormat fastDateFormat0 = new FastDateFormat("[", timeZone0, (Locale) null);
      boolean boolean0 = fastDateFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      boolean boolean0 = linkedList0.addAll((Collection<? extends Locale.LanguageRange>) linkedList1);
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.poll();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      String string0 = locale0.getDisplayCountry(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(7, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      String string0 = "nd";
      TimeZone timeZone0 = TimeZone.getTimeZone("nd");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("nd", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(122, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 122
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "-%OHv_h6Z53eJb_jk";
      TimeZone timeZone0 = TimeZone.getTimeZone("-%OHv_h6Z53eJb_jk");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-%OHv_h6Z53eJb_jk", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2272;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2272);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2272
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 122;
      TimeZone timeZone0 = TimeZone.getDefault();
      ZoneId zoneId0 = timeZone0.toZoneId();
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(122, 1363, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1363
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.GERMAN;
      String string0 = simpleTimeZone0.getDisplayName(true, 0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-615));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-615), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -615
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2147483648
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "=";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), "=", (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1665), (-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(1);
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "\"TN6y4|%;jIiHO]}{'I";
      int int0 = 16;
      int int1 = (-1171);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "\"TN6y4|%;jIiHO]}{'I", 3, 3, 3, 3, 3, (-4538), 16, (-1171), 16, 3, (-3364));
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -4538
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.init();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      TimeZone.setDefault(timeZone0);
      Object object0 = fastDateFormat0.clone();
      int int0 = fastDateFormat0.hashCode();
      Locale locale0 = Locale.US;
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      String string1 = mockGregorianCalendar0.getCalendarType();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      String string2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat1.format((Object) locale0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 3;
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1941), "/wHLA4x}gT{rw7", 2, (-1), 0, 0, (-1), 0, 3, 0, (-1), 3, 12);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2858, 0, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2858
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockDate mockDate0 = new MockDate(0L);
      String string0 = fastDateFormat0.format((Object) mockDate0);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1023, 2, 1);
      int int0 = mockGregorianCalendar0.getWeekYear();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1532), 1, 1, 3, 0, 1, 1023);
      // Undeclared exception!
      try { 
        simpleTimeZone0.setStartRule(1, 2220, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day 2220
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }
}
