/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:26:02 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahChronology;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.function.Predicate;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahChronology;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 1, timeZone0, locale0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[rV=R|", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale locale1 = Locale.lookup(linkedList0, list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("_", (TimeZone) null, locale0);
      System.setCurrentTimeMillis((-282L));
      String string0 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField";
      int int0 = (-1820);
      int int1 = 0;
      int int2 = 1;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      int int3 = 1;
      TimeZone timeZone0 = TimeZone.getTimeZone("-GJ*4&j");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&ZVth/QBbE?k)S;f4", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = " )s";
      Locale locale0 = Locale.GERMANY;
      String string1 = locale0.getScript();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      String string2 = Locale.lookupTag(linkedList0, set0);
      boolean boolean0 = locale0.hasExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(" )s", locale0);
      MockDate mockDate0 = new MockDate(1, (-311), (-19));
      Object object0 = mockDate0.clone();
      String string3 = fastDateFormat0.format((Date) mockDate0);
      Locale locale1 = fastDateFormat0.getLocale();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-19));
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = new Locale("K8WGJo\"E|?TqM:L", "qZQ)T'x~x}A7#T~[n");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("G^xd.9CM=", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      String string1 = "PaUIm(G'`*^%j";
      TimeZone timeZone0 = TimeZone.getTimeZone("PaUIm(G'`*^%j");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 2, timeZone0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("PaUIm(G'`*^%j");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "f";
      String string1 = "";
      Locale locale0 = Locale.forLanguageTag("");
      Locale locale1 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("f", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      String string0 = locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("8@0qo'z9nNzk[^", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(356, "No date pattern for locale: ");
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = new StringBuffer("*#h:.>nub<H ]b");
      FieldPosition fieldPosition0 = new FieldPosition(356);
      StringBuffer stringBuffer1 = decimalFormat0.format((double) 2, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format((double) 356, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Object) calendar0, stringBuffer2, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Ccb#+1", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      simpleTimeZone0.setStartYear(0);
      boolean boolean0 = simpleTimeZone0.observesDaylightTime();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(3, (-2847), (-2847));
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat1.format((Date) mockDate0, stringBuffer1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(1);
      StringBuffer stringBuffer3 = fastDateFormat3.applyRules(calendar0, stringBuffer1);
      fastDateFormat3.init();
      boolean boolean1 = fastDateFormat3.getTimeZoneOverridesCalendar();
      String string0 = fastDateFormat3.getPattern();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(5);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "03bnF>;Hbe8//WL.,P", 0, 0, 0, 0, 0, 682, 0, 0, 17, 1650, 2475);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "03bnF>;Hbe8//WL.,P");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      boolean boolean0 = linkedHashSet0.removeIf(predicate3);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      String string0 = locale0.getDisplayLanguage(locale1);
      Locale locale2 = Locale.forLanguageTag("6$:u7z");
      String string1 = locale2.getDisplayLanguage();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string2 = fastDateFormat0.format((long) 682);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(682, 17, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 17
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.format((-1L));
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "T1+\"SB9ouh;SV?a=", 0, 0, 0, 1327, (-4269), 0, 3, 60, 0, 0, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week 60
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("<null>", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      StringBuffer stringBuffer0 = new StringBuffer("~&%");
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("A+yXI^MPMdk~5Rvxs", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      int int0 = 689;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1, 3, 689);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string0 = fastDateFormat0.format(date0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 689, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 689
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      timeZone0.setRawOffset(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode1);
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string1 = "";
      int int0 = 2126;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, (-1700));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1700
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "FastDateFormat[";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = new FastDateFormat("WkFeEk,u", timeZone0, locale0);
      Object object0 = locale0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("WkFeEk,u", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-811), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -811
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "_d/b3U%U$tE[ZfU";
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("_d/b3U%U$tE[ZfU", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      String string0 = fastDateFormat0.toString();
      int int0 = (-800);
      int int1 = 0;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", (DateFormatSymbols) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2701, 1, 3, 0, 1, 1);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.GERMANY;
      String string1 = locale0.getDisplayCountry(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 3, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string1 = fastDateFormat0.format(calendar0);
      // Undeclared exception!
      try { 
        MockHijrahChronology.dateNow((HijrahChronology) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.chrono.MockHijrahChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale locale1 = Locale.lookup(linkedList0, list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("c9Z-[=^:+Wkd#RtI6O");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      fastDateFormat0.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-190));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -190
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      fastDateFormat0.init();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-48), 0, 383, 643, 0);
      mockGregorianCalendar0.set(2, (-2297), (-48));
      mockGregorianCalendar0.setTimeInMillis(0L);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      String string0 = fastDateFormat0.toString();
      Locale locale0 = Locale.KOREAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale locale1 = Locale.lookup(linkedList0, list0);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(2, 3, locale0);
      TimeZone.setDefault(timeZone0);
      int int0 = (-1712);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1712));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1712
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.GERMAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1), (-1), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("?82N{;L\"bGy5P^W<W=/");
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("?82N{;L\"bGy5P^W<W=/", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      String string0 = locale0.getDisplayVariant();
      String string1 = timeZone0.getDisplayName(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("}l]YZZNnGQ1MjW", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = fastDateFormat1.parseToken("&z1u@g5", intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-2070);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2070), "(9R~g", 474, 0, 0, 474, 0, 0, 0, 0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale0 = Locale.lookup(linkedList0, list1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, (Locale) null);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      String string0 = "?%u6C4Gl2P'%8g^V";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("?%u6C4Gl2P'%8g^V");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      long long0 = 2895L;
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "#GvqI^URi'TAMLMp3<";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("#GvqI^URi'TAMLMp3<");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "\"i,";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"i,");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      boolean boolean0 = timeZone0.observesDaylightTime();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(831, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 831
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      Object object0 = fastDateFormat0.clone();
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(438, "");
      simpleTimeZone0.setEndRule(290, 0, 3);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", locale0);
      int[] intArray0 = new int[6];
      intArray0[0] = 438;
      intArray0[1] = 1;
      intArray0[2] = 290;
      intArray0[3] = 2;
      intArray0[4] = 290;
      intArray0[5] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "u+?Fo\"^dnia'!}";
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      int int0 = timeZone0.getOffset(296L);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("u+?Fo\"^dnia'!}", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]Y4>D;");
      FastDateFormat fastDateFormat0 = new FastDateFormat("P2'nGG/GUUs%/hG{", timeZone0, (Locale) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, (Locale) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]Y4>D;", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "Y~1b2y[r6?lj:";
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Y~1b2y[r6?lj:", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField";
      int int0 = 1354;
      int int1 = (-1820);
      int int2 = 0;
      int int3 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1354, "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", (-1820), 0, 1, 1, 0, 0, 0, (-1820));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      long long0 = (-329L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(3);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k");
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (Locale) null);
      fastDateFormat0.init();
      String string0 = fastDateFormat0.format((long) 0);
      String string1 = fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, (Locale) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1087, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1087
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("ygFvNX^(6B|tPecWm^", (TimeZone) null, locale0);
      boolean boolean0 = fastDateFormat0.equals("");
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1244, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1244
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2601), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2601
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "=71C<k4Gt@R";
      Locale locale0 = new Locale("=71C<k4Gt@R", "", "{^&Y#BtKqPm_pz}}<m");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2924));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2924
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "cDV\"j9g/h";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("cDV\"j9g/h");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = locale0.getDisplayName();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      Locale locale1 = Locale.forLanguageTag("English (United Kingdom)");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fastDateFormat1.format(object0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 0.0);
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1859), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1859
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-169), 1055, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1055
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 14;
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(14, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 14
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      timeZone0.setID("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField");
      String string0 = locale0.getExtension('j');
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      String string1 = fastDateFormat0.getPattern();
      MockDate mockDate0 = new MockDate(0L);
      String string2 = fastDateFormat0.format((Date) mockDate0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "ahh'\u65F6'mm'\u5206'ss'\u79D2' z", 1, 1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "ahh'\u65F6'mm'\u5206'ss'\u79D2' z");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((-606L), stringBuffer0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1459), 8, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 8
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(93, (-604));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -604
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      boolean boolean0 = linkedHashSet0.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      int int0 = (-2994);
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(542, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 542
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2833);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2833
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 60000;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2857, 60000, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 60000
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = new Locale(" MVVAX7aS", " MVVAX7aS");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(431, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 431
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(60);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 60
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-259), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -259
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = (-1715);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1715));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1715
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1399, 48, 48);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 1399;
      doubleArray0[2] = (double) 1399;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1399;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]";
      stringArray0[1] = "5";
      stringArray0[2] = "]";
      stringArray0[3] = "]";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Km)/Q&|u+h(AM]5");
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.time.FastDateFormat$Pair");
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Object object0 = fastDateFormat0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!z%Jp");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Object object0 = timeZone0.clone();
      Locale locale0 = Locale.ROOT;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      String string0 = locale0.getDisplayScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(31, (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      String string0 = fastDateFormat0.format(calendar0);
      Locale locale0 = fastDateFormat0.getLocale();
      Locale locale1 = fastDateFormat0.getLocale();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 3;
      intArray0[5] = (-1145);
      intArray0[6] = 3;
      intArray0[7] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 3038;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(3038, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 3038
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "M|W}T";
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("M|W}T", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      FastDateFormat fastDateFormat0 = new FastDateFormat("ygFvNX^(6B|tPecWm^", (TimeZone) null, locale0);
      boolean boolean0 = fastDateFormat0.equals("");
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(62, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex((-864));
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1305), "\"Qk:aV");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1305), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1305
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-518), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -518
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2701, 1, 3, 0, 1, 1);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 3, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      String string0 = fastDateFormat0.getPattern();
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("EEEE, MMMM d, yyyy", locale0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1584);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1584));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1584
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("oW$oR", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      simpleTimeZone0.setStartYear(0);
      boolean boolean0 = simpleTimeZone0.observesDaylightTime();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(3, (-2847), (-2847));
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      StringWriter stringWriter0 = new StringWriter();
      Instant instant0 = mockDate0.toInstant();
      stringWriter0.write("");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat1.format((Date) mockDate0, stringBuffer1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(1);
      StringBuffer stringBuffer3 = fastDateFormat3.applyRules(calendar0, stringBuffer1);
      fastDateFormat3.init();
      boolean boolean1 = fastDateFormat3.getTimeZoneOverridesCalendar();
      String string0 = fastDateFormat3.getPattern();
      String string1 = fastDateFormat1.toString();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(5);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = "2NT<jXO(5&H-l]#1";
      Locale locale0 = Locale.forLanguageTag("2NT<jXO(5&H-l]#1");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-65), 1, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -65
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'cBS8SE~dPJf!6zz<", locale0);
      Locale locale2 = fastDateFormat0.getLocale();
  }
}
