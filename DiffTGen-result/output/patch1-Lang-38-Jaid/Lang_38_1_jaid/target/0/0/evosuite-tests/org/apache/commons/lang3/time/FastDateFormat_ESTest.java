/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:25:59 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.pollLast();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = linkedList1.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(2, locale0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format(0L);
      System.setCurrentTimeMillis(3023L);
      String string1 = fastDateFormat1.toString();
      String string2 = locale0.getDisplayName();
      long long0 = 1L;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      double double0 = (-2829.66375841);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("WuNr_HB'y:", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(43);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.forLanguageTag("]CI80'x");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("]CI80'x");
      Long long0 = new Long(3);
      StringBuffer stringBuffer0 = new StringBuffer(43);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
      String string0 = fastDateFormat1.getPattern();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      MockDate mockDate0 = new MockDate();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.forLanguageTag("I$n}\"T`J");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(553);
      StringBuffer stringBuffer1 = fastDateFormat1.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        choiceFormat0.format((-1.0), stringBuffer1, fieldPosition0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(1, 0, 3, 2, 2);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = fastDateFormat0.equals(mockGregorianCalendar0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = choiceFormat0.format(1.0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string0 = fastDateFormat0.format(date0);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "JL";
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("JL", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "]{%dnV";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]{%dnV");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      List<Locale.LanguageRange> list0 = null;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Object object0 = simpleTimeZone0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      Locale locale0 = Locale.GERMAN;
      boolean boolean1 = locale0.hasExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      String string1 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 0, locale0);
      String string2 = null;
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3, (-1393), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1393
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "7&d6>r,f%tXjyvpi";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string1 = locale0.getDisplayScript();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7&d6>r,f%tXjyvpi", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "GZ1)hw_p C_qA]K";
      TimeZone timeZone0 = TimeZone.getTimeZone("GZ1)hw_p C_qA]K");
      Locale locale0 = new Locale(")`\"YT38~LP");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(")`\"YT38~LP", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "f;8I5o`[dV(1s,";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("f;8I5o`[dV(1s,", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "\"UaP^?WE09q$l%";
      TimeZone timeZone0 = TimeZone.getDefault();
      String string1 = timeZone0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"UaP^?WE09q$l%", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "\"UaP^?WE09q$l%";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"UaP^?WE09q$l%", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "jmok6vE");
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberFormat numberFormat1 = NumberFormat.getCurrencyInstance(locale0);
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      StringBuffer stringBuffer1 = numberFormat0.format((-1171L), stringBuffer0, fieldPosition0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      StringBuffer stringBuffer2 = stringBuffer0.append((Object) fieldPosition0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      fieldPosition0.setBeginIndex(1);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer1);
      // Undeclared exception!
      try { 
        stringBuffer3.insert((-2342), 0);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2342
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      StringBuffer stringBuffer1 = numberFormat0.format(2277.25364, stringBuffer0, fieldPosition0);
      fieldPosition0.setEndIndex(0);
      fieldPosition0.setBeginIndex(3);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      String string0 = fastDateFormat0.parseToken("e08!)[n#", intArray0);
      StringBuffer stringBuffer2 = fastDateFormat0.applyRules((Calendar) null, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer2.append(true);
      StringBuffer stringBuffer4 = fastDateFormat0.format(0L, stringBuffer2);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("mz.0zN$McJ{7LRJ!:h");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      String string0 = fastDateFormat0.format(calendar0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((long) 0, stringBuffer1);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      fieldPosition0.setEndIndex(0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale_Category0, stringBuffer2, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale$Category
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.forLanguageTag("I$n}\"T`J");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(553);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      int[] intArray0 = new int[0];
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("H;GN#xNVA^z,7c_dO", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DateFormatSymbols dateFormatSymbols1 = mockSimpleDateFormat0.getDateFormatSymbols();
      TimeZone timeZone1 = TimeZone.getDefault();
      TimeZone timeZone2 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      boolean boolean0 = timeZone2.observesDaylightTime();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone2, locale0);
      String string0 = timeZone0.getDisplayName(locale0);
      ZoneId zoneId0 = timeZone0.toZoneId();
      ParsePosition parsePosition0 = new ParsePosition(1093);
      Object object0 = fastDateFormat0.parseObject((String) null, parsePosition0);
      fastDateFormat1.init();
      String string1 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, timeZone1, locale0);
      int int0 = fastDateFormat2.getMaxLengthEstimate();
      String string2 = timeZone2.getDisplayName(locale0);
      String string3 = fastDateFormat0.format(0L);
      Object object1 = dateFormatSymbols0.clone();
      String string4 = fastDateFormat2.format((long) 3);
      int int1 = (-961);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1093, (-961), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -961
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      MockDate mockDate0 = new MockDate(0, 7, 8);
      long long0 = MockDate.UTC(0, 0, 0, 7, 1, 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = new FastDateFormat("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, 2, 3, 2, (-675));
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, (Locale) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 2;
      String string0 = fastDateFormat1.parseToken("org.apache.commons.lang3.time.FastDateFormat$TextField", intArray0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (Locale) null);
      String string1 = fastDateFormat2.format((-1L));
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(15, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 15
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale0 = Locale.lookup(linkedList0, list1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = new Locale("l]yEAK5LN[kZqx9xIZ");
      String string0 = locale0.getExtension('m');
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("l]yEAK5LN[kZqx9xIZ", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2);
      String string0 = fastDateFormat0.getPattern();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(6, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 6
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-2272);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2272), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2272
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1296), "rK)7$-@bf1");
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = new FastDateFormat("rK)7$-@bf1", simpleTimeZone0, locale0);
      int int0 = fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "tWR\":9>";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("tWR\":9>");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("t,g$e^EkNrQjQMo$?", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("jiEU3XxQ", timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Long long0 = new Long(1);
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("q{1M%M", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("4BTRI)a{");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition(3);
      StringBuffer stringBuffer2 = numberFormat0.format(0L, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer2);
      Locale locale1 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) null, locale1);
      // Undeclared exception!
      try { 
        numberFormat0.format((Object) stringBuffer1, stringBuffer2, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<\"*6<6O{h8nL<", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "\\=<&";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("=<&");
      String string1 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, timeZone0);
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(40, 0);
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 40 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(">F'", (TimeZone) null);
      String string0 = "";
      String string1 = "`A*1]6Ls4N<53";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ">F'");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`A*1]6Ls4N<53", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "@Pi0XqgD9GD(";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@Pi0XqgD9GD(");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "-@";
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "-@");
      Locale locale0 = Locale.CANADA_FRENCH;
      String string1 = locale0.getDisplayCountry();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("-@", (TimeZone) simpleTimeZone0, locale0);
      long long0 = 0L;
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(0);
      simpleTimeZone0.setStartYear(2);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, (double) 0L);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 16;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(16);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 16
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Object object0 = timeZone0.clone();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.FRANCE;
      boolean boolean0 = locale1.hasExtensions();
      String string0 = timeZone0.getDisplayName(false, 0);
      String string1 = locale1.getDisplayName(locale0);
      String string2 = locale0.getDisplayName(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-711));
      Object object1 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField");
      String string0 = timeZone0.getDisplayName(false, 0);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-881), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -881
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Rv>JJw;", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2251));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2251
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
      fastDateFormat0.init();
      long long0 = 0L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 3689.7681775;
      String[] stringArray0 = new String[1];
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TextField";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      CharSequence charSequence0 = null;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE;
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) null, dateTimeFormatter0);
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, locale0);
      Locale locale1 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-246);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-246), 0, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -246
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("j!7KVmu~B;'$pY=");
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("d7M`Vkn!o", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Locale locale0 = Locale.FRENCH;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format(calendar0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, (TimeZone) simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate("February 14, 2014");
      Object object0 = mockDate0.clone();
      String string1 = simpleTimeZone0.getDisplayName(true, 0, locale0);
      long long0 = mockDate0.getTime();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-1647L), (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.CANADA;
      String string0 = locale0.getDisplayLanguage(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      int int1 = 540;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, 540, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 540
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$StringLiteral", timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "kTLB]O}W?Y#v&";
      Locale locale0 = new Locale("`");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("kTLB]O}W?Y#v&", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2236, "");
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(614, 2236, (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2236
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(412, 412, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 412
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        MockInstant.parse(charBuffer0);
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1208, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1208
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1037, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1037
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1897, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(11, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 11
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 122;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 122);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 122
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(16, 16, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 16
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = fastDateFormat0.parseToken("|5Ns|stum2)tv)lp=(", intArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ROOT;
      String string0 = locale0.getDisplayCountry(locale1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      boolean boolean0 = linkedHashSet0.containsAll(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1192), (-1192), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1192
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = (-3323);
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-300), (-3323), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3323
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = new Locale("C$$nN>");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1);
      String string0 = fastDateFormat1.toString();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      String string1 = timeZone0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("4H*QHv7Io", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1204), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1204
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0);
      int int0 = mockGregorianCalendar0.getWeeksInWeekYear();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      Locale locale2 = fastDateFormat0.getLocale();
      MockDate mockDate0 = new MockDate((-143L));
      StringBuffer stringBuffer0 = null;
      int int1 = (-1939);
      int int2 = (-1783);
      int int3 = 2878;
      int int4 = 0;
      int int5 = 1615;
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(230, 1);
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 230 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3610, "");
      Locale locale0 = Locale.ITALIAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      String string0 = locale0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      Locale locale0 = Locale.CANADA;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("7x1", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = new StringBuffer("o9k/Z*zwT$");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = decimalFormat0.format((double) 1, stringBuffer0, fieldPosition0);
      FieldPosition fieldPosition1 = new FieldPosition(0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'v';
      charArray0[2] = '1';
      charArray0[3] = 'b';
      StringBuffer stringBuffer2 = stringBuffer1.insert(0, charArray0, 0, 2);
      StringBuffer stringBuffer3 = decimalFormat0.format(3602L, stringBuffer1, fieldPosition1);
      StringBuffer stringBuffer4 = fastDateFormat0.format(calendar0, stringBuffer3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2193), 1234, 1234, (-2445), (-2445));
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "FjK(p0mkV";
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 1;
      intArray0[7] = 1;
      String string1 = fastDateFormat0.parseToken("FjK(p0mkV", intArray0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(382, "FjK(p0mkV", 0, 3, 0, 1, (-15), 1, 2, 4735, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -15
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), (String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = (-1192);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1192), locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1192
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        Charset.forName("!i[");
      } catch(IllegalCharsetNameException e) {
         //
         // !i[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
