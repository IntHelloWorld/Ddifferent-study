/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:29:16 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      TimeZone timeZone1 = mockGregorianCalendar0.getTimeZone();
      timeZone0.setID("");
      StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
      StringBuffer stringBuffer3 = stringBuffer1.append((double) 0);
      StringBuffer stringBuffer4 = stringBuffer1.insert(0, 'y');
      fastDateFormat0.init();
      StringBuffer stringBuffer5 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer1);
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex((-1));
      parsePosition0.setIndex(2105);
      parsePosition0.setErrorIndex(349);
      Object object0 = fastDateFormat0.parseObject("Illegal pattern component: ", parsePosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, timeZone1);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(2, 2, locale0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(3, timeZone0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, (TimeZone) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = (-2539);
      intArray0[3] = 0;
      intArray0[4] = 1;
      String string0 = fastDateFormat0.parseToken("#YzJbWK;) R/ oW?", intArray0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockDate mockDate0 = new MockDate(0);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      boolean boolean0 = timeZone0.inDaylightTime(date0);
      Locale locale0 = new Locale("", "f92[:", "");
      String string0 = locale0.toLanguageTag();
      FastDateFormat fastDateFormat0 = new FastDateFormat("f92[:", timeZone0, locale0);
      int int0 = timeZone0.getOffset((long) 3);
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 2, timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(date0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockDate mockDate0 = new MockDate();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      int int0 = fastDateFormat0.hashCode();
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      simpleTimeZone0.setStartYear(2);
      Locale locale0 = null;
      try {
        locale0 = new Locale("", (String) null, "");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1320, "org.apache.commons.lang3.time.FastDateFormat$Pair");
      String string0 = simpleTimeZone0.getDisplayName(true, 1);
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat$Pair");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      MockDate mockDate0 = new MockDate(12, (-1), 0, 0, 1181, 0);
      StringBuffer stringBuffer0 = new StringBuffer(1320);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      calendar0.set(3, (-1250));
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) simpleTimeZone0, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.SimpleTimeZone
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      mockSimpleDateFormat0.setLenient(false);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      int int0 = timeZone0.getOffset(0L);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, (String[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int1 = 406;
      MockDate mockDate0 = new MockDate(0, 406, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      // Undeclared exception!
      try { 
        decimalFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = " V\"yXG1ps[Mn`";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" V\"yXG1ps[Mn`");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1320, "org.apache.commons.lang3.time.FastDateFormat$Pair");
      String string0 = simpleTimeZone0.getDisplayName(true, 1);
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat$Pair");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockDate mockDate0 = new MockDate(12, (-1), 0, 0, 1181, 0);
      StringBuffer stringBuffer0 = new StringBuffer(1320);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) simpleTimeZone0, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.SimpleTimeZone
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      String string0 = fastDateFormat0.format(0L);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone1 = TimeZone.getDefault();
      String string1 = fastDateFormat0.format(date0);
      Instant instant0 = mockGregorianCalendar0.toInstant();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      int int0 = fastDateFormat1.hashCode();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format(date0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(444, (-937), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -937
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@I");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Dyx%xG=3]fV\";!o~c*");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = new Locale("", "", "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = (-3194);
      intArray0[5] = 0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      intArray0[6] = 1;
      intArray0[7] = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "O7,zij3QxcK=wdy]{";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("O7,zij3QxcK=wdy]{");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      String string0 = fastDateFormat0.format(calendar0);
      MockDate mockDate0 = new MockDate(0L);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      fieldPosition0.setEndIndex(0);
      ZoneId zoneId0 = zoneOffset0.normalized();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale0, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("L\"mi@i");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ",7eSp";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(",7eSp", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone.setDefault(timeZone0);
      int int0 = (-2667);
      Locale locale0 = Locale.US;
      Set<Character> set0 = locale0.getExtensionKeys();
      Locale locale1 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-2667), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -2667
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "ujo~yXZq,n";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ujo~yXZq,n", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-5143), "");
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = simpleTimeZone0.inDaylightTime(mockDate0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      int int0 = fastDateFormat0.hashCode();
      boolean boolean1 = true;
      int int1 = 4;
      Locale locale0 = null;
      try {
        locale0 = new Locale("", (String) null, "");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 3, 0, 2, 0, 1, 0, 0, 3, 6, 0, 3);
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = locale0.hasExtensions();
      boolean boolean1 = fastDateFormat0.equals("");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      String string2 = fastDateFormat0.getPattern();
      boolean boolean2 = fastDateFormat0.getTimeZoneOverridesCalendar();
      String[] stringArray0 = Locale.getISOCountries();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      int int0 = (-462);
      String string0 = "qH7$\\P";
      int int1 = (-1193);
      timeZone0.setRawOffset((-1193));
      Locale locale0 = new Locale("qH7$P");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, (-462), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -462
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[", locale0);
      String string0 = fastDateFormat0.getPattern();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("3KFC=B-  5DsN:]*Fr");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneId zoneId0 = zoneOffset0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("r5)=39g39>,h6?DsA", timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(48, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 48
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", parsePosition0);
      TimeZone timeZone0 = TimeZone.getTimeZone("GU0q,");
      ZoneId zoneId0 = timeZone0.toZoneId();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("GU0q,", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "Unknown class: ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Unknown class: ", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Object object0 = fastDateFormat1.clone();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("GMT", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date2 = mockSimpleDateFormat0.get2DigitYearStart();
      String string0 = fastDateFormat0.format(date1);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      String string1 = fastDateFormat0.parseToken("2/14/14 8:21 PM", intArray0);
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "2/14/14 8:21 PM");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      // Undeclared exception!
      try { 
        simpleTimeZone0.toZoneId();
      } catch(DateTimeException e) {
         //
         // Invalid ID for region-based ZoneId, invalid format: 2/14/14 8:21 PM
         //
         verifyException("java.time.ZoneRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Locale locale0 = new Locale("");
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 2;
      simpleTimeZone0.setStartRule(0, 2, 0);
      String string0 = fastDateFormat0.parseToken(".[uI3A", intArray0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(73, (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 73
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Locale locale0 = new Locale("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      MockDate mockDate0 = new MockDate(2, 2, 698);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition(698);
      StringBuffer stringBuffer2 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer2);
      simpleTimeZone0.setStartRule(0, 1, 0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 2, 4, (-1264), 0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = ":BA+o[U,%";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":BA+o[U,%");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule");
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      String string0 = locale0.getDisplayScript(locale1);
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3);
      String string1 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 360;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(360, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 360
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setID("The pattern must not be null");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1251), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1251
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "kz'N\"rko";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "kz'N\"rko");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("kz'N\"rko", (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      String string1 = simpleTimeZone0.getDisplayName(locale0);
      String string2 = "\\DthyMrd:$OoU/u1";
      // Undeclared exception!
      try { 
        simpleTimeZone0.getDisplayName(false, (-263));
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -263
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("=_JhA`", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Object object0 = locale0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      MockDate mockDate0 = new MockDate();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(2);
      StringBuffer stringBuffer1 = decimalFormat0.format((-1L), stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Date) mockDate0, stringBuffer2);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, (TimeZone) null);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 0, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-431), (-431), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -431
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("E^~f.Z.2");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ENGLISH;
      String string0 = locale0.getDisplayScript(locale1);
      String string1 = locale0.getDisplayScript();
      String[] stringArray0 = Locale.getISOCountries();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      int int0 = (-2180);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-2180), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2180
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.UK;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      MockDate mockDate0 = new MockDate(3600000, 1, (-1355));
      String string0 = fastDateFormat0.format((Date) mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2, 1447, (-1092), 0, 0, 0);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      // Undeclared exception!
      try { 
        decimalFormat0.format((Object) mockGregorianCalendar1, (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.KOREAN;
      String string0 = locale0.getDisplayVariant(locale1);
      String string1 = locale0.getExtension('a');
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("~)j L[", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "ST,L";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ST,L", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, (Locale) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = new Locale("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(411, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 411
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(330, (-1966), timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1966
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, (Locale) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 2;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$fN+dzF2DKPSlHQ3");
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 762;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(762);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 762
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-3550);
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("}_:9(}v8&Hqu%2~.rj@", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-179));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -179
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      int int1 = 215;
      String string0 = "<null>";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(215, "<null>");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int2 = (-589);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-589), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -589
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = fastDateFormat0.getLocale();
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) "");
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("1 w0-(5");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("1 w0-(5", locale0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      fieldPosition0.setEndIndex(3);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) timeZone0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: sun.util.calendar.ZoneInfo
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      int int0 = 14;
      int int1 = 0;
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = ">`i!s";
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone timeZone1 = TimeZone.getDefault();
      String string1 = timeZone0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">`i!s", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("lX(l&n.k>/^FN_5@J9", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, (Locale) null);
      ParsePosition parsePosition0 = new ParsePosition(293);
      parsePosition0.setIndex(0);
      Object object0 = fastDateFormat0.parseObject("NIi9<*X1<~|kCj ", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-2824);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2824), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2824
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-5910));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -5910
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(81, 81);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 81
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("mkgUWuuNKXG", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "PF#E5p4-9]W", 0, 1, 11, 0, 2, 3, (-1), 1, 0, (-1), 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 11
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1661, 1661);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1661
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("Y", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "|E6");
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((long) 0);
      int int0 = 45;
      // Undeclared exception!
      try { 
        simpleTimeZone0.setStartRule(0, (-625), 45, (-1311), true);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -1311
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "dF`TTu>*S-zz";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("dF`TTu>*S-zz");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: TT
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.UK;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 58, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 58
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      TimeZone timeZone1 = mockGregorianCalendar0.getTimeZone();
      timeZone0.setID("");
      StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
      StringBuffer stringBuffer3 = stringBuffer1.append((double) 0);
      StringBuffer stringBuffer4 = stringBuffer1.insert(0, 'y');
      fastDateFormat0.init();
      StringBuffer stringBuffer5 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer1);
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex((-1));
      parsePosition0.setIndex(2105);
      parsePosition0.setErrorIndex(349);
      Object object0 = fastDateFormat0.parseObject("Illegal pattern component: ", parsePosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, timeZone1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(349, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 349
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`T;#$v$mu&{}n>A[VrM", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "FastDateFormat[";
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.toString();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "Hi%_nlx";
      TimeZone timeZone0 = TimeZone.getTimeZone("Hi%_nlx");
      timeZone0.setRawOffset((-1));
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-3559), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3559
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("");
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("JO0]@z!&S9fpvTaE%G");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("Iy?|(@uY0=", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.format(496L);
      String string1 = fastDateFormat0.format(496L);
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-11), "", (-1), (-271), (-1779), 2, 3, 0, 0, 2, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1), (-384), (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -384
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.PRC;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        Locale.setDefault(locale_Category0, (Locale) null);
      } catch(NullPointerException e) {
         //
         // Can't set default locale to NULL
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      String string0 = locale0.getScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      fastDateFormat0.init();
      StringBuffer stringBuffer0 = new StringBuffer("sM:Ol");
      String string1 = locale0.getDisplayCountry();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      int int0 = fastDateFormat0.hashCode();
      int int1 = fastDateFormat0.hashCode();
      int int2 = fastDateFormat0.getMaxLengthEstimate();
      int int3 = fastDateFormat0.hashCode();
      int int4 = 0;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null, dateFormatSymbols0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = 10;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField");
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$Pair";
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$Pair", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate((-1), (-1134), 2411, 1, 0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "";
      String string1 = "n6l>O6l2V-s:]Ox";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(14, "n6l>O6l2V-s:]Ox", 0, (-430), 1, 0, 1, (-16), (-16), 0, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week in month -430
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = "ZhH=";
      Locale locale0 = new Locale("ZhH=", "ZhH=");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      boolean boolean0 = linkedHashSet0.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale locale1 = null;
      String string1 = locale0.getDisplayScript((Locale) null);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      FieldPosition fieldPosition0 = new FieldPosition(3);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }
}
