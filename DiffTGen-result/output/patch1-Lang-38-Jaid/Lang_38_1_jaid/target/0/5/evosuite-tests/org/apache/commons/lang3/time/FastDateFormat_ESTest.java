/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:26:01 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeParseException;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Object object0 = timeZone0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-603), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -603
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockDate mockDate0 = new MockDate();
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "%\"R+s*");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated character sequence index is invalid: %d", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "\"aqfAWn;+B_k 1\"q\\i$@";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"aqfAWn;+B_k 1\"qi$@");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "q7~`=aB-izB";
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.CANADA_FRENCH;
      String string1 = locale0.getDisplayCountry(locale1);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Set<Character> set0 = locale0.getExtensionKeys();
      TimeZone timeZone1 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("France", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 11;
      TimeZone timeZone0 = null;
      MockDate mockDate0 = new MockDate();
      String string0 = "jo(XC1>2X|[N6cBHgTL";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("jo(XC1>2X|[N6cBHgTL");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      MockDate mockDate0 = new MockDate();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format((Date) mockDate0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1966);
      intArray0[2] = 0;
      intArray0[3] = 60;
      intArray0[4] = (-49);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 273;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("|3[>$$<eMm", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        ZoneOffset.of("");
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.init();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string0 = fastDateFormat0.format(calendar0);
      String string1 = locale0.getDisplayCountry();
      boolean boolean0 = locale0.hasExtensions();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 408);
      StringBuffer stringBuffer2 = fastDateFormat0.format((-592L), stringBuffer0);
      StringBuffer stringBuffer3 = fastDateFormat0.format(calendar0, stringBuffer2);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 408, 408, 0, 2, 0, 4666, 39, 39, 4666);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 408
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null, locale0);
      fastDateFormat0.init();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("B/;ICej", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "-wmC<Dk\".D(z,y(";
      int int0 = (-1012);
      String string1 = ".~MTKu~3hTox,\\(";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1012), ".~MTKu~3hTox,(");
      String string2 = simpleTimeZone0.getDisplayName();
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-wmC<Dk\".D(z,y(", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "C\"{nMfQr";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "C\"{nMfQr");
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(48, (TimeZone) simpleTimeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 48
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "hpz:";
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&CVPo&QO{a}5knv");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 2606, 0, 1, 695, 0, 0, 0, (-1949), 695);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = ",4dcYH";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(",4dcYH");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (Locale) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 2;
      intArray0[4] = 3;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 1;
      intArray0[8] = 0;
      String string0 = fastDateFormat0.parseToken("eW05SW", intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      long long0 = 3143L;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-2796L), 2562, zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(localDateTime0, zoneOffset0, (ZoneId) zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = numberFormat0.format(0L, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Calendar) gregorianCalendar0, stringBuffer2);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 3;
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, (TimeZone) null);
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeZone timeZone1 = mockSimpleDateFormat0.getTimeZone();
      TimeZone.setDefault(timeZone1);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("SK3 ^:8!xMq6iG/_S:}", timeZone1, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = fastDateFormat0.format(calendar0, (StringBuffer) null);
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, (StringBuffer) null);
      String string0 = fastDateFormat0.format(calendar0);
      String string1 = "st";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("st", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Illegal pattern component: ");
      Locale locale0 = Locale.FRANCE;
      String string1 = locale0.getDisplayVariant();
      String string2 = simpleTimeZone0.getDisplayName(false, 0, locale0);
      FastDateFormat fastDateFormat0 = new FastDateFormat("Illegal pattern component: ", simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      int int0 = 1398;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 1398, (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1398
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/Vm/-H2\"rOqjVv");
      Locale locale0 = Locale.PRC;
      String string0 = locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("/Vm/-H2\"rOqjVv", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "WAq#WaU6<p['Ql";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "WAq#WaU6<p['Ql");
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("=g2VYwB. RGWu&bY", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      long long0 = 0L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 0;
      String[] stringArray0 = new String[0];
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "DXLr_F";
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("DXLr_F", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Instant instant0 = MockInstant.ofEpochSecond((-724L));
      Date date0 = Date.from(instant0);
      boolean boolean0 = timeZone0.inDaylightTime(date0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("b84uBH[jXF~HMNB", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject(".8Fa=WG0Q'^4ofkww8", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(4, 4, (TimeZone) null, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Xe[=zdv-_*");
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("Xe[=zdv-_*", simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, (TimeZone) simpleTimeZone0, locale0);
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$Pair";
      int[] intArray0 = new int[8];
      String string1 = null;
      // Undeclared exception!
      try { 
        ZoneOffset.of("Xe[=zdv-_*");
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: Xe[=zdv-_*
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(1, (-1093), 0);
      } catch(DateTimeException e) {
         //
         // Zone offset minutes and seconds must be positive because hours is positive
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2239), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2239
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      String string0 = "";
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.format((long) 0, stringBuffer0);
      int int0 = 1;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 12);
      boolean boolean0 = mockGregorianCalendar0.before(locale0);
      // Undeclared exception!
      try { 
        MockLocalDateTime.parse((CharSequence) "");
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("w][_YqS7:V%", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0#~)dh1>qs lU3[");
      timeZone0.setID("0#~)dh1>qs lU3[");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(476, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 476
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 15, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Q'Jl6ELw", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "|punnQ!%IAH";
      TimeZone timeZone0 = TimeZone.getTimeZone("|punnQ!%IAH");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("W0.^Q#=z#", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      int int0 = fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      Locale locale0 = Locale.ENGLISH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Locale locale1 = Locale.GERMAN;
      String string0 = locale0.getDisplayVariant(locale1);
      String string1 = locale0.getDisplayLanguage();
      ParsePosition parsePosition0 = new ParsePosition(Integer.MIN_VALUE);
      parsePosition0.setErrorIndex(188);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      String string2 = fastDateFormat0.format(date0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string3 = fastDateFormat0.format(calendar0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("English");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 60;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(60, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 60
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = " %(57Lv5'9YTN]Vz'";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" %(57Lv5'9YTN]Vz'");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ZoneOffset zoneOffset1 = ZoneOffset.ofTotalSeconds(43);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      String string0 = fastDateFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 4856;
      int int1 = 2196;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "vg^m", 0, 0, 0, 0, 4856, 0, 2196, 0);
      String string0 = "";
      String string1 = "<null>";
      Locale locale0 = new Locale("", "<null>");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
      int int2 = fastDateFormat0.getMaxLengthEstimate();
      int int3 = fastDateFormat0.getMaxLengthEstimate();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(48, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 48
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "dO";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("dO");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
      String string0 = locale0.getDisplayCountry();
      Object object0 = locale0.clone();
      fastDateFormat0.init();
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      fastDateFormat0.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1397);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1397
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = (-941);
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2, locale0);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale1);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(4435, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4435
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      TimeZone timeZone0 = TimeZone.getTimeZone("Y`FDo.?");
      Locale locale0 = null;
      ZoneId zoneId0 = timeZone0.toZoneId();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-3543), 2, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3543
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "I6z\\P{} ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("I6zP{} ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      fastDateFormat0.init();
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      boolean boolean1 = fastDateFormat0.equals("Friday, February 14, 2014");
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-679), "[", 2, 1416, 0, Integer.MIN_VALUE, 0, 2910, 1, 3250);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -2147483648
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string0 = fastDateFormat0.getPattern();
      Long long0 = new Long(0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-2823));
      StringBuffer stringBuffer1 = decimalFormat0.format(2638.2652772, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = stringBuffer0.append(2);
      StringBuffer stringBuffer3 = decimalFormat0.format((long) 2, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer4 = fastDateFormat0.format((Object) long0, stringBuffer3, fieldPosition0);
      TimeZone timeZone0 = TimeZone.getDefault();
      String string1 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      TimeZone timeZone1 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-157), 111, timeZone1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 111
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-4263), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -4263
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 58;
      int int1 = 1319;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(58, 1319);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1319
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(".$k/");
      String string0 = fastDateFormat0.getPattern();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2404);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2404
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      Long long0 = new Long(0L);
      String string0 = fastDateFormat0.format((Object) long0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      Locale locale1 = Locale.forLanguageTag("");
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1499), "", 0, 0, 1, (-2749), 0, 1000, 2, 0, 732, (-2749), 31);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 1000
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(3370);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 3370
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("OK\"jYh");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = new Locale("Yox0,[a_k", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.CHINA;
      Locale.setDefault(locale_Category0, locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      String string0 = locale0.getDisplayVariant();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      String string1 = fastDateFormat0.format((Object) calendar0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0, locale0);
      String string2 = fastDateFormat0.format((long) 3);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("YjlZ:,P$o+7!?}.K");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"YjlZ:,P$o+7!?}.K\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getTimeZone("*nGCtZfJ");
      Object object0 = timeZone0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object1);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "n^eSUZIz1LGAG@F");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(40, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 40
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = (-2023);
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.US;
      String string0 = locale0.getDisplayName(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2023), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2023
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-3060), 0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3060
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockDate mockDate0 = new MockDate();
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "%\"R+s*");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      boolean boolean0 = fastDateFormat0.equals(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1583, 1583, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1583
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1966);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1966
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      int int0 = 2611;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2611, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2611
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("6t9C)n", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-765));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -765
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 43;
      String string0 = "EdiCFbAk%luR65ujW";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(43, "EdiCFbAk%luR65ujW", 60, (-1769), 0, 60, (-1826), 60, 0, 0, 49, (-1826), (-5186));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 60
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "\"a2fAtn;+k 1L\"q\\i$@";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"a2fAtn;+k 1L\"qi$@", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 162, 162, 0, 1, (-2105));
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
      TimeZone.setDefault(simpleTimeZone0);
      int[] intArray0 = new int[2];
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayName(locale1);
      intArray0[0] = (-2105);
      String string1 = locale0.getDisplayLanguage();
      intArray0[1] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string0 = "";
      int int1 = (-1499);
      String string1 = "";
      Locale locale1 = Locale.forLanguageTag("");
      int int2 = 0;
      int int3 = (-2749);
      int int4 = 1000;
      int int5 = 732;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1499), "", 0, 0, 1, (-2749), 0, 1000, 2, 0, 732, (-2749), 31);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 1000
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string1 = "iz2-*4I`";
      String string2 = fastDateFormat0.format(0L);
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, locale0);
      String string3 = "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField";
      int int0 = 885;
      int int1 = 1460;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2, "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", 90, 592, 0, 885, 2750, (-288), 1460, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 90
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "2Xmi%Y";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2Xmi%Y");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 2074;
      int int1 = 0;
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      String string0 = fastDateFormat0.format((long) 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, (Locale) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 3, (-1551), (-1281), 0);
      Date date0 = mockGregorianCalendar0.getTime();
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      String string2 = fastDateFormat0.format(3326L);
      SimpleTimeZone simpleTimeZone1 = null;
      try {
        simpleTimeZone1 = new SimpleTimeZone(0, "", 8, 1, 0, 0, 0, 1768, 8, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal end time -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 1000;
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1000, "");
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1000, (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1000
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
