/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 07:50:37 GMT 2020
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.stream.Stream;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2.893485277253286E-8);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      double double0 = (-2713.99590144775);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2713.99590144775), 1);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(141);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 141);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 141);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2274.3);
      int int0 = simplexTableau0.getNumArtificialVariables();
      boolean boolean1 = linkedList0.retainAll(linkedList1);
      double double0 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      double double1 = arrayRealVector0.getNorm();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1741.892991, 2570);
      double double2 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      boolean boolean2 = linkedList0.offer((LinearConstraint) null);
      int int1 = simplexTableau1.getHeight();
      int int2 = simplexTableau1.getNumArtificialVariables();
      double double3 = simplexTableau1.getEntry(0, 0);
      simplexTableau1.dropPhase1Objective();
      int int3 = simplexTableau1.getOriginalNumDecisionVariables();
      // Undeclared exception!
      try { 
        simplexTableau1.getBasicRow(2570);
      } catch(IllegalArgumentException e) {
         //
         // column index (2,570)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 286.944956;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3241.1163427));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 4312.1985);
      boolean boolean0 = linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-4277.460833735));
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      boolean boolean1 = linkedList0.add(linearConstraint0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(115);
      LinearConstraint[] linearConstraintArray0 = new LinearConstraint[1];
      linearConstraintArray0[0] = linearConstraint0;
      LinearConstraint[] linearConstraintArray1 = linkedList1.toArray(linearConstraintArray0);
      LinearConstraint linearConstraint1 = new LinearConstraint(openMapRealVector0, relationship0, (-621.023371));
      boolean boolean2 = linkedList1.offerFirst(linearConstraint1);
      boolean boolean3 = linkedList0.addAll((Collection<? extends LinearConstraint>) linkedList1);
      int int0 = simplexTableau0.getRhsOffset();
      int int1 = simplexTableau0.hashCode();
      RealMatrix realMatrix0 = simplexTableau0.createTableau(true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-716.859589);
      doubleArray0[2] = (-2310.03686952);
      doubleArray0[3] = (-730.8067878974);
      doubleArray0[4] = 1.0E-12;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-716.859589));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, 0.0, relationship0, realVector0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      simplexTableau0.subtractRow(0, 0, 0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 1.0E-12, 2284);
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(linkedList1);
      // Undeclared exception!
      try { 
        simplexTableau1.setEntry(2284, 2284, 0.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (2,284)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = openMapRealVector1.getMaxValue();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      boolean boolean0 = simplexTableau0.isOptimal();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.getValue(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1115.386);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) (-1115.386);
      Double double0 = new Double(606.649344273762);
      double double1 = Double.min(0.0, (-465.8));
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) (-1115.386);
      doubleArray1[3] = (Double) (-1115.386);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      boolean boolean0 = Double.isFinite((-660.026574));
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, (double) doubleArray1[1]);
      boolean boolean1 = linkedList0.add(linearConstraint0);
      int int0 = 0;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2270.8);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 489.2813;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 489.2813;
      doubleArray1[1] = (Double) (-2270.8);
      doubleArray1[2] = (Double) (-1.0);
      doubleArray1[3] = (Double) 489.2813;
      doubleArray1[4] = (Double) 489.2813;
      Double double0 = new Double((-1.0));
      doubleArray1[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector1, (-1.0), relationship0, openMapRealVector0, (-2270.8));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2270.8));
      simplexTableau0.dropPhase1Objective();
      int int0 = simplexTableau0.getRhsOffset();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2902.473460888;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 2902.473460888);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, Double.NaN);
      Integer integer0 = simplexTableau0.getBasicRow(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1943.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 10.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1943.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 10.0, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 10.0);
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, list1, goalType0, true, 1943.0, (-1782));
      int int0 = simplexTableau2.getArtificialVariableOffset();
      PointValuePair pointValuePair0 = simplexTableau2.getSolution();
      List<LinearConstraint> list2 = simplexTableau0.normalizeConstraints(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (-717.3202562811657);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-717.3202562811657));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2879.9573799616946), 1974);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, (-2879.9573799616946));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      int int0 = simplexTableau0.getWidth();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, (-2879.9573799616946));
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(list0);
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow(1974);
      } catch(IllegalArgumentException e) {
         //
         // column index (1,974)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-459.667975);
      doubleArray0[2] = (-459.667975);
      doubleArray0[3] = (-459.667975);
      doubleArray0[4] = (double) 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1667.21705831686, 2377);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      RealMatrix realMatrix0 = simplexTableau0.createTableau(true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry((-1054), (-1054));
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,054)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5830993332061267E-10;
      doubleArray0[1] = (-2879.9573799616946);
      doubleArray0[2] = 2996.48576334823;
      doubleArray0[3] = 4132.359507581;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 660.004);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 660.004);
      Iterator<LinearConstraint> iterator0 = linkedList0.iterator();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1537.9466379341018;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1537.9466379341018);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1537.9466379341018, (-3409));
      int int0 = simplexTableau0.getNumDecisionVariables();
      int int1 = simplexTableau0.getNumSlackVariables();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.58820393);
      doubleArray0[1] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1235.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 820.544230523, 0);
      int int0 = simplexTableau0.getNumObjectiveFunctions();
      int int1 = simplexTableau0.getSlackVariableOffset();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1109.1806;
      doubleArray0[2] = 1344.0;
      doubleArray0[3] = (-321.41);
      doubleArray0[4] = 1285.639;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-400.0206831399833);
      doubleArray0[7] = (-782.328142695058);
      doubleArray0[8] = (-434.23700712);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1420.30951);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2022.546944313622), 1798);
      int int0 = simplexTableau0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 23.418;
      doubleArray0[2] = 0.0;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1151.88));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 0.0, 1695);
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(list0);
      SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, list1, goalType0, false, 0.0);
      int int0 = simplexTableau2.getNumSlackVariables();
      int int1 = simplexTableau0.getNumArtificialVariables();
      int int2 = simplexTableau1.getRhsOffset();
      boolean boolean0 = simplexTableau2.isOptimal();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3422));
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 133.971;
      doubleArray0[1] = 2230.8179560147364;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 133.971);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 133.971, (-1155));
      boolean boolean0 = simplexTableau0.isOptimal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1125.6229296612;
      doubleArray0[1] = 562.73079;
      doubleArray0[2] = (-155.822798030841);
      doubleArray0[3] = 1.0E-9;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, Double.NEGATIVE_INFINITY);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 10);
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2440.971184183);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1);
      int int0 = simplexTableau0.getArtificialVariableOffset();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 2.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2.0, (-1232));
      int int0 = simplexTableau0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) null, (-950.7263116059593));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-950.7263116059593);
      doubleArray0[1] = (-950.7263116059593);
      doubleArray0[2] = (-950.7263116059593);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-950.7263116059593));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      int int0 = 1149;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1619.50943478564, 1149);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1151.679055));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) null, relationship0, (-2713.99590144775));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = linearObjectiveFunction0.getValue(doubleArray0);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-575.17416467), relationship0, doubleArray0, (-575.17416467));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1667.21705831686, 2377);
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(2377, 2377, (-575.17416467));
      } catch(IllegalArgumentException e) {
         //
         // row index (2,377)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2784), 1176);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 0);
      } catch(IllegalArgumentException e) {
         //
         // -2,781 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1495.59313059253;
      doubleArray0[1] = 984.749;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1698.12593189);
      doubleArray0[5] = 3508.504000167304;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 2710.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-9);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      boolean boolean0 = linkedList0.removeLastOccurrence(linearObjectiveFunction0);
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean1 = true;
      Iterator<LinearConstraint> iterator0 = linkedList0.iterator();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry((-1177), (-1177), 1.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,177)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-2535.7773502265));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1677.0572847405572));
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (double) doubleArray0[1]);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1854.9), 0);
      simplexTableau0.setEntry(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapSubtract(3536.18270916);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 3536.18270916);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      LinearConstraint[] linearConstraintArray0 = new LinearConstraint[2];
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, relationship0, 3536.18270916);
      linearConstraintArray0[0] = linearConstraint0;
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship0, 3536.18270916);
      linearConstraintArray0[1] = linearConstraint1;
      LinearConstraint[] linearConstraintArray1 = linkedList0.toArray(linearConstraintArray0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      int int0 = simplexTableau0.getNumSlackVariables();
      double[][] doubleArray1 = simplexTableau0.getData();
      simplexTableau0.dropPhase1Objective();
      int int1 = simplexTableau0.getWidth();
      simplexTableau0.initializeColumnLabels();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 2490.14692355558;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2490.14692355558);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2490.14692355558, 0);
      Spliterator<LinearConstraint> spliterator0 = linkedList0.spliterator();
      simplexTableau0.divideRow(0, (-1728.0));
      int int0 = simplexTableau0.getNumArtificialVariables();
      int int1 = simplexTableau0.getWidth();
      double[][] doubleArray1 = simplexTableau0.getData();
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(5, 0);
      } catch(IllegalArgumentException e) {
         //
         // row index (5)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 132.27292985);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      int int0 = simplexTableau0.getNumObjectiveFunctions();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 954.747;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4818.82745);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, Double.NEGATIVE_INFINITY);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-4818.82745));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 0.0, 12);
      // Undeclared exception!
      try { 
        simplexTableau1.subtractRow(12, 0, 0.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (12)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 6.283185307179586);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 6.283185307179586, 836);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>(list0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType1, false, 836);
      // Undeclared exception!
      try { 
        simplexTableau1.subtractRow(836, 3487, 1.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (836)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(1627.3547496824528);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      doubleArray0[4] = double4;
      Double double5 = new Double((-1.0));
      doubleArray0[5] = double5;
      Double double6 = new Double(1627.3547496824528);
      doubleArray0[6] = double6;
      Double double7 = new Double(1021.0);
      doubleArray0[7] = double7;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      double double8 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1806.0197801;
      doubleArray0[3] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, Double.POSITIVE_INFINITY);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3026.0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      Stream<LinearConstraint> stream0 = linkedList0.parallelStream();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 1806.0197801, 1394);
      int int0 = 21;
      // Undeclared exception!
      try { 
        simplexTableau1.divideRow(21, 3026.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (21)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0E-9;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1524.9999);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3429.366);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 2403.889;
      doubleArray0[7] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0, (-663));
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(46, 46);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1174.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, 0.0, 0);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0);
      double double0 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0);
      double double1 = arrayRealVector0.getMinValue();
      Integer integer0 = simplexTableau0.getBasicRow(0);
      int int0 = simplexTableau0.getNumArtificialVariables();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) null, (-2728.5161));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      int int0 = (-571);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2728.5161), (-571));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealVector realVector0 = RealVector.unmodifiableRealVector((RealVector) null);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-1347.33635432));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1347.33635432));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 582.9414652;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 582.9414652);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, (-419.54357));
      // Undeclared exception!
      try { 
        simplexTableau1.getBasicRow((-2122));
      } catch(IllegalArgumentException e) {
         //
         // column index (-2,122)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2258.9528));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2258.9528));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      RealMatrix realMatrix0 = simplexTableau0.createTableau(false);
      int int0 = simplexTableau0.getRhsOffset();
      double[][] doubleArray1 = simplexTableau0.getData();
      LinearConstraint linearConstraint0 = linkedList0.pollLast();
      int int1 = simplexTableau0.getOriginalNumDecisionVariables();
      double[][] doubleArray2 = simplexTableau0.getData();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3924);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 635.53104);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3924, 46);
      // Undeclared exception!
      simplexTableau0.divideRow(0, 0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1961.62414361548);
      doubleArray0[1] = (-0.1666666567325592);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3475.0;
      doubleArray0[4] = 1062.50256;
      doubleArray0[5] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2879.9573799616946);
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = linearObjectiveFunction0.getValue(doubleArray0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3475.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2480, 1399.014262329);
      double double2 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      int int0 = simplexTableau0.getRhsOffset();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int1 = simplexTableau0.hashCode();
      int int2 = simplexTableau0.getOriginalNumDecisionVariables();
      boolean boolean0 = simplexTableau0.isOptimal();
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow(1190);
      } catch(IllegalArgumentException e) {
         //
         // column index (1,190)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1427.1533210715052);
      doubleArray0[0] = double0;
      int int0 = (-428);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-428), (-428));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2303.557314);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1083.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 0.0, relationship0, arrayRealVector0, 1.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      simplexTableau0.initializeColumnLabels();
      int int0 = simplexTableau0.getNumArtificialVariables();
      int int1 = simplexTableau0.getHeight();
      boolean boolean1 = simplexTableau0.equals(linkedList0);
      PointValuePair pointValuePair1 = simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 2489.664958810308;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2489.664958810308);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2489.664958810308, 0);
      Spliterator<LinearConstraint> spliterator0 = linkedList0.spliterator();
      simplexTableau0.divideRow(0, (-1728.0));
      int int0 = simplexTableau0.getNumArtificialVariables();
      int int1 = simplexTableau0.getWidth();
      double[][] doubleArray1 = simplexTableau0.getData();
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(4, 0);
      } catch(IllegalArgumentException e) {
         //
         // row index (4)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4312.48288985;
      doubleArray0[2] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2227.060566);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      int int0 = arrayRealVector0.getMaxIndex();
      Integer integer0 = new Integer((-1));
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 1003);
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 306.22491);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      simplexTableau0.dropPhase1Objective();
      int int1 = simplexTableau0.getSlackVariableOffset();
      simplexTableau0.initializeColumnLabels();
      boolean boolean1 = linkedList0.offerLast(linearConstraint0);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int2 = simplexTableau0.getRhsOffset();
      boolean boolean2 = simplexTableau0.isOptimal();
      linkedList0.addFirst(linearConstraint0);
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(5, 1.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (5)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2270.8);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2296.7983203);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) (-2296.7983203);
      doubleArray1[1] = (Double) (-2270.8);
      doubleArray1[2] = (Double) (-1.0);
      doubleArray1[3] = (Double) (-2296.7983203);
      doubleArray1[4] = (Double) (-2296.7983203);
      Double double0 = new Double((-1.0));
      doubleArray1[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector1, (-1.0), relationship0, openMapRealVector0, (-2270.8));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2270.8));
      simplexTableau0.dropPhase1Objective();
      int int0 = simplexTableau0.getRhsOffset();
      boolean boolean1 = simplexTableau0.equals(linkedList0);
      int int1 = simplexTableau0.getOriginalNumDecisionVariables();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((Double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = linkedList0.retainAll(linkedList1);
      boolean boolean1 = linkedList0.offer((LinearConstraint) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1537.9466379341018;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1537.9466379341018);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1537.9466379341018, (-3409));
      int int0 = simplexTableau0.getNumDecisionVariables();
  }
}
