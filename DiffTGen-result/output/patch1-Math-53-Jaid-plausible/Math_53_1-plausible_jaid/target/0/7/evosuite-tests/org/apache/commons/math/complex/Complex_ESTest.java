/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:25:43 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.2);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex3.sqrt();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex1.INF.cosh();
      Complex complex6 = complex5.I.subtract(complex3);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.subtract(complex1);
      double double0 = complex1.getImaginary();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex1.cos();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex4.I.conjugate();
      Complex complex9 = complex0.log();
      boolean boolean1 = complex5.isNaN();
      Complex complex10 = complex1.ONE.atan();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex9.NaN.sqrt();
      Complex complex13 = complex9.subtract(complex1);
      Object object0 = complex1.ONE.readResolve();
      Complex complex14 = complex1.conjugate();
      Complex complex15 = complex3.tan();
      Complex complex16 = complex9.multiply(complex4);
      int int0 = complex11.hashCode();
      Complex complex17 = complex1.log();
      Complex complex18 = complex2.multiply(complex15);
      Complex complex19 = complex0.NaN.acos();
      Complex complex20 = complex1.sqrt();
      Complex complex21 = complex1.log();
      Complex complex22 = complex4.add(complex0);
      Complex complex23 = complex20.add(complex22);
      Complex complex24 = complex8.tanh();
      try { 
        complex22.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.cosh();
      double double1 = complex1.INF.getArgument();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.I.createComplex(1.0, 0.7853981633974483);
      List<Complex> list0 = complex5.I.nthRoot(17);
      double double2 = complex5.getArgument();
      Complex complex6 = complex4.divide(complex1);
      int int0 = complex0.hashCode();
      double double3 = complex0.getArgument();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.ZERO.nthRoot(709);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.log();
      // Undeclared exception!
      complex1.I.nthRoot(5110);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex4.ONE.log();
      Complex complex9 = complex7.ZERO.add(complex5);
      Complex complex10 = complex5.sinh();
      boolean boolean0 = complex5.isNaN();
      Complex complex11 = complex2.pow(complex5);
      String string0 = complex0.INF.toString();
      List<Complex> list0 = complex5.nthRoot(7);
      Complex complex12 = complex1.tan();
      Complex complex13 = complex12.INF.sin();
      double double0 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-850.84445), (-850.84445));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex3.NaN.sqrt();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex1.ONE.negate();
      Complex complex8 = complex0.pow(complex1);
      Object object0 = complex8.INF.readResolve();
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.createComplex((-850.84445), (-3942.13065));
      Complex complex11 = complex8.createComplex(1041.35956623562, 1041.35956623562);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(3.141592653589793, 3.141592653589793);
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-204.0524921), 0.0);
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.I.sqrt1z();
      String string0 = complex3.NaN.toString();
      Complex complex7 = complex2.pow(complex0);
      Complex complex8 = complex1.divide(complex0);
      int int0 = complex1.hashCode();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex2.INF.cos();
      Complex complex11 = complex10.multiply(complex6);
      Complex complex12 = complex8.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex0.multiply(complex12);
      double double1 = complex8.getImaginary();
      double double2 = complex3.getImaginary();
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex1.exp();
      double double3 = complex4.getReal();
      String string1 = complex11.toString();
      Complex complex16 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.atan();
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex3.NaN.sqrt1z();
      Object object1 = complex4.ONE.readResolve();
      Complex complex5 = complex3.INF.cos();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.subtract(complex2);
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex7.ONE.divide(complex2);
      Complex complex11 = complex9.I.sqrt1z();
      Complex complex12 = complex11.I.pow(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex13.NaN.tan();
      Complex complex15 = complex1.divide(complex8);
      Complex complex16 = complex8.sqrt();
      double double0 = complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(862.46, 862.46);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.NaN.pow(complex3);
      Complex complex6 = complex0.sinh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = complex8.I.subtract(complex6);
      Complex complex10 = complex7.NaN.cosh();
      Object object0 = complex3.I.readResolve();
      Object object1 = complex7.readResolve();
      Complex complex11 = complex3.log();
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex11.sin();
      Complex complex14 = complex0.NaN.sqrt1z();
      Complex complex15 = complex12.ZERO.divide(complex10);
      Complex complex16 = complex4.cosh();
      Complex complex17 = complex5.asin();
      Complex complex18 = complex16.acos();
      Complex complex19 = complex18.I.cosh();
      Complex complex20 = complex10.cosh();
      double double0 = complex2.getImaginary();
      Complex complex21 = complex20.conjugate();
      Complex complex22 = complex20.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(967.5099541630071, 4272.43342976654);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.equals("EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY");
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex1.divide(complex0);
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = complex3.I.multiply(4272.43342976654);
      Complex complex5 = complex3.INF.atan();
      String string0 = complex0.toString();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex3.ONE.subtract(complex4);
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex8.asin();
      int int1 = complex5.hashCode();
      Complex complex11 = complex0.multiply(complex8);
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex13.INF.add(complex0);
      Complex complex15 = complex14.I.sqrt1z();
      int int2 = complex13.NaN.hashCode();
      String string1 = complex3.toString();
      Complex complex16 = complex8.I.sin();
      Complex complex17 = complex5.conjugate();
      Complex complex18 = complex17.INF.sqrt1z();
      boolean boolean2 = complex3.equals(complex12);
      Complex complex19 = complex11.sqrt();
      Complex complex20 = complex9.exp();
      String string2 = complex20.ONE.toString();
      double double0 = complex1.getReal();
      Complex complex21 = complex6.pow(complex5);
      double double1 = complex20.getArgument();
      Complex complex22 = complex1.asin();
      Complex complex23 = complex6.conjugate();
      Complex complex24 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex1.INF.getArgument();
      ComplexField complexField0 = complex0.NaN.getField();
      String string0 = complex1.NaN.toString();
      List<Complex> list0 = complex0.nthRoot(730);
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex1.asin();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.NaN.getArgument();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.createComplex((-696.5600842111287), (-1.0));
      Complex complex6 = complex5.ONE.subtract(complex0);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex5.cos();
      Object object0 = complex4.readResolve();
      Complex complex13 = complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex((-1733.75), (-1733.75));
      Complex complex2 = complex0.NaN.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.I.sqrt();
      double double0 = complex2.getReal();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.cos();
      String string0 = complex0.toString();
      Complex complex7 = complex3.ZERO.tanh();
      Complex complex8 = complex3.ONE.tan();
      boolean boolean1 = complex4.isNaN();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.INF.multiply(complex0);
      Complex complex11 = complex3.tan();
      Complex complex12 = complex1.add(complex5);
      double double1 = complex2.abs();
      Complex complex13 = complex6.subtract(complex3);
      Complex complex14 = complex7.asin();
      Complex complex15 = complex3.negate();
      Complex complex16 = complex1.log();
      Complex complex17 = complex10.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.cosh();
      int int0 = complex3.ZERO.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex1.ZERO.sinh();
      String string0 = complex3.INF.toString();
      Complex complex5 = complex3.ZERO.negate();
      double double0 = complex0.ZERO.getArgument();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex6.I.sinh();
      Complex complex9 = complex7.ONE.multiply(0.0);
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex3.subtract(complex0);
      Complex complex11 = complex5.sqrt();
      try { 
        complex6.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3443.015860902, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.INF.atan();
      Complex complex8 = complex7.I.cosh();
      boolean boolean0 = complex6.isInfinite();
      Complex complex9 = complex2.divide(complex0);
      Complex complex10 = complex9.atan();
      double double0 = complex1.getArgument();
      boolean boolean1 = complex2.isInfinite();
      double double1 = complex1.getArgument();
      Complex complex11 = complex8.log();
      Complex complex12 = complex1.sin();
      double double2 = complex12.INF.abs();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.I.pow(complex2);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex5.INF.sin();
      int int0 = complex5.I.hashCode();
      Object object0 = complex4.ZERO.readResolve();
      String string0 = complex5.I.toString();
      Complex complex7 = complex5.I.sin();
      int int1 = complex1.hashCode();
      Complex complex8 = complex0.sinh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex8.INF.multiply(complex0);
      double double1 = complex2.getArgument();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex10.ZERO.subtract(complex1);
      ComplexField complexField1 = complex8.getField();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ZERO.multiply((-524.965));
      Complex complex6 = complex3.acos();
      double double0 = complex1.getImaginary();
      Complex complex7 = complex1.divide(complex3);
      Complex complex8 = complex3.ZERO.sinh();
      Complex complex9 = complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
      String string0 = complex0.NaN.toString();
      Complex complex10 = complex6.multiply(1855.87);
      double double1 = complex6.getReal();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex2.cos();
      Object object0 = complex9.readResolve();
      Complex complex13 = complex12.subtract(complex10);
      Complex complex14 = complex9.atan();
      double double2 = complex11.abs();
      Complex complex15 = complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      double double0 = complex1.NaN.abs();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.ONE.tanh();
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex1.I.sqrt();
      List<Complex> list0 = complex2.INF.nthRoot(653);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.NaN.multiply(complex3);
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex9.INF.pow(complex7);
      Complex complex12 = complex10.cos();
      Complex complex13 = complex3.add(complex1);
      boolean boolean1 = complex7.isNaN();
      Complex complex14 = complex10.sinh();
      boolean boolean2 = complex9.isNaN();
      int int0 = complex2.hashCode();
      Complex complex15 = complex11.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      double double1 = complex0.abs();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex0.INF.subtract(complex2);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex0.ZERO.multiply(complex3);
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex7.NaN.pow(complex4);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.acos();
      double double1 = complex0.getReal();
      boolean boolean0 = complex2.isNaN();
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.multiply(complex2);
      String string1 = complex0.toString();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex1.multiply(Double.NaN);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex5.multiply(complex4);
      int int1 = (-784);
      try { 
        complex0.nthRoot((-784));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -784
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ZERO.divide(complex2);
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex5.INF.divide(complex4);
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex6.INF.sqrt1z();
      Complex complex9 = complex0.ZERO.sqrt();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.NaN.add(complex9);
      Complex complex12 = complex0.asin();
      boolean boolean0 = complex12.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex14.INF.add(complex9);
      Complex complex16 = complex5.I.tanh();
      Complex complex17 = complex12.cos();
      Complex complex18 = complex10.sinh();
      Object object0 = complex18.INF.readResolve();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex2.abs();
      double double1 = complex1.getArgument();
      Complex complex19 = complex10.conjugate();
      double double2 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sqrt1z();
      Object object0 = complex4.readResolve();
      double double1 = complex3.ONE.abs();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex6.I.divide(complex3);
      Complex complex11 = complex8.ONE.sinh();
      Complex complex12 = complex11.INF.negate();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex6.equals(complex7);
      Complex complex13 = new Complex(1.0, 0.0);
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex1.subtract(complex13);
      Complex complex16 = complex6.sqrt1z();
      Complex complex17 = complex3.cosh();
      Complex complex18 = complex3.cos();
      int int0 = complex16.hashCode();
      Complex complex19 = complex18.multiply(0.0);
      Complex complex20 = complex12.sinh();
      Complex complex21 = complex3.multiply(0.0);
      Complex complex22 = complex17.cosh();
      boolean boolean2 = complex19.equals(complex15);
      Complex complex23 = complex14.multiply(872.0787533101727);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 40.19140625;
      Complex complex0 = new Complex(40.19140625, 40.19140625);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      String string0 = complex0.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      double double0 = complex1.abs();
      Complex complex2 = complex0.INF.multiply(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-770.866420578983), Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.ONE.multiply((-770.866420578983));
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.I.cosh();
      Complex complex7 = complex6.I.pow(complex0);
      Complex complex8 = complex3.sin();
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex8.cosh();
      Complex complex11 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.conjugate();
      double double0 = complex0.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.I.multiply(0.0);
      Complex complex6 = complex5.createComplex(0.0, (-818.86749571));
      Object object0 = complex6.readResolve();
      String string0 = complex6.NaN.toString();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex5.multiply(complex6);
      Complex complex9 = complex5.cosh();
      double double1 = complex9.abs();
      Complex complex10 = complex4.log();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.acos();
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.createComplex(1.0, 2474.1897);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.ONE.multiply(complex3);
      Complex complex7 = complex4.ZERO.multiply(470.0779354357);
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex7.divide(complex9);
      Complex complex11 = complex5.NaN.cosh();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex5.pow(complex1);
      Complex complex14 = complex13.tan();
      Complex complex15 = complex4.pow(complex3);
      Complex complex16 = complex14.sin();
      Complex complex17 = complex13.divide(complex11);
      boolean boolean0 = complex11.isInfinite();
      boolean boolean1 = complex15.equals(complex12);
      Complex complex18 = complex14.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex5.ONE.acos();
      Complex complex8 = complex6.ZERO.subtract(complex4);
      Complex complex9 = complex0.ONE.pow(complex5);
      String string0 = complex3.toString();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex10 = complex6.I.multiply(complex8);
      double double0 = complex2.getImaginary();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex8.sinh();
      Complex complex13 = complex12.ZERO.subtract(complex11);
      Complex complex14 = complex7.negate();
      Complex complex15 = complex14.ZERO.sin();
      Complex complex16 = complex15.NaN.exp();
      Complex complex17 = complex1.sinh();
      Complex complex18 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1922.243996409), (-1922.243996409));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.I.divide(complex3);
      double double0 = complex3.ONE.getArgument();
      Complex complex5 = complex0.exp();
      double double1 = complex2.getArgument();
      Complex complex6 = complex0.ZERO.sqrt1z();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.INF.multiply((-1922.243996409));
      Complex complex9 = complex3.cos();
      Complex complex10 = complex9.NaN.divide(complex7);
      Complex complex11 = complex10.NaN.log();
      Complex complex12 = complex0.pow(complex5);
      Complex complex13 = complex12.I.sqrt();
      double double2 = complex13.ZERO.abs();
      Complex complex14 = complex5.multiply(0.07490822288864472);
      Complex complex15 = complex3.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1761.051664080129, 1761.051664080129);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex1.createComplex(0.0, 2365.8);
      Complex complex4 = complex2.NaN.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.cos();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.pow(complex6);
      try { 
        complex5.nthRoot((-710));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -710
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.ZERO.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.I;
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.ONE.sin();
      String string0 = complex4.I.toString();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.add(complex4);
      Complex complex7 = complex1.atan();
      try { 
        complex2.nthRoot((-2745));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,745
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.INF.acos();
      double double0 = complex0.INF.abs();
      double double1 = complex0.getReal();
      Complex complex2 = complex1.exp();
      double double2 = complex1.abs();
      Complex complex3 = complex0.asin();
      double double3 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(697.86804, 1225.1370263101426);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.add(complex1);
      String string0 = complex0.ONE.toString();
      double double0 = complex0.getArgument();
      String string1 = complex0.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.cos();
      double double1 = complex3.getArgument();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex0.I.asin();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex7 = complex5.multiply(1225.1370263101426);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.0);
      Object object0 = complex0.INF.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = new Complex(77.1356521390345, 77.1356521390345);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.conjugate();
      int int0 = complex1.INF.hashCode();
      Complex complex6 = complex1.INF.acos();
      List<Complex> list0 = complex6.I.nthRoot(363);
      boolean boolean0 = complex0.equals("!/Ens");
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.multiply(complex0);
      Complex complex9 = complex4.sqrt();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-211.0921880367), (-211.0921880367));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex4.atan();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex7 = complex2.ONE.multiply((-211.0921880367));
      ComplexField complexField1 = complex4.getField();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex0.tan();
      boolean boolean0 = complex3.isNaN();
      List<Complex> list0 = complex4.nthRoot(849);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(2987.386783, 1.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.ONE.exp();
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-4348.141), (-4348.141));
      Complex complex2 = complex1.ONE.cos();
      List<Complex> list0 = complex0.nthRoot(2413);
      Complex complex3 = complex1.multiply((-553.19));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1409.260028985), (-1847.51070891));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.NaN.sqrt();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.ZERO.toString();
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      double double0 = 907.221914608;
      Complex complex2 = complex0.INF.createComplex(0.0, 907.221914608);
      Complex complex3 = complex2.ZERO.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.tanh();
      try { 
        complex4.I.nthRoot((-1635));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,635
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      int int0 = complex1.INF.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(0.0, (-1.0));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex0.multiply(2605.1009697451755);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.add(complex1);
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.INF.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.NaN.atan();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex2.NaN.add(complex0);
      Complex complex6 = complex5.acos();
      double double1 = complex5.ZERO.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex2.log();
      Complex complex9 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-2370.208220105), 0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1241.0);
      Complex complex1 = complex0.ZERO.negate();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.cosh();
      List<Complex> list0 = complex3.nthRoot(1444);
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-1037.521), 1271.42);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.cos();
      List<Complex> list0 = complex0.nthRoot(1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.097, 0.097);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals("i");
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      int int0 = complex1.INF.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.multiply(0.15);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2.6), (-2.6));
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.log();
      double double0 = complex1.abs();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex4.ZERO.asin();
      Complex complex8 = complex4.ZERO.subtract(complex0);
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex2.negate();
      try { 
        complex3.nthRoot((-1590));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,590
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex4.INF.exp();
      boolean boolean0 = complex3.equals((Object) null);
      Complex complex6 = complex0.exp();
      boolean boolean1 = complex3.isInfinite();
      Complex complex7 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.asin();
      double double0 = complex3.abs();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex6.INF.tan();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex4.tanh();
      boolean boolean0 = complex9.isNaN();
      boolean boolean1 = complex9.isNaN();
      Complex complex12 = complex11.NaN.pow(complex0);
      Complex complex13 = complex6.atan();
      Complex complex14 = complex11.createComplex(Double.NaN, Double.NaN);
      Object object0 = complex8.readResolve();
      Complex complex15 = complex0.log();
      Complex complex16 = complex10.sin();
      Object object1 = complex14.readResolve();
      boolean boolean2 = complex12.equals(object1);
      Complex complex17 = complex3.negate();
      Complex complex18 = complex9.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.log();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.ONE.divide(complex0);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.ONE.createComplex(0.0, Double.NaN);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      double double0 = complex0.abs();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex1.INF.createComplex(Double.POSITIVE_INFINITY, 2899.74378);
      Complex complex4 = complex0.conjugate();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex7.conjugate();
      List<Complex> list0 = complex8.nthRoot(2147453692);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.createComplex(305.42970235, 305.42970235);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.subtract(complex1);
      int int0 = complex5.hashCode();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex5.ONE.asin();
      Complex complex9 = complex8.I.conjugate();
      ComplexField complexField0 = complex6.ZERO.getField();
      List<Complex> list0 = complex6.nthRoot(282);
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.INF.sqrt();
      double double0 = complex6.abs();
      boolean boolean0 = complex4.isInfinite();
      Complex complex12 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex2.multiply(285.8);
      boolean boolean0 = complex0.equals((Object) null);
      double double0 = complex2.abs();
      double double1 = complex2.I.getArgument();
      double double2 = complex4.abs();
      double double3 = complex2.abs();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.pow(complex5);
      Complex complex7 = complex6.atan();
      List<Complex> list0 = complex6.nthRoot(2075);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2125.9862685984876, (-388.7));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.conjugate();
      String string0 = complex1.INF.toString();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex0.multiply(2125.9862685984876);
      Complex complex6 = complex1.sinh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.pow(complex7);
      Complex complex9 = complex0.multiply(2125.9862685984876);
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex0.subtract(complex1);
      double double0 = complex1.abs();
      String string0 = complex0.toString();
      Complex complex7 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.getArgument();
      int int0 = complex2.NaN.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.log();
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex7.INF.exp();
      double double1 = complex7.NaN.abs();
      List<Complex> list0 = complex3.NaN.nthRoot(17);
      String string0 = complex3.toString();
      int int1 = complex6.hashCode();
      double double2 = complex3.abs();
      Complex complex9 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.divide(complex6);
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex8.I.divide(complex6);
      Complex complex11 = complex0.ONE.log();
      Complex complex12 = complex11.ZERO.tan();
      Complex complex13 = complex5.INF.conjugate();
      try { 
        complex13.ONE.nthRoot((-638));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -638
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(2197.017689703725, 1646.32);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.ZERO.multiply(2197.017689703725);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex1.sqrt();
      int int0 = complex8.ZERO.hashCode();
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.ONE.log();
      String string0 = complex2.toString();
      Complex complex11 = complex0.cos();
      boolean boolean0 = complex8.isInfinite();
      Object object0 = complex8.readResolve();
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ONE.multiply(1.2393345855018391E-8);
      Complex complex3 = complex0.NaN.multiply(9.140260083262505E-9);
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.ONE.asin();
      double double0 = complex3.abs();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex6.pow(complex8);
      Complex complex10 = complex5.createComplex((-850.84445), 9.140260083262505E-9);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.sin();
      double double1 = complex5.ONE.abs();
      Complex complex6 = complex4.I.sqrt();
      Complex complex7 = complex4.ZERO.tan();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex2.INF.sin();
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex14.ZERO.tan();
      Complex complex16 = complex10.cos();
      Complex complex17 = complex10.INF.sinh();
      Complex complex18 = complex16.ONE.exp();
      Complex complex19 = complex18.ONE.createComplex(0.0, 0.0);
      String string0 = complex16.toString();
      Complex complex20 = complex19.NaN.subtract(complex9);
      Complex complex21 = complex1.sin();
      Complex complex22 = complex16.cosh();
      ComplexField complexField0 = complex16.getField();
      Complex complex23 = complex5.multiply(complex22);
      Complex complex24 = complex10.sqrt();
      Complex complex25 = complex23.sin();
      String string1 = complex17.toString();
      Complex complex26 = complex18.tan();
      boolean boolean0 = complex19.equals(complex9);
      Complex complex27 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.log();
  }
}
