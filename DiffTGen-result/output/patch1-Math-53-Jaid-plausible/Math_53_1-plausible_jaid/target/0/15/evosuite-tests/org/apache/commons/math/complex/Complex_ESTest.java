/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:29:26 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.ZERO.sqrt();
      int int0 = complex1.hashCode();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex8.ONE.tan();
      double double0 = complex2.getReal();
      Complex complex10 = complex2.add(complex0);
      Complex complex11 = complex7.tan();
      Object object0 = complex11.INF.readResolve();
      int int1 = complex2.hashCode();
      Complex complex12 = new Complex(Double.NaN, Double.NaN);
      boolean boolean0 = complex6.isNaN();
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex3.multiply(Double.NaN);
      Complex complex15 = complex3.acos();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-575.0444707));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.INF.asin();
      int int0 = complex2.INF.hashCode();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.ONE.add(complex2);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex5.ONE.cos();
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.NaN.acos();
      Complex complex12 = complex1.I.sqrt();
      double double0 = complex11.INF.abs();
      Complex complex13 = new Complex((-575.0444707), Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.createComplex(1.0, (-575.0444707));
      Complex complex15 = complex14.ZERO.acos();
      Complex complex16 = complex0.atan();
      boolean boolean0 = complex0.equals(complex5);
      Complex complex17 = complex16.exp();
      Complex complex18 = complex17.cos();
      Complex complex19 = complex18.ZERO.multiply(189.8);
      Complex complex20 = complex19.NaN.add(complex5);
      Complex complex21 = complex5.divide(complex8);
      Complex complex22 = complex18.tanh();
      ComplexField complexField0 = complex21.ZERO.getField();
      Complex complex23 = complex8.log();
      String string0 = complex0.toString();
      Complex complex24 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2674.05869, 2674.05869);
      Complex complex1 = Complex.NaN;
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.ZERO.add(complex1);
      String string0 = complex0.toString();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex3.ONE.multiply((-219.02));
      Complex complex5 = complex0.sin();
      double double1 = complex4.INF.abs();
      double double2 = complex3.I.abs();
      Complex complex6 = complex1.log();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex6.NaN.cosh();
      Complex complex9 = complex7.I.sqrt();
      Object object1 = complex4.readResolve();
      Complex complex10 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.subtract(complex2);
      double double0 = complex4.INF.abs();
      Complex complex6 = complex4.NaN.sqrt();
      String string0 = complex2.ZERO.toString();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex4.divide(complex2);
      Complex complex9 = complex8.ONE.multiply(complex2);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex11 = complex3.multiply(complex10);
      Complex complex12 = complex0.divide(complex3);
      Complex complex13 = complex5.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.getArgument();
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.createComplex((-1094.996519913917), 1.5707963267948966);
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.ONE.acos();
      Complex complex7 = complex6.NaN.multiply(complex1);
      Complex complex8 = complex4.log();
      Complex complex9 = complex3.subtract(complex8);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex10 = complex8.NaN.subtract(complex0);
      Complex complex11 = complex10.ZERO.sin();
      String string0 = complex9.INF.toString();
      Complex complex12 = complex9.log();
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex4.pow(complex1);
      Complex complex16 = complex13.pow(complex8);
      Complex complex17 = complex3.sinh();
      Complex complex18 = complex0.conjugate();
      ComplexField complexField1 = complex2.getField();
      Complex complex19 = complex17.multiply((-1094.996519913917));
      Complex complex20 = complex19.NaN.negate();
      Complex complex21 = complex12.conjugate();
      Complex complex22 = complex12.sqrt();
      double double1 = complex19.getReal();
      Complex complex23 = complex7.sin();
      Complex complex24 = complex3.multiply(Double.NaN);
      String string1 = complex12.toString();
      Object object1 = complex8.INF.readResolve();
      Complex complex25 = complex17.asin();
      Complex complex26 = complex22.tanh();
      Complex complex27 = complex24.pow(complex26);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex2.INF.nthRoot(266);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.INF.createComplex(2.4384203044354907E-8, 2.4384203044354907E-8);
      String string0 = complex3.toString();
      Object object1 = complex0.I.readResolve();
      Complex complex5 = complex0.pow(complex2);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex4.ZERO.negate();
      Complex complex7 = complex3.sqrt();
      List<Complex> list1 = complex7.ZERO.nthRoot(266);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex2.exp();
      ComplexField complexField1 = complex9.ONE.getField();
      Complex complex10 = complex3.I.sqrt1z();
      Complex complex11 = complex8.multiply(0.0036);
      String string1 = complex3.toString();
      Complex complex12 = complex1.multiply(complex11);
      double double0 = complex1.getReal();
      Complex complex13 = complex8.sin();
      Complex complex14 = complex8.NaN.atan();
      Complex complex15 = complex10.multiply(complex11);
      Complex complex16 = complex2.add(complex11);
      Complex complex17 = complex4.negate();
      Complex complex18 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex1.ZERO.multiply(6.283185307179586);
      Complex complex6 = complex4.I.createComplex(6.283185307179586, 1171.343);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex9.INF.sqrt1z();
      List<Complex> list0 = complex9.nthRoot(73);
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex8.cos();
      String string0 = complex11.INF.toString();
      double double0 = complex4.NaN.abs();
      boolean boolean1 = complex2.isNaN();
      Complex complex12 = complex11.divide(complex7);
      ComplexField complexField1 = complex7.getField();
      Complex complex13 = complex1.multiply(0.097);
      Complex complex14 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.NaN.sinh();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex4.NaN.sqrt();
      Complex complex11 = complex9.log();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex4.atan();
      double double1 = complex13.I.getArgument();
      double double2 = complex0.abs();
      int int0 = complex4.hashCode();
      Object object0 = complex6.readResolve();
      Complex complex14 = complex8.ZERO.negate();
      Complex complex15 = complex14.I.sin();
      int int1 = complex0.hashCode();
      Complex complex16 = complex7.subtract(complex0);
      Object object1 = complex8.readResolve();
      Complex complex17 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.INF.conjugate();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      List<Complex> list0 = complex0.nthRoot(2128);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex1.multiply(1920.509746341);
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.I.subtract(complex2);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex7.INF.log();
      Complex complex11 = complex4.INF.divide(complex8);
      Complex complex12 = complex10.ZERO.cos();
      String string0 = complex10.toString();
      ComplexField complexField0 = complex3.getField();
      Object object1 = complex12.I.readResolve();
      boolean boolean1 = complex3.isInfinite();
      Complex complex13 = complex0.tan();
      double double1 = complex13.ZERO.abs();
      Complex complex14 = complex4.subtract(complex3);
      String string1 = complex12.toString();
      Complex complex15 = complex2.INF.exp();
      Complex complex16 = complex6.cos();
      boolean boolean2 = complex1.isNaN();
      double double2 = complex2.getArgument();
      Complex complex17 = complex12.sqrt();
      boolean boolean3 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = complex3.ZERO.sin();
      String string0 = complex4.I.toString();
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.INF.divide(complex2);
      String string0 = complex3.I.toString();
      Complex complex7 = complex1.ONE.createComplex(Double.POSITIVE_INFINITY, (-1149.772559176));
      Complex complex8 = complex3.pow(complex1);
      double double0 = complex8.getArgument();
      Complex complex9 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex6.INF.tanh();
      Complex complex11 = complex9.I.exp();
      Complex complex12 = complex9.ZERO.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex9.nthRoot(1312);
      Complex complex13 = complex8.atan();
      double double1 = complex6.getArgument();
      int int0 = complex8.hashCode();
      Complex complex14 = complex11.subtract(complex4);
      ComplexField complexField0 = complex13.getField();
      Complex complex15 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.ZERO.sqrt();
      Complex complex6 = complex3.ZERO.sinh();
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex0.ONE.atan();
      Complex complex9 = complex8.NaN.exp();
      int int0 = complex7.hashCode();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex7.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex10.getImaginary();
      Complex complex13 = complex7.add(complex2);
      Complex complex14 = complex3.conjugate();
      ComplexField complexField1 = complex0.getField();
      Complex complex15 = complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.ZERO.sqrt();
      Complex complex6 = complex3.ZERO.sinh();
      Complex complex7 = complex0.ONE.atan();
      Complex complex8 = complex7.NaN.exp();
      int int0 = complex6.hashCode();
      Complex complex9 = complex6.negate();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex3.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex9.getImaginary();
      Complex complex12 = complex1.add(complex2);
      Complex complex13 = complex3.conjugate();
      Complex complex14 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-2668.445308929), (-2668.445308929));
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex1.NaN.log();
      Complex complex6 = complex5.ONE.pow(complex0);
      Complex complex7 = complex5.subtract(complex4);
      Complex complex8 = complex0.I.createComplex(5.669184079525E-24, 0.0);
      Complex complex9 = complex5.ONE.tan();
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex2.I.tan();
      Complex complex12 = complex11.NaN.subtract(complex7);
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex13.ZERO.add(complex2);
      String string0 = complex13.toString();
      Complex complex15 = complex1.multiply(0.19999954104423523);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(654.8128586057081);
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(37.51536533788, 1273.171);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex1.sqrt1z();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex5 = new Complex(833.54, 833.54);
      Complex complex6 = complex5.tanh();
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = complex5.I.tanh();
      Complex complex8 = complex5.I.subtract(complex1);
      boolean boolean0 = complex0.equals(complex5);
      boolean boolean1 = complex5.isInfinite();
      double double1 = complex4.abs();
      Object object1 = complex6.readResolve();
      boolean boolean2 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1094.560133296864, 1094.560133296864);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.cos();
      // Undeclared exception!
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.createComplex((-2902.6333979179617), 0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex2.ONE.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex1.NaN.multiply((-2902.6333979179617));
      Complex complex6 = complex1.createComplex(0.0, 0.0);
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex6.subtract(complex0);
      String string0 = complex0.toString();
      ComplexField complexField1 = complex1.ZERO.getField();
      Object object1 = complex1.readResolve();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.exp();
      double double0 = complex2.getArgument();
      Object object2 = complex1.readResolve();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex2.cosh();
      double double1 = complex6.getImaginary();
      String string1 = complex12.toString();
      Complex complex13 = complex3.atan();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex6.sin();
      Complex complex16 = complex13.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.031, 0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex0.I.negate();
      Complex complex6 = complex1.NaN.sqrt1z();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex7.INF.divide(complex4);
      Complex complex9 = complex6.ZERO.exp();
      Complex complex10 = complex9.ONE.multiply(complex7);
      Complex complex11 = complex9.ZERO.divide(complex1);
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex5.sqrt1z();
      Complex complex15 = complex14.negate();
      Complex complex16 = complex1.tan();
      Complex complex17 = complex1.NaN.multiply(complex16);
      Complex complex18 = complex16.ONE.pow(complex0);
      Complex complex19 = complex0.pow(complex16);
      String string0 = complex0.ZERO.toString();
      Complex complex20 = complex14.log();
      double double0 = complex15.getArgument();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1972.67434012061), 4238.0);
      Complex complex1 = complex0.tan();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.cosh();
      double double1 = complex2.getImaginary();
      Complex complex5 = complex4.log();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex2.log();
      Complex complex10 = complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-208.78309429), (-208.78309429));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex0.ONE.multiply((-208.78309429));
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex3.multiply((-208.78309429));
      Complex complex8 = complex0.cos();
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex3.I.sqrt1z();
      String string0 = complex6.ZERO.toString();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.asin();
      String string0 = complex3.toString();
      double double0 = complex3.abs();
      Complex complex5 = complex4.I.sqrt();
      int int0 = complex2.hashCode();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex8.ONE.createComplex(0.0, 0.0);
      Complex complex12 = complex3.divide(complex7);
      Complex complex13 = complex4.atan();
      Complex complex14 = complex8.createComplex(0.0, 1208.7737809086243);
      ComplexField complexField0 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.ONE.add(complex0);
      Complex complex7 = complex1.acos();
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex5.ONE.sinh();
      double double0 = complex7.ZERO.abs();
      Complex complex9 = complex6.negate();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex7.multiply((-3621.6941253835));
      Complex complex12 = complex4.atan();
      Complex complex13 = complex5.pow(complex0);
      boolean boolean0 = complex13.isInfinite();
      Complex complex14 = complex9.tanh();
      Complex complex15 = complex14.ZERO.cosh();
      Complex complex16 = complex6.tan();
      Complex complex17 = complex6.sinh();
      Complex complex18 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex0.atan();
      double double0 = complex1.abs();
      List<Complex> list0 = complex5.INF.nthRoot(1);
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex3.subtract(complex7);
      boolean boolean0 = complex6.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.ONE.conjugate();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.ZERO.add(complex2);
      Object object1 = complex4.NaN.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.createComplex(0.0, 0.0);
      Complex complex7 = complex5.INF.cosh();
      Object object2 = complex5.INF.readResolve();
      int int0 = complex1.hashCode();
      Complex complex8 = complex3.log();
      Complex complex9 = complex4.multiply(0.0);
      Complex complex10 = complex3.createComplex((-1136.69317052), 1150.00397);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1088.622883019557, 1088.622883019557);
      Complex complex2 = complex0.subtract(complex1);
      List<Complex> list0 = complex2.I.nthRoot(1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex1.ONE.sinh();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex2.ZERO.sqrt();
      Complex complex9 = complex8.I.cos();
      boolean boolean0 = complex0.equals("");
      Complex complex10 = complex1.NaN.conjugate();
      ComplexField complexField1 = complex2.NaN.getField();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1068.0537666462571, 1068.0537666462571);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.INF.createComplex(0.0, Double.NEGATIVE_INFINITY);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex1.INF.cos();
      double double0 = complex0.INF.abs();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.subtract(complex3);
      List<Complex> list0 = complex5.nthRoot(37);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.ZERO.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.NaN.tan();
      double double0 = complex0.abs();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex0.tan();
      boolean boolean0 = complex5.equals("");
      Complex complex9 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex7.ZERO.divide(complex4);
      Complex complex9 = complex8.NaN.tanh();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex3.asin();
      List<Complex> list0 = complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-1103);
      Complex complex1 = null;
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.ONE.tanh();
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(4759.0, 4759.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.ZERO.tan();
      Complex complex7 = complex4.subtract(complex0);
      Complex complex8 = complex0.ZERO.multiply(complex7);
      boolean boolean0 = complex3.isInfinite();
      double double0 = complex0.getReal();
      Complex complex9 = complex2.acos();
      double double1 = complex7.getReal();
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex0.sqrt();
      int int0 = complex2.hashCode();
      Complex complex11 = complex8.createComplex(Double.NEGATIVE_INFINITY, (-1686.0));
      boolean boolean1 = complex8.isInfinite();
      boolean boolean2 = complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.tan();
      boolean boolean0 = complex0.isInfinite();
      Object object1 = complex3.NaN.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.cos();
      double double1 = complex4.getImaginary();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex5.divide(complex6);
      String string0 = complex8.toString();
      double double2 = complex0.getReal();
      Complex complex9 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.I.pow(complex1);
      Complex complex5 = complex4.NaN.atan();
      double double1 = complex2.abs();
      Complex complex6 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.pow(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex0.tan();
      String string0 = complex6.toString();
      ComplexField complexField1 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex2.I.pow(complex1);
      Complex complex5 = complex4.NaN.atan();
      double double1 = complex2.abs();
      double double2 = complex1.getImaginary();
      Complex complex6 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.multiply(complex1);
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.cosh();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.createComplex(901.2, 901.2);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1749.417012330177, (-246.0720948403363));
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex3.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.ZERO.hashCode();
      Complex complex6 = complex0.cosh();
      try { 
        complex6.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.multiply((-755.3834));
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = complex0.sin();
      String string0 = complex1.toString();
      Complex complex6 = complex4.createComplex((-755.3834), (-755.3834));
      Complex complex7 = complex1.ONE.sqrt();
      Complex complex8 = complex1.multiply(complex2);
      double double0 = complex8.ZERO.getArgument();
      Complex complex9 = complex0.ZERO.subtract(complex5);
      Complex complex10 = complex4.createComplex((-3414.6618874029086), (-755.3834));
      Complex complex11 = complex5.divide(complex1);
      Object object0 = complex11.readResolve();
      Complex complex12 = complex4.INF.log();
      Complex complex13 = complex10.sqrt();
      boolean boolean0 = complex13.isInfinite();
      Complex complex14 = complex3.multiply(0.0);
      Complex complex15 = complex13.add(complex7);
      Complex complex16 = complex3.add(complex11);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ZERO.abs();
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.sinh();
      double double1 = complex0.abs();
      double double2 = complex0.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.sqrt();
      double double3 = complex2.ZERO.abs();
      Complex complex4 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.cosh();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(Double.NaN, 3510.45171);
      Complex complex2 = complex1.createComplex(3510.45171, Double.NaN);
      try { 
        complex2.ZERO.nthRoot((-43));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -43
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.createComplex(0.0, (-1795.16));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.asin();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.ZERO.divide(complex1);
      int int1 = complex0.hashCode();
      Complex complex3 = complex0.createComplex((-3792.2256), 0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.pow(complex3);
      int int0 = complex1.hashCode();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(233.21, 233.21);
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getImaginary();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex1.NaN.pow(complex0);
      double double0 = complex1.INF.getArgument();
      int int0 = complex2.hashCode();
      Complex complex3 = complex0.sqrt1z();
      double double1 = complex3.I.abs();
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex1.isInfinite();
      double double2 = complex3.getReal();
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.multiply(1.4456468917292502E-16);
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.ONE.sin();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex2.INF.conjugate();
      try { 
        complex1.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.ZERO;
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex3.cosh();
      double double1 = complex5.NaN.abs();
      ComplexField complexField0 = complex2.getField();
      int int0 = complex1.hashCode();
      String string0 = complex0.toString();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex1.log();
      Complex complex9 = complex5.multiply(Double.NaN);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.ZERO.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.ONE.log();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex1.sin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.INF.pow(complex5);
      Complex complex7 = complex2.NaN.multiply((-2426.996027791));
      double double0 = complex7.NaN.abs();
      double double1 = complex1.getReal();
      Object object0 = complex3.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex8 = complex4.pow(complex7);
      Complex complex9 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-3291.4426), 11.02);
      Complex complex1 = complex0.cosh();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.ZERO.add(complex1);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.add(complex2);
      int int1 = complex4.hashCode();
      Complex complex5 = complex4.ONE.conjugate();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex2.NaN.subtract(complex1);
      Complex complex7 = complex6.sqrt();
      double double0 = complex0.abs();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex2.NaN.createComplex(1.7029898543501842E-8, 3291.461047847105);
      Complex complex10 = complex1.pow(complex2);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex11.I.conjugate();
      Complex complex13 = complex2.conjugate();
      List<Complex> list0 = complex13.ONE.nthRoot(37);
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex10.sinh();
      Complex complex16 = complex15.acos();
      try { 
        complex6.nthRoot((-1395));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,395
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3203.7), (-3203.7));
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.ONE.atan();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex1.INF.add(complex4);
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex10.pow(complex7);
      List<Complex> list0 = complex2.nthRoot(2830);
      Complex complex12 = complex2.tanh();
      double double0 = complex12.abs();
      Complex complex13 = complex12.I.cos();
      Complex complex14 = complex12.negate();
      boolean boolean0 = complex11.equals(complex5);
      Object object0 = complex10.readResolve();
      Object object1 = complex6.readResolve();
      boolean boolean1 = complex6.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      String string0 = complex0.toString();
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ONE.createComplex(2709.464, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex2.NaN.add(complex0);
      double double0 = complex0.getReal();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.multiply(complex0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.subtract(complex6);
      String string1 = complex3.ONE.toString();
      Complex complex8 = complex7.NaN.acos();
      int int0 = complex8.hashCode();
      Complex complex9 = complex6.log();
      Object object1 = complex9.I.readResolve();
      Complex complex10 = complex3.I.exp();
      double double1 = complex9.getArgument();
      Complex complex11 = complex3.add(complex9);
      Complex complex12 = complex6.negate();
      Complex complex13 = complex5.add(complex10);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(254.02, 254.02);
      Complex complex1 = new Complex(254.02, 254.02);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.tan();
      List<Complex> list0 = complex3.nthRoot(914);
      Complex complex4 = complex2.NaN.asin();
      List<Complex> list1 = complex1.INF.nthRoot(914);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.ONE.createComplex(3588.5469547, 3588.5469547);
      try { 
        complex1.nthRoot((-527));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -527
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(611.2, 611.2);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.NaN.divide(complex0);
      double double0 = complex0.ONE.abs();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = complex4.NaN.conjugate();
      Complex complex8 = complex7.ZERO.multiply(4861.158173314113);
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex2.pow(complex3);
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex10.conjugate();
      boolean boolean1 = complex10.isNaN();
      Complex complex13 = complex8.sin();
      Complex complex14 = complex3.subtract(complex10);
      Complex complex15 = Complex.I;
      List<Complex> list0 = complex15.ONE.nthRoot(1);
      Complex complex16 = complex15.log();
      Complex complex17 = complex16.NaN.subtract(complex8);
      Complex complex18 = complex0.subtract(complex15);
      double double1 = complex18.getArgument();
      Complex complex19 = complex4.conjugate();
      boolean boolean2 = complex18.isNaN();
      Complex complex20 = complex0.sqrt1z();
      Complex complex21 = complex20.log();
      Complex complex22 = complex0.atan();
      double double2 = complex3.getImaginary();
      Complex complex23 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex1.INF.divide(complex0);
      Complex complex5 = complex4.INF.tanh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex2.ONE.pow(complex4);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex4.createComplex(1.0, 1.0);
      Complex complex9 = complex1.add(complex4);
      Complex complex10 = complex2.NaN.acos();
      Complex complex11 = complex5.I.atan();
      Complex complex12 = complex11.ZERO.multiply(complex3);
      Complex complex13 = complex2.atan();
      Complex complex14 = complex13.I.cos();
      List<Complex> list0 = complex14.ZERO.nthRoot(420);
      Complex complex15 = complex13.INF.cosh();
      double double0 = complex1.getReal();
      boolean boolean1 = complex4.equals("");
      Complex complex16 = complex1.divide(complex4);
      Complex complex17 = complex1.add(complex5);
      Complex complex18 = complex3.asin();
      Complex complex19 = complex14.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(3.814697265625E-6);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-636.8), (-636.8));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.INF.multiply((-636.8));
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex1.ONE.pow(complex6);
      Complex complex9 = complex2.I.tanh();
      Complex complex10 = complex7.INF.sqrt1z();
      double double0 = complex0.getImaginary();
      double double1 = complex1.NaN.getArgument();
      double double2 = complex2.abs();
      List<Complex> list0 = complex2.ZERO.nthRoot(7);
      double double3 = complex3.getArgument();
      Complex complex11 = complex7.INF.cos();
      Complex complex12 = complex7.sqrt();
      Complex complex13 = complex10.asin();
      Complex complex14 = complex12.log();
      Object object0 = complex1.I.readResolve();
      Complex complex15 = complex14.I.add(complex13);
      String string1 = complex15.NaN.toString();
      Complex complex16 = complex0.log();
      Complex complex17 = complex6.subtract(complex2);
      Complex complex18 = complex10.tan();
      Complex complex19 = complex14.createComplex(Double.NaN, (-3043.52));
      Object object1 = complex1.readResolve();
      Complex complex20 = complex4.tan();
      Complex complex21 = complex8.subtract(complex12);
      double double4 = complex2.abs();
      Complex complex22 = complex20.multiply(0.0);
  }
}
