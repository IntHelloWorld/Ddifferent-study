/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:29:30 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      Object object0 = complex0.I.readResolve();
      Complex complex4 = complex3.multiply(0.1111111111111111);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex9.I.asin();
      Complex complex11 = complex0.INF.pow(complex1);
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex6.multiply(complex3);
      boolean boolean0 = complex7.isInfinite();
      double double0 = complex13.ZERO.abs();
      int int0 = 6053;
      // Undeclared exception!
      complex2.I.nthRoot(6053);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.INF.log();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.ZERO.negate();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.NaN.add(complex1);
      Complex complex5 = complex0.asin();
      double double0 = complex5.getArgument();
      Complex complex6 = complex5.NaN.add(complex1);
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex0.tan();
      int int0 = complex1.hashCode();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex0.INF.divide(complex1);
      Complex complex11 = complex1.ZERO.createComplex(1.5707963267948966, 0.0);
      boolean boolean1 = complex5.equals(complex1);
      Complex complex12 = complex9.sqrt();
      Complex complex13 = complex5.exp();
      Complex complex14 = complex9.NaN.asin();
      ComplexField complexField0 = complex13.getField();
      Complex complex15 = complex12.sqrt1z();
      Object object1 = complex8.readResolve();
      double double1 = complex4.getReal();
      List<Complex> list1 = complex9.nthRoot(1);
      Complex complex16 = complex6.cosh();
      Complex complex17 = complex8.sqrt();
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.ZERO.subtract(complex4);
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex6.ZERO.exp();
      double double0 = complex8.ONE.abs();
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex6.subtract(complex5);
      double double1 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.cos();
      double double1 = complex4.getArgument();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = Complex.I;
      Complex complex9 = complex1.NaN.multiply(complex8);
      boolean boolean0 = complex3.isNaN();
      Complex complex10 = complex1.sin();
      Complex complex11 = new Complex(1.0, (-2000.68));
      Complex complex12 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex13 = complex10.NaN.pow(complex11);
      Complex complex14 = complex10.conjugate();
      Complex complex15 = complex8.acos();
      Complex complex16 = complex10.sqrt();
      Complex complex17 = complex14.acos();
      Complex complex18 = complex15.asin();
      Complex complex19 = complex4.tan();
      double double2 = complex5.abs();
      Complex complex20 = complex11.exp();
      boolean boolean1 = complex4.isNaN();
      double double3 = complex9.getReal();
      Complex complex21 = complex5.acos();
      Complex complex22 = complex10.sin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624879837036133), (-0.16624879837036133));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.I.divide(complex1);
      double double0 = complex3.ONE.getArgument();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex1.ONE.multiply(complex4);
      Complex complex6 = complex5.I.atan();
      Object object1 = complex5.ZERO.readResolve();
      Complex complex7 = complex0.I.pow(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex4.createComplex(1.2246467991473532E-16, (-0.16624879837036133));
      Complex complex10 = complex1.acos();
      ComplexField complexField0 = complex10.ZERO.getField();
      Complex complex11 = complex3.multiply((-257.47595417));
      double double1 = complex9.getReal();
      double double2 = complex5.getImaginary();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.acos();
      String string0 = complex0.I.toString();
      Complex complex4 = complex2.ONE.sin();
      Object object0 = complex0.readResolve();
      // Undeclared exception!
      try { 
        complex2.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.conjugate();
      double double0 = complex2.abs();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex2.ONE.negate();
      int int0 = complex4.INF.hashCode();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.ONE.createComplex((-2582.40247970688), Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex1.INF.createComplex((-2582.40247970688), (-2992.564396285));
      Complex complex13 = complex3.acos();
      Complex complex14 = complex13.acos();
      Complex complex15 = complex11.tanh();
      Complex complex16 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex2.NaN.log();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.pow(complex1);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex0.log();
      List<Complex> list0 = complex6.ZERO.nthRoot(223);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2459.1933, (-1681.79));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.ONE.sqrt();
      List<Complex> list0 = complex0.INF.nthRoot(17);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex2.ZERO.acos();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.INF.tanh();
      Complex complex8 = complex6.negate();
      List<Complex> list1 = complex7.ONE.nthRoot(282);
      Complex complex9 = complex6.NaN.exp();
      String string0 = complex8.NaN.toString();
      Complex complex10 = complex9.multiply(complex7);
      Complex complex11 = complex0.atan();
      String string1 = complex8.toString();
      Complex complex12 = complex4.cos();
      double double1 = complex6.getArgument();
      Complex complex13 = complex11.log();
      double double2 = complex7.abs();
      Complex complex14 = complex2.multiply(Double.NaN);
      Complex complex15 = complex14.conjugate();
      Complex complex16 = complex4.sqrt1z();
      Complex complex17 = complex0.cosh();
      Complex complex18 = complex1.asin();
      double double3 = complex7.getReal();
      Complex complex19 = complex2.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-36.918255), (-36.918255));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex0.sqrt();
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex4.multiply((-1418.83949943503));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1040.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ZERO.sinh();
      double double0 = complex1.INF.getArgument();
      Object object0 = complex3.INF.readResolve();
      Complex complex5 = complex0.ONE.divide(complex2);
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex5.INF.exp();
      double double1 = complex1.getArgument();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex3.ZERO.cosh();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex1.sqrt();
      String string0 = complex0.toString();
      int int0 = complex4.hashCode();
      Complex complex12 = complex5.ZERO.divide(complex8);
      double double2 = complex10.getArgument();
      Complex complex13 = complex11.add(complex2);
      Complex complex14 = complex13.atan();
      List<Complex> list0 = complex4.nthRoot(142);
      String string1 = complex6.toString();
      Complex complex15 = complex11.cosh();
      Complex complex16 = complex6.tan();
      Complex complex17 = complex10.sqrt1z();
      Complex complex18 = complex13.cosh();
      Complex complex19 = complex1.conjugate();
      Complex complex20 = complex10.createComplex(0.0, Double.NaN);
      Complex complex21 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.NaN.divide(complex2);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.INF.divide(complex6);
      Complex complex8 = complex0.multiply(0.06666666666666667);
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex2.cosh();
      double double0 = complex0.getReal();
      boolean boolean0 = complex8.equals(complex0);
      double double1 = complex7.getArgument();
      boolean boolean1 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.NaN.multiply(complex1);
      String string1 = complex0.NaN.toString();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = new Complex(3083.72165638189, 1786.4438094436);
      Complex complex6 = complex1.multiply(complex5);
      double double0 = complex6.INF.getArgument();
      try { 
        complex6.nthRoot((-495));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -495
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.add(complex0);
      double double1 = complex8.ONE.abs();
      Complex complex9 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-0.5);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-0.5));
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.ONE.subtract(complex1);
      Complex complex5 = complex0.ZERO.asin();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.createComplex(0.0, (-0.5));
      Complex complex8 = complex0.INF.cos();
      Complex complex9 = complex0.asin();
      String string0 = complex9.I.toString();
      Complex complex10 = complex8.ONE.atan();
      double double1 = (-1788.115395504879);
      Complex complex11 = complex8.createComplex(253.667, (-1788.115395504879));
      try { 
        complex11.ZERO.nthRoot((-879));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -879
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex5.INF.sqrt1z();
      Complex complex8 = complex3.createComplex(1923.5, 1923.5);
      double double0 = complex8.I.getArgument();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(304.9, 304.9);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.NaN.asin();
      Object object0 = complex2.ZERO.readResolve();
      Object object1 = complex0.NaN.readResolve();
      Complex complex3 = complex0.cosh();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex0.ONE.subtract(complex3);
      double double0 = complex2.getReal();
      Complex complex6 = complex3.cosh();
      Object object2 = complex6.readResolve();
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.3333333134651184, 0.3333333134651184);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply((-2408.9399));
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex0.ZERO.divide(complex6);
      List<Complex> list0 = complex6.nthRoot(2543);
      double double1 = complex0.getImaginary();
      Complex complex9 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.multiply((-2053.878));
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.multiply((-990.2651437431105));
      Complex complex4 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(4344.0673, (-656.159222318));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.negate();
      int int0 = complex3.ONE.hashCode();
      int int1 = complex2.hashCode();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.ZERO.exp();
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex1.ONE.asin();
      Complex complex8 = complex0.I.createComplex((-656.159222318), (-820.9377615002645));
      Complex complex9 = complex4.pow(complex1);
      ComplexField complexField0 = complex4.ONE.getField();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex8.multiply(complex0);
      double double0 = complex8.getArgument();
      double double1 = complex4.getImaginary();
      Complex complex12 = complex6.add(complex0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2221.0, (-3707.196635398092));
      Complex complex1 = complex0.I.createComplex((-3707.196635398092), (-3707.196635398092));
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.ZERO.pow(complex3);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.49999999999999994);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.cos();
      double double0 = complex0.abs();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.I.asin();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex0.ZERO.divide(complex6);
      double double1 = complex1.getImaginary();
      Complex complex8 = complex4.sqrt1z();
      double double2 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.I.log();
      String string0 = complex0.INF.toString();
      Complex complex6 = complex3.NaN.tan();
      String string1 = complex4.INF.toString();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex1.sin();
      double double0 = complex6.getArgument();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex0.log();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.multiply((-0.09088450866185192));
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex3.I.divide(complex1);
      Complex complex7 = complex2.multiply(complex3);
      Complex complex8 = complex7.pow(complex3);
      Complex complex9 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-294.282516324383), (-294.282516324383));
      Complex complex1 = complex0.createComplex((-2483.38542), 0.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.I.sin();
      double double0 = complex0.getReal();
      Complex complex5 = complex1.NaN.pow(complex2);
      double double1 = complex0.getImaginary();
      String string0 = complex1.toString();
      Complex complex6 = complex2.log();
      Complex complex7 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-0.09088450866185192), (-0.09088450866185192));
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.add(complex1);
      int int0 = complex0.hashCode();
      String string0 = complex2.toString();
      Complex complex3 = complex2.ZERO.pow(complex0);
      List<Complex> list0 = complex3.NaN.nthRoot(1940);
      double double1 = complex0.abs();
      Complex complex4 = complex1.ONE.divide(complex3);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex0.NaN.createComplex(1630.687916, (-504.2091288797));
      Complex complex9 = complex6.I.sqrt1z();
      int int1 = complex9.ZERO.hashCode();
      Complex complex10 = complex1.log();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex11.atan();
      double double2 = complex3.getImaginary();
      Complex complex14 = complex3.sqrt();
      int int2 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.tanh();
      String string0 = complex0.toString();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex0.ZERO.multiply(complex1);
      Object object1 = complex2.NaN.readResolve();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.I.acos();
      double double1 = complex3.getArgument();
      Complex complex7 = complex2.add(complex5);
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex9.ONE.multiply(Double.NaN);
      Complex complex11 = complex9.add(complex8);
      double double2 = complex0.abs();
      Complex complex12 = new Complex(2.0, (-781.46));
      Complex complex13 = complex2.ZERO.divide(complex12);
      Complex complex14 = complex1.atan();
      Complex complex15 = complex3.ONE.sqrt();
      Complex complex16 = complex9.I.cos();
      Complex complex17 = complex14.ZERO.asin();
      ComplexField complexField0 = complex3.getField();
      ComplexField complexField1 = complex5.getField();
      Complex complex18 = complex9.acos();
      Complex complex19 = complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.atan();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex1.divide(complex2);
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2192.775646886871), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.NaN.sqrt1z();
      int int0 = complex3.hashCode();
      double double0 = complex3.getArgument();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.I;
      Complex complex7 = complex3.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.ONE.divide(complex0);
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex2.subtract(complex7);
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-3150.8173885), 0.0);
      try { 
        complex0.ZERO.nthRoot((-1133));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,133
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Object object0 = complex0.INF.readResolve();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      List<Complex> list1 = complex2.nthRoot(1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.sqrt();
      List<Complex> list2 = complex4.nthRoot(1);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.multiply(complex4);
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.cos();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.ONE.add(complex1);
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex6 = complex0.log();
      int int0 = complex6.I.hashCode();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex6.INF.conjugate();
      double double0 = complex6.getReal();
      Complex complex9 = complex6.acos();
      ComplexField complexField1 = complex9.getField();
      boolean boolean0 = complex3.equals(complex2);
      Complex complex10 = complex1.divide(complex9);
      Complex complex11 = complex5.subtract(complex3);
      double double1 = complex3.getImaginary();
      Complex complex12 = complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.atan();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.I.conjugate();
      double double0 = complex1.abs();
      Complex complex6 = complex1.exp();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex5.add(complex1);
      boolean boolean0 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-393.8094547523), (-580.0645100650132));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.add(complex2);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.negate();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-3443.124347), (-3443.124347));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.subtract(complex2);
      ComplexField complexField0 = complex3.I.getField();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex6.multiply(complex0);
      String string0 = complex6.toString();
      Complex complex9 = complex6.I.tanh();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2304.808257781411, 2304.808257781411);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex1.INF.multiply(0.0);
      double double0 = complex2.getReal();
      double double1 = complex2.abs();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex1.cos();
      double double2 = complex2.abs();
      Complex complex7 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.NaN.toString();
      String string1 = complex0.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot((-3117));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,117
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ONE.acos();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-611.0482381), (-611.0482381));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(Double.NaN, Double.NaN);
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.cosh();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1229.462666), 1431.8);
      Complex complex1 = complex0.createComplex(1431.8, (-2539.36244));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.ONE.cos();
      Object object0 = complex0.INF.readResolve();
      Complex complex4 = complex1.acos();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex4.ONE.createComplex(924.621215, 1432.6);
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex0.conjugate();
      List<Complex> list0 = complex8.NaN.nthRoot(9);
      Complex complex9 = complex4.I.createComplex(0.0, 1.5707963267948966);
      int int0 = complex6.I.hashCode();
      Object object1 = complex4.readResolve();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex7.exp();
      Complex complex12 = complex11.I.sinh();
      Complex complex13 = complex11.INF.log();
      double double1 = complex1.getImaginary();
      Complex complex14 = complex7.multiply((-752.3899543641446));
      Complex complex15 = complex1.pow(complex0);
      Complex complex16 = complex8.tanh();
      ComplexField complexField0 = complex16.NaN.getField();
      Complex complex17 = complex6.tanh();
      Complex complex18 = complex4.tan();
      Complex complex19 = complex17.acos();
      Complex complex20 = complex6.multiply(0.0);
      Complex complex21 = complex4.add(complex9);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.add(complex3);
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex2.NaN.asin();
      Complex complex7 = complex2.I.log();
      Complex complex8 = complex4.I.exp();
      Complex complex9 = complex0.log();
      double double0 = complex4.getImaginary();
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex2.ONE.sqrt();
      Complex complex12 = complex10.ZERO.atan();
      Complex complex13 = complex1.sin();
      Complex complex14 = new Complex(0.0, 0.0);
      Complex complex15 = complex13.pow(complex14);
      String string0 = complex14.toString();
      Complex complex16 = complex14.INF.add(complex8);
      double double1 = complex7.getArgument();
      double double2 = complex10.getArgument();
      Complex complex17 = complex0.acos();
      Complex complex18 = complex12.add(complex13);
      Complex complex19 = complex13.multiply(0.0);
      Complex complex20 = complex6.asin();
      boolean boolean0 = complex14.equals(complex12);
      Complex complex21 = complex2.subtract(complex14);
      Complex complex22 = complex1.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.INF.createComplex(730.5624369029123, 2618.23);
      Complex complex3 = complex0.ONE.acos();
      double double0 = complex0.INF.getArgument();
      Complex complex4 = complex2.NaN.add(complex3);
      List<Complex> list0 = complex0.nthRoot(782);
      List<Complex> list1 = complex2.INF.nthRoot(782);
      int int0 = complex0.hashCode();
      Object object1 = complex3.NaN.readResolve();
      Complex complex5 = complex0.cos();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex5.INF.acos();
      int int1 = complex6.I.hashCode();
      Complex complex7 = complex5.ONE.atan();
      Complex complex8 = complex3.pow(complex2);
      Complex complex9 = complex8.sinh();
      String string1 = complex1.toString();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.NaN.multiply(2382.19);
      Complex complex12 = complex8.createComplex(782, 2545.8466372155463);
      double double1 = complex12.I.getArgument();
      String string2 = complex12.NaN.toString();
      Complex complex13 = complex8.pow(complex4);
      Complex complex14 = complex10.INF.exp();
      double double2 = complex14.I.getArgument();
      Complex complex15 = complex13.INF.exp();
      ComplexField complexField0 = complex0.getField();
      int int2 = complex9.hashCode();
      Complex complex16 = complex4.atan();
      Complex complex17 = complex11.sqrt1z();
      int int3 = complex8.hashCode();
      Complex complex18 = complex0.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = null;
      Complex complex3 = complex0.ONE.multiply((-2119.58185546));
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex3.NaN.asin();
      Complex complex7 = complex3.NaN.multiply((-3642.0473168036174));
      try { 
        complex1.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.conjugate();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex5 = complex3.ZERO.subtract(complex1);
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex4.multiply(complex0);
      double double0 = complex3.getImaginary();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.INF.add(complex0);
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex2.I.sin();
      Complex complex10 = complex6.ZERO.asin();
      Object object0 = complex7.NaN.readResolve();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex11.INF.negate();
      String string0 = complex2.INF.toString();
      Complex complex13 = complex11.ONE.sqrt();
      boolean boolean0 = complex11.equals(complex2);
      boolean boolean1 = complex6.isNaN();
      double double1 = complex11.NaN.abs();
      Complex complex14 = complex6.subtract(complex2);
      Complex complex15 = complex11.exp();
      Complex complex16 = complex2.sin();
      Complex complex17 = complex8.add(complex15);
      Complex complex18 = complex17.NaN.atan();
      Complex complex19 = Complex.INF;
      Complex complex20 = complex18.I.pow(complex19);
      Complex complex21 = complex6.negate();
      Complex complex22 = complex13.atan();
      Complex complex23 = complex16.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
  }
}
