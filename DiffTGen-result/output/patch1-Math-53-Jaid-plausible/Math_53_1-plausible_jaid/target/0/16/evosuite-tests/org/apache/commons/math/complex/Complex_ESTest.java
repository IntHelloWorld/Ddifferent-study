/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:32:58 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      double double0 = complex1.ONE.getArgument();
      double double1 = complex0.INF.getArgument();
      Complex complex2 = complex0.INF.createComplex(0.0, 1232.2018966);
      double double2 = complex0.getImaginary();
      Complex complex3 = complex0.log();
      double double3 = complex2.getImaginary();
      Complex complex4 = complex3.NaN.sqrt1z();
      List<Complex> list0 = complex3.I.nthRoot(75);
      boolean boolean0 = complex3.equals(complex2);
      int int0 = complex3.hashCode();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex0.sin();
      String string0 = complex0.toString();
      Complex complex8 = complex5.createComplex(75, (-237.562036536423));
      Complex complex9 = complex3.ZERO.cosh();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.INF.subtract(complex0);
      Complex complex12 = complex8.ZERO.multiply((-3091.358032986343));
      boolean boolean1 = complex2.isNaN();
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex8.INF.divide(complex12);
      Complex complex16 = complex4.negate();
      ComplexField complexField0 = complex14.getField();
      Complex complex17 = complex1.atan();
      Complex complex18 = complex0.tan();
      Complex complex19 = complex2.pow(complex16);
      Complex complex20 = complex17.asin();
      boolean boolean2 = complex14.isNaN();
      Complex complex21 = complex12.pow(complex1);
      int int1 = complex18.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(57.2957763671875, (-1935.29772619041));
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ONE.add(complex2);
      Complex complex4 = complex0.I.add(complex1);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.ZERO.atan();
      ComplexField complexField0 = complex7.ZERO.getField();
      int int0 = complex4.hashCode();
      Complex complex9 = complex2.divide(complex5);
      double double0 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex0.createComplex((-3663.926089), 0.0);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex1.multiply(1109.0);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex3.pow(complex5);
      Complex complex10 = complex9.NaN.pow(complex6);
      Complex complex11 = complex10.INF.cosh();
      Complex complex12 = complex1.divide(complex0);
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex5.divide(complex6);
      Complex complex15 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.tanh();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.I.sqrt();
      String string0 = complex2.INF.toString();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.INF.asin();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex4.divide(complex5);
      double double1 = complex8.I.abs();
      Complex complex11 = complex4.NaN.cos();
      Complex complex12 = complex11.sqrt1z();
      ComplexField complexField1 = complex1.ZERO.getField();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      complex7.I.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1205.2086590812, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex2.multiply(3181.949576179344);
      Complex complex5 = complex0.NaN.sqrt1z();
      Complex complex6 = complex2.ZERO.createComplex((-56.476), 3172.193622762);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex0.multiply(302.54138613765);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex4.log();
      String string0 = complex0.toString();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex9.sqrt();
      boolean boolean0 = complex3.equals("(1205.2086590812, Infinity)");
      Complex complex14 = complex13.INF.cos();
      Object object0 = complex2.readResolve();
      Object object1 = complex0.ONE.readResolve();
      boolean boolean1 = complex2.equals(object0);
      double double0 = complex12.getArgument();
      int int0 = complex10.hashCode();
      Complex complex15 = complex8.sqrt1z();
      Complex complex16 = complex13.log();
      Complex complex17 = complex11.asin();
      Complex complex18 = complex8.createComplex(0.0, (-1189.411600783689));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex3.I.multiply(2661.2);
      Complex complex5 = complex0.ONE.conjugate();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.NaN.add(complex9);
      double double0 = complex0.getReal();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.createComplex(2.0, 1.625);
      boolean boolean0 = complex11.equals(complex1);
      Complex complex13 = complex10.sin();
      boolean boolean1 = complex1.equals(complex2);
      Complex complex14 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1766.6643), (-1766.6643));
      ComplexField complexField0 = complex0.INF.getField();
      List<Complex> list0 = complex0.nthRoot(2143);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.I.conjugate();
      ComplexField complexField1 = complex4.getField();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex3.I.conjugate();
      boolean boolean0 = complex5.equals(complex1);
      Complex complex7 = complex3.pow(complex5);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.ONE.createComplex(2143, 1.0);
      Complex complex10 = complex9.I.pow(complex3);
      Complex complex11 = complex10.I.divide(complex0);
      Complex complex12 = complex8.multiply(complex0);
      Complex complex13 = complex8.multiply(complex12);
      boolean boolean1 = complex0.isInfinite();
      Complex complex14 = complex5.add(complex11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex1.I.tan();
      Complex complex11 = complex8.ONE.log();
      Complex complex12 = complex11.NaN.subtract(complex4);
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex4.I.multiply((-1858.55));
      String string0 = complex12.INF.toString();
      Complex complex15 = complex12.ZERO.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex8.NaN.readResolve();
      Complex complex16 = complex1.negate();
      ComplexField complexField0 = complex3.getField();
      int int1 = complex5.hashCode();
      Complex complex17 = complex16.conjugate();
      Complex complex18 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.asin();
      List<Complex> list0 = complex4.I.nthRoot(17);
      Complex complex5 = complex3.ZERO.tan();
      Complex complex6 = complex5.INF.log();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex5.ZERO.multiply(complex0);
      Object object1 = complex3.readResolve();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex5.sqrt1z();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex12 = complex1.sin();
      List<Complex> list1 = complex5.nthRoot(17);
      Complex complex13 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.add(complex0);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.ZERO;
      boolean boolean0 = complex4.equals(complex6);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      String string0 = complex1.toString();
      Complex complex2 = complex0.tan();
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex1.sin();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.ONE.pow(complex3);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex0.NaN.sin();
      Complex complex7 = complex0.I.exp();
      Complex complex8 = complex3.pow(complex0);
      Complex complex9 = complex8.ONE.tan();
      Object object1 = complex2.readResolve();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1.1921056801463227E-8, 2652.0663360099984);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.negate();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.multiply(1537.15608911424);
      List<Complex> list0 = complex0.ONE.nthRoot(133);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex0.negate();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.sin();
      String string0 = complex0.toString();
      Complex complex7 = complex6.asin();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex8 = complex2.atan();
      double double1 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      ComplexField complexField0 = complex0.ONE.getField();
      ComplexField complexField1 = complex1.INF.getField();
      Complex complex2 = complex1.cos();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.tan();
      double double0 = complex0.NaN.abs();
      List<Complex> list0 = complex4.NaN.nthRoot(1);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.INF.createComplex(1, Double.NaN);
      Complex complex7 = complex0.subtract(complex2);
      int int0 = complex2.hashCode();
      Complex complex8 = complex7.pow(complex1);
      Complex complex9 = complex6.I.multiply(Double.NaN);
      Complex complex10 = complex6.log();
      Complex complex11 = complex10.INF.atan();
      boolean boolean0 = complex6.isNaN();
      double double1 = complex1.getImaginary();
      Complex complex12 = complex3.log();
      Complex complex13 = complex6.atan();
      double double2 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-3253.9), (-3253.9));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.NaN.multiply((-745.79580067));
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex8.cosh();
      double double0 = complex5.abs();
      double double1 = complex7.INF.getArgument();
      Complex complex10 = complex5.cosh();
      boolean boolean0 = complex7.isInfinite();
      Complex complex11 = complex5.ZERO.exp();
      String string0 = complex11.NaN.toString();
      Complex complex12 = complex1.ZERO.cosh();
      Complex complex13 = complex7.sqrt();
      double double2 = complex4.getArgument();
      Complex complex14 = complex13.I.cosh();
      Complex complex15 = complex13.createComplex(Double.NaN, 0.7853981633974483);
      Complex complex16 = complex13.subtract(complex0);
      Complex complex17 = complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = new Complex((-2983.10805210103), 0.0);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.INF.tan();
      try { 
        complex0.nthRoot((-2130));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,130
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.I.divide(complex1);
      double double0 = complex0.getReal();
      Complex complex4 = complex0.exp();
      boolean boolean0 = complex1.equals(complex3);
      Complex complex5 = complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-657.817473), (-657.817473));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.subtract(complex0);
      List<Complex> list0 = complex2.nthRoot(7);
      Complex complex4 = complex3.createComplex(0.0, 7);
      Complex complex5 = complex0.atan();
      Object object0 = complex5.INF.readResolve();
      Complex complex6 = complex2.ZERO.sin();
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = complex7.INF.tanh();
      double double0 = complex8.I.getArgument();
      Complex complex9 = complex3.I.sqrt1z();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex10.divide(complex4);
      Complex complex12 = complex11.ONE.add(complex4);
      Complex complex13 = complex1.asin();
      Complex complex14 = complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(2993.4979, 2993.4979);
      Complex complex1 = complex0.cos();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.tan();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(9.313225746154785E-10, 2.356194490192345);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.I.pow(complex1);
      Complex complex5 = complex3.pow(complex2);
      List<Complex> list0 = complex4.nthRoot(2316);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.divide(complex1);
      Object object1 = complex1.NaN.readResolve();
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex2.ONE.negate();
      Complex complex5 = complex4.ZERO.tan();
      ComplexField complexField0 = complex0.getField();
      Object object2 = complex0.ONE.readResolve();
      Object object3 = complex3.INF.readResolve();
      Complex complex6 = complex0.NaN.sinh();
      boolean boolean1 = complex1.isInfinite();
      Complex complex7 = complex3.sqrt();
      int int0 = complex7.hashCode();
      Complex complex8 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.ZERO.createComplex(0.0, (-1056.0912037533));
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex3.asin();
      String string0 = complex2.toString();
      Complex complex5 = complex2.log();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      double double0 = complex1.ONE.getArgument();
      double double1 = complex0.abs();
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex1.NaN.conjugate();
      double double2 = complex1.getArgument();
      Complex complex5 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.createComplex(2850.7129041, 0.0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.NaN.conjugate();
      Complex complex6 = complex3.I.conjugate();
      int int0 = complex6.INF.hashCode();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex7 = complex5.ONE.log();
      double double0 = complex5.INF.abs();
      Complex complex8 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.041666666666621166);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.sqrt1z();
      int int1 = complex11.INF.hashCode();
      double double1 = complex1.getArgument();
      boolean boolean0 = complex11.isInfinite();
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex10.asin();
      int int2 = complex5.hashCode();
      Complex complex14 = complex11.asin();
      Complex complex15 = complex14.ZERO.multiply(170.8199136469);
      Complex complex16 = complex2.cos();
      boolean boolean1 = complex3.equals(complex12);
      Complex complex17 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.ONE.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.atan();
      Object object0 = complex6.ZERO.readResolve();
      double double0 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 1995.9572635506;
      Complex complex1 = new Complex(1995.9572635506, 1995.9572635506);
      Complex complex2 = complex0.I.pow(complex1);
      try { 
        complex2.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.ZERO.createComplex(2052.572, 2052.572);
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.ZERO.createComplex(0.0, 0.0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.sinh();
      double double0 = complex6.I.abs();
      Complex complex7 = complex4.sinh();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.divide(complex5);
      List<Complex> list0 = complex9.INF.nthRoot(17);
      Complex complex10 = complex4.subtract(complex8);
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.INF.cos();
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.INF.negate();
      Complex complex9 = complex6.subtract(complex3);
      double double0 = complex9.ONE.getArgument();
      Complex complex10 = complex0.atan();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex7.cosh();
      Complex complex14 = complex0.divide(complex13);
      Complex complex15 = complex2.add(complex6);
      Complex complex16 = complex5.log();
      Complex complex17 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.NaN.subtract(complex0);
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex5.multiply(complex0);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex9 = complex8.multiply(complex4);
      ComplexField complexField0 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.NaN.multiply((-2557.70188));
      Complex complex5 = complex4.NaN.asin();
      double double0 = complex0.getArgument();
      int int1 = complex2.hashCode();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.INF.multiply(complex2);
      double double1 = complex6.getArgument();
      Complex complex9 = complex2.createComplex(0.0, 0.0);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.add(complex10);
      Complex complex12 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sin();
      Object object0 = complex0.readResolve();
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.createComplex(814.07, 814.07);
      Complex complex6 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1518.6674729805, 1518.6674729805);
      double double0 = complex1.getImaginary();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.add(complex3);
      Complex complex7 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.tan();
      int int0 = complex1.ONE.hashCode();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.add(complex3);
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex5.divide(complex3);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-3610.1841856728), (-3610.1841856728));
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex2.I.multiply(complex1);
      int int0 = complex1.hashCode();
      Complex complex5 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex0.I.log();
      Complex complex6 = complex5.atan();
      double double0 = complex0.getReal();
      Complex complex7 = complex5.ZERO.sin();
      String string0 = complex7.toString();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex5.pow(complex8);
      Complex complex12 = complex5.subtract(complex0);
      Complex complex13 = complex12.NaN.subtract(complex0);
      // Undeclared exception!
      try { 
        complex1.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.NaN.multiply(0.11113807559013367);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      ComplexField complexField0 = complex1.I.getField();
      List<Complex> list0 = complex1.nthRoot(4035);
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex3.acos();
      double double0 = complex4.INF.abs();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ONE.sqrt();
      boolean boolean0 = complex6.isInfinite();
      Complex complex8 = complex2.tan();
      double double1 = complex8.getImaginary();
      double double2 = complex0.getImaginary();
      double double3 = complex3.getImaginary();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.ZERO.sin();
      Complex complex11 = complex9.I.asin();
      int int0 = (-908);
      try { 
        complex6.nthRoot((-908));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -908
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.multiply(complex0);
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex4.ZERO.atan();
      Complex complex8 = complex2.I.acos();
      String string0 = complex4.ONE.toString();
      int int0 = 0;
      try { 
        complex6.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.multiply((-224.264696341));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Object object0 = complex4.I.readResolve();
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex6.ONE.cosh();
      String string0 = complex8.toString();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex8.I.sinh();
      Object object1 = complex10.NaN.readResolve();
      Complex complex11 = complex10.INF.cosh();
      Object object2 = complex6.readResolve();
      Complex complex12 = complex2.ONE.createComplex((-224.264696341), (-2990.2));
      Complex complex13 = complex1.subtract(complex2);
      Object object3 = complex2.readResolve();
      boolean boolean0 = complex3.equals(object3);
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex14.I.multiply((-224.264696341));
      Complex complex17 = complex14.atan();
      Complex complex18 = complex17.INF.asin();
      Complex complex19 = complex13.conjugate();
      Complex complex20 = complex14.tan();
      Complex complex21 = complex20.ONE.sin();
      Complex complex22 = complex18.log();
      double double1 = complex2.getImaginary();
      Complex complex23 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.sqrt1z();
      List<Complex> list0 = complex3.I.nthRoot(702);
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex4.INF.createComplex(1379.65997919, 3089.55191737);
      double double0 = complex3.getArgument();
      Complex complex7 = complex0.ZERO.negate();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.subtract(complex8);
      int int0 = complex8.NaN.hashCode();
      Complex complex10 = complex9.I.acos();
      Complex complex11 = complex9.INF.log();
      ComplexField complexField0 = complex10.NaN.getField();
      boolean boolean0 = complex9.equals(complex3);
      Complex complex12 = complex9.NaN.acos();
      Complex complex13 = complex9.multiply(complex0);
      double double1 = complex13.abs();
      Complex complex14 = complex0.I.multiply(8.0E298);
      Complex complex15 = complex13.NaN.acos();
      Complex complex16 = complex14.ONE.exp();
      Complex complex17 = complex14.ONE.pow(complex6);
      boolean boolean1 = complex13.equals(complex8);
      double double2 = complex6.ONE.abs();
      double double3 = complex10.getArgument();
      boolean boolean2 = complex13.isNaN();
      Complex complex18 = complex9.tanh();
      Complex complex19 = complex13.subtract(complex8);
      double double4 = complex19.getImaginary();
      Complex complex20 = complex14.log();
      Object object0 = complex20.INF.readResolve();
      boolean boolean3 = complex6.isInfinite();
      boolean boolean4 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-4282.910442282232), (-4282.910442282232));
      Complex complex1 = new Complex((-4282.910442282232), (-4282.910442282232));
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.NaN.divide(complex8);
      Complex complex10 = complex4.pow(complex6);
      Complex complex11 = complex5.ZERO.divide(complex2);
      double double0 = complex5.I.getArgument();
      Complex complex12 = complex5.log();
      Complex complex13 = complex12.I.sqrt();
      Complex complex14 = complex2.tanh();
      double double1 = complex3.abs();
      ComplexField complexField0 = complex2.getField();
      Complex complex15 = complex3.conjugate();
      Complex complex16 = complex1.cosh();
      Complex complex17 = complex16.NaN.cosh();
      Object object0 = new Object();
      boolean boolean0 = complex11.equals(object0);
      Complex complex18 = complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.multiply((-2451.4749821857085));
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex3.INF.subtract(complex0);
      int int0 = complex3.ONE.hashCode();
      List<Complex> list0 = complex4.nthRoot(214);
      double double0 = complex4.getArgument();
      Complex complex5 = complex3.createComplex((-3767.84103578), (-2451.4749821857085));
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex3.INF.divide(complex4);
      ComplexField complexField0 = complex6.I.getField();
      int int1 = complex6.NaN.hashCode();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.I.pow(complex1);
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex9.ZERO.negate();
      double double1 = complex3.INF.abs();
      String string0 = complex8.INF.toString();
      double double2 = complex0.getImaginary();
      Complex complex12 = complex8.createComplex((-20.990143), 2386.49621);
      boolean boolean0 = complex5.isInfinite();
      boolean boolean1 = complex7.isNaN();
      Complex complex13 = complex5.sqrt();
      int int2 = complex6.hashCode();
      Complex complex14 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.NaN.multiply(complex2);
      double double0 = complex3.getArgument();
      List<Complex> list0 = complex1.nthRoot(134);
      Complex complex4 = complex0.ONE.multiply((double) 134);
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.NaN.cosh();
      String string0 = complex8.toString();
      Complex complex9 = complex0.tan();
      boolean boolean0 = complex9.isNaN();
      double double1 = complex9.getArgument();
      Complex complex10 = complex9.createComplex(0.0, 2.356194490192345);
      Complex complex11 = complex10.ZERO.subtract(complex1);
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex8.NaN.asin();
      Complex complex14 = complex6.NaN.tanh();
      Complex complex15 = complex10.subtract(complex3);
      Complex complex16 = complex9.add(complex4);
      double double2 = complex15.getReal();
      Complex complex17 = complex8.cosh();
      Complex complex18 = complex0.sqrt1z();
      Complex complex19 = Complex.I;
      Object object0 = complex19.readResolve();
      boolean boolean1 = complex15.equals(object0);
      double double3 = complex17.getReal();
      Complex complex20 = complex9.negate();
      Complex complex21 = complex16.sqrt1z();
      Complex complex22 = complex15.negate();
      Complex complex23 = complex8.createComplex(5024.8385407, 0.0);
      Complex complex24 = complex6.subtract(complex18);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(3953.69, 3953.69);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.ONE.conjugate();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex3.ZERO.negate();
      Complex complex7 = complex3.I.cosh();
      Complex complex8 = complex7.I.add(complex3);
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex7.ZERO.multiply(complex1);
      Complex complex11 = complex2.ZERO.asin();
      int int0 = complex11.I.hashCode();
      Complex complex12 = complex2.sqrt();
      String string0 = complex3.ONE.toString();
      Complex complex13 = complex3.tan();
      Complex complex14 = complex2.acos();
      Complex complex15 = complex13.negate();
      Complex complex16 = complex1.tan();
      Complex complex17 = complex0.sin();
      double double0 = complex17.getArgument();
      Complex complex18 = Complex.NaN;
      Complex complex19 = complex18.ONE.exp();
      Complex complex20 = complex15.subtract(complex18);
      String string1 = complex2.toString();
      boolean boolean0 = complex20.equals(complex6);
      String string2 = complex6.toString();
      Complex complex21 = complex16.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.conjugate();
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.negate();
      String string0 = complex4.ONE.toString();
      double double2 = complex4.ZERO.getArgument();
      Complex complex5 = complex4.asin();
      double double3 = complex2.getReal();
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex4.multiply(1.0);
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
