/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:33:17 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      double double0 = complex0.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex2.I.negate();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex6.atan();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.672746640771136, 0.672746640771136);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.sinh();
      int int0 = complex1.I.hashCode();
      Complex complex3 = complex0.exp();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex6.I.tanh();
      double double0 = complex5.NaN.abs();
      Complex complex8 = complex6.I.sin();
      Complex complex9 = complex4.I.sinh();
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex11.ZERO.add(complex4);
      Object object0 = complex12.readResolve();
      String string0 = complex4.NaN.toString();
      Complex complex13 = complex4.exp();
      Complex complex14 = complex13.multiply(complex0);
      double double1 = complex14.ZERO.abs();
      Complex complex15 = complex14.multiply(complex13);
      ComplexField complexField0 = complex13.ONE.getField();
      Complex complex16 = complex3.sinh();
      Complex complex17 = complex14.cos();
      Complex complex18 = complex17.conjugate();
      Complex complex19 = complex8.add(complex10);
      Object object1 = complex10.readResolve();
      Complex complex20 = complex10.multiply(0.0);
      Complex complex21 = complex17.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex0.toString();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.INF.sqrt1z();
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex2.sqrt1z();
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex5.I.asin();
      Object object1 = complex1.NaN.readResolve();
      Complex complex7 = complex5.ZERO.subtract(complex3);
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex8.ZERO.negate();
      double double1 = complex5.ZERO.abs();
      Complex complex10 = complex6.I.acos();
      Complex complex11 = complex8.atan();
      double double2 = complex1.getArgument();
      Complex complex12 = complex6.divide(complex0);
      Complex complex13 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex2.multiply((double) 1);
      String string0 = complex6.toString();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex2.log();
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex10.asin();
      double double0 = complex6.getArgument();
      Complex complex12 = complex1.atan();
      double double1 = complex0.getArgument();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex13.multiply(complex8);
      Complex complex15 = complex14.add(complex0);
      Complex complex16 = complex2.sqrt();
      Complex complex17 = complex14.asin();
      double double2 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.9988721575749467);
      Complex complex1 = complex0.multiply((-1906.5));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex3.multiply(complex1);
      Object object0 = complex2.readResolve();
      Complex complex6 = complex1.sqrt1z();
      ComplexField complexField0 = complex3.getField();
      List<Complex> list0 = complex1.nthRoot(1492);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.atan();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.add(complex6);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex3.add(complex9);
      Complex complex11 = complex9.ZERO.tan();
      boolean boolean0 = complex1.isInfinite();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex6.cos();
      Complex complex14 = new Complex(1.494140625, 1113.14);
      Complex complex15 = complex3.add(complex14);
      Complex complex16 = complex9.log();
      double double0 = complex8.getImaginary();
      Complex complex17 = complex2.asin();
      Complex complex18 = complex10.sinh();
      Complex complex19 = complex17.cos();
      Complex complex20 = complex16.negate();
      Complex complex21 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2275.99402637087), (-2275.99402637087));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.INF.divide(complex1);
      Complex complex5 = complex1.ZERO.add(complex0);
      Complex complex6 = complex5.ZERO.createComplex((-2275.99402637087), 0.7937005259840998);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex1.pow(complex4);
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.INF.divide(complex2);
      Complex complex6 = complex0.ZERO.createComplex(850.042547968, (-892.389));
      Complex complex7 = complex2.INF.tanh();
      Complex complex8 = complex7.INF.acos();
      double double0 = complex8.getArgument();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex11.ZERO.sqrt1z();
      Complex complex13 = complex11.sinh();
      String string0 = complex2.ZERO.toString();
      int int1 = complex7.hashCode();
      double double1 = complex7.getImaginary();
      Complex complex14 = complex0.atan();
      int int2 = complex14.ZERO.hashCode();
      double double2 = complex14.INF.abs();
      int int3 = complex9.hashCode();
      Complex complex15 = complex1.acos();
      Complex complex16 = complex7.sqrt1z();
      Complex complex17 = complex15.pow(complex6);
      Complex complex18 = complex17.ONE.atan();
      Complex complex19 = complex12.acos();
      Complex complex20 = complex11.add(complex15);
      double double3 = complex10.getReal();
      Complex complex21 = complex3.tanh();
      Complex complex22 = complex5.multiply(1.0399887655788103);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.cosh();
      double double0 = complex2.I.abs();
      double double1 = complex0.abs();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex4.NaN.tanh();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex1.getImaginary();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.INF.log();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex0.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.asin();
      Object object0 = complex4.readResolve();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex3.cos();
      Complex complex9 = new Complex(1.625, 0.0);
      Complex complex10 = complex0.NaN.asin();
      boolean boolean0 = complex4.equals(complex9);
      Complex complex11 = complex2.I.sqrt1z();
      Complex complex12 = complex4.log();
      Complex complex13 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex0.I.sin();
      double double0 = complex4.getArgument();
      List<Complex> list0 = complex5.ZERO.nthRoot(2129);
      Complex complex6 = complex3.ZERO.conjugate();
      Complex complex7 = complex5.ZERO.add(complex4);
      List<Complex> list1 = complex5.I.nthRoot(2129);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.NaN.subtract(complex4);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.NaN.subtract(complex4);
      Object object0 = complex10.readResolve();
      Complex complex12 = complex0.INF.sqrt();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex13.INF.cos();
      Complex complex15 = complex8.tanh();
      // Undeclared exception!
      complex15.nthRoot(2129);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = new Complex(Double.NaN, Double.NaN);
      Complex complex5 = complex0.add(complex4);
      double double0 = complex0.getReal();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex7.multiply(complex0);
      Complex complex9 = complex8.multiply(complex1);
      double double1 = complex4.INF.abs();
      Complex complex10 = complex9.sqrt1z();
      boolean boolean0 = complex4.isInfinite();
      String string0 = complex9.toString();
      Complex complex11 = complex2.sin();
      Complex complex12 = complex5.subtract(complex10);
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex3.sin();
      Complex complex15 = complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      int int0 = complex2.INF.hashCode();
      String string0 = complex3.I.toString();
      Complex complex5 = complex1.I.multiply((-526.7));
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.NaN.multiply(0.0);
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex10.ONE.cosh();
      double double0 = complex4.getReal();
      Complex complex12 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1720.0, 0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.ONE.multiply((-2149.532325));
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex7 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-571.2893143), 3845.0);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.conjugate();
      int int0 = complex4.hashCode();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.INF.tan();
      Object object0 = complex4.I.readResolve();
      Complex complex7 = complex0.tan();
      double double0 = complex7.ONE.abs();
      int int1 = complex3.ONE.hashCode();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex8 = complex7.I.divide(complex4);
      Complex complex9 = complex7.acos();
      double double1 = complex8.getArgument();
      try { 
        complex4.nthRoot((-511));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -511
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-3929.3861), 2772.7333);
      Complex complex1 = complex0.createComplex(2772.7333, 3302.2579);
      Complex complex2 = Complex.ZERO;
      Object object0 = complex1.I.readResolve();
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex2.ONE.multiply(0.0);
      double double1 = complex2.getArgument();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex0.conjugate();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.equals("");
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.ZERO.add(complex3);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.divide(complex0);
      Complex complex7 = complex0.multiply((-1.0));
      Complex complex8 = complex0.ONE.asin();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      double double0 = complex1.abs();
      Complex complex2 = complex1.I.tan();
      List<Complex> list0 = complex2.I.nthRoot(1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.pow(complex1);
      int int0 = complex4.INF.hashCode();
      double double1 = complex4.ZERO.abs();
      Complex complex5 = complex3.INF.pow(complex2);
      int int1 = complex3.ONE.hashCode();
      int int2 = complex5.ZERO.hashCode();
      double double2 = complex4.ZERO.getArgument();
      Object object1 = complex4.readResolve();
      int int3 = complex2.hashCode();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.NaN.sin();
      ComplexField complexField0 = complex6.getField();
      double double3 = complex2.abs();
      // Undeclared exception!
      try { 
        complex2.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.createComplex((-5119.3411122553), (-5119.3411122553));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1518.304356102401), 0.0);
      Complex complex1 = complex0.INF.tan();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ONE.sqrt1z();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.multiply((-1518.304356102401));
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex1.ONE.createComplex(1518.304356102401, (-4731.3398218968));
      String string0 = complex3.I.toString();
      List<Complex> list0 = complex1.nthRoot(465);
      double double1 = complex3.getReal();
      Object object1 = complex3.readResolve();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, 1.7976931348623157E308);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.multiply(0.0);
      String string0 = complex1.toString();
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.NaN.multiply(454.3);
      Complex complex4 = complex1.I.pow(complex3);
      Complex complex5 = complex4.ONE.sinh();
      int int0 = complex2.NaN.hashCode();
      Object object0 = complex3.INF.readResolve();
      Complex complex6 = complex0.NaN.pow(complex1);
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex6.ONE.log();
      ComplexField complexField0 = complex8.getField();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = new Complex((-0.010714690733195933), 1934.8960319094706);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      double double0 = complex5.ZERO.getArgument();
      Complex complex7 = complex4.divide(complex1);
      String string1 = complex7.INF.toString();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex2.acos();
      double double1 = complex7.getArgument();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex11.ONE.cos();
      Complex complex13 = complex1.log();
      Complex complex14 = complex10.I.acos();
      Object object0 = complex14.NaN.readResolve();
      Complex complex15 = complex10.multiply(complex13);
      String string2 = complex8.I.toString();
      Complex complex16 = complex8.cos();
      Complex complex17 = complex8.atan();
      double double2 = complex17.NaN.getArgument();
      Complex complex18 = complex10.cos();
      double double3 = complex9.getReal();
      Complex complex19 = complex10.tanh();
      Complex complex20 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.INF.cosh();
      double double0 = complex1.ONE.getArgument();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex0.log();
      double double1 = complex0.NaN.getArgument();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex1.sqrt();
      boolean boolean1 = complex0.isInfinite();
      double double2 = complex2.getReal();
      int int0 = complex2.hashCode();
      Complex complex6 = complex1.acos();
      Object object0 = complex5.readResolve();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex2.log();
      Complex complex9 = complex4.atan();
      double double3 = complex5.getArgument();
      Complex complex10 = complex4.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.multiply(Double.NaN);
      Complex complex4 = complex0.sqrt();
      double double0 = complex0.getArgument();
      double double1 = complex1.ONE.getArgument();
      List<Complex> list0 = complex1.I.nthRoot(201);
      double double2 = complex0.abs();
      Complex complex5 = complex0.INF.negate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex0.ZERO.conjugate();
      List<Complex> list1 = complex7.nthRoot(201);
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex7.add(complex9);
      double double3 = complex1.getImaginary();
      Complex complex11 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.NaN.multiply(1753.0497086058504);
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex2.exp();
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex3.divide(complex5);
      Complex complex8 = complex7.NaN.add(complex1);
      Complex complex9 = complex8.ONE.multiply(Double.NaN);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex6.NaN.createComplex(Double.NaN, 0.0);
      Complex complex12 = complex10.I.conjugate();
      Complex complex13 = complex12.createComplex(1753.0497086058504, 1753.0497086058504);
      Complex complex14 = complex12.ONE.sqrt();
      Object object0 = complex10.readResolve();
      Complex complex15 = complex0.multiply(complex3);
      Complex complex16 = complex6.multiply(complex4);
      Object object1 = complex1.readResolve();
      Complex complex17 = complex10.sin();
      Complex complex18 = complex15.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.NaN.createComplex(302.3, (-2941.06932));
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex3.INF.multiply(complex4);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex0.createComplex(1290.49, 1290.49);
      Complex complex7 = complex0.I.exp();
      Complex complex8 = complex3.NaN.multiply(1290.49);
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.ZERO.exp();
      Object object0 = complex6.readResolve();
      Complex complex11 = complex7.multiply(complex2);
      double double0 = complex3.I.getArgument();
      Object object1 = complex7.readResolve();
      boolean boolean0 = complex1.equals(object1);
      double double1 = complex3.getArgument();
      double double2 = complex11.abs();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex10.acos();
      Complex complex14 = complex6.log();
      Complex complex15 = complex0.cos();
      Complex complex16 = complex15.ONE.sinh();
      Complex complex17 = complex9.multiply(2.0);
      Object object2 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.multiply((-1632.9990516571938));
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex0.INF.sin();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex1.ONE.sqrt();
      Complex complex8 = complex7.ZERO.multiply(complex5);
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex1.add(complex2);
      String string0 = complex11.toString();
      Complex complex12 = complex7.tan();
      String string1 = complex11.toString();
      Complex complex13 = complex2.sqrt();
      double double0 = complex3.getImaginary();
      double double1 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.I.nthRoot(3118);
      Complex complex1 = complex0.multiply(2.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.sinh();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex3.ONE.divide(complex2);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.createComplex(2.0, 2.0);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex8.ONE.cos();
      Complex complex11 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1981.07, (-2184.752542542));
      Complex complex1 = complex0.exp();
      Object object0 = complex1.NaN.readResolve();
      double double0 = complex1.abs();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.createComplex(1981.07, 0.10526403784751892);
      Complex complex4 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.ONE.createComplex(367.2247504788039, (-3443.81978806838));
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex4.ZERO.asin();
      Complex complex7 = complex3.ZERO.log();
      Complex complex8 = complex7.I.pow(complex2);
      Complex complex9 = complex7.I.tan();
      Complex complex10 = complex9.ONE.sqrt();
      Complex complex11 = complex0.tan();
      Complex complex12 = complex0.NaN.sqrt1z();
      String string0 = complex0.toString();
      double double0 = complex0.getArgument();
      Complex complex13 = complex0.sqrt();
      boolean boolean0 = complex11.equals(complex2);
      int int0 = complex0.hashCode();
      String string1 = complex11.toString();
      Complex complex14 = complex0.subtract(complex1);
      double double1 = complex14.NaN.abs();
      Complex complex15 = complex7.multiply(complex1);
      Complex complex16 = complex11.NaN.asin();
      Complex complex17 = complex8.negate();
      Complex complex18 = complex9.subtract(complex11);
      Object object1 = complex17.readResolve();
      boolean boolean1 = complex13.equals(object1);
      Complex complex19 = complex13.conjugate();
      Object object2 = complex7.readResolve();
      double double2 = complex14.getArgument();
      Complex complex20 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.49999999999999994, (-51.0));
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1934.0), (-1934.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.ZERO.add(complex2);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex1.I.sinh();
      double double0 = complex1.getArgument();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1707.120420333911, (-997.4895953865));
      Complex complex1 = complex0.asin();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.add(complex2);
      String string0 = complex3.INF.toString();
      Complex complex4 = complex0.NaN.sqrt();
      String string1 = complex1.I.toString();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex5.sin();
      double double0 = complex7.NaN.abs();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.INF.sinh();
      Object object0 = complex9.readResolve();
      Complex complex10 = complex8.NaN.divide(complex0);
      Complex complex11 = complex10.NaN.conjugate();
      Complex complex12 = complex8.createComplex(8.0E298, Double.POSITIVE_INFINITY);
      Complex complex13 = complex8.atan();
      Complex complex14 = complex9.NaN.createComplex((-1048.67683), 0.0);
      Complex complex15 = complex2.I.sinh();
      try { 
        complex1.I.nthRoot((-3023));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,023
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.NaN.createComplex(4053.0, 4053.0);
      Complex complex4 = complex3.NaN.cosh();
      int int0 = complex1.INF.hashCode();
      int int1 = complex1.I.hashCode();
      ComplexField complexField0 = complex1.getField();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex1.ZERO.createComplex((-1.0), Double.NaN);
      Complex complex5 = complex0.multiply(2.0);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ZERO.multiply(complex0);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.INF.sqrt();
      ComplexField complexField0 = complex6.getField();
      Complex complex10 = complex5.createComplex(2.0, Double.POSITIVE_INFINITY);
      ComplexField complexField1 = complex5.getField();
      String string0 = complex1.toString();
      Complex complex11 = complex7.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.tanh();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.ONE.cosh();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex3.INF.abs();
      Complex complex5 = complex0.exp();
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.NaN.pow(complex2);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex9.ZERO.sqrt();
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex8.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex4.pow(complex5);
      Object object0 = complex0.INF.readResolve();
      Complex complex15 = complex1.conjugate();
      Complex complex16 = complex3.multiply((-632.399867701517));
      boolean boolean1 = complex8.equals("(1.0, 0.0)");
      Object object1 = complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.INF.add(complex2);
      double double0 = complex1.INF.abs();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.INF.cosh();
      String string0 = complex5.ZERO.toString();
      Complex complex7 = complex4.I.divide(complex5);
      double double1 = complex1.getReal();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.conjugate();
      List<Complex> list0 = complex0.nthRoot(37);
      double double2 = complex2.abs();
      Complex complex10 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex4.divide(complex1);
      Complex complex7 = complex6.ZERO.multiply(0.0);
      Complex complex8 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.conjugate();
      Object object0 = new Object();
      Complex complex3 = complex1.log();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex2.isInfinite();
      List<Complex> list0 = complex1.INF.nthRoot(2523);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.negate();
      int int0 = complex2.ONE.hashCode();
      double double1 = complex4.getReal();
      Object object1 = complex2.readResolve();
      double double2 = complex4.getImaginary();
      Complex complex5 = complex0.I.divide(complex4);
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex4.ONE.exp();
      double double3 = complex7.getImaginary();
      Complex complex10 = complex7.ONE.sin();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex1.acos();
      String string0 = complex3.toString();
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.add(complex0);
      Complex complex2 = complex0.acos();
      Object object0 = complex2.readResolve();
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      double double0 = complex1.abs();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex2.ONE.multiply(complex0);
      Complex complex5 = complex4.ONE.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.I.subtract(complex4);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex0.INF.pow(complex1);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sinh();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.asin();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.ONE.cosh();
      ComplexField complexField1 = complex1.NaN.getField();
      ComplexField complexField2 = complex0.getField();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.sinh();
      boolean boolean0 = complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2877.47828), (-4229.0294361));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.createComplex(5177.0, 0.15);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(complex0);
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = complex0.INF.pow(complex0);
      Complex complex6 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.INF.add(complex2);
      double double0 = complex1.INF.abs();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.INF.cosh();
      String string0 = complex5.ZERO.toString();
      Complex complex7 = complex4.I.divide(complex5);
      double double1 = complex1.getReal();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex2.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex0.nthRoot(37);
      double double2 = complex2.abs();
      Complex complex11 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.acos();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.sin();
      double double0 = complex2.ONE.getArgument();
      String string0 = complex2.toString();
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex2.ONE.divide(complex1);
      ComplexField complexField1 = complex4.INF.getField();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex2.acos();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.add(complex7);
      boolean boolean0 = complex1.equals((Object) null);
      Complex complex9 = complex6.NaN.sqrt1z();
      double double1 = complex2.abs();
      Complex complex10 = complex7.ONE.sinh();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex8.cosh();
      Complex complex13 = complex8.divide(complex6);
      Complex complex14 = complex13.I.cosh();
      Complex complex15 = complex14.INF.cos();
      Complex complex16 = complex14.ZERO.acos();
      Complex complex17 = complex16.INF.cosh();
      Complex complex18 = complex8.sqrt();
      Complex complex19 = Complex.ONE;
      Complex complex20 = complex1.multiply(complex19);
      Object object1 = new Object();
      boolean boolean1 = complex3.equals(object1);
      Complex complex21 = Complex.ONE;
      Complex complex22 = complex8.add(complex21);
      Complex complex23 = complex10.divide(complex4);
      Complex complex24 = Complex.ONE;
      Complex complex25 = complex10.subtract(complex24);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sqrt();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex1.I.cosh();
      Complex complex5 = complex2.ONE.createComplex(0.0, 1186.98717116071);
      double double1 = complex0.getImaginary();
      Complex complex6 = complex1.ZERO.sinh();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex0.ONE.multiply((-517.21671041));
      Complex complex9 = complex7.ONE.acos();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex2.toString();
      ComplexField complexField0 = complex9.ZERO.getField();
      boolean boolean1 = complex0.equals("(NaN, NaN)");
      double double2 = complex6.getReal();
      String string1 = complex5.toString();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex9.tan();
      Complex complex12 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex5.NaN.add(complex3);
      String string0 = complex6.toString();
      boolean boolean0 = complex5.equals(complex6);
      Complex complex8 = complex5.NaN.multiply(complex4);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.INF.multiply(complex7);
      Complex complex11 = complex5.NaN.atan();
      Complex complex12 = complex11.INF.multiply((-1.0));
      Complex complex13 = complex9.I.log();
      boolean boolean1 = complex9.isInfinite();
      Complex complex14 = new Complex((-2010.5998), (-1.0));
      Object object0 = complex0.INF.readResolve();
      Complex complex15 = complex6.pow(complex14);
      try { 
        complex9.nthRoot((-889));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -889
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1316.6251608808082, (-1983.84875117163));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      double double0 = complex0.getArgument();
      String string0 = complex0.toString();
      Complex complex2 = complex1.createComplex(1.5707963267948966, 0.0);
      Complex complex3 = complex0.atan();
      Object object0 = complex1.I.readResolve();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex3.log();
      double double1 = complex0.getReal();
      double double2 = complex3.getArgument();
      Complex complex7 = (Complex)complex4.I.readResolve();
      ComplexField complexField0 = complex7.getField();
      List<Complex> list0 = complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex((-5067.395342811), 0.0);
      Complex complex4 = complex0.INF.add(complex3);
      Complex complex5 = complex0.ONE.log();
      Complex complex6 = complex0.ONE.exp();
      Complex complex7 = complex6.ONE.tan();
      int int0 = complex4.ZERO.hashCode();
      Complex complex8 = complex0.multiply(0.0);
      int int1 = complex4.hashCode();
      Complex complex9 = complex8.add(complex3);
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex3.add(complex6);
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex4.NaN.atan();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.NaN.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.log();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex1.ZERO.atan();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex7.sinh();
      Object object1 = complex8.I.readResolve();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.ZERO.exp();
      List<Complex> list0 = complex1.nthRoot(781);
      boolean boolean1 = complex4.equals(complex2);
      Complex complex11 = complex8.multiply(0.0);
      Complex complex12 = complex11.ONE.sinh();
      Complex complex13 = complex12.ZERO.subtract(complex7);
      Complex complex14 = complex11.subtract(complex6);
      List<Complex> list1 = complex14.INF.nthRoot(781);
      Complex complex15 = complex10.I.divide(complex4);
      Complex complex16 = complex7.sinh();
      Complex complex17 = complex10.tanh();
      Complex complex18 = complex16.add(complex0);
      double double0 = complex6.getReal();
      Complex complex19 = complex18.subtract(complex4);
      boolean boolean2 = complex6.isNaN();
      double double1 = complex1.getReal();
      Complex complex20 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex1.NaN.sqrt1z();
      Complex complex6 = complex0.INF.subtract(complex2);
      String string1 = complex6.ZERO.toString();
      Complex complex7 = complex1.add(complex0);
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex5.equals(complex0);
      Complex complex8 = complex5.exp();
      int int0 = complex1.hashCode();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex0.tanh();
      double double0 = complex10.I.abs();
      Complex complex11 = complex6.createComplex(673.624428096331, 673.624428096331);
      ComplexField complexField0 = complex11.ZERO.getField();
      Complex complex12 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex0.ONE.subtract(complex3);
      Complex complex6 = complex4.NaN.cos();
      Complex complex7 = complex6.I.createComplex((-984.29585), 0.0);
      Complex complex8 = complex6.ONE.tanh();
      Complex complex9 = complex4.I.sinh();
      Object object0 = complex2.I.readResolve();
      Complex complex10 = complex1.pow(complex3);
      Complex complex11 = complex10.NaN.negate();
      List<Complex> list0 = complex1.NaN.nthRoot(5);
      Complex complex12 = complex0.tan();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex1.I.createComplex(0.0, 5);
      Complex complex15 = complex13.INF.exp();
      Complex complex16 = complex15.INF.sin();
      double double1 = complex2.getArgument();
      Complex complex17 = complex14.exp();
      Complex complex18 = complex9.conjugate();
      ComplexField complexField0 = complex18.I.getField();
      double double2 = complex15.getReal();
      Complex complex19 = complex4.NaN.asin();
      ComplexField complexField1 = complex14.getField();
      boolean boolean0 = complex11.equals(complex4);
      Complex complex20 = complex18.NaN.log();
      Complex complex21 = complex18.createComplex(1.25, 0.0);
      Complex complex22 = complex0.pow(complex9);
      ComplexField complexField2 = complex2.getField();
      double double3 = complex19.abs();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.INF.asin();
      double double0 = complex1.ZERO.getArgument();
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex2.I.atan();
      String string0 = complex6.toString();
      Complex complex8 = complex6.NaN.tanh();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex6.INF.add(complex5);
      boolean boolean0 = complex6.isNaN();
      boolean boolean1 = complex8.isInfinite();
      Complex complex11 = complex3.negate();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex11.atan();
  }
}
