/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:36:41 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.8364288087425561, 0.8364288087425561);
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex4.NaN.multiply(0.08371849358081818);
      Complex complex6 = complex0.conjugate();
      double double0 = complex0.ONE.getArgument();
      List<Complex> list0 = complex4.nthRoot(35);
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.subtract(complex7);
      Complex complex9 = complex6.atan();
      Complex complex10 = complex6.createComplex((-43.621), (-3884.07038793));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.log();
      double double0 = complex0.abs();
      String string0 = complex1.toString();
      Complex complex3 = complex2.sqrt();
      String string1 = complex1.INF.toString();
      Complex complex4 = complex2.I.createComplex(697.442374, 697.442374);
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.divide(complex3);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex1.multiply(complex0);
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex3.atan();
      double double1 = complex9.abs();
      Complex complex13 = complex10.atan();
      double double2 = complex1.abs();
      Complex complex14 = complex6.ZERO.cosh();
      Complex complex15 = complex14.NaN.multiply(0.1503907427375828);
      Complex complex16 = complex11.createComplex(0.6057341289498883, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex16.I.getField();
      Complex complex17 = complex16.NaN.atan();
      Complex complex18 = complex9.divide(complex2);
      Object object0 = complex13.readResolve();
      Complex complex19 = complex8.sqrt();
      Complex complex20 = complex19.negate();
      Complex complex21 = complex10.exp();
      Complex complex22 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-742.919418817), (-742.919418817));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.createComplex((-742.919418817), (-1877.7320949874509));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.I.exp();
      Complex complex7 = complex5.I.multiply(1.0);
      String string0 = complex7.ZERO.toString();
      Object object0 = complex3.readResolve();
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex8.I.pow(complex1);
      Complex complex10 = complex0.log();
      Complex complex11 = complex9.I.acos();
      double double0 = complex11.getArgument();
      Complex complex12 = complex3.multiply(complex4);
      Complex complex13 = complex3.add(complex7);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex14 = complex5.log();
      Complex complex15 = complex14.I.sin();
      Complex complex16 = complex3.I.divide(complex13);
      Complex complex17 = complex16.ONE.subtract(complex5);
      Complex complex18 = complex4.sqrt();
      Complex complex19 = complex18.NaN.sqrt1z();
      Complex complex20 = complex18.ZERO.divide(complex3);
      Complex complex21 = complex5.conjugate();
      Complex complex22 = complex21.I.multiply(complex7);
      Object object1 = complex1.readResolve();
      Complex complex23 = complex16.exp();
      Complex complex24 = complex2.sinh();
      Complex complex25 = complex14.pow(complex1);
      Complex complex26 = complex10.cos();
      Complex complex27 = complex24.atan();
      Complex complex28 = complex9.sin();
      Complex complex29 = complex20.sinh();
      Complex complex30 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      String string0 = complex0.toString();
      Complex complex3 = complex1.createComplex(0.5, 0.0);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex1.I.tan();
      Complex complex6 = complex3.ONE.tan();
      double double0 = complex5.ZERO.getArgument();
      double double1 = complex0.INF.abs();
      List<Complex> list0 = complex0.nthRoot(2206);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex2.multiply(0.75);
      Object object0 = complex3.readResolve();
      List<Complex> list1 = complex7.nthRoot(2206);
      Complex complex9 = complex2.INF.tan();
      // Undeclared exception!
      complex7.nthRoot(2206);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.add(complex0);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex2.NaN.tanh();
      String string0 = complex0.toString();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.divide(complex7);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.I.pow(complex9);
      boolean boolean0 = complex8.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2022.1715477919777), (-2022.1715477919777));
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.exp();
      Object object0 = complex0.readResolve();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.I.sin();
      int int0 = complex4.hashCode();
      Complex complex7 = complex5.subtract(complex1);
      Complex complex8 = complex6.ZERO.log();
      Complex complex9 = complex1.INF.conjugate();
      Complex complex10 = complex7.NaN.multiply(complex6);
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex6.createComplex((-2022.1715477919777), (-2022.1715477919777));
      Complex complex12 = complex2.sqrt();
      Complex complex13 = complex12.pow(complex4);
      double double2 = complex2.getImaginary();
      Complex complex14 = complex0.cos();
      Complex complex15 = complex2.tan();
      Complex complex16 = complex5.multiply(complex10);
      Complex complex17 = complex3.createComplex((-2022.1715477919777), 1.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2532.0641274788372);
      Complex complex1 = complex0.ZERO.createComplex(2532.0641274788372, 2532.0641274788372);
      Complex complex2 = complex1.conjugate();
      double double0 = complex0.I.abs();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.tanh();
      String string1 = complex3.NaN.toString();
      Complex complex4 = complex3.I.negate();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sinh();
      double double0 = complex2.I.getArgument();
      Complex complex4 = complex1.sqrt();
      try { 
        complex2.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1846.77), (-107.365489999));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex0.asin();
      try { 
        complex7.ZERO.nthRoot((-4289));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,289
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2000.0);
      Complex complex1 = complex0.conjugate();
      String string0 = complex0.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.acos();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex5.NaN.divide(complex3);
      Complex complex7 = complex6.ZERO.tanh();
      Object object0 = complex5.NaN.readResolve();
      Complex complex8 = complex5.ONE.multiply(complex4);
      double double1 = complex2.getImaginary();
      Object object1 = complex1.readResolve();
      Complex complex9 = new Complex(0.0, Double.NaN);
      Complex complex10 = complex3.ZERO.multiply(complex9);
      Complex complex11 = complex1.add(complex3);
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex11.add(complex3);
      Complex complex14 = complex13.INF.sqrt();
      Complex complex15 = complex13.INF.sinh();
      Complex complex16 = complex3.ONE.add(complex12);
      Complex complex17 = complex1.ONE.tan();
      Complex complex18 = complex3.exp();
      double double2 = complex18.ONE.getArgument();
      Complex complex19 = complex14.acos();
      Complex complex20 = complex13.NaN.pow(complex6);
      Complex complex21 = complex18.createComplex(0.0, 0.0);
      boolean boolean0 = complex5.isNaN();
      Complex complex22 = complex18.multiply(0.0);
      int int0 = complex18.hashCode();
      Complex complex23 = complex14.add(complex21);
      boolean boolean1 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-3961.6079), (-2721.570915477074));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex0.sinh();
      double double1 = complex4.ONE.getArgument();
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex3.NaN.tanh();
      Complex complex7 = complex4.ZERO.sqrt1z();
      double double2 = complex4.getArgument();
      Complex complex8 = complex3.ONE.pow(complex1);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex0.ONE.negate();
      Complex complex11 = complex3.acos();
      ComplexField complexField0 = complex0.ONE.getField();
      String string0 = complex9.toString();
      Complex complex12 = complex11.multiply(complex10);
      Complex complex13 = complex12.acos();
      Complex complex14 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      List<Complex> list0 = complex0.nthRoot(422);
      Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.multiply(complex4);
      Complex complex6 = complex1.conjugate();
      double double1 = complex6.INF.abs();
      double double2 = complex6.I.getArgument();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2952.0), (-2952.0));
      List<Complex> list0 = complex0.INF.nthRoot(2056);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.ONE.multiply(complex2);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex4.NaN.cos();
      Complex complex7 = complex4.exp();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.ZERO.acos();
      ComplexField complexField1 = complex9.ONE.getField();
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex5.add(complex7);
      Complex complex12 = complex3.atan();
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.tanh();
      double double0 = complex1.ONE.getArgument();
      ComplexField complexField0 = complex0.ONE.getField();
      double double1 = complex0.INF.getArgument();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex5.ZERO.subtract(complex4);
      String string0 = complex4.ZERO.toString();
      Complex complex7 = complex4.multiply(complex2);
      double double2 = complex4.getArgument();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex2.ZERO.sqrt1z();
      Complex complex10 = complex5.NaN.multiply(Double.NaN);
      ComplexField complexField1 = complex2.getField();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex5.isNaN();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals("");
      Complex complex1 = new Complex(0.0, (-2277.57104513552));
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex2.NaN.cosh();
      Object object0 = complex8.ZERO.readResolve();
      Complex complex9 = complex1.cosh();
      double double0 = complex2.getImaginary();
      Object object1 = complex1.ONE.readResolve();
      Complex complex10 = complex1.subtract(complex9);
      Complex complex11 = complex10.cos();
      Complex complex12 = complex11.ZERO.add(complex5);
      List<Complex> list0 = complex12.ONE.nthRoot(7);
      Complex complex13 = complex11.ONE.multiply(complex5);
      double double1 = complex10.INF.abs();
      Complex complex14 = complex1.log();
      Complex complex15 = complex11.createComplex(-0.0, -0.0);
      Complex complex16 = complex2.multiply((-3135.0));
      Complex complex17 = complex3.tanh();
      Complex complex18 = new Complex(Double.POSITIVE_INFINITY, (-758.9602222007));
      Complex complex19 = complex13.add(complex18);
      ComplexField complexField0 = complex16.getField();
      Complex complex20 = complex16.pow(complex14);
      boolean boolean0 = complex2.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex1.ZERO.tan();
      Complex complex6 = complex5.NaN.tanh();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex6.pow(complex1);
      boolean boolean1 = complex1.equals(complex2);
      Complex complex8 = complex0.ONE.cosh();
      double double1 = complex2.getArgument();
      Complex complex9 = complex1.NaN.exp();
      Complex complex10 = complex1.sin();
      boolean boolean2 = complex2.isNaN();
      Complex complex11 = complex2.add(complex8);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.subtract(complex0);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.I.conjugate();
      double double0 = complex2.getReal();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1812.0, 1.0E-6);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex3.NaN.exp();
      double double0 = complex4.NaN.abs();
      ComplexField complexField0 = complex3.getField();
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex3.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.NaN.multiply(complex0);
      List<Complex> list0 = complex8.NaN.nthRoot(1);
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex7.INF.log();
      double double1 = complex3.abs();
      Complex complex11 = complex1.cos();
      Object object0 = complex0.NaN.readResolve();
      Complex complex12 = complex11.I.pow(complex2);
      Complex complex13 = complex11.sin();
      String string0 = complex12.toString();
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex4.tanh();
      Complex complex16 = complex3.cos();
      Complex complex17 = complex1.divide(complex0);
      Complex complex18 = complex16.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.createComplex((-0.5), (-0.5));
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ONE.negate();
      String string0 = complex5.I.toString();
      Complex complex6 = complex5.createComplex(4156.2842246, 0.0);
      Complex complex7 = complex5.I.log();
      Complex complex8 = complex2.INF.divide(complex1);
      Complex complex9 = complex4.negate();
      int int0 = complex4.hashCode();
      Object object0 = complex2.readResolve();
      double double0 = complex9.getImaginary();
      Complex complex10 = complex7.sin();
      Complex complex11 = complex6.I.cosh();
      Complex complex12 = complex10.NaN.createComplex(Double.NaN, 0.0);
      Complex complex13 = complex6.add(complex9);
      int int1 = complex13.ZERO.hashCode();
      boolean boolean0 = complex9.isInfinite();
      Complex complex14 = complex10.sqrt1z();
      Complex complex15 = complex13.conjugate();
      double double1 = complex10.getReal();
      double double2 = complex6.abs();
      Object object1 = new Object();
      boolean boolean1 = complex5.equals(object1);
      List<Complex> list0 = complex3.nthRoot(80);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.NaN.cos();
      double double1 = complex5.getArgument();
      Complex complex8 = complex6.NaN.multiply(complex0);
      Complex complex9 = complex4.ZERO.asin();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex10.ONE.tan();
      double double2 = complex1.getReal();
      Object object0 = complex5.readResolve();
      Complex complex12 = complex5.INF.log();
      Complex complex13 = complex7.I.subtract(complex8);
      Complex complex14 = complex12.INF.atan();
      Complex complex15 = complex0.I.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      boolean boolean1 = complex4.isNaN();
      Complex complex16 = complex5.asin();
      Complex complex17 = complex7.asin();
      Complex complex18 = complex7.conjugate();
      Complex complex19 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-3207.22618), 0.087);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex3.multiply((-7.44321345601866E-11));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.sqrt();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.ONE.divide(complex4);
      int int0 = complex3.ONE.hashCode();
      Complex complex6 = Complex.I;
      boolean boolean0 = complex0.equals(complex6);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex8.subtract(complex0);
      Complex complex10 = complex9.INF.add(complex8);
      String string0 = complex7.toString();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.NaN.divide(complex0);
      String string1 = complex3.INF.toString();
      Complex complex4 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex1.ONE.multiply(complex4);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.ONE.divide(complex2);
      Complex complex7 = complex6.INF.subtract(complex5);
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex4.sin();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex1.add(complex8);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex4.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex3.ZERO.createComplex((-571.0411), (-571.0411));
      Complex complex6 = complex0.NaN.multiply((-570.30070748));
      Complex complex7 = complex5.INF.cosh();
      Complex complex8 = complex0.multiply((-570.30070748));
      double double0 = complex5.getReal();
      Complex complex9 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      int int0 = complex1.hashCode();
      Complex complex2 = new Complex(1.0, (-464.8097927));
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex1.I.divide(complex2);
      Complex complex4 = complex3.subtract(complex1);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex0.INF.multiply(2937.545031372);
      double double0 = complex0.abs();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.INF;
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex5.NaN.add(complex6);
      boolean boolean0 = complex5.isInfinite();
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.sqrt1z();
      String string0 = complex1.INF.toString();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.multiply(complex4);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.I.pow(complex0);
      boolean boolean0 = complex1.equals(complex3);
      Complex complex8 = complex2.INF.subtract(complex5);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex2.exp();
      boolean boolean1 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ZERO.log();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.pow(complex0);
      boolean boolean0 = complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.createComplex(2.0, 2.0);
      Complex complex4 = complex0.ZERO.sqrt();
      List<Complex> list0 = complex2.ZERO.nthRoot(1482);
      double double0 = complex1.NaN.abs();
      String string0 = complex0.toString();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.cosh();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-4222.2556948), (-4222.2556948));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cos();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex3.ONE.subtract(complex0);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.ONE.add(complex1);
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex7.I.pow(complex4);
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex0.cos();
      List<Complex> list0 = complex4.nthRoot(1530);
      Object object0 = complex11.readResolve();
      Complex complex12 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.add(complex0);
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.sin();
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex2.INF.nthRoot(137);
      try { 
        complex0.nthRoot((-1829));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,829
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(247.6578, 247.6578);
      List<Complex> list0 = complex0.ZERO.nthRoot(175);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.ZERO.subtract(complex3);
      Complex complex5 = complex3.ONE.divide(complex0);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.add(complex4);
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex5.subtract(complex7);
      Complex complex11 = complex10.INF.sin();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex7.exp();
      ComplexField complexField0 = complex13.getField();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-758.227015), 9.313225746154785E-10);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.7853981633974483, 0.7853981633974483);
      Complex complex1 = complex0.exp();
      String string0 = complex1.toString();
      Complex complex2 = complex0.ZERO.multiply(1.0);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.ONE.sin();
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex0.tan();
      boolean boolean0 = complex5.isNaN();
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex6.I.tanh();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex2.ZERO.divide(complex3);
      Complex complex6 = complex2.subtract(complex0);
      double double1 = complex6.INF.getArgument();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex3.isInfinite();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex4.log();
      Complex complex11 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = complex0.I.acos();
      List<Complex> list0 = complex1.I.nthRoot(1011);
      try { 
        complex1.nthRoot((-2183));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,183
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.I.sin();
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.getArgument();
      Complex complex1 = new Complex((-125.664), (-1279.5034526));
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(1017.65871);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.INF.multiply(complex2);
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      int int1 = complex0.hashCode();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(2431.022345385082, 2517.105353688);
      Complex complex1 = complex0.ONE.multiply((-1259.182816177453));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.ONE.asin();
      double double0 = complex4.INF.abs();
      Object object0 = complex0.INF.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex2.NaN.log();
      Object object1 = complex0.readResolve();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex2.add(complex6);
      ComplexField complexField0 = complex9.getField();
      Complex complex11 = complex9.acos();
      boolean boolean1 = complex0.isNaN();
      Complex complex12 = complex9.cos();
      Complex complex13 = complex5.add(complex8);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-1230.8160021));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.INF.toString();
      Object object0 = new Object();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.NaN.createComplex(2914.145916, 2641.4898285619547);
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = complex0.multiply((-280.17));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-645.24832278), 2.0);
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(245);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex0.asin();
      String string0 = complex0.toString();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.asin();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.cosh();
      Object object0 = complex0.readResolve();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.multiply(0.0);
      double double0 = complex2.abs();
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex4.multiply(complex0);
      double double0 = complex1.ONE.abs();
      double double1 = complex4.ONE.abs();
      double double2 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex2.ZERO.createComplex((-240.91078241), 0.0);
      double double3 = complex4.getReal();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      List<Complex> list0 = complex0.I.nthRoot(1);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex1.INF.sin();
      double double0 = complex1.I.getArgument();
      Complex complex4 = complex1.ONE.tanh();
      double double1 = complex4.INF.abs();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.acos();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = 1235.160505231;
      Complex complex0 = new Complex(0.0, 1235.160505231);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.cosh();
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = complex4.ONE.sin();
      String string0 = complex5.toString();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = complex0.divide(complex1);
      int int1 = 0;
      Complex complex9 = complex7.ZERO.exp();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.008333333333329196, 0.008333333333329196);
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.sqrt();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.multiply(complex1);
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex3.INF.subtract(complex8);
      Complex complex10 = complex8.log();
      double double0 = complex7.NaN.abs();
      Complex complex11 = complex3.sin();
      Complex complex12 = complex10.tan();
      Complex complex13 = complex3.sqrt();
      Complex complex14 = complex7.sin();
      String string0 = complex3.toString();
      Complex complex15 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = (-3740.27871);
      Complex complex0 = new Complex((-3740.27871), (-697.478114746308));
      double double1 = complex0.NaN.getArgument();
      List<Complex> list0 = complex0.INF.nthRoot(3822);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.I.tanh();
      try { 
        complex3.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      List<Complex> list0 = complex0.ONE.nthRoot(305);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.log();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.ONE.multiply(0.0);
      int int0 = complex2.hashCode();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex7.log();
      Object object0 = complex4.readResolve();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex5.INF.tan();
      int int1 = complex0.INF.hashCode();
      Complex complex7 = complex2.INF.atan();
      Complex complex8 = complex1.tan();
      List<Complex> list0 = complex0.ZERO.nthRoot(157);
      double double0 = complex0.getReal();
      Complex complex9 = complex0.sin();
      int int2 = complex4.hashCode();
      Complex complex10 = complex9.negate();
      ComplexField complexField0 = complex10.ONE.getField();
      Complex complex11 = complex9.pow(complex1);
      Complex complex12 = complex2.ZERO.log();
      ComplexField complexField1 = complex0.NaN.getField();
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex13.ZERO.multiply(complex11);
      String string0 = complex3.ZERO.toString();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex5.ONE.add(complex1);
      Complex complex7 = complex0.NaN.multiply(complex1);
      Complex complex8 = complex2.I.atan();
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex2.NaN.sinh();
      Complex complex11 = complex2.ZERO.acos();
      Complex complex12 = complex2.I.negate();
      List<Complex> list0 = complex2.I.nthRoot(1);
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex10.subtract(complex2);
      int int0 = complex10.ZERO.hashCode();
      Complex complex14 = complex13.ZERO.atan();
      Complex complex15 = complex14.NaN.sin();
      List<Complex> list1 = complex13.ONE.nthRoot(1);
      Complex complex16 = Complex.INF;
      Complex complex17 = complex13.I.log();
      int int1 = complex0.hashCode();
      Complex complex18 = complex13.add(complex0);
      Complex complex19 = Complex.INF;
      Complex complex20 = complex11.subtract(complex19);
      String string0 = complex9.toString();
      Complex complex21 = complex12.divide(complex1);
      Complex complex22 = complex18.sinh();
      Complex complex23 = complex8.cosh();
      Complex complex24 = complex23.ZERO.divide(complex2);
      double double0 = complex13.getArgument();
      Complex complex25 = complex9.sinh();
      Complex complex26 = complex19.negate();
      int int2 = complex7.hashCode();
      double double1 = complex4.getReal();
      Complex complex27 = complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.1921056801463227E-8, 1.1921056801463227E-8);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex4.INF.divide(complex0);
      Complex complex7 = complex0.I.sqrt();
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex2.add(complex4);
      Complex complex10 = complex2.I.subtract(complex7);
      boolean boolean0 = complex1.equals(complex2);
      try { 
        complex8.I.nthRoot((-447));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -447
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply((-2095.16625));
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex1.I.cos();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex1.cos();
      int int1 = complex2.I.hashCode();
      boolean boolean0 = complex8.isNaN();
      Complex complex9 = complex6.createComplex((-2095.16625), (-2095.16625));
      Complex complex10 = complex2.NaN.sqrt1z();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex11 = complex6.divide(complex0);
      Complex complex12 = Complex.INF;
      boolean boolean1 = complex4.equals(complex12);
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex13.ONE.sqrt();
      Complex complex15 = complex12.atan();
      Complex complex16 = complex2.log();
      Complex complex17 = complex3.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(2647);
      Complex complex18 = complex7.atan();
      Complex complex19 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Object object0 = complex0.I.readResolve();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Object object1 = complex0.readResolve();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.NaN.negate();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex3.ZERO.tan();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex0.ZERO.pow(complex1);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.NaN.tanh();
      Complex complex10 = complex6.divide(complex4);
      boolean boolean0 = complex4.isInfinite();
      Complex complex11 = complex10.ONE.add(complex7);
      Complex complex12 = complex5.tan();
      Complex complex13 = complex4.conjugate();
      Complex complex14 = complex10.acos();
      List<Complex> list1 = complex1.nthRoot(1);
      String string0 = complex4.toString();
      Complex complex15 = complex13.log();
      boolean boolean1 = complex11.isInfinite();
      Complex complex16 = complex15.createComplex(1694.1, 1);
  }
}
