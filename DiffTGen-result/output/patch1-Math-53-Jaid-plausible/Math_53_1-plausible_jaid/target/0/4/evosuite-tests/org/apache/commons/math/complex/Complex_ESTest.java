/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:26:02 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 822.69806114259;
      Complex complex0 = new Complex(822.69806114259, 822.69806114259);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.divide(complex0);
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex3.I.cos();
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex3.ZERO.cosh();
      Object object1 = complex4.ZERO.readResolve();
      Complex complex6 = complex1.I.pow(complex0);
      Complex complex7 = complex3.ZERO.multiply((-1.0));
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex7.NaN.add(complex1);
      Complex complex10 = complex7.ONE.tanh();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex1.ZERO.asin();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex3.atan();
      Complex complex14 = complex2.INF.sin();
      Complex complex15 = complex14.ONE.asin();
      double double1 = complex3.getReal();
      Complex complex16 = complex1.tan();
      boolean boolean0 = complex16.isNaN();
      Complex complex17 = Complex.I;
      Complex complex18 = complex12.multiply(complex17);
      int int0 = complex13.hashCode();
      double double2 = complex16.abs();
      Complex complex19 = complex12.cosh();
      Complex complex20 = complex19.INF.pow(complex2);
      Complex complex21 = complex13.asin();
      String string0 = complex13.toString();
      Complex complex22 = complex13.sin();
      double double3 = complex16.abs();
      Complex complex23 = complex21.add(complex1);
      ComplexField complexField0 = complex12.getField();
      Complex complex24 = Complex.INF;
      boolean boolean1 = complex17.equals(complex24);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ONE.multiply(complex0);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex2.ONE.divide(complex1);
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex0.acos();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex4.log();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.NaN.cosh();
      double double2 = complex1.abs();
      Object object1 = complex5.I.readResolve();
      double double3 = complex5.INF.abs();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.NaN.multiply(1.0);
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex8.I.conjugate();
      Complex complex12 = complex11.NaN.divide(complex8);
      Complex complex13 = complex5.sqrt();
      int int0 = (-48);
      Object object2 = complex6.I.readResolve();
      try { 
        complex7.nthRoot((-48));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -48
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(109.7691, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex1.ONE.multiply(complex0);
      Complex complex5 = complex4.log();
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex1.ZERO.subtract(complex0);
      Complex complex9 = complex0.INF.acos();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex10.INF.acos();
      String string0 = complex11.ZERO.toString();
      Complex complex13 = complex2.log();
      Complex complex14 = complex10.sinh();
      Complex complex15 = complex11.I.atan();
      Complex complex16 = complex14.sin();
      Complex complex17 = complex16.sqrt();
      Complex complex18 = complex17.conjugate();
      Complex complex19 = complex11.ONE.cos();
      Complex complex20 = complex17.cos();
      ComplexField complexField0 = complex17.getField();
      Complex complex21 = complex6.sqrt();
      double double0 = complex11.getReal();
      Complex complex22 = complex2.sqrt1z();
      Complex complex23 = complex17.negate();
      int int0 = complex16.hashCode();
      ComplexField complexField1 = complex16.getField();
      double double1 = complex23.abs();
      Complex complex24 = complex6.sinh();
      boolean boolean0 = complex6.isNaN();
      Complex complex25 = complex5.log();
      Complex complex26 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.createComplex(2005.2, (-772.4754120136928));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.add(complex0);
      String string0 = complex2.I.toString();
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex2.I.divide(complex0);
      Complex complex7 = complex6.NaN.asin();
      double double1 = complex4.ZERO.abs();
      double double2 = complex4.getArgument();
      double double3 = complex2.getArgument();
      Complex complex8 = complex1.NaN.sin();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex0.subtract(complex10);
      Complex complex12 = complex11.I.createComplex((-5205.167), (-411.82075412179));
      Complex complex13 = complex1.negate();
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex12.createComplex(1080.8675047, 3.141592653589793);
      Complex complex16 = complex13.divide(complex6);
      Complex complex17 = complex7.sinh();
      boolean boolean0 = complex11.equals("(0.0, 1.0)");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-249.4838), (-249.4838));
      Complex complex1 = complex0.exp();
      String string0 = complex1.toString();
      String string1 = complex0.toString();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.I.log();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex6.tan();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex1.NaN.createComplex(360.1, 360.1);
      Complex complex9 = complex1.add(complex5);
      Complex complex10 = complex5.asin();
      Complex complex11 = complex5.NaN.atan();
      Complex complex12 = complex9.NaN.sqrt1z();
      Complex complex13 = complex12.INF.acos();
      Object object1 = complex9.ZERO.readResolve();
      double double0 = complex0.getArgument();
      String string2 = complex9.toString();
      double double1 = complex13.getImaginary();
      List<Complex> list0 = complex7.nthRoot(203);
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex0.add(complex14);
      Complex complex16 = complex9.add(complex11);
      Complex complex17 = complex16.createComplex(0.0, 0.0);
      Complex complex18 = complex6.sqrt();
      Object object2 = complex9.readResolve();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ZERO.multiply(0.0);
      String string0 = complex3.INF.toString();
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.conjugate();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex5.NaN.tan();
      List<Complex> list0 = complex5.nthRoot(253);
      Complex complex8 = complex0.createComplex(785.5753328819901, (-2725.631945));
      Complex complex9 = complex5.tan();
      Complex complex10 = complex4.divide(complex3);
      Complex complex11 = complex10.NaN.atan();
      Complex complex12 = complex11.ZERO.conjugate();
      Complex complex13 = complex11.NaN.tan();
      int int0 = complex3.ZERO.hashCode();
      Complex complex14 = complex10.exp();
      Complex complex15 = complex7.tanh();
      Complex complex16 = complex15.conjugate();
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex0.equals(complex7);
      boolean boolean3 = complex13.isNaN();
      Complex complex17 = complex12.sqrt();
      Complex complex18 = complex17.NaN.acos();
      Complex complex19 = complex18.ZERO.pow(complex9);
      Complex complex20 = complex17.INF.negate();
      Complex complex21 = Complex.NaN;
      Complex complex22 = complex16.pow(complex21);
      double double0 = complex3.abs();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.ZERO.acos();
      int int0 = complex0.hashCode();
      double double0 = complex0.abs();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.multiply(complex1);
      int int0 = complex0.INF.hashCode();
      Complex complex4 = complex1.tan();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex5 = complex4.INF.exp();
      List<Complex> list0 = complex5.I.nthRoot(18);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.acos();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex3.subtract(complex6);
      Complex complex9 = complex1.asin();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.NaN.tan();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.I.multiply((-1662.0));
      double double0 = complex1.getImaginary();
      double double1 = complex4.ONE.getArgument();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.NaN.multiply(0.0);
      Complex complex9 = complex1.pow(complex7);
      Complex complex10 = complex9.acos();
      Complex complex11 = complex4.log();
      double double2 = complex3.getReal();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex3.NaN.exp();
      Complex complex7 = complex4.I.conjugate();
      Complex complex8 = complex3.NaN.divide(complex0);
      Complex complex9 = complex8.ZERO.conjugate();
      int int0 = complex8.ONE.hashCode();
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex8.subtract(complex6);
      Complex complex12 = complex0.asin();
      double double0 = complex6.getReal();
      ComplexField complexField0 = complex6.getField();
      Complex complex13 = complex4.asin();
      boolean boolean0 = complex8.isNaN();
      Complex complex14 = complex3.asin();
      ComplexField complexField1 = complex14.getField();
      int int1 = complex3.hashCode();
      Complex complex15 = complex10.atan();
      Complex complex16 = complex11.log();
      Complex complex17 = complex15.pow(complex9);
      boolean boolean1 = complex2.equals(complex4);
      List<Complex> list0 = complex5.nthRoot(1063);
      Complex complex18 = complex1.cosh();
      Complex complex19 = complex0.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.sqrt1z();
      double double0 = complex4.INF.abs();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex2.atan();
      List<Complex> list0 = complex3.nthRoot(3348);
      String string0 = complex0.toString();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex0.asin();
      // Undeclared exception!
      complex3.ONE.nthRoot(3348);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sin();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex1.I.tan();
      List<Complex> list0 = complex1.nthRoot(2);
      Complex complex7 = complex0.asin();
      List<Complex> list1 = complex5.nthRoot(2);
      double double0 = complex1.getReal();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.ONE.sqrt();
      String string0 = complex4.I.toString();
      Complex complex5 = complex2.ONE.cosh();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex6 = complex0.I.sinh();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex6.INF.pow(complex3);
      Complex complex9 = complex5.NaN.conjugate();
      double double0 = complex0.getArgument();
      double double1 = complex2.abs();
      Complex complex10 = complex0.multiply(0.0);
      double double2 = complex10.ZERO.abs();
      Complex complex11 = complex10.ONE.subtract(complex1);
      Complex complex12 = complex5.multiply(4629.115504913);
      Complex complex13 = complex12.I.sin();
      Object object0 = complex12.NaN.readResolve();
      Complex complex14 = complex10.acos();
      Complex complex15 = complex14.ZERO.createComplex(4629.115504913, 61.412723933);
      Complex complex16 = complex2.exp();
      Complex complex17 = complex13.exp();
      Complex complex18 = complex2.sin();
      Complex complex19 = complex6.pow(complex12);
      Complex complex20 = complex4.exp();
      Complex complex21 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(127.0104254081, 127.0104254081);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.conjugate();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex2.createComplex(2118.25501839, 127.0104254081);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex0.sinh();
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.tanh();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 3280.76348;
      Complex complex1 = complex0.INF.negate();
      try { 
        complex1.NaN.nthRoot((-3242));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,242
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.cos();
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.ONE.multiply((-986.69857));
      Complex complex4 = complex2.multiply(336.1042781829);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex5.I.multiply(complex0);
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex3.I.pow(complex4);
      Complex complex9 = complex0.ZERO.multiply(complex2);
      Complex complex10 = complex5.I.add(complex3);
      Complex complex11 = complex4.I.sinh();
      double double0 = complex0.getArgument();
      Complex complex12 = complex0.divide(complex1);
      Complex complex13 = complex12.ONE.sqrt();
      Complex complex14 = complex13.ZERO.createComplex((-962.5582262681), (-3.141592653589793));
      double double1 = complex14.I.abs();
      Complex complex15 = complex13.sinh();
      Complex complex16 = complex1.exp();
      Complex complex17 = complex9.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex18 = complex4.negate();
      Complex complex19 = complex3.add(complex16);
      boolean boolean1 = complex13.isInfinite();
      double double2 = complex2.getImaginary();
      double double3 = complex14.I.getArgument();
      Complex complex20 = complex19.divide(complex4);
      Complex complex21 = complex9.negate();
      Complex complex22 = complex7.log();
      Complex complex23 = complex8.tan();
      Complex complex24 = complex23.cos();
      Complex complex25 = complex14.negate();
      String string0 = complex25.toString();
      Complex complex26 = Complex.ZERO;
      boolean boolean2 = complex6.equals(complex26);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-563.5), (-616.6352622065374));
      Complex complex1 = new Complex(0.0, (-616.6352622065374));
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1368.8), 0.0);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.NaN.divide(complex0);
      Complex complex5 = complex0.atan();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex3.ONE.multiply((-1368.8));
      Complex complex7 = complex2.multiply((-1368.8));
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex5.multiply(0.0);
      Complex complex10 = complex0.exp();
      Complex complex11 = Complex.INF;
      double double0 = complex9.ZERO.getArgument();
      Complex complex12 = complex0.divide(complex11);
      String string0 = complex9.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex13 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.createComplex((-1155.263280358), (-1155.263280358));
      Complex complex8 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex0.cosh();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex5.equals(object0);
      Complex complex7 = complex0.I.log();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex8.divide(complex4);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex8.multiply(1391.62663827163);
      List<Complex> list0 = complex4.INF.nthRoot(7);
      Complex complex12 = complex5.sin();
      Complex complex13 = complex8.sqrt();
      double double0 = complex0.getReal();
      double double1 = complex5.getArgument();
      Complex complex14 = complex13.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.createComplex(0.99, 0.0);
      Complex complex2 = complex1.I.createComplex(4044.1329417559, (-2551.14660750642));
      Complex complex3 = complex0.multiply((-2551.14660750642));
      Complex complex4 = complex3.cosh();
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex4.subtract(complex0);
      String string0 = complex4.toString();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex5.createComplex(0.041666666666621166, 4044.1329417559);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex3.add(complex7);
      Complex complex10 = complex2.sin();
      int int0 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ONE.exp();
      double double0 = complex0.NaN.abs();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex2.multiply(Double.NaN);
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex0.conjugate();
      int int0 = complex0.hashCode();
      String string1 = complex0.toString();
      double double1 = complex2.getArgument();
      Complex complex6 = complex0.sin();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex0.INF.multiply(complex1);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex0.I.cosh();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex1.multiply(complex0);
      String string0 = complex4.toString();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex6.I.multiply(complex1);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex5.log();
      boolean boolean1 = complex1.equals(complex5);
      int int1 = complex0.hashCode();
      ComplexField complexField1 = complex1.getField();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex5.ONE.multiply(complex3);
      Complex complex13 = complex12.I.add(complex1);
      Complex complex14 = complex11.NaN.createComplex(0.1818181574344635, 6.283185307179586);
      Object object1 = complex1.readResolve();
      Complex complex15 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex1 = Complex.NaN;
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex1.hashCode();
      boolean boolean1 = complex0.equals("");
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex2.acos();
      boolean boolean2 = complex2.equals("");
      Object object1 = complex2.readResolve();
      boolean boolean3 = complex1.equals(object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1705.963), (-1705.963));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.pow(complex0);
      double double0 = complex1.getImaginary();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.multiply(0.0);
      Complex complex7 = complex3.NaN.multiply(complex0);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.multiply(complex4);
      double double0 = complex0.getArgument();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex1.I.add(complex3);
      String string0 = complex5.toString();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex5.pow(complex0);
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.conjugate();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(539.0, 2.0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.ZERO.multiply(2995.3163211);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.ONE.subtract(complex1);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.ZERO.pow(complex4);
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = complex6.NaN.pow(complex7);
      Object object1 = complex6.NaN.readResolve();
      int int0 = complex6.hashCode();
      String string0 = complex6.toString();
      Complex complex11 = complex0.add(complex1);
      double double0 = complex1.ZERO.abs();
      int int1 = complex11.ONE.hashCode();
      Complex complex12 = complex2.cos();
      Object object2 = complex4.readResolve();
      Complex complex13 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      String string0 = complex0.ZERO.toString();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex2.I.tan();
      Complex complex5 = complex0.ONE.divide(complex4);
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex6.I.sin();
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex8 = complex5.ONE.sqrt1z();
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex5.pow(complex8);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.ZERO.cosh();
      Complex complex13 = complex4.acos();
      Complex complex14 = complex13.cosh();
      Complex complex15 = complex14.NaN.negate();
      Complex complex16 = complex15.ZERO.multiply((-1213.7147665));
      Complex complex17 = complex4.negate();
      Complex complex18 = complex5.tan();
      double double1 = complex15.INF.getArgument();
      Complex complex19 = complex4.createComplex((-1553.733376354411), (-1553.733376354411));
      Complex complex20 = complex19.negate();
      Complex complex21 = complex20.I.divide(complex10);
      double double2 = complex20.INF.abs();
      boolean boolean0 = complex4.isInfinite();
      Complex complex22 = complex1.sqrt();
      Complex complex23 = complex16.sqrt1z();
      int int1 = complex0.hashCode();
      boolean boolean1 = complex20.isNaN();
      Complex complex24 = complex1.acos();
      int int2 = complex23.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1.0, 1.0);
      Complex complex2 = complex1.I.sinh();
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.ZERO.cos();
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.createComplex(-0.0, (-1.7168146928204135));
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.NaN.asin();
      ComplexField complexField1 = complex6.getField();
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex7.getImaginary();
      Complex complex8 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex3.INF.acos();
      String string0 = complex5.INF.toString();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex6.cosh();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sin();
      double double0 = complex2.abs();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex3.ONE.pow(complex2);
      Complex complex6 = complex3.sin();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex0.pow(complex3);
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.ZERO.nthRoot(7);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.I.acos();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.I.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.conjugate();
      double double0 = complex4.abs();
      Complex complex5 = Complex.ZERO;
      Object object1 = complex5.I.readResolve();
      Complex complex6 = complex5.INF.add(complex4);
      double double1 = complex6.getArgument();
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex4.tan();
      Object object2 = complex6.NaN.readResolve();
      Complex complex10 = complex7.NaN.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex0.divide(complex4);
      Complex complex12 = complex9.multiply(1.0);
      double double2 = complex12.NaN.abs();
      Complex complex13 = complex6.cosh();
      Complex complex14 = complex5.exp();
      String string0 = complex7.toString();
      Complex complex15 = complex9.subtract(complex13);
      List<Complex> list1 = complex0.nthRoot(7);
      Complex complex16 = complex8.sqrt1z();
      boolean boolean1 = complex2.equals("(0.0, 1.0)");
      Complex complex17 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ZERO.tan();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex2.ZERO.divide(complex1);
      Complex complex5 = complex0.subtract(complex3);
      int int0 = complex2.ONE.hashCode();
      Complex complex6 = complex1.ZERO.createComplex(3788.61, 3788.61);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex4.log();
      Complex complex10 = complex2.NaN.tan();
      Complex complex11 = complex9.I.pow(complex2);
      double double1 = complex0.getArgument();
      Object object0 = complex4.readResolve();
      Complex complex12 = complex9.createComplex(8.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.conjugate();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex0.ONE.negate();
      boolean boolean0 = complex0.equals("org.apache.commons.math.complex.Complex");
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, (-1804.83775950449));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(2009.3063900932);
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.multiply(178.0);
      Complex complex6 = complex4.cos();
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.I.tan();
      int int0 = complex1.ZERO.hashCode();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.sinh();
      double double1 = complex1.abs();
      int int1 = complex1.hashCode();
      Complex complex8 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.pow(complex0);
      List<Complex> list0 = complex2.NaN.nthRoot(841);
      Complex complex3 = complex2.INF.createComplex(Double.NaN, (-1121.0));
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.NaN.divide(complex0);
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex7.tanh();
      Object object0 = complex5.ONE.readResolve();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex5.multiply(4.9E-324);
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex5.log();
      Complex complex13 = complex11.subtract(complex9);
      double double0 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(451.4033571237, 451.4033571237);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-195.0782093533));
      Complex complex2 = complex1.INF.createComplex((-195.0782093533), (-195.0782093533));
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.createComplex((-195.0782093533), (-550.5));
      try { 
        complex4.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.multiply(834.93271712);
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.sqrt1z();
      double double0 = complex5.abs();
      Complex complex6 = complex3.multiply(6.283185307179586);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex2.createComplex(Double.NaN, 6.283185307179586);
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      double double1 = complex0.abs();
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex1.NaN.add(complex0);
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = complex1.createComplex(1.0, 7.549789948768648E-8);
      double double2 = complex0.abs();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex6.NaN.acos();
      Complex complex9 = complex7.I.tanh();
      Complex complex10 = complex7.NaN.createComplex(Double.POSITIVE_INFINITY, (-2301.59075753864));
      Complex complex11 = complex7.cosh();
      Complex complex12 = complex11.tan();
      Complex complex13 = complex1.divide(complex7);
      Complex complex14 = complex1.sin();
      Complex complex15 = complex8.multiply(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3976.777643695284));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.NaN.multiply(3940.1159);
      Complex complex3 = complex2.ZERO.sin();
      List<Complex> list0 = complex0.nthRoot(60);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex4.NaN.tan();
      Complex complex9 = complex4.INF.createComplex(897.9800284, (-3068.240183177406));
      Complex complex10 = complex0.divide(complex4);
      Complex complex11 = complex4.INF.conjugate();
      Complex complex12 = complex5.multiply(3365.740534590792);
      Complex complex13 = complex12.ZERO.sqrt();
      Complex complex14 = complex0.pow(complex9);
      double double1 = complex10.getArgument();
      Complex complex15 = complex14.pow(complex9);
      List<Complex> list1 = complex15.ONE.nthRoot(60);
      Complex complex16 = complex0.asin();
      Complex complex17 = complex12.conjugate();
      Complex complex18 = complex9.cos();
      Complex complex19 = complex16.conjugate();
      try { 
        complex6.nthRoot((-313));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -313
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(173.2800056569697, 173.2800056569697);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.ONE.multiply(173.2800056569697);
      Complex complex5 = complex4.pow(complex0);
      double double0 = complex0.ZERO.abs();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex6.ZERO.tanh();
      ComplexField complexField0 = complex6.I.getField();
      List<Complex> list0 = complex7.I.nthRoot(289);
      Object object0 = complex6.readResolve();
      Complex complex8 = complex2.pow(complex3);
      Complex complex9 = complex4.NaN.tan();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.NaN.multiply(complex0);
      ComplexField complexField1 = complex2.getField();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex12.conjugate();
      String string0 = complex13.NaN.toString();
      Complex complex14 = complex5.pow(complex7);
      Complex complex15 = complex14.I.sin();
      int int1 = complex14.hashCode();
      Complex complex16 = complex2.atan();
      Complex complex17 = complex16.cosh();
      ComplexField complexField2 = complex17.NaN.getField();
      Complex complex18 = complex4.acos();
      String string1 = complex18.ZERO.toString();
      double double1 = complex12.getReal();
      double double2 = complex6.getReal();
      Complex complex19 = complex7.log();
      Complex complex20 = complex14.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex6.I.asin();
      double double0 = complex10.I.abs();
      Complex complex11 = complex0.log();
      List<Complex> list0 = complex7.nthRoot(601);
      Complex complex12 = complex1.createComplex(1.0, 1.0);
      Complex complex13 = complex5.cos();
      Complex complex14 = complex4.sinh();
      Complex complex15 = complex12.createComplex(Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.I.cos();
      double double0 = complex4.getImaginary();
      Complex complex7 = complex3.I.sqrt();
      Complex complex8 = complex4.INF.createComplex(-0.0, -0.0);
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.add(complex8);
      Complex complex11 = complex5.multiply(complex3);
      double double1 = complex3.abs();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex9.sqrt();
      Complex complex14 = complex2.createComplex(-0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex2.NaN.add(complex1);
      String string0 = complex3.toString();
      Complex complex5 = complex2.ONE.tan();
      String string1 = complex5.NaN.toString();
      Complex complex6 = Complex.ONE;
      String string2 = complex6.I.toString();
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex7.log();
      double double0 = complex4.getImaginary();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex7.divide(complex4);
      Complex complex11 = complex6.cos();
      Complex complex12 = complex3.pow(complex10);
  }
}
