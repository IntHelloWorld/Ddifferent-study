/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:32:59 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-116.79449879303), (-116.79449879303));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex4.ONE.multiply(1117.59106);
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex8.negate();
      ComplexField complexField0 = complex4.getField();
      Complex complex11 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-131.4036958017), (-131.4036958017));
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.ZERO;
      ComplexField complexField0 = complex2.getField();
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = complex0.I.acos();
      Complex complex6 = complex2.pow(complex4);
      ComplexField complexField1 = complex6.getField();
      Complex complex7 = complex1.subtract(complex4);
      Complex complex8 = complex0.exp();
      boolean boolean0 = complex2.equals("`");
      int int1 = complex3.ZERO.hashCode();
      Complex complex9 = complex0.pow(complex6);
      int int2 = complex7.ONE.hashCode();
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex8.NaN.atan();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex1.ZERO.subtract(complex9);
      Complex complex14 = complex9.conjugate();
      Complex complex15 = complex14.ZERO.pow(complex8);
      Complex complex16 = complex12.tan();
      ComplexField complexField2 = complex15.INF.getField();
      Complex complex17 = complex3.subtract(complex12);
      Complex complex18 = complex13.ONE.negate();
      Complex complex19 = complex1.cos();
      ComplexField complexField3 = complex7.getField();
      Complex complex20 = complex17.cos();
      Complex complex21 = complex13.createComplex(577.3824358, 0.058823529411764705);
      Complex complex22 = complex6.sqrt1z();
      Complex complex23 = complex15.negate();
      Complex complex24 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.createComplex((-2146.409121965351), 0.0);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex1.I.divide(complex2);
      Complex complex5 = complex1.createComplex(0.0, (-2534.8916));
      Complex complex6 = complex4.createComplex(0.0, (-2534.8916));
      Complex complex7 = complex4.ZERO.exp();
      int int0 = complex6.hashCode();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex2.negate();
      double double0 = complex9.getReal();
      double double1 = complex11.getArgument();
      Complex complex12 = complex6.createComplex((-2146.409121965351), 0.015262607979040934);
      ComplexField complexField0 = complex10.getField();
      double double2 = complex6.getReal();
      Complex complex13 = complex3.createComplex((-2943.347384), (-2146.409121965351));
      Complex complex14 = complex1.pow(complex13);
      double double3 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(282.37, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.INF.add(complex1);
      double double0 = complex1.abs();
      Complex complex6 = complex3.ZERO.pow(complex4);
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex2.sqrt1z();
      String string0 = complex8.I.toString();
      double double1 = complex8.I.getArgument();
      double double2 = complex1.getArgument();
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = complex3.add(complex0);
      Complex complex10 = complex9.I.tanh();
      int int0 = complex3.hashCode();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.multiply(1883.274072084916);
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex1.ZERO.getField();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.sqrt1z();
      Object object1 = complex3.ZERO.readResolve();
      Complex complex5 = complex2.ZERO.acos();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex5.tan();
      List<Complex> list0 = complex3.ONE.nthRoot(1772);
      Complex complex7 = complex2.createComplex(1883.274072084916, 1883.274072084916);
      Complex complex8 = complex4.ZERO.conjugate();
      boolean boolean1 = complex1.isInfinite();
      int int0 = complex2.hashCode();
      Complex complex9 = complex1.sqrt1z();
      double double0 = complex4.getArgument();
      Complex complex10 = complex7.sinh();
      String string1 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.tan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex4 = complex1.NaN.multiply(1064.490906804867);
      String string0 = complex0.toString();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.log();
      double double0 = complex1.abs();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex4.I.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex3.ONE.subtract(complex4);
      Complex complex11 = complex10.I.conjugate();
      String string1 = complex8.toString();
      Object object0 = complex7.readResolve();
      Object object1 = complex5.readResolve();
      Complex complex12 = complex3.tan();
      boolean boolean1 = complex6.equals(object1);
      Complex complex13 = complex2.atan();
      Complex complex14 = complex6.atan();
      Complex complex15 = complex3.multiply(Double.POSITIVE_INFINITY);
      String string2 = complex0.toString();
      Complex complex16 = complex15.conjugate();
      Complex complex17 = complex13.cosh();
      Complex complex18 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2369.47333624388, (-1116.787442542));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.NaN.pow(complex3);
      double double0 = complex0.I.getArgument();
      Complex complex5 = complex1.ZERO.subtract(complex0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex9.ONE.multiply(complex2);
      double double1 = complex8.ONE.getArgument();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex4.divide(complex0);
      Complex complex13 = complex3.pow(complex5);
      Complex complex14 = complex13.INF.cos();
      Complex complex15 = complex14.I.cos();
      Complex complex16 = complex12.asin();
      int int0 = complex3.hashCode();
      Complex complex17 = complex11.createComplex(0.0, 1.375);
      Complex complex18 = complex7.asin();
      Complex complex19 = complex4.negate();
      try { 
        complex13.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 9.140260083262505E-9);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 761.8960820497678);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.createComplex(0.0, 1060.5793);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex4.NaN.asin();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex1.subtract(complex6);
      List<Complex> list0 = complex6.NaN.nthRoot(16);
      Complex complex9 = complex6.pow(complex7);
      try { 
        complex8.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.add(complex2);
      int int0 = 4460;
      Complex complex4 = complex0.I.sin();
      Object object0 = complex0.I.readResolve();
      List<Complex> list0 = complex0.nthRoot(4460);
      Complex complex5 = complex0.tan();
      // Undeclared exception!
      complex5.I.nthRoot(4460);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.NaN;
      double double1 = complex1.NaN.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ONE.subtract(complex0);
      String string0 = complex3.toString();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1296.075799991354), (-376.82));
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.createComplex((-376.82), (-1296.075799991354));
      Complex complex4 = complex2.createComplex(0.0, (-376.82));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.cosh();
      boolean boolean0 = complex5.equals(complex0);
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.getArgument();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-4586.75006223463));
      Complex complex1 = new Complex((-4586.75006223463), Double.NaN);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex3.INF.negate();
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = complex5.NaN.acos();
      Object object0 = complex0.readResolve();
      double double0 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      double double1 = complex0.getReal();
      Complex complex8 = complex1.ONE.acos();
      Complex complex9 = complex5.createComplex(Double.NaN, 3254.62);
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex6.sqrt1z();
      List<Complex> list0 = complex12.NaN.nthRoot(1);
      double double2 = complex0.getArgument();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex0.multiply(complex11);
      Complex complex15 = complex5.acos();
      Complex complex16 = complex15.I.createComplex((-4.503599627370496E15), Double.NaN);
      Complex complex17 = complex4.sqrt1z();
      Complex complex18 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1621.2373713642376));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.INF.add(complex1);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex2.NaN.subtract(complex0);
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex0.add(complex8);
      double double0 = complex9.INF.abs();
      boolean boolean0 = complex1.isNaN();
      Complex complex10 = complex8.sqrt1z();
      String string0 = complex10.toString();
      Complex complex11 = complex1.createComplex((-1621.2373713642376), Double.NaN);
      double double1 = complex9.abs();
      boolean boolean1 = complex8.isInfinite();
      List<Complex> list0 = complex11.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply((-4137.400517));
      Complex complex2 = new Complex((-4137.400517), 2952.70997107);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1479.42776));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.createComplex(0.0, (-1479.42776));
      Complex complex3 = complex2.INF.conjugate();
      ComplexField complexField1 = complex0.INF.getField();
      Complex complex4 = complex2.I.asin();
      Complex complex5 = complex1.ONE.asin();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex6.ONE.exp();
      ComplexField complexField2 = complex6.INF.getField();
      ComplexField complexField3 = complex6.getField();
      Complex complex8 = complex4.multiply((-1834.9386435704896));
      Complex complex9 = complex8.ONE.subtract(complex1);
      Complex complex10 = complex1.ZERO.pow(complex4);
      Complex complex11 = complex8.I.exp();
      Complex complex12 = complex8.subtract(complex1);
      Complex complex13 = complex4.ONE.pow(complex6);
      Complex complex14 = complex13.ONE.sinh();
      Object object1 = complex4.readResolve();
      List<Complex> list0 = complex2.ONE.nthRoot(164);
      Complex complex15 = complex1.tanh();
      Object object2 = complex4.readResolve();
      Complex complex16 = complex2.sinh();
      Complex complex17 = complex3.divide(complex16);
      int int0 = complex17.NaN.hashCode();
      Complex complex18 = complex4.createComplex((-1479.42776), 164);
      ComplexField complexField4 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1067.6417076981481), (-1067.6417076981481));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ONE.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex5.log();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.multiply((-2364.156407));
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex3.multiply(complex2);
      ComplexField complexField0 = complex4.getField();
      int int0 = complex3.hashCode();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex2.asin();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-702.0884159224419), (-702.0884159224419));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex3.I.pow(complex0);
      List<Complex> list0 = complex0.nthRoot(269);
      Complex complex6 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ONE.acos();
      double double0 = complex0.getReal();
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = complex5.exp();
      Complex complex9 = complex8.ZERO.subtract(complex3);
      Complex complex10 = complex8.sin();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex11.NaN.sqrt1z();
      String string1 = complex11.toString();
      Complex complex13 = complex2.cos();
      Complex complex14 = complex7.log();
      Complex complex15 = complex13.INF.multiply((-2539.717));
      Complex complex16 = complex13.sinh();
      int int0 = complex8.hashCode();
      boolean boolean0 = complex16.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-65.961));
      Complex complex1 = complex0.I.cosh();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex1.sqrt();
      double double0 = complex1.getReal();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex2.negate();
      String string0 = complex3.toString();
      Complex complex8 = complex4.multiply(1875.0577);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1636.299, (-4155.39596));
      Complex complex1 = new Complex((-418.3407620057457), (-418.3407620057457));
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1.7976931348623157E308), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.NaN.negate();
      double double0 = complex5.ZERO.getArgument();
      Complex complex8 = complex0.multiply((-1.7976931348623157E308));
      Complex complex9 = complex5.ONE.asin();
      Complex complex10 = complex0.sin();
      double double1 = complex1.ZERO.getArgument();
      double double2 = complex5.getArgument();
      Complex complex11 = complex6.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex12 = complex7.tanh();
      double double3 = complex10.abs();
      Complex complex13 = complex7.sinh();
      double double4 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ONE.asin();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.acos();
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex3.sqrt();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex1.I.asin();
      Complex complex8 = complex1.createComplex(0.0, (-2731.53550984));
      Complex complex9 = complex8.NaN.add(complex1);
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex10.INF.sinh();
      Complex complex12 = complex2.divide(complex8);
      Complex complex13 = complex8.negate();
      Complex complex14 = complex12.ONE.sqrt1z();
      Complex complex15 = complex6.ZERO.sqrt();
      Complex complex16 = complex15.ONE.sqrt1z();
      Complex complex17 = complex0.NaN.atan();
      Object object0 = complex17.ZERO.readResolve();
      Complex complex18 = complex6.createComplex(0.0, 0.0);
      double double2 = complex9.abs();
      Complex complex19 = complex8.negate();
      Complex complex20 = complex19.INF.multiply(complex8);
      boolean boolean0 = complex12.isNaN();
      boolean boolean1 = complex17.isNaN();
      double double3 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1762.6919952529586, (-314.2557823344628));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sin();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-355.0), 2845.152950529252);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.add(complex2);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.NaN.negate();
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex1.INF.sqrt1z();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex8.I.multiply(complex4);
      double double0 = complex6.ONE.abs();
      Complex complex11 = complex6.pow(complex0);
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex12 = complex1.add(complex0);
      Complex complex13 = complex12.sin();
      Complex complex14 = complex1.tanh();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1057.02113, 1057.02113);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.INF.multiply(1057.02113);
      Complex complex5 = complex1.I.multiply(complex2);
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.INF.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex4.INF.tan();
      Complex complex10 = complex4.acos();
      Complex complex11 = Complex.I;
      Complex complex12 = complex10.ZERO.pow(complex11);
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex0.exp();
      Complex complex15 = complex14.INF.conjugate();
      Complex complex16 = complex2.conjugate();
      Complex complex17 = complex16.NaN.subtract(complex2);
      double double0 = complex1.getImaginary();
      Complex complex18 = complex5.negate();
      Complex complex19 = complex18.sin();
      Complex complex20 = complex11.sin();
      double double1 = complex20.NaN.abs();
      List<Complex> list0 = complex0.nthRoot(99);
      Complex complex21 = complex1.sin();
      Complex complex22 = complex19.tanh();
      Object object1 = complex14.readResolve();
      double double2 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.NaN.divide(complex1);
      List<Complex> list0 = complex0.INF.nthRoot(7);
      Complex complex4 = complex0.ONE.tan();
      List<Complex> list1 = complex0.nthRoot(1150);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.ZERO.sin();
      double double0 = complex0.ZERO.getArgument();
      int int0 = complex0.hashCode();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.INF.pow(complex1);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.I.sqrt1z();
      try { 
        complex4.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-3101.708386), (-3101.708386));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex2.createComplex((-2243.46833201407), 824.404532948);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 160.50136);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.tanh();
      double double0 = complex2.getReal();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(4186.12583376923, 4186.12583376923);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.acos();
      String string0 = complex3.I.toString();
      Complex complex4 = complex3.multiply(4186.12583376923);
      Complex complex5 = complex4.ZERO.divide(complex2);
      Complex complex6 = complex4.ZERO.add(complex3);
      try { 
        complex1.nthRoot((-1901));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,901
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.008333333333329196, 0.008333333333329196);
      Complex complex1 = new Complex(3748.0, 3748.0);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2997.5920775301), 117.909860234);
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.equals(complex1);
      Complex complex2 = complex0.sqrt();
      boolean boolean2 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = new Complex((-781.9797263), 615.2504147);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.cosh();
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex6.NaN.atan();
      double double0 = complex5.getArgument();
      Complex complex8 = complex0.ONE.negate();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex1.tanh();
      String string0 = complex2.toString();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex3.INF.cosh();
      double double0 = complex0.getReal();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex1.add(complex5);
      Complex complex9 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1930.51090186818), 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.INF.log();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex5.ONE.multiply(0.0);
      Complex complex8 = complex5.NaN.subtract(complex4);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex6.ONE.subtract(complex9);
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex6.acos();
      Complex complex13 = complex6.divide(complex12);
      Complex complex14 = complex13.add(complex4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      ComplexField complexField0 = complex1.INF.getField();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex4.NaN.add(complex0);
      boolean boolean0 = complex0.equals(complex3);
      double double0 = complex1.abs();
      double double1 = complex4.getImaginary();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.asin();
      int int1 = complex2.hashCode();
      Complex complex8 = complex3.I.cosh();
      Complex complex9 = complex4.add(complex6);
      double double2 = complex3.getArgument();
      Complex complex10 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.I.log();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex0.subtract(complex3);
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex2.multiply(complex6);
      Complex complex10 = complex5.asin();
      Complex complex11 = complex4.asin();
      Complex complex12 = complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3807.316522688178));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.ONE.sinh();
      String string0 = complex1.NaN.toString();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.createComplex(144.18, 144.18);
      Complex complex3 = complex2.multiply(complex0);
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.ZERO.conjugate();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex1.pow(complex0);
      boolean boolean0 = complex0.equals("");
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(3171.31187731, 3171.31187731);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.createComplex(3171.31187731, 0.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex2.multiply(Double.NaN);
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex11.log();
      Complex complex13 = complex4.multiply(complex9);
      Complex complex14 = complex0.INF.multiply(complex1);
      Complex complex15 = complex7.pow(complex9);
      boolean boolean0 = complex7.equals(complex4);
      Complex complex16 = complex1.I.log();
      Complex complex17 = complex14.I.sqrt1z();
      try { 
        complex0.nthRoot((-1436));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,436
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.createComplex(1.1430250008909141E-8, 5.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.sin();
      double double0 = complex1.getImaginary();
      Complex complex4 = complex3.multiply(5.0);
      Complex complex5 = complex2.multiply(complex3);
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.I.negate();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.ZERO.sqrt();
      Complex complex6 = complex0.NaN.sin();
      double double0 = complex6.abs();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.INF.sqrt();
      double double1 = complex7.getArgument();
      Complex complex10 = complex1.log();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex11.sqrt();
      double double2 = complex12.INF.getArgument();
      Complex complex13 = complex4.I.negate();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex4.ONE.divide(complex14);
      Complex complex16 = complex10.I.exp();
      Complex complex17 = complex11.NaN.createComplex((-1371.0257686088), 6.283185307179586);
      boolean boolean0 = complex4.isNaN();
      Complex complex18 = complex10.ZERO.sin();
      Complex complex19 = complex4.pow(complex12);
      Complex complex20 = complex1.exp();
      Complex complex21 = complex10.sqrt();
      Complex complex22 = complex4.sin();
      Complex complex23 = complex20.exp();
      Complex complex24 = complex23.INF.add(complex13);
      Complex complex25 = complex16.sqrt1z();
      Complex complex26 = complex20.cos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      int int0 = complex0.ONE.hashCode();
      int int1 = complex0.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.multiply(2725.55920742385);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      try { 
        complex2.nthRoot((-1413));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,413
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.I.sin();
      try { 
        complex0.nthRoot((-1828));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,828
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.ONE.nthRoot(287);
      Complex complex1 = complex0.negate();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      double double0 = complex2.getReal();
      Complex complex3 = complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.createComplex(1, 1);
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.356194490192345, 2.356194490192345);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.INF.subtract(complex3);
      try { 
        complex1.nthRoot((-853));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -853
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex3.I.conjugate();
      List<Complex> list0 = complex4.NaN.nthRoot(1);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex1.ONE.negate();
      Complex complex8 = complex0.acos();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.NaN.multiply(complex9);
      Complex complex11 = complex1.multiply(Double.NaN);
      int int0 = complex11.ONE.hashCode();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex0.atan();
      Complex complex14 = complex1.cos();
      Complex complex15 = complex10.log();
      double double0 = complex14.abs();
      Complex complex16 = complex15.sin();
      Complex complex17 = complex0.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.NaN.negate();
      double double0 = complex2.getReal();
      Complex complex5 = complex3.cos();
      List<Complex> list0 = complex5.nthRoot(1424);
      Complex complex6 = complex2.asin();
      boolean boolean1 = complex0.equals((Object) null);
      Complex complex7 = complex5.sqrt1z();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-2800.38769));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      String string0 = complex0.NaN.toString();
      double double0 = complex0.getReal();
      double double1 = complex0.abs();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.I.sqrt();
      try { 
        complex3.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.ZERO.tanh();
      Complex complex8 = complex7.INF.cos();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex3.add(complex7);
      String string0 = complex2.I.toString();
      ComplexField complexField1 = complex9.INF.getField();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex11.tanh();
      double double0 = complex9.ONE.getArgument();
      double double1 = complex3.abs();
      Complex complex13 = complex2.NaN.negate();
      Complex complex14 = complex5.tanh();
      Complex complex15 = complex13.INF.exp();
      boolean boolean0 = complex2.equals(complex1);
      double double2 = complex0.NaN.getArgument();
      Object object0 = complex9.readResolve();
      Complex complex16 = complex2.multiply(0.0);
      Complex complex17 = complex4.acos();
      Complex complex18 = complex13.asin();
      boolean boolean1 = complex6.equals(complex16);
      Complex complex19 = complex15.sqrt();
      boolean boolean2 = complex5.equals(complex13);
      Complex complex20 = complex0.conjugate();
      List<Complex> list0 = complex16.nthRoot(37);
      List<Complex> list1 = complex2.nthRoot(1658);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.NaN.nthRoot(277);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.INF.conjugate();
      Object object0 = complex2.ONE.readResolve();
      Complex complex6 = complex1.ZERO.pow(complex0);
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex7 = complex0.asin();
      Complex complex8 = new Complex(277, 277);
      Complex complex9 = complex0.add(complex8);
      double double0 = complex9.abs();
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex6.cos();
      int int0 = complex10.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex13.createComplex(0.0, (-1392.05));
      Complex complex15 = complex1.multiply(complex13);
      Complex complex16 = complex10.tanh();
      Complex complex17 = complex4.atan();
      Complex complex18 = complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(complex1);
      double double0 = complex2.abs();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex2.sinh();
      double double1 = complex5.NaN.getArgument();
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.ZERO.cosh();
      Complex complex12 = complex5.multiply(complex6);
      Complex complex13 = complex1.divide(complex4);
      Complex complex14 = complex0.sqrt();
      ComplexField complexField0 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.exp();
      double double0 = complex0.I.abs();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.subtract(complex0);
      String string1 = complex1.toString();
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.NaN.tan();
      int int0 = complex6.ONE.hashCode();
      int int1 = complex1.I.hashCode();
      double double1 = complex3.getImaginary();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex1.multiply(complex6);
      Complex complex9 = complex6.cos();
      Complex complex10 = complex6.sin();
      Complex complex11 = complex6.sqrt1z();
      double double2 = complex1.abs();
      Complex complex12 = complex0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1961.6054069853599), (-1961.6054069853599));
      double double0 = complex0.abs();
      String string0 = complex0.toString();
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.NaN.sin();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex1.ZERO.cos();
      Complex complex7 = complex6.NaN.multiply(complex3);
      int int0 = (-3530);
      try { 
        complex4.I.nthRoot((-3530));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,530
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ONE.createComplex((-937.32854237153), 0.0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.INF.divide(complex3);
      Complex complex5 = complex2.NaN.cos();
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex6.INF.divide(complex3);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex6.log();
      Complex complex12 = complex0.INF.add(complex2);
      Complex complex13 = complex6.cos();
      String string0 = complex13.toString();
      Complex complex14 = complex3.log();
      Complex complex15 = complex9.tanh();
      Complex complex16 = complex10.tan();
      Complex complex17 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      double double0 = complex0.ONE.abs();
      Complex complex3 = complex1.I.divide(complex2);
      Complex complex4 = complex1.ONE.multiply(2509.7695700152885);
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex1.NaN.tan();
      Complex complex7 = complex5.I.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.asin();
      double double1 = complex6.getImaginary();
      Object object0 = complex9.readResolve();
      Complex complex10 = complex5.add(complex4);
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.ZERO.createComplex(0.0, 0.0);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex0.INF.multiply(complex1);
      int int0 = complex0.INF.hashCode();
      Object object1 = complex1.I.readResolve();
      Complex complex6 = complex1.ONE.negate();
      Complex complex7 = complex4.ONE.divide(complex1);
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex5.ZERO.sin();
      List<Complex> list0 = complex5.ONE.nthRoot(7);
      boolean boolean0 = complex1.equals("");
      Complex complex10 = complex1.INF.sqrt1z();
      Complex complex11 = complex0.createComplex(0.0, 0.0);
      Complex complex12 = complex4.negate();
      int int1 = complex5.INF.hashCode();
      Complex complex13 = complex4.cos();
      double double0 = complex0.getImaginary();
      Complex complex14 = complex1.sqrt1z();
      Complex complex15 = complex14.I.multiply(complex9);
      Complex complex16 = complex14.INF.asin();
      Complex complex17 = complex4.exp();
      double double1 = complex9.getImaginary();
      Complex complex18 = complex13.log();
      Complex complex19 = complex8.acos();
      List<Complex> list1 = complex12.nthRoot(83);
  }
}
