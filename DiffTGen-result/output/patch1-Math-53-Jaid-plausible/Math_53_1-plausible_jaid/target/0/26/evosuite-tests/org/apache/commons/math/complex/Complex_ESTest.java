/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:36:38 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = (-0.16624882440418567);
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-0.16624882440418567));
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex4.ZERO.cosh();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex2.tan();
      double double1 = complex1.getImaginary();
      List<Complex> list0 = complex1.nthRoot(7);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex0.ONE.tan();
      double double2 = complex4.NaN.getArgument();
      Complex complex10 = complex7.multiply(complex6);
      String string0 = complex0.toString();
      Complex complex11 = complex4.asin();
      double double3 = complex3.getReal();
      Complex complex12 = complex6.negate();
      Complex complex13 = complex4.atan();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex1.I.conjugate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex3.INF.pow(complex1);
      ComplexField complexField0 = complex1.ONE.getField();
      int int0 = complex3.hashCode();
      int int1 = complex5.hashCode();
      Complex complex6 = complex2.NaN.acos();
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      Complex complex8 = complex1.divide(complex2);
      String string0 = complex6.toString();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex5.acos();
      Complex complex11 = complex10.NaN.subtract(complex8);
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex12.I.multiply(0.48358254798888234);
      Complex complex14 = complex8.tan();
      Complex complex15 = complex0.tan();
      Complex complex16 = complex0.log();
      Complex complex17 = Complex.I;
      Complex complex18 = complex12.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.I.sin();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex2.multiply((-1.0));
      boolean boolean1 = complex0.isNaN();
      Complex complex7 = complex0.multiply(complex6);
      boolean boolean2 = complex4.equals("NUMBER_OF_SUCCESSES");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.ZERO.tan();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex2.ZERO.log();
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex2.INF.multiply(complex0);
      Complex complex7 = complex2.ZERO.pow(complex1);
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex1.createComplex((-3025.72601224369), (-3025.72601224369));
      Complex complex10 = complex9.NaN.log();
      List<Complex> list0 = complex9.nthRoot(1);
      double double1 = complex9.ONE.getArgument();
      Complex complex11 = complex9.NaN.divide(complex1);
      Complex complex12 = complex11.NaN.add(complex1);
      Complex complex13 = complex11.ZERO.conjugate();
      double double2 = complex1.getReal();
      Complex complex14 = complex1.multiply(0.7071067811865476);
      Complex complex15 = complex14.multiply((-1004.8444268316));
      int int1 = complex15.hashCode();
      Complex complex16 = complex15.ZERO.cosh();
      Complex complex17 = complex16.I.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex18 = complex15.sinh();
      Object object0 = complex18.INF.readResolve();
      Complex complex19 = complex0.pow(complex14);
      Complex complex20 = complex2.sin();
      Complex complex21 = complex14.sqrt();
      String string0 = complex20.toString();
      Complex complex22 = complex6.cosh();
      Complex complex23 = complex3.tanh();
      Complex complex24 = complex9.cosh();
      Complex complex25 = complex20.sinh();
      Complex complex26 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex0.ZERO.subtract(complex3);
      Complex complex6 = complex1.ZERO.subtract(complex0);
      Complex complex7 = complex2.INF.acos();
      Complex complex8 = complex2.ONE.tanh();
      int int0 = complex7.ZERO.hashCode();
      double double0 = complex1.ZERO.abs();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex1.abs();
      int int1 = complex0.hashCode();
      List<Complex> list0 = complex3.nthRoot(7);
      double double2 = complex1.abs();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex7.I.sinh();
      Complex complex11 = complex9.ZERO.atan();
      Complex complex12 = complex8.NaN.multiply(0.0);
      Complex complex13 = complex8.createComplex(Double.NaN, Double.NaN);
      Complex complex14 = complex8.sin();
      Complex complex15 = complex4.pow(complex7);
      Complex complex16 = complex7.ONE.multiply(0.0);
      Complex complex17 = complex2.sqrt();
      Object object0 = complex17.ZERO.readResolve();
      boolean boolean1 = complex15.isNaN();
      Complex complex18 = complex7.createComplex(0.0, 0.0);
      Complex complex19 = complex18.I.atan();
      double double3 = complex2.getImaginary();
      Complex complex20 = complex9.log();
      double double4 = complex2.I.getArgument();
      Complex complex21 = complex8.sqrt1z();
      Complex complex22 = complex13.negate();
      boolean boolean2 = complex7.isNaN();
      double double5 = complex21.getImaginary();
      Complex complex23 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(complex1);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex1.ZERO.cos();
      Object object0 = complex6.NaN.readResolve();
      ComplexField complexField1 = complex1.ONE.getField();
      Complex complex9 = complex0.add(complex2);
      Complex complex10 = complex9.NaN.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex11 = complex6.log();
      Complex complex12 = complex11.ONE.asin();
      Complex complex13 = complex12.NaN.tan();
      Complex complex14 = complex5.log();
      Complex complex15 = complex14.INF.createComplex(1381.39918757, 1381.39918757);
      Complex complex16 = complex6.multiply(complex14);
      int int1 = complex15.INF.hashCode();
      Complex complex17 = complex16.ONE.conjugate();
      Object object1 = complex17.INF.readResolve();
      Complex complex18 = complex7.exp();
      Complex complex19 = complex15.sqrt1z();
      Complex complex20 = complex15.sqrt();
      Complex complex21 = complex6.ONE.pow(complex11);
      Complex complex22 = complex20.I.tan();
      Complex complex23 = Complex.I;
      Complex complex24 = complex16.add(complex23);
      Complex complex25 = complex19.createComplex(1381.39918757, 6.283185307179586);
      Complex complex26 = complex19.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-5037.769643143298), (-1555.563952));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.NaN.subtract(complex1);
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex1.ONE.createComplex((-5037.769643143298), 1645.4933659706232);
      Complex complex5 = complex4.NaN.subtract(complex1);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex4.I.cos();
      ComplexField complexField0 = complex6.I.getField();
      Complex complex8 = complex6.ONE.log();
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex8.ONE.cosh();
      Complex complex11 = complex0.exp();
      Object object0 = complex11.ONE.readResolve();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex13.INF.tan();
      ComplexField complexField1 = complex5.getField();
      Complex complex15 = complex9.negate();
      Complex complex16 = complex11.cosh();
      Complex complex17 = complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-2449.097773));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.cos();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sqrt1z();
      String string0 = complex0.toString();
      Complex complex4 = complex1.ONE.cosh();
      Object object1 = complex3.readResolve();
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex0.pow(complex3);
      boolean boolean0 = complex3.equals(object1);
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.acos();
      Object object0 = complex2.ONE.readResolve();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.add(complex2);
      Complex complex7 = complex0.multiply(227.4752113841);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex3.ZERO.multiply(complex2);
      Complex complex7 = complex6.ONE.createComplex(Double.NaN, 0.0);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex7.divide(complex8);
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex12.ZERO.tan();
      Complex complex14 = complex3.ZERO.asin();
      double double1 = complex3.getArgument();
      Complex complex15 = complex6.sin();
      Complex complex16 = complex2.exp();
      Complex complex17 = new Complex(1.5707963267948966, Double.NaN);
      boolean boolean0 = complex1.equals(complex17);
      Complex complex18 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(4107.957, 4107.957);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex1.ONE.conjugate();
      double double0 = complex0.getReal();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.ZERO.subtract(complex6);
      Complex complex9 = complex0.createComplex(4107.957, 4107.957);
      Complex complex10 = complex9.NaN.createComplex(4107.957, 1.633123935319537E16);
      Complex complex11 = complex5.cos();
      Complex complex12 = complex9.exp();
      double double1 = complex6.NaN.getArgument();
      Complex complex13 = complex0.tanh();
      int int0 = complex13.hashCode();
      Complex complex14 = complex6.cosh();
      Complex complex15 = complex14.ZERO.log();
      Complex complex16 = complex14.subtract(complex0);
      double double2 = complex10.getReal();
      Complex complex17 = complex7.asin();
      Complex complex18 = complex6.acos();
      List<Complex> list0 = complex18.NaN.nthRoot(1589);
      Complex complex19 = complex8.cos();
      Complex complex20 = complex8.conjugate();
      int int1 = complex6.hashCode();
      Complex complex21 = complex1.exp();
      int int2 = complex21.hashCode();
      Complex complex22 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.createComplex(0.0, (-1.0));
      Complex complex5 = complex4.sinh();
      double double0 = complex5.ONE.getArgument();
      Complex complex6 = complex5.NaN.createComplex(0.0, 41.965573955349);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex3.INF.tan();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex3.subtract(complex0);
      double double1 = complex8.getArgument();
      int int0 = complex6.hashCode();
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex11.I.conjugate();
      Complex complex13 = complex12.ONE.multiply(0.0);
      Complex complex14 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-7.800414592973399E-9), (-7.800414592973399E-9));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex2.INF.tan();
      Complex complex7 = complex0.createComplex((-7.800414592973399E-9), 3774.47);
      String string0 = complex7.toString();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      boolean boolean1 = complex2.isInfinite();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.cosh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.NaN.createComplex(0.0, 1.0);
      String string0 = complex1.toString();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.I.cos();
      ComplexField complexField0 = complex3.getField();
      List<Complex> list0 = complex1.nthRoot(2081);
      Complex complex5 = complex1.NaN.add(complex0);
      double double0 = complex5.NaN.abs();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex3.getReal();
      Complex complex6 = complex0.createComplex(2081, 0.5143952585235492);
      int int0 = complex6.ZERO.hashCode();
      ComplexField complexField1 = complex1.NaN.getField();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex4.sin();
      Complex complex11 = complex7.subtract(complex3);
      double double2 = complex11.ZERO.abs();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex1.asin();
      Complex complex14 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1253.35115037), (-1253.35115037));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.NaN.cos();
      double double0 = complex2.getArgument();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.sinh();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-3735.54762), (-3735.54762));
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex0.atan();
      Object object0 = complex1.NaN.readResolve();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex1.divide(complex5);
      Complex complex8 = complex7.pow(complex5);
      double double0 = complex4.ZERO.abs();
      try { 
        complex8.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(367.5688868323151, 367.5688868323151);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.subtract(complex0);
      ComplexField complexField0 = complex1.ONE.getField();
      boolean boolean0 = complex0.isNaN();
      int int0 = complex0.NaN.hashCode();
      String string0 = complex0.INF.toString();
      double double0 = complex0.abs();
      String string1 = complex0.toString();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.INF.sqrt();
      List<Complex> list0 = complex4.NaN.nthRoot(738);
      Complex complex5 = complex0.multiply(complex3);
      double double0 = complex0.abs();
      Complex complex6 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.I.add(complex1);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex1.sinh();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex1.sqrt1z();
      String string0 = complex0.toString();
      Complex complex6 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex0.acos();
      double double0 = complex3.getArgument();
      double double1 = complex6.getImaginary();
      Complex complex7 = complex2.createComplex(-0.0, Double.NaN);
      Complex complex8 = complex6.add(complex0);
      Complex complex9 = complex8.NaN.multiply(complex0);
      String string0 = complex1.toString();
      Complex complex10 = complex3.asin();
      String string1 = complex4.toString();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex5.ONE.pow(complex1);
      List<Complex> list0 = complex0.INF.nthRoot(37);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex0.ZERO.tanh();
      Complex complex9 = complex0.divide(complex1);
      double double0 = complex9.INF.abs();
      int int0 = complex7.hashCode();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex0.log();
      double double1 = complex1.abs();
      Complex complex12 = complex9.ONE.conjugate();
      double double2 = complex12.NaN.getArgument();
      Complex complex13 = complex11.ONE.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex14 = complex1.subtract(complex7);
      Complex complex15 = complex9.asin();
      Complex complex16 = complex15.ONE.divide(complex11);
      double double3 = complex0.getReal();
      Complex complex17 = complex2.atan();
      double double4 = complex9.getImaginary();
      Complex complex18 = complex3.exp();
      int int1 = complex17.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(2444);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.NaN.conjugate();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.INF.divide(complex3);
      String string0 = complex4.toString();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex1.multiply((double) 2444);
      ComplexField complexField1 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-4.503599627370496E15), (-4.503599627370496E15));
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.ZERO.atan();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.createComplex((-2925.835189452207), 0.0);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.INF.conjugate();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex3.tan();
      double double1 = complex5.ONE.getArgument();
      Complex complex9 = complex8.INF.multiply(complex4);
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex7.equals(object0);
      Complex complex10 = complex5.multiply(complex2);
      try { 
        complex1.nthRoot((-49));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -49
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex2.I.pow(complex0);
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex0.ONE.subtract(complex4);
      Complex complex8 = complex1.INF.acos();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex1.log();
      Complex complex11 = complex10.cosh();
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 4313.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.ONE.pow(complex0);
      Complex complex7 = complex0.ZERO.sinh();
      List<Complex> list0 = complex2.nthRoot(233);
      Object object0 = complex1.readResolve();
      Complex complex8 = complex2.log();
      Object object1 = new Object();
      boolean boolean0 = complex1.equals(object1);
      boolean boolean1 = complex8.isNaN();
      Complex complex9 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex2.INF.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.NaN.exp();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = null;
      // Undeclared exception!
      try { 
        complex1.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.I.exp();
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.I.acos();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex1.INF.sqrt();
      List<Complex> list0 = complex0.I.nthRoot(521);
      Complex complex8 = complex0.ONE.sqrt();
      Complex complex9 = complex2.INF.cos();
      Object object0 = complex8.ONE.readResolve();
      List<Complex> list1 = complex1.nthRoot(2476);
      Complex complex10 = complex7.tan();
      Complex complex11 = complex10.ZERO.pow(complex8);
      Complex complex12 = complex11.I.add(complex7);
      Complex complex13 = complex0.divide(complex3);
      String string0 = complex10.toString();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex6.sqrt();
      int int0 = complex15.ZERO.hashCode();
      Complex complex16 = complex3.createComplex(Double.NaN, 521);
      Complex complex17 = complex1.divide(complex5);
      Complex complex18 = complex9.conjugate();
      Complex complex19 = complex6.multiply(Double.NaN);
      Complex complex20 = complex6.sqrt1z();
      double double1 = complex15.getReal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.atan();
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.createComplex(0.0, (-1.0E-6));
      Object object0 = complex3.readResolve();
      Object object1 = complex3.readResolve();
      Complex complex4 = complex3.sin();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1729.74309117778, (-3516.3049));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.ZERO.multiply(3260.93988);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.ONE.divide(complex4);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.tanh();
      double double0 = complex5.NaN.getArgument();
      Complex complex8 = complex0.asin();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex9 = complex5.acos();
      Complex complex10 = complex6.multiply(3260.93988);
      Complex complex11 = complex9.log();
      Complex complex12 = complex4.divide(complex0);
      int int0 = complex12.ONE.hashCode();
      Complex complex13 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-208.974773), (-208.974773));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.NaN.asin();
      double double0 = complex4.I.abs();
      Complex complex5 = complex4.ZERO.sin();
      double double1 = complex0.getReal();
      double double2 = complex5.getImaginary();
      Complex complex6 = complex0.exp();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex2.ONE.pow(complex0);
      Complex complex5 = new Complex(1.0, 1938.669233);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex5.ONE.createComplex(3294198.0, 0.0);
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex1.add(complex5);
      Complex complex10 = complex7.NaN.negate();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex7.createComplex(0.0, 1938.669233);
      double double1 = complex4.abs();
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex1.createComplex(1938.669233, 1.0);
      try { 
        complex14.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.ZERO.cosh();
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.NaN.sqrt();
      List<Complex> list0 = complex4.INF.nthRoot(1293);
      String string0 = complex0.toString();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.cos();
      double double2 = complex0.getReal();
      boolean boolean0 = complex3.equals(complex6);
      double double3 = complex3.getImaginary();
      Complex complex7 = complex3.cos();
      boolean boolean1 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      List<Complex> list0 = complex0.ZERO.nthRoot(242);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex1.abs();
      double double1 = complex0.getReal();
      List<Complex> list1 = complex0.nthRoot(242);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.INF.negate();
      boolean boolean0 = complex0.equals(complex2);
      String string1 = complex0.toString();
      Complex complex6 = complex3.cosh();
      double double2 = complex0.getImaginary();
      Complex complex7 = complex0.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
      Object object0 = complex7.ZERO.readResolve();
      Object object1 = complex1.readResolve();
      String string2 = complex1.toString();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.INF.sqrt();
      double double3 = complex9.getArgument();
      List<Complex> list2 = complex1.nthRoot(242);
      Complex complex11 = complex6.atan();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex7.add(complex10);
      Object object2 = complex13.I.readResolve();
      Complex complex14 = complex5.conjugate();
      Complex complex15 = complex14.NaN.pow(complex7);
      Complex complex16 = complex2.pow(complex14);
      double double4 = complex4.getArgument();
      Complex complex17 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.sinh();
      double double0 = complex3.getArgument();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.ONE.asin();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex2.createComplex((-2664.7826549844062), 3851.6);
      boolean boolean0 = complex0.isNaN();
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1232.3);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.divide(complex0);
      ComplexField complexField0 = complex2.INF.getField();
      String string0 = complex0.toString();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      List<Complex> list0 = complex0.NaN.nthRoot(183);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex3.multiply(complex5);
      Complex complex8 = complex5.subtract(complex0);
      Complex complex9 = complex8.I.atan();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex5.negate();
      Complex complex12 = complex10.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.exp();
      double double1 = complex1.getArgument();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex3.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex6.sin();
      Complex complex11 = complex6.NaN.tanh();
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex1.tan();
      Object object0 = complex12.readResolve();
      boolean boolean0 = complex13.equals(object0);
      Complex complex14 = complex0.atan();
      Complex complex15 = complex7.divide(complex10);
      Complex complex16 = complex10.cos();
      Complex complex17 = complex7.sinh();
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex1.add(complex18);
      Complex complex20 = complex9.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.ONE.createComplex((-0.2499999701976776), 6.283185307179586);
      try { 
        complex1.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-2198.7), (-2198.7));
      Complex complex1 = complex0.ZERO.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = Complex.ZERO;
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex2.subtract(complex0);
      boolean boolean0 = complex8.equals(complex7);
      ComplexField complexField1 = complex4.getField();
      Complex complex9 = complex0.ZERO.pow(complex4);
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex6.conjugate();
      List<Complex> list0 = complex8.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      List<Complex> list0 = complex0.I.nthRoot(819);
      Complex complex2 = complex0.createComplex((-951.09222056), (-951.09222056));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2835.7), (-2835.7));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.acos();
      double double0 = complex5.abs();
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      double double0 = complex1.getReal();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(1);
      int int0 = complex3.NaN.hashCode();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex1.ZERO.add(complex3);
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.I.sqrt();
      Complex complex7 = complex4.I.tanh();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex1.ONE.subtract(complex0);
      Complex complex10 = complex9.INF.cos();
      int int1 = complex2.ONE.hashCode();
      Complex complex11 = complex2.createComplex(1217.4360531818602, 1442.44122);
      Complex complex12 = complex11.INF.acos();
      Complex complex13 = complex12.I.log();
      boolean boolean0 = complex11.isNaN();
      Complex complex14 = complex2.tanh();
      Complex complex15 = complex14.ZERO.sin();
      Complex complex16 = complex1.conjugate();
      Object object1 = complex16.readResolve();
      Complex complex17 = complex16.log();
      Complex complex18 = complex17.INF.sqrt1z();
      try { 
        complex11.nthRoot((-344));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -344
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.INF.add(complex0);
      Complex complex4 = complex3.ZERO.multiply(432.4652367368603);
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.sqrt();
      String string0 = complex6.I.toString();
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex1.INF.sqrt();
      double double0 = complex7.abs();
      Complex complex9 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-3217.94), (-3217.94));
      Complex complex1 = new Complex((-1045.779020789), 0.0);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex4.ONE.multiply((-2594.0));
      ComplexField complexField0 = complex0.ZERO.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.createComplex(57.2957763671875, 0.0);
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.multiply((-1733.0));
      Complex complex6 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2675.595514574088, 2675.595514574088);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
      List<Complex> list0 = complex1.nthRoot(1803);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.createComplex(1.1430250008909141E-8, (-0.9060367009005804));
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex2.ONE.multiply(complex0);
      Complex complex6 = complex1.acos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex1.ZERO.add(complex7);
      Complex complex9 = complex1.ONE.multiply((-624.8085900789));
      Complex complex10 = complex3.I.negate();
      Complex complex11 = complex5.pow(complex2);
      Complex complex12 = complex3.log();
      Complex complex13 = complex11.ONE.asin();
      Complex complex14 = complex13.I.cosh();
      Complex complex15 = complex13.sqrt1z();
      boolean boolean0 = complex1.equals(complex5);
      Complex complex16 = complex0.acos();
      Complex complex17 = complex10.INF.negate();
      boolean boolean1 = complex1.equals(complex5);
      String string0 = complex5.INF.toString();
      Complex complex18 = complex3.multiply(complex5);
      Complex complex19 = complex3.createComplex((-0.9060367009005804), 1343.40725657764);
      Complex complex20 = complex19.cos();
      Complex complex21 = complex1.INF.negate();
      String string1 = complex3.toString();
      boolean boolean2 = complex11.equals(complex4);
      Object object0 = new Object();
      boolean boolean3 = complex2.equals(object0);
      ComplexField complexField0 = complex16.getField();
      String string2 = complex11.NaN.toString();
      boolean boolean4 = complex6.equals((Object) null);
      Complex complex22 = complex15.sin();
      Complex complex23 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex2.divide(complex1);
      Complex complex8 = complex1.ZERO.subtract(complex5);
      Complex complex9 = complex8.INF.sqrt();
      String string0 = complex9.NaN.toString();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex14.sqrt();
      double double0 = complex0.abs();
      Complex complex16 = complex1.log();
      Complex complex17 = complex7.acos();
      Complex complex18 = complex11.divide(complex14);
      double double1 = complex18.I.abs();
      Complex complex19 = complex2.I.multiply(1.0);
      Complex complex20 = complex7.atan();
      Complex complex21 = complex5.exp();
      Complex complex22 = complex21.I.conjugate();
      double double2 = complex6.abs();
      Complex complex23 = complex22.add(complex11);
      Complex complex24 = complex7.sqrt();
      Complex complex25 = complex18.multiply(93.1267814263847);
      Complex complex26 = complex6.multiply((-6.1324169483));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.INF.multiply(3.0);
      Complex complex8 = complex0.ZERO.negate();
      Complex complex9 = complex1.subtract(complex5);
      Complex complex10 = complex6.log();
      Complex complex11 = complex10.ZERO.acos();
      Complex complex12 = complex11.NaN.subtract(complex4);
      double double0 = complex11.I.abs();
      Complex complex13 = complex10.I.sin();
      boolean boolean0 = complex9.isNaN();
      Complex complex14 = complex10.divide(complex0);
      Complex complex15 = complex3.cos();
      Complex complex16 = complex9.sin();
      int int0 = complex7.hashCode();
      boolean boolean1 = complex5.equals(".KJBLvp)Ol");
      Complex complex17 = complex8.ONE.negate();
      Complex complex18 = complex7.log();
      Complex complex19 = complex2.sqrt1z();
      Complex complex20 = complex6.subtract(complex8);
      Complex complex21 = complex13.sqrt1z();
      Complex complex22 = complex21.ONE.asin();
      Complex complex23 = complex6.atan();
      Complex complex24 = complex5.negate();
      ComplexField complexField2 = complex11.getField();
      double double1 = complex14.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.INF.divide(complex3);
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex4.ZERO.subtract(complex3);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex1.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex9 = complex1.tan();
      List<Complex> list0 = complex8.nthRoot(3036);
      Object object0 = complex7.readResolve();
      int int1 = complex8.NaN.hashCode();
      Complex complex10 = complex9.multiply((double) 3036);
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex0.INF.cosh();
      ComplexField complexField0 = complex1.getField();
      double double0 = complex1.abs();
      Complex complex13 = complex9.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex14 = complex13.negate();
      double double1 = complex8.getImaginary();
      Complex complex15 = complex0.ONE.createComplex(0.0, 1.0);
      Complex complex16 = complex3.log();
      double double2 = complex6.getArgument();
      boolean boolean0 = complex3.isNaN();
      Object object1 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.ONE.sqrt1z();
      List<Complex> list0 = complex0.NaN.nthRoot(2688);
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.acos();
      List<Complex> list1 = complex4.nthRoot(2688);
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.NaN.pow(complex6);
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex5.ZERO.cos();
      double double0 = complex0.NaN.abs();
      Object object1 = complex0.readResolve();
      Complex complex10 = complex4.INF.tanh();
      boolean boolean0 = complex0.equals(object1);
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = complex11.multiply(complex4);
      Complex complex14 = complex5.ZERO.cos();
      double double1 = complex4.getImaginary();
      Complex complex15 = complex12.tanh();
      Complex complex16 = complex15.INF.sinh();
      Complex complex17 = complex5.atan();
      Object object2 = complex17.readResolve();
      Complex complex18 = complex6.multiply((-3477.570878942));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.NaN.nthRoot(2377);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.I.createComplex(2377, 2377);
      boolean boolean0 = complex3.equals(complex1);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex2.add(complex6);
      Complex complex9 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-549);
      try { 
        complex0.ZERO.nthRoot((-549));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -549
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex4.I.multiply(complex2);
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex0.NaN.sqrt();
      List<Complex> list0 = complex0.nthRoot(1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex1.createComplex(1, 1);
      List<Complex> list1 = complex10.INF.nthRoot(1);
      Complex complex11 = complex3.multiply(771.7570542861);
      Complex complex12 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex2.ONE.multiply(complex0);
      Complex complex6 = complex5.ZERO.multiply(complex3);
      Complex complex7 = complex3.INF.tan();
      Complex complex8 = complex1.NaN.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex9.ZERO.exp();
      Complex complex12 = complex5.ZERO.sin();
      double double0 = complex9.NaN.getArgument();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex0.isInfinite();
      double double1 = complex5.getArgument();
      double double2 = complex5.getArgument();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex9.NaN.negate();
      Complex complex15 = complex13.ZERO.tan();
      Complex complex16 = complex15.I.cosh();
      Complex complex17 = complex4.pow(complex2);
      Complex complex18 = complex17.tanh();
      double double3 = complex2.abs();
      Complex complex19 = complex7.cosh();
      Complex complex20 = complex0.ZERO.exp();
      Complex complex21 = complex19.negate();
      Complex complex22 = complex10.atan();
      Complex complex23 = complex1.multiply(complex11);
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
