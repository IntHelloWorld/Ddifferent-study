/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:32:55 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.NaN.multiply(complex2);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex0.NaN.atan();
      Complex complex8 = complex3.NaN.exp();
      Complex complex9 = complex8.INF.multiply((-6.032174644509064E-23));
      Complex complex10 = complex0.INF.tanh();
      Object object0 = complex1.readResolve();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex11.INF.tanh();
      Complex complex14 = complex4.INF.add(complex0);
      Complex complex15 = complex11.NaN.divide(complex12);
      Complex complex16 = complex15.ZERO.add(complex4);
      Complex complex17 = complex11.add(complex2);
      Complex complex18 = complex11.log();
      Complex complex19 = complex18.NaN.acos();
      Complex complex20 = complex3.multiply(complex10);
      Complex complex21 = complex17.sin();
      Complex complex22 = complex2.INF.sqrt();
      Complex complex23 = complex21.sqrt1z();
      Complex complex24 = complex23.ONE.negate();
      double double1 = complex11.getImaginary();
      Complex complex25 = complex10.pow(complex21);
      Complex complex26 = complex12.negate();
      int int0 = complex17.hashCode();
      ComplexField complexField0 = complex17.getField();
      boolean boolean0 = complex23.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-24.2143), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex0.ZERO.add(complex3);
      Complex complex5 = complex1.ZERO.subtract(complex3);
      Complex complex6 = complex5.multiply(0.0);
      Complex complex7 = complex0.I.tanh();
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.acos();
      double double0 = complex8.getImaginary();
      boolean boolean0 = complex8.equals(")");
      boolean boolean1 = complex8.equals(complex3);
      Complex complex9 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = Complex.I;
      Complex complex6 = null;
      Complex complex7 = complex0.NaN.tanh();
      // Undeclared exception!
      try { 
        complex1.INF.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.pow(complex1);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.NaN.tan();
      Complex complex11 = complex0.ONE.cos();
      Complex complex12 = complex10.I.tanh();
      Complex complex13 = complex0.ZERO.sinh();
      Complex complex14 = complex6.ZERO.tan();
      Complex complex15 = complex10.I.sqrt();
      int int0 = complex15.I.hashCode();
      Complex complex16 = complex6.multiply(complex2);
      Complex complex17 = complex16.ZERO.atan();
      Complex complex18 = complex1.tanh();
      double double0 = complex18.ZERO.abs();
      int int1 = complex18.INF.hashCode();
      Complex complex19 = complex18.cos();
      Complex complex20 = complex8.pow(complex2);
      List<Complex> list0 = complex10.nthRoot(839);
      Complex complex21 = Complex.INF;
      boolean boolean1 = complex4.equals(complex21);
      Complex complex22 = complex14.divide(complex2);
      Complex complex23 = complex13.tanh();
      Complex complex24 = complex7.atan();
      Complex complex25 = new Complex(0.0, 2908.292);
      Complex complex26 = complex17.multiply(complex25);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.INF.acos();
      double double0 = complex5.abs();
      Complex complex6 = complex3.NaN.pow(complex1);
      Complex complex7 = complex3.I.asin();
      Complex complex8 = complex7.pow(complex1);
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex1.getArgument();
      boolean boolean1 = complex2.isNaN();
      Complex complex9 = complex0.acos();
      Complex complex10 = new Complex(0.0, 0.0);
      Object object0 = complex10.readResolve();
      boolean boolean2 = complex0.equals(object0);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex6.divide(complex11);
      Complex complex13 = complex12.INF.sin();
      Complex complex14 = complex2.cosh();
      Complex complex15 = complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex2.I.tan();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex5.INF.sqrt1z();
      Complex complex8 = complex1.INF.asin();
      Complex complex9 = complex2.subtract(complex8);
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex3.ZERO.tan();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex12 = complex10.sin();
      Complex complex13 = complex12.ZERO.divide(complex7);
      int int0 = complex13.I.hashCode();
      Complex complex14 = complex12.I.negate();
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex2.NaN.pow(complex0);
      Complex complex17 = complex16.NaN.negate();
      Complex complex18 = complex1.I.divide(complex4);
      Complex complex19 = complex5.asin();
      ComplexField complexField1 = complex19.NaN.getField();
      Complex complex20 = complex0.conjugate();
      Complex complex21 = complex9.sinh();
      Object object0 = complex18.readResolve();
      Complex complex22 = complex13.atan();
      Object object1 = complex20.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-3442.5521706), (-39.949287147));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex6.I.acos();
      Complex complex8 = complex5.I.sin();
      Complex complex9 = complex0.sqrt();
      Object object0 = complex1.readResolve();
      Complex complex10 = complex0.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex1.NaN.add(complex9);
      Complex complex12 = complex11.NaN.sinh();
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex4.multiply((-3442.5521706));
      Complex complex15 = complex2.atan();
      Complex complex16 = complex2.sqrt();
      double double0 = complex4.getArgument();
      Complex complex17 = complex9.negate();
      int int1 = complex17.NaN.hashCode();
      boolean boolean1 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex((-272.8291765948), (-272.8291765948));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.ZERO.sin();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = complex1.INF.pow(complex2);
      Complex complex7 = complex0.multiply(6.283185307179586);
      Complex complex8 = complex0.subtract(complex7);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex2.ONE.add(complex9);
      Complex complex11 = complex10.acos();
      double double0 = complex11.INF.getArgument();
      String string1 = complex7.toString();
      Complex complex12 = complex6.I.multiply((-272.8291765948));
      Complex complex13 = complex1.exp();
      ComplexField complexField0 = complex1.ZERO.getField();
      double double1 = complex8.getReal();
      double double2 = complex6.getReal();
      Complex complex14 = complex2.tanh();
      Complex complex15 = complex5.NaN.atan();
      Complex complex16 = complex14.NaN.sinh();
      List<Complex> list0 = complex0.nthRoot(742);
      double double3 = complex8.getReal();
      Complex complex17 = complex0.log();
      Complex complex18 = complex5.exp();
      ComplexField complexField1 = complex1.getField();
      Complex complex19 = complex10.sqrt();
      Complex complex20 = complex1.tan();
      double double4 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(157.428352522108, 4320.5703);
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex2.divide(complex4);
      Complex complex7 = complex0.NaN.subtract(complex1);
      double double0 = complex1.getArgument();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.I.add(complex2);
      Complex complex11 = complex7.sin();
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex9.tanh();
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex14.NaN.sin();
      Complex complex16 = complex5.pow(complex9);
      Complex complex17 = complex10.sqrt();
      boolean boolean0 = complex5.isNaN();
      Complex complex18 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-699.39), (-2922.601));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.ZERO.multiply(complex3);
      Complex complex7 = complex1.NaN.subtract(complex0);
      Object object0 = complex2.ONE.readResolve();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex5.INF.multiply((-699.39));
      Complex complex10 = complex8.acos();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex1.asin();
      Complex complex14 = complex13.ONE.atan();
      double double0 = complex13.ONE.getArgument();
      Object object1 = complex12.NaN.readResolve();
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex12.I.exp();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex17 = complex5.pow(complex12);
      Complex complex18 = complex17.NaN.conjugate();
      int int0 = complex12.hashCode();
      boolean boolean0 = complex15.isInfinite();
      Complex complex19 = complex18.divide(complex15);
      Complex complex20 = complex3.sinh();
      Complex complex21 = complex1.sin();
      double double1 = complex12.getArgument();
      Complex complex22 = complex12.cosh();
      Complex complex23 = complex20.pow(complex14);
      Complex complex24 = complex18.multiply(complex20);
      Complex complex25 = complex23.cos();
      boolean boolean1 = complex1.isInfinite();
      Complex complex26 = complex14.cos();
      Complex complex27 = complex14.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.ONE.cosh();
      double double0 = complex0.I.abs();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex4.INF.acos();
      List<Complex> list0 = complex5.nthRoot(1);
      double double1 = complex0.abs();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex5.createComplex(1.0, Double.POSITIVE_INFINITY);
      int int0 = complex4.hashCode();
      Complex complex10 = complex1.asin();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.multiply((-20.0));
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.I.conjugate();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex5.INF.sqrt();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex1.pow(complex4);
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex11.INF.atan();
      double double0 = complex10.getReal();
      Complex complex14 = complex1.tanh();
      Complex complex15 = Complex.ONE;
      Complex complex16 = complex15.log();
      Complex complex17 = complex2.divide(complex15);
      Complex complex18 = complex2.createComplex((-20.0), (-20.0));
      Complex complex19 = complex9.sin();
      Complex complex20 = complex12.sqrt();
      int int0 = complex20.hashCode();
      Complex complex21 = complex2.sqrt1z();
      Complex complex22 = complex21.ONE.multiply(complex11);
      Complex complex23 = complex22.I.multiply((-20.0));
      Complex complex24 = complex21.add(complex20);
      int int1 = complex24.hashCode();
      Complex complex25 = complex24.ZERO.sin();
      Complex complex26 = complex1.add(complex16);
      Complex complex27 = complex9.conjugate();
      ComplexField complexField0 = complex12.getField();
      Complex complex28 = complex19.asin();
      Complex complex29 = complex0.add(complex23);
      boolean boolean0 = complex26.isInfinite();
      Complex complex30 = complex16.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1583.4613383952321), (-1583.4613383952321));
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.NaN.multiply(4201.7);
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex0.ONE.add(complex6);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex5.log();
      Complex complex12 = complex11.INF.sqrt();
      Complex complex13 = complex11.INF.add(complex0);
      Complex complex14 = complex13.INF.acos();
      double double0 = complex6.getReal();
      Complex complex15 = complex1.tan();
      Complex complex16 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-24.2143), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(5.0637692933);
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.ONE.divide(complex1);
      String string1 = complex0.toString();
      Complex complex4 = complex1.ONE.multiply(5.0637692933);
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex3.createComplex((-4006.62288), (-4006.62288));
      Complex complex7 = complex1.exp();
      double double0 = complex1.getImaginary();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.sinh();
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      String string0 = complex1.toString();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex4.conjugate();
      List<Complex> list0 = complex7.INF.nthRoot(2023);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 2998.66883241635);
      Complex complex9 = complex2.add(complex8);
      Complex complex10 = complex8.asin();
      Complex complex11 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex4.I.log();
      ComplexField complexField0 = complex5.INF.getField();
      List<Complex> list0 = complex0.NaN.nthRoot(774);
      Complex complex6 = complex0.NaN.sinh();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex0.INF.cos();
      int int0 = complex8.ZERO.hashCode();
      List<Complex> list1 = complex8.NaN.nthRoot(774);
      Complex complex9 = complex0.asin();
      Complex complex10 = new Complex((-4184.5452), 230.3539455543314);
      Complex complex11 = complex9.INF.multiply(complex10);
      Complex complex12 = complex9.ZERO.multiply(1.01);
      Complex complex13 = complex11.NaN.sqrt1z();
      Complex complex14 = complex13.ZERO.sqrt();
      double double0 = complex0.getArgument();
      double double1 = complex11.abs();
      Complex complex15 = complex10.exp();
      double double2 = complex13.abs();
      ComplexField complexField1 = complex7.getField();
      Complex complex16 = complex4.atan();
      Complex complex17 = complex14.cos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ZERO.tanh();
      int int0 = complex1.INF.hashCode();
      double double0 = complex0.abs();
      boolean boolean0 = complex0.equals(">");
      Complex complex3 = complex0.acos();
      Object object0 = complex3.ONE.readResolve();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex3.sqrt();
      double double2 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ONE.acos();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex2.INF.sinh();
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex2.ZERO.sin();
      Complex complex6 = complex4.I.sqrt1z();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex7.ZERO.acos();
      String string0 = complex7.toString();
      Complex complex9 = complex1.ONE.negate();
      List<Complex> list0 = complex2.nthRoot(1253);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex9.tanh();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.I.multiply(complex0);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex3.ZERO.multiply(0.07490822288864472);
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex6.ZERO.createComplex(0.07490822288864472, 2067.2);
      Complex complex8 = complex6.NaN.divide(complex1);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1.986821492305628E-8, 613.29575546);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.exp();
      String string0 = complex2.toString();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex3.I.divide(complex1);
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex4.multiply((-840.561442));
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex6.NaN.cos();
      double double1 = complex0.getImaginary();
      Complex complex8 = new Complex(1.986821492305628E-8, 1.986821492305628E-8);
      String string1 = complex8.ONE.toString();
      Complex complex9 = complex0.subtract(complex8);
      Complex complex10 = complex9.ONE.subtract(complex8);
      Complex complex11 = complex9.createComplex(613.29575546, 613.29575546);
      Complex complex12 = complex0.acos();
      Complex complex13 = complex11.sinh();
      Complex complex14 = complex10.atan();
      Complex complex15 = complex8.sin();
      Complex complex16 = complex15.add(complex10);
      Complex complex17 = complex16.ONE.sin();
      Complex complex18 = complex16.INF.pow(complex0);
      double double2 = complex15.I.abs();
      boolean boolean0 = complex11.isNaN();
      Complex complex19 = complex8.multiply(613.29575546);
      double double3 = complex13.abs();
      double double4 = complex12.abs();
      boolean boolean1 = complex10.isInfinite();
      Complex complex20 = complex18.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.ZERO.log();
      double double0 = complex0.getArgument();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.createComplex(0.0, 0.0);
      Complex complex7 = complex5.NaN.multiply(0.0);
      double double1 = complex4.ONE.getArgument();
      String string0 = complex4.toString();
      Complex complex8 = complex4.subtract(complex0);
      Complex complex9 = complex8.I.multiply(complex8);
      Complex complex10 = complex8.I.sqrt1z();
      Complex complex11 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex2.NaN.sinh();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.INF.exp();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex2.INF.divide(complex0);
      double double1 = complex5.INF.abs();
      String string0 = complex2.I.toString();
      Complex complex7 = complex3.divide(complex5);
      Complex complex8 = complex7.ZERO.pow(complex5);
      Complex complex9 = complex5.ONE.asin();
      Complex complex10 = complex3.NaN.sqrt1z();
      Complex complex11 = complex7.INF.multiply(complex3);
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex12.divide(complex4);
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-2394.0), (-2394.0));
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.INF.hashCode();
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      List<Complex> list0 = complex2.nthRoot(222);
      Complex complex3 = complex0.atan();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex4 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1937.0, 1937.0);
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.sqrt();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.INF.multiply(complex1);
      Object object1 = complex0.INF.readResolve();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.NaN.multiply(0.0);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.I.tanh();
      Object object1 = complex7.readResolve();
      Complex complex8 = complex6.I.asin();
      boolean boolean0 = complex6.equals(complex0);
      boolean boolean1 = complex0.isInfinite();
      double double1 = complex8.abs();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex6.exp();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex2.tan();
      boolean boolean2 = complex7.isInfinite();
      Complex complex13 = complex7.acos();
      Complex complex14 = complex0.pow(complex8);
      Complex complex15 = complex6.cos();
      Complex complex16 = complex14.sqrt();
      boolean boolean3 = complex15.isNaN();
      Complex complex17 = complex0.sqrt();
      Complex complex18 = complex16.sqrt();
      Complex complex19 = complex1.log();
      Complex complex20 = complex6.add(complex15);
      double double2 = complex19.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = complex4.INF.cos();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex7.ZERO.divide(complex3);
      double double1 = complex3.getImaginary();
      Complex complex9 = complex7.NaN.tan();
      Complex complex10 = complex1.pow(complex7);
      boolean boolean0 = complex10.equals(complex8);
      Complex complex11 = complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex0.NaN.atan();
      double double0 = complex3.ZERO.abs();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex1.add(complex7);
      boolean boolean0 = complex8.equals(complex2);
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tanh();
      String string0 = complex2.NaN.toString();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.conjugate();
      double double1 = complex3.ONE.abs();
      Complex complex4 = complex3.NaN.sin();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-3196.95488), (-3196.95488));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.NaN.log();
      Object object0 = complex3.readResolve();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex4.NaN.atan();
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(3479.332656349);
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.I.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex4.log();
      double double0 = complex6.getArgument();
      Complex complex7 = complex2.sinh();
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.01745329052209854, 0.01745329052209854);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.atan();
      List<Complex> list0 = complex2.INF.nthRoot(2251);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex1.add(complex4);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex4.ONE.log();
      double double1 = complex2.getImaginary();
      Complex complex9 = complex1.multiply(complex4);
      boolean boolean0 = complex1.isInfinite();
      ComplexField complexField0 = complex4.INF.getField();
      boolean boolean1 = complex0.equals(complex3);
      boolean boolean2 = complex5.isInfinite();
      Complex complex10 = complex4.I.multiply(complex0);
      double double2 = complex4.getImaginary();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex4.multiply(0.017453290522098625);
      Complex complex13 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.createComplex((-70.7), (-70.7));
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex5.I.tanh();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex2.cos();
      double double1 = complex7.ONE.getArgument();
      Complex complex8 = complex0.atan();
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex3.divide(complex1);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex3.NaN.sqrt();
      double double0 = complex0.abs();
      Complex complex5 = complex0.NaN.sqrt1z();
      Complex complex6 = complex5.ZERO.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.I.toString();
      double double1 = complex0.getReal();
      double double2 = complex1.abs();
      Complex complex7 = complex0.pow(complex3);
      Object object0 = complex4.readResolve();
      Complex complex8 = complex4.atan();
      String string1 = complex0.toString();
      Complex complex9 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.ZERO.createComplex(0.0, 0.0);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex2.sqrt();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex1.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = 4780.530926556;
      Complex complex0 = new Complex(4780.530926556, (-1.0));
      String string0 = complex0.toString();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.sqrt1z();
      try { 
        complex2.ZERO.nthRoot((-3311));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,311
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.INF.conjugate();
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.ZERO.atan();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex8.ZERO.exp();
      Complex complex10 = complex9.NaN.pow(complex7);
      Complex complex11 = complex8.INF.tan();
      Complex complex12 = complex1.INF.createComplex((-1302.36204228477), 594.5094948);
      ComplexField complexField0 = complex8.ZERO.getField();
      List<Complex> list0 = complex2.nthRoot(2156);
      double double0 = complex6.getReal();
      Complex complex13 = complex6.atan();
      Complex complex14 = complex8.sinh();
      try { 
        complex2.nthRoot((-2351));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,351
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.sqrt1z();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.asin();
      String string0 = complex2.toString();
      Complex complex7 = complex1.subtract(complex2);
      Complex complex8 = complex7.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(1281.03868751549);
      Complex complex3 = complex2.tanh();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1701.5981123434), (-1701.5981123434));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.I.multiply((-1701.5981123434));
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex5.sinh();
      boolean boolean0 = complex6.isInfinite();
      int int0 = complex5.hashCode();
      Complex complex8 = complex2.divide(complex5);
      String string0 = complex3.NaN.toString();
      Complex complex9 = complex0.sqrt1z();
      boolean boolean1 = complex7.isNaN();
      int int1 = complex1.INF.hashCode();
      Complex complex10 = complex1.multiply(complex0);
      Complex complex11 = complex3.tanh();
      boolean boolean2 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      String string0 = complex0.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.conjugate();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.createComplex((-1107.092635872), (-1107.092635872));
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex4.ZERO.multiply(complex0);
      Complex complex7 = complex4.pow(complex3);
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex8.NaN.cosh();
      double double0 = complex0.getReal();
      Complex complex10 = complex6.sin();
      List<Complex> list0 = complex6.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.atan();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ZERO.sqrt();
      double double1 = complex5.getArgument();
      String string0 = complex3.toString();
      ComplexField complexField0 = complex5.getField();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.I.asin();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex4.I.subtract(complex2);
      Complex complex6 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex6);
      Complex complex7 = complex1.cos();
      Complex complex8 = complex3.conjugate();
      double double0 = complex6.getArgument();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex9 = complex5.acos();
      Complex complex10 = complex9.NaN.divide(complex6);
      double double1 = complex7.getArgument();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex1.subtract(complex6);
      Complex complex13 = complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.INF.readResolve();
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.log();
      double double0 = complex0.abs();
      Complex complex3 = complex2.sqrt1z();
      List<Complex> list0 = complex3.I.nthRoot(1);
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.multiply(0.087);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.cos();
      int int0 = complex0.hashCode();
      Complex complex6 = complex3.asin();
      int int1 = complex2.hashCode();
      Complex complex7 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.negate();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex1.NaN.multiply(0.0);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getImaginary();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = (-1768);
      try { 
        complex0.nthRoot((-1768));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,768
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.cos();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(3809.009981215213, 595.646254833);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.cosh();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ONE.acos();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex2.INF.subtract(complex0);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex2.ONE.add(complex1);
      Complex complex9 = complex0.log();
      Complex complex10 = complex1.INF.atan();
      Complex complex11 = complex1.tan();
      double double0 = complex4.I.getArgument();
      Complex complex12 = complex9.atan();
      double double1 = complex12.ONE.abs();
      String string0 = complex4.toString();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex9.tanh();
      Complex complex14 = complex13.NaN.pow(complex5);
      Complex complex15 = complex10.sinh();
      Complex complex16 = complex8.cosh();
      Complex complex17 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex0.NaN.nthRoot(5128);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.asin();
      double double1 = complex1.getReal();
      Complex complex5 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(6.123233995736766E-17, 6.123233995736766E-17);
      Complex complex2 = complex0.INF.subtract(complex1);
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(989.777603414, 3637.86819);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.NaN.sin();
      List<Complex> list0 = complex0.nthRoot(3);
      Complex complex3 = complex0.multiply((double) 3);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex4.createComplex(698.9723217856755, 698.9723217856755);
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex6 = complex4.I.divide(complex3);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex2.ONE.sin();
      double double0 = complex8.NaN.abs();
      Complex complex9 = complex8.multiply((-1471.7));
      Complex complex10 = complex9.NaN.asin();
      boolean boolean0 = complex1.equals((Object) null);
      double double1 = complex1.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex11 = complex2.multiply(2385.64311134);
      boolean boolean1 = complex2.equals(complex0);
      Complex complex12 = complex2.cos();
      Complex complex13 = complex12.I.sinh();
      boolean boolean2 = complex2.isInfinite();
      Complex complex14 = complex11.createComplex(0.0, Double.NaN);
      Object object0 = complex14.readResolve();
      try { 
        complex11.nthRoot((-577));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -577
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = new Complex(2360.255995268, 2360.255995268);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.ZERO.multiply(2316.191697454);
      Complex complex4 = complex3.INF.createComplex((-113.877), 2360.255995268);
      Complex complex5 = complex2.createComplex(2360.255995268, 188.20353);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex1.subtract(complex8);
      boolean boolean1 = complex0.equals(complex10);
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex6.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex0.NaN.multiply(507.7265381);
      Complex complex5 = complex0.I.subtract(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.I.createComplex(3294198.0, 6.283185307179586);
      Complex complex9 = complex8.INF.subtract(complex4);
      Complex complex10 = complex8.I.subtract(complex1);
      int int0 = complex0.hashCode();
      Complex complex11 = complex7.exp();
      Complex complex12 = complex11.INF.asin();
      Object object1 = complex12.readResolve();
      int int1 = complex0.hashCode();
      Complex complex13 = complex7.ZERO.exp();
      Complex complex14 = complex11.conjugate();
      Complex complex15 = complex7.ZERO.asin();
      Complex complex16 = complex5.multiply(complex4);
      Complex complex17 = complex16.ZERO.sqrt();
      Complex complex18 = complex16.ZERO.atan();
      Complex complex19 = complex18.I.sqrt();
      Complex complex20 = complex12.add(complex5);
      Complex complex21 = complex5.tanh();
      int int2 = complex7.hashCode();
      Complex complex22 = complex0.tanh();
      Complex complex23 = complex21.log();
      Complex complex24 = complex23.ONE.tan();
      Complex complex25 = complex22.tanh();
      Complex complex26 = complex22.atan();
      Complex complex27 = complex26.sqrt();
      Object object2 = complex27.readResolve();
      Complex complex28 = complex0.acos();
  }
}
