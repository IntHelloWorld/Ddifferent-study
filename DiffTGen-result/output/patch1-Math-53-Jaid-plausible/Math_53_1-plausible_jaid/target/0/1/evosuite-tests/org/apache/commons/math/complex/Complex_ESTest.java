/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:25:44 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1770.9680926), (-1770.9680926));
      Complex complex2 = complex0.ONE.divide(complex1);
      double double0 = complex2.getArgument();
      double double1 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      String string1 = complex1.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex1.createComplex((-1770.9680926), 2174.91);
      Complex complex8 = complex1.cos();
      Complex complex9 = complex4.ZERO.sqrt();
      List<Complex> list0 = complex4.nthRoot(12);
      double double2 = complex4.abs();
      Complex complex10 = complex0.add(complex3);
      double double3 = complex0.getReal();
      Complex complex11 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1569.3, 1569.3);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2966.28784248071, 2966.28784248071);
      String string0 = complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.ONE.multiply(complex3);
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object1);
      Complex complex5 = complex3.acos();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex0.exp();
      String string1 = complex7.ONE.toString();
      Complex complex8 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1474.5897812, 1474.5897812);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex2.ONE.atan();
      Complex complex6 = complex1.pow(complex2);
      int int0 = complex2.hashCode();
      Complex complex7 = complex1.subtract(complex5);
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex2.pow(complex10);
      double double0 = complex3.abs();
      Complex complex13 = complex2.divide(complex7);
      Complex complex14 = complex13.NaN.cos();
      Complex complex15 = complex13.ONE.tanh();
      double double1 = complex0.getArgument();
      try { 
        complex13.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.4342944622039795, 1454.08601);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.INF.pow(complex1);
      // Undeclared exception!
      complex0.nthRoot(5094);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.createComplex(1797.418, 1797.418);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex1.INF.sqrt1z();
      Complex complex5 = complex4.INF.createComplex(3385.0, (-2040.53001));
      double double0 = complex4.NaN.abs();
      Complex complex6 = complex3.INF.multiply(complex1);
      Complex complex7 = complex3.NaN.tan();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex3.I.pow(complex2);
      Complex complex11 = complex8.I.divide(complex7);
      Complex complex12 = complex2.tanh();
      boolean boolean0 = complex0.equals(complex3);
      boolean boolean1 = complex2.equals("z}sG?t");
      Complex complex13 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.multiply(0.0);
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.ZERO.divide(complex3);
      Complex complex8 = complex2.I.createComplex(372.7, 0.0);
      Complex complex9 = complex7.exp();
      Complex complex10 = complex2.sqrt();
      String string0 = complex3.toString();
      Complex complex11 = complex2.ONE.createComplex(0.0, 372.7);
      boolean boolean1 = complex4.isNaN();
      boolean boolean2 = complex6.isNaN();
      boolean boolean3 = complex4.isNaN();
      List<Complex> list0 = complex8.nthRoot(494);
      ComplexField complexField0 = complex2.getField();
      Complex complex12 = complex5.pow(complex9);
      Complex complex13 = complex3.tanh();
      List<Complex> list1 = complex12.nthRoot(494);
      Complex complex14 = complex9.sqrt1z();
      Complex complex15 = complex6.sqrt();
      boolean boolean4 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      String string0 = complex0.INF.toString();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.NaN.atan();
      double double0 = complex1.NaN.abs();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex1.ONE.atan();
      String string1 = complex0.toString();
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex7.INF.asin();
      ComplexField complexField0 = complex1.getField();
      boolean boolean1 = complex7.equals(complex1);
      Complex complex10 = complex4.asin();
      Complex complex11 = complex5.asin();
      String string2 = complex11.ONE.toString();
      Complex complex12 = complex11.ONE.divide(complex0);
      Complex complex13 = complex2.sqrt1z();
      List<Complex> list0 = complex13.ZERO.nthRoot(1772);
      double double1 = complex12.getReal();
      Complex complex14 = complex3.sqrt();
      double double2 = complex3.getImaginary();
      List<Complex> list1 = complex3.nthRoot(36);
      String string3 = complex0.toString();
      Complex complex15 = complex5.tan();
      Complex complex16 = complex3.cos();
      Complex complex17 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-329.023715), (-329.023715));
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(4154.4724380559, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.INF.multiply(complex1);
      double double0 = complex3.abs();
      Complex complex4 = complex2.ONE.tan();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex2.NaN.tanh();
      Complex complex8 = complex3.NaN.cosh();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.ONE.tan();
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex11 = complex0.ZERO.acos();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex12.atan();
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex15.INF.cos();
      boolean boolean0 = complex12.isInfinite();
      ComplexField complexField1 = complex2.getField();
      boolean boolean1 = complex10.isNaN();
      try { 
        complex6.nthRoot((-448));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -448
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.createComplex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = complex1.NaN.divide(complex0);
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.createComplex((-763.32379), 6167.4);
      double double0 = complex5.NaN.getArgument();
      Complex complex6 = complex5.INF.subtract(complex3);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex5.NaN.atan();
      Complex complex9 = complex0.ZERO.negate();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex4.divide(complex0);
      Complex complex12 = complex5.tan();
      Complex complex13 = complex7.multiply(complex12);
      Complex complex14 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1588.8912250396465), 1625.52853597);
      Complex complex1 = new Complex((-1588.8912250396465), 1625.52853597);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.ZERO.add(complex1);
      String string0 = complex0.NaN.toString();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.ZERO.pow(complex3);
      Complex complex5 = complex1.createComplex(1625.52853597, 6.283185307179586);
      Complex complex6 = complex2.createComplex(1625.52853597, 1122.25861);
      Complex complex7 = complex5.NaN.subtract(complex1);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.NaN.multiply(complex0);
      double double0 = complex5.ZERO.getArgument();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.INF.sqrt1z();
      Complex complex12 = complex3.subtract(complex5);
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-3485.0);
      Complex complex0 = new Complex((-3485.0), 5407.7553171);
      Complex complex1 = complex0.I.add(complex0);
      Complex complex2 = complex0.I.multiply(complex0);
      Complex complex3 = complex2.INF.sin();
      int int0 = (-331);
      try { 
        complex2.I.nthRoot((-331));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -331
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.createComplex(5103.279271, 5103.279271);
      Complex complex3 = complex1.conjugate();
      boolean boolean0 = complex3.isInfinite();
      double double0 = complex1.getArgument();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.I.acos();
      double double1 = complex4.NaN.getArgument();
      Complex complex6 = complex4.exp();
      double double2 = complex6.abs();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex1.divide(complex5);
      Complex complex9 = complex5.createComplex(1.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1069.9167517982), (-1069.9167517982));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.sin();
      String string0 = complex2.toString();
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex0.ZERO.subtract(complex7);
      Complex complex9 = complex0.cos();
      String string1 = complex9.INF.toString();
      Complex complex10 = complex0.sqrt();
      double double0 = complex10.NaN.getArgument();
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex11.INF.exp();
      Complex complex13 = complex11.NaN.cosh();
      Complex complex14 = complex11.asin();
      Complex complex15 = complex9.NaN.negate();
      Complex complex16 = complex9.I.divide(complex7);
      Complex complex17 = complex16.ZERO.createComplex(Double.NaN, 4252.328334306442);
      List<Complex> list0 = complex9.nthRoot(17);
      ComplexField complexField0 = complex8.getField();
      Complex complex18 = complex7.cos();
      Complex complex19 = complex3.divide(complex7);
      Complex complex20 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.INF.divide(complex5);
      Complex complex7 = complex6.ZERO.multiply((-409.1344));
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex4.I.sin();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex4.ONE.tan();
      int int0 = complex11.hashCode();
      double double0 = complex4.abs();
      Object object0 = complex4.ONE.readResolve();
      boolean boolean0 = complex9.isInfinite();
      Complex complex12 = complex3.negate();
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex13.INF.log();
      Complex complex15 = complex13.ZERO.createComplex(1, (-2602.9337801417));
      List<Complex> list1 = complex10.INF.nthRoot(1);
      Complex complex16 = complex0.negate();
      double double1 = complex16.getArgument();
      Complex complex17 = complex16.tanh();
      Complex complex18 = complex16.sqrt();
      boolean boolean1 = complex16.isNaN();
      Complex complex19 = complex10.tan();
      int int1 = complex4.ZERO.hashCode();
      Complex complex20 = complex5.conjugate();
      Complex complex21 = complex5.multiply(1.8011719796199461);
      List<Complex> list2 = complex21.NaN.nthRoot(1);
      Complex complex22 = complex9.createComplex((-1.5707963267948966), 2129.9389);
      Complex complex23 = complex11.sqrt1z();
      Complex complex24 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.I.tan();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(83.783, 1569.17721810912);
      String string0 = complex0.toString();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.ZERO.getArgument();
      String string0 = complex0.I.toString();
      String string1 = complex0.I.toString();
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.abs();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = new Complex(1.0, (-669.1460007137034));
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex4.createComplex(1215.879763621, 1215.879763621);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.sqrt();
      double double1 = complex5.getReal();
      Complex complex10 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.equals(complexField0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(complex1);
      int int0 = complex1.hashCode();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex4.ZERO.tan();
      double double1 = 1178.341735;
      Complex complex6 = complex2.ONE.tanh();
      Complex complex7 = complex0.NaN.conjugate();
      // Undeclared exception!
      try { 
        complex1.ONE.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(28);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(1803.0, 1803.0);
      Complex complex2 = complex1.createComplex((-172.98536385), 1803.0);
      Complex complex3 = complex0.ONE.log();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex1.multiply((-172.98536385));
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex4.multiply(complex2);
      Object object1 = complex6.readResolve();
      String string0 = complex2.toString();
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.tan();
      ComplexField complexField0 = complex5.getField();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.I.sqrt();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex2.ZERO.createComplex((-6.663542893624021E-14), 2154.7021);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex6 = complex2.I.createComplex(41.684654984, (-1.0));
      Complex complex7 = complex1.negate();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.add(complex6);
      String string1 = complex0.toString();
      String string2 = complex0.toString();
      Complex complex10 = complex7.sinh();
      ComplexField complexField1 = complex2.getField();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex8.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.sqrt1z();
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.INF.multiply(0.0);
      int int1 = complex6.ZERO.hashCode();
      try { 
        complex6.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-621.1187275990444), (-621.1187275990444));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex3.ZERO.createComplex(2.718281828459045, 2.718281828459045);
      Complex complex6 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.multiply((-3772.5269764));
      Complex complex6 = complex5.I.add(complex3);
      Complex complex7 = complex4.sqrt1z();
      double double0 = complex3.abs();
      Complex complex8 = complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex((-3.141592653589793), 2168.965706);
      ComplexField complexField0 = complex0.ONE.getField();
      List<Complex> list0 = complex0.nthRoot(2389);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex3.pow(complex7);
      double double0 = complex9.ONE.getArgument();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      double double0 = complex0.NaN.abs();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.log();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex3.ZERO.createComplex((-1.0), 0.0);
      double double0 = complex1.I.abs();
      Complex complex5 = complex2.NaN.tan();
      Complex complex6 = complex5.add(complex0);
      Object object0 = complex1.INF.readResolve();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ZERO.multiply(complex4);
      double double1 = complex0.abs();
      Complex complex9 = complex1.NaN.log();
      boolean boolean0 = complex1.isNaN();
      double double2 = complex0.getImaginary();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex5.INF.subtract(complex1);
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex2.divide(complex8);
      Complex complex10 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.I.negate();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.NaN.pow(complex1);
      double double1 = complex0.abs();
      double double2 = complex2.getArgument();
      Complex complex6 = complex0.NaN.sqrt();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.INF.createComplex(0.0, (-1077.31397452));
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.conjugate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.subtract(complex4);
      double double0 = complex0.getArgument();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex3.createComplex((-136.79352), (-654.0));
      Complex complex8 = Complex.INF;
      Complex complex9 = complex0.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.conjugate();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.NaN.add(complex5);
      Complex complex7 = complex4.NaN.sinh();
      double double0 = complex7.INF.getArgument();
      Complex complex8 = complex4.ONE.conjugate();
      Complex complex9 = complex4.tanh();
      Object object0 = complex3.I.readResolve();
      Complex complex10 = complex0.multiply(complex7);
      Object object1 = complex10.I.readResolve();
      Object object2 = complex3.NaN.readResolve();
      double double1 = complex0.abs();
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex4.multiply((-2066.67294182116));
      Complex complex15 = complex14.NaN.cosh();
      Complex complex16 = complex9.divide(complex5);
      Complex complex17 = complex16.asin();
      ComplexField complexField0 = complex14.getField();
      Object object3 = complex8.readResolve();
      Complex complex18 = complex2.tanh();
      Complex complex19 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.atan();
      double double0 = complex3.getReal();
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex5.INF.createComplex(1.4142135623730951, 1462.474);
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.add(complex2);
      double double0 = complex3.I.getArgument();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex2.log();
      Complex complex7 = complex3.ONE.conjugate();
      double double1 = complex6.abs();
      Complex complex8 = complex6.I.negate();
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex6.add(complex3);
      Complex complex11 = complex1.NaN.negate();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex12.INF.cosh();
      Complex complex14 = complex12.NaN.asin();
      double double2 = complex8.getImaginary();
      Object object0 = complex10.readResolve();
      Complex complex15 = complex5.atan();
      Complex complex16 = complex2.asin();
      Object object1 = complex16.ZERO.readResolve();
      boolean boolean0 = complex5.equals(complex6);
      Complex complex17 = complex0.cosh();
      Complex complex18 = complex17.INF.negate();
      Complex complex19 = Complex.INF;
      Complex complex20 = complex3.add(complex19);
      boolean boolean1 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex1.INF.cos();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex6 = complex0.exp();
      double double0 = complex6.INF.abs();
      Complex complex7 = complex1.createComplex((-4180.047203588932), 17);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.tanh();
      int int0 = (-1458);
      try { 
        complex3.ONE.nthRoot((-1458));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,458
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex0.sinh();
      double double0 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex5.INF.subtract(complex1);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ZERO.conjugate();
      double double0 = complex2.INF.getArgument();
      Object object0 = complex0.INF.readResolve();
      Object object1 = complex0.INF.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.sqrt();
      String string0 = complex3.toString();
      String string1 = complex0.toString();
      Complex complex5 = complex0.negate();
      boolean boolean0 = complex3.isInfinite();
      try { 
        complex4.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.negate();
      String string0 = complex0.toString();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex3.INF.multiply((-2298.829));
      Complex complex6 = complex4.INF.exp();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.createComplex(1.375, 0.0);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.createComplex((-3624.1407009147083), (-3624.1407009147083));
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex0.cos();
      double double0 = complex3.getArgument();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.cos();
      double double1 = complex0.getReal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-554.1113951741837), (-511.7030554399));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.atan();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.asin();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex0.cosh();
      double double1 = complex4.abs();
      Complex complex6 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(908.435036942, 908.435036942);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.pow(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2437.0811772814886, 1221.4036);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.I.multiply(235.966);
      Complex complex3 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.cos();
      double double0 = complex4.getImaginary();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex2.NaN.tanh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex2.pow(complex3);
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.sin();
      boolean boolean0 = complex2.isNaN();
      String string0 = complex4.toString();
      boolean boolean1 = complex0.isNaN();
      boolean boolean2 = complex5.isInfinite();
      Complex complex6 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(5.669184079525E-24, 0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.conjugate();
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex0.multiply(complex2);
      int int0 = complex2.hashCode();
      double double0 = complex0.abs();
      Object object1 = complex2.readResolve();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.ZERO.cosh();
      boolean boolean0 = complex4.equals(object1);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex2.tan();
      double double1 = complex8.abs();
      Complex complex9 = complex8.ONE.multiply(Double.NaN);
      double double2 = complex4.abs();
      Complex complex10 = complex2.multiply(complex8);
      double double3 = complex10.I.getArgument();
      Complex complex11 = complex0.multiply(complex4);
      Complex complex12 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ZERO.cos();
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.multiply(52.41219823);
      Complex complex6 = complex3.ZERO.exp();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex4.add(complex3);
      Object object1 = complex0.readResolve();
      Complex complex8 = complex3.createComplex((-985.954830218), 52.41219823);
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4.9E-324, 0.1818181574344635);
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.multiply(complex1);
      String string1 = complex1.I.toString();
      Complex complex4 = complex3.INF.asin();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.sinh();
      double double0 = complex5.NaN.abs();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex2.atan();
      boolean boolean0 = complex1.equals(complex0);
      double double2 = complex5.getArgument();
      Complex complex8 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.INF.negate();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex3.ONE.createComplex(0, 0);
      double double0 = complex1.I.getArgument();
      int int0 = complex6.I.hashCode();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.sinh();
      double double0 = complex2.abs();
      double double1 = complex0.getArgument();
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex6.pow(complex5);
      Complex complex8 = complex5.ZERO.multiply(complex1);
      Complex complex9 = complex5.cosh();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex10.I.multiply(2.2250738585072014E-308);
      Complex complex12 = complex9.multiply(0.0);
      Complex complex13 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.ONE.sqrt1z();
      List<Complex> list0 = complex2.ZERO.nthRoot(811);
      Complex complex4 = complex1.multiply((-1172.99));
      Complex complex5 = complex2.multiply((-1172.99));
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex1.NaN.exp();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex2.divide(complex5);
      Complex complex10 = complex0.multiply(complex6);
      double double0 = complex7.getImaginary();
      boolean boolean0 = complex10.isNaN();
      Object object0 = new Object();
      boolean boolean1 = complex6.equals(object0);
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex8.negate();
      Complex complex13 = complex8.exp();
      boolean boolean2 = complex13.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex5.ZERO.acos();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex4.asin();
      Complex complex12 = complex10.sin();
      String string0 = complex4.INF.toString();
      Complex complex13 = complex9.ZERO.log();
      Complex complex14 = complex5.subtract(complex11);
      String string1 = complex5.toString();
      Complex complex15 = complex10.tanh();
      Complex complex16 = complex0.sqrt1z();
      Complex complex17 = complex0.conjugate();
      Complex complex18 = complex7.log();
      List<Complex> list0 = complex16.INF.nthRoot(265);
      Complex complex19 = complex4.cosh();
      Complex complex20 = complex16.multiply((-1579.084234298));
      Complex complex21 = complex20.tanh();
      Complex complex22 = complex1.add(complex3);
      Complex complex23 = complex9.cosh();
      Complex complex24 = complex9.atan();
      Complex complex25 = complex2.createComplex((-355.27725096), (-1579.084234298));
      Complex complex26 = complex22.asin();
      Complex complex27 = complex5.subtract(complex20);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.I.multiply(complex1);
      ComplexField complexField0 = complex2.ZERO.getField();
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Object object1 = complex1.ZERO.readResolve();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex1.getArgument();
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
