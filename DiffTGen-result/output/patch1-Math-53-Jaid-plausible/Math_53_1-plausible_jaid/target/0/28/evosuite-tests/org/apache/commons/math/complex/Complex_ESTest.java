/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:36:41 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex1.sin();
      double double0 = complex6.INF.getArgument();
      boolean boolean0 = complex6.equals(complex0);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex9.NaN.sin();
      Complex complex11 = complex7.ONE.sinh();
      Complex complex12 = complex8.negate();
      Complex complex13 = complex12.ZERO.multiply(complex6);
      Complex complex14 = complex1.I.add(complex3);
      Complex complex15 = complex13.NaN.exp();
      Complex complex16 = complex15.createComplex((-1125.497017756), (-1125.497017756));
      Complex complex17 = complex6.sqrt();
      Complex complex18 = complex17.ZERO.add(complex2);
      Complex complex19 = complex17.INF.multiply((-439.3804));
      double double1 = complex7.getReal();
      Complex complex20 = complex1.acos();
      Complex complex21 = complex0.acos();
      boolean boolean1 = complex14.isInfinite();
      Complex complex22 = complex16.createComplex((-7.44321345601866E-11), 0.7853981633974483);
      Complex complex23 = complex1.asin();
      Complex complex24 = complex2.cosh();
      Complex complex25 = complex13.add(complex2);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.INF;
      String string0 = complex0.I.toString();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.ONE.subtract(complex3);
      Complex complex7 = complex6.ZERO.add(complex2);
      Complex complex8 = complex6.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex10.INF.negate();
      List<Complex> list0 = complex10.nthRoot(1);
      Complex complex12 = complex9.NaN.sin();
      Complex complex13 = complex2.tanh();
      double double1 = complex0.getArgument();
      Complex complex14 = complex2.NaN.pow(complex9);
      Complex complex15 = complex13.sin();
      double double2 = complex15.abs();
      try { 
        complex9.nthRoot((-958));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -958
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.INF.tan();
      Complex complex8 = complex1.multiply(6.283185307179586);
      Complex complex9 = complex8.atan();
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex10 = complex8.I.createComplex((-4563.0), 6.283185307179586);
      double double0 = complex8.getArgument();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex11.INF.add(complex2);
      Complex complex13 = complex0.log();
      Complex complex14 = complex13.INF.log();
      Complex complex15 = complex11.sin();
      Complex complex16 = complex2.pow(complex13);
      double double1 = complex15.getArgument();
      Complex complex17 = complex0.cos();
      double double2 = complex17.ONE.abs();
      Complex complex18 = complex1.asin();
      Complex complex19 = complex13.INF.sinh();
      Complex complex20 = complex2.log();
      Complex complex21 = complex10.divide(complex0);
      ComplexField complexField1 = complex21.getField();
      Complex complex22 = complex14.divide(complex21);
      ComplexField complexField2 = complex16.getField();
      String string1 = complex13.toString();
      Complex complex23 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(2645.7, 1492.61451613853);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.ZERO.conjugate();
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex3.multiply(Double.NaN);
      Complex complex10 = complex3.cosh();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex2.subtract(complex10);
      double double0 = complex0.getImaginary();
      int int0 = complex8.hashCode();
      Complex complex12 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.exp();
      List<Complex> list0 = complex1.ZERO.nthRoot(3478);
      Complex complex3 = complex0.ZERO.add(complex2);
      Object object0 = complex0.readResolve();
      String string0 = complex0.I.toString();
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.multiply((double) 3478);
      double double0 = complex6.I.abs();
      Complex complex7 = complex3.add(complex5);
      int int0 = complex5.I.hashCode();
      double double1 = complex2.getImaginary();
      Complex complex8 = complex1.INF.sinh();
      Complex complex9 = complex3.negate();
      double double2 = complex5.getArgument();
      Complex complex10 = complex7.ZERO.tanh();
      String string1 = complex6.toString();
      // Undeclared exception!
      complex2.nthRoot(3478);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2156.89, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.ONE.atan();
      double double0 = complex3.NaN.getArgument();
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex3.multiply(2.0);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex4.I.exp();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex5.pow(complex9);
      Complex complex11 = complex10.multiply((-522.61828));
      Complex complex12 = complex11.INF.asin();
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex0.ONE.sinh();
      boolean boolean1 = complex4.equals("");
      Complex complex15 = complex2.sin();
      double double1 = complex5.NaN.abs();
      Complex complex16 = complex9.NaN.asin();
      Complex complex17 = complex6.cos();
      Complex complex18 = complex7.negate();
      Complex complex19 = complex0.createComplex((-6.032174644509064E-23), 1.2675934823758863E-8);
      Complex complex20 = complex5.acos();
      double double2 = complex3.getArgument();
      Complex complex21 = complex13.conjugate();
      Complex complex22 = complex9.negate();
      Complex complex23 = complex22.INF.log();
      Complex complex24 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-3043.309706717773), (-3043.309706717773));
      Complex complex1 = complex0.NaN.cosh();
      String string0 = complex0.NaN.toString();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.createComplex((-3043.309706717773), (-3043.309706717773));
      Complex complex6 = complex5.tan();
      double double0 = complex6.NaN.abs();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ZERO.add(complex5);
      Complex complex9 = complex7.divide(complex5);
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex10 = complex7.pow(complex1);
      Complex complex11 = complex7.ZERO.sinh();
      Complex complex12 = complex7.sin();
      Object object0 = complex8.readResolve();
      Complex complex13 = complex0.sinh();
      boolean boolean0 = complex3.isNaN();
      Complex complex14 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.I.exp();
      Complex complex5 = complex1.divide(complex0);
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex3.pow(complex0);
      double double0 = complex0.abs();
      Complex complex7 = complex0.I.sinh();
      List<Complex> list0 = complex5.I.nthRoot(7);
      ComplexField complexField1 = complex5.NaN.getField();
      Complex complex8 = complex5.I.cos();
      Complex complex9 = complex8.ZERO.tan();
      int int0 = complex2.hashCode();
      ComplexField complexField2 = complex5.getField();
      List<Complex> list1 = complex0.ZERO.nthRoot(7);
      Complex complex10 = complex5.divide(complex3);
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.tan();
      Object object0 = complex3.NaN.readResolve();
      Complex complex5 = complex3.ZERO.multiply(0.0);
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex7.INF.sqrt();
      Complex complex9 = complex8.I.multiply(complex3);
      Complex complex10 = complex7.I.asin();
      boolean boolean0 = complex3.isInfinite();
      Complex complex11 = complex10.conjugate();
      String string0 = complex0.toString();
      String string1 = complex3.toString();
      Complex complex12 = complex10.NaN.sqrt1z();
      double double0 = complex3.getImaginary();
      Complex complex13 = complex0.ZERO.add(complex10);
      Complex complex14 = complex3.multiply(complex4);
      String string2 = complex3.toString();
      Complex complex15 = complex14.negate();
      double double1 = complex7.getImaginary();
      int int0 = complex12.hashCode();
      Complex complex16 = complex14.conjugate();
      Complex complex17 = complex15.pow(complex8);
      try { 
        complex17.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.createComplex(381.9948, 381.9948);
      Complex complex3 = complex0.atan();
      boolean boolean0 = complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex1.I.asin();
      double double0 = complex0.abs();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex4.I.negate();
      double double1 = complex6.I.getArgument();
      Complex complex8 = complex4.INF.add(complex0);
      Complex complex9 = complex0.divide(complex1);
      double double2 = complex9.I.abs();
      Complex complex10 = complex4.multiply(complex6);
      ComplexField complexField0 = complex10.getField();
      double double3 = complex7.getImaginary();
      Complex complex11 = complex3.createComplex(1.0, 1.0);
      try { 
        complex11.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex((-2286.554193571363), (-2286.554193571363));
      Complex complex2 = complex0.NaN.multiply(571.3712234664);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.I.add(complex4);
      Complex complex7 = complex0.ZERO.log();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex8.I.log();
      double double0 = complex0.abs();
      Complex complex11 = complex5.asin();
      boolean boolean0 = complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.conjugate();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.I.createComplex(0.0, 0.0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.INF.cos();
      Complex complex8 = complex5.multiply(complex6);
      Complex complex9 = complex0.multiply(complex4);
      Complex complex10 = complex5.negate();
      Complex complex11 = complex9.atan();
      Complex complex12 = complex11.ONE.atan();
      Complex complex13 = complex9.ONE.multiply(complex2);
      Complex complex14 = complex4.multiply(0.0);
      Complex complex15 = complex9.log();
      Complex complex16 = complex1.sqrt();
      Complex complex17 = complex16.I.exp();
      Complex complex18 = complex14.createComplex(1453.96547693812, 0.0);
      Complex complex19 = complex18.ZERO.sqrt1z();
      Complex complex20 = complex9.cosh();
      try { 
        complex1.nthRoot((-260));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -260
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1.0E-6, 1.0E-6);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.ZERO;
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.asin();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.negate();
      boolean boolean0 = complex1.equals("(1.0, 0.0)");
      Complex complex7 = complex3.tan();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex6.tan();
      double double0 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.createComplex((-2970.3607327164486), (-2970.3607327164486));
      Complex complex7 = complex6.atan();
      double double0 = complex0.getArgument();
      double double1 = complex0.getArgument();
      Complex complex8 = complex0.divide(complex7);
      Complex complex9 = complex0.pow(complex1);
      List<Complex> list0 = complex7.I.nthRoot(716);
      int int0 = complex7.hashCode();
      Complex complex10 = complex7.log();
      Complex complex11 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.cos();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-3061.9), 1694.56699);
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.ZERO.acos();
      Complex complex6 = complex4.NaN.divide(complex0);
      Complex complex7 = complex6.I.divide(complex2);
      Complex complex8 = complex2.ZERO.tanh();
      String string0 = complex0.toString();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex4.multiply(complex9);
      Complex complex11 = complex4.I.tanh();
      Complex complex12 = complex9.I.subtract(complex2);
      Complex complex13 = complex12.INF.divide(complex2);
      Complex complex14 = complex10.conjugate();
      Complex complex15 = Complex.ZERO;
      Complex complex16 = complex15.NaN.sqrt();
      Complex complex17 = complex14.add(complex15);
      Complex complex18 = complex17.I.cosh();
      Complex complex19 = complex9.subtract(complex3);
      Object object0 = complex10.readResolve();
      Complex complex20 = complex3.negate();
      Complex complex21 = complex9.sinh();
      Complex complex22 = complex3.conjugate();
      Complex complex23 = complex22.NaN.conjugate();
      Complex complex24 = complex22.INF.atan();
      Complex complex25 = complex9.cos();
      Object object1 = complex25.ONE.readResolve();
      Complex complex26 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      int int0 = complex0.hashCode();
      Complex complex1 = new Complex(9.313225746154785E-10, 6.283185307179586);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.I.multiply(complex0);
      Complex complex5 = complex0.multiply(9.313225746154785E-10);
      Complex complex6 = complex0.ZERO.sinh();
      double double0 = complex6.INF.getArgument();
      boolean boolean0 = complex5.isInfinite();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.ONE.pow(complex1);
      Complex complex9 = complex1.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex10 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 891.7995961770512);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.add(complex0);
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2644.88834562822), (-2644.88834562822));
      Complex complex1 = new Complex(2362.3961258, 2362.3961258);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.INF.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex2.NaN.conjugate();
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = new Complex(0.0, 5487.25081437096);
      boolean boolean1 = complex6.equals(complex7);
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex8 = complex6.divide(complex3);
      Complex complex9 = complex5.exp();
      double double1 = complex4.abs();
      double double2 = complex4.abs();
      Complex complex10 = complex2.exp();
      double double3 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.INF.createComplex(2401.51129, 2401.51129);
      Complex complex3 = complex0.sin();
      int int0 = complex3.hashCode();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.acos();
      Object object1 = complex3.I.readResolve();
      Complex complex4 = complex0.exp();
      List<Complex> list0 = complex4.nthRoot(138);
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex0.multiply(238.73358552643086);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.ZERO.pow(complex0);
      String string0 = complex2.INF.toString();
      Complex complex5 = complex0.NaN.multiply(complex1);
      double double0 = complex5.INF.abs();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.ZERO.createComplex(1219.78523941, 0.6666666269302368);
      Complex complex8 = complex6.ZERO.negate();
      Complex complex9 = complex1.INF.tan();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex0.asin();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex1.getField();
      Complex complex12 = complex1.multiply(complex9);
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex0.sqrt1z();
      Complex complex15 = complex5.asin();
      Complex complex16 = complex8.add(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.multiply(1.0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex3.sqrt();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-545.33), (-545.33));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-545.33), 91.3796);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.INF.cos();
      String string0 = complex0.toString();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.ONE.cos();
      Complex complex7 = complex5.createComplex((-1374.990748242), (-1374.990748242));
      Complex complex8 = complex7.pow(complex0);
      Complex complex9 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.ZERO.createComplex((-2530.862100478425), 934.6111);
      Complex complex5 = complex0.ONE.multiply((-2530.862100478425));
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex2.I.tan();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ONE.tan();
      double double0 = complex6.abs();
      Complex complex9 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex3.INF.asin();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex6.INF.pow(complex5);
      double double0 = complex6.I.getArgument();
      String string0 = complex1.toString();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex8.multiply(2.718281828459045);
      String string1 = complex9.toString();
      double double1 = complex1.getImaginary();
      double double2 = complex9.getReal();
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1828.827967478548), (-356.9487));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.I.atan();
      double double0 = complex1.ONE.getArgument();
      double double1 = complex1.ONE.abs();
      Complex complex3 = complex0.exp();
      double double2 = complex0.I.getArgument();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.ZERO.multiply(2336.0);
      double double3 = complex0.getImaginary();
      double double4 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.multiply(Double.NaN);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.createComplex(Double.NaN, 0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex4.multiply((-5152.4809561897355));
      Complex complex6 = complex5.I.sqrt();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.NaN.acos();
      double double0 = complex0.NaN.getArgument();
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      double double1 = complex2.INF.abs();
      Complex complex3 = complex0.multiply((-1682.70528174008));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.NaN.conjugate();
      String string0 = complex1.NaN.toString();
      ComplexField complexField0 = complex1.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.ONE.pow(complex5);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.NaN.createComplex(1765.348466, 1765.348466);
      Complex complex10 = complex9.INF.add(complex3);
      Complex complex11 = complex9.ZERO.tanh();
      String string1 = complex8.ONE.toString();
      Complex complex12 = complex4.add(complex0);
      double double0 = complex1.abs();
      int int0 = complex1.hashCode();
      Complex complex13 = complex3.atan();
      int int1 = complex13.ZERO.hashCode();
      boolean boolean0 = complex12.equals(complex7);
      Complex complex14 = complex7.subtract(complex3);
      Complex complex15 = complex14.INF.exp();
      Complex complex16 = complex7.I.createComplex(Double.NaN, Double.NaN);
      double double1 = complex16.I.getArgument();
      ComplexField complexField1 = complex15.ZERO.getField();
      Complex complex17 = complex12.exp();
      Complex complex18 = complex7.sinh();
      Complex complex19 = complex3.tanh();
      Complex complex20 = complex5.tan();
      String string2 = complex0.toString();
      Complex complex21 = complex8.asin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      double double0 = complex1.ONE.abs();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex1.NaN.conjugate();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = new Complex(0.0, 5487.25081437096);
      boolean boolean1 = complex5.equals(complex6);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex7 = complex5.divide(complex2);
      Complex complex8 = complex4.exp();
      double double1 = complex3.abs();
      double double2 = complex3.abs();
      Complex complex9 = complex1.exp();
      double double3 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      List<Complex> list0 = complex0.ONE.nthRoot(625);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex0.multiply(476.24492959662);
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex0.nthRoot(954);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(267.0, 1148.23528597);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1.7168146928204135), 0.0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.INF.createComplex((-1.0), (-1.0));
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.INF.atan();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply((-928.204095));
      Complex complex3 = complex0.multiply(complex1);
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.createComplex((-2214.1224204214), (-2214.1224204214));
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(311.59528722463, 311.59528722463);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.pow(complex0);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex4.I.cosh();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.createComplex((-3220.7127479761), (-3220.7127479761));
      Complex complex8 = complex3.atan();
      boolean boolean0 = complex7.isNaN();
      Complex complex9 = complex0.NaN.log();
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex11.INF.cosh();
      int int0 = complex11.ZERO.hashCode();
      ComplexField complexField1 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(599.0, 599.0);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.I.getField();
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.multiply(1274.4921);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.divide(complex1);
      List<Complex> list0 = complex0.ZERO.nthRoot(1333);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.NaN.createComplex(0.0, 2557.475474743314);
      Complex complex6 = complex3.conjugate();
      int int0 = complex1.hashCode();
      Complex complex7 = complex1.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.tan();
      List<Complex> list0 = complex0.nthRoot(112);
      List<Complex> list1 = complex0.nthRoot(112);
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.multiply(complex0);
      Complex complex2 = complex0.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.I.multiply(complex3);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.ZERO.acos();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(3031.8980396159977, (-2315.38));
      String string0 = complex0.INF.toString();
      String string1 = complex0.NaN.toString();
      Complex complex1 = complex0.I.createComplex((-2315.38), (-2315.38));
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.NaN.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.ZERO.cosh();
      double double0 = complex6.NaN.getArgument();
      Complex complex8 = complex0.ZERO.atan();
      Complex complex9 = complex8.ZERO.divide(complex6);
      double double1 = complex5.INF.abs();
      ComplexField complexField0 = complex5.getField();
      Complex complex10 = complex6.multiply(1024.0);
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex11.sqrt1z();
      ComplexField complexField1 = complex7.getField();
      Complex complex14 = complex10.subtract(complex6);
      Complex complex15 = complex12.exp();
      Complex complex16 = complex10.cosh();
      Complex complex17 = new Complex(1024.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex8.equals(complex17);
      Complex complex18 = complex10.atan();
      double double2 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex0.ONE.subtract(complex1);
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex5.I.sinh();
      List<Complex> list0 = complex7.INF.nthRoot(1067);
      String string0 = complex0.toString();
      Complex complex8 = complex3.I.divide(complex6);
      Object object0 = complex8.readResolve();
      Complex complex9 = complex0.ONE.asin();
      Complex complex10 = complex3.INF.log();
      Complex complex11 = complex9.NaN.cos();
      double double0 = complex9.INF.abs();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex12 = complex0.ONE.pow(complex9);
      int int0 = complex1.hashCode();
      Complex complex13 = complex4.asin();
      Complex complex14 = complex13.ONE.pow(complex1);
      boolean boolean0 = complex3.equals(complex9);
      double double1 = complex6.getReal();
      int int1 = complex2.hashCode();
      Complex complex15 = complex11.multiply(complex1);
      Complex complex16 = complex4.INF.divide(complex8);
      Complex complex17 = complex2.cosh();
      double double2 = complex6.getReal();
      Complex complex18 = complex0.I.cos();
      Complex complex19 = complex18.ONE.sqrt();
      Complex complex20 = complex9.log();
      Complex complex21 = complex17.sqrt();
      Complex complex22 = complex12.conjugate();
      Complex complex23 = complex14.sinh();
      Complex complex24 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sin();
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.INF.tanh();
      Complex complex7 = complex2.sin();
      boolean boolean0 = complex2.equals("aQQZhJ-yS+c`");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex1.NaN.tan();
      Complex complex6 = complex0.ONE.sinh();
      Complex complex7 = complex3.NaN.multiply(complex4);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.cosh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex10 = complex0.divide(complex9);
      double double0 = complex9.getArgument();
      Complex complex11 = complex3.sqrt();
      int int0 = complex9.hashCode();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex13.INF.tan();
      double double1 = complex3.getImaginary();
      Complex complex15 = complex13.I.exp();
      Complex complex16 = complex15.I.sqrt1z();
      Complex complex17 = complex15.INF.add(complex12);
      boolean boolean1 = complex9.isInfinite();
      int int1 = complex7.hashCode();
      Complex complex18 = complex7.asin();
      double double2 = complex4.getImaginary();
      double double3 = complex14.abs();
      double double4 = complex10.getArgument();
      Complex complex19 = complex0.sin();
      try { 
        complex19.nthRoot((-1530));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,530
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.tan();
      double double1 = complex3.ZERO.abs();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex0.createComplex(0.0, 6.283185307179586);
      Complex complex5 = complex4.ONE.multiply(complex2);
      double double2 = complex4.ZERO.abs();
      List<Complex> list0 = complex4.nthRoot(1162);
      Complex complex6 = complex5.ONE.divide(complex3);
      Complex complex7 = complex1.multiply(0.0);
      double double3 = complex5.INF.getArgument();
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex9.I.acos();
      Complex complex11 = complex5.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex12 = complex4.subtract(complex2);
      Complex complex13 = complex4.cos();
      int int0 = complex13.hashCode();
      boolean boolean0 = complex8.isInfinite();
      List<Complex> list1 = complex1.nthRoot(1162);
      Complex complex14 = complex5.add(complex9);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.ZERO.sqrt1z();
      String string0 = complex0.toString();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex1.INF.conjugate();
      List<Complex> list0 = complex0.nthRoot(1380);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex8.INF.log();
      Complex complex10 = complex6.subtract(complex7);
      Complex complex11 = complex8.acos();
      Complex complex12 = complex3.log();
      Complex complex13 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex2.ONE.conjugate();
      int int0 = 0;
      try { 
        complex4.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.NaN.conjugate();
      Object object1 = complex3.ZERO.readResolve();
      Object object2 = complex3.readResolve();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex2.INF.asin();
      Complex complex7 = complex4.NaN.divide(complex0);
      Complex complex8 = complex0.createComplex(1.0, (-529.28786730345));
      Complex complex9 = complex0.log();
      ComplexField complexField1 = complex8.getField();
      String string0 = complex8.toString();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex2.cos();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex3.negate();
      Complex complex14 = complex10.I.cosh();
      Complex complex15 = complex13.ONE.acos();
      double double1 = complex11.ZERO.getArgument();
      Complex complex16 = complex11.multiply(complex10);
      Complex complex17 = complex16.I.multiply(complex12);
      Complex complex18 = complex0.tanh();
      Complex complex19 = complex6.cosh();
      Complex complex20 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(1401.2061, 1401.2061);
      int int0 = (-2192);
      Complex complex1 = complex0.sqrt1z();
      List<Complex> list0 = complex1.ONE.nthRoot(279);
      try { 
        complex0.NaN.nthRoot((-2192));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,192
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
