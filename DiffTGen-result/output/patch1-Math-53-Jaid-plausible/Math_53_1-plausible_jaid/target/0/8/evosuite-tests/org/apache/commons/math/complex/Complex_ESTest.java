/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:29:25 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(372.0655, 2838.8201447);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ONE.multiply(0.0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.INF.sinh();
      String string0 = complex2.INF.toString();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.sinh();
      double double0 = complex1.ZERO.abs();
      Complex complex6 = complex5.multiply(2838.8201447);
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex0.ONE.sin();
      double double1 = complex5.getReal();
      Complex complex8 = complex1.NaN.add(complex5);
      Complex complex9 = complex0.conjugate();
      double double2 = complex2.ONE.getArgument();
      Complex complex10 = complex9.ZERO.multiply(complex1);
      Complex complex11 = complex10.INF.tanh();
      Object object0 = complex10.ONE.readResolve();
      Complex complex12 = complex0.sin();
      Complex complex13 = new Complex(2929.7319314, 0.0);
      Complex complex14 = complex12.NaN.subtract(complex13);
      Complex complex15 = complex9.INF.log();
      Complex complex16 = complex12.ZERO.tan();
      Complex complex17 = complex10.tan();
      Complex complex18 = complex0.subtract(complex3);
      Complex complex19 = complex2.createComplex(1.25, 6.283185307179586);
      int int1 = complex19.hashCode();
      Complex complex20 = complex8.sin();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = new Complex(309.7469, 2686.0);
      try { 
        complex4.I.nthRoot((-1207));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,207
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-4871.42334), 2229.528463293);
      Complex complex1 = new Complex(2229.528463293, (-0.3058015757857271));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.createComplex((-0.3058015757857271), 1.2599210498948732);
      Complex complex6 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1073.44584, 3.814697265625E-6);
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      double double0 = complex1.ONE.getArgument();
      String string0 = complex0.toString();
      Complex complex2 = null;
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.INF.log();
      double double0 = complex2.abs();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.log();
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex4.I.add(complex1);
      Complex complex6 = complex0.NaN.exp();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex7 = complex0.INF.cos();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex0.INF.divide(complex3);
      Object object0 = complex8.readResolve();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex2.divide(complex3);
      Complex complex13 = complex12.I.log();
      double double1 = complex11.abs();
      Complex complex14 = complex7.acos();
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex15.INF.tan();
      ComplexField complexField1 = complex8.getField();
      Complex complex17 = complex14.asin();
      Complex complex18 = complex13.createComplex((-1444.166861), (-3.141592653589793));
      Complex complex19 = complex9.negate();
      ComplexField complexField2 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-2069.5184748), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.I.createComplex((-2069.5184748), 0.0);
      Complex complex6 = complex1.createComplex((-218.45), (-2069.5184748));
      Complex complex7 = complex4.negate();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex11.NaN.pow(complex0);
      Complex complex13 = complex12.sqrt1z();
      boolean boolean0 = complex7.equals(complex8);
      double double0 = complex1.abs();
      Complex complex14 = complex1.exp();
      Complex complex15 = complex14.I.pow(complex3);
      double double1 = complex14.ZERO.abs();
      Complex complex16 = complex3.sinh();
      Complex complex17 = complex14.subtract(complex10);
      Complex complex18 = complex1.conjugate();
      Complex complex19 = complex1.asin();
      Complex complex20 = complex19.I.subtract(complex4);
      double double2 = complex1.abs();
      List<Complex> list0 = complex4.nthRoot(1028);
      Complex complex21 = complex16.add(complex11);
      boolean boolean1 = complex8.isNaN();
      Complex complex22 = complex18.cos();
      Object object0 = complex2.readResolve();
      boolean boolean2 = complex15.equals(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(3311.05328, (-648.38539));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.INF.tanh();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex0.negate();
      double double0 = complex2.INF.abs();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex5.sinh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.ONE.pow(complex9);
      Complex complex11 = new Complex((-648.38539), (-648.38539));
      boolean boolean0 = complex8.equals(complex11);
      Complex complex12 = complex8.sqrt1z();
      Complex complex13 = complex12.ONE.tan();
      Complex complex14 = complex0.sin();
      Object object0 = complex7.readResolve();
      Complex complex15 = complex10.multiply(0.0);
      Complex complex16 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sinh();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex5.sqrt();
      double double1 = complex7.getArgument();
      List<Complex> list0 = complex7.INF.nthRoot(1);
      Complex complex10 = complex6.atan();
      Complex complex11 = complex0.I.conjugate();
      String string0 = complex11.toString();
      Complex complex12 = complex10.I.add(complex2);
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex5.exp();
      ComplexField complexField0 = complex9.getField();
      Complex complex15 = complex11.tan();
      Complex complex16 = complex15.ONE.divide(complex10);
      List<Complex> list1 = complex4.nthRoot(1061);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-60.7548919558028), (-60.7548919558028));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(complex1);
      Object object1 = complex1.ONE.readResolve();
      Complex complex3 = new Complex((-60.7548919558028), (-60.7548919558028));
      List<Complex> list0 = complex3.NaN.nthRoot(1771);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.tan();
      Object object2 = complex6.NaN.readResolve();
      double double1 = complex0.ONE.abs();
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex8.ONE.sin();
      Complex complex11 = complex7.NaN.cos();
      Complex complex12 = complex0.divide(complex5);
      Complex complex13 = complex12.NaN.cos();
      int int0 = complex5.hashCode();
      Complex complex14 = complex5.multiply((-2695.78203649054));
      Object object3 = complex2.readResolve();
      Complex complex15 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.6366197723675814, 1253.9);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.sinh();
      double double0 = complex0.getArgument();
      double double1 = complex1.abs();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex0.tan();
      ComplexField complexField0 = complex9.ONE.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex10 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.I.conjugate();
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex1.INF.createComplex((-1598.27), 1440.343);
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex9.createComplex((-3331.673), (-3331.673));
      double double0 = complex0.getArgument();
      Complex complex11 = complex2.asin();
      Complex complex12 = complex10.NaN.createComplex((-3331.673), 0.0);
      Complex complex13 = complex6.acos();
      Complex complex14 = complex10.sqrt1z();
      Complex complex15 = complex9.conjugate();
      Complex complex16 = complex6.exp();
      Complex complex17 = complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.multiply(848.118);
      Complex complex9 = complex8.ONE.sqrt();
      double double0 = complex0.abs();
      Object object1 = complex0.readResolve();
      Object object2 = complex6.readResolve();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex10.multiply(complex8);
      Complex complex13 = complex12.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      List<Complex> list0 = complex0.nthRoot(50);
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex1.ONE.cos();
      Complex complex7 = complex1.NaN.exp();
      Complex complex8 = complex2.createComplex(1677.5, 0.0);
      Object object0 = complex1.readResolve();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.ZERO.createComplex(0.0, (-884.595370313));
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex10.tan();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1.7168146928204135), 3315.39);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.NaN.divide(complex2);
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.divide(complex2);
      Complex complex6 = complex5.NaN.asin();
      int int0 = complex6.I.hashCode();
      Complex complex7 = complex6.ONE.negate();
      int int1 = complex1.hashCode();
      Complex complex8 = complex4.multiply(1.5713141586455586);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex11.INF.tan();
      Complex complex13 = complex8.I.cos();
      Complex complex14 = null;
      try { 
        complex13.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2160.20450830913, 2160.20450830913);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.I.multiply(0.0);
      List<Complex> list0 = complex2.ONE.nthRoot(2381);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.INF.add(complex0);
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex4.INF.sqrt1z();
      Complex complex9 = complex1.cosh();
      String string0 = complex9.toString();
      Complex complex10 = complex4.ZERO.pow(complex0);
      Complex complex11 = complex10.NaN.sinh();
      Complex complex12 = complex11.ONE.divide(complex4);
      String string1 = complex1.toString();
      double double0 = complex10.getArgument();
      Complex complex13 = complex1.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.getReal();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      String string0 = complex1.ONE.toString();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.acos();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex3.NaN.sinh();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.log();
      Complex complex7 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.I.multiply((-3165.53846515));
      Complex complex5 = complex0.subtract(complex1);
      List<Complex> list0 = complex5.nthRoot(4628);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.exp();
      double double0 = complex0.getReal();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex0.createComplex(4818.845574813, 4818.845574813);
      Complex complex7 = complex1.NaN.pow(complex0);
      Complex complex8 = complex0.ONE.subtract(complex1);
      Complex complex9 = complex6.ONE.subtract(complex1);
      Complex complex10 = complex8.sinh();
      String string0 = complex0.toString();
      List<Complex> list0 = complex1.ONE.nthRoot(324);
      List<Complex> list1 = complex1.I.nthRoot(324);
      Complex complex11 = complex0.sqrt1z();
      List<Complex> list2 = complex6.ONE.nthRoot(324);
      String string1 = complex1.toString();
      double double0 = complex7.getImaginary();
      String string2 = complex6.toString();
      Complex complex12 = complex8.ZERO.pow(complex11);
      Complex complex13 = complex0.multiply((double) 324);
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex14.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex16 = complex3.add(complex8);
      Object object1 = complex11.readResolve();
      double double1 = complex3.INF.getArgument();
      double double2 = complex2.getReal();
      ComplexField complexField0 = complex16.getField();
      Complex complex17 = complex1.sqrt1z();
      Complex complex18 = complex17.NaN.tan();
      Complex complex19 = complex2.cos();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex0.getArgument();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex6.cosh();
      double double2 = complex1.getArgument();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.INF.divide(complex0);
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ONE.exp();
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.tanh();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex4.INF.sin();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex2.divide(complex3);
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex9.NaN.createComplex(1.5707963267948966, 1.5707963267948966);
      Object object1 = complex9.readResolve();
      Complex complex13 = complex5.sin();
      Complex complex14 = complex13.ZERO.cos();
      Complex complex15 = complex5.multiply(complex2);
      Complex complex16 = complex5.acos();
      Complex complex17 = complex2.add(complex3);
      Complex complex18 = complex0.cos();
      Object object2 = new Object();
      boolean boolean0 = complex2.equals(object2);
      boolean boolean1 = complex13.isInfinite();
      Complex complex19 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.divide(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.INF.asin();
      double double0 = complex1.getArgument();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex1.ZERO.atan();
      Object object0 = complex1.readResolve();
      int int0 = complex5.hashCode();
      boolean boolean1 = complex2.equals(object0);
      double double1 = complex1.getArgument();
      String string0 = complex5.I.toString();
      Complex complex7 = complex0.NaN.createComplex(0.0, (-1.0));
      Complex complex8 = complex7.NaN.multiply(complex4);
      boolean boolean2 = complex0.isInfinite();
      int int1 = complex5.hashCode();
      Complex complex9 = complex5.add(complex6);
      boolean boolean3 = complex1.isNaN();
      Complex complex10 = complex9.add(complex3);
      Complex complex11 = complex1.atan();
      Complex complex12 = complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.multiply((-0.3058015757857271));
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex0.sinh();
      List<Complex> list0 = complex6.INF.nthRoot(112);
      int int1 = complex5.hashCode();
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex5.ZERO.subtract(complex2);
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1319.0439), 0.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.createComplex(0.0, (-3272.946109174136));
      Object object0 = complex0.I.readResolve();
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(2734.4772, 6.283185307179586);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.createComplex(6.123233995736766E-17, 6.123233995736766E-17);
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.negate();
      int int0 = complex3.ZERO.hashCode();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1.0);
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1406.9, (-0.33333333333333287));
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.I.subtract(complex0);
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.cos();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex8 = complex1.subtract(complex6);
      Object object1 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex2.divide(complex1);
      double double0 = complex1.getArgument();
      Complex complex5 = complex3.I.multiply(complex4);
      Complex complex6 = complex3.INF.acos();
      String string0 = complex1.ZERO.toString();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex4.add(complex3);
      String string1 = complex9.ONE.toString();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex4.divide(complex9);
      Complex complex12 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-644.59315), (-644.59315));
      Complex complex1 = complex0.cosh();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex3.exp();
      double double1 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.acos();
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.tan();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.INF.exp();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex1.ZERO.negate();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex2.INF.pow(complex3);
      try { 
        complex6.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.acos();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex0.conjugate();
      Object object0 = complex3.readResolve();
      List<Complex> list0 = complex3.nthRoot(603);
      Complex complex5 = complex3.multiply(1.7029898543501842E-8);
      Complex complex6 = complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex4);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex1.createComplex((-1.0), 0.0);
      Complex complex7 = complex6.NaN.divide(complex1);
      boolean boolean1 = complex3.isNaN();
      Complex complex8 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      double double0 = complex0.I.abs();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.ZERO.multiply(Double.NaN);
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      double double0 = complex1.INF.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(935.92049251, (-5134.592099757));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.ONE.exp();
      double double0 = complex3.getArgument();
      Complex complex5 = complex0.ZERO.createComplex((-1.3904982653939797), 3034.7627);
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex6.ONE.cos();
      ComplexField complexField0 = complex1.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = complex2.pow(complex3);
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex9.ZERO.createComplex(0.0, 3034.7627);
      Complex complex11 = complex2.log();
      String string0 = complex8.toString();
      Complex complex12 = complex9.log();
      Complex complex13 = complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(3111.5, 3111.5);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.createComplex(1833.6362910095163, 1833.6362910095163);
      Complex complex4 = complex0.NaN.add(complex1);
      Object object0 = complex1.NaN.readResolve();
      Complex complex5 = new Complex(3111.5, 3111.5);
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.add(complex0);
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex0.add(complex4);
      List<Complex> list0 = complex2.nthRoot(103);
      Complex complex12 = complex0.acos();
      Complex complex13 = complex1.atan();
      boolean boolean0 = complex12.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex4.createComplex(1731.1337870194, 1731.1337870194);
      boolean boolean0 = complex1.isInfinite();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = complex6.atan();
      double double0 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(-0.0, -0.0);
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.ONE.atan();
      String string0 = complex0.toString();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.I.sqrt1z();
      String string0 = complex1.NaN.toString();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1110.533), 0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex3.getReal();
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.NaN.pow(complex4);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex6 = complex0.multiply(complex2);
      ComplexField complexField1 = complex6.ZERO.getField();
      int int0 = complex6.hashCode();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.ONE.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.cos();
      String string1 = complex1.NaN.toString();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.tanh();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex5 = complex2.multiply(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex1.multiply(complex3);
      double double0 = complex2.getImaginary();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(824.118, 1417.6);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      boolean boolean0 = complex0.isNaN();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.ONE.exp();
      int int1 = (-929);
      try { 
        complex4.INF.nthRoot((-929));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -929
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.ZERO.cosh();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.cos();
      double double0 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.createComplex((-8018.34063971857), (-8018.34063971857));
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex2.NaN.subtract(complex3);
      ComplexField complexField0 = complex2.ZERO.getField();
      String string0 = complex2.toString();
      double double0 = complex2.getReal();
      Complex complex6 = complex5.exp();
      double double1 = complex6.abs();
      double double2 = complex2.ONE.abs();
      Complex complex7 = complex3.INF.tan();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.pow(complex10);
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex8.asin();
      Complex complex14 = complex4.multiply(Double.NaN);
      String string1 = complex13.toString();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex1.acos();
      Complex complex17 = new Complex(0.0, 0.0);
      Complex complex18 = complex7.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.I.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex1.NaN.sin();
      Complex complex8 = complex7.NaN.sqrt();
      int int0 = complex1.hashCode();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex9 = complex4.atan();
      boolean boolean0 = complex4.isInfinite();
      Complex complex10 = complex5.cos();
      Complex complex11 = complex10.ONE.createComplex(0.0, 0.0);
      Complex complex12 = complex5.ZERO.tan();
      Complex complex13 = complex6.pow(complex1);
      Complex complex14 = complex9.INF.sinh();
      double double1 = complex14.abs();
      ComplexField complexField0 = complex14.I.getField();
      Complex complex15 = complex4.ONE.sin();
      boolean boolean1 = complex6.isNaN();
      Complex complex16 = complex9.cos();
      Complex complex17 = complex7.sqrt1z();
      double double2 = complex17.abs();
      try { 
        complex0.nthRoot((-2545));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,545
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex6.INF.tanh();
      Complex complex9 = complex2.I.createComplex(0.0, 0.0);
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex1.ZERO.negate();
      Complex complex12 = complex2.log();
      String string0 = complex12.INF.toString();
      Complex complex13 = complex5.asin();
      Complex complex14 = complex13.INF.tan();
      Complex complex15 = complex8.ONE.sqrt1z();
      Complex complex16 = complex1.cos();
      double double0 = complex8.getReal();
      Complex complex17 = complex5.cosh();
      double double1 = complex6.abs();
      Complex complex18 = complex11.tanh();
      Complex complex19 = complex18.ZERO.tan();
      Complex complex20 = complex18.INF.asin();
      boolean boolean0 = complex14.isInfinite();
      Complex complex21 = complex10.acos();
      Complex complex22 = complex8.I.multiply(0.0);
      Complex complex23 = complex13.tanh();
      String string1 = complex12.toString();
      Complex complex24 = complex20.sqrt();
      double double2 = complex16.getImaginary();
      boolean boolean1 = complex20.isNaN();
      double double3 = complex8.getReal();
      Complex complex25 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex1.NaN.subtract(complex0);
      double double1 = complex4.getArgument();
      Complex complex6 = complex3.ONE.asin();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.equals((Object) null);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex3.ZERO.sqrt1z();
      List<Complex> list0 = complex8.ONE.nthRoot(1);
      Complex complex9 = complex2.atan();
      Complex complex10 = complex0.createComplex(0.0, 0.0);
      Complex complex11 = complex6.log();
      Complex complex12 = complex2.cos();
      Complex complex13 = complex0.multiply(complex3);
      ComplexField complexField0 = complex1.getField();
      boolean boolean2 = complex0.equals(complex6);
      Complex complex14 = complex5.multiply(complex11);
      Complex complex15 = complex0.divide(complex1);
      Complex complex16 = complex4.log();
      Complex complex17 = complex16.createComplex(1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.NaN.sinh();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex2.I.add(complex0);
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.tanh();
      int int1 = complex0.hashCode();
      Complex complex5 = complex0.createComplex(0.0, 652.31090527375);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.I.exp();
      double double1 = complex6.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex4.nthRoot((-1249));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,249
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.ONE.sin();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex0.I.getField();
      ComplexField complexField1 = complex1.NaN.getField();
      String string1 = complex0.toString();
      Complex complex7 = complex5.sin();
      double double0 = complex5.INF.getArgument();
      int int0 = complex5.hashCode();
      String string2 = complex7.INF.toString();
      Complex complex8 = complex1.NaN.tan();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex6.tanh();
      Complex complex11 = Complex.ZERO;
      List<Complex> list0 = complex5.I.nthRoot(1);
      Complex complex12 = complex10.multiply(complex11);
      Complex complex13 = complex7.ONE.sinh();
      Complex complex14 = complex10.createComplex((-3.141592653589793), (-3.141592653589793));
      Complex complex15 = complex7.acos();
      Complex complex16 = complex15.I.pow(complex5);
      Complex complex17 = complex6.multiply((-3.141592653589793));
      Complex complex18 = complex5.sqrt();
      ComplexField complexField2 = complex15.getField();
      Complex complex19 = complex7.createComplex((-3.141592653589793), 0.7853981633974483);
      Complex complex20 = complex19.NaN.sqrt1z();
      boolean boolean0 = complex17.isInfinite();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.createComplex(0.7853981633974483, 0.7853981633974483);
      String string0 = complex0.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.I.log();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex6.NaN.negate();
      List<Complex> list0 = complex5.nthRoot(73);
      Complex complex8 = complex1.cos();
      Complex complex9 = complex5.ZERO.tan();
      ComplexField complexField0 = complex9.ONE.getField();
      Complex complex10 = complex2.ONE.acos();
      double double1 = complex8.I.abs();
      String string1 = complex5.toString();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex1.multiply(complex5);
      Complex complex13 = complex8.sin();
      boolean boolean0 = complex8.equals(complex2);
      Complex complex14 = complex3.createComplex(0.7853981633974483, 73);
      Complex complex15 = complex8.negate();
      Complex complex16 = complex0.INF.atan();
      Complex complex17 = complex14.divide(complex12);
      Complex complex18 = complex5.INF.cosh();
      Complex complex19 = complex12.tanh();
      boolean boolean1 = complex13.isNaN();
      ComplexField complexField1 = complex3.getField();
      Complex complex20 = complex8.sqrt();
      Complex complex21 = complex13.sin();
      Complex complex22 = complex17.cos();
      Complex complex23 = complex5.log();
      boolean boolean2 = complex9.equals(complex10);
      Complex complex24 = complex12.subtract(complex9);
      Complex complex25 = complex2.negate();
      Complex complex26 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ZERO.createComplex(Double.NaN, 2142.6668532127824);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.multiply(complex0);
      double double0 = complex0.getArgument();
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.negate();
      double double1 = complex3.ONE.getArgument();
      String string0 = complex3.toString();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex5.I.sqrt();
      double double2 = complex6.abs();
      double double3 = complex0.abs();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex7.createComplex(1.0, Double.NaN);
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex4.add(complex0);
      Complex complex11 = complex8.atan();
      List<Complex> list0 = complex11.ZERO.nthRoot(1);
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.NaN.createComplex(1.0, (-187.572272552422));
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex1.createComplex(1104.686, (-363.75634456942174));
      Complex complex9 = complex2.pow(complex0);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex11.I.sinh();
      Complex complex13 = complex1.asin();
      Complex complex14 = complex13.ZERO.sqrt();
      Complex complex15 = complex2.add(complex6);
      Complex complex16 = complex14.negate();
      Complex complex17 = complex1.cos();
      int int0 = complex6.hashCode();
      Complex complex18 = complex1.multiply((-363.75634456942174));
      double double1 = complex8.abs();
  }
}
