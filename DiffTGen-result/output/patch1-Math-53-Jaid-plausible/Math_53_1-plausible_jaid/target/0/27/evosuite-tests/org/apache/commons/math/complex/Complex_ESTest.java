/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:36:39 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ONE.divide(complex2);
      Complex complex5 = complex2.I.add(complex3);
      List<Complex> list0 = complex5.I.nthRoot(613);
      Complex complex6 = complex2.ONE.conjugate();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex2.multiply(2.0);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex7.divide(complex9);
      Object object0 = complex7.readResolve();
      Complex complex11 = complex10.ONE.asin();
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex12.INF.exp();
      Complex complex14 = complex2.NaN.add(complex9);
      Complex complex15 = complex10.ZERO.createComplex(314.15, 314.15);
      double double0 = complex14.ZERO.getArgument();
      Complex complex16 = complex9.I.exp();
      Object object1 = complex16.NaN.readResolve();
      Complex complex17 = complex10.multiply(1059.5086463264663);
      Complex complex18 = complex6.subtract(complex17);
      String string0 = complex18.ZERO.toString();
      Complex complex19 = complex15.negate();
      Complex complex20 = complex10.sinh();
      List<Complex> list1 = complex8.nthRoot(613);
      Complex complex21 = complex14.sqrt();
      Complex complex22 = complex21.sqrt();
      Complex complex23 = complex18.acos();
      Complex complex24 = complex21.subtract(complex2);
      Complex complex25 = complex19.conjugate();
      Complex complex26 = complex24.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      List<Complex> list0 = complex0.NaN.nthRoot(226);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.sqrt();
      int int0 = complex7.INF.hashCode();
      double double0 = complex5.ONE.abs();
      Complex complex8 = complex0.NaN.sqrt1z();
      Complex complex9 = (Complex)complex8.ZERO.readResolve();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex1.add(complex5);
      Complex complex13 = complex10.NaN.asin();
      Complex complex14 = complex11.INF.negate();
      Complex complex15 = complex8.multiply(complex10);
      Complex complex16 = complex15.NaN.subtract(complex12);
      boolean boolean0 = complex3.equals(complex11);
      Complex complex17 = Complex.NaN;
      Complex complex18 = complex2.NaN.sinh();
      Complex complex19 = complex17.multiply(0.0);
      int int1 = complex15.hashCode();
      Complex complex20 = complex19.acos();
      boolean boolean1 = complex11.isInfinite();
      Complex complex21 = complex2.NaN.multiply((-4039.489));
      Complex complex22 = complex3.tan();
      List<Complex> list1 = complex7.nthRoot(226);
      Complex complex23 = complex9.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(398.0091101892, 398.0091101892);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.cos();
      Object object0 = complex3.INF.readResolve();
      boolean boolean0 = complex3.equals(complex0);
      Object object1 = complex3.readResolve();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.divide(complex2);
      double double0 = complex0.getArgument();
      Complex complex6 = complex2.sin();
      int int0 = complex6.ZERO.hashCode();
      Complex complex7 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1003.474054, (-4848.17775));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.ZERO.multiply(948.5216);
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.ONE.multiply(2.0);
      Complex complex10 = complex4.sqrt1z();
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
      Complex complex11 = complex7.cosh();
      Complex complex12 = complex7.ONE.negate();
      Complex complex13 = complex11.NaN.atan();
      Complex complex14 = complex11.conjugate();
      Complex complex15 = complex8.tanh();
      Complex complex16 = complex2.tanh();
      Complex complex17 = complex0.ONE.tan();
      ComplexField complexField0 = complex7.getField();
      int int1 = complex8.hashCode();
      boolean boolean1 = complex8.isNaN();
      boolean boolean2 = complex11.equals(complex12);
      Complex complex18 = complex3.tan();
      Complex complex19 = complex8.log();
      Complex complex20 = complex4.exp();
      boolean boolean3 = complex16.isInfinite();
      Complex complex21 = complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex2.INF.multiply(Double.NaN);
      double double1 = complex1.abs();
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex5.sqrt1z();
      double double2 = complex0.abs();
      Complex complex7 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(0.008336750013465571, 0.008336750013465571);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.ZERO.multiply(0.008336750013465571);
      Complex complex7 = complex3.INF.sin();
      Complex complex8 = complex4.INF.acos();
      Complex complex9 = complex6.ONE.tan();
      Complex complex10 = complex5.I.exp();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex11.ZERO.divide(complex4);
      Object object0 = complex12.I.readResolve();
      // Undeclared exception!
      try { 
        complex2.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex3.I.sqrt();
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex1.ONE.subtract(complex0);
      Complex complex7 = complex1.multiply(Double.NaN);
      Complex complex8 = complex7.ZERO.multiply(6.283185307179586);
      Complex complex9 = complex5.subtract(complex3);
      double double1 = complex2.getImaginary();
      double double2 = complex3.getReal();
      double double3 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1709.512224154705), (-1.0));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.sin();
      List<Complex> list0 = complex4.ZERO.nthRoot(1);
      Object object0 = complex8.readResolve();
      double double0 = complex8.INF.getArgument();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex9.divide(complex8);
      Complex complex11 = complex9.I.asin();
      try { 
        complex6.nthRoot((-831));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -831
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.ZERO.conjugate();
      double double0 = complex2.I.abs();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex2.sqrt();
      int int0 = complex2.hashCode();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex6.ONE.cos();
      double double1 = complex8.ZERO.abs();
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.INF.createComplex(0.0, 0.0);
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex0.subtract(complex2);
      Complex complex15 = complex0.pow(complex14);
      Complex complex16 = complex14.sqrt1z();
      Complex complex17 = complex6.cosh();
      Complex complex18 = complex16.add(complex7);
      boolean boolean2 = complex7.isNaN();
      Complex complex19 = complex15.exp();
      Object object0 = complex14.readResolve();
      Complex complex20 = complex3.cos();
      Complex complex21 = complex14.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-3755.8319101034544), 3013.3907);
      Complex complex1 = Complex.NaN;
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.subtract(complex1);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.conjugate();
      ComplexField complexField1 = complex5.ZERO.getField();
      int int0 = complex5.hashCode();
      Complex complex6 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.atan();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.equals(complex3);
      double double1 = complex3.ZERO.getArgument();
      Complex complex4 = complex0.I.createComplex(1.0, 0.0);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex2.ZERO.cosh();
      Complex complex7 = complex6.ZERO.pow(complex2);
      try { 
        complex6.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.I.atan();
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.createComplex(0.0, Double.POSITIVE_INFINITY);
      int int0 = complex5.ONE.hashCode();
      double double0 = complex5.abs();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.NaN.atan();
      Complex complex8 = complex0.ZERO.multiply(complex4);
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex10.ZERO.sinh();
      boolean boolean0 = complex5.isInfinite();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex12.NaN.sin();
      Complex complex14 = complex6.pow(complex12);
      double double1 = complex0.abs();
      double double2 = complex10.getReal();
      Complex complex15 = complex8.sqrt();
      Complex complex16 = complex5.tanh();
      ComplexField complexField1 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-5835.54992), (-5835.54992));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = complex8.ONE.subtract(complex2);
      Complex complex10 = complex0.divide(complex2);
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex5.ONE.sqrt1z();
      Complex complex15 = complex5.subtract(complex11);
      Complex complex16 = complex15.I.pow(complex8);
      Complex complex17 = complex7.negate();
      double double0 = complex17.abs();
      Complex complex18 = complex13.multiply(complex0);
      Complex complex19 = complex2.divide(complex18);
      ComplexField complexField0 = complex12.getField();
      boolean boolean0 = complex12.isNaN();
      Complex complex20 = complex10.tan();
      Complex complex21 = complex4.createComplex((-92.72428293), (-92.72428293));
      String string0 = complex1.toString();
      Complex complex22 = complex18.atan();
      double double1 = complex8.getReal();
      Complex complex23 = complex12.asin();
      Complex complex24 = complex7.asin();
      ComplexField complexField1 = complex22.getField();
      Complex complex25 = complex0.multiply(1523.982300495);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(122.06, 122.06);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.divide(complex3);
      Complex complex8 = complex7.ONE.log();
      double double0 = complex6.getReal();
      Complex complex9 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(3517.2788436541236, 1289.7913050224);
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.abs();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.createComplex(1289.7913050224, 3517.2788436541236);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex2.multiply(0.0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.NaN.multiply(complex2);
      Complex complex8 = complex2.ZERO.acos();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex6.ZERO.tan();
      ComplexField complexField0 = complex9.getField();
      String string0 = complex6.toString();
      Complex complex12 = complex0.INF.subtract(complex6);
      Complex complex13 = complex1.log();
      Complex complex14 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex6.ZERO.add(complex2);
      String string0 = complex0.toString();
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex5.pow(complex2);
      int int0 = complex10.NaN.hashCode();
      Complex complex11 = complex0.sin();
      boolean boolean1 = complex3.equals("(0.0, 1.0)");
      Complex complex12 = complex11.ZERO.tan();
      int int1 = complex1.hashCode();
      Complex complex13 = complex10.log();
      Complex complex14 = complex11.cos();
      Complex complex15 = complex4.createComplex((-1632.941127), (-1632.941127));
      Complex complex16 = complex12.multiply((-1632.941127));
      Complex complex17 = complex2.log();
      Complex complex18 = complex12.cosh();
      Complex complex19 = complex8.multiply(complex18);
      Complex complex20 = complex0.sqrt();
      Complex complex21 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex1.INF.acos();
      Complex complex5 = complex1.ONE.createComplex(3467.11604, 3467.11604);
      Complex complex6 = complex0.I.multiply(complex1);
      String string0 = complex0.toString();
      String string1 = complex5.toString();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex7.NaN.createComplex(0.01745329052209854, 0.167);
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex7.acos();
      boolean boolean0 = complex4.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.negate();
      double double0 = complex1.I.abs();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.I.cos();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.ZERO.sqrt1z();
      Complex complex10 = complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(Double.NaN);
      Complex complex2 = complex0.asin();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.ZERO.add(complex3);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex3.cos();
      boolean boolean1 = complex6.isNaN();
      Complex complex7 = complex3.ONE.asin();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-1853.04464966464));
      Complex complex1 = complex0.I.log();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.multiply(415.762404);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.ONE.subtract(complex1);
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex7.INF.createComplex(0.0, 0.0);
      Complex complex10 = complex0.conjugate();
      double double1 = complex5.getImaginary();
      Complex complex11 = complex7.pow(complex2);
      double double2 = complex8.abs();
      Complex complex12 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = Complex.ZERO;
      int int0 = complex0.ONE.hashCode();
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex0.divide(complex3);
      double double0 = complex2.getArgument();
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex7.ZERO.add(complex1);
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-2222.21536888), (-2222.21536888));
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.asin();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex1.multiply(Double.NaN);
      Complex complex4 = complex2.multiply(Double.NaN);
      ComplexField complexField1 = complex3.I.getField();
      double double1 = complex3.abs();
      String string0 = complex0.toString();
      Complex complex5 = complex1.multiply(complex2);
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex3.multiply(Double.NaN);
      double double2 = complex7.abs();
      Complex complex8 = complex2.divide(complex7);
      int int0 = complex2.hashCode();
      double double3 = complex7.getReal();
      String string1 = complex7.toString();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex10.INF.divide(complex8);
      Complex complex12 = complex11.multiply(Double.NaN);
      double double4 = complex2.getImaginary();
      Complex complex13 = complex10.conjugate();
      Complex complex14 = complex13.ZERO.sinh();
      Complex complex15 = complex5.createComplex(740.9367, Double.NaN);
      Object object1 = complex8.readResolve();
      Complex complex16 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(688.9195031263, 0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex0.INF.exp();
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex0.sin();
      int int0 = complex5.hashCode();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex0.I.cos();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex0.ZERO.tanh();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      ComplexField complexField0 = complex0.ZERO.getField();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex8.ZERO.exp();
      int int0 = complex9.ZERO.hashCode();
      Complex complex10 = complex3.ZERO.cos();
      Complex complex11 = complex6.I.sqrt();
      Complex complex12 = complex11.INF.pow(complex3);
      Complex complex13 = complex0.asin();
      Complex complex14 = complex13.I.createComplex(Double.POSITIVE_INFINITY, 9.140260083262505E-9);
      Complex complex15 = complex0.sin();
      double double0 = complex6.getArgument();
      Complex complex16 = complex14.sqrt1z();
      Complex complex17 = complex10.cosh();
      Complex complex18 = complex2.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(3613.0);
      int int0 = complex0.I.hashCode();
      int int1 = complex0.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.I.log();
      int int2 = complex4.INF.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex5.log();
      double double0 = complex5.getArgument();
      Complex complex7 = complex6.log();
      int int3 = complex7.I.hashCode();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.add(complex3);
      Complex complex11 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.acos();
      double double1 = complex0.getReal();
      Complex complex5 = complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ONE.multiply((-509.9702190439916));
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.tan();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ONE.exp();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.pow(complex2);
      Complex complex5 = complex0.ZERO.multiply(complex2);
      double double0 = complex3.abs();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex3.INF.multiply(1700.0384683219);
      Complex complex8 = complex1.NaN.multiply(complex3);
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex6.pow(complex3);
      double double1 = complex1.getArgument();
      Complex complex10 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.I.negate();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.I.acos();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex1.exp();
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex0.asin();
      String string0 = complex5.ONE.toString();
      ComplexField complexField1 = complex5.ZERO.getField();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.ONE.sinh();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex6.sqrt1z();
      String string1 = complex0.toString();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.conjugate();
      double double0 = complex0.ONE.abs();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double1 = complex0.getArgument();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex2.cosh();
      List<Complex> list0 = complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      double double0 = complex1.I.abs();
      double double1 = complex0.abs();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.ZERO.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex1.sin();
      ComplexField complexField1 = complex1.getField();
      double double2 = complex5.getReal();
      Complex complex9 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.ZERO.divide(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      Complex complex6 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1293.06935));
      Complex complex1 = complex0.ZERO.exp();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.exp();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex0.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex6.ONE.cosh();
      double double0 = complex3.abs();
      double double1 = complex2.abs();
      Complex complex8 = complex3.multiply(complex6);
      List<Complex> list0 = complex6.nthRoot(823);
      Complex complex9 = complex7.cosh();
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      int int0 = (-168);
      try { 
        complex0.ZERO.nthRoot((-168));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -168
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.I.exp();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.ZERO.tanh();
      Complex complex7 = complex0.NaN.tanh();
      Complex complex8 = complex7.asin();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex7.abs();
      Complex complex9 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.subtract(complex0);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex5 = complex0.negate();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.cos();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.INF.toString();
      String string1 = complex0.I.toString();
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex((-387.1560919051994), 2.0);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.ONE.multiply(Double.NaN);
      Complex complex7 = complex1.pow(complex4);
      Complex complex8 = complex2.pow(complex0);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex3.pow(complex5);
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-494.3), (-494.3));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = new Complex((-494.3), (-494.3));
      Complex complex4 = complex0.INF.multiply(complex3);
      List<Complex> list0 = complex0.ONE.nthRoot(846);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.atan();
      List<Complex> list1 = complex6.ZERO.nthRoot(846);
      Complex complex7 = complex0.asin();
      boolean boolean0 = complex5.equals((Object) null);
      Complex complex8 = complex7.acos();
      double double0 = complex4.getReal();
      double double1 = complex8.abs();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex1.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex0.NaN.exp();
      Complex complex8 = complex7.INF.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex6.atan();
      Complex complex12 = complex9.negate();
      Complex complex13 = complex10.tan();
      Complex complex14 = complex7.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.ZERO.cosh();
      List<Complex> list0 = complex0.nthRoot(235);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = null;
      try { 
        complex2.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(638.0295, (-671.7));
      Complex complex1 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sin();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.ZERO.log();
      double double0 = complex2.abs();
      Complex complex7 = complex0.multiply(complex3);
      String string1 = complex7.I.toString();
      Complex complex8 = complex0.divide(complex3);
      int int0 = complex3.hashCode();
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.INF.multiply(6.283185307179586);
      Complex complex5 = complex0.INF.add(complex1);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.pow(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.I.conjugate();
      String string0 = complex3.toString();
      Complex complex4 = complex3.I.multiply(Double.NaN);
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1345.7694159999078), 1.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.sqrt1z();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex((-4112.432397165), (-2460.752898588273));
      List<Complex> list0 = complex1.INF.nthRoot(1);
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex5.ZERO.add(complex4);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-2039.41493167321), (-2039.41493167321));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.cosh();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1.2599210498948732, 1.2599210498948732);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex1.createComplex(1.2599210498948732, 1.2599210498948732);
      Complex complex8 = complex6.pow(complex0);
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex6.multiply(1.2599210498948732);
      Object object0 = complex1.INF.readResolve();
      Complex complex10 = complex0.I.cos();
      Complex complex11 = complex8.add(complex1);
      Complex complex12 = complex8.exp();
      Complex complex13 = complex12.NaN.sinh();
      Complex complex14 = complex13.I.multiply(complex4);
      Complex complex15 = complex14.INF.atan();
      Complex complex16 = complex8.negate();
      try { 
        complex7.nthRoot((-2824));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,824
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex0.ONE.cosh();
      Complex complex5 = complex3.INF.cos();
      boolean boolean0 = complex1.isInfinite();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ZERO.sinh();
      ComplexField complexField0 = complex2.ONE.getField();
      String string0 = complex1.toString();
      Complex complex4 = complex0.INF.acos();
      Object object0 = complex3.ONE.readResolve();
      Complex complex5 = complex0.I.cos();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.NaN.sqrt();
      List<Complex> list0 = complex6.nthRoot(2062);
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex9.ONE.divide(complex0);
      List<Complex> list1 = complex10.ZERO.nthRoot(2062);
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex6.add(complex7);
      Complex complex13 = complex12.ONE.multiply(complex11);
      Complex complex14 = complex2.divide(complex8);
      Complex complex15 = complex14.add(complex4);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.sqrt();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.getReal();
      Complex complex3 = complex0.exp();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(0.19999999999923582, 0.19999999999923582);
      List<Complex> list0 = complex0.nthRoot(23);
      double double0 = complex0.getImaginary();
      String string0 = complex0.toString();
      Complex complex2 = complex0.ZERO.multiply((double) 23);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex4.exp();
      double double0 = complex0.ONE.getArgument();
      Complex complex6 = complex1.NaN.sqrt();
      Complex complex7 = complex6.INF.tanh();
      ComplexField complexField0 = complex0.ZERO.getField();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex7.ONE.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex8.ZERO.multiply(complex0);
      Complex complex10 = complex1.divide(complex7);
      Complex complex11 = complex10.I.asin();
      int int0 = complex10.hashCode();
      boolean boolean1 = complex8.isInfinite();
      Object object1 = new Object();
      boolean boolean2 = complex11.equals(object1);
      Complex complex12 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(485.7, 485.7);
      Complex complex1 = complex0.I.sinh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex0.negate();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex0.exp();
      double double0 = complex7.ONE.abs();
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex7.NaN.conjugate();
      Complex complex10 = complex9.atan();
      boolean boolean0 = complex0.isNaN();
      List<Complex> list0 = complex7.I.nthRoot(590);
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex0.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.087, 2.356194490192345);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ZERO.multiply(0.087);
      Complex complex7 = complex4.INF.add(complex1);
      Complex complex8 = complex3.INF.multiply(0.0);
      Complex complex9 = complex6.divide(complex5);
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex0.subtract(complex1);
      Complex complex12 = complex9.NaN.createComplex(2.356194490192345, 2.356194490192345);
      int int0 = complex12.NaN.hashCode();
      Complex complex13 = complex12.NaN.exp();
      Complex complex14 = complex12.NaN.negate();
      Complex complex15 = complex9.conjugate();
      Complex complex16 = complex10.INF.conjugate();
      Complex complex17 = Complex.ONE;
      double double0 = complex1.ONE.getArgument();
      Complex complex18 = complex6.INF.subtract(complex17);
      Complex complex19 = complex5.negate();
      Complex complex20 = complex19.ONE.divide(complex1);
      Complex complex21 = complex4.cosh();
      Complex complex22 = complex6.add(complex3);
      Complex complex23 = complex2.negate();
      Complex complex24 = complex23.tan();
      Complex complex25 = complex7.cosh();
      Complex complex26 = complex19.I.exp();
      double double1 = complex2.abs();
      Complex complex27 = complex7.subtract(complex10);
      boolean boolean0 = complex19.equals(complex4);
      Complex complex28 = complex2.cosh();
      Complex complex29 = complex11.pow(complex22);
      Complex complex30 = complex27.sin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.log();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex1.ONE.negate();
      try { 
        complex1.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
