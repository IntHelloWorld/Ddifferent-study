/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:25:46 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.ZERO.multiply(1842.584867);
      Complex complex4 = complex3.INF.multiply(1842.584867);
      List<Complex> list0 = complex4.nthRoot(1011);
      double double0 = complex3.ZERO.getArgument();
      Complex complex5 = complex3.NaN.sinh();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.log();
      Complex complex8 = complex1.sqrt1z();
      double double1 = complex0.getArgument();
      Complex complex9 = complex4.multiply(0.7853981633974483);
      double double2 = complex0.getReal();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex3.subtract(complex0);
      Complex complex12 = complex11.negate();
      boolean boolean0 = complex4.equals(complex12);
      String string0 = complex11.ONE.toString();
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex12.sqrt1z();
      double double3 = complex11.getImaginary();
      Complex complex15 = complex7.pow(complex12);
      Object object0 = complex9.readResolve();
      Complex complex16 = complex1.ZERO.add(complex7);
      List<Complex> list1 = complex3.nthRoot(620);
      Complex complex17 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.multiply(1604.96674672);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.acos();
      double double0 = complex2.ONE.getArgument();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.multiply(complex3);
      double double2 = complex4.abs();
      Complex complex6 = complex3.I.conjugate();
      Complex complex7 = complex4.NaN.tan();
      Complex complex8 = complex4.createComplex(0.7853981633974483, 0.0);
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex8.I.sin();
      int int1 = complex2.hashCode();
      Complex complex11 = complex3.NaN.add(complex6);
      Complex complex12 = complex1.acos();
      Object object0 = complex3.readResolve();
      Complex complex13 = complex3.ONE.sinh();
      double double3 = complex0.getArgument();
      Complex complex14 = complex7.asin();
      Complex complex15 = complex2.atan();
      Complex complex16 = complex6.atan();
      Complex complex17 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.08713622391223907, 9354.644737219221);
      Complex complex1 = complex0.createComplex(0.08713622391223907, (-1.7976931348623157E308));
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.INF.subtract(complex0);
      String string0 = complex1.INF.toString();
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex1.I.negate();
      Complex complex6 = complex1.I.sqrt1z();
      Complex complex7 = complex3.INF.conjugate();
      Complex complex8 = complex1.multiply(complex0);
      Complex complex9 = complex2.ONE.subtract(complex6);
      double double0 = complex9.getArgument();
      Complex complex10 = complex3.ZERO.createComplex(0.0, 0.08713622391223907);
      String string1 = complex1.toString();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex10.sinh();
      Complex complex14 = complex10.subtract(complex8);
      Complex complex15 = complex13.I.tan();
      Complex complex16 = complex0.ZERO.tan();
      double double1 = complex10.getImaginary();
      boolean boolean0 = complex13.isNaN();
      Complex complex17 = complex2.subtract(complex0);
      Complex complex18 = complex1.acos();
      Complex complex19 = complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(385.507, 385.507);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.ZERO.hashCode();
      double double0 = complex0.abs();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.multiply(1720.5880697151945);
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex0.add(complex1);
      double double1 = complex0.abs();
      double double2 = complex2.getReal();
      Complex complex4 = complex1.createComplex(1720.5880697151945, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.NaN.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.I.multiply(Double.NaN);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = complex0.tan();
      double double1 = complex4.getArgument();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.I.divide(complex1);
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex4.isInfinite();
      Complex complex7 = complex4.subtract(complex0);
      double double2 = complex0.getImaginary();
      Complex complex8 = Complex.ONE;
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex9 = complex4.add(complex8);
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex10.asin();
      Object object1 = complex2.readResolve();
      Complex complex12 = complex1.cosh();
      double double3 = complex4.abs();
      double double4 = complex1.getArgument();
      Complex complex13 = complex8.multiply(complex7);
      Complex complex14 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = new Complex((-1578.1035465), (-1578.1035465));
      String string0 = complex0.toString();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.multiply(complex2);
      boolean boolean0 = complex3.isInfinite();
      List<Complex> list0 = complex5.nthRoot(2342);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.sqrt1z();
      String string0 = complex2.toString();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex1.INF.acos();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex6.ZERO.multiply(1.0);
      double double0 = complex3.getArgument();
      Complex complex9 = complex3.NaN.createComplex((-2257.9026733), (-2257.9026733));
      String string1 = complex3.toString();
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex1.add(complex9);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.NaN.subtract(complex2);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.INF.divide(complex5);
      Complex complex7 = complex0.acos();
      int int0 = complex3.hashCode();
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex1.getArgument();
      boolean boolean1 = complex2.isInfinite();
      ComplexField complexField1 = complex7.getField();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex1.conjugate();
      Object object0 = complex9.readResolve();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.log();
      Complex complex12 = complex10.negate();
      Complex complex13 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ZERO.log();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.cos();
      double double2 = complex5.getArgument();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex5.I.log();
      Complex complex8 = complex7.pow(complex2);
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex1.divide(complex5);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex11.I.pow(complex12);
      Complex complex14 = complex10.log();
      Complex complex15 = complex10.sin();
      Complex complex16 = complex15.ZERO.subtract(complex14);
      Complex complex17 = complex7.add(complex2);
      double double3 = complex2.getImaginary();
      Complex complex18 = complex7.multiply(1.5707963267948966);
      double double4 = complex12.getArgument();
      Object object0 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.createComplex(1.0, (-3373.5));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.sin();
      List<Complex> list0 = complex3.nthRoot(2838);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.add(complex2);
      Object object0 = complex6.readResolve();
      Complex complex7 = complex3.subtract(complex0);
      Complex complex8 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.ONE.conjugate();
      List<Complex> list0 = complex0.ZERO.nthRoot(445);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.createComplex(1313.793216089, 6.283185307179586);
      double double0 = complex5.getArgument();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.ONE.pow(complex0);
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex8 = new Complex(0.0, 0.0);
      Complex complex9 = complex6.INF.multiply(complex4);
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = complex8.ONE.tan();
      Complex complex12 = complex6.subtract(complex8);
      Complex complex13 = complex1.divide(complex2);
      Complex complex14 = complex4.ONE.acos();
      double double0 = complex13.getArgument();
      double double1 = complex8.I.abs();
      boolean boolean0 = complex13.isInfinite();
      Complex complex15 = complex11.acos();
      double double2 = complex6.NaN.getArgument();
      Complex complex16 = complex3.divide(complex12);
      int int0 = complex16.I.hashCode();
      boolean boolean1 = complex6.equals(object0);
      Complex complex17 = complex4.negate();
      int int1 = complex4.hashCode();
      Complex complex18 = complex5.sqrt1z();
      Complex complex19 = complex17.tan();
      Complex complex20 = complex12.sqrt1z();
      Complex complex21 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-19.0), (-19.0));
      Object object0 = new Object();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.NaN.sin();
      Object object1 = complex0.INF.readResolve();
      Complex complex3 = complex1.ZERO.conjugate();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex3.ZERO.add(complex4);
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.getArgument();
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex0.multiply(complex4);
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex0.tanh();
      ComplexField complexField1 = complex8.getField();
      Complex complex10 = complex4.divide(complex5);
      double double2 = complex4.getArgument();
      ComplexField complexField2 = complex0.getField();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex7.asin();
      Complex complex13 = complex3.createComplex((-133.99282798185166), (-133.99282798185166));
      Complex complex14 = complex4.exp();
      Complex complex15 = complex14.sin();
      Complex complex16 = complex7.log();
      Complex complex17 = Complex.NaN;
      Complex complex18 = complex9.subtract(complex17);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(906.3202576712, 906.3202576712);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ONE.createComplex(906.3202576712, 906.3202576712);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.cos();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1158.754385174269, (-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.asin();
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(16.0, Double.NaN);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.cos();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex5.equals(complexField0);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex4.subtract(complex0);
      Complex complex8 = complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = complex2.ZERO.exp();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex2.ZERO.multiply(complex5);
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0E-6));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.sqrt();
      List<Complex> list0 = complex2.nthRoot(2470);
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ONE.multiply((-1538.8664));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex1.ZERO.exp();
      Object object0 = complex4.ONE.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex1.log();
      try { 
        complex5.ONE.nthRoot((-3567));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,567
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Object object0 = complex0.readResolve();
      double double0 = complex0.abs();
      Complex complex3 = complex2.I.createComplex(1.0, (-893.08636));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex4.NaN.createComplex((-4869.65472303), 0.0);
      Complex complex8 = complex7.subtract(complex6);
      Complex complex9 = complex2.NaN.pow(complex0);
      Complex complex10 = complex7.NaN.subtract(complex4);
      Complex complex11 = complex2.asin();
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex2.sqrt1z();
      double double1 = complex13.NaN.getArgument();
      double double2 = complex12.getImaginary();
      Complex complex14 = complex6.divide(complex9);
      Complex complex15 = complex14.ONE.conjugate();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(928.25133262496, (-1191.0));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.tan();
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.INF.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex0.INF.tanh();
      ComplexField complexField0 = complex0.getField();
      int int1 = complex2.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex7.acos();
      Complex complex14 = complex13.NaN.cos();
      double double1 = complex7.getArgument();
      Complex complex15 = complex0.multiply((-3364.3398881185376));
      Complex complex16 = complex15.atan();
      Complex complex17 = complex13.INF.sin();
      Complex complex18 = complex1.sqrt1z();
      double double2 = complex1.abs();
      Complex complex19 = complex13.pow(complex6);
      Complex complex20 = complex12.cosh();
      Complex complex21 = complex7.multiply((-351.36049763));
      try { 
        complex11.nthRoot((-787));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -787
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2443.7), 3665.960286757);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(3665.960286757);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.I.conjugate();
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ZERO.add(complex4);
      ComplexField complexField0 = complex1.INF.getField();
      ComplexField complexField1 = complex0.getField();
      double double1 = complex0.abs();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex1.NaN.getField();
      String string0 = complex0.I.toString();
      String string1 = complex0.toString();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.add(complex1);
      List<Complex> list0 = complex1.nthRoot(481);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.createComplex(0.0, (-2216.0));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.divide(complex1);
      List<Complex> list0 = complex2.nthRoot(121);
      Complex complex5 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      double double1 = complex0.getImaginary();
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.multiply((-823.1990004));
      double double1 = complex0.getImaginary();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.ZERO.createComplex((-823.1990004), (-823.1990004));
      String string0 = complex0.toString();
      Complex complex4 = complex0.add(complex1);
      double double2 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.conjugate();
      List<Complex> list0 = complex3.ZERO.nthRoot(252);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex5.ZERO.add(complex2);
      Complex complex8 = complex4.I.acos();
      Complex complex9 = complex2.NaN.cosh();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex10.sqrt();
      String string0 = complex9.INF.toString();
      Complex complex12 = complex2.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex10.sqrt1z();
      Complex complex14 = complex13.ZERO.conjugate();
      Complex complex15 = complex13.ZERO.acos();
      Complex complex16 = complex9.asin();
      ComplexField complexField0 = complex9.ONE.getField();
      Complex complex17 = complex16.exp();
      Complex complex18 = Complex.INF;
      Complex complex19 = complex16.I.divide(complex18);
      Complex complex20 = complex19.ZERO.asin();
      Complex complex21 = complex19.ONE.conjugate();
      double double0 = complex13.getArgument();
      Complex complex22 = complex10.tanh();
      boolean boolean1 = complex1.equals(complex10);
      Complex complex23 = complex9.sinh();
      Complex complex24 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sin();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex1.I.createComplex(843.134747523, 843.134747523);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex0.ZERO.tanh();
      List<Complex> list0 = complex3.ZERO.nthRoot(23);
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex0.ONE.divide(complex8);
      List<Complex> list1 = complex2.INF.nthRoot(151);
      Complex complex10 = complex8.sqrt1z();
      double double0 = complex2.getArgument();
      Complex complex11 = complex0.tanh();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      Complex complex12 = complex0.cos();
      double double1 = complex0.getReal();
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(0.0, 2018.080920207);
      Complex complex3 = complex1.subtract(complex2);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.sin();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex1.equals(complex2);
      int int0 = complex1.hashCode();
      boolean boolean2 = complex3.isInfinite();
      Object object1 = complex0.readResolve();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex4.sin();
      Complex complex9 = complex8.ONE.multiply(complex0);
      Complex complex10 = complex8.sqrt1z();
      List<Complex> list0 = complex1.nthRoot(3990);
      Complex complex11 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex2.createComplex(2.0, 0.0);
      ComplexField complexField0 = complex2.ONE.getField();
      String string0 = complex2.toString();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.I.multiply((-670.6913));
      int int0 = complex7.ONE.hashCode();
      Complex complex8 = complex3.log();
      Complex complex9 = complex7.pow(complex0);
      double double0 = complex4.abs();
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = new Complex((-1916.912642297), 0.0);
      double double0 = complex3.NaN.abs();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex5.INF.subtract(complex1);
      Complex complex7 = complex3.I.sinh();
      Complex complex8 = complex4.ONE.conjugate();
      Complex complex9 = complex3.I.pow(complex4);
      try { 
        complex9.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.19999999999923582, (-5199.0));
      Complex complex1 = complex0.ONE.createComplex(0.19999999999923582, (-2163.5));
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.multiply(0.19999999999923582);
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2401.028), 3212.209);
      Complex complex1 = complex0.exp();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(3397.262, 2791.266);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.NaN.conjugate();
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.pow(complex0);
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.asin();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.sinh();
      double double0 = complex0.getReal();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.multiply((-3494.536));
      Complex complex7 = complex6.I.add(complex2);
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.I.pow(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-776.27));
      Complex complex2 = complex1.cos();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.exp();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.ZERO.subtract(complex2);
      Complex complex7 = complex3.INF.sqrt1z();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex3.sin();
      Object object1 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(245.58402, (-3141.6249));
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1989.8235731130887), (-2246.40144));
      List<Complex> list0 = complex0.nthRoot(1);
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(486.1567161, 486.1567161);
      // Undeclared exception!
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex2.I.asin();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex7.log();
      int int0 = complex5.I.hashCode();
      int int1 = (-269);
      try { 
        complex0.nthRoot((-269));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -269
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.I.asin();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex0.log();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.NaN.divide(complex4);
      double double0 = complex5.NaN.abs();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.asin();
      double double0 = complex1.getArgument();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex0.subtract(complex3);
      int int0 = complex5.hashCode();
      boolean boolean1 = complex0.equals(complex2);
      Complex complex6 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply((-6162.050129));
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex0.tan();
      double double0 = complex3.I.getArgument();
      Complex complex5 = complex3.multiply((-1496.5077357));
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex0.readResolve();
      double double1 = complex0.abs();
      List<Complex> list0 = complex3.nthRoot(4066);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.NaN.cosh();
      Object object0 = complex3.readResolve();
      double double1 = complex0.abs();
      Complex complex6 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.tanh();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex3.INF.sqrt1z();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex0.ZERO.sin();
      Complex complex9 = complex8.multiply(complex6);
      int int0 = complex3.I.hashCode();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex1.sin();
      double double0 = complex1.getArgument();
      Complex complex12 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-450.503), (-450.503));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex2.ZERO.conjugate();
      boolean boolean0 = complex3.equals(complex2);
      double double0 = complex2.abs();
      Complex complex5 = complex1.add(complex0);
      Object object0 = complex5.ZERO.readResolve();
      boolean boolean1 = complex0.isNaN();
      boolean boolean2 = complex0.equals((Object) null);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex5.NaN.asin();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex6.subtract(complex5);
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex8.I.tan();
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex8.negate();
      Complex complex14 = complex0.createComplex((-1871.80755826), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(1.0, 925.2461628);
      List<Complex> list0 = complex1.nthRoot(907);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex5.subtract(complex0);
      Complex complex8 = complex5.INF.tan();
      Complex complex9 = complex1.ONE.conjugate();
      Complex complex10 = complex9.I.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex3.createComplex(Double.NaN, 1147.75742231);
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.I.atan();
      double double1 = complex8.getImaginary();
      Complex complex14 = complex13.cos();
      Complex complex15 = new Complex(Double.NaN, 1147.75742231);
      boolean boolean0 = complex0.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex5.INF.cosh();
      Complex complex8 = complex0.createComplex(174.549, 888.60404795093);
      Complex complex9 = complex8.sqrt();
      List<Complex> list0 = complex1.ONE.nthRoot(213);
      Complex complex10 = complex1.multiply((-1245.3239155));
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex8.isInfinite();
      Complex complex11 = complex3.atan();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex10.cosh();
      Complex complex14 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      List<Complex> list0 = complex1.I.nthRoot(2826);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex4.tan();
      double double0 = complex1.I.getArgument();
      Complex complex6 = complex0.I.log();
      Complex complex7 = complex1.I.multiply(1.5707963267948966);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex7.NaN.createComplex(2826, 2.0);
      Complex complex11 = complex0.multiply(complex1);
      Complex complex12 = complex7.ONE.cosh();
      Complex complex13 = complex12.ZERO.log();
      String string0 = complex11.I.toString();
      Complex complex14 = complex3.INF.subtract(complex6);
      Object object0 = complex14.NaN.readResolve();
      int int0 = complex1.hashCode();
      Complex complex15 = complex0.cos();
      double double1 = complex3.getImaginary();
      Complex complex16 = complex11.NaN.atan();
      Complex complex17 = complex15.conjugate();
      double double2 = complex3.getReal();
      Complex complex18 = complex2.log();
      String string1 = complex7.toString();
      Complex complex19 = complex1.subtract(complex11);
      int int1 = complex19.NaN.hashCode();
      Complex complex20 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.conjugate();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex1.I.tanh();
      int int0 = 0;
      Complex complex3 = complex1.NaN.subtract(complex0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex2.ZERO.pow(complex0);
      int int0 = complex6.ONE.hashCode();
      int int1 = complex6.hashCode();
      Complex complex7 = complex0.NaN.sqrt1z();
      String string0 = complex7.toString();
      Complex complex8 = new Complex(1735.796, 1735.796);
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex2.ZERO.divide(complex8);
      Complex complex11 = complex0.add(complex1);
      Complex complex12 = complex11.I.sqrt();
      Complex complex13 = complex11.asin();
      Complex complex14 = complex10.tan();
      double double0 = complex14.NaN.abs();
      Complex complex15 = complex14.ZERO.negate();
      double double1 = complex9.NaN.abs();
      double double2 = complex11.getImaginary();
      Complex complex16 = complex8.exp();
      double double3 = complex9.abs();
      Complex complex17 = complex12.INF.divide(complex11);
      Complex complex18 = complex6.multiply((-6.032174644509064E-23));
      boolean boolean0 = complex9.isNaN();
      double double4 = complex12.getReal();
      Complex complex19 = complex10.tanh();
      Complex complex20 = new Complex((-6.032174644509064E-23), (-1900.867057473));
      Complex complex21 = complex12.divide(complex20);
  }
}
