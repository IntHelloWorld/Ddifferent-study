/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:29:29 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.acos();
      List<Complex> list0 = complex1.I.nthRoot(1686);
      double double0 = complex0.NaN.getArgument();
      double double1 = complex1.I.getArgument();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.NaN.tan();
      String string0 = complex0.toString();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex5.ONE.pow(complex3);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex4.subtract(complex10);
      Complex complex13 = complex8.acos();
      ComplexField complexField0 = complex13.getField();
      Object object0 = complex5.readResolve();
      List<Complex> list1 = complex8.nthRoot(1686);
      double double2 = complex1.abs();
      Complex complex14 = complex10.acos();
      Complex complex15 = complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(40.19140625, 40.19140625);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = new Complex(40.19140625, Double.NaN);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.I.add(complex3);
      Complex complex6 = complex3.ZERO.createComplex((-2364.83407396), Double.NaN);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.pow(complex0);
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex3.pow(complex8);
      Complex complex11 = complex4.add(complex7);
      double double0 = complex11.I.abs();
      Complex complex12 = complex4.INF.sqrt();
      double double1 = complex2.getReal();
      Complex complex13 = complex4.conjugate();
      double double2 = complex8.getImaginary();
      Complex complex14 = complex5.multiply(40.19140625);
      Complex complex15 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = new Complex(2430.0, 2430.0);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.NaN.createComplex((-2959.3522), 151.312651);
      Complex complex6 = complex5.NaN.pow(complex0);
      Complex complex7 = complex4.ONE.sqrt();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex8 = complex4.ZERO.pow(complex1);
      Complex complex9 = complex3.log();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex9.conjugate();
      boolean boolean1 = complex1.isInfinite();
      boolean boolean2 = complex5.isInfinite();
      Complex complex12 = complex10.subtract(complex3);
      Complex complex13 = complex5.cosh();
      Complex complex14 = complex11.acos();
      double double0 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      String string0 = complex1.ONE.toString();
      double double0 = complex1.I.abs();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex7.I.asin();
      double double1 = complex7.abs();
      String string1 = complex8.ZERO.toString();
      Complex complex10 = complex8.INF.multiply(0.07842259109020233);
      String string2 = complex10.NaN.toString();
      double double2 = complex7.getImaginary();
      Complex complex11 = complex0.NaN.pow(complex5);
      try { 
        complex7.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(6.0, 6.0);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.acos();
      String string0 = complex0.I.toString();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.ZERO.cos();
      String string1 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(2840.9943938);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.sqrt();
      double double0 = complex0.abs();
      Complex complex4 = complex2.multiply((-2686.7293769408743));
      Complex complex5 = complex4.ZERO.createComplex(0.0, 1.0);
      double double1 = complex4.INF.abs();
      double double2 = complex0.getReal();
      Complex complex6 = complex2.add(complex3);
      List<Complex> list0 = complex6.ONE.nthRoot(283);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.divide(complex7);
      String string0 = complex7.toString();
      Complex complex9 = complex8.ZERO.divide(complex4);
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex2.subtract(complex1);
      Complex complex12 = complex11.multiply(0.0);
      Complex complex13 = complex0.cosh();
      Complex complex14 = new Complex(Double.POSITIVE_INFINITY, 2840.9943938);
      Complex complex15 = complex11.ONE.multiply(complex0);
      Complex complex16 = complex15.multiply(2840.9943938);
      ComplexField complexField0 = complex12.getField();
      Complex complex17 = complex13.pow(complex14);
      Complex complex18 = complex13.multiply(complex6);
      Complex complex19 = complex0.negate();
      Complex complex20 = complex12.asin();
      Complex complex21 = complex2.cos();
      Complex complex22 = complex14.createComplex(2840.9943938, Double.POSITIVE_INFINITY);
      Complex complex23 = complex6.log();
      double double3 = complex12.getReal();
      Object object0 = complex19.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.tanh();
      List<Complex> list0 = complex3.INF.nthRoot(90);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex0.NaN.tan();
      Complex complex7 = complex3.NaN.tan();
      Complex complex8 = complex3.NaN.acos();
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex0.ONE.multiply(complex8);
      Complex complex11 = complex10.INF.log();
      int int0 = complex10.INF.hashCode();
      double double0 = complex5.getReal();
      Complex complex12 = complex5.I.subtract(complex4);
      Complex complex13 = complex9.multiply(Double.NaN);
      Complex complex14 = complex9.add(complex1);
      Complex complex15 = complex14.NaN.sinh();
      Complex complex16 = complex14.ZERO.multiply(Double.NaN);
      ComplexField complexField1 = complex3.getField();
      String string0 = complex7.toString();
      boolean boolean0 = complex1.isNaN();
      Complex complex17 = complex9.log();
      Complex complex18 = complex9.ONE.subtract(complex14);
      double double1 = complex5.abs();
      Complex complex19 = complex0.divide(complex16);
      Complex complex20 = complex4.sqrt();
      Complex complex21 = complex13.conjugate();
      Object object0 = complex5.readResolve();
      Complex complex22 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2563.821832728), (-2040.561));
      Complex complex1 = Complex.ZERO;
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.multiply(complex2);
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex0.I.cos();
      Complex complex9 = complex6.I.log();
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex0.createComplex((-2563.821832728), 0.0);
      String string1 = complex0.toString();
      Complex complex12 = complex11.INF.log();
      Complex complex13 = complex10.conjugate();
      Complex complex14 = complex10.sinh();
      Complex complex15 = complex1.ZERO.sqrt1z();
      Complex complex16 = complex11.sqrt1z();
      Complex complex17 = complex9.multiply((-2040.561));
      Complex complex18 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.ZERO.createComplex(4301.533817, (-1.4638894181675823));
      int int1 = complex2.ONE.hashCode();
      Complex complex6 = new Complex(4301.533817, 4301.533817);
      Complex complex7 = complex6.ZERO.multiply(complex0);
      Complex complex8 = complex0.pow(complex6);
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex5.pow(complex1);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex4.multiply(4301.533817);
      Complex complex12 = complex4.conjugate();
      Complex complex13 = complex5.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex2.I.createComplex(0.16666666666745392, 1403.8012791);
      Complex complex5 = complex4.I.exp();
      double double0 = complex2.NaN.abs();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.ONE.divide(complex1);
      Complex complex8 = complex7.INF.cos();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex1.createComplex(0.0, 765.0);
      Complex complex11 = complex0.divide(complex6);
      Complex complex12 = complex11.ONE.tanh();
      Complex complex13 = complex11.ZERO.sqrt();
      Complex complex14 = complex11.INF.add(complex8);
      Complex complex15 = complex2.INF.add(complex11);
      List<Complex> list0 = complex14.nthRoot(3);
      Complex complex16 = complex7.exp();
      double double1 = complex16.I.abs();
      Complex complex17 = complex3.log();
      Complex complex18 = complex17.INF.negate();
      Complex complex19 = complex9.sin();
      Complex complex20 = complex19.NaN.pow(complex16);
      ComplexField complexField1 = complex10.getField();
      Complex complex21 = complex12.createComplex(Double.NaN, 1.0);
      Complex complex22 = complex21.NaN.createComplex(0.0, 1403.8012791);
      Complex complex23 = complex0.sqrt1z();
      double double2 = complex16.getArgument();
      double double3 = complex23.getImaginary();
      Complex complex24 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1262.51099659826), 3583.16);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex2.I.atan();
      Complex complex5 = complex4.NaN.divide(complex1);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex2.log();
      Object object0 = complex1.INF.readResolve();
      Complex complex8 = complex7.INF.cosh();
      String string0 = complex7.I.toString();
      boolean boolean0 = complex2.isNaN();
      Object object1 = complex7.readResolve();
      Complex complex9 = complex2.sin();
      Object object2 = complex2.readResolve();
      boolean boolean1 = complex6.isNaN();
      double double0 = complex1.getReal();
      Complex complex10 = complex6.tan();
      try { 
        complex10.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1051.505356095212), (-1051.505356095212));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.ONE.tan();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.acos();
      Object object1 = complex2.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex1.I.tanh();
      Complex complex6 = complex2.NaN.exp();
      String string0 = complex3.INF.toString();
      double double1 = complex3.ZERO.abs();
      List<Complex> list0 = complex3.nthRoot(17);
      Complex complex7 = complex2.acos();
      double double2 = complex7.ONE.abs();
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex8.NaN.subtract(complex0);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex2.ONE.multiply(complex0);
      String string1 = complex10.ONE.toString();
      Complex complex13 = complex10.INF.sinh();
      boolean boolean0 = complex1.isNaN();
      Complex complex14 = complex8.createComplex(1.0, Double.NaN);
      Complex complex15 = complex10.subtract(complex0);
      try { 
        complex13.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1742.8121604862517, 1742.8121604862517);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.multiply((-2736.806540136));
      Complex complex5 = complex3.NaN.pow(complex0);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.ZERO.conjugate();
      double double0 = complex7.ONE.getArgument();
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex6.divide(complex5);
      int int0 = complex6.hashCode();
      Complex complex11 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(5.650007086920087E-9, 5.650007086920087E-9);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.multiply(complex0);
      int int0 = complex4.ZERO.hashCode();
      Complex complex7 = complex1.ZERO.atan();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex1.ONE.acos();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.ONE.subtract(complex0);
      boolean boolean1 = complex1.isInfinite();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.I.createComplex(5.650007086920087E-9, 1.0);
      boolean boolean2 = complex11.isInfinite();
      Complex complex13 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(475.068496, 475.068496);
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sin();
      double double1 = complex3.INF.abs();
      Complex complex5 = Complex.I;
      double double2 = complex0.abs();
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex6.ONE.multiply((-1154.55862617));
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex1.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-3188.1130687006994));
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.acos();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.atan();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-366.95014), (-366.95014));
      Complex complex2 = complex1.I.multiply((-1955.684));
      Complex complex3 = complex2.I.atan();
      List<Complex> list0 = complex0.NaN.nthRoot(1015);
      Complex complex4 = complex0.NaN.pow(complex1);
      String string0 = complex4.I.toString();
      Complex complex5 = complex1.ZERO.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex7.sin();
      boolean boolean0 = complex7.isNaN();
      Complex complex12 = complex1.cosh();
      double double0 = complex7.getArgument();
      Complex complex13 = complex8.tan();
      Complex complex14 = complex10.log();
      Complex complex15 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1748.996474739173);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.ONE.multiply(complex1);
      Complex complex5 = complex1.ZERO.sinh();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex5.ZERO.exp();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex0.pow(complex8);
      boolean boolean0 = complex8.equals("");
      Complex complex10 = complex9.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ZERO.divide(complex1);
      double double0 = complex2.I.abs();
      Complex complex4 = complex0.I.multiply(1.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex3.conjugate();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex1.ONE.add(complex0);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex3.ZERO.negate();
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      Complex complex10 = complex1.sin();
      Complex complex11 = complex3.sqrt1z();
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex10.I.atan();
      boolean boolean0 = complex11.equals(complex10);
      Complex complex15 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.tan();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex3.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.cos();
      List<Complex> list0 = complex1.NaN.nthRoot(7);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex0.NaN.add(complex1);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex6.NaN.sin();
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex7.nthRoot((-125));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -125
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(4.0, 0.0);
      Complex complex1 = complex0.cos();
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex3.INF.log();
      Complex complex7 = complex1.cos();
      double double0 = complex1.getImaginary();
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex2.divide(complex5);
      Complex complex9 = complex8.NaN.pow(complex1);
      Complex complex10 = complex3.add(complex7);
      Complex complex11 = complex1.acos();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex11.exp();
      Complex complex14 = complex11.multiply(complex2);
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1533.584943029029), 0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex3.INF.asin();
      int int0 = complex4.NaN.hashCode();
      double double0 = complex3.getReal();
      Complex complex8 = complex4.I.sin();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex0.add(complex4);
      Complex complex11 = complex0.createComplex(3.141592653589793, Double.NaN);
      Complex complex12 = complex0.atan();
      try { 
        complex12.ONE.nthRoot((-1885));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,885
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.I.atan();
      List<Complex> list0 = complex0.INF.nthRoot(4224);
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex2.getField();
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2480.2994, 0.75);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.asin();
      ComplexField complexField1 = complex3.ZERO.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.cosh();
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex0.I.multiply(1606.27914415779);
      List<Complex> list0 = complex0.nthRoot(3895);
      Complex complex4 = complex0.acos();
      double double1 = complex4.ZERO.abs();
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex5.ONE.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex6.isInfinite();
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2111.9624183703654), (-2111.9624183703654));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.sin();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.I.abs();
      Complex complex3 = complex0.atan();
      List<Complex> list0 = complex3.I.nthRoot(120);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex2.atan();
      int int0 = complex1.hashCode();
      int int1 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.5039018405998233);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.NaN.log();
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex2.abs();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.NaN.cosh();
      double double1 = complex3.getImaginary();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex2.multiply(complex5);
      Complex complex7 = complex0.ZERO.acos();
      Complex complex8 = complex5.tan();
      double double2 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.log();
      try { 
        complex1.nthRoot((-1617));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,617
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1751.995273090088), 1736.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex0.negate();
      boolean boolean0 = complex5.equals(complex0);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.createComplex(1736.0, (-1751.995273090088));
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.tanh();
      double double0 = complex2.abs();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 6.283185307179586);
      Complex complex2 = complex0.ONE.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(3370.292729047, (-2999.30543));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tanh();
      String string0 = complex1.toString();
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, (-1023.945));
      Complex complex2 = complex0.sqrt1z();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.ZERO.nthRoot(797);
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.acos();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.exp();
      Complex complex8 = complex5.NaN.multiply(complex6);
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex3.ZERO.acos();
      Complex complex11 = complex2.INF.atan();
      List<Complex> list0 = complex9.NaN.nthRoot(8388607);
      Complex complex12 = complex2.log();
      Complex complex13 = complex12.NaN.tan();
      Complex complex14 = complex1.add(complex2);
      Complex complex15 = complex2.tan();
      Complex complex16 = complex2.atan();
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.multiply(10.3392);
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.I.acos();
      String string0 = complex3.INF.toString();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex6.ONE.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex7.add(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(0.0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.ZERO.negate();
      try { 
        complex1.nthRoot((-1365));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,365
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ZERO.log();
      List<Complex> list0 = complex3.ZERO.nthRoot(194);
      double double0 = complex0.abs();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex4.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      List<Complex> list1 = complex5.nthRoot(107);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1019.55070928), (-1019.55070928));
      String string0 = complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.tan();
      String string1 = complex1.ONE.toString();
      double double0 = complex0.getArgument();
      double double1 = complex1.abs();
      Complex complex4 = complex3.cos();
      double double2 = complex1.getReal();
      String string2 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex0.ZERO.nthRoot(180);
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-1215.9076), (-1215.9076));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.multiply((-1.0));
      Complex complex3 = complex2.ZERO.multiply(complex0);
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex2.INF.createComplex(0.0, 0.0);
      String string1 = complex4.NaN.toString();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex2.INF.atan();
      try { 
        complex3.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.NaN.atan();
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.INF.divide(complex0);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.atan();
      String string0 = complex4.ZERO.toString();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex6.INF.subtract(complex0);
      Complex complex9 = complex3.negate();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.ZERO.subtract(complex2);
      Complex complex12 = complex9.cos();
      Complex complex13 = complex10.ONE.tan();
      Complex complex14 = complex13.NaN.negate();
      Complex complex15 = complex0.subtract(complex9);
      try { 
        complex5.nthRoot((-3701));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,701
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.acos();
      double double0 = complex0.INF.abs();
      double double1 = complex0.abs();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.cos();
      double double2 = complex4.ONE.abs();
      Complex complex5 = complex1.multiply(2470.4363);
      Complex complex6 = complex5.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.cosh();
      double double3 = complex4.getReal();
      Complex complex8 = complex5.subtract(complex0);
      Complex complex9 = complex0.tan();
      String string0 = complex8.toString();
      double double4 = complex2.getArgument();
      Complex complex10 = complex3.sinh();
      String string1 = complex2.toString();
      Complex complex11 = complex0.ZERO.sqrt();
      double double5 = complex8.getArgument();
      Complex complex12 = complex1.divide(complex5);
      Complex complex13 = new Complex(0.0, (-124.1042216463633));
      Complex complex14 = complex13.INF.asin();
      Complex complex15 = complex13.NaN.cos();
      Complex complex16 = complex6.pow(complex13);
      Complex complex17 = complex11.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(complex0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, (-2251.70347024));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.exp();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex1.NaN.sin();
      Complex complex8 = complex7.ZERO.exp();
      double double1 = complex7.ZERO.abs();
      String string0 = complex1.toString();
      int int0 = complex2.NaN.hashCode();
      Complex complex9 = complex4.ONE.cosh();
      Complex complex10 = complex5.NaN.conjugate();
      Complex complex11 = complex2.ZERO.divide(complex7);
      Complex complex12 = Complex.I;
      Complex complex13 = complex4.divide(complex2);
      try { 
        complex2.nthRoot((-1541));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,541
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.ZERO.createComplex(Double.NaN, Double.NaN);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = Complex.ONE;
      String string1 = complex6.I.toString();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex1.NaN.multiply(complex0);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex0.I.cos();
      Complex complex11 = complex0.divide(complex6);
      Complex complex12 = complex4.pow(complex1);
      boolean boolean0 = complex4.isNaN();
      Object object0 = new Object();
      boolean boolean1 = complex11.equals(object0);
      ComplexField complexField1 = complex2.getField();
      Complex complex13 = complex4.asin();
      double double0 = complex12.abs();
      Complex complex14 = complex0.subtract(complex10);
      Complex complex15 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex16 = complex10.sin();
      String string2 = complex16.toString();
      Complex complex17 = complex16.cosh();
      double double1 = complex10.abs();
      List<Complex> list0 = complex14.nthRoot(211);
      Complex complex18 = complex4.log();
      double double2 = complex16.getArgument();
      Complex complex19 = complex18.pow(complex5);
      Complex complex20 = complex18.tanh();
      Complex complex21 = complex16.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex7);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.INF.multiply(0.0);
      Complex complex10 = complex8.I.cosh();
      Object object0 = complex9.readResolve();
      double double0 = complex0.getArgument();
      Complex complex11 = complex1.ZERO.negate();
      Complex complex12 = complex11.I.exp();
      Complex complex13 = complex12.acos();
      double double1 = complex6.getArgument();
      Complex complex14 = complex12.sin();
      Complex complex15 = complex5.multiply((-928.52496478));
      Complex complex16 = complex15.divide(complex13);
      Complex complex17 = complex1.I.cosh();
      Complex complex18 = complex8.conjugate();
      Complex complex19 = complex3.NaN.cosh();
      boolean boolean1 = complex3.isNaN();
      int int0 = complex1.hashCode();
      double double2 = complex1.getArgument();
      Complex complex20 = complex6.exp();
      Complex complex21 = complex3.multiply(0.0);
      Complex complex22 = complex8.NaN.multiply(complex21);
      Complex complex23 = complex21.negate();
      Complex complex24 = complex9.asin();
      Complex complex25 = complex16.negate();
      double double3 = complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.ONE.sqrt();
      double double0 = complex1.INF.getArgument();
      Complex complex5 = complex3.ZERO.createComplex((-1201.954), 1512.076347240713);
      Complex complex6 = complex0.ZERO.multiply(28.0);
      Complex complex7 = complex2.sin();
      Complex complex8 = complex2.ONE.tan();
      String string0 = complex1.toString();
      Complex complex9 = complex7.ONE.acos();
      Complex complex10 = complex9.ZERO.multiply(complex2);
      String string1 = complex1.toString();
      List<Complex> list0 = complex8.I.nthRoot(1498);
      Complex complex11 = complex7.log();
      String string2 = complex7.toString();
      Complex complex12 = complex2.sinh();
      ComplexField complexField0 = complex8.getField();
      double double1 = complex7.ONE.abs();
      double double2 = complex10.abs();
      Complex complex13 = complex11.cos();
      Complex complex14 = complex11.acos();
      Complex complex15 = complex2.ONE.tan();
      Complex complex16 = complex5.exp();
      Complex complex17 = complex16.NaN.multiply(1512.076347240713);
      Complex complex18 = complex17.ONE.pow(complex13);
      Complex complex19 = complex9.cosh();
      Complex complex20 = complex8.sqrt();
      boolean boolean0 = complex13.isNaN();
      Complex complex21 = complex16.atan();
      Complex complex22 = complex8.cosh();
      Complex complex23 = complex12.multiply(3948.32933356386);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.acos();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex3.sqrt();
      int int0 = 0;
      try { 
        complex0.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.NaN.sin();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex1.cosh();
      ComplexField complexField1 = complex5.getField();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex1.I.asin();
      double double0 = complex1.getImaginary();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex4.multiply(Double.NaN);
      Complex complex11 = complex6.conjugate();
      double double1 = complex9.getArgument();
      Complex complex12 = complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.subtract(complex2);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.subtract(complex5);
      Complex complex8 = complex1.multiply((-2398.544));
      Complex complex9 = complex8.I.conjugate();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex8.INF.pow(complex10);
      Complex complex12 = complex11.ONE.negate();
      double double0 = complex2.abs();
      boolean boolean0 = complex5.isInfinite();
  }
}
