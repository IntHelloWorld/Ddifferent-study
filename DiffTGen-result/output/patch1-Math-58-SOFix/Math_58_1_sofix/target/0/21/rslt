* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.optimization.fitting.GaussianFitter
* Starting client
* Connecting to master process on port 16028
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-58-SOFix/Math_58_1_sofix/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.optimization.fitting.GaussianFitter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 92
  - Branch 67
  - Exception 0
  - MutationFactory 402
  - Output 6
  - Method 5
  - MethodNoException 5
  - CBranchFitnessFactory 67
* Using seed 1585554868910
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:======>                       23%] [Cov:>                                  1%][Progress:======>                       23%] [Cov:>                                  2%][Progress:======>                       23%] [Cov:====>                              14%][Progress:=======>                      25%] [Cov:====>                              14%][Progress:=======>                      25%] [Cov:=======>                           20%][Progress:=======>                      25%] [Cov:=======>                           22%][Progress:=======>                      25%] [Cov:========>                          23%][Progress:========>                     28%] [Cov:===>                               9%][Progress:========>                     28%] [Cov:======>                            19%][Progress:========>                     28%] [Cov:==========>                        31%][Progress:========>                     28%] [Cov:===============>                   45%][Progress:========>                     28%] [Cov:===================>               56%][Progress:========>                     28%] [Cov:======================>            63%][Progress:========>                     28%] [Cov:========================>          71%][Progress:=========>                    31%] [Cov:==>                                7%][Progress:=========>                    31%] [Cov:====>                              14%][Progress:=========>                    31%] [Cov:=========>                         26%][Progress:=========>                    31%] [Cov:============>                      36%][Progress:=========>                    31%] [Cov:===============>                   45%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===>                               9%][Progress:===========>                  38%] [Cov:=====>                             17%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:===============>                   43%][Progress:===========>                  38%] [Cov:==================>                54%][Progress:===========>                  38%] [Cov:=====================>             61%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=============>                     39%][Progress:============>                 40%] [Cov:================>                  46%][Progress:============>                 40%] [Cov:==================>                53%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:=================>                 49%][Progress:============>                 41%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:===>                               9%][Progress:============>                 43%] [Cov:======>                            18%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:===============>                   45%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:==>                                7%][Progress:=============>                45%] [Cov:====>                              14%][Progress:=============>                45%] [Cov:=========>                         26%][Progress:=============>                45%] [Cov:============>                      37%][Progress:=============>                45%] [Cov:================>                  46%][Progress:=============>                45%] [Cov:==================>                53%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:======================>            65%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                46%] [Cov:====>                              14%][Progress:=============>                46%] [Cov:=====>                             15%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:=======================>           66%][Progress:=============>                46%] [Cov:=======================>           67%][Progress:=============>                46%] [Cov:=======================>           68%][Progress:===============>              50%] [Cov:=======>                           22%][Progress:===============>              50%] [Cov:========>                          25%][Progress:===============>              50%] [Cov:=======================>           67%][Progress:===============>              51%] [Cov:======>                            19%][Progress:===============>              51%] [Cov:===================>               57%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:=======================>           68%][Progress:===============>              51%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:=======================>           68%][Progress:===============>              53%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:========================>          71%][Progress:===============>              53%] [Cov:=========================>         72%][Progress:================>             55%] [Cov:===========================>       78%][Progress:================>             56%] [Cov:========================>          69%][Progress:================>             56%] [Cov:==========================>        76%][Progress:================>             56%] [Cov:==========================>        77%][Progress:================>             56%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:=========================>         74%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        77%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:==========================>        77%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           63%] [Cov:==========================>        77%][Progress:==================>           63%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:==========================>        77%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:====================>         68%] [Cov:==========================>        77%][Progress:====================>         68%] [Cov:===========================>       78%][Progress:=====================>        70%] [Cov:===========================>       78%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        77%][Progress:=====================>        71%] [Cov:===========================>       78%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:===========================>       78%][Progress:=====================>        73%] [Cov:===========================>       78%][Progress:======================>       75%] [Cov:===========================>       78%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       78%][Progress:=======================>      78%] [Cov:===========================>       78%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       78%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       78%][Progress:========================>     83%] [Cov:===========================>       78%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       78%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:=============================>     83%][Progress:===========================>  90%] [Cov:=============================>     83%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:=============================>     83%][Progress:===========================>  93%] [Cov:=============================>     83%][Progress:============================> 95%] [Cov:=============================>     83%][Progress:============================> 95%] [Cov:=============================>     83%][Progress:============================> 96%] [Cov:=============================>     83%][Progress:=============================>98%] [Cov:=============================>     83%][Progress:=============================>98%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:=============================>     83%]
* Search finished after 61s and 19 generations, 15488 statements, best individual has fitness: 58.1
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 92
* Number of covered goals: 78
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 402
* Number of covered goals: 359
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 17%
* Total number of goals: 6
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Generated 17 tests with total length 151
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 15:56:31.740 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 15:56:31.740 [logback-1] WARN  JUnitAnalyzer - Failing test:
 WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.10360634943154645, 1612.7143833, Double.POSITIVE_INFINITY);
weightedObservedPointArray0[0] = weightedObservedPoint0;
weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
weightedObservedPointArray0[2] = weightedObservedPoint0;
weightedObservedPointArray0[3] = weightedObservedPoint0;
GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[3];
Well512a well512a0 = new Well512a(intArray0);
GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(well512a0);
UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, gaussianRandomGenerator0);
MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 2144203971, uncorrelatedRandomVectorGenerator0);
GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);

* Writing JUnit test case 'GaussianFitter_ESTest' to evosuite-tests
* Done!

* Computation finished
