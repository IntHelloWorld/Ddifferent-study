/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:44:31 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null, locale0);
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$Pair";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$Pair", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule");
      System.setCurrentTimeMillis(0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      Locale locale0 = fastDateFormat0.getLocale();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      ParsePosition parsePosition0 = new ParsePosition(31);
      Date date0 = mockSimpleDateFormat0.parse("ec", parsePosition0);
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("ec", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      Locale locale0 = Locale.KOREAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("L/h#v$?ow?7~", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'v'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = timeZone0.getOffset(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("]", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.GERMANY;
      String string0 = timeZone0.getDisplayName(true, 0);
      FastDateFormat fastDateFormat0 = new FastDateFormat("]", timeZone0, locale0);
      String string1 = timeZone0.getDisplayName(true, 1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-2875L));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, (TimeZone) null, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 0, locale0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(2, 0, (TimeZone) null);
      int int0 = (-530);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, (-530), locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2);
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat2.parseObject("{Z_R^", parsePosition0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(3, locale0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 1695, 2692, 5633);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer2 = mockSimpleDateFormat0.format(date0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat3.format((Object) calendar0, stringBuffer2, fieldPosition0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(0, locale0);
      TimeZone timeZone0 = fastDateFormat2.getTimeZone();
      FastDateFormat fastDateFormat5 = FastDateFormat.getDateInstance(1);
      FastDateFormat fastDateFormat6 = FastDateFormat.getTimeInstance(0, timeZone0);
      StringBuffer stringBuffer4 = new StringBuffer("[>LV");
      StringBuffer stringBuffer5 = fastDateFormat4.format(0L, stringBuffer4);
      FastDateFormat fastDateFormat7 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale1 = Locale.ITALY;
      FastDateFormat fastDateFormat8 = FastDateFormat.getInstance("", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      String string0 = "`XVF5";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`XVF5");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      String string0 = fastDateFormat0.getPattern();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        NumberFormat.getCurrencyInstance((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!4D=_]dBq", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "`U8:i*Lehpz.LN";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`U8:i*Lehpz.LN");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "5";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "5");
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = new FastDateFormat("5", simpleTimeZone0, (Locale) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("5", (TimeZone) simpleTimeZone0, (Locale) null);
      Object object0 = fastDateFormat1.clone();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("5");
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 12;
      intArray0[4] = 2;
      intArray0[5] = 1;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("A#<T{0Do|iqNFF4ajeN", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = new Locale("- Jmn'4Vp__pvR", "- Jmn'4Vp__pvR");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("- Jmn'4Vp__pvR", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = null;
      int int0 = 1;
      MockDate mockDate0 = new MockDate(1, 1, (-4572), (-4572), 1);
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, (Locale) null);
      String string0 = fastDateFormat0.format((long) 1);
      // Undeclared exception!
      try { 
        MockCalendar.getInstance(timeZone0, (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2);
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat2.parseObject("{Z_R^", parsePosition0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(3, locale0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 1695, 2692, 5633);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer2 = mockSimpleDateFormat0.format(date0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat3.format((Object) calendar0, stringBuffer2, fieldPosition0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(0, locale0);
      TimeZone timeZone0 = fastDateFormat2.getTimeZone();
      FastDateFormat fastDateFormat5 = FastDateFormat.getDateInstance(1);
      FastDateFormat fastDateFormat6 = FastDateFormat.getTimeInstance(0, timeZone0);
      StringBuffer stringBuffer4 = new StringBuffer("[>LV");
      StringBuffer stringBuffer5 = fastDateFormat4.format(0L, stringBuffer4);
      FastDateFormat fastDateFormat7 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale1 = Locale.ITALY;
      FastDateFormat fastDateFormat8 = FastDateFormat.getInstance("", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.UK;
      String string0 = "The pattern must not be null";
      Locale locale1 = Locale.forLanguageTag("The pattern must not be null");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The pattern must not be null");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.UK;
      String string0 = "The pattern must not be null";
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The pattern must not be null");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(6, 0, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 6
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Long long0 = new Long(1);
      StringWriter stringWriter0 = new StringWriter();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringBuffer0.ensureCapacity(957);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
      fieldPosition0.setEndIndex(1949);
      Instant instant0 = MockInstant.ofEpochMilli(3);
      Date date0 = Date.from(instant0);
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) date0);
      stringBuffer0.setLength(1);
      fieldPosition0.setEndIndex((-1598));
      StringBuffer stringBuffer2 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1598), timeZone1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1598
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 373;
      TimeZone timeZone0 = null;
      Locale locale0 = new Locale(")Em");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(373, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 373
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3600000;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Bf");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(3600000, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3600000
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      // Undeclared exception!
      try { 
        MockInstant.plusNanos((Instant) null, 1611L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(": Cnf<{a", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = new Locale("FastDateFormat[");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1014;
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2419), 1014, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1014
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("|)9b[Ks", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ":d9.?]X";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":d9.?]X", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale.setDefault(locale0);
      Locale locale1 = Locale.CHINESE;
      String string0 = locale0.getDisplayName(locale1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale0);
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-4544);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4544), "+y ba<M~");
      Locale locale0 = new Locale("");
      String string0 = simpleTimeZone0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, (-4544), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -4544
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-1813);
      Locale locale0 = Locale.GERMANY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.pollLast();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      String string0 = Locale.lookupTag(linkedList0, set0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1813), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1813
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-3874);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3874), "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3874), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3874
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      int int0 = (-2797);
      MockDate mockDate0 = new MockDate((-2797), (-956), 0, (-956), 0, 1);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      String string1 = fastDateFormat0.format((Calendar) gregorianCalendar0);
      String string2 = " 8u\\Q0|0u#g\\[n)nH/";
      Locale locale0 = new Locale(" 8uQ0|0u#g[n)nH/", "", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(277, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 277
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("+&pp^[znKY", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: pp
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<null>", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = new Locale("q{P4O40jE:x)2%S", "q{P4O40jE:x)2%S", "nYgp");
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale1);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "";
      int int0 = 0;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(873, "", 0, 0, 0, 4356, 2095, 0, 873, 0, 2095);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(926, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 926
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.JAPAN;
      String string0 = locale0.getDisplayLanguage(locale1);
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3308), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3308
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.toLanguageTag();
      String string1 = timeZone0.getDisplayName(true, 1, locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0, locale1);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string2 = fastDateFormat0.format(calendar0);
      int int0 = fastDateFormat0.hashCode();
      Locale locale2 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2, 48, locale2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 48
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = 2;
      MockDate mockDate0 = new MockDate((-3037), 1, (-1406), 1, 0, 2);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      Instant instant0 = null;
      // Undeclared exception!
      try { 
        ZoneId.from((TemporalAccessor) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1917, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1917
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = new FastDateFormat("-K(5AEKJls-6<<1~% ", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(calendar0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3956;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2763, 3956);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3956
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2761, 100);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 100
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      try { 
        fastDateFormat1.parseObject("");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "3";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("3", locale0);
      String string1 = null;
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 784;
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(784, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 784
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1022));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1022
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 11;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      String string0 = "N!)Ode15|t_u";
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("N!)Ode15|t_u", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "g";
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      timeZone0.setID("g");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("g", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(10, 14, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringWriter stringWriter2 = stringWriter1.append('&');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(0L, stringBuffer1);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      int int1 = fastDateFormat1.hashCode();
      ParsePosition parsePosition0 = new ParsePosition(115);
      Object object0 = fastDateFormat1.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = new FastDateFormat("ou2ExjQ*kWT<d6P}", timeZone0, locale0);
      int int0 = fastDateFormat0.hashCode();
      Instant instant0 = MockInstant.ofEpochSecond((long) 2, (long) 0);
      // Undeclared exception!
      try { 
        ZoneId.from(instant0);
      } catch(DateTimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: 1970-01-01T00:00:02Z of type java.time.Instant
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`*$3");
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField";
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", "", "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string1 = locale0.getExtension('F');
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      String string2 = Locale.lookupTag(linkedList0, set0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(3, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.lookup(linkedList0, list1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
      String string0 = fastDateFormat1.toString();
      // Undeclared exception!
      try { 
        locale0.getDisplayLanguage((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(8, 0, 0);
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPAN;
      boolean boolean0 = timeZone0.observesDaylightTime();
      String string0 = locale0.getDisplayScript();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-537);
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getExtension('P');
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-537), (-537), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -537
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(97, 0, (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 97
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      long long0 = 0L;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Long long0 = new Long(2);
      boolean boolean0 = fastDateFormat0.equals(long0);
      fastDateFormat0.init();
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat1.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        MockInstant.truncatedTo((Instant) null, (TemporalUnit) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "4C!<xu'm'|BpYS", 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) simpleTimeZone0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(585);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 585
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = timeZone0.getDisplayName();
      String string1 = "G@]M+^yb";
      mockGregorianCalendar0.clear();
      StringBuffer stringBuffer0 = new StringBuffer("G@]M+^yb");
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 3, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      String string1 = locale0.getScript();
      String string2 = fastDateFormat0.getPattern();
      boolean boolean0 = simpleTimeZone0.observesDaylightTime();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2744);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2744
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "uL%vX!uBQ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("uL%vX!uBQ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$Pair";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$Pair", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule");
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "[");
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("[", (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format(0L);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(Integer.MIN_VALUE, "z%{2$'||_J)xc");
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.KOREAN;
      String string0 = locale0.getDisplayVariant(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("z%{2$'||_J)xc", (TimeZone) simpleTimeZone0, locale0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 0, 0, 0, 0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      String string1 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("foe7");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2794), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2794
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, locale0);
      String string0 = fastDateFormat0.format((long) 1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown class: ");
      timeZone0.setRawOffset(1077);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 1, timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-370));
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(4);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.setDefault(timeZone0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        MockZonedDateTime.ofInstant((Instant) null, (ZoneId) zoneOffset0);
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Object object0 = new Object();
      StringBuffer stringBuffer0 = null;
      FieldPosition fieldPosition0 = new FieldPosition(0);
      int int0 = (-2210);
      fieldPosition0.setEndIndex((-2210));
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0, (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2);
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat2.parseObject("{Z_R^", parsePosition0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(3, locale0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1), 1, 1695, 2692, 5633);
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar1, stringBuffer0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer2 = mockSimpleDateFormat0.format(date0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat3.format((Object) mockGregorianCalendar0, stringBuffer2, fieldPosition0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(0, locale0);
      TimeZone timeZone0 = fastDateFormat2.getTimeZone();
      FastDateFormat fastDateFormat5 = FastDateFormat.getDateInstance(1);
      FastDateFormat fastDateFormat6 = FastDateFormat.getTimeInstance(0, timeZone0);
      StringBuffer stringBuffer4 = new StringBuffer("[>LV");
      StringBuffer stringBuffer5 = fastDateFormat4.format(0L, stringBuffer4);
      FastDateFormat fastDateFormat7 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale1 = Locale.ITALY;
      FastDateFormat fastDateFormat8 = FastDateFormat.getInstance("", timeZone0, locale1);
  }
}
