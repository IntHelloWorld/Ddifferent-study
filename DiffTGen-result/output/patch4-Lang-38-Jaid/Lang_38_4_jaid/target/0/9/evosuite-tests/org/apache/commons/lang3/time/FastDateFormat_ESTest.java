/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:41:27 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("(%", timeZone0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      int int0 = (-817);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated character sequence index is invalid: %d", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      boolean boolean0 = locale0.hasExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7?j?KOGs$8");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[3];
      String string0 = fastDateFormat0.toString();
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = (-633);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken((String) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("vp-wOY>Q");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.KOREA;
      String string0 = locale0.getDisplayLanguage(locale1);
      FastDateFormat fastDateFormat0 = new FastDateFormat("vp-wOY>Q", timeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("~KRfxHeg");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Fx<@~SV";
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Fx<@~SV", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ")'mmYy'2.GK7mfcr=";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.pollLast();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      FastDateFormat fastDateFormat0 = new FastDateFormat(")'mmYy'2.GK7mfcr=", (TimeZone) null, locale0);
      String string1 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      int int0 = timeZone0.getOffset(0L);
      String string0 = timeZone0.getDisplayName(false, 0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string1 = fastDateFormat0.format(calendar0);
      Locale locale1 = fastDateFormat0.getLocale();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("2014\u5E742\u670814\u65E5 \u4E0B\u534808\u65F621\u520621\u79D2", locale0);
      int int1 = (-2157);
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType("%l0WXdF~5 V^U");
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: %l0WXdF~5 V^U
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "5C''VXhu3J#mGz=";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      String string1 = locale0.getScript();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      String string2 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat0 = new FastDateFormat("5C''VXhu3J#mGz=", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.init();
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("aU{|G");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "<null>";
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<null>", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("qNYLl)L");
      timeZone0.setRawOffset(2);
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string0 = fastDateFormat1.toString();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      String string1 = fastDateFormat2.parseToken("qNYLl)L", intArray0);
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.of(2, 310, 0);
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 310
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 173, 3067, 45, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string0 = fastDateFormat0.format(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, (-2833), 3, 1, 2, 60);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = fastDateFormat0.equals(timeZone0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      double double0 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 783.382;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 60;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\u4E0A\u534801\u664203\u520600\u79D2 GMT";
      stringArray0[1] = "";
      stringArray0[2] = "lt++&a?60BCaX";
      stringArray0[3] = "\u4E0A\u534801\u664203\u520600\u79D2 GMT";
      stringArray0[4] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 1, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      String string0 = "x)lq~1j";
      TimeZone timeZone0 = TimeZone.getTimeZone("x)lq~1j");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      int int1 = zoneOffset0.getTotalSeconds();
      ZoneId zoneId0 = ZoneId.from(zoneOffset0);
      MockDate mockDate0 = new MockDate((-64800));
      ZoneId zoneId1 = ZoneId.from(zoneOffset0);
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      TimeZone timeZone1 = TimeZone.getTimeZone(zoneId0);
      int int2 = timeZone0.getOffset((long) 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      String string1 = fastDateFormat0.getPattern();
      long long0 = 1L;
      try { 
        fastDateFormat0.parseObject("EEEE, MMMM d, yyyy");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      int int0 = (-4587);
      long long0 = MockDate.UTC((-4587), (-4587), (-4587), (-4587), 0, (-4587));
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("GN[fZg\"X+G", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(3);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(1685);
      Locale locale1 = new Locale("}m=GF5h");
      String string0 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-757), "");
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = fastDateFormat0.format(date0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Object object0 = fastDateFormat0.clone();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(882);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1251, "");
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      simpleTimeZone0.setRawOffset(2);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1623), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1623
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "f|_j`Wz";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("f|_j`Wz", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      String string0 = locale0.getScript();
      Locale locale1 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("3vgt0", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("5\"cT>Wt[X");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2429, "AyW^F3");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(338, (TimeZone) simpleTimeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 338
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null, (Locale) null);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string1 = fastDateFormat0.format(calendar0);
      String string2 = "";
      int int0 = 2870;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-830), "", 0, 4, 2741, 8, 2, 2870, 0, (-102));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 2741
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      Locale locale1 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      Calendar calendar0 = null;
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
      boolean boolean0 = true;
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      ZoneId zoneId0 = timeZone0.toZoneId();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringBuffer stringBuffer0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1778), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1778
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      int int0 = 0;
      String string1 = fastDateFormat0.format((-1L));
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(31, "", (-872), (-1729), 0, (-1582), 0, (-1841), (-1841), 31, 0, 3, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -872
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "|Od#tl-~xlE&tJQ]";
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("|Od#tl-~xlE&tJQ]", (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      String string0 = locale1.getDisplayScript(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]sOu", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      MockDate mockDate0 = new MockDate(1036, 752, 1);
      String string0 = fastDateFormat0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      MockDate mockDate0 = new MockDate(10, 3, 0, (-102), (-996), 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-102), (String) null, (-3918), 3180, (-3918), 3180, 1187, 0, 0, (-2611), 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(60000, (-1), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(731, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 731
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DateFormat dateFormat0 = DateFormat.getTimeInstance(0);
      boolean boolean0 = timeZone0.observesDaylightTime();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(3, 3, timeZone0);
      TimeZone timeZone1 = fastDateFormat1.getTimeZone();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "", (-696), 0, 0, 1, 0, 0, 3, 36);
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat5 = FastDateFormat.getTimeInstance(2, timeZone1);
      FastDateFormat fastDateFormat6 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, (-390), timeZone1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -390
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 10;
      TimeZone timeZone0 = null;
      String string0 = "";
      Locale locale0 = Locale.forLanguageTag("");
      Locale locale1 = Locale.PRC;
      String string1 = locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-6561), 10, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2, (-448), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -448
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Yr!lu&OH.MC$6v5");
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, (-2574), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -2574
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "";
      int int0 = 947;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 5623, (-1327), 0, 3, 3, (-1062), 947);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 1327
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string0 = fastDateFormat0.format(date0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-1606);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1606));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1606
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      // Undeclared exception!
      try { 
        MockInstant.plusMillis((Instant) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "LkN!=`AYxeX?", 0, 14, 15, 15, 14, 0, 0, 15, 0, 15, 14);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 15
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      int int0 = 0;
      SimpleTimeZone simpleTimeZone1 = null;
      try {
        simpleTimeZone1 = new SimpleTimeZone(3, "", (-1416), 1591, 0, 3, 3, 3, (-1416), 0, 2, 1, 97);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1416
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.PRC;
      String string0 = locale0.getDisplayName(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(925, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 925
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1889;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1889);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1889
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-1);
      String string0 = ":";
      TimeZone timeZone0 = TimeZone.getTimeZone(":");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2165), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2165
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "b ~G,@w3Z|";
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("b ~G,@w3Z|", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(3);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(1685);
      Locale locale1 = new Locale("}m=GF5h");
      String string0 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "No date pattern for locale: ";
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date pattern for locale: ", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("l2K@9]:Pq", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "No date time pattern for locale: ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Locale locale1 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "'n`sj'(w";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'n`sj'(w");
      int[] intArray0 = new int[3];
      fastDateFormat0.init();
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 2;
      String string1 = fastDateFormat0.parseToken("'n`sj'(w", intArray0);
      String string2 = fastDateFormat0.toString();
      StringBuffer stringBuffer0 = null;
      FieldPosition fieldPosition0 = new FieldPosition((-1600));
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "s", (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      ParsePosition parsePosition0 = new ParsePosition(2);
      parsePosition0.setErrorIndex(0);
      Object object0 = fastDateFormat0.parseObject((String) null, parsePosition0);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 498, (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "88vD>hlTB";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(15, "88vD>hlTB", 0, 0, (-2154), (-2154), 768, 0, 0, 768);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(15, 15, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 15
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 65;
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(65, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 65
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = (-2403);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2403), (-2403));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2403
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 1841;
      String string0 = "[";
      String string1 = "S";
      Locale locale0 = new Locale("[", "S", "S");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1841, 1841, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1841
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("*uR/vi");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "GBb5R`6T");
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("2D");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = fastDateFormat0.equals(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-4791), (-575), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -575
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      // Undeclared exception!
      try { 
        MockLocalTime.of(1261, 0);
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): 1261
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(906, 906);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 906
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      boolean boolean0 = linkedHashSet0.add(locale0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2);
      String string0 = timeZone0.getDisplayName();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list4 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(2, locale0);
      String string1 = fastDateFormat0.toString();
      String string2 = fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("}kHI%n", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      Instant instant0 = MockInstant.from(offsetDateTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) gregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition(44);
      StringBuffer stringBuffer2 = decimalFormat0.format(0L, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(gregorianCalendar0, stringBuffer2);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("8-]3n}ZA*eQ", parsePosition0);
  }
}
