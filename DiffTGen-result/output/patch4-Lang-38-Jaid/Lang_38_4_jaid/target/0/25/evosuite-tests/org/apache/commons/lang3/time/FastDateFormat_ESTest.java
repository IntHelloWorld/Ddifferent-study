/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:47:26 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.TemporalAccessor;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setRawOffset(2);
      TimeZone.setDefault(timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-11), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -11
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.GERMAN;
      String string0 = locale0.getDisplayLanguage(locale1);
      Locale locale2 = Locale.FRENCH;
      String[] stringArray0 = Locale.getISOLanguages();
      String string1 = locale0.getDisplayName(locale2);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      StringBuffer stringBuffer0 = fastDateFormat0.format((-2847L), (StringBuffer) null);
      String string0 = fastDateFormat0.getPattern();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(16);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 16
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" g@KXg!e", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale0 = Locale.GERMANY;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.applyRules(calendar0, stringBuffer1);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      StringBuffer stringBuffer3 = new StringBuffer(2);
      StringBuffer stringBuffer4 = stringBuffer3.append(true);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setPatternSeparator('V');
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      mockSimpleDateFormat0.setNumberFormat(decimalFormat0);
      boolean boolean0 = linkedList0.containsAll(linkedHashSet0);
      StringBuffer stringBuffer5 = fastDateFormat0.format(date0, stringBuffer3);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHours(866);
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 866 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, (Locale) null);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "yP#O[F+oo^";
      TimeZone timeZone0 = TimeZone.getTimeZone("yP#O[F+oo^");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeZone timeZone2 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeZone timeZone3 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeZone timeZone4 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yP#O[F+oo^", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "![~_d";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Illegal pattern component: ";
      stringArray0[4] = "";
      stringArray0[5] = "9b";
      stringArray0[6] = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField";
      stringArray0[7] = "[zeTZ0C @";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = choiceFormat0.format((long) 1, stringBuffer0, (FieldPosition) null);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "rf._9r>{` cR";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("rf._9r>{` cR");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      dateFormatSymbols0.setAmPmStrings(stringArray0);
      String string0 = timeZone0.getDisplayName();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      Instant instant0 = MockInstant.ofEpochSecond((-2813L));
      long long0 = 581L;
      Instant instant1 = MockInstant.minusSeconds(instant0, 581L);
      Date date0 = Date.from(instant1);
      boolean boolean0 = timeZone0.inDaylightTime(date0);
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 1, (-425), 3);
      String string1 = null;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null, decimalFormatSymbols0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      long long0 = (-24L);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "h4[,*XXH>9F9kf1~o";
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("h4[,*XXH>9F9kf1~o", timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: XX
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      int int1 = 777;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(777, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      TimeZone timeZone0 = TimeZone.getDefault();
      simpleTimeZone0.setID("mLg'<-u Y*RfR");
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      Object object0 = fastDateFormat1.clone();
      String string0 = fastDateFormat0.toString();
      int int2 = fastDateFormat0.hashCode();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 3);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 1184, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 1184
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getDisplayVariant();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale1);
      Set<Character> set0 = locale1.getExtensionKeys();
      Locale locale2 = new Locale("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-654), (TimeZone) null, locale2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -654
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      String string0 = fastDateFormat0.parseToken("O%/?hiQ.", intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(270, 1797, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1797
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated collection contains null element at index: %d", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = "[#NTF";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[#NTF", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`MN<qY&");
      Locale locale0 = Locale.PRC;
      String string0 = locale0.getDisplayScript();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`MN<qY&", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      String string1 = null;
      int int0 = (-2751);
      String string2 = "pH8!w~DwQ";
      int int1 = (-3376);
      int int2 = (-2079);
      int int3 = (-2362);
      int int4 = 39;
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("pH8!w~DwQ", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      TimeZone timeZone2 = fastDateFormat0.getTimeZone();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("O)U6[%3", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-824);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-824), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -824
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(97, 0, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 97
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "Eib";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Eib");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, (-517), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -517
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateFormat0.parseObject("_VqnC?(qZ(`a$", parsePosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-3243L), (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      Locale locale0 = fastDateFormat0.getLocale();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((long) 0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("4xIEE", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      String string0 = "Gg'^ :c[.D}k>-sT";
      int int1 = 93;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Gg'^ :c[.D}k>-sT", 0, 0, (-5324), 0, 43, 0, (-5324), 93);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-4956), (-4956), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -4956
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, (TimeZone) null, locale1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      ZoneId zoneId0 = timeZone0.toZoneId();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      String string0 = "`m<[acX={I+yI!0Y#9";
      Locale locale1 = Locale.ROOT;
      String[] stringArray0 = Locale.getISOCountries();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`m<[acX={I+yI!0Y#9", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "Dm\"RR(T;:8^ =.)K";
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Dm\"RR(T;:8^ =.)K", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: RR
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1877), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1877
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.init();
      String string1 = "|CS]!<KpG2U";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("|CS]!<KpG2U");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      Object object0 = fastDateFormat0.clone();
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator(object0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator((Object) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      TimeZone.setDefault(simpleTimeZone0);
      simpleTimeZone0.setStartYear((-2008));
      String string0 = ">JB\\";
      // Undeclared exception!
      try { 
        simpleTimeZone0.getDisplayName(true, (-1996));
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1996
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      boolean boolean0 = linkedList0.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      MockDate mockDate0 = new MockDate();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      MockSimpleDateFormat mockSimpleDateFormat1 = null;
      try {
        mockSimpleDateFormat1 = new MockSimpleDateFormat("", (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-91), 457, 1, (-1000));
      boolean boolean0 = fastDateFormat0.equals(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone1 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(13, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 13
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("S]IQL}YSe");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-257), "", (-257), 0, 0, (-35), (-35), 0, (-2716), (-35));
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2146, "H");
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2831;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      TimeZone.setDefault(simpleTimeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2301, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2301
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "";
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", "");
      Locale.setDefault(locale0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      String string1 = locale0.getDisplayName(locale1);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 58, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale1.toLanguageTag();
      String string1 = locale0.getDisplayCountry(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("igRXgE#{Kz*Rs8x");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "Bw!]uQtG#,UGhn`f";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Bw!]uQtG#,UGhn`f");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "hGyi'`ps@2[";
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("hGyi'`ps@2[", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(12, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 12
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.getPattern();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(16);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 16
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      TimeZone.setDefault(timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(16, 2232);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2232
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "No date pattern for locale: ");
      Locale locale0 = Locale.GERMANY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      String string0 = Locale.lookupTag(linkedList0, set0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      int int0 = 1110;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 1110, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1110
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 3);
      String string0 = fastDateFormat0.format(1L);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      boolean boolean0 = timeZone0.observesDaylightTime();
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      fastDateFormat1.init();
      String string0 = fastDateFormat1.toString();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, timeZone0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-3540);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3540));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3540
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "#[)gTL\"hQ.23]rE<*^");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("3_!FGkCfwlqy", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = locale0.getDisplayCountry();
      String string1 = locale0.getScript();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 5;
      String string0 = "OK.9RtvEg7< )kZaxl";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "OK.9RtvEg7< )kZaxl");
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1983));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1983
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2157), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2157
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(4, 4, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = TimeZone.getTimeZone("3o@Q>(=c8U>'$");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string0 = locale0.getScript();
      ParsePosition parsePosition0 = new ParsePosition((-754));
      Object object0 = fastDateFormat0.parseObject("at!P?H\"9^", parsePosition0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, (String) null, 0, 31, 0, 0, (-36), 0, 3, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "";
      String string1 = "=rcC>c";
      Locale locale0 = new Locale("", "=rcC>c");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2558, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2558
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.PRC;
      String string0 = locale0.getDisplayLanguage(locale1);
      Locale locale2 = Locale.FRENCH;
      String[] stringArray0 = Locale.getISOLanguages();
      String string1 = locale0.getDisplayName(locale2);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string2 = "";
      // Undeclared exception!
      try { 
        ZoneOffset.from((TemporalAccessor) null);
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3488), "bT@;`!");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormat dateFormat0 = DateFormat.getInstance();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      String string0 = fastDateFormat0.format(date0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1426, "", 1426, (-646), 0, 0, 2904, 1, 1, 2, (-199));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1426
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "U6]2w_1(t";
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("U6]2w_1(t", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 4064;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("n+PPTBi!G{");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      String string0 = "-Qx~Sh'~!V";
      Locale locale0 = new Locale("-Qx~Sh'~!V", "-Qx~Sh'~!V");
      String[] stringArray0 = Locale.getISOLanguages();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("-Qx~Sh'~!V", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'Q'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer("Illegal pattern component: ");
      FieldPosition fieldPosition0 = new FieldPosition(0);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2533), "", 2746, 0, 274, 274, 0, 2746, 7, 274);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week in month 2746
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }
}
