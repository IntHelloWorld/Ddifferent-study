/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:47:28 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.TextStyle;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "yZDwm-7q\\1)Yv3";
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yZDwm-7q\u0001)Yv3", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "~7DO .[;mA5G80I";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("~7DO .[;mA5G80I", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.setTime(3);
      String string0 = fastDateFormat0.format((Object) mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":pF-s[");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string0 = fastDateFormat0.format(calendar0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.setRawOffset(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2/14/14 8:21 PM", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      String string0 = fastDateFormat0.format(calendar0);
      String string1 = fastDateFormat0.getPattern();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "2/14/14 8:21 PM", stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 3143, (-1));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string0 = fastDateFormat0.format(date0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      String string1 = "";
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(0);
      // Undeclared exception!
      try { 
        fastDateFormat3.formatToCharacterIterator(fastDateFormat2);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("#&[*qzMUOzfW5AMPe", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockDate mockDate0 = new MockDate((-736), 599, 0, (-736), 430, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(430);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 430
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Object object0 = new Object();
      boolean boolean0 = fastDateFormat0.equals(object0);
      boolean boolean1 = locale0.hasExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 1;
      intArray0[7] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat1.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "Illegal pattern component: ";
      Locale locale0 = Locale.forLanguageTag("Illegal pattern component: ");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-a+9*i}sJ|", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "~7IO .[;mA5G87I";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("~7IO .[;mA5G87I", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 65;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      ZoneId zoneId0 = zoneOffset0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 65, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 65
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 5;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 2;
      String string0 = fastDateFormat0.parseToken("No date time pattern for locale: ", intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("[&8{4i");
      ZoneId zoneId0 = timeZone0.toZoneId();
      Locale locale0 = Locale.forLanguageTag("");
      Locale locale1 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayName(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(455, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 455
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">u,Hrb:p#U", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("_/Js7n,70%\"!FQVgn");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Kv,IJ6!/YIbo", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      String string0 = "8k=grkvQGU%=AMV}";
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject("8k=grkvQGU%=AMV}", parsePosition0);
      Locale locale0 = new Locale("", "", "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      int int2 = (-3931);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", (-487), 0, (-1), (-3931), 1, (-487), (-487), 3);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week 487
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TextStyle textStyle0 = TextStyle.FULL;
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.ITALIAN;
      String string0 = locale0.getDisplayVariant(locale1);
      String[] stringArray0 = Locale.getISOCountries();
      String string1 = zoneOffset0.getDisplayName(textStyle0, locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("", (DateFormatSymbols) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      String string0 = timeZone0.getDisplayName(locale0);
      String string1 = timeZone0.getDisplayName(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-1024);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1024), "");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1024), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1024
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 122, 2, (-393), 0, 0, 14, 14, 0, 3454);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(4, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "m\"fp";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = new FastDateFormat("m\"fp", timeZone0, locale0);
      String string1 = "@`l2B;\\Y";
      ParsePosition parsePosition0 = new ParsePosition((-1889));
      Object object0 = fastDateFormat0.parseObject("@`l2B;Y", parsePosition0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("m\"fp", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("=", dateFormatSymbols0);
      String string0 = locale0.getDisplayScript();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale1 = Locale.UK;
      DateFormatSymbols dateFormatSymbols1 = DateFormatSymbols.getInstance(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale1);
      String string1 = fastDateFormat0.toString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      String string1 = fastDateFormat0.toString();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("KTe}");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "7Y.GXOwfE;";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7Y.GXOwfE;");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      int int1 = (-1152);
      MockDate mockDate0 = new MockDate((-116), 1, (-1152));
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1548), (-1548), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1548
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(0L, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = "(.NsjzhgU(nR&!X3hV5";
      boolean boolean0 = locale0.hasExtensions();
      int int0 = 12;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "(.NsjzhgU(nR&!X3hV5", 3, 3, 0, 0, 0, 12, 0, 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: 0
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("_", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 2, locale0);
      fastDateFormat0.init();
      int int0 = fastDateFormat1.getMaxLengthEstimate();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat1.applyRules((Calendar) null, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(1468L, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = (-1582);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.ITALIAN;
      Locale.setDefault(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, (-1582), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1582
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("!K+", timeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 1, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      String string1 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 2, timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("GMT+18:00");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 1143, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1143
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("!K+", timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4996, "", 4996, 0, 0, 0, 1, 1832, 0, 1, 4996, 0, 1832);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1832, 1832, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1832
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.US;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      int int1 = fastDateFormat0.hashCode();
      int int2 = (-1090);
      String string0 = null;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      MockDate mockDate0 = new MockDate();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer(".OrR5 (");
      StringBuffer stringBuffer1 = fastDateFormat0.format(200L, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition(3);
      StringBuffer stringBuffer2 = decimalFormat0.format((-366.46275), stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Date) mockDate0, stringBuffer2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.hashCode();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone(".OrR5 (");
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = timeZone0.getDisplayName(locale0);
      Locale locale1 = Locale.US;
      String string1 = locale1.getDisplayLanguage();
      FastDateFormat fastDateFormat0 = new FastDateFormat("<null>", timeZone0, locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", timeZone0);
      MockDate mockDate0 = new MockDate(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      boolean boolean0 = mockDate0.after(date0);
      String string2 = fastDateFormat1.format((Date) mockDate0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0, locale0);
      String string3 = fastDateFormat0.toString();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = timeZone0.getOffset(0L);
      timeZone0.setRawOffset(0);
      ZoneId zoneId0 = timeZone0.toZoneId();
      timeZone0.setRawOffset(0);
      Locale locale0 = new Locale("Q~It2Rp");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      String string0 = fastDateFormat1.toString();
      Locale locale1 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.setTime(3);
      String string0 = fastDateFormat0.format((Object) mockDate0);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat", (ParsePosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.UK;
      String[] stringArray0 = Locale.getISOCountries();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2331), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2331
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      Locale locale1 = fastDateFormat0.getLocale();
      String string0 = locale1.getDisplayVariant(locale0);
      String string1 = timeZone0.getDisplayName();
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, (String) null, 1, 2, 0, 0, 0, 0, (-1), 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ParsePosition parsePosition0 = new ParsePosition(1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 2, (Locale) null);
      parsePosition0.setErrorIndex((-2263));
      Object object0 = fastDateFormat0.parseObject("#UAbfFC%Xz=^'(C", parsePosition0);
      String string0 = fastDateFormat0.getPattern();
      int int0 = 0;
      int int1 = (-70);
      int int2 = (-2301);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1204, 1, 1156, 1, 0);
      MockDate mockDate0 = new MockDate();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer("");
      FieldPosition fieldPosition0 = new FieldPosition((-1));
      StringBuffer stringBuffer1 = decimalFormat0.format((double) (-2263), stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat1.format((Calendar) mockGregorianCalendar0, stringBuffer2);
      int int3 = 2024;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(439, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 439
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("jC_<K)7&U't!AYA};", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule", parsePosition0);
      String string0 = fastDateFormat0.toString();
      String string1 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2599;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2599, 2599, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2599
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      String string1 = "yAdNr";
      String string2 = fastDateFormat0.format(691L);
      timeZone0.setID("yAdNr");
      timeZone0.setRawOffset(0);
      fastDateFormat0.init();
      String string3 = fastDateFormat0.format(0L);
      int int0 = (-794);
      MockDate mockDate0 = new MockDate((-794), 0, 2, (-242), 3, 2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "");
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, (Locale) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      // Undeclared exception!
      try { 
        fastDateFormat1.format((Object) "", stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 1886, 1, 0, 1);
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2241);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2241
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2939, 2939, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2939
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(111);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 111
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 1, 0, 0);
      mockGregorianCalendar0.setTimeInMillis(1);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      long long0 = 98L;
      mockGregorianCalendar0.setTimeInMillis(98L);
      StringBuffer stringBuffer1 = stringBuffer0.append('l');
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1846), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1846
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("$f[C", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "@*,sYy5|'8o;u\"hp/\"");
      Locale locale0 = Locale.GERMAN;
      simpleTimeZone0.setID("@*,sYy5|'8o;u\"hp/\"");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("n", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("f", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      Locale locale1 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-485), 39);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 39
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = new Locale("Mugo:=", "1q,4u", "B?Y");
      String[] stringArray0 = Locale.getISOCountries();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("B?Y");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(6, 1930);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1930
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("U-=c*");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(3961);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3961
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.GERMAN;
      String string0 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getDisplayLanguage(locale0);
      Locale locale1 = Locale.US;
      String string1 = locale0.getDisplayCountry();
      String string2 = locale0.getDisplayVariant(locale0);
      Locale.setDefault(locale0);
      String string3 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-214), timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -214
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) null, locale0);
      Locale locale1 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null, locale1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 2520;
      int int1 = (-403);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      TimeZone.setDefault(timeZone0);
      Locale.setDefault(locale0);
      Locale locale1 = Locale.forLanguageTag("2R8]|");
      timeZone0.setRawOffset((-403));
      String string0 = " k";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(" k", locale0);
      ParsePosition parsePosition0 = new ParsePosition((-403));
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.parse(" k", parsePosition0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string0 = fastDateFormat0.format(calendar0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.setRawOffset(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("c9xa}'%)AS=gqco+s", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = new Locale("", "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      String string0 = fastDateFormat0.format((Calendar) gregorianCalendar0);
      String string1 = fastDateFormat0.format((Calendar) gregorianCalendar0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      // Undeclared exception!
      try { 
        fastDateFormat0.format((long) 0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      String string1 = timeZone0.getDisplayName();
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(361, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 361
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
