/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:44:26 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-3070), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -3070
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockDate mockDate0 = new MockDate(0, 2, 0, 0, 2);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[9];
      String string0 = fastDateFormat0.parseToken("t>IU.'", intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Negative values should not be possible");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("\"|", timeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      String string0 = fastDateFormat0.format(554L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, (-1), locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-926), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -926
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2212), 0, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2212
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(122, 16, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 16
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-620), (-620));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -620
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1225), "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1225), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1225
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = new Locale("", "&]Lg", "&]Lg");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2640, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2640
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(481);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 481
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("v<Ei)XX6sI.Zq");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (Locale) null);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) mockSimpleDateFormat0, (StringBuffer) null, (FieldPosition) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      int int0 = fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-1047), 2, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1710), "", 0, 0, 0, 0, 0, 5, (-1), 0);
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 1, (TimeZone) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("The validated collection contains null element at index: %d");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(925, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 925
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(31, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(5, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Jb^^%|azw[7Eq[3");
      Locale locale0 = new Locale("-o?", "Jb^^%|azw[7Eq[3", "L");
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "\"|";
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
      String string1 = fastDateFormat0.format(date0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("\"|", locale0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(0, timeZone0);
      int int0 = (-1958);
      String string2 = null;
      // Undeclared exception!
      try { 
        timeZone0.setID((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate((-3349), 1, 8, 8, 8, (-3349));
      StringBuffer stringBuffer0 = new StringBuffer("HO</7$h3kiQXddD:Zb");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, (Locale) null);
      Instant instant0 = MockInstant.ofEpochMilli(1);
      Date date0 = Date.from(instant0);
      String string0 = fastDateFormat0.format(date0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("v<Ei)XX6sI.Zq");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator((Object) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      Locale locale0 = Locale.ITALIAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-dbqKA6Cb$Y;y)=}VUY");
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      boolean boolean0 = fastDateFormat0.equals(calendar0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      // Undeclared exception!
      try { 
        simpleTimeZone0.setStartRule(0, 1886, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day 1886
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!M]x (l!c;*x!T_*&", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3600000, "NFRNZ'z!8");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("DtMo:[7:ewt", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 860, 0, 0, 2214, 860, 2214);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7;r", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3ptg)]t|'}gLE");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("3ptg)]t|'}gLE", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("no~", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("g|Q_3tccD,8Vo<R~", (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("z*f0x9Iv", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("bIgXt(A ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<;>3>Us!}Flz(x2");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("${`>`Tyua`M},Kb(#", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[}Lg");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("aqSspWP{");
      Locale locale0 = Locale.forLanguageTag("GSds98) #CyD/WJ ");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("WK=cg^0WCPAN>>Tqn", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"]$z{Jr,0+#u$4.h8~M", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("/Z%*d\u0002G,| ujq", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(",.yDVN_[}}rf", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Cy0?`b#K-Gi.pj2");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Jb^^%|azw[7Eq[3");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      String string0 = fastDateFormat0.format(0L);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" Br0`d");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-4664), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -4664
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Jb^^%|azw[7Eq[3");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("u<yLKcl8)bMWg6e", "u<yLKcl8)bMWg6e");
      FastDateFormat fastDateFormat0 = new FastDateFormat("u<yLKcl8)bMWg6e", timeZone0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", (TimeZone) null, locale0);
      String string0 = fastDateFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-358));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -358
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      ParsePosition parsePosition0 = new ParsePosition(2807);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-3660), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3660
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      String string0 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(0, 2, 0, 0, 2);
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.ensureCapacity(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "", 2, 0, 2, 2, 0, 0, 3, 3, 0, 0, 2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 2087, 0, 2, 3);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(7, 1, 2807);
      long long0 = mockDate0.getTime();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("Tuesday, October 19, 0006 12:02:03 AM GMT", 0, 0);
      StringBuffer stringBuffer1 = fastDateFormat0.format(745L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = fastDateFormat0.getLocale();
      ParsePosition parsePosition0 = new ParsePosition(2807);
  }
}
