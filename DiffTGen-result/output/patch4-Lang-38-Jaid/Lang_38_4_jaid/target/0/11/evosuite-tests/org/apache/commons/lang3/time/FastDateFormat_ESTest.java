/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:41:28 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.text.AttributedCharacterIterator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoField;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "4m`^eS^T";
      TimeZone timeZone0 = TimeZone.getTimeZone("4m`^eS^T");
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      String string1 = fastDateFormat0.format(1630L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(1589);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(1630L, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.format((long) 0, stringBuffer2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, (TimeZone) null);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("[_dVnLce|juTP^['$I>", decimalFormatSymbols0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"[_dVnLce|juTP^['$I>\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      String string0 = locale0.getDisplayLanguage(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
      TimeZone timeZone0 = TimeZone.getTimeZone("\u4E2D\u6587");
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(3, locale0);
      TimeZone timeZone1 = TimeZone.getTimeZone("\u4E2D\u6587");
      String string1 = timeZone1.getDisplayName(locale1);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(2, timeZone1);
      FastDateFormat fastDateFormat5 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string2 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
      FastDateFormat fastDateFormat6 = FastDateFormat.getInstance();
      TimeZone timeZone2 = null;
      FastDateFormat fastDateFormat7 = FastDateFormat.getInstance("", (TimeZone) null, locale1);
      boolean boolean0 = fastDateFormat2.getTimeZoneOverridesCalendar();
      String string3 = fastDateFormat5.format((-495L));
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-363), 0, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -363
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(2);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      String string0 = timeZone0.getDisplayName(locale0);
      Object object0 = mockDate0.clone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, timeZone0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-870), locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -870
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "j#(#o|IF-$8J6N";
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("j#(#o|IF-$8J6N", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedHashSet0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "+q[{DnMSh7gf";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("+q[{DnMSh7gf");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "~";
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("~", timeZone0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(477, "The pattern must not be null");
      simpleTimeZone0.setStartYear(4147);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.roll((-1263), true);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField");
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CHINA;
      String string0 = locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 0, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(364, "sz3yv0@p`Sm`", 0, 0, 0, 0, 0, 0, 0, 0, 0, 1349, 556);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(364, 0, (TimeZone) simpleTimeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 364
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("pp69ut|qH?)H<CR");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: pp
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "T", 0, 0, 0, (-1590), 390, 0, 0, (-467), 0, (-1590), 4);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1323), 6);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 6
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      String string0 = "x~=zqXs &1";
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("x~=zqXs &1", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ">PA#Fd";
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">PA#Fd", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "O2\"f[g'n!3+T";
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("O2\"f[g'n!3+T", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 3);
      int int0 = 0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale1 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        DateFormat.getTimeInstance((-621), locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -621
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      Object object0 = fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(object0);
      MockDate mockDate0 = new MockDate(3, 0, 0);
      String string0 = "y-i,pe~hB^v_";
      StringBuffer stringBuffer0 = new StringBuffer("y-i,pe~hB^v_");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = "";
      Locale locale1 = new Locale("");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      boolean boolean0 = locale1.hasExtensions();
      Long long0 = new Long((-924L));
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = decimalFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
      fieldPosition0.setBeginIndex(3);
      StringBuffer stringBuffer2 = stringBuffer0.appendCodePoint(123);
      AttributedCharacterIterator attributedCharacterIterator0 = decimalFormat0.formatToCharacterIterator(long0);
      StringBuffer stringBuffer3 = stringBuffer1.append(0L);
      StringBuffer stringBuffer4 = stringBuffer1.insert(1, false);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale1, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2766;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2766, "");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      fastDateFormat0.init();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = mockSimpleDateFormat0.parse("SV.<S6g(M", parsePosition0);
      StringBuffer stringBuffer0 = new StringBuffer();
      parsePosition0.setErrorIndex(747);
      TimeZone.setDefault(simpleTimeZone0);
      DateFormat dateFormat0 = DateFormat.getDateInstance(0, locale0);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      // Undeclared exception!
      try { 
        fastDateFormat1.format((Object) null, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "LIl\"";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("LIl\"", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("aVu3$f");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, (Locale) null);
      Locale locale1 = fastDateFormat0.getLocale();
      int int0 = (-2236);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2236), (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2236
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      String string1 = locale0.getDisplayName();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      int int0 = (-2426);
      int int1 = 0;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "T[^H;";
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setID("");
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("T[^H;", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.init();
      int int0 = fastDateFormat0.hashCode();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getDisplayLanguage();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(1);
      fastDateFormat0.init();
      MockDate mockDate0 = new MockDate(0, 1, 1, 1, 2);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Chinese", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "dC5eka";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("dC5eka");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2tA10:AQCMS");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G");
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      String string0 = fastDateFormat0.parseToken("40w)t{J%a len%HSY", intArray0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1466));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1466
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 5060;
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale1 = Locale.JAPANESE;
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(5060, (-3005), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3005
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2231), 60000);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 60000
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1553), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1553
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "Fr}^GXw|%aZ&>(0Q";
      Locale locale0 = new Locale("Fr}^GXw|%aZ&>(0Q", "Fr}^GXw|%aZ&>(0Q");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Fr}^GXw|%aZ&>(0Q", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1945;
      Locale locale0 = new Locale("No date time pattern for locale: ", "K$\u0004F62C[K5I 8");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale1 = Locale.FRENCH;
      boolean boolean0 = linkedHashSet0.add(locale1);
      boolean boolean1 = linkedHashSet0.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list2, locale_FilteringMode0);
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = locale0.getExtension('c');
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1945, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1945
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^)v}HU");
      Locale locale0 = new Locale("*w@C%", "*w@C%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((-812L));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
      String string1 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 0, locale0);
      Object object0 = fastDateFormat2.clone();
      boolean boolean0 = fastDateFormat1.equals(object0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      String string2 = fastDateFormat2.format(calendar0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      String string3 = fastDateFormat3.format(date0);
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      Locale locale1 = fastDateFormat0.getLocale();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      String string0 = locale0.getDisplayLanguage(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
      TimeZone timeZone0 = TimeZone.getTimeZone("\u4E2D\u6587");
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(3, locale0);
      TimeZone timeZone1 = TimeZone.getTimeZone("\u4E2D\u6587");
      String string1 = timeZone1.getDisplayName(locale1);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(2, timeZone1);
      FastDateFormat fastDateFormat5 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string2 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
      FastDateFormat fastDateFormat6 = FastDateFormat.getDateTimeInstance(2, 1, timeZone0);
      TimeZone timeZone2 = null;
      FastDateFormat fastDateFormat7 = FastDateFormat.getInstance("", (TimeZone) null, locale1);
      boolean boolean0 = fastDateFormat2.getTimeZoneOverridesCalendar();
      String string3 = fastDateFormat5.format((-495L));
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-363), 0, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -363
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4m`^eS^T");
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("4m`^eS^T", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "d3zeNah";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("d3zeNah");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "9K+l/=)G`;R6G4=b%";
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.FRANCE;
      String string1 = locale0.getDisplayCountry(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("9K+l/=)G`;R6G4=b%", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("D}9Dh-9u92Eb", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      String string0 = fastDateFormat0.toString();
      int int0 = (-1);
      String string1 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.setDefault(locale1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      Locale locale2 = locale0.stripExtensions();
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale locale3 = Locale.lookup(linkedList0, list2);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(4, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8FoYD:=ywm");
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.ITALIAN;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      String string0 = locale0.getDisplayScript(locale1);
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1518), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1518
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1710);
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1710), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1710
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(5, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.US;
      String string0 = locale0.getDisplayVariant();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string1 = locale0.getDisplayLanguage();
      String string2 = fastDateFormat0.toString();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      fastDateFormat0.init();
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "", 0, 0, 48, 3019, 0, 0, 0, 3);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 3, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String string0 = Locale.lookupTag(linkedList0, linkedHashSet0);
      int int0 = fastDateFormat0.hashCode();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate(1, 2, 0);
      mockDate0.setTime(0L);
      fastDateFormat1.init();
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0);
      String string0 = fastDateFormat0.format((Object) mockDate0);
      Locale.setDefault(locale0);
      TimeZone timeZone1 = mockSimpleDateFormat0.getTimeZone();
      String string1 = timeZone1.getDisplayName();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(1, timeZone1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format(1989L);
      fastDateFormat0.init();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.ITALIAN;
      String string1 = locale0.getDisplayName(locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, (TimeZone) null, (Locale) null);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-1804);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1804));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1804
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("3Nr6 ", timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "s-*if7aZ7k8f Ln{", 0, 0, 0, 0, 0, 0, 0, 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 2, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 2
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1316);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1316
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("K{&{");
      Locale locale0 = Locale.ENGLISH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("K{&{", locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1669));
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.parse("))a+_\"0", parsePosition0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G%\"WBL'B9/fc");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("G%\"WBL'B9/fc", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "Lq";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("Lq", (TimeZone) null, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        byteBuffer0.put((-253), (byte) (-1));
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      String string0 = "";
      Locale locale1 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2552, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2552
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 744;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(744);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 744
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      String string0 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField");
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^)v}HU");
      Locale locale0 = new Locale("*w@C%", "*w@C%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((-812L));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 1);
      String string1 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 0, locale0);
      Object object0 = fastDateFormat2.clone();
      boolean boolean0 = fastDateFormat1.equals(object0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      String string2 = fastDateFormat2.format(calendar0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      String string3 = fastDateFormat0.format(calendar0);
      String string4 = fastDateFormat3.format(date0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance();
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      Locale locale1 = Locale.FRANCE;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 60;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZoneId zoneId0 = zoneOffset0.normalized();
      ChronoField chronoField0 = ChronoField.MONTH_OF_YEAR;
      // Undeclared exception!
      try { 
        zoneOffset0.getLong(chronoField0);
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: MonthOfYear
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-2011);
      String string0 = null;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
