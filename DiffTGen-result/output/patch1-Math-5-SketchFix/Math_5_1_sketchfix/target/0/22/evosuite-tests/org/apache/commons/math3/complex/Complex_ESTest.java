/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:11:06 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.createComplex((-1.8817204106253274E-9), 0.41997434161402614);
      Complex complex3 = complex2.ONE.pow((-1.8817204106253274E-9));
      Complex complex4 = complex2.ZERO.add(complex0);
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex2.pow((-1.8817204106253274E-9));
      Complex complex7 = complex5.acos();
      Complex complex8 = Complex.valueOf((-1.8817204106253274E-9));
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex2.subtract(complex4);
      Complex complex11 = complex3.I.divide(complex7);
      Complex complex12 = complex11.ONE.log();
      Complex complex13 = complex11.negate();
      Complex complex14 = complex8.createComplex(1541.0, (-1.8817204106253274E-9));
      Complex complex15 = complex10.ZERO.add((-1.8817204106253274E-9));
      Complex complex16 = complex4.ZERO.conjugate();
      List<Complex> list0 = complex10.ZERO.nthRoot(3968);
      Complex complex17 = complex1.INF.divide(424.684780815709);
      Complex complex18 = complex10.I.pow((-2219.0301602));
      Complex complex19 = complex8.sqrt();
      Complex complex20 = complex19.INF.pow((-2219.0301602));
      Complex complex21 = complex1.negate();
      Complex complex22 = complex21.I.multiply(complex7);
      Complex complex23 = complex21.asin();
      Complex complex24 = complex3.sqrt();
      Complex complex25 = complex7.multiply((double) 3968);
      Complex complex26 = complex0.add(complex4);
      Complex complex27 = complex6.tan();
      Complex complex28 = complex7.log();
      // Undeclared exception!
      complex25.nthRoot(3968);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3671.54117));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex0.I.add((-3671.54117));
      Complex complex5 = complex0.asin();
      ComplexField complexField0 = complex5.getField();
      int int0 = complex5.ZERO.hashCode();
      int int1 = complex0.hashCode();
      double double0 = complex0.INF.getArgument();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex7.multiply(7);
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex6.tan();
      double double1 = complex11.getArgument();
      int int2 = complex5.hashCode();
      Complex complex12 = complex8.log();
      Complex complex13 = complex7.sinh();
      ComplexField complexField1 = complex8.getField();
      Complex complex14 = complex9.conjugate();
      Complex complex15 = complex14.I.sinh();
      Complex complex16 = complex8.subtract(complex0);
      Complex complex17 = complex7.add(Double.NaN);
      Complex complex18 = complex4.exp();
      Complex complex19 = complex13.cosh();
      Complex complex20 = Complex.valueOf((-3671.54117));
      Complex complex21 = complex7.createComplex(Double.NaN, (-1.0));
      Complex complex22 = complex3.multiply(7);
      Complex complex23 = complex3.pow(complex9);
      Complex complex24 = complex16.pow(complex7);
      Complex complex25 = complex22.pow((-1.0));
      Complex complex26 = complex18.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.log();
      Object object0 = complex2.ZERO.readResolve();
      ComplexField complexField0 = complex2.NaN.getField();
      String string0 = complex0.toString();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.createComplex(2.0, 3137.2);
      int int0 = complex3.hashCode();
      double double0 = complex0.getReal();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.createComplex(0.0, 0.0);
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.INF.log();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex10.divide(Double.POSITIVE_INFINITY);
      Complex complex13 = complex0.cos();
      boolean boolean0 = complex7.isInfinite();
      Complex complex14 = complex3.sin();
      Complex complex15 = complex4.add((-20.0));
      double double1 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.divide(2174.54861117);
      List<Complex> list0 = complex0.nthRoot(952);
      Complex complex4 = complex0.add(1485.9960113);
      Complex complex5 = complex0.multiply((-3900.202847));
      double double1 = complex5.getImaginary();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex1.add((-20.0));
      Complex complex8 = complex4.atan();
      Complex complex9 = complex0.divide(2.1313228444765414E-138);
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = Complex.valueOf(0.0, -0.0);
      Complex complex12 = complex1.multiply(complex0);
      Complex complex13 = complex6.tan();
      Complex complex14 = complex13.sin();
      Complex complex15 = complex12.sqrt();
      Complex complex16 = complex3.createComplex(1485.9960113, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1972.100479));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.divide(602.3766);
      double double0 = complex0.ONE.abs();
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex0.createComplex((-1972.100479), 520.156169775205);
      Complex complex5 = complex0.NaN.multiply(520.156169775205);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.createComplex(0.0, 1.0);
      Complex complex9 = Complex.valueOf(0.0, 2.6595401669835947E-8);
      Complex complex10 = complex7.pow(complex4);
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex3.add(7.667647949477605E-53);
      Complex complex13 = complex12.exp();
      Complex complex14 = complex12.pow((-1.7198866036687559E90));
      Complex complex15 = complex3.ZERO.conjugate();
      Complex complex16 = complex15.I.asin();
      Complex complex17 = complex13.reciprocal();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex4.INF.multiply(2.0);
      Object object0 = complex4.ZERO.readResolve();
      Complex complex6 = complex0.I.subtract(0.0);
      Complex complex7 = complex0.INF.multiply(140.225428639107);
      double double0 = complex0.getReal();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex9.divide(complex4);
      Object object1 = complex8.INF.readResolve();
      Complex complex11 = complex0.pow(complex7);
      Complex complex12 = complex11.NaN.reciprocal();
      Complex complex13 = Complex.valueOf(6.283185307179586, (-635.547203));
      Complex complex14 = complex6.add(complex13);
      Complex complex15 = new Complex(0.6451379060745239);
      Complex complex16 = complex4.NaN.divide(complex15);
      Complex complex17 = complex0.reciprocal();
      Complex complex18 = complex17.INF.tanh();
      Complex complex19 = complex6.pow(complex12);
      Complex complex20 = complex12.sqrt1z();
      Complex complex21 = complex0.multiply(1120);
      Complex complex22 = complex21.ONE.subtract(complex12);
      Complex complex23 = complex21.I.tanh();
      int int0 = complex5.hashCode();
      Complex complex24 = complex19.sinh();
      Complex complex25 = complex14.add(6.283185307179586);
      Complex complex26 = complex13.tanh();
      double double1 = complex23.getArgument();
      Complex complex27 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2496.0));
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.multiply((-2496.0));
      Complex complex5 = complex2.NaN.createComplex(1.0988372954605789E-8, 0.0);
      double double1 = complex0.abs();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.INF.add(complex8);
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex7.INF.add(0.0);
      Complex complex12 = complex7.ZERO.atan();
      Complex complex13 = complex12.INF.pow((-2496.0));
      Complex complex14 = complex7.atan();
      Complex complex15 = Complex.valueOf((-1955.0), (-1.1288398461391523E-295));
      Complex complex16 = complex3.reciprocal();
      double double2 = complex16.ONE.getArgument();
      String string0 = complex7.toString();
      boolean boolean0 = complex4.isInfinite();
      Complex complex17 = complex1.cos();
      double double3 = complex16.getImaginary();
      Complex complex18 = complex12.subtract((-2496.0));
      Complex complex19 = complex13.conjugate();
      Complex complex20 = complex6.multiply(619);
      Object object0 = complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 1728.072404681244;
      Complex complex0 = Complex.valueOf((-2212.908290900579), 1728.072404681244);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.sinh();
      boolean boolean0 = complex1.isInfinite();
      int int0 = complex4.hashCode();
      Complex complex5 = complex2.I.sqrt();
      boolean boolean1 = complex1.isInfinite();
      double double1 = complex4.getImaginary();
      Complex complex6 = complex4.ZERO.exp();
      Complex complex7 = complex2.multiply((-1199));
      Complex complex8 = complex2.NaN.sqrt();
      Complex complex9 = complex7.add(complex2);
      double double2 = complex9.getArgument();
      Complex complex10 = complex0.I.sqrt();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex9.INF.multiply(complex11);
      Complex complex13 = complex12.acos();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex16 = complex3.add(complex9);
      Complex complex17 = Complex.valueOf(Double.POSITIVE_INFINITY);
      try { 
        complex16.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(839.77732, 304.8728103);
      Complex complex1 = Complex.valueOf(839.77732, 304.8728103);
      double double0 = complex1.getArgument();
      Complex complex2 = Complex.valueOf(304.8728103, 6.283185307179586);
      Complex complex3 = complex1.I.divide(0.0);
      Complex complex4 = complex2.I.pow((-1.0));
      Complex complex5 = complex0.I.divide(complex1);
      Complex complex6 = complex5.ZERO.pow(839.77732);
      Complex complex7 = complex5.NaN.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex0.NaN.sinh();
      boolean boolean1 = complex0.equals(")");
      Complex complex9 = complex2.sqrt();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1.7188958587407816E-8));
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex3.I.log();
      double double0 = complex5.I.abs();
      Complex complex6 = complex3.ZERO.subtract(complex1);
      List<Complex> list0 = complex3.NaN.nthRoot(1);
      Complex complex7 = complex5.ONE.sqrt1z();
      Complex complex8 = complex1.ZERO.sqrt();
      Complex complex9 = Complex.valueOf((-896.2), 0.0);
      Complex complex10 = complex7.I.exp();
      Complex complex11 = Complex.valueOf(1.4047281742095947);
      Complex complex12 = complex3.exp();
      Complex complex13 = complex3.pow(0.0);
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex2.INF.sqrt();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex4.NaN.asin();
      Complex complex9 = complex8.ZERO.sqrt();
      double double0 = complex3.ONE.abs();
      Complex complex10 = complex0.INF.cosh();
      Complex complex11 = complex0.INF.acos();
      Complex complex12 = complex0.NaN.log();
      double double1 = complex11.getArgument();
      Complex complex13 = complex12.NaN.divide(0.0);
      Complex complex14 = complex11.NaN.tan();
      Complex complex15 = complex12.createComplex(2133.689322044148, (-2391.59));
      Complex complex16 = complex0.reciprocal();
      Complex complex17 = complex16.I.sin();
      Complex complex18 = complex16.multiply(complex3);
      Complex complex19 = complex0.cosh();
      Complex complex20 = complex16.multiply((-11.285637));
      Complex complex21 = complex1.acos();
      Complex complex22 = complex1.subtract(0.0);
      Complex complex23 = complex12.exp();
      Complex complex24 = complex17.ONE.multiply(1048);
      boolean boolean0 = complex11.isNaN();
      Complex complex25 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex26 = complex17.divide(265.7533482);
      Complex complex27 = complex4.createComplex(265.7533482, Double.NaN);
      Object object0 = complex21.readResolve();
      Complex complex28 = complex17.reciprocal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.ONE.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.multiply(7.066491077377918E172);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.subtract(7.066491077377918E172);
      Complex complex4 = Complex.valueOf(7.066491077377918E172);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex1.ZERO.sinh();
      double double0 = complex0.abs();
      Complex complex7 = complex0.cosh();
      int int1 = complex7.ZERO.hashCode();
      Complex complex8 = complex0.multiply(911);
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex10.ZERO.multiply(7.066491077377918E172);
      Complex complex12 = complex11.I.multiply(complex4);
      Complex complex13 = complex10.ZERO.sqrt();
      boolean boolean0 = complex6.isNaN();
      Complex complex14 = complex6.sinh();
      boolean boolean1 = complex13.isNaN();
      ComplexField complexField1 = complex0.getField();
      Complex complex15 = complex14.sqrt1z();
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex6.multiply((double) 911);
      Complex complex18 = complex0.ZERO.multiply(2229.03424);
      Complex complex19 = complex9.log();
      Complex complex20 = complex9.subtract((double) 911);
      Complex complex21 = complex16.asin();
      ComplexField complexField2 = complex21.I.getField();
      Complex complex22 = complex1.reciprocal();
      Complex complex23 = complex12.asin();
      ComplexField complexField3 = complex3.getField();
      Complex complex24 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-2032.402932680572));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.I.divide((-2032.402932680572));
      Complex complex6 = complex5.ZERO.atan();
      double double0 = complex1.getArgument();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex1.INF.sqrt1z();
      List<Complex> list0 = complex7.INF.nthRoot(1);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.pow(complex4);
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex3.sin();
      Complex complex15 = complex14.pow(complex10);
      boolean boolean0 = complex11.isInfinite();
      Complex complex16 = complex8.divide(complex10);
      Complex complex17 = complex2.divide((-1845.255));
      Complex complex18 = complex3.exp();
      Complex complex19 = complex18.NaN.multiply(1);
      Complex complex20 = complex18.ONE.atan();
      Complex complex21 = complex1.add(complex12);
      Complex complex22 = complex2.cos();
      Complex complex23 = complex22.add(complex5);
      List<Complex> list1 = complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 1506.278749524867;
      Complex complex1 = complex0.INF.subtract(1506.278749524867);
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.I.multiply(1014);
      List<Complex> list0 = complex4.nthRoot(1014);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex1.INF.pow(complex2);
      Complex complex9 = complex3.sin();
      double double1 = complex9.ZERO.getArgument();
      Complex complex10 = complex9.ONE.acos();
      double double2 = complex1.I.getArgument();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-746.47406217));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 1.9151693415969248E-174;
      Complex complex1 = Complex.valueOf(1.9151693415969248E-174, 1.9151693415969248E-174);
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2701.9774892122273);
      Complex complex1 = complex0.ONE.exp();
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.ONE.subtract(complex0);
      ComplexField complexField1 = complex2.ONE.getField();
      Object object1 = complex2.I.readResolve();
      String string0 = complex0.toString();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex2.divide(2701.9774892122273);
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-757.0806147265305));
      double double0 = (-1.2542332720182776E186);
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(786.259192059857, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.log();
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.subtract(786.259192059857);
      Complex complex6 = Complex.valueOf(786.259192059857);
      Complex complex7 = complex5.multiply(complex4);
      boolean boolean0 = complex2.equals(complex6);
      try { 
        complex5.nthRoot((-2435));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,435
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2700.33202), (-2700.33202));
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.NaN.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.22138497043134);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.multiply((-861));
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.ONE.cos();
      Complex complex6 = complex2.pow(1.0);
      Complex complex7 = complex0.divide((double) (-861));
      Object object0 = complex4.readResolve();
      Complex complex8 = complex3.ONE.add(complex5);
      Complex complex9 = complex4.ONE.negate();
      Complex complex10 = complex9.I.tanh();
      double double1 = complex6.getArgument();
      Complex complex11 = Complex.valueOf(0.0);
      boolean boolean0 = complex7.equals(object0);
      Complex complex12 = complex4.log();
      Complex complex13 = complex12.subtract(complex6);
      Complex complex14 = complex9.INF.cos();
      double double2 = complex13.NaN.getArgument();
      boolean boolean1 = complex12.isNaN();
      double double3 = complex9.getReal();
      Complex complex15 = complex3.add(0.0);
      Complex complex16 = complex8.pow(0.0);
      boolean boolean2 = complex14.isInfinite();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 2657.48208852);
      String string0 = complex0.INF.toString();
      Object object0 = complex0.readResolve();
      Complex complex3 = Complex.valueOf((-444.3005288639));
      double double0 = complex3.getImaginary();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1362.9996);
      Complex complex1 = new Complex(0.0, 1362.9996);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.pow(complex0);
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.INF.add(complex5);
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = complex7.ZERO.divide(complex4);
      Complex complex10 = complex6.ZERO.add(complex5);
      String string0 = complex10.ZERO.toString();
      boolean boolean0 = complex6.isNaN();
      Complex complex11 = complex5.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex4.NaN.getArgument();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex13 = complex1.divide(complex10);
      Object object0 = complex5.readResolve();
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex2.multiply((-922.0837404404056));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1472.408524));
      Complex complex1 = complex0.ONE.createComplex((-1472.408524), 1.0);
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.pow((-1186.0));
      String string0 = complex2.toString();
      Complex complex4 = Complex.valueOf((-1186.0));
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.add(1.0);
      Complex complex7 = complex5.INF.createComplex((-632.7), 149.7);
      Complex complex8 = complex5.INF.exp();
      Complex complex9 = complex0.INF.asin();
      boolean boolean0 = complex1.equals("WRONG_BLOCK_LENGTH");
      Complex complex10 = complex5.divide(1.0);
      Complex complex11 = complex5.multiply(complex10);
      Complex complex12 = Complex.valueOf((-1186.0), (-1186.0));
      Complex complex13 = complex0.atan();
      boolean boolean1 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 1139.103258817);
      Complex complex3 = complex0.ZERO.divide(complex2);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf(1139.103258817);
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex0.exp();
      double double0 = complex6.abs();
      Complex complex7 = complex1.exp();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.I.divide(complex0);
      String string0 = complex3.toString();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex4.NaN.multiply(1.0);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.INF.multiply((-2034));
      Complex complex8 = complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1472.488475534));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex2.INF.multiply((-68.2707642926199));
      Object object0 = complex7.ZERO.readResolve();
      Complex complex9 = complex3.createComplex(248.9926498963837, 248.9926498963837);
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex7.divide(complex1);
      Complex complex11 = complex10.ONE.sqrt();
      double double0 = complex4.getImaginary();
      Complex complex12 = complex2.multiply(complex0);
      Complex complex13 = complex12.negate();
      int int1 = complex1.hashCode();
      Complex complex14 = complex10.conjugate();
      Complex complex15 = complex10.log();
      Complex complex16 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = (-247.33411039058);
      Complex complex0 = new Complex((-247.33411039058), (-247.33411039058));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.conjugate();
      double double1 = complex2.I.getArgument();
      try { 
        complex1.nthRoot((-483));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -483
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(858.0334731402);
      Complex complex1 = complex0.ZERO.createComplex(3552.0083432, 858.0334731402);
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.cosh();
      int int1 = complex2.ONE.hashCode();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.NaN.multiply(2207);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = Complex.I;
      Object object0 = complex4.ZERO.readResolve();
      Complex complex8 = complex4.I.subtract(complex0);
      List<Complex> list0 = complex7.I.nthRoot(1195);
      boolean boolean0 = complex1.equals(complex7);
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.pow((double) 1195);
      Complex complex12 = complex9.tan();
      Complex complex13 = complex8.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.INF.add(0.0);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex3.ZERO.add(complex1);
      int int0 = complex5.hashCode();
      Complex complex7 = complex5.ZERO.divide(0.0);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.INF.sqrt1z();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex2.subtract(1130.34);
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.add((-1351.637123));
      double double0 = complex5.NaN.abs();
      Complex complex6 = complex5.I.createComplex(0.0, (-1.0E-6));
      Complex complex7 = complex4.I.tanh();
      String string0 = complex0.ONE.toString();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex2.INF.subtract(0.0);
      Complex complex10 = complex2.sin();
      boolean boolean0 = complex2.isInfinite();
      try { 
        complex3.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-2555.9280797978904));
      double double0 = 1.0;
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.I.reciprocal();
      int int0 = complex2.ONE.hashCode();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.INF.pow(2482.02161819);
      Complex complex7 = complex6.NaN.pow(complex1);
      Complex complex8 = complex0.subtract(complex5);
      Complex complex9 = complex8.ONE.add(complex1);
      Complex complex10 = complex5.NaN.reciprocal();
      ComplexField complexField0 = complex10.I.getField();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex5.createComplex((-2555.9280797978904), 1.0);
      Complex complex13 = complex12.exp();
      Complex complex14 = complex13.negate();
      Complex complex15 = complex14.ONE.divide(complex10);
      Complex complex16 = Complex.valueOf(2482.02161819);
      Complex complex17 = complex12.log();
      Complex complex18 = complex4.ZERO.sinh();
      Complex complex19 = complex6.I.sqrt1z();
      Complex complex20 = complex16.tanh();
      try { 
        complex4.nthRoot((-476));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -476
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(598.55138, 598.55138);
      Complex complex1 = complex0.add(2.0);
      Complex complex2 = complex1.NaN.createComplex(2.0, 5.920972420778763E47);
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.I.multiply(0);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.pow(5.920972420778763E47);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(2.292498520423419E298);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.subtract((-1050.657));
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = Complex.valueOf(2.292498520423419E298);
      Object object0 = complex3.I.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.createComplex((-1050.657), (-971.11786861));
      double double0 = complex6.ZERO.abs();
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex7.ZERO.createComplex((-1050.657), 967.8);
      Complex complex10 = complex2.tanh();
      boolean boolean1 = complex6.isInfinite();
      Complex complex11 = complex0.negate();
      double double1 = complex9.ZERO.abs();
      Complex complex12 = complex9.cos();
      Complex complex13 = complex12.I.pow(0.0);
      Complex complex14 = complex11.multiply(complex12);
      Complex complex15 = complex14.pow(6.283185307179586);
      Complex complex16 = complex0.subtract(complex5);
      boolean boolean2 = complex10.isInfinite();
      double double2 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0, Double.NaN);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.pow(390.39804192);
      Complex complex5 = complex1.cos();
      double double0 = complex5.ONE.getArgument();
      Complex complex6 = complex1.I.sqrt1z();
      Complex complex7 = complex0.NaN.tan();
      Object object0 = complex0.INF.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex1.I.multiply(989.0);
      double double1 = complex1.abs();
      Complex complex9 = Complex.valueOf(1393.0);
      Complex complex10 = complex3.atan();
      Complex complex11 = complex9.tan();
      boolean boolean1 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-60.16));
      Complex complex1 = complex0.NaN.add((-2895.81));
      Complex complex2 = complex1.I.pow(1.4390208226263824E-8);
      Complex complex3 = complex2.ZERO.pow((-60.16));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.ZERO.tan();
      Complex complex7 = Complex.valueOf((-60.16), 20.0);
      Complex complex8 = complex6.ZERO.pow(complex7);
      int int0 = complex4.hashCode();
      Complex complex9 = complex0.sqrt();
      ComplexField complexField0 = complex9.I.getField();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex1.getArgument();
      Complex complex10 = complex9.cosh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-465.45979));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.INF.createComplex(Double.NaN, 1465.0);
      Complex complex4 = new Complex((-465.45979));
      Complex complex5 = complex0.multiply(complex4);
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1595.9137465);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.divide(1595.9137465);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.ONE.subtract(complex2);
      Complex complex6 = complex2.NaN.tan();
      int int0 = complex4.NaN.hashCode();
      Complex complex7 = complex3.I.acos();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex2.log();
      double double0 = complex7.getArgument();
      ComplexField complexField0 = complex2.getField();
      Complex complex9 = complex7.INF.add(1595.9137465);
      double double1 = 0.3850763440132141;
      try { 
        complex0.NaN.nthRoot((-548));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -548
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(4813.33045, 4813.33045);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = Complex.valueOf(0.0, 4813.33045);
      Complex complex5 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2647.489176576815));
      Complex complex1 = complex0.add((-2647.489176576815));
      Complex complex2 = new Complex((-2647.489176576815));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.createComplex((-1.9948340196027965E-9), 0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2.0961068531216087E-7));
      Complex complex1 = complex0.ZERO.conjugate();
      Object object0 = complex1.ONE.readResolve();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.pow((-735.4413846847));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.ONE.tanh();
      Complex complex6 = complex1.divide(316.62208503);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex4.I.divide(complex6);
      Complex complex9 = complex4.NaN.subtract(complex3);
      double double0 = complex0.abs();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1926.98370286053);
      Complex complex1 = complex0.INF.multiply(1926.98370286053);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = Complex.valueOf(1022.36777233);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.ZERO.pow(complex0);
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex4.conjugate();
      double double0 = complex0.getReal();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex4.pow(2511.1622573717555);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      ComplexField complexField0 = complex2.I.getField();
      ComplexField complexField1 = complex2.I.getField();
      Complex complex3 = complex0.subtract(complex1);
      String string0 = complex1.toString();
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow((-2634.91707730295));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.exp();
      double double0 = complex1.getImaginary();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = complex2.createComplex((-1748.0), (-1130.97));
      boolean boolean0 = complex5.isInfinite();
      double double1 = complex2.abs();
      Complex complex7 = Complex.INF;
      boolean boolean1 = complex3.equals(complex7);
      List<Complex> list0 = complex7.nthRoot(995);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1.8576309291617257E302, 1.8576309291617257E302);
      Complex complex1 = complex0.NaN.pow((-2413.668));
      Complex complex2 = complex0.subtract(1.8576309291617257E302);
      String string0 = complex2.INF.toString();
      double double0 = complex2.abs();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.I.subtract(1.8576309291617257E302);
      Complex complex6 = complex4.I.multiply(0);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex2.acos();
      boolean boolean0 = complex7.isNaN();
      Complex complex9 = complex5.pow(complex8);
      Complex complex10 = complex7.divide((double) 0);
      Complex complex11 = complex9.divide(1.8576309291617257E302);
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex5.negate();
      Complex complex14 = complex13.ZERO.asin();
      Complex complex15 = Complex.valueOf(20.0);
      Complex complex16 = complex10.negate();
      Complex complex17 = complex8.sinh();
      boolean boolean1 = complex14.equals(complex4);
      Object object0 = complex2.readResolve();
      Complex complex18 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = new Complex(1755.42);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.add(1755.42);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex5.ONE.cos();
      Complex complex9 = complex0.divide(1755.42);
      Complex complex10 = complex1.add(complex3);
      Complex complex11 = complex3.atan();
      Complex complex12 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1143.0, 1143.0);
      Complex complex2 = complex1.I.pow(1143.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex5.multiply(complex4);
      Complex complex8 = complex3.ZERO.log();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex3.log();
      Complex complex11 = complex3.subtract(complex0);
      Complex complex12 = complex3.INF.divide(complex0);
      Complex complex13 = Complex.valueOf(0.0, (-9.865691193993138E-8));
      boolean boolean0 = complex3.isNaN();
      Complex complex14 = complex10.negate();
      Object object0 = complex1.readResolve();
      Complex complex15 = Complex.valueOf((-2737.26870002423));
      Complex complex16 = complex15.divide(complex9);
      Complex complex17 = complex9.add(complex15);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      double double0 = complex1.abs();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-2499.94673062));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.createComplex((-2499.94673062), 1751.0);
      Complex complex3 = complex1.pow((-2801.201));
      Complex complex4 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.multiply((-361));
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.NaN.sinh();
      double double0 = complex0.getArgument();
      String string0 = complex1.toString();
      Complex complex4 = complex0.tan();
      String string1 = complex0.toString();
      Complex complex5 = new Complex(0.0);
      boolean boolean0 = complex3.equals(complex5);
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(885.3979606676287);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.NaN.pow(complex3);
      Complex complex6 = complex2.cosh();
      try { 
        complex6.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2841.0));
      Complex complex1 = complex0.subtract((-2841.0));
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.ZERO.pow(complex1);
      int int0 = complex1.NaN.hashCode();
      int int1 = complex2.hashCode();
      Complex complex4 = Complex.valueOf(1.0, 547.154);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = Complex.valueOf((-1195.4629), (-5226.8528));
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex4.I.tanh();
      Complex complex9 = complex2.I.add(complex0);
      int int2 = complex1.hashCode();
      ComplexField complexField0 = complex2.getField();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.equals(object0);
      boolean boolean1 = complex2.isNaN();
      Complex complex10 = complex2.multiply(complex1);
      Complex complex11 = complex10.ZERO.sqrt1z();
      Complex complex12 = complex10.cos();
      Complex complex13 = complex2.multiply((-374));
      Complex complex14 = complex11.acos();
      Complex complex15 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.multiply((-159.5110265));
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex6.I.reciprocal();
      Complex complex9 = new Complex((-159.5110265), (-159.5110265));
      Complex complex10 = complex6.I.multiply(complex9);
      Complex complex11 = complex4.conjugate();
      boolean boolean0 = complex4.equals(complex11);
      double double0 = 938.96778114;
      Complex complex12 = complex10.pow(938.96778114);
      try { 
        complex3.INF.nthRoot((-2043));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,043
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.conjugate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.ONE.subtract(0.3936265707015991);
      Object object0 = new Object();
      Complex complex4 = complex0.multiply(complex3);
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = new Complex((-3998.39536693));
      Complex complex7 = complex0.ZERO.pow(complex6);
      Complex complex8 = complex0.createComplex(0.0, 0.0);
      Complex complex9 = complex2.add(complex7);
      Complex complex10 = complex7.negate();
      double double0 = complex6.abs();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(2458.052637522179);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(9.699937202692456E-8);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.cosh();
      try { 
        complex0.nthRoot((-347));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -347
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-3.482412195764625E-92), (-3.482412195764625E-92));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.ZERO.subtract(complex1);
      Complex complex6 = complex2.ZERO.multiply(0);
      Complex complex7 = complex4.ZERO.createComplex(1913.1767864938934, 1913.1767864938934);
      Complex complex8 = complex4.INF.acos();
      double double0 = complex4.getReal();
      Complex complex9 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex1.I.sqrt();
      double double0 = complex0.NaN.getArgument();
      String string0 = complex0.toString();
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.I.log();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex10.conjugate();
      Complex complex13 = complex6.sinh();
      Complex complex14 = complex7.exp();
      Complex complex15 = complex5.multiply(Double.NaN);
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.5984715223312378, 2503.412);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.divide((-2141.581));
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex1.atan();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-263.978918047));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt1z();
      double double1 = complex1.NaN.getArgument();
      boolean boolean0 = complex1.isInfinite();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.acos();
      boolean boolean1 = complex2.isInfinite();
      double double2 = complex2.getArgument();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.subtract((-263.978918047));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(397.1839, (-695.08282868635));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.multiply(397.1839);
      Complex complex4 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-809.5486330086782), (-809.5486330086782));
      Complex complex1 = complex0.INF.pow((-809.5486330086782));
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = null;
      try { 
        complex1.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 143.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.add(0.0);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1004.289904367674));
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.divide(1040.20339302944);
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex2.ZERO.subtract(complex1);
      Complex complex5 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(491.1);
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex2.ZERO.multiply(complex1);
      Complex complex6 = complex0.NaN.add((-4498.53));
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = Complex.valueOf((-4498.53));
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex8.I.divide((-2611.77568232317));
      Complex complex11 = complex9.I.divide(53.0);
      Complex complex12 = complex9.NaN.sinh();
      Complex complex13 = complex0.log();
      int int0 = complex2.ONE.hashCode();
      Complex complex14 = complex11.ZERO.reciprocal();
      Complex complex15 = complex2.multiply(complex5);
      Complex complex16 = complex13.log();
      ComplexField complexField0 = complex16.NaN.getField();
      Complex complex17 = complex11.divide(complex6);
      Complex complex18 = complex4.acos();
      Complex complex19 = complex18.I.multiply(7);
      ComplexField complexField1 = complex19.I.getField();
      Complex complex20 = complex14.divide(1336.76622);
      Object object0 = complex13.readResolve();
      boolean boolean0 = complex11.equals(object0);
      Complex complex21 = complex9.multiply(491.1);
      boolean boolean1 = complex16.isNaN();
      Object object1 = new Object();
      boolean boolean2 = complex5.equals(object1);
      Complex complex22 = complex16.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex0.subtract(complex2);
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = Complex.valueOf(3129.5, (-3446.98918));
      Complex complex7 = Complex.valueOf((-1190.974357582), (-3446.98918));
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex1.cosh();
      int int1 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-731.19939));
      Complex complex2 = complex1.NaN.multiply(1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex2.NaN.sin();
      Complex complex7 = complex0.add(415.827813012869);
      Complex complex8 = complex1.pow((-731.19939));
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex2.NaN.subtract(complex8);
      Complex complex10 = complex6.ONE.multiply(1);
      Complex complex11 = complex2.add(complex1);
      Complex complex12 = complex6.INF.conjugate();
      Complex complex13 = complex6.acos();
      Complex complex14 = complex6.I.cos();
      double double0 = complex14.INF.getArgument();
      Complex complex15 = complex14.divide((double) 1);
      Complex complex16 = complex13.cosh();
      Complex complex17 = complex2.acos();
      Complex complex18 = complex1.divide((double) 1);
      double double1 = complex10.abs();
      String string0 = complex18.toString();
      Complex complex19 = complex5.multiply(complex18);
      boolean boolean0 = complex10.isInfinite();
      Complex complex20 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex0.subtract(7.770560657946324E-9);
      Complex complex6 = complex5.I.exp();
      double double0 = complex2.ONE.abs();
      double double1 = complex0.getReal();
      Complex complex7 = complex5.multiply(3877);
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.multiply((-1278.8));
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex4.INF.divide(0.0);
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex0.cosh();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      List<Complex> list0 = complex0.I.nthRoot(1359);
      Complex complex1 = complex0.pow((-5.4));
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = Complex.valueOf((double) 1359);
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex1.INF.reciprocal();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex5.ONE.divide((-20.0));
      Complex complex7 = complex5.ZERO.subtract(0.0);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex8.INF.atan();
      Complex complex11 = complex10.INF.reciprocal();
      Complex complex12 = complex1.I.sqrt();
      Complex complex13 = complex12.INF.atan();
      Complex complex14 = complex1.INF.subtract((double) 1359);
      Complex complex15 = complex14.ONE.cos();
      Complex complex16 = complex14.multiply(1067);
      Complex complex17 = complex1.tan();
      Complex complex18 = complex17.negate();
      Complex complex19 = Complex.valueOf((double) 1067, (-20.0));
      List<Complex> list1 = complex19.I.nthRoot(1270);
      Complex complex20 = complex19.INF.tan();
      String string0 = complex18.toString();
      int int0 = complex0.hashCode();
      Complex complex21 = complex6.multiply(879);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.reciprocal();
      String string0 = complex0.toString();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.log();
      double double0 = complex0.abs();
      Complex complex7 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1950.462);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.INF.divide(1950.462);
      Complex complex3 = complex0.multiply(1957);
      Complex complex4 = complex1.cosh();
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex1.ZERO.divide(complex2);
      Complex complex6 = Complex.valueOf(1950.462, 2.0);
      Complex complex7 = complex4.pow(2.0);
      Complex complex8 = complex1.divide((-622.2189609727806));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.NaN.multiply(7);
      Object object0 = complex3.ZERO.readResolve();
      List<Complex> list0 = complex3.nthRoot(7);
      Complex complex4 = complex3.INF.pow(0.0);
      Complex complex5 = complex2.NaN.tanh();
      int int0 = complex5.hashCode();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex0.multiply(0);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex7.sin();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex10.ONE.sin();
      int int1 = complex12.ZERO.hashCode();
      double double0 = complex10.NaN.getArgument();
      Complex complex13 = complex8.subtract(0.0);
      ComplexField complexField1 = complex9.getField();
      double double1 = complex6.abs();
      Complex complex14 = complex10.multiply(995);
      Complex complex15 = complex14.ZERO.tanh();
      double double2 = complex9.abs();
      Complex complex16 = complex9.subtract(0.0);
      double double3 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.pow(0.32199859619140625);
      Complex complex4 = complex2.NaN.negate();
      Complex complex5 = complex3.INF.add((-463.9719982));
      double double0 = complex0.INF.abs();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex2.pow(complex0);
      Complex complex8 = Complex.valueOf(0.0, 0.32199859619140625);
      Object object0 = complex3.INF.readResolve();
      Complex complex9 = complex5.divide(complex0);
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex9.INF.pow((-463.9719982));
      Complex complex12 = complex3.tanh();
      double double1 = complex7.getImaginary();
      Complex complex13 = complex7.sqrt1z();
  }
}
