/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:10:56 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1387.0), (-20.0));
      Complex complex1 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex6.NaN.createComplex((-1387.0), (-1387.0));
      Complex complex8 = complex1.NaN.tanh();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.log();
      double double0 = complex9.NaN.getArgument();
      Complex complex11 = complex2.ONE.exp();
      Complex complex12 = complex0.add((-43.00251631192));
      Complex complex13 = complex2.multiply((-1087.82326075259));
      Complex complex14 = complex13.INF.sqrt();
      Complex complex15 = complex13.divide((-1685.46767586));
      Complex complex16 = complex10.atan();
      Complex complex17 = complex6.divide(complex13);
      Complex complex18 = complex1.pow(complex3);
      Complex complex19 = complex18.pow(complex4);
      Complex complex20 = complex16.sqrt();
      Complex complex21 = complex4.subtract(complex10);
      Complex complex22 = complex13.conjugate();
      Complex complex23 = complex7.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex2.ONE.pow(2.3250694274902344);
      Complex complex6 = complex5.ONE.divide(complex2);
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex2.INF.multiply(2.3250694274902344);
      Complex complex11 = complex2.divide(1420.155075558939);
      Object object0 = complex1.readResolve();
      double double1 = complex0.getArgument();
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex10.multiply(7);
      Object object1 = complex1.INF.readResolve();
      Complex complex13 = complex12.I.add(6885.8281);
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex14.ONE.divide(complex6);
      Complex complex16 = complex10.ZERO.conjugate();
      Complex complex17 = Complex.valueOf((-2340.33));
      Complex complex18 = new Complex((-2340.33));
      String string0 = complex3.toString();
      Complex complex19 = complex13.exp();
      Complex complex20 = complex10.divide(complex13);
      Complex complex21 = Complex.valueOf(0.7853981633974483, 0.0);
      Complex complex22 = complex2.asin();
      ComplexField complexField0 = complex19.getField();
      double double2 = complex11.getReal();
      Complex complex23 = complex17.sin();
      double double3 = complex22.getImaginary();
      Complex complex24 = complex9.asin();
      Complex complex25 = Complex.valueOf(Double.NaN, 2516.6813645722);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-698.6985995188));
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-5244.2));
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.subtract((-5244.2));
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex2.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0, 1827.995444868);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.pow((-1253.4020165));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3541.314781248151);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.divide(3541.314781248151);
      Complex complex3 = Complex.valueOf(3541.314781248151);
      Complex complex4 = complex1.NaN.log();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex8.INF.createComplex(3541.314781248151, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex1.ZERO.pow(complex0);
      Complex complex12 = complex7.atan();
      int int0 = complex2.hashCode();
      Complex complex13 = complex7.subtract(complex8);
      Complex complex14 = Complex.valueOf(3541.314781248151, Double.POSITIVE_INFINITY);
      Complex complex15 = complex12.divide(complex2);
      Complex complex16 = complex12.ONE.sinh();
      Complex complex17 = complex13.ONE.tan();
      Complex complex18 = complex8.tan();
      Complex complex19 = complex18.pow(complex12);
      Complex complex20 = complex0.divide(2.0);
      Complex complex21 = complex2.divide((-1864.67));
      Complex complex22 = complex15.subtract(complex2);
      double double0 = complex14.getReal();
      Complex complex23 = complex20.sin();
      Complex complex24 = complex13.sinh();
      Complex complex25 = complex7.conjugate();
      boolean boolean0 = complex25.isInfinite();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-3079.8161215935665));
      Complex complex1 = new Complex((-3079.8161215935665));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex0.ZERO.multiply(37);
      Complex complex6 = Complex.valueOf(20.0);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex6.createComplex((-2505.3), 2401.7);
      Complex complex9 = complex7.NaN.cosh();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex0.createComplex((-3079.8161215935665), (-3079.8161215935665));
      Complex complex12 = complex11.multiply(Double.NaN);
      String string0 = complex9.toString();
      List<Complex> list0 = complex2.nthRoot(37);
      Complex complex13 = complex6.conjugate();
      List<Complex> list1 = complex11.nthRoot(37);
      Complex complex14 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.3424576100819801E-291), (-1.3424576100819801E-291));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex1.ZERO.conjugate();
      double double0 = complex5.INF.getArgument();
      Complex complex6 = complex1.ZERO.add(complex5);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex1.tanh();
      Complex complex9 = Complex.valueOf((-1330.9177968725696), (-1.3424576100819801E-291));
      Complex complex10 = complex3.ZERO.subtract(complex7);
      Complex complex11 = complex9.NaN.exp();
      Complex complex12 = complex11.ZERO.subtract(complex1);
      Complex complex13 = complex12.INF.log();
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex9.ONE.subtract(complex3);
      Complex complex16 = complex0.log();
      double double1 = 6.283185307179586;
      Complex complex17 = complex16.NaN.createComplex(6.283185307179586, (-2249.490342));
      List<Complex> list0 = complex3.nthRoot(825);
      double double2 = complex3.getImaginary();
      Complex complex18 = complex8.pow(complex15);
      Complex complex19 = complex9.log();
      try { 
        complex8.nthRoot((-24));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -24
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(547.41767045);
      Complex complex1 = new Complex(4.2808762411845363E-137, 4.2808762411845363E-137);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.INF.multiply((-1852));
      Complex complex4 = complex1.NaN.subtract(complex3);
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.ZERO.subtract(547.41767045);
      double double0 = complex2.getImaginary();
      Complex complex9 = complex2.multiply(complex4);
      Complex complex10 = complex4.NaN.subtract(complex9);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex3.pow(6.283185307179586);
      Complex complex14 = complex1.multiply((-805));
      Complex complex15 = complex4.tanh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex16 = complex3.NaN.reciprocal();
      Complex complex17 = complex4.sqrt();
      Complex complex18 = complex17.NaN.asin();
      ComplexField complexField0 = complex2.getField();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(61.175);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.I.exp();
      double double0 = complex0.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.I.subtract(1.0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.sin();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex4.ONE.multiply((-5.718749537552229E-8));
      Complex complex8 = complex4.INF.subtract(0.0);
      Complex complex9 = complex4.ONE.conjugate();
      Complex complex10 = complex9.INF.cos();
      double double1 = complex2.getReal();
      Complex complex11 = complex1.ZERO.add(complex7);
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex12.ONE.multiply(complex2);
      Complex complex14 = complex1.pow(complex4);
      int int0 = complex1.hashCode();
      boolean boolean1 = complex1.isNaN();
      double double2 = complex3.getReal();
      Complex complex15 = complex0.asin();
      Complex complex16 = complex0.ZERO.multiply(1926);
      Complex complex17 = complex15.NaN.createComplex(6.283185307179586, 0.0);
      Complex complex18 = complex14.asin();
      String string1 = complex15.toString();
      double double3 = complex9.getImaginary();
      double double4 = complex14.getImaginary();
      Complex complex19 = complex2.cosh();
      Complex complex20 = complex5.reciprocal();
      Complex complex21 = complex20.multiply((-0.9962994029779891));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.multiply(complex1);
      double double0 = 6.283185307179586;
      Complex complex3 = complex1.I.add(6.283185307179586);
      Complex complex4 = complex1.I.subtract(complex0);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex1.INF.multiply((-776));
      Complex complex8 = complex4.ZERO.cos();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1548.28622), (-1548.28622));
      Complex complex2 = complex1.INF.add((-1548.28622));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex4.ZERO.pow(complex0);
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex3.ZERO.asin();
      Complex complex7 = complex6.NaN.pow(complex1);
      Complex complex8 = complex0.pow((-1548.28622));
      double double0 = complex2.getArgument();
      Complex complex9 = complex0.NaN.tanh();
      Complex complex10 = complex0.createComplex(0.7853981633974483, Double.NaN);
      Complex complex11 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = complex2.divide(complex10);
      Complex complex14 = complex5.cos();
      Complex complex15 = complex8.atan();
      Complex complex16 = complex2.acos();
      Complex complex17 = complex15.pow(complex11);
      double double1 = complex2.abs();
      Complex complex18 = complex6.multiply(0.0);
      double double2 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.771457643937893E237, 59874.140625);
      Complex complex1 = Complex.valueOf(5.771457643937893E237, (-4.0852427502515625E-8));
      Complex complex2 = complex1.I.add(complex0);
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.INF.divide(complex4);
      Complex complex8 = Complex.valueOf(5.771457643937893E237, (-1664.13757308));
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex6.ZERO.subtract(complex5);
      Complex complex11 = complex0.pow(0.0);
      Complex complex12 = complex10.ZERO.createComplex(59874.140625, 5.771457643937893E237);
      ComplexField complexField0 = complex1.getField();
      Complex complex13 = complex6.add(complex5);
      Complex complex14 = complex6.exp();
      Complex complex15 = complex3.createComplex((-2831.805543053959), (-1664.13757308));
      Complex complex16 = complex10.divide(complex3);
      double double0 = complex6.getArgument();
      Complex complex17 = complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2813.096), (-2813.096));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.ZERO.pow((-2813.096));
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex2.ZERO.sin();
      List<Complex> list0 = complex3.ZERO.nthRoot(37);
      Complex complex7 = complex0.subtract((-2813.096));
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = complex5.subtract(complex2);
      Complex complex11 = Complex.valueOf(1.0261880234452292E-10);
      Complex complex12 = complex10.ONE.sqrt();
      Complex complex13 = complex3.sin();
      Complex complex14 = Complex.I;
      Complex complex15 = complex13.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.6679295301437378, 0.6679295301437378);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.subtract(complex3);
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex5.subtract((-505.14));
      Complex complex9 = complex4.ZERO.createComplex((-3352.141348), 0.6679295301437378);
      String string0 = complex4.toString();
      Complex complex10 = complex5.INF.sin();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex4.ZERO.multiply(complex5);
      String string1 = complex3.toString();
      Complex complex13 = complex4.cos();
      Complex complex14 = complex3.NaN.atan();
      String string2 = complex0.toString();
      Complex complex15 = complex3.subtract(complex13);
      double double0 = complex3.getImaginary();
      Complex complex16 = complex7.subtract((-3352.141348));
      Complex complex17 = complex3.exp();
      Complex complex18 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(0.0);
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex1.reciprocal();
      double double1 = complex4.I.abs();
      Complex complex5 = complex1.I.acos();
      Complex complex6 = Complex.valueOf(7.672307991205681E285, Double.NaN);
      Complex complex7 = complex5.I.reciprocal();
      Object object0 = complex6.I.readResolve();
      Complex complex8 = complex5.ZERO.tanh();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex9.divide(0.0);
      Object object1 = complex4.INF.readResolve();
      Complex complex11 = complex4.createComplex(0.0, 3397.419991427273);
      Complex complex12 = complex0.tanh();
      Complex complex13 = Complex.valueOf(1.0);
      boolean boolean0 = complex6.isInfinite();
      Complex complex14 = complex0.multiply(1);
      Complex complex15 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.1633417615076335E35), 2.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.divide(2.0);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = Complex.valueOf(2.0, 0.0);
      Complex complex6 = complex3.I.conjugate();
      Complex complex7 = complex2.exp();
      double double0 = complex7.I.abs();
      double double1 = complex1.abs();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.ZERO.sqrt();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = Complex.valueOf(2.0, (-6.1633417615076335E35));
      Complex complex15 = complex1.subtract(2.0);
      Complex complex16 = complex0.asin();
      Complex complex17 = complex16.divide(complex4);
      Complex complex18 = complex5.negate();
      Complex complex19 = complex9.cosh();
      int int0 = complex1.hashCode();
      Complex complex20 = complex16.pow(complex12);
      Complex complex21 = Complex.INF;
      boolean boolean0 = complex16.equals(complex21);
      Complex complex22 = complex0.negate();
      Complex complex23 = complex2.multiply(complex16);
      boolean boolean1 = complex16.isNaN();
      ComplexField complexField0 = complex18.getField();
      Complex complex24 = complex15.sqrt1z();
      Complex complex25 = complex24.add(2.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(661.8730665737684);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.ONE.atan();
      double double0 = complex2.I.abs();
      double double1 = complex0.ZERO.getArgument();
      Complex complex3 = complex0.acos();
      double double2 = complex3.ONE.abs();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex3.add(1.0);
      double double3 = complex4.getReal();
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.valueOf(1.0, (-660.3022702469734));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.asin();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.INF.add(1.0187277793884277);
      Complex complex6 = complex2.I.negate();
      Complex complex7 = complex3.tan();
      Object object0 = complex7.ZERO.readResolve();
      Complex complex8 = complex7.ZERO.divide(complex1);
      double double1 = complex8.getArgument();
      Complex complex9 = complex8.ONE.add(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex10 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-43.00251631192));
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      String string1 = complex1.toString();
      Complex complex2 = Complex.valueOf((-43.00251631192));
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.valueOf((-43.00251631192));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = Complex.valueOf(2847.1214505262, 6.283185307179586);
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.I.multiply(858.407943022551);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex0.subtract(247.5421316);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.ZERO.atan();
      String string0 = complex8.I.toString();
      Complex complex9 = complex7.I.sqrt();
      double double0 = complex9.I.abs();
      Complex complex10 = complex9.INF.subtract(1734.62138872458);
      double double1 = complex7.getReal();
      boolean boolean0 = complex9.isNaN();
      Complex complex11 = complex3.add(complex5);
      Complex complex12 = complex11.exp();
      int int0 = complex3.hashCode();
      Object object0 = complex6.readResolve();
      Complex complex13 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(20.0);
      Complex complex2 = complex0.INF.tan();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.ZERO.negate();
      String string0 = complex0.toString();
      Complex complex6 = complex3.I.negate();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex7.multiply(complex1);
      Complex complex11 = complex1.subtract(complex2);
      Complex complex12 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(2.85040095144011776E17);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.ZERO.pow((-1297.973481505));
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ZERO.sqrt1z();
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(5.8107841809216616E209);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      int int0 = complex1.INF.hashCode();
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.subtract(5.8107841809216616E209);
      Complex complex5 = Complex.valueOf(3049.293957);
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex6.NaN.exp();
      double double2 = complex4.getImaginary();
      Complex complex8 = complex5.pow(complex4);
      Complex complex9 = complex0.add(Double.NaN);
      double double3 = complex2.ZERO.getArgument();
      try { 
        complex9.nthRoot((-1881));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,881
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(657.61235, 657.61235);
      double double0 = complex0.abs();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ONE.reciprocal();
      double double1 = complex0.getImaginary();
      boolean boolean0 = complex1.isNaN();
      double double2 = complex1.abs();
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.254443919468538E-9), (-1965.2350144726));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.ZERO.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.subtract((-8.254443919468538E-9));
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex5.ZERO.sin();
      int int0 = complex5.hashCode();
      Complex complex8 = complex5.INF.cosh();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex0.multiply((-1965.2350144726));
      Complex complex11 = complex9.asin();
      Complex complex12 = complex11.ZERO.add((-5.806792575852521E10));
      Complex complex13 = complex9.tanh();
      Complex complex14 = complex5.tanh();
      Complex complex15 = complex9.subtract((-8.254443919468538E-9));
      Complex complex16 = complex10.tan();
      Complex complex17 = complex5.asin();
      Complex complex18 = complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 1.1748409271240234;
      Complex complex0 = Complex.valueOf(1.1748409271240234);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.INF.acos();
      double double1 = complex3.INF.getArgument();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.NaN.tanh();
      Complex complex8 = complex7.negate();
      Complex complex9 = Complex.valueOf((-4705.69852164792), (-4705.69852164792));
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex1.divide(complex0);
      String string0 = complex10.NaN.toString();
      int int0 = complex10.hashCode();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = Complex.valueOf(755.6133401);
      double double2 = complex12.getImaginary();
      Complex complex13 = complex10.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.log();
      Object object0 = complex2.ZERO.readResolve();
      Object object1 = complex2.readResolve();
      boolean boolean0 = complex2.equals(object1);
      Complex complex3 = complex0.createComplex(1229.8284352626, (-953.4527254308715));
      Complex complex4 = complex3.multiply(8.954135150208654E-113);
      Object object2 = complex3.readResolve();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex3.INF.add(complex4);
      Complex complex7 = complex2.divide(8.954135150208654E-113);
      Complex complex8 = complex5.sqrt1z();
      try { 
        complex0.nthRoot((-875));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -875
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1301.7113);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.ZERO.subtract(1301.7113);
      Complex complex3 = complex0.negate();
      double double0 = complex1.NaN.abs();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex4.I.multiply(921);
      Complex complex7 = complex4.ZERO.cosh();
      Complex complex8 = complex4.ONE.negate();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.ONE.add(complex2);
      double double1 = complex1.getImaginary();
      double double2 = complex3.getReal();
      Complex complex11 = complex0.pow(983.1255736);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex12 = complex2.cos();
      Complex complex13 = complex0.cosh();
      Complex complex14 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.47280728816986084);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = Complex.valueOf(508.687, 0.47280728816986084);
      Complex complex6 = Complex.valueOf(0.47280728816986084, Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.ONE.exp();
      Complex complex8 = complex7.ONE.multiply(complex1);
      Complex complex9 = complex3.I.createComplex(0.47280728816986084, 0.47280728816986084);
      Complex complex10 = complex9.I.divide(complex3);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex11 = complex0.subtract(complex2);
      int int0 = complex11.hashCode();
      Complex complex12 = complex11.NaN.asin();
      Complex complex13 = complex11.subtract(0.47280728816986084);
      Complex complex14 = complex2.cosh();
      Complex complex15 = complex8.multiply(1.1933419704437256);
      Complex complex16 = Complex.valueOf((-944.5186));
      Complex complex17 = complex10.sinh();
      Complex complex18 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.2983669638633728, 20.0);
      Complex complex1 = complex0.ONE.multiply((-1850));
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.sinh();
      double double1 = complex2.getArgument();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.I.pow(9.156218120779494E-199);
      Complex complex8 = complex7.ZERO.exp();
      boolean boolean0 = complex5.isNaN();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex9 = complex4.divide(0.0);
      Complex complex10 = complex4.cos();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex5.atan();
      Complex complex13 = complex6.pow(complex4);
      List<Complex> list0 = complex8.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(913.419174972242, 913.419174972242);
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.cosh();
      String string1 = complex0.toString();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.reciprocal();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-55.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.cos();
      int int0 = complex2.hashCode();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex5.I.pow(complex3);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.ONE.sin();
      double double0 = complex0.getImaginary();
      Complex complex9 = complex1.I.sin();
      Complex complex10 = complex3.subtract(0.0);
      Complex complex11 = complex5.NaN.negate();
      Complex complex12 = complex5.log();
      double double1 = complex12.I.getArgument();
      double double2 = complex10.ONE.abs();
      Complex complex13 = complex5.tan();
      Complex complex14 = complex9.acos();
      double double3 = complex14.abs();
      Complex complex15 = complex13.multiply(complex10);
      Complex complex16 = complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1.374152583940637E-239);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex3.NaN.multiply((-2883));
      Complex complex5 = complex4.ONE.subtract((-1656.6));
      Complex complex6 = complex4.I.divide(complex2);
      double double0 = complex0.abs();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.sin();
      int int0 = complex1.hashCode();
      Complex complex4 = complex1.acos();
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.pow((-206.2));
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.multiply((-2306));
      Complex complex7 = complex6.NaN.sqrt();
      double double0 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-500.93834646968253));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(3548.102797625, 3548.102797625);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.cos();
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      double double0 = complex0.getReal();
      int int0 = (-1557);
      try { 
        complex0.nthRoot((-1557));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,557
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.multiply((-3485.4));
      Complex complex2 = complex1.multiply((-1047));
      Complex complex3 = complex1.INF.add(0.0);
      Complex complex4 = complex1.add(Double.NaN);
      Complex complex5 = complex4.ZERO.subtract((double) (-1047));
      Complex complex6 = complex3.ZERO.reciprocal();
      Complex complex7 = complex4.ZERO.subtract(Double.NaN);
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex3.negate();
      try { 
        complex4.nthRoot((-1047));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,047
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.sinh();
      double double0 = complex0.abs();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex5.ONE.subtract(complex0);
      Complex complex7 = complex3.createComplex(0.0, (-79.4));
      Complex complex8 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(2450.0, (-2025.4623));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.subtract((-1875.0));
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = Complex.valueOf(148.41314697265625, 2450.0);
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2632.987070892794);
      Object object0 = complex0.readResolve();
      Object object1 = complex0.I.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      boolean boolean0 = complex0.isNaN();
      int int0 = complex0.hashCode();
      double double0 = complex0.abs();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex4.ONE.add(2632.987070892794);
      Complex complex8 = complex7.pow((-2272.866970445778));
      boolean boolean1 = complex2.equals(complex4);
      Complex complex9 = complex4.exp();
      int int1 = complex9.hashCode();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.ZERO.tan();
      double double1 = complex1.abs();
      Complex complex12 = complex8.cos();
      boolean boolean2 = complex1.isNaN();
      double double2 = complex1.getImaginary();
      Complex complex13 = complex2.pow(complex9);
      Complex complex14 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-949.1687577371));
      Complex complex1 = complex0.pow((-949.1687577371));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex5.subtract(complex1);
      Complex complex8 = complex5.subtract(complex1);
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1603.0));
      boolean boolean0 = complex0.equals((Object) null);
      List<Complex> list0 = complex0.nthRoot(847);
      Complex complex1 = Complex.valueOf(0.0, (-1929.044162970984));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.exp();
      String string0 = complex0.toString();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex4.I.multiply(complex1);
      Complex complex6 = complex1.subtract(0.0);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex9.I.cos();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex11.ONE.cos();
      Complex complex13 = complex5.sin();
      List<Complex> list1 = complex13.ZERO.nthRoot(847);
      Complex complex14 = complex8.tanh();
      Complex complex15 = complex9.atan();
      Complex complex16 = complex8.reciprocal();
      Complex complex17 = complex8.add(complex15);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.I.getArgument();
      double double1 = complex0.getArgument();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex3.NaN.subtract(0.0);
      Complex complex5 = complex3.NaN.pow(509.26806291137);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex0.subtract(complex1);
      boolean boolean0 = complex7.equals(complex1);
      double double2 = complex0.abs();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex8 = complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ONE.createComplex(1143.3731724, (-208.8168741293348));
      Complex complex2 = complex1.I.createComplex(20.0, 2.7796303536272215E-86);
      boolean boolean0 = complex0.isNaN();
      int int0 = complex2.I.hashCode();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.ZERO.subtract(1143.3731724);
      Complex complex7 = complex4.pow(1143.3731724);
      Complex complex8 = complex1.ZERO.cos();
      Complex complex9 = complex7.NaN.add(complex4);
      Complex complex10 = complex5.pow(complex2);
      Complex complex11 = complex10.NaN.divide(complex6);
      Complex complex12 = complex4.cos();
      Complex complex13 = complex7.tanh();
      Complex complex14 = complex8.log();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex15 = complex0.log();
      Complex complex16 = complex12.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2248.756), (-2248.756));
      Complex complex1 = complex0.INF.subtract((-2248.756));
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.INF.divide((-2248.756));
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = Complex.valueOf((-2248.756), (-2248.756));
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex0.ZERO.tan();
      double double0 = complex0.I.getArgument();
      Complex complex8 = complex0.asin();
      List<Complex> list0 = complex8.NaN.nthRoot(846);
      Complex complex9 = complex0.I.negate();
      Complex complex10 = complex0.asin();
      try { 
        complex10.nthRoot((-1264));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,264
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.conjugate();
      int int0 = complex2.NaN.hashCode();
      String string0 = complex0.toString();
      List<Complex> list0 = complex1.nthRoot(1);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-324.049016005));
      Complex complex1 = complex0.ZERO.multiply((-2038.91));
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.multiply((-324.049016005));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.ZERO.exp();
      Complex complex6 = complex0.ZERO.negate();
      Complex complex7 = complex4.NaN.sin();
      Complex complex8 = complex3.createComplex(1.6151834292371802E124, (-324.049016005));
      Complex complex9 = complex2.pow(complex3);
      Complex complex10 = complex9.divide(complex0);
      Complex complex11 = complex10.add(complex8);
      Complex complex12 = complex10.NaN.cosh();
      Complex complex13 = complex9.cos();
      Complex complex14 = complex13.ZERO.multiply(0.0);
      Complex complex15 = complex14.sin();
      boolean boolean0 = complex2.isNaN();
      Complex complex16 = complex1.conjugate();
      Complex complex17 = complex16.INF.subtract(complex15);
      Complex complex18 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-450.8538139396084));
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex3 = complex2.ONE.createComplex((-450.8538139396084), 0.0);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex5.INF.createComplex(0.0, 0.0);
      Complex complex8 = complex6.NaN.acos();
      Complex complex9 = complex6.subtract(complex4);
      Complex complex10 = complex6.INF.sqrt();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex0.cos();
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = complex12.ONE.subtract(0.0);
      Complex complex15 = complex4.acos();
      Complex complex16 = complex5.tanh();
      Complex complex17 = complex16.I.reciprocal();
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = complex15.ZERO.multiply(0.0);
      Complex complex20 = complex16.sin();
      Complex complex21 = complex15.sqrt();
      Complex complex22 = complex16.tan();
      Complex complex23 = complex4.exp();
      Complex complex24 = complex23.tanh();
      Complex complex25 = complex19.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.add((-868.258125531));
      Complex complex2 = Complex.NaN;
      boolean boolean0 = complex1.equals(complex2);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.NaN.subtract(complex4);
      Complex complex9 = complex3.pow(complex7);
      Complex complex10 = complex7.log();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex11.add((-1787.564074));
      int int0 = complex5.hashCode();
      Complex complex13 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2070.0);
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, (-5461.100308873249));
      Complex complex2 = complex0.ONE.divide(complex1);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf((-5461.100308873249));
      Complex complex5 = complex3.INF.exp();
      Complex complex6 = complex3.ONE.reciprocal();
      Complex complex7 = complex5.INF.add(0.0);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex5.reciprocal();
      double double0 = complex9.INF.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex1.sin();
      Complex complex11 = Complex.valueOf(0.0, (-5461.100308873249));
      Complex complex12 = complex10.INF.cos();
      Complex complex13 = complex10.tanh();
      Complex complex14 = complex10.multiply((-346));
      double double1 = complex2.getReal();
      String string0 = complex14.toString();
      Complex complex15 = complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1579.0443285006), (-1579.0443285006));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.valueOf((-1579.0443285006), (-1579.0443285006));
      Complex complex7 = complex6.NaN.subtract(complex4);
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex7.pow((-3066.326770376492));
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.subtract((-3066.326770376492));
      Complex complex12 = complex6.negate();
      Complex complex13 = complex9.subtract(complex8);
      boolean boolean0 = complex8.isInfinite();
      Complex complex14 = complex12.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.multiply((-5.806792575852521E10));
      Complex complex3 = complex1.divide((-5.806792575852521E10));
      boolean boolean0 = complex3.isNaN();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.I.pow((-1.0));
      Complex complex4 = complex3.ONE.divide(1506.0120193188);
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.pow(577.68900635);
      Complex complex7 = complex6.I.createComplex((-1.0), 1506.0120193188);
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.subtract((-2180.3178938544756));
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex0.divide(1487.604729221);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.815359096108819E217);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.INF.pow(2746.34);
      Complex complex5 = complex4.I.multiply(548);
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex4.INF.tan();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex2.createComplex(2746.34, 1381.74750764691);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1348.518712124566));
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2209.16343475188), (-2209.16343475188));
      Complex complex1 = complex0.cosh();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex1.NaN.divide((-353.712472));
      Complex complex3 = complex2.reciprocal();
      List<Complex> list0 = complex1.nthRoot(17);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.NaN.cos();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(100.97971745664);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      String string0 = complex1.I.toString();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.ONE.atan();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = Complex.valueOf((-519.523794266), (-519.523794266));
      int int0 = 0;
      Complex complex5 = complex1.INF.reciprocal();
      Complex complex6 = complex0.I.tanh();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(3.2850043261803593E68, 3.2850043261803593E68);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(0.4909018874168396);
      Complex complex3 = complex2.divide((-245.591));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.NaN.subtract(0.0);
      Complex complex4 = complex2.I.divide(Double.NaN);
      Complex complex5 = complex4.INF.sin();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex4.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.INF.sinh();
      String string0 = complex1.toString();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.ZERO.divide(0.0);
      int int0 = complex4.INF.hashCode();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.I.createComplex((-20.0), 0.0);
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex8.add(complex1);
      Complex complex10 = complex0.sin();
      double double1 = complex6.getImaginary();
      double double2 = complex0.abs();
      int int1 = (-436);
      Complex complex11 = complex4.ZERO.sinh();
      try { 
        complex8.ZERO.nthRoot((-436));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -436
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-3311.897517642033));
      Complex complex1 = new Complex((-1.2296934902142301E22));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex2.I.exp();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex3.ZERO.createComplex((-1.2296934902142301E22), 0.0);
      Complex complex10 = complex8.NaN.subtract(complex5);
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex11.pow(6.283185307179586);
      Complex complex13 = complex2.INF.atan();
      int int0 = complex9.NaN.hashCode();
      int int1 = complex8.I.hashCode();
      List<Complex> list0 = complex7.nthRoot(1624);
      Complex complex14 = complex1.multiply(complex3);
      Complex complex15 = complex14.divide(complex8);
      double double0 = complex1.getArgument();
      double double1 = complex9.getReal();
      Complex complex16 = complex2.exp();
      Complex complex17 = complex16.INF.cosh();
      List<Complex> list1 = complex17.INF.nthRoot(1624);
      Complex complex18 = complex6.asin();
      Complex complex19 = complex18.I.add(0.0);
      Complex complex20 = complex7.createComplex(1.4394452571868896, (-1.2296934902142301E22));
      Complex complex21 = complex5.atan();
      String string1 = complex9.toString();
      Complex complex22 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.I.tanh();
      List<Complex> list0 = complex0.nthRoot(1799);
      Complex complex4 = complex0.multiply(351.8);
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex4.INF.multiply(351.8);
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex6.INF.exp();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex9.NaN.multiply(0);
      Complex complex12 = complex11.NaN.createComplex(0, (-651.5470936));
      boolean boolean0 = complex5.equals(complex6);
      Complex complex13 = Complex.valueOf(1.7020465042442242E-8);
      boolean boolean1 = complex9.isNaN();
      Complex complex14 = complex1.exp();
      List<Complex> list1 = complex10.nthRoot(1799);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1.328167263606087E161);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.valueOf(1.328167263606087E161, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.I.subtract((-265.93294072082));
      Complex complex8 = complex6.ONE.cos();
      Complex complex9 = complex8.ZERO.add((-1412.0938635251));
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex10.I.add(complex3);
      Complex complex12 = complex11.NaN.divide(complex9);
      ComplexField complexField0 = complex12.getField();
      Complex complex13 = complex10.ZERO.sin();
      Complex complex14 = complex13.NaN.asin();
      Complex complex15 = complex3.exp();
      Complex complex16 = complex3.add(complex10);
      Complex complex17 = complex15.sinh();
      double double0 = complex5.abs();
      Complex complex18 = complex15.add(complex12);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1.0188117475357564E-260));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.I.exp();
      double double0 = complex2.INF.getArgument();
      Complex complex6 = complex5.multiply(1);
      double double1 = complex2.I.abs();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex7.pow(Double.NaN);
      Complex complex10 = Complex.valueOf(5.609418227003629E-301);
      Complex complex11 = complex8.ONE.acos();
      Complex complex12 = complex8.NaN.multiply((double) 1);
      Complex complex13 = complex8.I.tan();
      double double2 = complex9.getImaginary();
      boolean boolean0 = complex8.isNaN();
      Complex complex14 = complex7.cos();
      String string0 = complex10.I.toString();
      double double3 = complex5.getReal();
      Complex complex15 = Complex.valueOf(1.0, (-1017.28));
      Complex complex16 = complex1.exp();
      Complex complex17 = complex9.negate();
      Complex complex18 = complex15.acos();
      Complex complex19 = Complex.valueOf(0.0, (double) 1);
      Object object0 = complex10.readResolve();
      String string1 = complex9.toString();
      Complex complex20 = complex19.multiply(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(767.5759053683, 767.5759053683);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.subtract(1230.8286832591052);
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex1.INF.divide(complex2);
      Complex complex6 = complex4.I.atan();
      String string0 = complex4.ONE.toString();
      Complex complex7 = complex2.INF.subtract(767.5759053683);
      int int0 = complex1.ONE.hashCode();
      Complex complex8 = complex2.I.log();
      ComplexField complexField0 = complex7.ZERO.getField();
      double double0 = complex0.getArgument();
      int int1 = complex0.hashCode();
      int int2 = complex0.hashCode();
      ComplexField complexField1 = complex1.getField();
      Complex complex9 = complex0.ONE.sin();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex2.add(Double.NaN);
      Object object0 = complex11.readResolve();
      Complex complex12 = complex1.subtract(complex4);
      Complex complex13 = complex0.subtract(complex11);
      double double1 = complex2.getArgument();
      Complex complex14 = complex8.cos();
      Complex complex15 = complex2.multiply(1720);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.ONE.multiply(0.0);
      Complex complex3 = Complex.valueOf(3209.3624184, 0.0);
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex0.exp();
      double double1 = complex5.I.getArgument();
      Complex complex6 = complex5.INF.pow(3209.3624184);
      Complex complex7 = complex2.atan();
      Complex complex8 = complex3.log();
      int int0 = complex0.hashCode();
      Complex complex9 = complex0.pow(0.0);
      Complex complex10 = complex9.ONE.negate();
      boolean boolean0 = complex7.equals((Object) null);
  }
}
