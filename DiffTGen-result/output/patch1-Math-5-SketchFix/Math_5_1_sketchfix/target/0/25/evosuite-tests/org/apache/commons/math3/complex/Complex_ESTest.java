/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:14:23 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf(2.6113557852262235E15);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.ZERO.subtract(1259.747393002);
      double double0 = complex0.I.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.multiply(1.5707963267948966);
      List<Complex> list0 = complex5.NaN.nthRoot(1722);
      Complex complex8 = complex7.ONE.conjugate();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex6.cos();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex5.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = new Complex(332.562314085777);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply((-747));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex1.NaN.asin();
      Complex complex8 = complex3.NaN.asin();
      Complex complex9 = complex4.I.exp();
      Complex complex10 = complex9.subtract(1252.43068607);
      Complex complex11 = Complex.valueOf((-1891.4350752936684), 1252.43068607);
      Complex complex12 = complex9.ZERO.sqrt1z();
      Complex complex13 = complex4.acos();
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex10.multiply((-1382.85308));
      Complex complex16 = complex4.atan();
      Complex complex17 = Complex.valueOf(1565.826682, 2.0180835723876953);
      Complex complex18 = Complex.valueOf(2.0);
      Complex complex19 = complex2.multiply(2.0);
      Complex complex20 = complex3.reciprocal();
      Complex complex21 = complex12.sqrt();
      Complex complex22 = complex9.createComplex(Double.POSITIVE_INFINITY, 1337.848);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(943.75805296823);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = Complex.valueOf(943.75805296823);
      Complex complex5 = complex2.INF.add(complex1);
      Complex complex6 = Complex.valueOf(755.0844, 1.0);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.pow(complex1);
      double double0 = complex7.INF.abs();
      Complex complex9 = complex6.cosh();
      String string0 = complex9.I.toString();
      Complex complex10 = complex9.I.divide(complex5);
      double double1 = complex5.NaN.abs();
      Complex complex11 = complex0.divide((-164.042098626));
      Complex complex12 = complex9.cos();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex11.sin();
      Complex complex15 = complex7.cos();
      ComplexField complexField0 = complex15.I.getField();
      Complex complex16 = complex11.asin();
      Complex complex17 = complex6.ONE.multiply(0);
      Complex complex18 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex19 = complex1.negate();
      Complex complex20 = complex0.add(complex18);
      Complex complex21 = complex9.multiply(complex13);
      Complex complex22 = complex10.add(complex4);
      Complex complex23 = complex21.sqrt();
      Complex complex24 = complex23.ZERO.atan();
      Complex complex25 = complex2.add((-826.44077204));
      Complex complex26 = complex25.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.39157733228126257, (-2418.1305649));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.I.add(0.39157733228126257);
      Complex complex3 = complex0.createComplex(0.39157733228126257, (-2418.1305649));
      Complex complex4 = complex1.I.subtract((-34.25020757314286));
      Complex complex5 = complex3.pow((-156.0901037537718));
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.ZERO.subtract(complex7);
      Complex complex9 = complex2.divide(complex0);
      Complex complex10 = Complex.valueOf((-34.25020757314286), 1259.63346);
      Complex complex11 = Complex.valueOf(4786.459794, (-156.0901037537718));
      Complex complex12 = complex11.INF.tanh();
      ComplexField complexField0 = complex12.I.getField();
      Complex complex13 = complex1.I.createComplex((-1339.6), (-401.3028775681318));
      Complex complex14 = complex13.NaN.log();
      Complex complex15 = complex13.I.sin();
      Complex complex16 = complex3.multiply(560);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex17 = complex11.tan();
      int int0 = complex17.INF.hashCode();
      boolean boolean1 = complex13.equals((Object) null);
      Complex complex18 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(787.83);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.ZERO.log();
      int int0 = complex1.I.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex5.divide(787.83);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.ONE.createComplex(787.83, 20.0);
      Complex complex10 = complex0.asin();
      double double0 = complex10.getArgument();
      Complex complex11 = complex1.ZERO.multiply(complex10);
      Complex complex12 = complex10.exp();
      Complex complex13 = complex10.NaN.multiply(1);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex14 = complex12.I.pow(1.080835500478704E-8);
      Complex complex15 = complex10.ZERO.conjugate();
      Complex complex16 = complex0.reciprocal();
      double double1 = complex10.abs();
      Complex complex17 = complex9.cos();
      Complex complex18 = complex17.ONE.conjugate();
      List<Complex> list0 = complex14.nthRoot(151);
      Complex complex19 = complex0.multiply((double) 1);
      Complex complex20 = complex15.sin();
      Complex complex21 = complex8.subtract(complex15);
      Complex complex22 = complex5.sqrt();
      Complex complex23 = complex5.reciprocal();
      Complex complex24 = complex4.divide(complex17);
      Complex complex25 = complex12.multiply(787.83);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(481.917716);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.multiply(1404);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.NaN.pow((double) 163);
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex0.multiply(163);
      Complex complex6 = complex5.I.negate();
      double double0 = complex0.abs();
      Complex complex7 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.add((-1008.79624429));
      List<Complex> list0 = complex3.NaN.nthRoot(163);
      Complex complex9 = complex7.add(complex0);
      List<Complex> list1 = complex9.I.nthRoot(163);
      Object object1 = complex9.ONE.readResolve();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex10.NaN.multiply(0.0);
      Complex complex12 = complex8.pow(complex6);
      String string0 = complex12.ONE.toString();
      Complex complex13 = complex7.INF.tanh();
      Complex complex14 = complex3.multiply(complex4);
      Complex complex15 = complex4.asin();
      Complex complex16 = complex8.sinh();
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.8414709848078964);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.reciprocal();
      double double0 = complex0.ZERO.getArgument();
      Complex complex6 = complex1.cos();
      Complex complex7 = new Complex(0.8414709848078964);
      Complex complex8 = complex4.multiply(complex7);
      Complex complex9 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.cosh();
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex0.INF.atan();
      double double1 = complex0.getArgument();
      double double2 = complex3.getReal();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex2.NaN.cos();
      Complex complex6 = complex5.I.tanh();
      double double3 = complex3.getReal();
      Complex complex7 = Complex.valueOf(0.7853981633974483);
      Complex complex8 = complex7.INF.divide(1.5707963267948966);
      Complex complex9 = complex8.I.divide(complex7);
      Complex complex10 = complex9.ZERO.divide(complex7);
      Complex complex11 = complex1.sqrt1z();
      int int0 = complex3.hashCode();
      boolean boolean0 = complex2.isNaN();
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex12.NaN.cosh();
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex13.ONE.add(Double.NaN);
      Complex complex16 = complex13.pow((-3017.02026121032));
      double double4 = complex8.abs();
      Complex complex17 = complex13.sin();
      double double5 = complex11.abs();
      Complex complex18 = complex10.atan();
      Complex complex19 = complex1.add(1.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      Complex complex1 = complex0.I.divide((-3019.90225397));
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.ZERO.cosh();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.subtract(443.5231);
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = complex4.log();
      Complex complex7 = complex0.add(443.5231);
      Complex complex8 = complex4.divide(Double.NaN);
      Complex complex9 = complex6.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.INF.sqrt();
      int int0 = complex3.ONE.hashCode();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex1.multiply(17);
      Complex complex9 = complex6.cos();
      Complex complex10 = complex6.acos();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.ONE.divide(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.pow(7.722018663521402E99);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.NaN.pow(0.7853981633974483);
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex0.multiply(0.7853981633974483);
      Complex complex8 = complex6.multiply(complex2);
      Complex complex9 = complex6.INF.multiply(complex7);
      Complex complex10 = Complex.valueOf(814.36328);
      double double1 = complex8.NaN.getArgument();
      double double2 = complex3.abs();
      Complex complex11 = complex2.subtract((-44.37417092883));
      Complex complex12 = complex7.subtract(2998.567471398);
      Complex complex13 = complex9.add(complex12);
      Complex complex14 = Complex.valueOf(2.0);
      Complex complex15 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4751837654582522E-8, 2.4751837654582522E-8);
      Complex complex1 = complex0.ZERO.sinh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = Complex.valueOf(2.4751837654582522E-8, 670.9706762);
      Complex complex6 = complex5.INF.multiply(0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex1.NaN.cos();
      Complex complex9 = complex0.ONE.asin();
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex0.pow(1627.508986249831);
      Complex complex12 = complex0.log();
      ComplexField complexField0 = complex9.getField();
      List<Complex> list0 = complex10.INF.nthRoot(1);
      Complex complex13 = complex11.ZERO.divide(complex9);
      double double0 = complex8.getImaginary();
      Complex complex14 = complex9.ONE.exp();
      Complex complex15 = complex7.subtract(265.5232);
      Complex complex16 = complex11.acos();
      Complex complex17 = complex10.exp();
      int int0 = complex10.hashCode();
      Complex complex18 = complex8.pow(complex0);
      Complex complex19 = complex18.INF.multiply(complex10);
      Complex complex20 = complex12.cosh();
      double double1 = complex17.getReal();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1067.116746279);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.divide(851.401141316);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex3.ONE.pow(0.0);
      Complex complex6 = complex1.I.pow(851.401141316);
      Complex complex7 = complex1.ZERO.sin();
      Complex complex8 = complex0.log();
      boolean boolean0 = complex7.isNaN();
      Object object0 = complex8.readResolve();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.ZERO.divide(851.401141316);
      Complex complex11 = complex9.ZERO.pow(0.0);
      Complex complex12 = complex7.exp();
      Complex complex13 = complex8.sqrt();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = Complex.valueOf(0.0, (-1174.93668984));
      Complex complex16 = complex15.asin();
      double double0 = complex2.getImaginary();
      Complex complex17 = complex15.add(complex10);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2307.954891477957);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.INF.log();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex5.ONE.cosh();
      double double1 = complex7.abs();
      Complex complex8 = complex3.pow(0.0);
      Complex complex9 = complex2.I.sqrt1z();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex10.divide((-101.03425916402));
      Complex complex12 = complex4.log();
      boolean boolean0 = complex12.isInfinite();
      Complex complex13 = complex3.ONE.log();
      Complex complex14 = complex8.sqrt();
      Complex complex15 = complex4.divide((-101.03425916402));
      Complex complex16 = complex7.multiply(complex15);
      Complex complex17 = complex8.add(complex0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(327.4220860881168, 327.4220860881168);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.ONE.pow(complex3);
      Complex complex6 = complex4.I.add(complex1);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex6.ZERO.subtract(327.4220860881168);
      Complex complex9 = complex8.INF.divide(327.4220860881168);
      Complex complex10 = complex1.multiply(1);
      Complex complex11 = complex2.sin();
      Complex complex12 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-3423.6429629842));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract((-3423.6429629842));
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.ONE.pow((-3423.6429629842));
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = Complex.valueOf((-3423.6429629842));
      Complex complex10 = complex4.pow(complex9);
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex10.multiply((-3423.6429629842));
      Complex complex13 = complex10.INF.sqrt1z();
      Complex complex14 = complex12.ONE.multiply(Double.NaN);
      Complex complex15 = complex3.multiply(complex10);
      Complex complex16 = complex0.add(2.0454950851007314E110);
      Complex complex17 = complex6.acos();
      Complex complex18 = complex16.sqrt1z();
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = Complex.valueOf(Double.NaN, (-2140.9742));
      Complex complex21 = complex6.subtract(complex16);
      Complex complex22 = complex21.NaN.sqrt();
      String string0 = complex1.toString();
      Complex complex23 = complex9.add(complex8);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.ZERO.nthRoot(1202);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.INF.pow(complex3);
      Complex complex6 = complex4.NaN.reciprocal();
      Complex complex7 = complex5.ZERO.tanh();
      int int0 = complex4.ONE.hashCode();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex2.exp();
      boolean boolean0 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(647.0843780763497);
      Complex complex2 = Complex.valueOf((-465.9642), 0.0);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.sqrt1z();
      try { 
        complex4.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.NaN.acos();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex5.INF.sinh();
      double double0 = complex2.INF.abs();
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex8.multiply(complex1);
      Complex complex10 = complex9.ZERO.divide(complex4);
      Complex complex11 = complex6.ONE.multiply(complex1);
      Complex complex12 = complex10.INF.divide(20.0);
      List<Complex> list0 = complex0.nthRoot(1156);
      ComplexField complexField0 = complex8.getField();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.I.tanh();
      double double1 = complex0.getArgument();
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex1.pow(complex2);
      Complex complex17 = complex16.ONE.asin();
      double double2 = complex9.getArgument();
      Complex complex18 = complex8.reciprocal();
      double double3 = complex18.I.abs();
      Complex complex19 = complex4.cos();
      Complex complex20 = complex2.subtract(0.0);
      Complex complex21 = complex6.sinh();
      Complex complex22 = complex14.cosh();
      String string0 = complex10.toString();
      Complex complex23 = complex22.asin();
      Complex complex24 = complex4.sqrt1z();
      Complex complex25 = complex22.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.INF.subtract(complex2);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex4.I.divide(complex2);
      Complex complex7 = complex6.I.divide(complex3);
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex2.subtract(complex3);
      Complex complex12 = complex3.tan();
      Complex complex13 = complex12.ONE.pow(0.39037787914276123);
      Complex complex14 = Complex.valueOf((-1217.2869), 3419.3438);
      Complex complex15 = complex14.INF.asin();
      double double0 = complex14.getReal();
      double double1 = complex3.getReal();
      double double2 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 2321.2385418929;
      Complex complex0 = new Complex(2321.2385418929);
      Complex complex1 = complex0.subtract(Double.NaN);
      Object object0 = complex0.ZERO.readResolve();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-115.168193);
      Complex complex0 = Complex.valueOf((-115.168193));
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.multiply((-1.0));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.NaN.cos();
      double double0 = complex0.ZERO.abs();
      Complex complex7 = complex2.multiply(0.0);
      Complex complex8 = complex7.log();
      List<Complex> list0 = complex4.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.506060218));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex3 = complex2.INF.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.acos();
      double double1 = complex2.ONE.getArgument();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex1.sin();
      try { 
        complex6.I.nthRoot((-616));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -616
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1739.993764052, 3518.32089185182);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = Complex.valueOf(3518.32089185182);
      Complex complex10 = complex9.NaN.subtract(complex3);
      Complex complex11 = complex8.ZERO.reciprocal();
      double double0 = complex0.getImaginary();
      Complex complex12 = complex1.multiply((-1583));
      Complex complex13 = complex12.multiply((-1583));
      Complex complex14 = complex13.ONE.cos();
      Complex complex15 = complex6.sqrt();
      Complex complex16 = complex2.subtract(complex0);
      Complex complex17 = Complex.valueOf(0.0, 0.0);
      Complex complex18 = complex1.createComplex(0.0, (-1583));
      double double1 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = new Complex(3371.280483796334, 3371.280483796334);
      Complex complex3 = complex0.I.add(complex2);
      String string0 = complex0.toString();
      Complex complex4 = complex0.asin();
      double double0 = complex4.getArgument();
      Complex complex5 = complex0.add((-1139.62892499));
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex3.pow((-1139.62892499));
      Complex complex7 = complex6.NaN.createComplex(Double.NaN, (-1139.62892499));
      Complex complex8 = complex4.asin();
      Complex complex9 = complex5.add(946.7939);
      Complex complex10 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex0.ONE.pow(1382.66289478);
      Complex complex4 = Complex.valueOf(1382.66289478, 0.0);
      Complex complex5 = complex2.I.reciprocal();
      Complex complex6 = complex0.asin();
      try { 
        complex5.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2437.12124), 0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2745.2, 2745.2);
      Complex complex1 = complex0.createComplex(2745.2, 2745.2);
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(5400.905, 2729.734);
      Complex complex4 = complex3.ONE.acos();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex0.add(complex1);
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(483.9904932522, 2037.1679043);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.I.multiply(complex1);
      List<Complex> list0 = complex0.nthRoot(7);
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex3.ONE.add(313.2355883032);
      Complex complex6 = Complex.valueOf(1891.6667556185248, 3732.896);
      Complex complex7 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex0.sin();
      double double0 = complex3.getImaginary();
      Complex complex4 = Complex.valueOf(1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3179.7007781702255, 3179.7007781702255);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.add(3179.7007781702255);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.add(3179.7007781702255);
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex3.ZERO.multiply(complex0);
      Complex complex8 = complex0.ZERO.atan();
      double double0 = complex1.abs();
      Complex complex9 = complex3.multiply(complex0);
      String string0 = complex7.INF.toString();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex10.I.cosh();
      Complex complex12 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = new Complex(1.1622881889343262, 1.1622881889343262);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.I.reciprocal();
      int int0 = complex4.hashCode();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex4.NaN.sinh();
      Complex complex8 = complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf((-3280.68615733), 2357.7);
      Complex complex2 = complex1.ONE.subtract((-1.0));
      List<Complex> list0 = complex1.I.nthRoot(1);
      Complex complex3 = complex1.divide(complex0);
      double double1 = complex3.NaN.getArgument();
      double double2 = complex3.ZERO.getArgument();
      Complex complex4 = complex1.cos();
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex0.divide(complex1);
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex7.add(2357.7);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.multiply((-1575));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex1.createComplex(1.3064749115929298E-8, (-721.5035825024503));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.pow(complex1);
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.reciprocal();
      Object object1 = complex1.readResolve();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex2.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.multiply((-1608));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex3.ZERO.multiply((-1608));
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex0.multiply((-1608));
      Complex complex9 = complex0.add(complex8);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1791.055803289791), (-1791.055803289791));
      Complex complex1 = complex0.subtract((-1714.1253867));
      Complex complex2 = complex1.I.subtract(complex0);
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.NaN.add((-1714.1253867));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.ONE.subtract((-58.042530844));
      Complex complex6 = complex1.I.pow(complex0);
      Complex complex7 = complex1.ONE.exp();
      Complex complex8 = complex7.multiply(37);
      double double0 = complex8.NaN.getArgument();
      Complex complex9 = complex1.multiply(5604.42096691);
      boolean boolean0 = complex1.equals(complex6);
      double double1 = complex0.getImaginary();
      Complex complex10 = Complex.valueOf(0.0, (double) 37);
      Complex complex11 = complex2.add(complex9);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(847.5435);
      Complex complex2 = complex1.NaN.add(847.5435);
      Complex complex3 = complex1.NaN.multiply((-1104.97));
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex4.INF.pow(847.5435);
      Complex complex7 = complex0.add(847.5435);
      double double0 = complex7.getReal();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex0.NaN.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2.757030889767851E-8);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.ONE.pow(complex3);
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex1.cos();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex3.multiply(complex10);
      Complex complex12 = complex4.cos();
      Complex complex13 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex0.ONE.getField();
      boolean boolean0 = complex1.equals(object0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.ONE.pow(4.4068830785712375E-8);
      Complex complex5 = complex4.ZERO.multiply(0);
      Complex complex6 = new Complex(4.4068830785712375E-8, (-2575.6500633665));
      Complex complex7 = complex2.ONE.multiply(complex6);
      Complex complex8 = complex7.multiply((-2575.6500633665));
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex1.ONE.pow((-2.268889128622553E-8));
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex6.I.divide((-2.268889128622553E-8));
      Complex complex9 = complex1.subtract(complex5);
      Complex complex10 = complex5.tan();
      Complex complex11 = Complex.valueOf((-2.268889128622553E-8));
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-3450.893836));
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.add(1.5855598449707031);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.atan();
      boolean boolean0 = complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.cosh();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex1.subtract(607.5562050502255);
      Complex complex4 = Complex.valueOf((-1185.48023059));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.pow(2.0);
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(431.297477705378, 431.297477705378);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.acos();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex2 = complex1.divide((double) 17);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.subtract(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      List<Complex> list0 = complex1.INF.nthRoot(1);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex6 = complex1.INF.negate();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex5.multiply(3565);
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex5.subtract(0.0);
      Complex complex11 = complex10.NaN.atan();
      double double0 = complex1.abs();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex13.I.multiply(complex8);
      Complex complex15 = complex0.pow(complex2);
      Complex complex16 = complex14.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.log();
      try { 
        complex1.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3499138355255127);
      Complex complex1 = new Complex((-795.4663693649), (-795.4663693649));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = Complex.valueOf((-95.99463), (-95.99463));
      Complex complex4 = complex0.I.divide(complex3);
      Complex complex5 = complex3.NaN.multiply((-95.99463));
      Complex complex6 = complex0.add((-1208.0081));
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex1.NaN.subtract(0.0);
      Complex complex9 = complex8.ONE.divide(complex3);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex10 = complex3.INF.pow(complex2);
      Complex complex11 = Complex.valueOf((-1208.0081));
      double double0 = complex3.getArgument();
      boolean boolean1 = complex0.isInfinite();
      Complex complex12 = complex3.INF.sin();
      Complex complex13 = complex12.I.add(complex5);
      Complex complex14 = complex4.pow(complex3);
      Complex complex15 = complex14.divide(Double.NaN);
      Complex complex16 = complex4.reciprocal();
      Complex complex17 = complex3.pow(complex16);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2709.59663);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.ZERO.negate();
      Complex complex7 = Complex.valueOf(2709.59663, 2.0);
      Complex complex8 = complex7.ZERO.sqrt();
      boolean boolean0 = complex3.isInfinite();
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2449.3096654898573), 2734.380633);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex1.pow(40.1741867679991);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex2.add(3013.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.ZERO.divide(complex1);
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex2.multiply(20.0);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.acos();
      Object object0 = complex1.I.readResolve();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1292.07973));
      Complex complex1 = complex0.I.sinh();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.subtract((-1292.07973));
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.NaN.multiply((-1292.07973));
      Complex complex6 = complex5.ONE.log();
      int int1 = complex4.hashCode();
      Complex complex7 = Complex.valueOf(2.2860509143963117E-8);
      Complex complex8 = complex7.createComplex((-1292.07973), 0.0);
      Complex complex9 = complex8.ZERO.add((-1292.07973));
      boolean boolean0 = complex4.isNaN();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex1.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1497.5002177));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.add((-1.0));
      Complex complex5 = complex0.multiply((-1.0));
      Complex complex6 = complex4.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex3.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-188.0));
      Complex complex1 = complex0.I.createComplex(1750.0, (-188.0));
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 1750.0);
      Complex complex4 = complex0.createComplex(1750.0, (-2421.6383705));
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1029.7));
      Complex complex6 = complex5.exp();
      Object object0 = complex4.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex4.pow(1093.3190874973207);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3078.1361766812042, 3078.1361766812042);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.pow(3078.1361766812042);
      Complex complex3 = complex1.NaN.cosh();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex0.sin();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1457.959937);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(2.0, 1457.959937);
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.ONE.subtract(complex3);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex2.I.divide(2.0);
      ComplexField complexField0 = complex3.ONE.getField();
      String string0 = complex4.toString();
      Complex complex8 = complex1.I.pow((-2613.21191));
      Complex complex9 = complex2.sin();
      Complex complex10 = complex1.tan();
      double double0 = complex3.getArgument();
      Complex complex11 = complex4.subtract(complex0);
      Complex complex12 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(0.4500300884246826);
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, (-3162.074112));
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex1.I.sqrt();
      int int0 = complex4.ZERO.hashCode();
      String string0 = complex0.toString();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.add(complex2);
      int int1 = complex6.ZERO.hashCode();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex5.log();
      Complex complex9 = complex2.multiply((double) 1);
      Complex complex10 = complex2.conjugate();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex0.multiply((-4628.62));
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ZERO.divide((double) 0);
      Complex complex6 = complex2.ONE.divide((-20.0));
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex2.multiply(0);
      Complex complex10 = complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.multiply(complex2);
      Object object0 = complex4.readResolve();
      Complex complex7 = complex4.INF.conjugate();
      double double0 = complex3.getReal();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex2.log();
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex0.ONE.sqrt();
      String string0 = complex2.toString();
      Complex complex13 = complex8.log();
      Complex complex14 = complex13.I.createComplex(Double.POSITIVE_INFINITY, 1785.6955238);
      Complex complex15 = complex11.subtract(Double.NaN);
      Complex complex16 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3063063621520996);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex(0.5893045663833618, 0.3063063621520996);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      String string0 = complex0.toString();
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(1118.3072948);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1450.7322);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2154.4143262505972));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.INF.divide(complex1);
      Complex complex7 = complex6.createComplex(0.0, (-2154.4143262505972));
      Complex complex8 = complex5.pow(complex0);
      Complex complex9 = complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.ZERO.multiply(complex3);
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3103.6128226), (-3103.6128226));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf((-938.053804209), 0.0);
      Complex complex6 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.multiply(6.283185307179586);
      Complex complex4 = Complex.valueOf(6.283185307179586);
      Complex complex5 = complex0.divide(6.283185307179586);
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.I.multiply(1358);
      ComplexField complexField0 = complex1.I.getField();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      int int0 = complex0.INF.hashCode();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.acos();
      double double1 = complex5.abs();
      Complex complex8 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex1.ONE.add(1.0);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2090.1188257);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.NaN.reciprocal();
      ComplexField complexField1 = complex1.getField();
      try { 
        complex0.ONE.nthRoot((-1179));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,179
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.multiply(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = complex4.NaN.log();
      Complex complex7 = complex4.exp();
      List<Complex> list0 = complex2.nthRoot(325);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1.5619414792273914E-8), (-2609.0));
      Complex complex1 = complex0.INF.divide((-1.5619414792273914E-8));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.INF.atan();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals(":q.ID\"!vDK\"");
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex1.divide(588.99);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex6.divide(complex0);
      Complex complex9 = complex8.NaN.multiply(268);
      Complex complex10 = complex0.pow(0.0);
      List<Complex> list0 = complex10.nthRoot(268);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-2059.1306712749));
      Complex complex2 = complex0.createComplex((-775.8312702), 0.0);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(1025.33249580936);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.add((-2276.5026));
      Complex complex3 = complex0.subtract(1025.33249580936);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.I.pow((-306.99481));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.NaN.multiply((-306.99481));
      Object object0 = complex0.INF.readResolve();
      Complex complex8 = complex4.createComplex(0.522662190431095, 849.6727480854498);
      Complex complex9 = complex2.ZERO.divide(849.6727480854498);
      Complex complex10 = complex8.I.divide(complex3);
      Complex complex11 = complex8.pow(complex2);
      double double0 = complex2.abs();
      Object object1 = complex0.readResolve();
      Complex complex12 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex13 = complex9.sinh();
      Complex complex14 = complex11.exp();
      Complex complex15 = Complex.valueOf(0.522662190431095);
      ComplexField complexField0 = complex14.getField();
      Complex complex16 = complex0.createComplex(2413.0, Double.NaN);
      Complex complex17 = complex9.tan();
      Complex complex18 = complex13.pow(complex11);
      Complex complex19 = complex3.divide(complex16);
      Complex complex20 = Complex.valueOf(Double.NaN);
      Complex complex21 = complex17.INF.pow(Double.NaN);
      Complex complex22 = complex1.tanh();
      Complex complex23 = complex17.subtract(complex19);
      Complex complex24 = complex0.subtract(complex1);
      Complex complex25 = complex5.multiply(complex12);
      Complex complex26 = complex0.subtract(complex14);
      Complex complex27 = complex17.tan();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-839.115), 446.08);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ZERO.divide(446.08);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sin();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.INF.sqrt();
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex4.I.subtract(1.0);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex3.add(complex0);
      Complex complex11 = complex3.add(0.0);
      Complex complex12 = complex2.atan();
      Complex complex13 = complex12.I.createComplex(0.0, 20.0);
      Complex complex14 = complex12.ONE.multiply(2123);
      Complex complex15 = complex11.asin();
      Complex complex16 = complex15.I.tanh();
      boolean boolean0 = complex11.equals(object0);
      int int0 = complex15.hashCode();
      boolean boolean1 = complex7.isNaN();
      Complex complex17 = complex6.createComplex(0.0, 3.652892398145774E-153);
      Complex complex18 = complex7.sin();
      Complex complex19 = complex18.I.acos();
      List<Complex> list0 = complex18.nthRoot(2123);
      String string0 = complex11.toString();
      Complex complex20 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex5.ONE.multiply(0.0);
      Complex complex7 = complex0.I.sqrt1z();
      Complex complex8 = complex4.ZERO.multiply(complex0);
      Complex complex9 = complex0.exp();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.NaN.exp();
      Complex complex12 = complex1.asin();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      int int0 = complex13.I.hashCode();
      Complex complex14 = complex4.sqrt1z();
      Complex complex15 = complex14.tan();
      Complex complex16 = complex9.conjugate();
      Complex complex17 = Complex.valueOf(0.0, (-2978.4));
      String string0 = complex7.toString();
      Complex complex18 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3912.36268);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.negate();
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex1.createComplex(3912.36268, 0.0);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.ZERO.reciprocal();
      Complex complex6 = complex5.ONE.multiply(3912.36268);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex6.ONE.sqrt();
      ComplexField complexField0 = complex3.getField();
      String string0 = complex0.toString();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.ZERO.sqrt1z();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-709.2));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf((-709.2));
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.ZERO.multiply(complex4);
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex7.I.asin();
      List<Complex> list0 = complex8.ZERO.nthRoot(37);
      ComplexField complexField0 = complex1.NaN.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.ZERO.cos();
      Complex complex12 = complex10.INF.sqrt();
      Complex complex13 = complex12.sqrt1z();
      Complex complex14 = complex12.tanh();
      Complex complex15 = Complex.valueOf((-709.2), 0.0);
      Complex complex16 = Complex.valueOf((double) 37, 0.0);
      Complex complex17 = complex15.NaN.sqrt1z();
      Complex complex18 = complex1.multiply(989);
      Complex complex19 = complex13.log();
      String string0 = complex2.toString();
      boolean boolean1 = complex2.isInfinite();
      Complex complex20 = complex8.atan();
      Complex complex21 = complex2.tanh();
      Complex complex22 = complex18.tanh();
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex1.NaN.multiply(2.0);
      Complex complex5 = complex1.INF.multiply(complex0);
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.exp();
      double double1 = complex6.NaN.abs();
      double double2 = complex6.abs();
      String string0 = complex3.toString();
      Complex complex8 = Complex.valueOf((-2721.15), Double.NaN);
      double double3 = complex8.getImaginary();
      Complex complex9 = complex4.conjugate();
  }
}
