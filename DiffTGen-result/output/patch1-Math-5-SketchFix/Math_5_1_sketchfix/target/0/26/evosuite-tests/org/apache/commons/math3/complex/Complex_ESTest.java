/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:14:24 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(4.0795586181406803E-41, 0.6729245185852051);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.createComplex(3685.9645111255586, (-474.75));
      Complex complex3 = complex0.ZERO.multiply(4.0795586181406803E-41);
      Complex complex4 = complex1.multiply(29);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.multiply((-2824.198846333));
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.NaN.multiply((-2284));
      Complex complex4 = complex0.divide((-1.0));
      double double0 = complex1.getArgument();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex0.divide((-1.5707963267948966));
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.ONE.subtract(complex0);
      double double0 = complex3.INF.getArgument();
      double double1 = complex3.NaN.getArgument();
      Complex complex4 = complex0.I.tanh();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex1.ZERO.sqrt();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ONE.multiply(complex2);
      Complex complex6 = complex5.NaN.multiply(complex2);
      String string0 = complex4.toString();
      Complex complex7 = complex4.add(complex1);
      List<Complex> list0 = complex2.I.nthRoot(3300);
      Complex complex8 = complex2.createComplex(Double.NaN, 7.699097067385825E-248);
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.ZERO.reciprocal();
      Complex complex11 = complex9.INF.acos();
      Complex complex12 = complex8.pow(complex2);
      Complex complex13 = complex7.multiply(Double.NaN);
      int int0 = complex13.ONE.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex14 = Complex.valueOf((-345.8912741269));
      Complex complex15 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.multiply(2501.93419044);
      Complex complex2 = complex0.subtract(2501.93419044);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.INF.divide(2501.93419044);
      Complex complex6 = Complex.valueOf(568.8751668668);
      Complex complex7 = complex6.ONE.sinh();
      Object object1 = complex6.INF.readResolve();
      Complex complex8 = complex3.reciprocal();
      double double0 = complex8.I.getArgument();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex8.I.tan();
      Complex complex11 = complex10.NaN.acos();
      Complex complex12 = Complex.valueOf(1449.74713636);
      int int0 = complex12.hashCode();
      Complex complex13 = complex5.add(1.5707963267948966);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex2.add(complex5);
      boolean boolean0 = complex0.isNaN();
      Complex complex16 = complex1.acos();
      Complex complex17 = complex7.sinh();
      Complex complex18 = complex10.add(complex3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5872.01), 546.7396298576);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.abs();
      boolean boolean0 = complex0.equals("#U+FQT]W~L#l");
      Complex complex1 = complex0.multiply(3111);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex1.NaN.pow((double) 3111);
      Object object0 = complex1.INF.readResolve();
      Complex complex5 = complex0.multiply(1);
      double double1 = complex1.abs();
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex4.INF.divide(complex5);
      Complex complex10 = complex8.ONE.createComplex(1136.908345, 0.0);
      Complex complex11 = complex6.ONE.pow(complex4);
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex0.ZERO.subtract((-2993.063));
      Complex complex14 = complex6.tanh();
      Complex complex15 = complex14.I.createComplex((-856.9775199), 7.165331603232264E-8);
      Complex complex16 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1816.034004521507);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1816.034004521507, 0.0);
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.subtract(1816.034004521507);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.conjugate();
      double double0 = complex4.INF.abs();
      boolean boolean0 = complex2.isInfinite();
      Complex complex7 = complex4.tan();
      Complex complex8 = Complex.valueOf(1816.034004521507, Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.ONE.subtract(complex8);
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex1.negate();
      String string0 = complex2.toString();
      Complex complex13 = complex10.divide(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      boolean boolean1 = complex10.equals(object0);
      String string1 = complex6.toString();
      Complex complex14 = complex12.cosh();
      Complex complex15 = complex5.divide(complex7);
      Complex complex16 = complex3.subtract(complex14);
      Complex complex17 = complex16.ZERO.subtract(0.0);
      Complex complex18 = complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(2.864122672853628E-291);
      Complex complex1 = new Complex(2.864122672853628E-291, 2.864122672853628E-291);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.divide((-1652.48));
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex1.I.multiply(complex3);
      Complex complex6 = complex5.subtract((-1652.48));
      String string0 = complex5.NaN.toString();
      Complex complex7 = complex3.NaN.add(4060.8);
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex2.add(complex0);
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = Complex.valueOf(4060.8, (-1652.48));
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex12.exp();
      boolean boolean0 = complex2.isInfinite();
      Complex complex15 = complex3.exp();
      Complex complex16 = complex7.pow(0.0);
      Complex complex17 = complex2.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = new Complex((-1357.1681), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      String string0 = complex1.toString();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex5.subtract(complex4);
      Complex complex9 = complex1.ZERO.reciprocal();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex11.INF.conjugate();
      Object object0 = complex12.ZERO.readResolve();
      Complex complex13 = complex2.I.sin();
      Complex complex14 = complex5.INF.sin();
      double double0 = complex3.getReal();
      Complex complex15 = complex8.multiply(complex1);
      boolean boolean0 = complex3.equals("(0.0, 0.0)");
      int int0 = complex8.hashCode();
      Complex complex16 = complex2.ONE.conjugate();
      Complex complex17 = complex6.sqrt1z();
      Complex complex18 = complex17.NaN.pow(0.0);
      Complex complex19 = complex17.pow(0.0);
      Complex complex20 = complex4.cosh();
      boolean boolean1 = complex13.equals(complex15);
      boolean boolean2 = complex3.isInfinite();
      Complex complex21 = complex3.add(Double.NaN);
      Complex complex22 = complex6.cos();
      boolean boolean3 = complex20.isNaN();
      boolean boolean4 = complex6.isInfinite();
      Complex complex23 = complex1.negate();
      Complex complex24 = complex4.negate();
      Complex complex25 = complex24.ZERO.reciprocal();
      Complex complex26 = complex23.divide(0.0);
      Complex complex27 = Complex.valueOf(Double.NaN);
      Complex complex28 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = new Complex((-2385.38149), (-2385.38149));
      Complex complex4 = complex3.ONE.divide((-2385.38149));
      Complex complex5 = complex0.add(complex3);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex7.atan();
      double double0 = complex8.ONE.abs();
      Complex complex9 = complex7.I.log();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex4.divide(complex10);
      int int0 = complex5.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex12 = complex4.reciprocal();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isNaN();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex((-745.24), (-523.3149523757107));
      Complex complex2 = complex0.divide((-1.0));
      Complex complex3 = complex2.ZERO.multiply((-2208));
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1753.264);
      Complex complex1 = complex0.ONE.reciprocal();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.ZERO.add(complex4);
      Complex complex7 = complex2.exp();
      double double0 = complex2.getImaginary();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      Complex complex9 = complex2.subtract(0.0);
      Complex complex10 = complex0.I.cosh();
      Complex complex11 = complex7.divide(1753.264);
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex12.I.divide(complex7);
      String string0 = complex7.toString();
      boolean boolean0 = complex2.equals(complex7);
      Complex complex14 = Complex.valueOf(0.0, (-3657.04185));
      Complex complex15 = complex14.NaN.add(0.0);
      Complex complex16 = complex9.tanh();
      Complex complex17 = complex16.ONE.sin();
      Complex complex18 = complex5.tan();
      // Undeclared exception!
      complex2.nthRoot(5199);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.log();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex1.negate();
      double double1 = complex3.ONE.abs();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.NaN.divide(0.0);
      double double2 = complex4.NaN.abs();
      Complex complex7 = complex1.INF.multiply(complex2);
      double double3 = complex4.getArgument();
      Complex complex8 = complex0.log();
      double double4 = complex8.NaN.abs();
      boolean boolean0 = complex1.isInfinite();
      Complex complex9 = complex2.pow(0.0);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex2.NaN.multiply(complex10);
      Complex complex12 = complex9.INF.asin();
      Complex complex13 = Complex.valueOf(0.0, Double.NaN);
      String string0 = complex9.toString();
      Complex complex14 = complex8.cosh();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex((-301.41), 0.0);
      Complex complex2 = complex0.pow(2.442600707513088E-36);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex2.divide(complex0);
      Object object0 = complex1.readResolve();
      double double0 = complex0.getArgument();
      Complex complex8 = complex7.pow(Double.NaN);
      int int0 = complex8.I.hashCode();
      Complex complex9 = complex8.add(623.9205224158283);
      Complex complex10 = Complex.valueOf((-20.0), (-301.41));
      Object object1 = new Object();
      boolean boolean0 = complex10.equals(object1);
      Complex complex11 = complex4.divide((-1823.585));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow((-2719.854269));
      Complex complex2 = complex1.NaN.divide(2.0);
      Complex complex3 = complex2.NaN.pow((-2719.854269));
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.ZERO.atan();
      int int0 = complex5.I.hashCode();
      Complex complex6 = Complex.valueOf((-1.1843870433971731E201), (-1.1843870433971731E201));
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex6.ZERO.sqrt();
      Complex complex11 = complex6.I.atan();
      Complex complex12 = complex7.cos();
      double double0 = complex8.getImaginary();
      Object object0 = complex6.ONE.readResolve();
      Complex complex13 = complex9.subtract(Double.POSITIVE_INFINITY);
      Complex complex14 = complex11.INF.add((-1.1843870433971731E201));
      Complex complex15 = complex6.pow(1.0972476870931676E-268);
      Complex complex16 = complex1.negate();
      double double1 = complex11.getImaginary();
      Complex complex17 = complex0.tan();
      ComplexField complexField0 = complex16.getField();
      Complex complex18 = complex13.subtract(complex7);
      Complex complex19 = complex15.exp();
      Complex complex20 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0938612624777085E-7), (-1.0938612624777085E-7));
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-1.0938612624777085E-7));
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-2562.6595749273));
      Complex complex4 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.divide(1.6993968486785889);
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex0.subtract(1.6993968486785889);
      Complex complex8 = complex7.INF.subtract(0.0);
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      boolean boolean0 = complex1.equals(complex0);
      double double0 = complex2.getReal();
      Complex complex4 = complex1.sqrt();
      String string0 = complex0.toString();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex5.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-974.68228224));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.NaN.subtract(0.0);
      Complex complex5 = complex2.INF.add(complex3);
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex0.NaN.pow(complex5);
      double double0 = complex1.getReal();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex1.createComplex((-974.68228224), (-974.68228224));
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex9.NaN.pow(complex2);
      Complex complex11 = complex1.pow((-974.68228224));
      int int0 = complex1.hashCode();
      List<Complex> list0 = complex11.INF.nthRoot(37);
      Complex complex12 = complex9.sin();
      double double1 = complex11.getArgument();
      Complex complex13 = complex0.conjugate();
      try { 
        complex13.INF.nthRoot((-4019));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,019
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(267.6216910046, 267.6216910046);
      Complex complex1 = Complex.valueOf(0.595784068107605);
      double double0 = complex0.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf(378.4742250039271);
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.ONE.add(378.4742250039271);
      Complex complex6 = complex0.ZERO.multiply(complex1);
      Complex complex7 = complex6.ZERO.atan();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex8 = complex2.negate();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex2.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2328.2740417));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1323.816425884037), (-891.979722981667));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex4.INF.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex7 = complex2.multiply((-1323.816425884037));
      Complex complex8 = complex1.log();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.NaN.cos();
      Complex complex7 = complex4.createComplex(914.76791, 914.76791);
      double double0 = complex7.NaN.getArgument();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex5.subtract(complex7);
      Complex complex10 = complex9.ONE.cosh();
      double double1 = complex8.INF.abs();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex11.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.createComplex(740.12835024, 914.76791);
      boolean boolean0 = complex8.isInfinite();
      Complex complex15 = complex14.atan();
      Complex complex16 = complex12.negate();
      String string0 = complex5.toString();
      Complex complex17 = complex4.add((-4597.40607269575));
      Complex complex18 = complex14.sin();
      List<Complex> list0 = complex12.nthRoot(29);
      Complex complex19 = Complex.valueOf(Double.NaN);
      Complex complex20 = complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(264.01224, 6.283185307179586);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.ZERO.sin();
      String string0 = complex3.INF.toString();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex0.createComplex(264.01224, 0.0);
      Complex complex6 = complex5.subtract(6.283185307179586);
      Complex complex7 = complex4.add(complex0);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex7.NaN.getArgument();
      double double1 = complex7.getArgument();
      Complex complex8 = complex6.I.subtract(Double.NaN);
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex9.reciprocal();
      double double2 = complex6.abs();
      Complex complex12 = complex3.cosh();
      Complex complex13 = Complex.valueOf(264.01224, 264.01224);
      Complex complex14 = complex0.tan();
      boolean boolean1 = complex11.isInfinite();
      Complex complex15 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2827.537663842369, 2827.537663842369);
      Complex complex1 = complex0.NaN.add(2038.0292516487);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.add(2827.537663842369);
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.subtract(931.170408455);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex5 = complex2.add(complex3);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex7.ZERO.cosh();
      String string0 = complex3.toString();
      Complex complex9 = Complex.valueOf(0.0);
      String string1 = complex9.I.toString();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex5.exp();
      Complex complex12 = complex11.multiply(complex9);
      Complex complex13 = complex2.log();
      boolean boolean1 = complex5.isInfinite();
      Complex complex14 = complex6.sqrt();
      boolean boolean2 = complex10.isNaN();
      double double0 = complex13.abs();
      Complex complex15 = complex12.subtract((-1468.9));
      Complex complex16 = complex14.add(6.283185307179586);
      Complex complex17 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1309.58217479263, (-666.788562216872));
      Complex complex1 = complex0.asin();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.negate();
      double double0 = complex1.getImaginary();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(445.3762202868424, (-362.994088924799));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex2.I.createComplex(0.0, 445.3762202868424);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex1.exp();
      List<Complex> list0 = complex6.nthRoot(1298);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.NaN.createComplex(1614.064, 1614.064);
      Complex complex4 = complex3.INF.divide(complex0);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex5 = complex1.NaN.cos();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = Complex.valueOf(Double.NaN, 1614.064);
      Complex complex8 = complex6.NaN.createComplex(Double.NaN, Double.NaN);
      Complex complex9 = complex0.ZERO.asin();
      Complex complex10 = complex6.ONE.reciprocal();
      String string1 = complex10.toString();
      Complex complex11 = complex6.ONE.cos();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex2.exp();
      ComplexField complexField1 = complex1.getField();
      Complex complex14 = complex3.cos();
      Complex complex15 = complex9.atan();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex16 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add((-155.67614));
      Complex complex3 = complex0.subtract(586.46596458686);
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.divide(8.725629524586503E-103);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ONE.createComplex((-990.626045342774), (-990.626045342774));
      Complex complex3 = complex0.add((-990.626045342774));
      Complex complex4 = complex2.negate();
      ComplexField complexField0 = complex4.getField();
      double double0 = complex3.getImaginary();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex1.subtract((-827.58004));
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.pow(0.0);
      double double1 = 0.0;
      Complex complex3 = Complex.valueOf(0.0, (-90.5357));
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.I.sqrt1z();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex6 = complex3.NaN.divide(complex0);
      int int0 = complex6.ZERO.hashCode();
      int int1 = complex0.NaN.hashCode();
      Complex complex7 = complex0.I.pow(complex3);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5328.589136934494));
      String string0 = complex0.toString();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.NaN.subtract(complex3);
      Complex complex6 = complex3.ONE.cos();
      Complex complex7 = complex5.ZERO.reciprocal();
      double double1 = complex7.abs();
      double double2 = complex4.getImaginary();
      Complex complex8 = Complex.valueOf((-5328.589136934494));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.I.cos();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = complex1.pow(288.65400253);
      Complex complex9 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(765.31505787156, 2686.04);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.I.add(376.1222874856754);
      Complex complex4 = complex1.I.tanh();
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex0.I.asin();
      int int0 = complex3.I.hashCode();
      Complex complex6 = complex1.ZERO.add(complex0);
      Complex complex7 = complex6.I.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = Complex.valueOf(940.865937304, 940.865937304);
      Complex complex9 = complex6.ZERO.multiply(complex0);
      double double1 = complex3.getImaginary();
      Complex complex10 = Complex.NaN;
      ComplexField complexField1 = complex5.getField();
      Complex complex11 = complex10.ZERO.pow(1709.24835413);
      Complex complex12 = complex11.ONE.sinh();
      Object object0 = complex10.readResolve();
      boolean boolean1 = complex7.equals(object0);
      Complex complex13 = complex1.ZERO.subtract((-615.0681095331));
      Complex complex14 = complex5.acos();
      Complex complex15 = complex2.multiply(Double.NaN);
      Complex complex16 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.pow(2797.6114);
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex2.NaN.multiply(2797.6114);
      Complex complex6 = complex1.INF.sin();
      Complex complex7 = complex2.ZERO.reciprocal();
      double double0 = complex0.getImaginary();
      double double1 = complex1.getReal();
      Complex complex8 = complex7.multiply(37);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.062819358915, 0.0);
      Complex complex1 = Complex.valueOf(3.062819358915, 3.062819358915);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2988.023939111584, 2988.023939111584);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.sinh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.059309482574463);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.ONE.add(0.0);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex3.pow((-1.4591838284752642E87));
      Complex complex8 = complex0.INF.tan();
      Complex complex9 = complex2.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex0.exp();
      double double0 = complex6.getArgument();
      String string0 = complex0.toString();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex5.subtract(complex8);
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex7.cosh();
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1252.793817326766));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-602.0), (-602.0));
      Complex complex1 = complex0.add((-602.0));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2382.323170163706), (-9.45487863616303E-8));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex3.divide((-2382.323170163706));
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex5.exp();
      double double0 = complex2.getImaginary();
      Complex complex9 = complex7.ONE.asin();
      Complex complex10 = complex5.sqrt();
      boolean boolean0 = complex7.isNaN();
      Complex complex11 = complex1.subtract(complex8);
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.ONE.createComplex(1.336479663848877, (-1213.9657984449789));
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex4.tan();
      double double0 = complex7.getImaginary();
      Complex complex8 = complex6.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex0.multiply(845.6);
      double double0 = complex2.getReal();
      Complex complex3 = complex0.add((-3056.57));
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-3886.36168105918), (-3886.36168105918));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex2.ONE.add(complex1);
      Complex complex5 = complex4.I.subtract(complex1);
      double double0 = complex4.getArgument();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex6 = complex1.cosh();
      List<Complex> list0 = complex3.nthRoot(37);
      Complex complex7 = complex3.multiply(1);
      Complex complex8 = complex7.I.multiply(1897);
      double double1 = complex7.getArgument();
      Complex complex9 = complex6.tan();
      double double2 = complex9.I.getArgument();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex10.I.multiply((-2.356065818603318));
      Complex complex12 = complex10.INF.divide(0.0);
      boolean boolean1 = complex1.isInfinite();
      Complex complex13 = complex6.log();
      Complex complex14 = complex5.tanh();
      Complex complex15 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-5.843));
      Complex complex1 = new Complex(0.0, (-5.843));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.ZERO.divide(complex0);
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex2.multiply((-2728));
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.NaN.multiply(complex1);
      Complex complex9 = complex7.NaN.reciprocal();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex5.multiply(complex9);
      double double0 = complex6.getImaginary();
      Complex complex13 = complex10.add(complex7);
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex13.add(complex7);
      Complex complex16 = complex10.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(2548.1764210083);
      double double0 = complex0.INF.abs();
      Complex complex2 = complex1.ZERO.atan();
      ComplexField complexField0 = complex2.getField();
      String string0 = complex0.toString();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.ZERO.multiply(268);
      Complex complex5 = complex1.sqrt();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex3.INF.add(complex0);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex11.ZERO.multiply(585);
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-2243.529868396653));
      Complex complex1 = new Complex(1679.8661752);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex4.sqrt();
      double double0 = complex1.abs();
      int int0 = complex1.hashCode();
      Complex complex7 = complex1.pow(0.0);
      double double1 = complex7.getArgument();
      ComplexField complexField1 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ZERO.tanh();
      int int0 = complex0.ONE.hashCode();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0571674860370546E-9));
      Complex complex1 = Complex.valueOf(2.1948784599535102E-72);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.add((-1.0571674860370546E-9));
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex5.NaN.multiply((-173));
      Complex complex7 = complex1.asin();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1501));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      List<Complex> list0 = complex0.ONE.nthRoot(762);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.ONE.pow(1.5707963267948966);
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex3.INF.sqrt();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex0.add((double) 762);
      double double1 = complex7.ONE.getArgument();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex4.add(complex0);
      Complex complex10 = complex0.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-398.54164211));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.pow((-398.54164211));
      List<Complex> list0 = complex1.ZERO.nthRoot(1150);
      Complex complex3 = complex0.I.add(0.0);
      String string0 = complex3.ONE.toString();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.subtract(1.42436589329759E250);
      double double0 = complex2.ONE.abs();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.INF.multiply(complex3);
      Object object0 = complex3.readResolve();
      double double1 = complex1.ZERO.abs();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex5.INF.divide(complex1);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.ZERO.multiply(complex7);
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex2.subtract(complex8);
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex3.atan();
      ComplexField complexField1 = complex8.getField();
      Complex complex14 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.INF.tanh();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = Complex.valueOf(Double.NaN);
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.NaN.add((-1427.1));
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.ONE.multiply(complex4);
      Complex complex8 = complex6.ONE.pow(Double.NaN);
      Complex complex9 = complex8.INF.pow(Double.NaN);
      Complex complex10 = complex6.atan();
      Object object0 = complex10.readResolve();
      Complex complex11 = complex0.add(complex5);
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-189.598474306), (-189.598474306));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.subtract((-189.598474306));
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.cos();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.valueOf((-3695.5385012328134), (-593.7170504078));
      Complex complex3 = ((Complex) object0).ONE.pow(complex0);
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.createComplex((-1.8409546441412518E-8), 0.0);
      Complex complex4 = complex1.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.I.conjugate();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex2.multiply(complex6);
      Complex complex8 = complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5557018518447876);
      String string0 = complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf((-304.475454478));
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex1.createComplex(0.0, (-304.475454478));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.I.createComplex(3057.735410724, 3057.735410724);
      Complex complex4 = complex3.I.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.divide(1.5637579898345352E-289);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-910.6478923189134), (-910.6478923189134));
      Complex complex1 = complex0.divide((-910.6478923189134));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf((-1579.0), 1799.621983261);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.subtract(complex0);
      double double0 = complex0.abs();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex0.multiply(745);
      List<Complex> list0 = complex8.ZERO.nthRoot(37);
      int int0 = 0;
      try { 
        complex4.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.NaN.nthRoot(335);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.multiply(335);
      Complex complex4 = complex1.pow(complex2);
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.NaN.multiply(1.0);
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex5.I.reciprocal();
      Complex complex8 = complex0.NaN.multiply(complex2);
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex3.atan();
      Complex complex11 = complex3.I.multiply(0);
      int int0 = complex11.I.hashCode();
      Complex complex12 = Complex.valueOf(1.0, (-2922.5681399642926));
      Object object0 = complex9.ZERO.readResolve();
      Complex complex13 = complex3.negate();
      int int1 = complex0.hashCode();
      Complex complex14 = complex9.conjugate();
      Complex complex15 = complex10.negate();
      Complex complex16 = complex3.negate();
      Complex complex17 = complex6.I.add((double) 0);
      Complex complex18 = complex4.exp();
      Object object1 = complex2.readResolve();
      Complex complex19 = complex6.negate();
      Complex complex20 = complex5.pow(complex13);
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.3366470162689076E-8);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.add(4.8354824064383506E-8);
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex3.INF.subtract(complex0);
      Complex complex6 = Complex.valueOf(545.2, 4.8354824064383506E-8);
      boolean boolean0 = complex3.equals(complex6);
      Complex complex7 = complex2.log();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex6.NaN.tanh();
      Complex complex10 = complex8.ONE.subtract((-3202.37737));
      Complex complex11 = complex10.ONE.divide((-1.1089952719756529E-7));
      Complex complex12 = complex1.pow(complex6);
      Complex complex13 = complex6.acos();
      Complex complex14 = complex5.multiply((-48.1629462647));
      Complex complex15 = complex14.ONE.createComplex(20.0, 20.0);
      Complex complex16 = complex1.multiply((-401));
      Complex complex17 = complex2.multiply(5.3366470162689076E-8);
      String string0 = complex15.toString();
      Complex complex18 = complex0.reciprocal();
      Complex complex19 = complex18.I.conjugate();
      Complex complex20 = complex18.sqrt1z();
      Complex complex21 = complex6.add(complex17);
      Complex complex22 = complex10.reciprocal();
      Complex complex23 = complex9.cosh();
      Complex complex24 = complex2.negate();
      int int0 = complex19.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(1086.29);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.INF.pow(complex1);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.negate();
      boolean boolean0 = complex5.equals("");
      Complex complex6 = complex0.I.createComplex((-490.7067), Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.sqrt1z();
      try { 
        complex4.nthRoot((-3202));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,202
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4221.117981578642);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.subtract(695.94);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf(4221.117981578642);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex5.pow(4221.117981578642);
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.add((-681.646));
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.sqrt1z();
      Object object1 = complex1.I.readResolve();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex3.ONE.pow(0.0);
      List<Complex> list0 = complex1.nthRoot(627);
      Complex complex6 = Complex.valueOf((-681.646), 0.0);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex5.NaN.sqrt();
      Complex complex9 = complex5.subtract(605.0);
      Complex complex10 = complex3.NaN.add(228.816236011);
      double double1 = complex2.getReal();
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex7.pow(complex2);
      int int0 = complex12.NaN.hashCode();
      Object object2 = complex7.ONE.readResolve();
      Complex complex13 = complex0.cosh();
      Complex complex14 = Complex.valueOf(887.4);
      Complex complex15 = complex7.reciprocal();
      Complex complex16 = complex5.sin();
      Complex complex17 = Complex.valueOf(987.6504);
      Complex complex18 = complex1.multiply((double) 627);
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.valueOf((-1.689060694498032E-8), (-1.689060694498032E-8));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ONE.multiply(0.0);
      Complex complex4 = complex3.I.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = Complex.valueOf((-1940.045866485), 0.0);
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex6.ONE.subtract(0.0);
      Complex complex9 = complex5.subtract((-2749.567214));
      Complex complex10 = complex9.ONE.exp();
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex6.conjugate();
      Complex complex13 = complex4.pow(complex6);
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex4.multiply(complex14);
      Complex complex16 = complex3.pow(complex4);
      Complex complex17 = complex4.divide(complex3);
      Complex complex18 = Complex.valueOf((-5.772862039728412E-9));
      Complex complex19 = complex7.add(complex18);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(977.079819);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.ONE.subtract(977.079819);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.multiply(647);
      Complex complex6 = complex3.log();
      Complex complex7 = complex5.multiply(0);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex5.ONE.cosh();
      Complex complex10 = complex3.sinh();
      Object object1 = complex5.readResolve();
      String string0 = complex10.ZERO.toString();
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex8.negate();
      int int0 = complex3.hashCode();
      Complex complex13 = complex2.INF.pow(977.079819);
      Complex complex14 = complex4.ZERO.pow(complex8);
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      Complex complex16 = complex4.negate();
      Complex complex17 = complex3.multiply(complex10);
      Complex complex18 = complex16.exp();
      double double0 = complex8.abs();
      Complex complex19 = complex0.multiply((-1762.0));
      ComplexField complexField0 = complex16.getField();
      Complex complex20 = complex10.exp();
      Object object2 = complex16.readResolve();
      String string1 = complex17.toString();
      boolean boolean0 = complex7.isInfinite();
      Complex complex21 = Complex.valueOf(0.0, (-1229.822));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.INF.createComplex(0.0, (-1280.0));
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex0.ONE.pow(complex3);
      Complex complex5 = complex4.INF.sqrt1z();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex3.atan();
      double double0 = complex1.getImaginary();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex3.INF.tan();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex4.ONE.sinh();
      Complex complex11 = complex9.I.subtract(54.7);
      Complex complex12 = complex9.divide(complex6);
      Complex complex13 = complex9.ONE.add(complex0);
      Complex complex14 = complex1.divide(Double.NaN);
      double double1 = complex12.getArgument();
      boolean boolean1 = complex2.equals("bT'+y9B");
      Complex complex15 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex2.ZERO.cosh();
      Complex complex6 = complex1.subtract(0.0);
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.INF.divide(0.0);
      double double0 = complex2.getReal();
      Complex complex9 = complex2.subtract(0.0);
      Complex complex10 = complex4.cos();
      Complex complex11 = complex10.I.log();
      Complex complex12 = complex6.ZERO.multiply(complex10);
      Complex complex13 = complex7.add(complex11);
      Complex complex14 = complex12.INF.reciprocal();
      Complex complex15 = complex4.negate();
      Complex complex16 = complex2.asin();
      Complex complex17 = complex5.sqrt1z();
      Complex complex18 = complex16.subtract(complex6);
      double double1 = complex18.INF.abs();
      Complex complex19 = complex7.subtract(complex4);
      Complex complex20 = complex12.pow(0.0);
      Complex complex21 = complex14.log();
      Object object0 = new Object();
      boolean boolean0 = complex14.equals(object0);
      Complex complex22 = complex15.tanh();
  }
}
