/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:11:03 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-688.77569467191));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(1.1123170852661133);
      Complex complex3 = complex0.pow(complex1);
      int int0 = 395415352;
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex2.ZERO.multiply(395415352);
      ComplexField complexField0 = complex5.ONE.getField();
      int int1 = complex3.ONE.hashCode();
      Complex complex6 = complex1.INF.sin();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex2.INF.subtract(complex3);
      // Undeclared exception!
      complex3.ZERO.nthRoot(395415352);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(200.4);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.NaN.pow(200.4);
      Complex complex6 = complex5.ZERO.pow(1.6247460842132568);
      String string0 = complex0.toString();
      double double0 = complex0.getImaginary();
      double double1 = complex6.abs();
      Complex complex7 = Complex.valueOf(Double.NaN);
      double double2 = complex6.ONE.abs();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex2.multiply(1);
      double double3 = complex9.ZERO.getArgument();
      Complex complex10 = complex1.subtract(Double.NaN);
      String string1 = complex10.toString();
      Complex complex11 = complex2.createComplex(1526.80717, 0.0);
      Complex complex12 = complex11.I.add(1889.8014358);
      Complex complex13 = complex12.I.sqrt();
      Complex complex14 = complex12.ONE.cosh();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex15 = complex9.atan();
      Complex complex16 = complex3.asin();
      String string2 = complex11.toString();
      Complex complex17 = complex6.subtract(Double.NaN);
      Complex complex18 = complex9.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(5165.4134257);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(84.905, (-310.80902));
      Complex complex3 = complex0.pow(complex1);
      ComplexField complexField0 = complex3.getField();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex2.multiply(84.905);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex5.divide(2112.644079);
      String string0 = complex5.toString();
      double double1 = complex4.getArgument();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(992.43306410777, 0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.valueOf((-305.0));
      Complex complex3 = complex1.INF.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = Complex.valueOf((-493.12753));
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex complex6 = Complex.valueOf(0.0, (-2597.756010544));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.valueOf((-2214.321847242659));
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1486.4, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.INF.subtract(0.0);
      Complex complex5 = complex3.INF.pow(1486.4);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex2.INF.sin();
      ComplexField complexField0 = complex0.I.getField();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      boolean boolean2 = complex2.isInfinite();
      boolean boolean3 = complex2.isInfinite();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.ONE.multiply(0.0);
      Complex complex11 = complex9.ONE.sqrt();
      Complex complex12 = complex7.conjugate();
      Complex complex13 = complex9.sqrt();
      boolean boolean4 = complex4.isInfinite();
      double double0 = complex7.getReal();
      Complex complex14 = complex2.atan();
      Complex complex15 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add(1.0585156316103144E-39);
      Object object0 = complex0.ONE.readResolve();
      Object object1 = complex1.NaN.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.ZERO.multiply(complex1);
      Complex complex8 = complex5.cosh();
      double double0 = complex0.abs();
      double double1 = complex8.abs();
      String string0 = complex2.toString();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex2.ZERO.multiply(complex3);
      Complex complex11 = complex9.ZERO.acos();
      Complex complex12 = complex2.ONE.asin();
      Complex complex13 = complex0.multiply(1032);
      Complex complex14 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1117.83));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.reciprocal();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.createComplex((-1117.83), 1130.3);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex7.ONE.divide(complex3);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex2.multiply(0.19622188806533813);
      Complex complex12 = complex9.tanh();
      Complex complex13 = complex3.multiply(907);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1736.31500773839, 1736.31500773839);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = new Complex(5.622626080395226E67);
      Complex complex8 = complex6.I.multiply(complex7);
      Complex complex9 = complex6.INF.createComplex(5.622626080395226E67, 0.0);
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex1.multiply(complex10);
      Complex complex12 = complex2.subtract(1736.31500773839);
      Complex complex13 = complex11.INF.sin();
      Complex complex14 = complex11.INF.pow(complex6);
      Complex complex15 = complex2.multiply(465);
      Complex complex16 = complex2.exp();
      double double0 = complex11.getReal();
      Complex complex17 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = Complex.valueOf(20.0, (-2519.490373989221));
      Complex complex4 = complex3.I.subtract(6564.9234119);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex0.I.cosh();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = Complex.valueOf(20.0, 0.0);
      Complex complex10 = complex1.ONE.sin();
      Complex complex11 = complex10.subtract(3325.0);
      Complex complex12 = complex10.INF.asin();
      Complex complex13 = complex0.ONE.sqrt();
      Complex complex14 = complex13.INF.atan();
      Complex complex15 = complex0.NaN.pow(complex9);
      String string0 = complex14.NaN.toString();
      Complex complex16 = complex1.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex17 = complex0.atan();
      Complex complex18 = complex17.NaN.subtract(20.0);
      Complex complex19 = complex1.divide(0.0);
      boolean boolean0 = complex14.isInfinite();
      Complex complex20 = complex8.conjugate();
      try { 
        complex4.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4435.5218587567415);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = Complex.valueOf(3.495384792953975E-252, 3.495384792953975E-252);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.valueOf(4435.5218587567415, 4435.5218587567415);
      Complex complex7 = complex6.ZERO.add((-20.0));
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.subtract((-258.832));
      Complex complex10 = complex6.ONE.cosh();
      Complex complex11 = complex10.NaN.subtract((-20.0));
      Complex complex12 = complex10.pow(complex6);
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex7.sqrt();
      Complex complex15 = complex14.sin();
      Complex complex16 = Complex.valueOf((-258.832));
      Complex complex17 = complex8.subtract(0.0);
      Complex complex18 = complex16.multiply(complex6);
      double double0 = complex16.getImaginary();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex5.INF.log();
      Complex complex9 = complex4.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.NaN.createComplex(20.0, 0.0);
      Complex complex11 = complex5.pow((-1618.19));
      Complex complex12 = complex3.subtract(2.2590636576955473E265);
      Complex complex13 = complex12.INF.multiply(20.0);
      String string0 = complex12.toString();
      Complex complex14 = complex8.acos();
      boolean boolean0 = complex1.isNaN();
      Complex complex15 = complex6.acos();
      Complex complex16 = complex3.atan();
      Complex complex17 = complex16.reciprocal();
      Complex complex18 = complex14.multiply(complex0);
      Complex complex19 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1955.0142489581128));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex1.ZERO.pow(complex0);
      boolean boolean0 = complex0.equals(")");
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex6.multiply(complex3);
      Complex complex12 = complex7.negate();
      double double0 = complex9.NaN.abs();
      Complex complex13 = complex8.tan();
      Complex complex14 = complex10.cos();
      Complex complex15 = Complex.valueOf((-1955.0142489581128));
      Complex complex16 = Complex.valueOf(0.0, (-261.83));
      try { 
        complex11.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-416.70914753645735);
      Complex complex0 = new Complex((-416.70914753645735));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex1.ONE.multiply((-3526));
      try { 
        complex2.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(200.4);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.NaN.pow(200.4);
      Complex complex6 = complex5.ZERO.pow(1.6247460842132568);
      String string0 = complex0.toString();
      double double0 = complex0.getImaginary();
      double double1 = complex6.abs();
      Complex complex7 = Complex.valueOf(Double.NaN);
      double double2 = complex6.ONE.abs();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex2.multiply(1);
      double double3 = complex9.ZERO.getArgument();
      Complex complex10 = complex1.subtract(Double.NaN);
      String string1 = complex10.toString();
      Complex complex11 = complex2.createComplex(1526.80717, 0.0);
      Complex complex12 = complex11.I.add(1889.8014358);
      Complex complex13 = complex12.ONE.cosh();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex14 = complex9.atan();
      Complex complex15 = complex3.asin();
      String string2 = complex11.toString();
      Complex complex16 = complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.subtract(3032.47);
      Complex complex3 = complex1.createComplex(1673.4020913, 1673.4020913);
      double double0 = complex3.INF.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.ZERO.negate();
      boolean boolean0 = complex0.equals(complex7);
      Complex complex9 = complex5.createComplex(1673.4020913, 102.81775907803406);
      Complex complex10 = complex9.sin();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex0.INF.sqrt();
      Complex complex13 = complex10.asin();
      Complex complex14 = complex13.I.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex15 = complex5.add(complex9);
      boolean boolean1 = complex13.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex(5275.18731018, 5275.18731018);
      Complex complex2 = complex1.INF.subtract((-912.8903052518));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex0.add(complex3);
      Complex complex9 = Complex.valueOf((-912.8903052518), 6363.59405277);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex6.ZERO.pow(complex2);
      Complex complex12 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      String string0 = complex3.ONE.toString();
      Complex complex13 = complex3.NaN.sqrt();
      Object object0 = complex8.readResolve();
      List<Complex> list0 = complex8.nthRoot(37);
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex6.subtract((double) 37);
      Complex complex16 = complex15.ZERO.exp();
      Complex complex17 = complex13.tanh();
      Complex complex18 = complex15.acos();
      boolean boolean0 = complex14.equals(object0);
      Complex complex19 = complex3.multiply((-1));
      Complex complex20 = complex15.sin();
      Complex complex21 = complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ZERO.divide(0.0);
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex4.ONE.divide(complex0);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.NaN.sqrt1z();
      int int0 = complex4.hashCode();
      double double1 = complex3.getArgument();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex4.exp();
      Complex complex10 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = complex8.multiply(2264);
      Complex complex12 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.conjugate();
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex2.ONE.cosh();
      Complex complex8 = complex7.I.createComplex(0.0, 0.6144464015960693);
      Complex complex9 = complex4.add(complex0);
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex2.subtract(complex1);
      Complex complex12 = complex7.exp();
      Complex complex13 = complex11.multiply(complex2);
      Complex complex14 = complex2.subtract((-1.0));
      Complex complex15 = complex14.divide((-2935.098240516268));
      Complex complex16 = Complex.valueOf((-2028.0153109959), 3775.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(66.46009041, 66.46009041);
      Complex complex1 = new Complex(3.273212962622764E-8, (-1952.0));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1933.2121941144046));
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.NaN.sqrt1z();
      String string0 = complex0.toString();
      Complex complex4 = Complex.valueOf((-7.184550924856607E-8), 0.0);
      boolean boolean0 = complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.45870959758758545, 0.45870959758758545);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.divide(0.45870959758758545);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.ZERO.divide(0.0);
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex4.acos();
      ComplexField complexField0 = complex7.ONE.getField();
      ComplexField complexField1 = complex3.getField();
      Complex complex8 = complex2.ZERO.divide(complex0);
      Complex complex9 = complex0.multiply(0.45870959758758545);
      Complex complex10 = complex9.pow(complex4);
      Complex complex11 = complex7.multiply(complex2);
      double double0 = complex1.getArgument();
      Complex complex12 = Complex.valueOf((-1109.9432433), 0.7853981633974483);
      Complex complex13 = complex4.subtract(complex0);
      Complex complex14 = complex12.NaN.conjugate();
      Complex complex15 = complex13.INF.subtract(complex10);
      Complex complex16 = complex13.NaN.subtract(46.007);
      Complex complex17 = complex12.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.I.sqrt1z();
      double double0 = complex1.ZERO.abs();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex3.I.exp();
      double double1 = complex1.getArgument();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.ZERO.add((double) 1);
      Complex complex7 = complex6.log();
      Complex complex8 = complex1.acos();
      double double2 = complex0.getImaginary();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = Complex.valueOf((-509.8));
      double double3 = complex9.I.abs();
      Complex complex11 = complex9.log();
      Complex complex12 = complex11.add(98.0);
      Complex complex13 = complex8.sinh();
      Complex complex14 = Complex.valueOf(1432.4656501, (double) 1);
      Complex complex15 = complex14.negate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.multiply(20.0);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.valueOf(0.0);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-797.33412), (-626.708));
      Complex complex1 = complex0.ZERO.conjugate();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.tanh();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.ZERO.cos();
      double double0 = complex2.getReal();
      Complex complex7 = new Complex(1869.8, (-1.5544655377217875E203));
      boolean boolean0 = complex0.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1119.4768954114745, 1119.4768954114745);
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex1.nthRoot(1068);
      Complex complex2 = Complex.valueOf((-1905.2045385618));
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3654.460157891861), (-3654.460157891861));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.INF.divide((-3654.460157891861));
      Complex complex3 = complex1.subtract((-3654.460157891861));
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex4.INF.cos();
      Complex complex10 = complex0.I.divide(complex4);
      ComplexField complexField0 = complex4.I.getField();
      ComplexField complexField1 = complex1.ONE.getField();
      double double0 = complex4.getReal();
      double double1 = complex1.getImaginary();
      double double2 = complex2.getImaginary();
      Complex complex11 = complex1.add(0.0);
      double double3 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply(60);
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.pow(2395.143323);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.INF.add(complex2);
      Complex complex4 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.getReal();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.exp();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(0.9808930158615112);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.divide((-2041.297793374447));
      Complex complex4 = complex3.subtract((-2041.297793374447));
      Complex complex5 = complex2.tan();
      Object object0 = complex0.ONE.readResolve();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex5.INF.tanh();
      Complex complex8 = complex5.I.createComplex(Double.NaN, (-419.6997));
      Complex complex9 = complex7.asin();
      Complex complex10 = complex5.ZERO.tanh();
      Complex complex11 = complex10.NaN.sqrt1z();
      double double0 = complex11.I.getArgument();
      Complex complex12 = complex5.multiply((-1119));
      boolean boolean0 = complex1.isInfinite();
      ComplexField complexField0 = complex5.getField();
      boolean boolean1 = complex5.isInfinite();
      Complex complex13 = complex0.negate();
      double double1 = complex3.getReal();
      Complex complex14 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(8.550658957115427E118, 8.550658957115427E118);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(8.550658957115427E118);
      Complex complex4 = complex1.add(complex3);
      String string0 = complex1.ZERO.toString();
      Complex complex5 = complex3.divide(241.6);
      Complex complex6 = complex4.ZERO.sqrt();
      Complex complex7 = Complex.valueOf(1884.7, (-1.0));
      Complex complex8 = complex1.NaN.add(1.8405243253979117E-8);
      Complex complex9 = complex3.divide(complex0);
      Complex complex10 = Complex.valueOf(8.550658957115427E118, 0.0);
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex4.multiply((-3464.34600286516));
      Complex complex13 = complex0.I.pow(1.8405243253979117E-8);
      Complex complex14 = complex11.acos();
      Complex complex15 = complex14.I.multiply(1.8405243253979117E-8);
      Complex complex16 = complex9.conjugate();
      Complex complex17 = complex16.multiply((-3061.0));
      Complex complex18 = complex9.subtract((-3464.34600286516));
      Complex complex19 = complex6.add(complex10);
      ComplexField complexField0 = complex13.getField();
      Complex complex20 = complex1.divide(8.550658957115427E118);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 3.3730714236579374E186);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.NaN.add((-20.0));
      Complex complex4 = complex2.I.pow(complex0);
      Complex complex5 = complex1.ONE.tanh();
      Complex complex6 = Complex.valueOf(0.0, (-1.0));
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = Complex.valueOf(0.0, (-1.0));
      Complex complex8 = complex2.INF.sin();
      Complex complex9 = complex6.subtract(3.3730714236579374E186);
      Complex complex10 = complex9.I.add((-1737.39980292));
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex0.sin();
      double double1 = complex0.getReal();
      Complex complex5 = Complex.valueOf(1.0, 1.0);
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex4.NaN.atan();
      int int0 = complex6.hashCode();
      int int1 = complex6.hashCode();
      Object object0 = complex4.readResolve();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex0.subtract((-2071.385578389588));
      Complex complex10 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-736.46133633));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.divide((-3244.76234943));
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex3.exp();
      double double0 = complex0.getReal();
      Complex complex5 = new Complex((-736.46133633), (-736.46133633));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.INF.subtract(complex6);
      boolean boolean0 = complex0.equals(complex5);
      String string0 = complex5.toString();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex8.I.sqrt();
      Complex complex10 = complex8.ZERO.add(complex7);
      Complex complex11 = complex7.reciprocal();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.divide(Double.NaN);
      double double0 = complex2.abs();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      String string0 = complex0.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide((-1734.0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-80.61905373263467));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.pow((-80.61905373263467));
      Complex complex4 = complex2.ONE.add(complex1);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.divide(6.283185307179586);
      Complex complex7 = complex6.NaN.divide(complex4);
      Complex complex8 = complex6.ONE.multiply(6.283185307179586);
      Object object0 = complex2.ZERO.readResolve();
      String string0 = complex6.toString();
      int int1 = complex5.hashCode();
      Complex complex9 = complex1.subtract((-1490.62));
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = complex6.add(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.divide((-4188.2496424));
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.divide((-4188.2496424));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex((-2169.113326364061), (-2169.113326364061));
      Complex complex2 = complex0.INF.log();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4770.79490063));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1061.54131315259));
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.valueOf(6.283185307179586);
      Complex complex3 = Complex.valueOf(6.283185307179586);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex4 = complex0.divide(1.0);
      Complex complex5 = complex0.multiply(1.0);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1.9932945470297703E120, 1.2396681308746338);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1794.9103, 1794.9103);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.createComplex(1794.9103, (-1591.6482));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.multiply(1.0);
      Complex complex5 = complex4.ZERO.conjugate();
      boolean boolean1 = complex3.isInfinite();
      int int0 = complex3.ZERO.hashCode();
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex3.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.ONE.acos();
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex1.NaN.tan();
      Complex complex6 = complex5.ZERO.multiply((-481.5035029));
      Complex complex7 = complex1.NaN.cos();
      Complex complex8 = complex7.I.exp();
      int int0 = complex0.hashCode();
      Complex complex9 = complex0.NaN.createComplex(0.0, 5990.747011723846);
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex5.I.pow((-481.5035029));
      Complex complex12 = complex2.multiply(0.0);
      Object object0 = complex0.readResolve();
      Complex complex13 = complex1.multiply(0.0);
      Complex complex14 = complex8.divide(0.0);
      double double0 = complex0.getArgument();
      Complex complex15 = complex10.sin();
      Object object1 = complex5.readResolve();
      Complex complex16 = complex12.createComplex(0.0, 0.7853981633974483);
      boolean boolean0 = complex11.equals(complex5);
      ComplexField complexField0 = complex6.getField();
      Complex complex17 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-2734.6934));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(39.07, 6.283185307179586);
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ZERO.subtract(complex2);
      Complex complex5 = Complex.valueOf(0.0, (-1396.75));
      Complex complex6 = complex0.log();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex2.I.subtract(complex1);
      Object object1 = complex3.INF.readResolve();
      Complex complex5 = complex3.multiply(3912);
      Complex complex6 = complex3.divide(Double.NaN);
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-236.0443097028619));
      Complex complex1 = new Complex((-236.0443097028619), (-236.0443097028619));
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.I.subtract(complex1);
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.pow((-236.0443097028619));
      Complex complex4 = complex3.createComplex(6.456806922371733E-8, (-236.0443097028619));
      Complex complex5 = complex3.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.pow((-3279.49464694));
      Complex complex2 = complex1.INF.pow((-3279.49464694));
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1.75879225876483E-25);
      Complex complex1 = complex0.tan();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(663.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex0.createComplex(0.0, (-3208.4531248795));
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf(1895.0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex2.ONE.multiply(0.0);
      Complex complex6 = complex3.multiply(1);
      Complex complex7 = complex2.multiply(complex3);
      Complex complex8 = complex6.INF.reciprocal();
      Complex complex9 = complex3.subtract(complex2);
      Complex complex10 = complex2.atan();
      Complex complex11 = complex6.multiply(0.0);
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(989.19);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.ZERO.add(989.19);
      Complex complex4 = complex3.ONE.createComplex(989.19, (-645.88916));
      Complex complex5 = complex0.pow(989.19);
      Complex complex6 = complex3.ZERO.sqrt1z();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = new Complex(989.19);
      Complex complex9 = complex3.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 1387.1595354);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-1674.2709545840373));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      List<Complex> list0 = complex0.nthRoot(592);
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex4.multiply(0.0);
      double double0 = complex4.getImaginary();
      Complex complex9 = complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.INF.add(complex1);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex1.I.divide(complex0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex1.reciprocal();
      try { 
        complex6.NaN.nthRoot((-109));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -109
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.negate();
      String string0 = complex1.toString();
      List<Complex> list0 = complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf((-699.2390197558221));
      Complex complex5 = complex0.ONE.add((-1956.6720833997178));
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex2.ZERO.subtract(complex1);
      boolean boolean1 = complex1.equals(complex0);
      Complex complex8 = complex7.I.pow((-699.2390197558221));
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex2.exp();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.067617654800415);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.log();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.multiply(1647.0);
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf((-1.0), (-1.0));
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.NaN.add((double) 2875);
      Complex complex4 = complex1.I.multiply(2875);
      Complex complex5 = complex1.ZERO.subtract(complex0);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex0.add(complex1);
      int int0 = complex6.hashCode();
      Complex complex8 = complex3.asin();
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-3519));
      Complex complex2 = complex0.ZERO.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1963.87655));
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.ZERO.exp();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex4.add((-1963.87655));
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.createComplex(1975.8059703, 1975.8059703);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double double0 = 1558.449086935;
      Complex complex0 = new Complex(1558.449086935);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.cosh();
      try { 
        complex0.I.nthRoot((-332));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -332
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0655345916748047);
      Complex complex1 = complex0.INF.acos();
      double double0 = complex0.getReal();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.I.pow(4.091704288360009E306);
      Complex complex6 = complex5.I.divide(complex0);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex2.exp();
      Complex complex9 = complex3.NaN.log();
      Complex complex10 = complex8.ZERO.cos();
      Complex complex11 = complex2.INF.sqrt1z();
      Complex complex12 = complex7.acos();
      Complex complex13 = complex3.atan();
      int int0 = complex3.hashCode();
      Complex complex14 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex1.ZERO.sqrt1z();
      Complex complex5 = complex3.I.subtract(1000.2976573392);
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex6.createComplex(1000.2976573392, (-2802.1412133482827));
      List<Complex> list0 = complex0.nthRoot(2118);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.6527209281921387);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(94.3301765139, 94.3301765139);
      Complex complex7 = Complex.valueOf(94.3301765139, Double.NaN);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.NaN.atan();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex8.negate();
      Complex complex11 = Complex.valueOf(1467.766, 1467.766);
      Complex complex12 = complex11.ZERO.add(6.283185307179586);
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      int int0 = complex13.INF.hashCode();
      Complex complex14 = complex13.INF.sqrt1z();
      Complex complex15 = complex1.acos();
      Complex complex16 = complex15.ZERO.pow(complex3);
      Complex complex17 = complex15.multiply(complex13);
      Complex complex18 = complex1.acos();
      Complex complex19 = complex8.pow(complex0);
      ComplexField complexField1 = complex2.getField();
      Complex complex20 = complex1.exp();
      Complex complex21 = complex3.pow(complex18);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.atan();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = new Complex(0.0, (-7.34071933723896E-8));
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex4.ONE.asin();
      double double0 = complex5.getArgument();
      int int0 = complex7.ZERO.hashCode();
      double double1 = complex6.getImaginary();
      Complex complex9 = complex7.add(Double.NaN);
      Complex complex10 = complex1.multiply(37);
      Complex complex11 = complex0.sin();
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-697.2773443035), (-697.2773443035));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.subtract((-1483.39592284));
      Complex complex3 = complex2.reciprocal();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex1.add((-636.3));
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex2.nthRoot(2123);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.subtract(complex1);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.ZERO.negate();
      Complex complex12 = complex6.createComplex(0.0, (-697.2773443035));
      String string0 = complex12.toString();
      Complex complex13 = complex0.tan();
      Object object1 = complex13.readResolve();
      Complex complex14 = complex6.tanh();
      Complex complex15 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.NaN.atan();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.valueOf(0.0, 4223.88341546);
      Complex complex8 = complex2.sqrt();
      double double0 = complex1.abs();
      Complex complex9 = complex3.pow(complex1);
      Complex complex10 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex8.INF.createComplex((-1480.0), (-7.34071933723896E-8));
      Complex complex10 = complex9.ZERO.reciprocal();
      Complex complex11 = complex1.multiply(complex0);
      String string0 = complex4.toString();
      Complex complex12 = complex11.divide(complex0);
      Complex complex13 = complex4.NaN.atan();
      Complex complex14 = new Complex(3793.1145779105);
      Complex complex15 = complex4.pow(complex14);
      Complex complex16 = complex3.reciprocal();
      Complex complex17 = complex8.cos();
      Complex complex18 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.multiply(1256);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.I.multiply(513);
      Complex complex5 = complex0.cosh();
      String string0 = complex1.toString();
      int int0 = complex4.hashCode();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-1352.0705701), 0.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex2.ONE.multiply((-4549.448366164));
      Complex complex5 = complex4.I.sqrt();
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex0.ONE.acos();
      Complex complex7 = complex6.divide(complex5);
      int int0 = complex2.INF.hashCode();
      Complex complex8 = complex0.NaN.conjugate();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex1.NaN.multiply(2.2856938448387544E-49);
      Complex complex11 = complex2.pow(1204.05659603333);
      Complex complex12 = complex11.ZERO.multiply(complex8);
      Complex complex13 = complex11.INF.sqrt1z();
      int int1 = complex1.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex14 = complex10.reciprocal();
      Complex complex15 = complex12.divide(complex9);
      Complex complex16 = complex3.tanh();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1018.75561979), (-1018.75561979));
      Complex complex1 = complex0.divide((-48.495101));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-2063.0), (-2063.0));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.multiply(2721);
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex3.asin();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.I.sqrt1z();
      int int0 = (-2574);
      try { 
        complex2.ONE.nthRoot((-2574));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,574
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(3262.201408970451);
      Complex complex2 = Complex.valueOf(3262.201408970451);
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.NaN.pow(0.7853981633974483);
      double double1 = complex1.getImaginary();
      Complex complex4 = complex0.multiply(3262.201408970451);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex10.ZERO.tan();
      Complex complex13 = complex4.subtract(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex10.equals(complex1);
      Complex complex14 = complex4.subtract((-1764.1840230451787));
      Complex complex15 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-1620.0842473), (-371.09305719345724));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex1.ONE.pow((-371.09305719345724));
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex2.tanh();
      int int0 = complex2.hashCode();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.NaN.add((-371.09305719345724));
      Complex complex8 = complex1.multiply(723);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex9.ONE.divide(complex8);
      double double0 = complex6.getReal();
      Complex complex11 = complex6.asin();
      String string0 = complex9.I.toString();
      Complex complex12 = complex9.tan();
      Complex complex13 = complex3.cos();
      boolean boolean0 = complex10.equals("subarray ends after array end");
      Complex complex14 = complex5.createComplex(723, 723);
      Complex complex15 = complex14.ONE.createComplex(723, (-1620.0842473));
      boolean boolean1 = complex14.isNaN();
      Complex complex16 = complex4.add(complex13);
      Complex complex17 = complex10.divide(complex11);
      Complex complex18 = complex6.negate();
      Complex complex19 = complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.INF.add(540.40669167011);
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex0.createComplex(2.3296151161193848, 2.3296151161193848);
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.subtract(540.40669167011);
      Complex complex10 = complex8.acos();
      Complex complex11 = complex7.INF.createComplex(540.40669167011, 2.3296151161193848);
      Complex complex12 = complex10.divide(6.283185307179586);
      Complex complex13 = Complex.valueOf(540.40669167011);
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex14.INF.cos();
      Complex complex16 = complex8.exp();
      Complex complex17 = complex3.tan();
      String string0 = complex14.toString();
      boolean boolean0 = complex13.isNaN();
      double double1 = complex0.getArgument();
      Complex complex18 = complex2.createComplex(540.40669167011, 2.0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.sqrt1z();
      String string0 = complex1.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex6.subtract((-3092.6641043367244));
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      List<Complex> list0 = complex0.nthRoot(220);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.I.subtract(complex1);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ONE.conjugate();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex6.log();
      double double0 = complex7.getReal();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex1.multiply(2373.3364);
      Complex complex13 = complex8.I.add(complex11);
      Complex complex14 = complex9.acos();
      Complex complex15 = complex2.sinh();
      Complex complex16 = complex8.tanh();
      Complex complex17 = complex2.multiply(1.0);
      Complex complex18 = complex17.exp();
      Complex complex19 = complex11.add(complex14);
      Complex complex20 = complex5.add(1.0);
      Complex complex21 = complex8.divide(0.0);
  }
}
