/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:07:40 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-864.0126945835));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.subtract((-864.0126945835));
      Complex complex2 = complex1.ZERO.pow(2246.5);
      List<Complex> list0 = complex0.NaN.nthRoot(37);
      List<Complex> list1 = complex0.nthRoot(792);
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.createComplex(792, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.conjugate();
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = Complex.valueOf((-2095.0), Double.NaN);
      Complex complex10 = complex5.subtract(complex6);
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex1.pow(complex3);
      Complex complex13 = complex10.pow(0.0);
      Complex complex14 = complex13.acos();
      int int1 = complex8.hashCode();
      Complex complex15 = complex7.negate();
      Complex complex16 = complex3.exp();
      double double1 = complex16.INF.abs();
      Complex complex17 = complex7.log();
      Object object0 = complex15.readResolve();
      boolean boolean0 = complex15.isInfinite();
      Complex complex18 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex19 = Complex.valueOf((-2570.315275), 0.0);
      boolean boolean1 = complex19.isNaN();
      double double2 = complex12.getArgument();
      Complex complex20 = complex3.multiply(complex5);
      Complex complex21 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = Complex.valueOf(155.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      double double1 = complex2.getArgument();
      Complex complex3 = complex2.INF.multiply(0);
      Complex complex4 = complex1.ZERO.add(3796.45);
      Complex complex5 = Complex.valueOf(0.0, (-3090.5757319305744));
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.cosh();
      double double2 = complex1.getArgument();
      Complex complex8 = complex0.NaN.add(complex6);
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.I.subtract((double) 0);
      Complex complex11 = Complex.valueOf(3.141592653589793);
      boolean boolean0 = complex6.isInfinite();
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.INF.tanh();
      Complex complex14 = complex12.ZERO.subtract((-607.55535764));
      boolean boolean1 = complex8.equals(complex12);
      Object object0 = complex9.readResolve();
      Complex complex15 = complex12.ONE.cosh();
      boolean boolean2 = complex12.equals(complex9);
      boolean boolean3 = complex14.isNaN();
      int int0 = complex0.hashCode();
      Complex complex16 = complex14.divide(1781.1457509681932);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(222.597889806552, 222.597889806552);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.add(Double.NaN);
      Complex complex4 = complex0.ZERO.multiply(222.597889806552);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = Complex.valueOf(222.597889806552);
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex4.ZERO.add(complex8);
      Complex complex11 = complex4.multiply(222.597889806552);
      Complex complex12 = complex11.NaN.sqrt();
      Complex complex13 = complex4.ONE.add(complex7);
      Complex complex14 = complex4.ONE.negate();
      ComplexField complexField0 = complex8.getField();
      Complex complex15 = complex8.I.tanh();
      Complex complex16 = complex11.createComplex(0.0, 0.0);
      boolean boolean0 = complex4.equals(complex1);
      double double0 = complex8.abs();
      Complex complex17 = complex5.negate();
      Complex complex18 = complex17.cosh();
      Complex complex19 = complex0.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1172.8478630866512);
      Complex complex1 = Complex.valueOf(1172.8478630866512, 1172.8478630866512);
      Complex complex2 = complex0.I.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.pow(1172.8478630866512);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.pow(complex2);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.ONE.add(4.654720780112994E-8);
      Complex complex10 = complex3.divide(complex5);
      Complex complex11 = complex6.multiply((-4151.8487048));
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex3.I.divide((-4151.8487048));
      Complex complex14 = complex13.INF.atan();
      List<Complex> list0 = complex13.nthRoot(435);
      int int0 = complex12.ONE.hashCode();
      int int1 = complex0.hashCode();
      Complex complex15 = complex10.add(1079.96);
      Complex complex16 = complex0.add(3797.842271324646);
      double double0 = complex16.ONE.getArgument();
      boolean boolean1 = complex10.isNaN();
      Object object0 = complex15.readResolve();
      Complex complex17 = complex5.cosh();
      Complex complex18 = complex4.exp();
      Complex complex19 = complex3.tan();
      String string0 = complex15.toString();
      Complex complex20 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.2305110482722706E-8));
      Complex complex1 = Complex.valueOf(173.0979825);
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex1.subtract(complex0);
      String string1 = complex3.ZERO.toString();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = complex5.NaN.multiply(0.0);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex1.ONE.add(758.49796277114);
      Complex complex9 = complex7.INF.sqrt();
      Complex complex10 = Complex.valueOf(20.0, (-5.2305110482722706E-8));
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex10.tanh();
      Complex complex14 = complex13.ONE.cos();
      String string2 = complex14.I.toString();
      Complex complex15 = complex7.add(complex3);
      Complex complex16 = complex1.log();
      Complex complex17 = complex11.pow(20.0);
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex17.multiply(1158);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.pow((-20.0));
      Complex complex3 = complex0.divide((-20.0));
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex2.subtract(0.4831010699272156);
      Object object0 = complex6.readResolve();
      Complex complex7 = complex0.INF.sinh();
      Complex complex8 = complex2.multiply((-2854.052));
      Complex complex9 = complex1.pow(2.0);
      Complex complex10 = complex5.INF.multiply(complex2);
      Complex complex11 = complex10.NaN.sinh();
      double double0 = complex9.INF.abs();
      Complex complex12 = Complex.valueOf((-3631.9224158519));
      Complex complex13 = complex1.I.sqrt1z();
      Complex complex14 = complex2.sqrt1z();
      int int0 = complex14.I.hashCode();
      double double1 = complex3.abs();
      Complex complex15 = complex0.cosh();
      Complex complex16 = complex6.negate();
      Complex complex17 = complex16.INF.sin();
      String string0 = complex12.toString();
      Complex complex18 = complex0.subtract(complex6);
      Complex complex19 = Complex.I;
      Complex complex20 = complex12.add(complex19);
      Complex complex21 = complex2.negate();
      Object object1 = complex14.readResolve();
      Complex complex22 = complex5.divide(complex16);
      double double2 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.add(1105.4);
      Complex complex3 = complex0.divide(1105.4);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.multiply(0.4500300884246826);
      double double0 = complex4.getArgument();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.ZERO.sinh();
      double double1 = complex7.getReal();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex10.I.add(522.0319);
      Complex complex13 = complex12.I.multiply(complex10);
      Complex complex14 = complex9.divide((-387.56133652596));
      int int0 = complex10.hashCode();
      List<Complex> list0 = complex10.nthRoot(1041);
      Complex complex15 = Complex.valueOf((-3849.55314532899));
      Complex complex16 = complex8.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.valueOf(1095.5746969649595, 0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.asin();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = (-932.5622);
      double double1 = 2.0;
      Complex complex0 = Complex.valueOf((-932.5622), 2.0);
      Complex complex1 = null;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.sin();
      List<Complex> list0 = complex4.nthRoot(918);
      Complex complex5 = complex1.ZERO.multiply(complex0);
      Complex complex6 = complex5.I.subtract(0.0);
      Complex complex7 = complex0.ONE.subtract((-868.2239));
      Complex complex8 = complex0.cos();
      boolean boolean0 = complex8.isNaN();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.ONE.createComplex(918, 0.0);
      Complex complex11 = complex7.multiply(Double.NaN);
      Complex complex12 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = Complex.valueOf((-1425.633805142), (-1425.633805142));
      Complex complex4 = complex3.atan();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ONE.multiply(1);
      Complex complex7 = complex5.ZERO.exp();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex8.NaN.conjugate();
      ComplexField complexField1 = complex5.getField();
      Complex complex10 = complex0.asin();
      double double0 = complex6.ZERO.getArgument();
      Complex complex11 = complex6.cos();
      Complex complex12 = complex0.divide(0.0);
      Complex complex13 = complex0.ONE.subtract(complex5);
      Complex complex14 = complex6.sqrt1z();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex0.subtract(complex15);
      Complex complex17 = complex6.add(complex15);
      Complex complex18 = complex14.exp();
      Object object0 = complex10.readResolve();
      Complex complex19 = complex18.sqrt();
      Complex complex20 = complex19.INF.negate();
      List<Complex> list0 = complex17.nthRoot(1);
      Complex complex21 = complex19.pow(complex18);
      boolean boolean0 = complex21.equals(complex13);
      boolean boolean1 = complex14.isInfinite();
      Complex complex22 = complex8.cosh();
      int int0 = complex4.hashCode();
      boolean boolean2 = complex8.equals("&[Xu)V;L");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex0.add(0.0);
      double double0 = complex4.ZERO.abs();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex2.NaN.conjugate();
      try { 
        complex3.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.0), (-777.0));
      Complex complex1 = complex0.divide(248.66);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex0.subtract((-777.0));
      String string0 = complex4.I.toString();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex5.ZERO.add(2923.64);
      Complex complex9 = complex4.ZERO.multiply(5224.709965571424);
      Complex complex10 = complex9.I.divide(complex8);
      Complex complex11 = complex6.I.cosh();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex5.equals(object0);
      Complex complex12 = complex5.subtract(0.0);
      boolean boolean1 = complex6.isInfinite();
      Complex complex13 = Complex.I;
      boolean boolean2 = complex4.equals(complex13);
      boolean boolean3 = complex2.isInfinite();
      Object object1 = complex8.readResolve();
      Complex complex14 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2031.46539247551);
      Complex complex1 = Complex.valueOf((-3.4534114205255493E12), (-3.4534114205255493E12));
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      double double0 = complex0.abs();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      double double1 = complex1.getImaginary();
      Complex complex2 = complex1.add(Double.NEGATIVE_INFINITY);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.sinh();
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex0.I.reciprocal();
      Complex complex7 = complex2.subtract((-2119.3495263306));
      Complex complex8 = complex4.subtract(complex7);
      Complex complex9 = complex6.subtract(complex1);
      Complex complex10 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = Complex.valueOf((-1612.0));
      double double0 = complex5.ONE.getArgument();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex3.acos();
      Complex complex11 = complex8.add((-1558.7939050507655));
      Complex complex12 = complex7.acos();
      Complex complex13 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-2.631656656397244E120), 0.0);
      Complex complex1 = complex0.ONE.subtract((-2121.69428929488));
      Complex complex2 = Complex.valueOf(1841.64);
      Complex complex3 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex3.NaN.divide(complex2);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.asin();
      Complex complex8 = Complex.valueOf(1.2627736197958951E98, 1.2627736197958951E98);
      double double0 = 0.0;
      Complex complex9 = complex5.divide(0.0);
      try { 
        complex2.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1221.92784, 1221.92784);
      Complex complex1 = complex0.ZERO.subtract(1221.92784);
      Complex complex2 = complex0.multiply(1221.92784);
      Complex complex3 = complex1.multiply((-1.7929433274271985E-8));
      Complex complex4 = complex0.acos();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex3.NaN.subtract(0.0);
      Complex complex7 = complex5.I.multiply((-1.7929433274271985E-8));
      ComplexField complexField0 = complex3.getField();
      ComplexField complexField1 = complex7.getField();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex8.ZERO.sin();
      double double0 = complex5.abs();
      Complex complex11 = complex4.sin();
      Complex complex12 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex0.NaN.subtract(complex4);
      Complex complex6 = complex1.NaN.subtract(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.add(complex1);
      Complex complex10 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.divide(0.0);
      Complex complex12 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.multiply((-1976.248306));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex5.divide(0.0);
      int int0 = complex4.hashCode();
      Complex complex7 = complex3.multiply(1);
      double double0 = complex4.getReal();
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.NaN.readResolve();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.divide((-1662.922853747));
      Complex complex6 = complex3.ZERO.negate();
      Complex complex7 = complex5.NaN.add(complex0);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.divide(0.0);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex0.multiply(555);
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 555);
      Complex complex15 = complex9.tan();
      ComplexField complexField0 = complex10.getField();
      Complex complex16 = complex15.sqrt1z();
      Complex complex17 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      List<Complex> list0 = complex0.INF.nthRoot(353);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.createComplex(544.8600237259867, (-1020.65549178017));
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex2.INF.cos();
      double double0 = complex2.getImaginary();
      String string0 = complex2.toString();
      Complex complex5 = complex0.createComplex(Double.NEGATIVE_INFINITY, 2.2535347938537598);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-941.40135908), (-941.40135908));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.ZERO.acos();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.multiply(3290);
      Complex complex6 = complex4.negate();
      Complex complex7 = Complex.valueOf((-941.40135908));
      Complex complex8 = complex4.ONE.cos();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex7.NaN.exp();
      List<Complex> list0 = complex2.ONE.nthRoot(3290);
      String string0 = complex0.toString();
      int int0 = complex2.hashCode();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex2.getArgument();
      Complex complex11 = Complex.valueOf((-20.0));
      boolean boolean0 = complex7.isInfinite();
      Complex complex12 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1974.5779489, 0.0);
      Complex complex1 = complex0.I.multiply((-1928));
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.multiply(0.0);
      Complex complex4 = complex3.ONE.conjugate();
      Object object1 = complex3.NaN.readResolve();
      Complex complex5 = complex2.I.atan();
      Complex complex6 = complex5.I.tan();
      boolean boolean0 = complex1.isNaN();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.I.exp();
      int int0 = complex7.hashCode();
      List<Complex> list0 = complex0.nthRoot(721);
      Complex complex9 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.NaN.sin();
      String string0 = complex0.toString();
      Complex complex4 = complex1.cosh();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.ZERO.reciprocal();
      double double1 = 0.0;
      Complex complex7 = complex1.ZERO.add(0.0);
      Complex complex8 = complex4.divide(complex2);
      try { 
        complex2.INF.nthRoot((-709));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -709
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.NaN.add(0.0);
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex1.add(0.0);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.NaN.sin();
      Complex complex11 = complex0.subtract(complex1);
      Complex complex12 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-813.3863308), (-813.3863308));
      Complex complex1 = complex0.ONE.conjugate();
      String string0 = complex0.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.multiply(964);
      Complex complex6 = complex3.ONE.add(0.0);
      Complex complex7 = complex5.ONE.tanh();
      Complex complex8 = complex7.ONE.add(5.6696103838614634E-8);
      Complex complex9 = complex7.ZERO.multiply(complex3);
      Complex complex10 = complex5.NaN.add(complex0);
      String string1 = complex10.ONE.toString();
      String string2 = complex1.toString();
      Complex complex11 = complex3.createComplex((-3509.89), (-3509.89));
      Complex complex12 = complex3.cosh();
      double double0 = complex2.getImaginary();
      Complex complex13 = complex6.sqrt();
      Complex complex14 = complex13.NaN.tanh();
      Complex complex15 = complex13.atan();
      Complex complex16 = complex2.multiply(1413);
      ComplexField complexField0 = complex10.getField();
      Complex complex17 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-5.574080023496771E-94));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.I.subtract(complex1);
      String string0 = complex3.NaN.toString();
      double double0 = complex0.getArgument();
      double double1 = complex1.getImaginary();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.divide(complex2);
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex5.ZERO.exp();
      Complex complex8 = Complex.valueOf(1.4794751934479566E-52);
      Complex complex9 = complex8.I.multiply(0.0);
      double double0 = complex8.INF.getArgument();
      double double1 = complex2.getReal();
      Complex complex10 = complex3.multiply(complex1);
      Complex complex11 = complex3.subtract((double) 1);
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex11.sqrt();
      List<Complex> list1 = complex0.nthRoot(1254);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1438.6));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.multiply((-438));
      Complex complex6 = complex0.cos();
      double double0 = complex4.getImaginary();
      double double1 = complex0.getImaginary();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.valueOf((-1438.6));
      double double2 = complex8.ONE.abs();
      Complex complex9 = complex3.multiply(complex7);
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex((-3089.514906924583), 0.0);
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      int int0 = complex1.ONE.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.I.add(0.0);
      Complex complex4 = complex3.tanh();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex5.INF.add(complex2);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex6.I.sin();
      Complex complex9 = complex6.cos();
      Complex complex10 = complex1.createComplex(1685.1289181, (-431.62645137132));
      Complex complex11 = complex0.negate();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex8.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      int int0 = complex1.ONE.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.I.add(0.0);
      Complex complex4 = complex3.tanh();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex5.INF.add(complex2);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex1.sinh();
      Complex complex11 = Complex.valueOf(1685.1289181);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1373.965));
      Complex complex1 = complex0.I.divide(0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.tanh();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex3.ZERO.sqrt1z();
      String string0 = complex4.I.toString();
      String string1 = complex3.toString();
      double double0 = complex3.getArgument();
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.conjugate();
      ComplexField complexField0 = complex5.getField();
      String string2 = complex3.toString();
      Complex complex7 = complex6.tanh();
      String string3 = complex7.NaN.toString();
      Complex complex8 = complex0.add(complex7);
      String string4 = complex8.INF.toString();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      Complex complex9 = complex6.INF.tanh();
      double double1 = complex6.abs();
      Complex complex10 = complex8.multiply(1866.52435);
      Complex complex11 = complex10.ZERO.sqrt1z();
      Complex complex12 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.valueOf(0.0, (-4250.193827));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1829.755476562766), (-691.4));
      Complex complex1 = new Complex(891.9722730465376, (-1829.755476562766));
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2105.75846604), (-2105.75846604));
      List<Complex> list0 = complex0.nthRoot(1170);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.ONE.createComplex(1170, 0.0);
      int int0 = complex1.INF.hashCode();
      Complex complex6 = complex0.INF.log();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex6.ZERO.add(complex3);
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex4.pow(complex1);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex11.I.sin();
      Complex complex13 = complex12.I.acos();
      Complex complex14 = complex10.INF.divide(0.0688626617193222);
      Complex complex15 = complex11.NaN.sinh();
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex4.multiply(0.0);
      Complex complex18 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.ZERO.nthRoot(7);
      Complex complex1 = complex0.ZERO.pow(Double.NaN);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.multiply((-716.9346126));
      Complex complex5 = complex1.ONE.multiply(37);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex4.I.divide(complex1);
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex8.exp();
      Complex complex11 = complex2.asin();
      double double0 = complex0.abs();
      Object object0 = complex10.INF.readResolve();
      Complex complex12 = complex11.add(complex1);
      Complex complex13 = complex10.add(complex11);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-1932.52));
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex1.add((-1932.52));
      Complex complex8 = complex0.divide((-1932.52));
      Complex complex9 = Complex.valueOf(0.0, (-1932.52));
      Complex complex10 = complex4.divide(complex9);
      Complex complex11 = complex10.ZERO.negate();
      List<Complex> list0 = complex8.nthRoot(318);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1259.13538958);
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex2.INF.toString();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.I.log();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.I.createComplex(0.5573811531066895, 0.5573811531066895);
      double double0 = complex0.getArgument();
      Complex complex5 = complex4.NaN.sqrt1z();
      int int0 = complex4.hashCode();
      int int1 = complex0.hashCode();
      Complex complex6 = complex1.add(1.5707963267948966);
      Complex complex7 = complex4.cosh();
      double double1 = complex7.getImaginary();
      Complex complex8 = complex1.multiply(complex4);
      Complex complex9 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.ONE.pow(complex0);
      Complex complex5 = complex2.INF.multiply(0.0);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex6.sqrt();
      double double1 = complex2.getImaginary();
      Complex complex9 = complex5.subtract(0.0);
      Complex complex10 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.multiply(Double.NaN);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex5.INF.reciprocal();
      Complex complex8 = Complex.valueOf(Double.NaN, (-795.61572585652));
      Complex complex9 = complex7.ZERO.exp();
      Complex complex10 = complex5.INF.pow(complex1);
      int int0 = (-1647);
      try { 
        complex5.INF.nthRoot((-1647));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,647
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.cos();
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex2.asin();
      double double0 = complex2.abs();
      Complex complex6 = complex0.sqrt();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.asin();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.divide((-1.548715389333397E-8));
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex5.divide(complex1);
      double double1 = complex1.getArgument();
      Complex complex7 = complex2.add(0.0);
      double double2 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.negate();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = Complex.valueOf(1.7027192115783691, (-4697.4771163665));
      Complex complex5 = complex1.sqrt();
      List<Complex> list0 = complex5.ONE.nthRoot(1481);
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-6.889997193778161E-8), (-6.889997193778161E-8));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex6.NaN.sqrt();
      double double0 = complex6.getArgument();
      Complex complex9 = complex7.divide((-6.889997193778161E-8));
      Complex complex10 = complex6.INF.exp();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex11.createComplex(Double.NaN, Double.NaN);
      Complex complex13 = complex11.multiply(1508.547435129);
      Complex complex14 = complex0.add(complex9);
      Complex complex15 = complex5.sqrt();
      Complex complex16 = complex10.sqrt1z();
      Complex complex17 = complex0.sin();
      int int0 = complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1380.329937));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex0.multiply(1728);
      Complex complex5 = complex0.subtract((double) 1728);
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex5.ZERO.negate();
      String string0 = complex5.toString();
      Complex complex8 = complex0.ZERO.add(complex1);
      Complex complex9 = complex0.pow(complex5);
      Complex complex10 = complex0.ZERO.acos();
      Complex complex11 = complex4.log();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex4.pow(complex1);
      Complex complex15 = complex4.sqrt1z();
      Complex complex16 = complex5.add((-1263.47218));
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-2598.5110430527), (-2598.5110430527));
      Complex complex1 = Complex.valueOf((-2598.5110430527), (-2598.5110430527));
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex2.ZERO.subtract(2516.71);
      Complex complex4 = complex0.multiply((-1));
      Object object0 = complex1.NaN.readResolve();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.pow((-2598.5110430527));
      Complex complex8 = complex4.createComplex(0.0, 1.1636629220608724E-136);
      Complex complex9 = complex5.conjugate();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(626.8239, 626.8239);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.add(626.8239);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex5.ONE.add(complex0);
      String string0 = complex0.toString();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.I.sqrt();
      String string1 = complex0.toString();
      List<Complex> list0 = complex7.nthRoot(2121);
      Complex complex9 = complex0.tan();
      String string2 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 944.26005);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1.8356062677502141E202, (-365.0));
      Complex complex3 = complex2.ZERO.add((-2576.9398094191));
      Complex complex4 = complex2.ONE.subtract((-365.0));
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.ONE.multiply(complex1);
      Complex complex7 = complex4.ZERO.tan();
      Complex complex8 = complex4.NaN.multiply(0);
      Complex complex9 = complex0.pow(complex2);
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex0.multiply((-2576.9398094191));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(1369.33880091, 1369.33880091);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-481.716743679), (-481.716743679));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.ONE.createComplex(0.0, (-481.716743679));
      Complex complex4 = complex3.I.reciprocal();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tan();
      boolean boolean1 = complex1.isInfinite();
      Object object0 = complex2.readResolve();
      double double0 = complex0.getReal();
      Complex complex3 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.log();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.conjugate();
      int int0 = complex5.hashCode();
      Complex complex10 = complex2.add(complex5);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.578313650939932E261, 1232.7882832266);
      Complex complex1 = complex0.NaN.subtract((-605.28959));
      String string0 = complex0.ONE.toString();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1140.0));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.abs();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ONE.exp();
      double double1 = complex3.ONE.abs();
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.ZERO.tan();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex1.cosh();
      double double2 = complex9.INF.abs();
      Complex complex10 = complex3.I.divide(complex4);
      List<Complex> list0 = complex9.nthRoot(990);
      Complex complex11 = complex7.createComplex(990, (-1140.0));
      Complex complex12 = complex0.exp();
      Complex complex13 = complex0.pow(complex10);
      Complex complex14 = complex12.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex15 = complex6.log();
      Complex complex16 = complex7.NaN.negate();
      Complex complex17 = complex2.acos();
      double double3 = complex3.abs();
      Complex complex18 = complex4.reciprocal();
      Complex complex19 = complex11.tan();
      Complex complex20 = complex1.add(1.0);
      Complex complex21 = complex18.add(complex1);
      Complex complex22 = complex18.log();
      Complex complex23 = complex7.pow(complex16);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.subtract((-805.7391));
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex0.add((-805.7391));
      Complex complex6 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sqrt1z();
      try { 
        complex1.NaN.nthRoot((-765));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -765
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.readResolve();
      double double0 = ((Complex) object0).ZERO.abs();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(4008.5, 4008.5);
      Complex complex1 = complex0.subtract(4008.5);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = Complex.valueOf(4008.5, 2467.678803);
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex7.ZERO.conjugate();
      double double0 = complex8.ONE.abs();
      Complex complex9 = complex5.multiply((-1903.25956));
      int int0 = complex1.INF.hashCode();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex5.atan();
      Complex complex12 = complex1.pow((-98.5005946524831));
      Complex complex13 = Complex.valueOf(4008.5);
      Complex complex14 = complex7.sqrt1z();
      Complex complex15 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(67);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex5.multiply(0.0);
      Complex complex8 = complex6.pow((double) 67);
      List<Complex> list0 = complex1.nthRoot(67);
      boolean boolean0 = complex4.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.380251407623291);
      Object object0 = complex0.I.readResolve();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = (-916.52270063);
      Complex complex0 = new Complex((-916.52270063));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.divide((-2255.615788355239));
      Complex complex3 = complex1.exp();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.I.pow(105.6972640830721);
      try { 
        complex6.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ONE.getField();
      String string0 = complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1490.997858170928), (-1490.997858170928));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.valueOf((-1490.997858170928));
      Complex complex3 = complex0.add((-1490.997858170928));
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = Complex.valueOf((-1490.997858170928), 2031.46539247551);
      Complex complex6 = complex4.ONE.pow(complex5);
      Complex complex7 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(651.95126813, 651.95126813);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.subtract(4.250734424415339E-289);
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex4.pow(651.95126813);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1744.0452719656885));
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(819.38937253);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.log();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.pow((-1295.51492));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1880.37748361);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.divide(1880.37748361);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.I.pow(complex2);
      Complex complex5 = Complex.valueOf(1880.37748361, 5.049564425991982E302);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      List<Complex> list0 = complex1.nthRoot(4107);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.sinh();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.NaN.add(complex2);
      Complex complex6 = complex0.sin();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add((-1.642361029990822E65));
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.NaN.multiply(1853);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1575.076107646737), 1310.866056257885);
      Complex complex1 = Complex.valueOf(1310.866056257885);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.INF.acos();
      Complex complex5 = complex0.pow(147.207634);
      Complex complex6 = complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply((-2788.733577158258));
      Complex complex2 = Complex.valueOf(0.0, (-2788.733577158258));
      Complex complex3 = complex1.I.subtract(complex2);
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(453.48425416133426, 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = Complex.valueOf((-2647.610622));
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.tanh();
      List<Complex> list0 = complex2.nthRoot(313);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      String string0 = complex1.INF.toString();
      Complex complex3 = complex1.ZERO.subtract(1.0);
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = Complex.valueOf(1789.54011, 1107.1971748783);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex6 = complex4.I.log();
      int int0 = complex0.hashCode();
      Complex complex7 = complex1.multiply(0);
      Complex complex8 = complex0.add(3473.56060996);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.05417001247406006);
      Complex complex1 = complex0.ONE.multiply(0.05417001247406006);
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.INF.createComplex(0.05417001247406006, (-929.924914955515));
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1048.730831), 0.0);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.multiply((-2711));
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = Complex.valueOf(1348.49359108046);
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex1.INF.negate();
      String string0 = complex0.toString();
      double double1 = complex4.INF.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex5.I.conjugate();
      Complex complex9 = complex2.asin();
      double double2 = complex4.getArgument();
      double double3 = complex6.getImaginary();
      Complex complex10 = Complex.valueOf(0.7853981633974483);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex9.createComplex(0.7853981633974483, (-2.356194490192345));
      Complex complex15 = complex10.sin();
      Complex complex16 = complex4.cosh();
      Complex complex17 = complex8.multiply(complex10);
      Complex complex18 = complex17.INF.cosh();
      Complex complex19 = complex18.atan();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(266.7621116359007);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = Complex.valueOf(1522.899583);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.pow(1522.899583);
      Complex complex5 = complex4.I.conjugate();
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.multiply((-1774.4508));
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex7.ZERO.atan();
      double double0 = complex1.getArgument();
      double double1 = complex2.abs();
      Complex complex9 = complex5.pow((-3318.943));
      Complex complex10 = complex6.tan();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-1011.091289), (-1011.091289));
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex4.add(20.0);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex3.ONE.subtract((-1011.091289));
      int int0 = complex3.ONE.hashCode();
      Complex complex8 = complex3.INF.pow(complex0);
      Complex complex9 = complex0.ONE.pow(complex3);
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex10.NaN.divide(0.0);
      Complex complex12 = complex0.pow((-1011.091289));
      Complex complex13 = complex2.divide((-1011.091289));
      Complex complex14 = complex2.log();
      Complex complex15 = complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1363.2080394184898);
      Complex complex1 = complex0.I.add(1363.2080394184898);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex3.sin();
      double double1 = complex0.getReal();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.subtract(complex3);
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex8.INF.multiply(complex2);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex10.INF.multiply(complex4);
      List<Complex> list0 = complex6.nthRoot(1);
      double double2 = complex1.abs();
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex6.reciprocal();
      boolean boolean0 = complex1.isNaN();
      Complex complex14 = Complex.valueOf(1363.2080394184898);
      Complex complex15 = complex3.subtract(complex11);
      boolean boolean1 = complex5.isInfinite();
      Complex complex16 = complex6.cos();
      Complex complex17 = complex11.tan();
      Complex complex18 = complex12.createComplex(0.0, 2.1503376960754395);
      double double3 = complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      try { 
        complex0.nthRoot((-1010));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,010
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(2.0);
      Complex complex3 = complex1.NaN.multiply(1);
      Complex complex4 = complex3.ONE.pow(complex2);
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex4.divide(607.7807);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.INF.add(2.0);
      Complex complex9 = complex6.log();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex10 = complex3.atan();
      Complex complex11 = complex10.I.sqrt();
      boolean boolean0 = complex6.isInfinite();
      Complex complex12 = complex1.multiply((double) 7);
      Complex complex13 = complex0.subtract((-27.9265));
      Complex complex14 = complex6.multiply(2.0);
      List<Complex> list1 = complex14.nthRoot(1);
      double double0 = complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-879.1207911463051), (-879.1207911463051));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex2.multiply((-879.1207911463051));
      Complex complex5 = complex1.ONE.acos();
      int int0 = complex1.INF.hashCode();
      Complex complex6 = complex1.NaN.divide(complex0);
      String string0 = complex5.INF.toString();
      Complex complex7 = complex6.ONE.tanh();
      double double0 = complex1.I.getArgument();
      int int1 = complex1.ZERO.hashCode();
      double double1 = complex1.ZERO.getArgument();
      Complex complex8 = complex0.divide((-879.1207911463051));
      Complex complex9 = complex8.I.multiply(0.0);
      Complex complex10 = complex8.NaN.multiply(1.5707963267948966);
      Complex complex11 = complex10.ONE.divide(1.5707963267948966);
      Complex complex12 = complex8.divide(1811.0);
      Complex complex13 = complex12.cos();
      Complex complex14 = complex3.cos();
      Complex complex15 = complex5.subtract(complex6);
      Complex complex16 = complex15.I.tanh();
      Complex complex17 = complex4.I.subtract(1.3726137091534984E303);
      boolean boolean0 = complex1.isNaN();
      Complex complex18 = complex4.sin();
      Complex complex19 = complex2.cosh();
      Complex complex20 = complex19.I.exp();
      boolean boolean1 = complex12.equals("(Infinity, Infinity)");
      Complex complex21 = complex8.conjugate();
      double double2 = complex7.getImaginary();
      Complex complex22 = complex3.acos();
      String string1 = complex22.INF.toString();
      Complex complex23 = complex6.subtract(1.5707963267948966);
      Complex complex24 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1437.3039207449276, 0.0);
      Complex complex1 = new Complex(1437.3039207449276);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ONE.cos();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex1.INF.multiply(complex2);
      String string0 = complex0.toString();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = Complex.valueOf(0.0);
      double double0 = complex5.ONE.abs();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex9.ZERO.pow(0.0);
      Complex complex11 = complex8.sqrt();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex6.pow(1437.3039207449276);
  }
}
