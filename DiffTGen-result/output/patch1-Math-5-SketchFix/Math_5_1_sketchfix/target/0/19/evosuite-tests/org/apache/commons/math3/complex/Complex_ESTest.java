/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:11:06 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-8.0E298));
      Complex complex1 = complex0.divide((-8.0E298));
      Complex complex2 = complex0.INF.multiply(complex1);
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex1.divide((-8.0E298));
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex3.ZERO.conjugate();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex2.add((-535.0));
      Complex complex10 = complex0.exp();
      Complex complex11 = Complex.valueOf(2.0);
      Complex complex12 = complex6.multiply(0.0);
      Complex complex13 = complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.valueOf(8.668714514280051E-69);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.ONE.multiply((-1195.98047));
      Complex complex5 = complex4.ZERO.createComplex((-1195.98047), (-367.43390757584));
      Complex complex6 = Complex.valueOf((-1.0), (-1.0));
      Complex complex7 = Complex.valueOf((-1298.17), (-1298.17));
      Complex complex8 = complex7.ONE.cosh();
      List<Complex> list0 = complex2.nthRoot(1);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex1.NaN.subtract(complex0);
      Complex complex11 = complex2.I.divide(complex0);
      Complex complex12 = complex1.createComplex(1046.51, 1046.51);
      Complex complex13 = complex12.ZERO.add(complex2);
      Complex complex14 = complex0.createComplex(1046.51, 0.0);
      Complex complex15 = Complex.valueOf((-722.4), (double) 1);
      Complex complex16 = complex15.cosh();
      boolean boolean0 = complex16.equals("=VSo5Huy>[$");
      double double0 = complex13.getReal();
      double double1 = complex9.getArgument();
      boolean boolean1 = complex13.isInfinite();
      Complex complex17 = complex10.subtract((-5567.30025697277));
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply(1.3020631859056421E91);
      Complex complex2 = complex1.ONE.multiply(1.3020631859056421E91);
      int int0 = complex1.INF.hashCode();
      Complex complex3 = complex2.ZERO.multiply(897.2);
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ZERO.multiply(0.0);
      int int1 = complex7.ONE.hashCode();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.subtract((-580.6717734294483));
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.cos();
      ComplexField complexField0 = complex10.I.getField();
      Complex complex12 = complex2.sinh();
      int int2 = complex0.hashCode();
      Complex complex13 = complex3.pow(complex0);
      Complex complex14 = complex13.multiply(complex3);
      double double0 = complex4.getImaginary();
      boolean boolean0 = complex7.equals(complex0);
      Complex complex15 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.ONE.multiply(complex4);
      Complex complex6 = complex1.NaN.tanh();
      int int0 = complex1.hashCode();
      Complex complex7 = complex0.subtract((-346.9));
      Complex complex8 = complex2.pow(complex1);
      boolean boolean0 = complex4.isNaN();
      Complex complex9 = complex2.divide(0.5495203733444214);
      Complex complex10 = complex1.tan();
      Complex complex11 = complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1632.8516, 1632.8516);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.divide(1632.8516);
      int int0 = complex2.NaN.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = Complex.valueOf(1632.8516);
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex2.isInfinite();
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = Complex.valueOf(1632.8516);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex7.I.multiply(1251.785389644);
      Complex complex11 = complex7.subtract(6.283185307179586);
      ComplexField complexField1 = complex11.I.getField();
      int int1 = complex6.hashCode();
      Complex complex12 = complex7.subtract(33.9572);
      Object object0 = complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.divide(322.0);
      Complex complex3 = complex0.add(0.0);
      String string0 = complex0.toString();
      Complex complex4 = complex0.log();
      boolean boolean0 = complex4.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(5568.242468959368, 5568.242468959368);
      Complex complex1 = new Complex(5568.242468959368, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 5568.242468959368);
      double double0 = complex0.I.getArgument();
      Complex complex7 = new Complex(1.5707963267948966, 362.2509);
      Complex complex8 = complex0.createComplex(1.5707963267948966, 1.5707963267948966);
      boolean boolean0 = complex8.isNaN();
      Complex complex9 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(865.6448286736633, 865.6448286736633);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.tan();
      List<Complex> list0 = complex2.I.nthRoot(4881);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex0.atan();
      String string0 = complex0.toString();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex0.ZERO.multiply(4881);
      boolean boolean0 = complex4.isNaN();
      Complex complex7 = complex2.pow(complex5);
      ComplexField complexField1 = complex7.getField();
      double double1 = complex2.getImaginary();
      Complex complex8 = complex2.sinh();
      // Undeclared exception!
      complex6.nthRoot(981);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.3318578004837036);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.pow(Double.NaN);
      Complex complex4 = complex1.NaN.tanh();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex1.ONE.sqrt();
      int int0 = complex0.hashCode();
      Complex complex7 = complex0.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex6.tanh();
      ComplexField complexField1 = complex7.getField();
      Complex complex10 = complex0.createComplex(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2844.0, 2844.0);
      Complex complex1 = complex0.add((-673.3409436084214));
      Complex complex2 = complex1.INF.divide(complex0);
      List<Complex> list0 = complex1.INF.nthRoot(7);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.INF.divide(complex0);
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex0.NaN.divide(complex1);
      Complex complex6 = complex0.add(complex1);
      String string0 = complex0.toString();
      Complex complex7 = complex5.NaN.cos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex5.multiply(2844.0);
      Complex complex11 = complex10.subtract((-673.3409436084214));
      Complex complex12 = complex4.cos();
      Complex complex13 = complex10.multiply(261.0);
      Complex complex14 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex3.ONE.atan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.subtract(complex0);
      Complex complex10 = complex2.subtract((-625.6843));
      Complex complex11 = complex2.divide((-625.6843));
      Complex complex12 = complex2.multiply(0.0);
      Complex complex13 = complex2.sqrt();
      Complex complex14 = complex13.INF.tan();
      double double0 = complex6.getReal();
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex4.getField();
      Complex complex16 = complex4.log();
      Complex complex17 = complex14.multiply(1811);
      Complex complex18 = complex16.sqrt();
      Complex complex19 = complex2.cosh();
      Complex complex20 = complex13.tan();
      Complex complex21 = complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex0.I.acos();
      double double0 = complex0.abs();
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.valueOf((-4.1691464781797555E-8));
      Complex complex8 = complex7.INF.exp();
      int int0 = complex3.hashCode();
      boolean boolean0 = complex6.isNaN();
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex9.NaN.multiply(complex6);
      Complex complex11 = complex9.pow((-2.6993478083348727E-303));
      Complex complex12 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 2632.8698358873685);
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.ONE.divide(2632.8698358873685);
      Object object0 = complex0.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.valueOf(0.0, 2632.8698358873685);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2389.769, 2389.769);
      Complex complex1 = complex0.subtract((-2009.3));
      Complex complex2 = new Complex(2401.386);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex0.INF.divide(complex2);
      Complex complex5 = complex2.INF.multiply(0);
      Complex complex6 = complex4.ZERO.sinh();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex7 = complex2.I.pow(complex3);
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = complex3.NaN.sqrt1z();
      Complex complex10 = complex8.INF.reciprocal();
      Complex complex11 = complex2.pow(complex0);
      Complex complex12 = complex8.ONE.sin();
      double double0 = complex11.NaN.getArgument();
      ComplexField complexField0 = complex11.NaN.getField();
      Complex complex13 = complex0.ZERO.add((-2009.3));
      Object object0 = complex3.readResolve();
      Complex complex14 = complex1.exp();
      Complex complex15 = Complex.valueOf((-2009.3));
      Complex complex16 = complex2.add(610.287064317);
      Complex complex17 = complex13.sqrt();
      Complex complex18 = complex8.tan();
      Complex complex19 = complex16.log();
      boolean boolean1 = complex15.isInfinite();
      ComplexField complexField1 = complex15.getField();
      int int0 = complex15.hashCode();
      Complex complex20 = Complex.valueOf(2389.769, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.pow(3398.1478692);
      Complex complex3 = Complex.valueOf(217.557865280734, 217.557865280734);
      Complex complex4 = complex3.NaN.multiply(350.1);
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex0.ZERO.add((-974.18456631));
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.NaN.log();
      double double0 = complex0.getReal();
      int int0 = complex2.hashCode();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.NaN.tan();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex0.NaN.add(0.0);
      String string0 = complex3.ZERO.toString();
      double double1 = complex0.abs();
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = complex2.NaN.tan();
      int int0 = complex6.ONE.hashCode();
      int int1 = complex6.INF.hashCode();
      double double2 = complex0.NaN.abs();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.NaN.atan();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex0.conjugate();
      double double3 = complex9.INF.getArgument();
      String string1 = complex1.INF.toString();
      Object object0 = complex9.ONE.readResolve();
      boolean boolean1 = complex2.isInfinite();
      Complex complex10 = new Complex(Double.NaN, 204.793);
      boolean boolean2 = complex2.equals(complex10);
      Complex complex11 = complex1.conjugate();
      boolean boolean3 = complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2346.608100098251));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.I.add((-2074.0));
      Complex complex5 = Complex.valueOf((-2346.608100098251));
      int int0 = complex0.NaN.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.valueOf((-2346.608100098251), (-2346.608100098251));
      Complex complex9 = complex6.sqrt();
      Complex complex10 = Complex.valueOf((-2346.608100098251), 2591.921016082817);
      Complex complex11 = complex7.atan();
      Complex complex12 = complex11.I.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex11.INF.exp();
      Complex complex14 = Complex.valueOf((-2074.0));
      Complex complex15 = complex5.subtract((-2346.608100098251));
      Complex complex16 = complex12.divide(complex5);
      String string0 = complex13.toString();
      Complex complex17 = Complex.valueOf(1.0, 917.253251);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.conjugate();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex1.atan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex0.I.subtract(0.0);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex0.add(complex2);
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2728.692);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.pow(2728.692);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex1.ZERO.cosh();
      Complex complex6 = complex1.multiply(1.8186679660152888E-154);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(1341);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex8.createComplex(663.0, 663.0);
      Complex complex10 = complex8.pow(0.0);
      String string0 = complex10.INF.toString();
      Complex complex11 = Complex.valueOf((-918.979796433));
      boolean boolean0 = complex0.equals(complex11);
      Complex complex12 = complex8.exp();
      double double0 = complex12.INF.abs();
      Complex complex13 = complex10.subtract(3103.193973640555);
      Complex complex14 = complex11.multiply(2423.05725681239);
      Complex complex15 = complex13.ZERO.multiply(0.0);
      Complex complex16 = Complex.I;
      Complex complex17 = complex13.add(complex16);
      double double1 = complex17.getArgument();
      Complex complex18 = complex1.pow(complex9);
      String string1 = complex11.toString();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1366.3572640194));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.pow(9.517570994930463E-138);
      Complex complex4 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-3.89604237755475E-134));
      Complex complex1 = complex0.INF.add((-3.89604237755475E-134));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex3.INF.pow(complex2);
      Complex complex5 = complex1.ONE.pow(complex2);
      Complex complex6 = complex5.multiply(17);
      Complex complex7 = complex0.subtract(1.0);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex3.subtract(complex9);
      Complex complex11 = complex0.atan();
      Complex complex12 = complex11.ZERO.divide(complex6);
      Object object0 = complex8.readResolve();
      Complex complex13 = complex5.exp();
      Complex complex14 = complex9.add((-1371.0));
      Object object1 = complex0.readResolve();
      Complex complex15 = complex7.sin();
      Complex complex16 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(726.61);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.valueOf(1433.408);
      List<Complex> list0 = complex1.ZERO.nthRoot(688);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.asin();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.ONE.pow(726.61);
      Complex complex7 = complex6.ONE.exp();
      String string0 = complex3.toString();
      Complex complex8 = complex0.ONE.subtract(726.61);
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.NaN.add(726.61);
      ComplexField complexField0 = complex10.getField();
      Complex complex11 = complex6.INF.exp();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex5.I.log();
      Complex complex14 = complex9.INF.sqrt1z();
      Complex complex15 = complex1.NaN.pow((-3205.86696522));
      Complex complex16 = complex10.ONE.createComplex(0.0, 688);
      Complex complex17 = complex4.subtract(0.0);
      Complex complex18 = complex0.INF.multiply(complex17);
      Complex complex19 = complex10.add(1871.553532);
      Complex complex20 = complex17.sinh();
      Complex complex21 = complex20.sinh();
      Complex complex22 = complex1.pow(complex18);
      Complex complex23 = complex8.divide(211.44971753);
      Complex complex24 = complex7.atan();
      Complex complex25 = complex5.acos();
      Complex complex26 = complex23.divide(complex20);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-2728.361656084));
      Complex complex1 = Complex.valueOf((-2728.361656084));
      Complex complex2 = complex1.ONE.pow((-2728.361656084));
      Complex complex3 = complex2.I.multiply(17);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex1.I.multiply((-2003));
      Complex complex5 = complex2.INF.createComplex(6.589235682116406E83, 6.589235682116406E83);
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex0.multiply(complex1);
      ComplexField complexField0 = complex7.I.getField();
      String string0 = complex0.toString();
      double double0 = complex7.getImaginary();
      Object object1 = complex7.readResolve();
      Complex complex8 = complex7.INF.createComplex(Double.POSITIVE_INFINITY, (-592.9837965));
      double double1 = complex0.getImaginary();
      Complex complex9 = complex4.ZERO.pow(complex3);
      Complex complex10 = complex4.cosh();
      Complex complex11 = complex1.add(complex4);
      Complex complex12 = complex4.sqrt();
      double double2 = complex0.abs();
      Complex complex13 = complex10.pow(-0.0);
      Complex complex14 = complex13.acos();
      Complex complex15 = complex10.createComplex(2728.361656084, (-4013.3224));
      Complex complex16 = complex13.sqrt();
      double double3 = complex13.getArgument();
      Complex complex17 = Complex.valueOf((-1679.1574428789));
      Complex complex18 = complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2680.421915);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex0.I.cos();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0, 2680.421915);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex6.INF.reciprocal();
      Complex complex9 = complex0.subtract(1.7383009254496851E289);
      Complex complex10 = complex6.multiply(0.0);
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex10.negate();
      Complex complex14 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(147.53, 147.53);
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.INF.reciprocal();
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex0.divide(complex1);
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex7.ZERO.divide(0.0);
      Complex complex10 = complex9.I.sqrt1z();
      ComplexField complexField1 = complex0.I.getField();
      Complex complex11 = complex6.pow((-838.3));
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex7.sqrt();
      Complex complex14 = complex7.sinh();
      ComplexField complexField2 = complex5.ZERO.getField();
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField3 = complex5.getField();
      Complex complex16 = complex8.add(complex6);
      Complex complex17 = complex13.sin();
      boolean boolean0 = complex9.isNaN();
      Complex complex18 = complex1.cos();
      Complex complex19 = complex13.subtract(complex10);
      ComplexField complexField4 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1480.6956642345, 1480.6956642345);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(1206);
      Complex complex3 = complex2.INF.createComplex(1759.2749, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.subtract((double) 1206);
      Complex complex5 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf(560.078, 560.078);
      List<Complex> list0 = complex2.INF.nthRoot(639);
      int int0 = complex1.I.hashCode();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex5.I.multiply(0.0);
      Complex complex8 = complex6.ZERO.subtract(1.5707963267948966);
      Complex complex9 = complex2.ZERO.exp();
      double double1 = complex3.INF.getArgument();
      Complex complex10 = complex9.ZERO.reciprocal();
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex0.divide(complex2);
      double double2 = complex3.getArgument();
      List<Complex> list1 = complex5.nthRoot(639);
      Complex complex14 = complex4.add(complex2);
      Complex complex15 = complex14.log();
      Complex complex16 = complex1.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt();
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.acos();
      Complex complex4 = null;
      try { 
        complex2.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.log();
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.multiply(2114);
      Complex complex5 = complex0.I.add(0.7853981633974483);
      double double1 = complex2.getReal();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex5.ONE.subtract(Double.NaN);
      List<Complex> list0 = complex6.ONE.nthRoot(1284);
      Complex complex8 = complex5.subtract(Double.NaN);
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex8.NaN.sqrt1z();
      double double2 = complex6.abs();
      Complex complex11 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ONE.pow(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      double double0 = complex1.abs();
      Complex complex7 = complex3.log();
      List<Complex> list0 = complex0.INF.nthRoot(1178);
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex0.log();
      double double1 = complex6.getImaginary();
      Complex complex10 = complex6.createComplex(2593.972935, 2593.972935);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.divide(complex1);
      Complex complex7 = Complex.valueOf(0.0, 405.07220554816803);
      Complex complex8 = complex6.createComplex(226.755436436714, 226.755436436714);
      Object object0 = complex5.readResolve();
      Complex complex9 = complex2.pow((-52.748812309761));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.3401958604540354E-7));
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex1.ZERO.abs();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex1.add(2281.93030395723);
      Complex complex7 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add((-333.79710119));
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex3.I.multiply((-333.79710119));
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex5.INF.log();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex1.divide(complex5);
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(613.2341);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.I.createComplex(1916.8635143209783, 1916.8635143209783);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex4.INF.divide(880.99);
      String string0 = complex4.I.toString();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ONE.createComplex(3260.550885457141, 1916.8635143209783);
      Complex complex8 = complex3.cos();
      Complex complex9 = complex0.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1765.757097589));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ZERO.log();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(3478.7, 3478.7);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.divide((-3397.430842));
      Complex complex5 = Complex.valueOf(3478.7, (-3397.430842));
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.pow(complex0);
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex0.divide(complex4);
      Complex complex9 = complex5.tan();
      Complex complex10 = complex7.subtract(complex4);
      Complex complex11 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex2.ONE.sqrt();
      Complex complex6 = complex1.ZERO.createComplex(1796.8978940458, 1796.8978940458);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex6.I.createComplex((-235.76094833236), (-2012.2544215695261));
      Complex complex9 = complex6.INF.subtract(1.0);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex10 = complex5.multiply((-1730.08));
      double double0 = complex0.abs();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex11.sin();
      int int0 = complex11.NaN.hashCode();
      Complex complex13 = complex11.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.ONE.sqrt1z();
      Complex complex15 = complex5.pow(1796.8978940458);
      List<Complex> list0 = complex15.NaN.nthRoot(2626);
      Complex complex16 = complex2.subtract(complex1);
      Complex complex17 = complex16.sqrt();
      double double1 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-484.8941378));
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = Complex.valueOf(0.0);
      double double1 = complex4.I.getArgument();
      List<Complex> list0 = complex2.I.nthRoot(352);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex6 = complex1.ONE.sinh();
      int int0 = complex0.hashCode();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.ZERO.exp();
      Complex complex9 = complex7.INF.subtract(3.2940421731384895E-113);
      ComplexField complexField1 = complex9.I.getField();
      int int1 = complex1.hashCode();
      Complex complex10 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1125.33938416717), (-1125.33938416717));
      Complex complex1 = complex0.INF.pow((-1125.33938416717));
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.subtract((-1307.38));
      Complex complex4 = Complex.valueOf((-3460.9183), 8.720743087611513E168);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex4.ONE.sqrt();
      double double0 = complex3.abs();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex6.sin();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = new Complex((-2142.5));
      Complex complex3 = Complex.valueOf((-1787.2053987684192));
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.createComplex((-1787.2053987684192), (-1787.2053987684192));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.add(1987.8543344192);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.subtract(621.5);
      Complex complex3 = complex0.multiply(621.5);
      List<Complex> list0 = complex0.nthRoot(116);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1155.79988993);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex3.INF.negate();
      Complex complex8 = Complex.valueOf(1155.79988993);
      Object object0 = complex5.readResolve();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = Complex.valueOf(1155.79988993);
      Complex complex12 = complex11.subtract(complex8);
      Complex complex13 = complex6.exp();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex13.createComplex(1155.79988993, 1155.79988993);
      Complex complex16 = complex13.multiply(complex3);
      Complex complex17 = complex16.I.multiply((-4365));
      Complex complex18 = complex14.sqrt1z();
      try { 
        complex9.nthRoot((-4365));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,365
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.asin();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ONE.divide(20.0);
      Complex complex5 = Complex.valueOf(0.7853981633974483);
      Complex complex6 = complex2.sinh();
      double double1 = complex2.getImaginary();
      Complex complex7 = Complex.INF;
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.INF.pow(0.0);
      boolean boolean0 = complex0.equals((Object) null);
      double double0 = complex0.getArgument();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex4.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.I.tan();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex1.add(0.10379679501056671);
      Complex complex5 = complex1.tan();
      double double0 = complex5.ZERO.abs();
      Complex complex6 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = Complex.valueOf(418.599340710937, 2781.220704657);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.ZERO.divide(complex7);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.NaN.log();
      int int0 = complex9.NaN.hashCode();
      Complex complex11 = complex3.NaN.divide(complex10);
      try { 
        complex10.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.pow((-694.2263844545756));
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2304.853371), (-2304.853371));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex0.ONE.multiply((-2304.853371));
      double double0 = complex4.I.getArgument();
      Complex complex6 = complex1.multiply(2351.721922);
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.ONE.divide(Double.NaN);
      Complex complex9 = complex6.acos();
      Complex complex10 = complex4.negate();
      double double1 = complex5.getReal();
      Complex complex11 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(5568.242468959368);
      Complex complex1 = new Complex(5568.242468959368, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.pow(362.2509);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.I.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex0.I.getArgument();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.createComplex(1.5707963267948966, 1.5707963267948966);
      boolean boolean0 = complex8.isNaN();
      Complex complex9 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex2.ONE.createComplex(0.0, 1.43695591408832E-9);
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.ZERO.multiply(262);
      Complex complex9 = Complex.valueOf(463.063, 0.0);
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(3293.105739903, 3293.105739903);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.INF.sinh();
      double double0 = complex3.ONE.abs();
      Complex complex5 = complex2.INF.exp();
      int int0 = complex2.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex5.subtract(1009.9236930476161);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.multiply(complex6);
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.INF.log();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1949.335622384);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.ONE.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex3.conjugate();
      ComplexField complexField1 = complex7.getField();
      Complex complex8 = complex7.multiply(1949.335622384);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-141.72788));
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex0.add(4.439791652732591E81);
      Complex complex5 = Complex.valueOf(772.9317084, 4.439791652732591E81);
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex5.pow((-1691.3844990644));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = Complex.valueOf((double) 1);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.ZERO.add((double) 1);
      Complex complex8 = complex0.divide(3.2231452986239366E-298);
      Complex complex9 = complex8.sqrt();
      Object object0 = complex8.readResolve();
      Complex complex10 = complex8.log();
      Object object1 = complex0.readResolve();
      Complex complex11 = complex5.cosh();
      Object object2 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2254.7108354));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex4.subtract(0.0);
      double double0 = complex4.getReal();
      double double1 = complex3.getArgument();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.439903710393587E-8, 0.0);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex0.I.multiply(1049);
      Complex complex6 = complex0.createComplex(3424.9568942219003, 0.0);
      Complex complex7 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1972.6938445187618);
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf((double) 2292, (-36.86));
      Complex complex2 = complex0.INF.multiply(2292);
      Complex complex3 = complex2.reciprocal();
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.cosh();
      try { 
        complex0.nthRoot((-547));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -547
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = new Complex(6.283185307179586);
      Complex complex2 = complex0.ONE.pow((-5.159602957634814E-9));
      Complex complex3 = complex0.pow(complex1);
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.I.sqrt1z();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex4.subtract(complex3);
      Complex complex8 = complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(7.561041519403049E-9, (-1639.107772831623));
      Complex complex1 = complex0.NaN.divide((-1639.107772831623));
      Complex complex2 = Complex.valueOf(7.561041519403049E-9);
      Complex complex3 = complex0.add(1.0);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(3540.1, 0.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex4.NaN.createComplex(3540.1, 0.0);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex3.NaN.reciprocal();
      double double0 = complex1.INF.getArgument();
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex8.ZERO.multiply((-2069));
      Complex complex11 = complex8.multiply(1);
      Complex complex12 = complex1.cos();
      Complex complex13 = complex1.createComplex(0.0, 0.0);
      Complex complex14 = complex1.negate();
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add((-333.79710119));
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex4.INF.log();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex1.divide(complex4);
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      int int0 = complex0.INF.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex4.INF.createComplex(0.0, 0.0);
      Complex complex7 = complex2.INF.acos();
      Complex complex8 = complex4.ZERO.reciprocal();
      Complex complex9 = complex8.I.subtract(0.0);
      Complex complex10 = complex0.INF.negate();
      double double1 = complex3.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex3.atan();
      Complex complex12 = complex0.I.multiply(0.0);
      int int1 = complex11.ZERO.hashCode();
      Complex complex13 = complex0.sinh();
      Complex complex14 = Complex.valueOf(2090.1704954);
      Complex complex15 = complex14.ONE.divide(20.0);
      Complex complex16 = complex15.NaN.sqrt1z();
      Complex complex17 = complex4.subtract(complex2);
      Complex complex18 = complex17.NaN.sqrt();
      List<Complex> list0 = complex13.nthRoot(2976);
      ComplexField complexField1 = complex12.getField();
      Complex complex19 = complex10.multiply((-1842.2069369826377));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.subtract((-1404.593));
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.add((-2423.607029456735));
      try { 
        complex3.ZERO.nthRoot((-233));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -233
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.I.divide((-791.99618));
      Complex complex4 = complex2.ZERO.conjugate();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.valueOf(0.38441169261932373);
      Complex complex7 = complex1.INF.subtract(complex0);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex0.createComplex(6.283185307179586, 0.3936265707015991);
      Complex complex13 = complex3.sinh();
      double double0 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1574.83016567));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex0.I.tanh();
      Complex complex6 = Complex.valueOf((-1574.83016567), (-1574.83016567));
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.NaN.multiply((-1574.83016567));
      Complex complex9 = complex8.ONE.multiply(1);
      boolean boolean0 = complex2.equals(complex1);
      Complex complex10 = complex4.subtract(1862.737084);
      Complex complex11 = complex10.NaN.createComplex(1862.737084, 1862.737084);
      Complex complex12 = Complex.valueOf(1862.737084);
      Complex complex13 = complex2.INF.multiply(complex1);
      Complex complex14 = complex10.tan();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex15 = Complex.valueOf(1862.737084, 0.0);
      double double0 = complex12.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex16 = complex12.reciprocal();
      Complex complex17 = complex16.atan();
      Complex complex18 = complex13.subtract((double) 1);
      Complex complex19 = complex4.sinh();
      Complex complex20 = complex2.tan();
      Complex complex21 = complex11.reciprocal();
      Complex complex22 = complex4.sqrt1z();
      Complex complex23 = complex3.cosh();
      Object object0 = complex6.readResolve();
      Complex complex24 = Complex.valueOf(2.4667033200046904E-8, 1862.737084);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(20.0, Double.NaN);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.I.reciprocal();
      int int0 = complex4.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex8.INF.cos();
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex0.negate();
      double double0 = complex12.ONE.abs();
      Complex complex13 = complex12.cos();
      boolean boolean1 = complex10.isNaN();
      Complex complex14 = complex13.multiply(complex11);
      boolean boolean2 = complex4.isNaN();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-2279.4338397321), (-2279.4338397321));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sqrt1z();
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.NaN.negate();
      String string0 = complex3.ONE.toString();
      double double1 = complex2.ZERO.abs();
      Complex complex6 = complex4.NaN.negate();
      Complex complex7 = complex6.ONE.pow(complex3);
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex9.ZERO.negate();
      double double2 = complex4.getImaginary();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex2.ONE.add(210.3909890683);
      Complex complex13 = complex11.I.cos();
      Complex complex14 = complex2.acos();
      Complex complex15 = complex0.tan();
      Complex complex16 = complex6.tan();
      Complex complex17 = complex16.INF.negate();
      boolean boolean0 = complex11.isNaN();
      try { 
        complex15.nthRoot((-1712));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,712
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(3.625141007634431E-34);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.I.divide((-20.0));
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.I.sin();
      Complex complex6 = Complex.valueOf(0.0, (-20.0));
      Complex complex7 = complex0.INF.tanh();
      Complex complex8 = Complex.valueOf(529.9918218);
      Complex complex9 = complex8.ZERO.divide(complex4);
      Complex complex10 = complex9.INF.multiply(3.625141007634431E-34);
      Complex complex11 = complex3.I.createComplex(0.0, 0.0);
      Complex complex12 = complex3.multiply(complex8);
      Complex complex13 = complex10.add(complex2);
      Complex complex14 = Complex.valueOf((-20.0), 3.625141007634431E-34);
      Complex complex15 = complex12.acos();
      double double0 = complex15.getArgument();
      double double1 = complex4.getArgument();
      Complex complex16 = complex8.multiply((-1686));
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 2831.285908981;
      Complex complex1 = complex0.I.multiply(2831.285908981);
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.INF.asin();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = Complex.valueOf(2995.742271);
      Complex complex5 = complex4.ZERO.subtract(complex3);
      Complex complex6 = complex0.divide(complex4);
      int int1 = complex6.ONE.hashCode();
      double double1 = (-2576.349631);
      Complex complex7 = complex1.ONE.add((-2576.349631));
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex1.tan();
      try { 
        complex7.NaN.nthRoot((-2146855440));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,146,855,440
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2294.7441109), 2068.063);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.pow((-2294.7441109));
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.I.divide(complex0);
      Complex complex6 = complex5.subtract(2068.063);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex3.multiply(complex7);
  }
}
