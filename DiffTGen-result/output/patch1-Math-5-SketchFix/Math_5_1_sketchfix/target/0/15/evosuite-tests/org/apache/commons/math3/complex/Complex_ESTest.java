/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:07:26 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6633478556884994E190, Double.NaN);
      double double0 = complex0.abs();
      Complex complex1 = complex0.pow(Double.NaN);
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex1.ONE.divide((-748.2703802));
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = Complex.valueOf((-748.2703802), Double.NaN);
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex6.NaN.multiply(complex1);
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex6.exp();
      Object object0 = complex9.I.readResolve();
      Complex complex10 = complex1.INF.cos();
      ComplexField complexField0 = complex5.getField();
      Complex complex11 = complex2.ONE.multiply(Double.NaN);
      Complex complex12 = complex5.pow(Double.NaN);
      double double1 = complex7.ONE.abs();
      Complex complex13 = complex5.INF.sqrt1z();
      Complex complex14 = complex6.acos();
      Complex complex15 = complex7.exp();
      Complex complex16 = complex14.INF.tan();
      Complex complex17 = Complex.valueOf(1.6633478556884994E190, 1069.461207);
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex4.equals(complex12);
      Complex complex18 = complex14.pow(complex13);
      Complex complex19 = Complex.valueOf(0.33675122261047363);
      List<Complex> list0 = complex15.nthRoot(1);
      boolean boolean3 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1432.21075752, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-3200.482688047814));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(6.283185307179586);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.ZERO.add(complex2);
      Complex complex5 = complex4.I.tanh();
      ComplexField complexField0 = complex3.INF.getField();
      Object object0 = complex0.readResolve();
      Complex complex6 = Complex.valueOf((-3200.482688047814), (-3200.482688047814));
      Object object1 = complex6.readResolve();
      int int0 = complex1.hashCode();
      Complex complex7 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3200.482688047814));
      Complex complex11 = complex1.acos();
      double double0 = complex1.abs();
      ComplexField complexField1 = complex1.getField();
      Complex complex12 = complex9.cos();
      Complex complex13 = complex9.createComplex(4346.019509, 4.3828918300477925E-8);
      Complex complex14 = complex13.subtract(0.0);
      Complex complex15 = complex9.exp();
      Complex complex16 = complex15.log();
      Complex complex17 = complex16.NaN.negate();
      Complex complex18 = new Complex(1440.07336403, 1440.07336403);
      Complex complex19 = complex1.multiply(complex18);
      Complex complex20 = complex2.add(4346.019509);
      Complex complex21 = complex1.subtract(complex11);
      Complex complex22 = complex9.sqrt1z();
      double double1 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.multiply(68.468982171351);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.asin();
      List<Complex> list0 = complex0.ZERO.nthRoot(862);
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.NaN.acos();
      Complex complex12 = complex10.acos();
      Complex complex13 = complex4.pow(complex10);
      double double0 = complex9.getArgument();
      Complex complex14 = complex6.add(complex12);
      boolean boolean0 = complex0.equals(complex9);
      String string0 = complex6.toString();
      Complex complex15 = complex5.sqrt1z();
      Complex complex16 = complex7.multiply(complex4);
      Object object0 = complex16.ZERO.readResolve();
      Complex complex17 = complex11.exp();
      List<Complex> list1 = complex11.nthRoot(862);
      double double1 = complex6.getReal();
      Complex complex18 = complex16.createComplex(402.667016203, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, Double.NaN);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex1.ZERO.asin();
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.INF.subtract(628.453996);
      Complex complex11 = complex10.ZERO.sqrt1z();
      Complex complex12 = complex1.add((-5.688830723853217E-8));
      Complex complex13 = complex11.ONE.multiply(0.0);
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex0.multiply(628.453996);
      Object object0 = complex14.I.readResolve();
      boolean boolean0 = complex9.isNaN();
      Complex complex16 = complex9.add(complex1);
      double double0 = complex0.getArgument();
      int int0 = complex5.hashCode();
      Complex complex17 = complex16.negate();
      Complex complex18 = complex4.asin();
      Complex complex19 = complex9.cosh();
      Complex complex20 = complex19.ZERO.sin();
      Complex complex21 = complex8.multiply(1768.3);
      Complex complex22 = complex18.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2.883847036065813E-246));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex4.ONE.sqrt();
      double double0 = complex4.ONE.getArgument();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex6.sin();
      String string0 = complex9.I.toString();
      Complex complex10 = complex6.multiply(complex0);
      Complex complex11 = complex9.NaN.add((-2.883847036065813E-246));
      String string1 = complex10.I.toString();
      double double1 = complex10.getImaginary();
      int int0 = complex11.hashCode();
      Complex complex12 = complex6.sqrt();
      boolean boolean0 = complex9.isInfinite();
      Complex complex13 = complex2.add(complex11);
      Complex complex14 = Complex.valueOf((-2.883847036065813E-246));
      Complex complex15 = complex2.atan();
      Complex complex16 = complex6.INF.multiply(complex2);
      Complex complex17 = complex10.createComplex(Double.NaN, (-2.883847036065813E-246));
      Complex complex18 = complex15.multiply(complex17);
      Complex complex19 = complex9.divide(complex0);
      double double2 = complex9.getArgument();
      Complex complex20 = complex18.createComplex(216.4511647987304, (-2.883847036065813E-246));
      Complex complex21 = complex20.NaN.sqrt();
      Complex complex22 = complex21.I.tanh();
      Complex complex23 = complex2.exp();
      Complex complex24 = complex5.add(216.4511647987304);
      Complex complex25 = complex17.cos();
      Complex complex26 = complex15.sqrt1z();
      Complex complex27 = complex13.multiply(complex4);
      Complex complex28 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex3.INF.add(0.0);
      Object object1 = complex4.ONE.readResolve();
      ComplexField complexField0 = complex1.ZERO.getField();
      double double0 = complex0.abs();
      boolean boolean0 = complex3.isNaN();
      double double1 = complex1.abs();
      Complex complex5 = complex1.exp();
      double double2 = complex1.abs();
      Complex complex6 = complex4.createComplex(1.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.createComplex((-3.732266217624991E251), (-2331.9471831422807));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.INF.add(complex4);
      Complex complex7 = Complex.valueOf((-3.732266217624991E251), (-3.732266217624991E251));
      Complex complex8 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2962.83265597605));
      Complex complex1 = new Complex((-2962.83265597605));
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.INF.divide(complex1);
      double double0 = complex0.ONE.getArgument();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.subtract(0.0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(5179.946491759541);
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex4.negate();
      String string0 = complex3.INF.toString();
      Complex complex6 = complex0.add(2365.0269097942);
      Complex complex7 = complex6.createComplex(1906.1, 1906.1);
      Complex complex8 = complex4.divide((-2.749127978087685E126));
      Complex complex9 = complex4.INF.cosh();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-861.635750492449));
      Complex complex1 = complex0.multiply((-861.635750492449));
      Complex complex2 = complex1.ONE.pow((-861.635750492449));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex3.INF.divide(0.0);
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex1.ONE.multiply(complex5);
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex7.NaN.negate();
      Complex complex12 = complex8.createComplex((-861.635750492449), 0.0);
      double double0 = complex1.abs();
      Complex complex13 = complex12.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = new Complex((-3.130508064738312E-14));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.valueOf((-2158.462460149));
      Complex complex5 = complex2.I.acos();
      double double0 = complex3.getArgument();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex7.INF.createComplex((-3.130508064738312E-14), (-3.130508064738312E-14));
      Complex complex10 = complex7.NaN.sinh();
      Complex complex11 = complex1.ZERO.sqrt1z();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.NaN.sqrt();
      Complex complex14 = complex13.ONE.sqrt();
      Complex complex15 = complex10.divide(1564.499);
      double double1 = complex7.getArgument();
      Complex complex16 = complex0.atan();
      Complex complex17 = complex0.cosh();
      Complex complex18 = Complex.valueOf(805.265);
      Complex complex19 = complex1.sqrt1z();
      Complex complex20 = complex19.pow(1.5707963267948966);
      Complex complex21 = complex15.sinh();
      Complex complex22 = complex6.multiply((-3.130508064738312E-14));
      Complex complex23 = complex17.negate();
      Complex complex24 = complex0.atan();
      boolean boolean0 = complex6.equals(complex14);
      Object object0 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      double double2 = complex0.getReal();
      Complex complex1 = complex0.multiply((-652));
      Complex complex2 = complex1.INF.add((-2939.8223722063212));
      Complex complex3 = complex0.pow((-1069.2080871892356));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex2.multiply(0);
      Complex complex6 = complex5.INF.createComplex((-1.0), 0.0);
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex2.pow(328.9709100693);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2209.05518));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.divide(complex1);
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex3 = complex0.reciprocal();
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex4.INF.reciprocal();
      Complex complex7 = complex5.ONE.conjugate();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex3.ZERO.pow((-810.180632852881));
      Complex complex10 = complex7.ZERO.sqrt();
      Complex complex11 = complex5.createComplex(1, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex12 = complex4.ZERO.log();
      Complex complex13 = complex2.pow(complex7);
      Complex complex14 = complex4.tan();
      Complex complex15 = complex10.log();
      Complex complex16 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex1.INF.divide(0.0);
      Complex complex5 = complex3.NaN.divide(complex2);
      double double0 = complex3.getImaginary();
      Complex complex6 = complex2.conjugate();
      double double1 = complex3.getArgument();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.divide(0.0);
      boolean boolean0 = complex9.equals(complex2);
      Complex complex10 = complex0.multiply(0.0);
      Complex complex11 = Complex.ONE;
      boolean boolean1 = complex9.equals(complex11);
      Complex complex12 = complex10.acos();
      Complex complex13 = complex12.ZERO.sin();
      Complex complex14 = Complex.valueOf((-20.0));
      Complex complex15 = complex2.pow(complex14);
      Complex complex16 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(37);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex4.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-8.436135220472006E-9));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.ZERO.multiply(1168.9819642);
      double double0 = complex3.INF.abs();
      String string0 = complex2.I.toString();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex4.I.createComplex(5.92044714050651E-233, 5.92044714050651E-233);
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex1.sqrt();
      double double1 = complex7.ONE.getArgument();
      Complex complex8 = complex7.ONE.subtract((-8.436135220472006E-9));
      Complex complex9 = complex8.createComplex(Double.POSITIVE_INFINITY, 1983.5);
      Object object0 = complex0.readResolve();
      Complex complex10 = complex7.NaN.conjugate();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex4.NaN.reciprocal();
      Complex complex13 = complex10.NaN.sqrt1z();
      Complex complex14 = complex11.ZERO.multiply(297);
      Complex complex15 = complex1.exp();
      Complex complex16 = complex6.I.sqrt1z();
      boolean boolean0 = complex6.isNaN();
      Complex complex17 = complex6.tan();
      Complex complex18 = complex2.cos();
      double double2 = complex1.abs();
      boolean boolean1 = complex14.isNaN();
      Complex complex19 = complex7.I.cos();
      ComplexField complexField0 = complex14.getField();
      double double3 = complex19.abs();
      Complex complex20 = complex3.exp();
      Complex complex21 = complex10.multiply(complex14);
      Complex complex22 = complex13.pow(1168.9819642);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1439.126705765, 1439.126705765);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.acos();
      double double1 = complex0.abs();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.sqrt();
      int int0 = complex6.hashCode();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.INF.acos();
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex1.divide((-3577.0479));
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.INF.divide(2699.6657);
      Complex complex12 = complex4.negate();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex13 = complex10.NaN.multiply(1);
      Complex complex14 = complex7.multiply(complex5);
      Complex complex15 = complex0.divide(complex1);
      Complex complex16 = complex10.acos();
      Complex complex17 = complex10.createComplex((-3577.0479), (-1485.9457146673465));
      Complex complex18 = complex11.subtract((-4840.374352782364));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2978.776464806), (-2978.776464806));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(245.812);
      Complex complex1 = Complex.valueOf(245.812);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.ZERO.reciprocal();
      double double0 = complex4.getArgument();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.sqrt();
      boolean boolean0 = complex6.equals((Object) null);
      Complex complex7 = complex5.ONE.atan();
      Object object0 = complex5.readResolve();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex4.add(complex1);
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = complex7.negate();
      Complex complex12 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.ONE.add(complex0);
      Complex complex4 = complex1.ZERO.reciprocal();
      Complex complex5 = complex4.I.add(complex2);
      Complex complex6 = complex3.ZERO.exp();
      Complex complex7 = complex1.ZERO.createComplex(0.0, 3.91527572177694E207);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex0.createComplex((-3005.84025494042), (-3005.84025494042));
      Complex complex10 = complex3.pow(2094.33634881);
      Complex complex11 = complex9.multiply((-776.2561521184));
      Complex complex12 = complex0.add((-3005.84025494042));
      int int0 = complex12.I.hashCode();
      Complex complex13 = complex11.pow(complex4);
      Complex complex14 = complex13.INF.multiply((-20.0));
      Complex complex15 = complex5.add(complex1);
      Complex complex16 = complex9.log();
      double double0 = complex7.getReal();
      Complex complex17 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1710.8), (-1710.8));
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.INF.multiply(complex1);
      String string1 = complex2.I.toString();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex4.I.add(2.0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex6 = complex2.I.sinh();
      int int0 = complex0.hashCode();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      Complex complex5 = complex4.ONE.negate();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.multiply(complex3);
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = Complex.valueOf((double) 17, 0.0);
      Complex complex10 = complex3.negate();
      double double1 = complex6.getImaginary();
      Complex complex11 = complex6.add(complex0);
      Complex complex12 = complex11.I.subtract(complex2);
      Complex complex13 = complex11.cos();
      Object object0 = complex1.readResolve();
      Complex complex14 = complex6.subtract(Double.NaN);
      Complex complex15 = complex8.multiply((double) 17);
      Complex complex16 = Complex.valueOf(0.0, Double.NaN);
      Complex complex17 = complex0.multiply(408);
      Complex complex18 = complex0.divide((-1.0809972724404233E-287));
      Complex complex19 = complex13.asin();
      double double2 = complex15.getReal();
      Complex complex20 = complex14.cos();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      double double0 = complex0.abs();
      Complex complex2 = complex0.NaN.divide(Double.NaN);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf((-81.3), Double.NaN);
      Complex complex5 = complex0.add(Double.NaN);
      Complex complex6 = complex1.sin();
      double double1 = complex0.abs();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex7.NaN.divide(1269.5);
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex8.add(62.13515259);
      Complex complex11 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.sin();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.ZERO.add(0.0);
      Complex complex4 = complex0.multiply(2210);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-586.1), 2566.614);
      List<Complex> list0 = complex0.nthRoot(1248);
      Complex complex1 = Complex.valueOf(Double.NaN, 4745.3874896610505);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.subtract((-1436.223));
      Complex complex2 = complex0.I.subtract((-1436.223));
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex2.abs();
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-339.3342925699625));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.acos();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex0.subtract(complex2);
      double double1 = complex0.getReal();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.INF.multiply(complex4);
      Complex complex7 = complex3.negate();
      boolean boolean0 = complex5.isNaN();
      Complex complex8 = complex1.NaN.pow((-339.3342925699625));
      Complex complex9 = complex3.multiply(1827);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(301.842291972);
      Complex complex1 = complex0.ONE.divide((-6911.342812648396));
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.I.add(complex0);
      ComplexField complexField0 = complex3.NaN.getField();
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getArgument();
      List<Complex> list0 = complex0.nthRoot(925);
      Complex complex6 = complex1.divide(complex0);
      double double1 = complex6.ZERO.abs();
      double double2 = complex6.getArgument();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex4.createComplex((-20.0), 3.141592653589793);
      Complex complex10 = complex9.ZERO.multiply(complex4);
      Complex complex11 = Complex.valueOf((-20.0), (double) 925);
      Complex complex12 = complex7.cosh();
      Complex complex13 = new Complex(0.0, (-6911.342812648396));
      Complex complex14 = Complex.valueOf(3.141592653589793);
      Complex complex15 = complex13.I.multiply(complex14);
      Complex complex16 = complex5.multiply(complex13);
      Complex complex17 = complex5.add(complex0);
      boolean boolean0 = complex5.equals(complex7);
      boolean boolean1 = complex10.equals(complex1);
      Complex complex18 = complex4.sinh();
      Complex complex19 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1911.5));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.multiply(498);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.divide((-2366.937));
      Complex complex2 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide((-23.53));
      List<Complex> list0 = complex0.nthRoot(351);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2101.28003346));
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1829.93));
      double double0 = complex0.NaN.abs();
      List<Complex> list0 = complex0.INF.nthRoot(1062);
      Complex complex1 = new Complex((-1829.93));
      Complex complex2 = complex0.ZERO.add(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = Complex.valueOf(6.283185307179586, 1.5948774814605713);
      boolean boolean0 = complex0.equals(object0);
      double double1 = complex0.getReal();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1122.5873346759);
      Complex complex1 = Complex.valueOf(0.0, 1122.5873346759);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(1.026763015362553E-281, 8.711129287069315E-8);
      Complex complex4 = complex3.pow(660.9923345843);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex0.createComplex(1.026763015362553E-281, 0.0);
      Complex complex7 = complex6.INF.sqrt();
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex4.atan();
      Complex complex9 = complex8.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-542.1925765));
      Complex complex1 = complex0.I.add(0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      Complex complex3 = complex0.subtract((-1391.4071132));
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex3.multiply((-1391.4071132));
      Complex complex5 = complex1.exp();
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = Complex.valueOf(0.0, 702.0);
      Complex complex8 = complex6.reciprocal();
      boolean boolean1 = complex8.isNaN();
      Complex complex9 = complex2.pow(702.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(180.72562493);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.INF.reciprocal();
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-4276.311));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.subtract((-4276.311));
      Complex complex4 = complex3.ONE.sin();
      boolean boolean0 = complex2.isNaN();
      Complex complex5 = complex2.atan();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.INF.tan();
      double double0 = complex0.abs();
      Complex complex3 = complex2.INF.add(Double.NaN);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.multiply(1);
      int int0 = complex2.hashCode();
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      Complex complex7 = complex0.INF.divide(complex6);
      int int1 = complex2.hashCode();
      Complex complex8 = complex0.ZERO.acos();
      Complex complex9 = complex4.log();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex7.I.pow(Double.NaN);
      Complex complex12 = complex9.atan();
      Complex complex13 = complex1.I.asin();
      Complex complex14 = complex0.tanh();
      int int2 = complex14.INF.hashCode();
      Complex complex15 = complex2.subtract(Double.NaN);
      double double1 = complex15.getArgument();
      Complex complex16 = complex6.multiply(complex7);
      Complex complex17 = complex16.ONE.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex18 = complex16.add(Double.NaN);
      Complex complex19 = complex16.pow((double) 1);
      boolean boolean1 = complex18.isInfinite();
      Complex complex20 = complex6.divide(complex8);
      int int3 = complex18.hashCode();
      String string0 = complex20.toString();
      Complex complex21 = Complex.valueOf(0.0, 0.0);
      Complex complex22 = complex7.multiply(complex1);
      Complex complex23 = complex9.createComplex(1253.5519697248972, 1253.5519697248972);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.subtract(2.4289317341982113E-8);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex1.multiply(5.440559532453721E-75);
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.ZERO.divide(5.440559532453721E-75);
      Complex complex4 = complex0.ZERO.sqrt1z();
      List<Complex> list0 = complex4.ZERO.nthRoot(1);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.INF.exp();
      Complex complex7 = complex5.INF.createComplex(1.0, 1312.52246862754);
      Complex complex8 = complex6.sin();
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex5.acos();
      Complex complex11 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3313.636992946291), (-8.472642266772353E218));
      Complex complex1 = complex0.NaN.add((-8.472642266772353E218));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.log();
      double double0 = complex3.abs();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.pow(0.0);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1035.72732), (-1035.72732));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.sin();
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = Complex.valueOf(3986.7931);
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex2.tan();
      int int0 = complex1.hashCode();
      int int1 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1885.0, 1885.0);
      Complex complex1 = complex0.ONE.multiply(997);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.add(complex2);
      Object object0 = complex0.ONE.readResolve();
      Complex complex5 = complex0.multiply((-1150.0748744));
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex6.multiply(0.6306898593902588);
      Complex complex9 = complex5.multiply(complex0);
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex5.tan();
      Complex complex12 = complex5.acos();
      double double0 = complex12.NaN.getArgument();
      Complex complex13 = complex0.createComplex(1885.0, 1885.0);
      int int0 = complex9.hashCode();
      Complex complex14 = complex3.subtract(complex13);
      Object object1 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.NaN.createComplex((-1.0), (-1.0));
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex4.I.sqrt1z();
      String string0 = complex0.toString();
      double double0 = complex1.getImaginary();
      Complex complex6 = complex3.multiply((-2109));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.621509038251498E-9, 5.621509038251498E-9);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.createComplex((-1180.1), 4162.6);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.NaN.sinh();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-95.745), 2950.70948357527);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = Complex.valueOf(2950.70948357527);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.ZERO.divide(complex2);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.multiply(2955);
      Complex complex7 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      Complex complex2 = complex0.NaN.negate();
      try { 
        complex2.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = null;
      try { 
        complex2.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.NaN.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.ONE.cos();
      List<Complex> list0 = complex2.ZERO.nthRoot(2492);
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex6.I.multiply((double) 2492);
      double double2 = complex1.getArgument();
      Complex complex8 = complex2.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.I.divide(596.745872);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.INF.conjugate();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.divide(0.0);
      Complex complex7 = complex6.ONE.add(complex1);
      double double0 = complex0.getReal();
      double double1 = complex4.getReal();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex8.NaN.tanh();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1400.4926175);
      double double0 = complex1.abs();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3154.0, 3154.0);
      Complex complex2 = complex0.sinh();
      boolean boolean0 = complex2.isInfinite();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.createComplex(3154.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.pow(Double.NaN);
      Complex complex6 = Complex.valueOf(19.18463, 19.18463);
      try { 
        complex3.nthRoot((-1165));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,165
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.I.atan();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1472.0), (-1472.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.atan();
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = Complex.valueOf(894.1487556);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.subtract((-238.81886));
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.add((-238.81886));
      Complex complex6 = complex0.multiply(117);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(594.553764341083, 2146.5129878247);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.multiply(247);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = Complex.valueOf(2146.5129878247, (double) 247);
      Complex complex6 = Complex.valueOf(2146.5129878247, 1093.9016926);
      Complex complex7 = Complex.valueOf(594.553764341083, 594.553764341083);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.NaN.pow(complex1);
      Complex complex10 = complex2.pow(complex0);
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex5.asin();
      Complex complex15 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.divide(0.0);
      boolean boolean0 = complex0.isNaN();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-215.985580414046));
      Complex complex1 = complex0.createComplex(293.1479647319, (-215.985580414046));
      double double0 = complex0.getReal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(399.6453607125);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex0.pow(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.tan();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals("");
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.multiply(37);
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3672.406309872858);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex1.divide(1302.0);
      Complex complex6 = complex1.NaN.tan();
      boolean boolean0 = complex0.isNaN();
      List<Complex> list0 = complex1.nthRoot(3353);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      boolean boolean1 = complex1.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = 3.931710344901743E-9;
      Complex complex0 = new Complex(3.931710344901743E-9);
      Complex complex1 = complex0.NaN.exp();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex1.pow(3.931710344901743E-9);
      try { 
        complex4.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = Complex.valueOf(2227.8245030106, 2227.8245030106);
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.NaN.createComplex(2227.8245030106, 0.0);
      Complex complex5 = complex3.cosh();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.NaN.pow(complex0);
      Complex complex9 = complex8.I.subtract(0.0);
      Complex complex10 = complex8.NaN.add(2227.8245030106);
      double double0 = complex7.NaN.abs();
      Complex complex11 = complex7.ZERO.sinh();
      Object object1 = complex1.readResolve();
      Complex complex12 = complex7.cos();
      Complex complex13 = complex6.multiply(complex0);
      Complex complex14 = complex13.I.subtract(2227.8245030106);
      Complex complex15 = complex6.cosh();
      Complex complex16 = complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3944.71532051));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex3.ONE.multiply(1952);
      Complex complex5 = complex4.INF.createComplex((-636.738), 17);
      Complex complex6 = Complex.valueOf((-3944.71532051), 1.234835147857666);
      double double0 = complex3.ZERO.getArgument();
      Complex complex7 = complex0.ZERO.log();
      Complex complex8 = complex7.ZERO.subtract(complex1);
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex9 = complex1.subtract(complex0);
      Complex complex10 = Complex.valueOf(0.45623743534088135, 218.74281);
      Complex complex11 = complex9.INF.add(complex10);
      Complex complex12 = complex1.add((-3944.71532051));
      Complex complex13 = complex12.negate();
      Complex complex14 = complex12.sqrt();
      int int0 = complex1.hashCode();
      Complex complex15 = complex9.I.pow((double) 1952);
      Complex complex16 = complex13.INF.exp();
      Complex complex17 = complex9.pow((-3944.71532051));
      Complex complex18 = complex17.INF.conjugate();
      double double1 = complex13.getReal();
      Complex complex19 = complex7.pow((double) 17);
      Complex complex20 = Complex.valueOf(4220.830336);
      ComplexField complexField0 = complex19.getField();
      Complex complex21 = complex11.cos();
      Complex complex22 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3081.274), (-3081.274));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex2.ZERO.add(0.0);
      Complex complex5 = complex4.INF.acos();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.subtract(0.37371641397476196);
      Complex complex7 = complex1.acos();
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.valueOf(0.0, 948.5);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex1.ZERO.divide(0.0);
      Complex complex6 = complex5.ZERO.reciprocal();
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = complex0.I.reciprocal();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex0.I.sin();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex12.ZERO.multiply(complex7);
      Complex complex14 = complex0.add(0.0);
      Complex complex15 = complex10.pow(0.0);
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex7.pow(complex0);
      String string0 = complex14.I.toString();
      Complex complex18 = complex17.ONE.sinh();
      Complex complex19 = complex7.sqrt1z();
      Complex complex20 = complex19.ZERO.multiply((-557.62296));
      Complex complex21 = complex14.sin();
      String string1 = complex15.toString();
      Complex complex22 = complex21.sqrt();
      Complex complex23 = complex22.ZERO.reciprocal();
      Complex complex24 = complex14.negate();
      double double0 = complex16.getArgument();
      Complex complex25 = complex3.tan();
      Complex complex26 = Complex.valueOf(0.0, 3.42171232580676E-8);
      Complex complex27 = Complex.valueOf(3.42171232580676E-8);
      String string2 = complex13.toString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      double double0 = complex0.I.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.NaN.divide(1.0);
      Complex complex5 = complex2.ONE.subtract(complex3);
      Complex complex6 = complex2.INF.reciprocal();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex7.ZERO.subtract(complex2);
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex9.I.multiply(2365);
      boolean boolean1 = complex0.isNaN();
      Complex complex11 = complex2.tan();
      double double1 = complex2.getReal();
      int int0 = complex7.hashCode();
      Complex complex12 = complex0.add(complex2);
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex11.multiply(complex7);
      Complex complex15 = complex11.cos();
      boolean boolean2 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.NaN.add(complex2);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = new Complex((-2953.2714), 0.0);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.ZERO.atan();
      Complex complex9 = complex5.ONE.tanh();
      int int0 = complex6.I.hashCode();
      int int1 = complex0.hashCode();
      double double0 = complex5.getImaginary();
      Complex complex10 = complex0.NaN.subtract(complex3);
      Complex complex11 = complex0.ZERO.multiply(0);
      Complex complex12 = complex5.multiply(1673);
      Complex complex13 = complex0.subtract((-1412.7106719142));
      Complex complex14 = complex9.acos();
      Complex complex15 = complex9.multiply(complex3);
      Complex complex16 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex2.ONE.reciprocal();
      Complex complex6 = complex5.INF.subtract(0.0);
      Complex complex7 = complex2.ONE.conjugate();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isInfinite();
      Complex complex8 = complex1.divide(complex3);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex7.ZERO.exp();
      Complex complex11 = complex2.pow(complex9);
      ComplexField complexField0 = complex7.getField();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex13 = complex0.ZERO.multiply((-316.68));
      Complex complex14 = complex5.atan();
      Complex complex15 = complex7.conjugate();
      Complex complex16 = complex6.sin();
      Object object0 = complex16.I.readResolve();
      Complex complex17 = complex0.add(complex1);
      Complex complex18 = complex15.ZERO.sqrt();
      Complex complex19 = complex8.multiply(0.0);
      Complex complex20 = complex8.cosh();
      Complex complex21 = complex12.add(complex5);
      double double0 = complex15.abs();
      Complex complex22 = complex19.reciprocal();
      Complex complex23 = complex16.sinh();
      Complex complex24 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.tanh();
      Object object0 = complex1.INF.readResolve();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex0.pow(8.846862323478745E-8);
      Complex complex3 = complex2.sinh();
      double double0 = complex1.INF.abs();
      Complex complex4 = complex0.divide(8.846862323478745E-8);
      boolean boolean2 = complex0.isInfinite();
      Complex complex5 = complex1.divide(0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex6.I.acos();
      int int1 = complex8.hashCode();
      Complex complex9 = complex5.ZERO.sqrt();
      Complex complex10 = complex5.INF.subtract((-111.1426356849));
      Complex complex11 = complex0.log();
      Complex complex12 = complex4.atan();
      Complex complex13 = complex5.negate();
      Complex complex14 = complex4.add(Double.POSITIVE_INFINITY);
      Complex complex15 = complex5.multiply((-1003));
      Complex complex16 = complex1.sqrt();
      Complex complex17 = complex10.createComplex(0.0, 3165.100771436);
      int int2 = complex14.hashCode();
      Complex complex18 = complex10.sinh();
      Complex complex19 = complex7.createComplex(0.0, 163.5778097407);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      List<Complex> list0 = complex0.INF.nthRoot(7);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.I.createComplex(2.0, 1760.3415782940287);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf((-720.38296));
      Complex complex6 = complex0.add(2.0);
      Complex complex7 = complex2.subtract((-720.38296));
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex1.sinh();
      List<Complex> list1 = complex9.NaN.nthRoot(7);
      Complex complex10 = complex4.tan();
      Complex complex11 = complex8.cos();
      Complex complex12 = complex4.subtract(complex11);
      Complex complex13 = complex12.negate();
      Complex complex14 = complex8.negate();
      String string0 = complex11.INF.toString();
      Complex complex15 = complex14.ONE.cos();
      Complex complex16 = complex8.add(complex12);
      Complex complex17 = complex3.add(1760.3415782940287);
      Complex complex18 = complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(903.0);
      Complex complex1 = complex0.sin();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.createComplex(903.0, 903.0);
      Complex complex3 = complex2.INF.add(complex1);
      Complex complex4 = complex2.ONE.multiply((-2615));
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex5 = complex1.NaN.cosh();
      String string0 = complex3.NaN.toString();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex3.subtract(903.0);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.INF.createComplex((-2615), 1.0);
      Complex complex10 = complex0.subtract((-1936.3));
      Complex complex11 = complex3.atan();
      Complex complex12 = complex0.multiply(complex1);
      Complex complex13 = complex11.sqrt();
      String string1 = complex7.toString();
      Complex complex14 = complex11.sinh();
      try { 
        complex12.nthRoot((-2615));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,615
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
