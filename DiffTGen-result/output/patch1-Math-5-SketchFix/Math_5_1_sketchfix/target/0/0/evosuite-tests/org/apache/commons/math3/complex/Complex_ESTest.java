/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:04:20 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 3.4082234423358275;
      Complex complex0 = Complex.valueOf(1.0, 3.4082234423358275);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Object object0 = complex2.readResolve();
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex3 = null;
      Complex complex4 = complex1.ZERO.reciprocal();
      try { 
        complex1.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1991.49), (-1991.49));
      Complex complex1 = complex0.pow((-1.01738658407525E-7));
      Complex complex2 = complex0.ZERO.pow((-1.01738658407525E-7));
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex4.log();
      Complex complex8 = complex6.add((-1991.49));
      Complex complex9 = Complex.valueOf((-1991.49));
      Complex complex10 = complex0.subtract(0.0);
      Complex complex11 = complex6.exp();
      Complex complex12 = complex7.log();
      Complex complex13 = complex3.divide(complex10);
      Complex complex14 = complex6.atan();
      Complex complex15 = complex8.add(complex9);
      Complex complex16 = complex0.createComplex(0.0, (-1.01738658407525E-7));
      Complex complex17 = complex12.pow(complex11);
      Complex complex18 = complex5.divide(0.0);
      Complex complex19 = complex17.cos();
      Complex complex20 = complex19.divide(0.0);
      Complex complex21 = complex5.createComplex(703.15, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(4.71524479659295E-8);
      Complex complex1 = new Complex(4.71524479659295E-8);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.createComplex(2464.990187404182, 2464.990187404182);
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex1.pow(1212.4738573961);
      Complex complex7 = complex6.subtract((-4332.26718691));
      Complex complex8 = complex6.createComplex((-20.0), (-2534.84714));
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex6.multiply((-6053));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(3.2671863888979078E277);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.ONE;
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex0.divide(complex2);
      boolean boolean0 = complex2.isInfinite();
      double double1 = complex2.getReal();
      Complex complex4 = complex0.conjugate();
      double double2 = complex4.ONE.abs();
      Complex complex5 = complex1.cos();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex1.I.acos();
      double double3 = complex2.getArgument();
      Complex complex9 = complex7.ONE.tanh();
      Complex complex10 = complex9.INF.cosh();
      Complex complex11 = complex1.sinh();
      try { 
        complex7.ZERO.nthRoot((-3120));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,120
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = Complex.NaN;
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.NaN.multiply((-20.0));
      Complex complex4 = complex3.ZERO.createComplex((-20.0), (-20.0));
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = complex4.NaN.cos();
      Object object1 = complex6.ONE.readResolve();
      Complex complex7 = Complex.valueOf(453.188447678);
      Complex complex8 = complex0.multiply(4373);
      Complex complex9 = Complex.valueOf((double) 4373);
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex1.add((double) 4373);
      Complex complex12 = complex1.subtract(1383.882742832);
      double double0 = complex12.NaN.getArgument();
      double double1 = complex3.getArgument();
      Complex complex13 = complex11.NaN.sqrt1z();
      Complex complex14 = complex9.divide(Double.NaN);
      Complex complex15 = complex11.subtract(Double.NaN);
      Complex complex16 = complex3.sqrt1z();
      Complex complex17 = complex16.createComplex(1383.882742832, 213.6685);
      Complex complex18 = complex15.sqrt1z();
      Complex complex19 = complex5.add(complex8);
      Complex complex20 = complex3.sqrt1z();
      int int0 = complex12.hashCode();
      Complex complex21 = complex15.createComplex(Double.NaN, Double.NaN);
      Complex complex22 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.ONE.subtract((-1.0));
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.ONE.sinh();
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex2.INF.multiply(complex5);
      Complex complex7 = complex5.INF.add(complex2);
      Complex complex8 = complex0.I.log();
      Complex complex9 = complex7.I.conjugate();
      Complex complex10 = complex9.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex4.multiply(1201);
      Complex complex12 = complex1.NaN.pow(complex0);
      Complex complex13 = complex12.I.tanh();
      Complex complex14 = complex0.tan();
      Complex complex15 = complex14.subtract(850.9);
      double double0 = complex1.getImaginary();
      Complex complex16 = complex9.cos();
      Complex complex17 = complex16.NaN.conjugate();
      Complex complex18 = Complex.valueOf((-1.0));
      Complex complex19 = complex11.multiply(0.0);
      Complex complex20 = complex5.multiply((-1.0));
      Complex complex21 = complex20.divide((-1.0));
      Complex complex22 = complex9.atan();
      Complex complex23 = complex15.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.ONE.asin();
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex1.ONE.add((-419.5537));
      int int0 = complex0.INF.hashCode();
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2253.4501);
      Complex complex2 = complex1.INF.createComplex((-1921.667537), 2253.4501);
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(2253.4501);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex5.ZERO.divide(complex4);
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex5.ONE.sinh();
      Complex complex9 = complex8.INF.acos();
      try { 
        complex4.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.7925807446276126E-8);
      Complex complex1 = complex0.ZERO.reciprocal();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.I.multiply(0);
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex4.INF.sin();
      String string0 = complex0.toString();
      Complex complex8 = complex4.cos();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.ONE.pow((double) 0);
      Complex complex10 = complex8.ONE.sin();
      Complex complex11 = complex8.add(complex4);
      Complex complex12 = complex3.INF.negate();
      Complex complex13 = complex8.sin();
      double double1 = complex3.getReal();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex8.pow(complex0);
      Complex complex16 = complex15.NaN.sinh();
      Complex complex17 = complex15.createComplex(0.0, (-1.054736327333046E-8));
      Complex complex18 = Complex.INF;
      Complex complex19 = complex17.ONE.add(complex18);
      Complex complex20 = complex1.pow(complex17);
      Complex complex21 = complex2.divide(complex8);
      Complex complex22 = complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(Double.NaN, 1035.979314);
      Complex complex5 = complex3.NaN.subtract(complex2);
      List<Complex> list0 = complex4.ZERO.nthRoot(440);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex1.multiply(1);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.add((double) 440);
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex3.add(complex7);
      double double1 = complex11.INF.abs();
      Complex complex12 = complex4.conjugate();
      Complex complex13 = complex12.NaN.pow(complex3);
      Complex complex14 = complex0.atan();
      ComplexField complexField0 = complex8.getField();
      Complex complex15 = complex7.multiply(2565.8196461);
      Complex complex16 = complex15.sqrt();
      Complex complex17 = complex7.divide(complex9);
      Complex complex18 = complex11.sin();
      Complex complex19 = complex15.add(Double.NaN);
      Complex complex20 = complex14.exp();
      Complex complex21 = complex20.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(187.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ZERO.multiply(187.0);
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.valueOf((-2411.12), (-2411.12));
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = Complex.valueOf((-2411.12), (-2411.12));
      boolean boolean0 = complex4.isNaN();
      Complex complex8 = complex7.INF.sin();
      double double0 = complex1.getImaginary();
      Complex complex9 = new Complex(Double.NaN, 187.0);
      boolean boolean1 = complex8.isInfinite();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex10.NaN.sqrt1z();
      Complex complex12 = complex10.ZERO.negate();
      Complex complex13 = complex7.add(Double.NaN);
      boolean boolean2 = complex11.isNaN();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1039.8368832));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.INF.createComplex(6.283185307179586, 0.0);
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.NaN.multiply((-1861));
      Object object0 = complex5.I.readResolve();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.subtract((-1039.8368832));
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex7.I.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.INF.subtract(complex0);
      Complex complex12 = complex10.NaN.sin();
      Object object1 = complex9.I.readResolve();
      boolean boolean0 = complex7.equals(complex9);
      Complex complex13 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex1.log();
      ComplexField complexField0 = complex14.ONE.getField();
      Complex complex15 = complex6.sqrt1z();
      Complex complex16 = complex0.divide(complex12);
      Complex complex17 = complex0.subtract(Double.POSITIVE_INFINITY);
      try { 
        complex7.nthRoot((-1861));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,861
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(620.091861, 786.588503928053);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.NaN.pow((-6.022045553485609E-264));
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex4.NaN.divide(0.0);
      Complex complex7 = complex6.ONE.createComplex(0.0, (-6.022045553485609E-264));
      List<Complex> list0 = complex0.nthRoot(3411);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex0.I.multiply(0.0);
      Complex complex9 = complex0.tanh();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = Complex.valueOf(0.0, Double.NaN);
      Complex complex11 = complex9.acos();
      Complex complex12 = complex11.I.sqrt1z();
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex10.cos();
      Complex complex15 = complex14.ZERO.sinh();
      Complex complex16 = complex9.sqrt();
      ComplexField complexField0 = complex4.getField();
      boolean boolean1 = complex11.equals(complex7);
      Object object1 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 2280.25031343;
      Complex complex0 = Complex.valueOf(2280.25031343);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex1.ZERO.pow(complex0);
      Complex complex5 = complex4.INF.pow(0.0);
      try { 
        complex5.ZERO.nthRoot((-2036));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,036
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-760.14));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.ONE.asin();
      double double0 = complex0.getArgument();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex2.I.asin();
      Complex complex9 = complex7.add((-760.14));
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex9.add((-760.14));
      List<Complex> list0 = complex1.ZERO.nthRoot(379);
      Complex complex12 = complex11.add(3.141592653589793);
      boolean boolean0 = complex2.equals(complex6);
      Complex complex13 = complex6.sinh();
      Complex complex14 = complex0.pow(complex12);
      Complex complex15 = Complex.valueOf((-760.14));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1486.41);
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1098.73163585));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.NaN.pow(442413.375);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex1.add((-1098.73163585));
      Complex complex5 = Complex.valueOf((-1098.73163585), (-1098.73163585));
      String string0 = complex3.toString();
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.valueOf((-1098.73163585), 0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.createComplex((-5.790384407322479E-8), (-5.790384407322479E-8));
      Complex complex3 = complex0.ZERO.pow(3994.7815670390883);
      Complex complex4 = complex3.NaN.add(3994.7815670390883);
      String string0 = complex1.toString();
      ComplexField complexField0 = complex1.ONE.getField();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.ZERO.log();
      Complex complex7 = complex2.add(2542.1184511);
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex7.I.pow(1261.5);
      Complex complex10 = complex7.INF.divide(2542.1184511);
      Complex complex11 = complex7.subtract(complex2);
      Complex complex12 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1094.59523));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.add(complex0);
      double double0 = complex2.INF.abs();
      Complex complex4 = complex1.ONE.pow(complex3);
      Complex complex5 = complex4.NaN.negate();
      double double1 = complex5.NaN.abs();
      Complex complex6 = complex3.cosh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      double double2 = complex1.abs();
      Complex complex8 = Complex.valueOf(0.7615941559557649, 0.7615941559557649);
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.ONE.multiply(complex2);
      Complex complex11 = complex9.add(complex0);
      int int0 = complex11.ZERO.hashCode();
      Complex complex12 = complex9.ONE.cosh();
      Complex complex13 = complex9.subtract(complex3);
      Complex complex14 = complex13.INF.createComplex(Double.POSITIVE_INFINITY, 0.7615941559557649);
      Complex complex15 = complex6.exp();
      Complex complex16 = complex2.tanh();
      Complex complex17 = complex16.ZERO.acos();
      Complex complex18 = complex7.reciprocal();
      Complex complex19 = complex4.acos();
      Complex complex20 = complex19.I.acos();
      Complex complex21 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex22 = complex1.negate();
      Object object0 = complex22.ZERO.readResolve();
      Complex complex23 = complex1.multiply(0.0);
      Object object1 = complex2.readResolve();
      Complex complex24 = complex0.multiply(Double.NaN);
      Complex complex25 = complex6.cos();
      Complex complex26 = complex25.cosh();
      Complex complex27 = complex11.cos();
      Complex complex28 = complex5.reciprocal();
      Complex complex29 = complex0.exp();
      Object object2 = complex22.readResolve();
      boolean boolean1 = complex15.equals(object2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply((-1572));
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex3.NaN.multiply((-1572));
      Complex complex5 = complex1.ONE.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.multiply(complex1);
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = Complex.valueOf(2579.096245634, 2579.096245634);
      Complex complex8 = complex7.NaN.subtract(complex2);
      Complex complex9 = Complex.valueOf((-2115.7));
      Complex complex10 = Complex.valueOf(0.0, Double.NaN);
      int int0 = complex10.hashCode();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex7.pow(2579.096245634);
      double double0 = complex11.getArgument();
      Complex complex14 = complex12.tan();
      Complex complex15 = Complex.valueOf((double) (-1572), 614.24);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4033.354135));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.multiply(1551);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex0.ZERO.divide(complex1);
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex7.INF.sin();
      Complex complex10 = Complex.valueOf((-4033.354135), (-4033.354135));
      Complex complex11 = complex7.pow(complex1);
      Complex complex12 = complex0.multiply(0.0);
      ComplexField complexField0 = complex7.getField();
      Complex complex13 = complex1.createComplex(0.0, 812.8515957296);
      Complex complex14 = complex1.subtract(complex13);
      String string0 = complex0.toString();
      Complex complex15 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2339.384966);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ONE.subtract(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.NaN.multiply(22);
      boolean boolean1 = complex3.isInfinite();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.valueOf(0.0);
      Object object0 = complex3.INF.readResolve();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex3.multiply((-307));
      Complex complex8 = complex0.asin();
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex9 = complex2.pow(2339.384966);
      String string0 = complex1.toString();
      Complex complex10 = complex1.createComplex(0.0, (-20.0));
      Complex complex11 = complex10.tan();
      Complex complex12 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2682.405192292959, 2682.405192292959);
      Complex complex1 = complex0.I.multiply(1478);
      Complex complex2 = Complex.valueOf((double) 1478);
      Complex complex3 = complex2.ONE.add(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.multiply(complex4);
      boolean boolean1 = complex0.equals(complex1);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex0.NaN.cos();
      double double0 = complex0.abs();
      Complex complex8 = complex1.INF.pow(4654.9);
      List<Complex> list0 = complex1.nthRoot(2334);
      int int0 = complex7.hashCode();
      Complex complex9 = complex3.add(3793.4938027207127);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex2.NaN.sqrt();
      List<Complex> list0 = complex2.nthRoot(1298);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex5.cosh();
      boolean boolean0 = complex0.equals(complex1);
      String string0 = complex1.toString();
      Complex complex8 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex9 = complex2.exp();
      Complex complex10 = complex8.ONE.tan();
      int int0 = complex9.hashCode();
      int int1 = complex8.hashCode();
      Complex complex11 = complex1.log();
      Complex complex12 = complex6.atan();
      boolean boolean1 = complex3.isInfinite();
      Complex complex13 = complex5.createComplex(1958.6, (-1090.0));
      List<Complex> list1 = complex13.INF.nthRoot(1298);
      Complex complex14 = complex13.ONE.acos();
      Complex complex15 = complex2.multiply((-1090.0));
      Complex complex16 = complex12.sin();
      Complex complex17 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-66.385414049953);
      Complex complex0 = Complex.valueOf(Double.NaN, (-66.385414049953));
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.sin();
      double double1 = complex0.getReal();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.sqrt1z();
      try { 
        complex3.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(5719.0427854305, (-703.3));
      double double0 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.log();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex3.ZERO.divide(complex0);
      boolean boolean0 = complex3.isInfinite();
      double double1 = complex3.abs();
      Complex complex6 = Complex.valueOf(1.291561142865928E207);
      ComplexField complexField1 = complex2.getField();
      Complex complex7 = complex6.multiply((-1166));
      ComplexField complexField2 = complex7.ZERO.getField();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex10 = complex3.add(277.21);
      Complex complex11 = Complex.valueOf(277.21);
      Complex complex12 = complex11.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex2.NaN.add(3791.42928968106);
      Complex complex5 = complex0.ZERO.add(complex3);
      Complex complex6 = complex1.ONE.atan();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex6.INF.sin();
      boolean boolean1 = complex0.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex2.cos();
      double double0 = complex9.getArgument();
      Complex complex10 = complex2.divide(complex4);
      Complex complex11 = complex2.I.subtract(Double.NaN);
      Complex complex12 = complex3.multiply(205.62881749152);
      Complex complex13 = complex4.divide(complex3);
      Complex complex14 = complex6.pow(205.62881749152);
      Complex complex15 = complex6.multiply(0.0);
      Complex complex16 = complex1.pow(complex14);
      boolean boolean2 = complex16.isNaN();
      Complex complex17 = complex3.reciprocal();
      Complex complex18 = complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1232.909809951394);
      Complex complex2 = complex1.I.conjugate();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.NaN.createComplex(2114.78381756, 2114.78381756);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.NaN.add(complex9);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.ZERO.multiply(Double.NaN);
      Complex complex13 = complex3.pow(complex11);
      Complex complex14 = complex3.ZERO.pow(complex6);
      Complex complex15 = complex3.ONE.add(complex1);
      Complex complex16 = complex6.negate();
      double double1 = complex16.ZERO.getArgument();
      Complex complex17 = complex6.sqrt1z();
      Complex complex18 = complex13.add(150.87208815633508);
      Complex complex19 = complex2.sqrt();
      Complex complex20 = complex6.log();
      ComplexField complexField0 = complex17.getField();
      Complex complex21 = complex7.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-6.370937412495338E-9));
      Complex complex2 = complex1.ZERO.sinh();
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.NaN.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.multiply(0);
      double double1 = complex1.INF.getArgument();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex5.divide(complex3);
      Complex complex8 = complex0.conjugate();
      String string0 = complex1.toString();
      Complex complex9 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.pow(1.0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex4.ONE.createComplex(Double.NaN, (-2538.002494));
      Complex complex7 = Complex.valueOf((-2538.002494), Double.NaN);
      Complex complex8 = complex7.ZERO.pow(1.0);
      Complex complex9 = complex3.atan();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex10.ONE.divide(complex2);
      double double1 = complex9.ZERO.getArgument();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex9.atan();
      Complex complex14 = complex3.add(complex12);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3170.45343);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex3.ONE.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.I.tanh();
      Complex complex7 = Complex.valueOf(3642.7, (-4.30293375386492E-21));
      boolean boolean0 = complex2.equals(complex5);
      Complex complex8 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-516.322578626), (-516.322578626));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ZERO.add(complex3);
      Complex complex6 = complex3.ZERO.tan();
      double double0 = complex0.getArgument();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex0.subtract((-585.9542074152412));
      Complex complex10 = complex7.sin();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex0.sin();
      Complex complex13 = complex12.multiply((-516.322578626));
      Complex complex14 = complex13.subtract(complex5);
      Complex complex15 = complex2.pow(complex5);
      Complex complex16 = complex12.sin();
      Complex complex17 = complex13.asin();
      Complex complex18 = complex13.cosh();
      Complex complex19 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = Complex.valueOf(90.0);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.ZERO.divide(complex5);
      Complex complex7 = complex2.I.cos();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex4.ONE.multiply((-369));
      Complex complex10 = complex0.ZERO.cosh();
      Object object0 = complex4.readResolve();
      String string0 = complex0.toString();
      Complex complex11 = complex3.acos();
      double double1 = complex4.getReal();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.multiply((-978.014110928));
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.NaN.reciprocal();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.INF.sinh();
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = Complex.valueOf(0.0, (-2181.010504992));
      Complex complex5 = complex2.ZERO.asin();
      Complex complex6 = complex2.ZERO.divide(0.0);
      Complex complex7 = complex2.I.multiply(complex0);
      Complex complex8 = complex1.INF.divide(complex0);
      Complex complex9 = complex8.ZERO.pow(complex5);
      Complex complex10 = complex9.I.multiply(0.0);
      Complex complex11 = complex0.pow(complex1);
      Complex complex12 = complex0.ZERO.sinh();
      int int0 = complex12.ZERO.hashCode();
      Complex complex13 = complex8.tan();
      Object object0 = complex11.readResolve();
      double double0 = complex2.abs();
      Complex complex14 = complex1.pow(complex6);
      Complex complex15 = complex7.tanh();
      double double1 = complex7.getArgument();
      Complex complex16 = complex11.sqrt();
      Complex complex17 = complex16.ZERO.sinh();
      Complex complex18 = Complex.valueOf(0.006737947463989258);
      double double2 = 1.2740330696105957;
      Complex complex19 = complex14.createComplex(1.2740330696105957, (-20.0));
      Complex complex20 = complex7.asin();
      Complex complex21 = complex20.ONE.log();
      Complex complex22 = complex11.reciprocal();
      try { 
        complex7.nthRoot((-2468));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,468
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(187.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ZERO.multiply(187.0);
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.valueOf((-2411.12), (-2411.12));
      Complex complex6 = complex0.ZERO.divide(complex1);
      boolean boolean0 = complex4.isNaN();
      Complex complex7 = complex6.INF.sin();
      double double0 = complex1.getImaginary();
      Complex complex8 = complex6.pow(Double.NaN);
      boolean boolean1 = complex7.isInfinite();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex9.ZERO.negate();
      Complex complex12 = complex6.add(Double.NaN);
      boolean boolean2 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      double double0 = complex1.NaN.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.divide((-7.145758990550526E-9));
      Complex complex3 = complex2.I.add((-1421.228));
      Complex complex4 = complex2.I.subtract((-7.145758990550526E-9));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.reciprocal();
      boolean boolean1 = complex1.isNaN();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex0.log();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex2.sqrt1z();
      boolean boolean0 = complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2049.4456498551), (-2049.4456498551));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.I.multiply((-3686));
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex3.INF.cos();
      double double0 = complex1.ONE.getArgument();
      Complex complex5 = complex4.I.multiply(1);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex6 = complex0.cos();
      String string0 = complex6.toString();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.add(complex6);
      boolean boolean0 = complex6.isNaN();
      double double1 = complex1.getArgument();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.ZERO.subtract((-20.0));
      Complex complex11 = complex2.subtract(complex1);
      Complex complex12 = complex10.log();
      ComplexField complexField0 = complex3.getField();
      boolean boolean1 = complex4.isNaN();
      Complex complex13 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1811.860036644745));
      Complex complex1 = complex0.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.abs();
      boolean boolean1 = complex0.equals("");
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.5313173532485962, 0.5313173532485962);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf(0.5313173532485962, 0.0);
      double double0 = complex1.getImaginary();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex4.sin();
      ComplexField complexField0 = complex1.getField();
      double double1 = complex5.getImaginary();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex0.multiply(669);
      Complex complex8 = complex6.divide(complex0);
      Complex complex9 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-2.1275002921718894E-6), 1.3594057956219485E-8);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.INF.divide(complex0);
      Complex complex9 = complex4.asin();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex0.multiply(0.0);
      Complex complex14 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.valueOf(411.45990349);
      Complex complex4 = complex1.NaN.pow(complex3);
      int int0 = complex0.hashCode();
      double double0 = complex0.abs();
      Complex complex5 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-4.869955151949929E-231));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.createComplex((-4.869955151949929E-231), (-3516.2141254478));
      Complex complex3 = complex2.ZERO.cos();
      Object object0 = complex0.I.readResolve();
      Complex complex4 = new Complex(7.6927415825689E-8, 7.6927415825689E-8);
      Complex complex5 = Complex.valueOf(7.6927415825689E-8);
      Complex complex6 = complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex3.NaN.pow(3.1149346370027763E33);
      try { 
        complex0.nthRoot((-6));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -6
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      String string0 = complex0.NaN.toString();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.multiply((-2268));
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.sqrt1z();
      Object object1 = complex5.readResolve();
      boolean boolean0 = complex4.equals(object1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1.5533745288848877, 1.5533745288848877);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.multiply(1.5533745288848877);
      Complex complex3 = complex2.pow(1.5533745288848877);
      Complex complex4 = complex2.I.sqrt();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = Complex.valueOf(0.4093637466430664);
      double double0 = complex0.getReal();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.multiply(886.3976);
      Complex complex9 = complex7.divide(complex8);
      Object object0 = new Object();
      boolean boolean1 = complex8.equals(object0);
      Complex complex10 = Complex.valueOf(0.0, 886.3976);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1469.39344622761), (-1469.39344622761));
      Complex complex1 = complex0.subtract((-1469.39344622761));
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.9974, 1099.514);
      Complex complex1 = complex0.sqrt1z();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2451.0));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.tanh();
      int int0 = complex1.I.hashCode();
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.ZERO.sin();
      double double1 = complex2.getImaginary();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = Complex.valueOf(2.4400089062515914E-8);
      Complex complex9 = complex8.asin();
      double double2 = complex5.getReal();
      Complex complex10 = complex0.pow(complex7);
      Complex complex11 = complex6.acos();
      Complex complex12 = complex11.subtract(complex10);
      Complex complex13 = complex11.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.I;
      double double1 = complex0.ZERO.getArgument();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex2.ONE.add(complex1);
      Complex complex5 = complex0.divide(complex1);
      String string0 = complex5.ONE.toString();
      String string1 = complex5.toString();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.divide(6.283185307179586);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(7.913674211949961E-185, (-3230.104));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.log();
      Complex complex7 = complex3.divide((-3230.104));
      Complex complex8 = Complex.valueOf(0.0, 2244.915);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.sinh();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(5.650007086920087E-9);
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract((-2231.0));
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(1920.70891585089);
      Complex complex2 = Complex.valueOf((-157.85056285053187));
      int int0 = complex2.ZERO.hashCode();
      double double0 = complex0.getReal();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.ZERO.subtract(complex4);
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.ONE.multiply(complex4);
      String string0 = complex4.toString();
      Object object0 = complex5.readResolve();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.divide((-711.711284258));
      String string1 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(1117.724659714, 1955.8548300302);
      Complex complex1 = Complex.valueOf((-6.679737442193143E-9), 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex2.I.multiply(1160);
      Object object0 = new Object();
      Complex complex7 = complex0.ONE.cos();
      boolean boolean0 = complex1.equals(object0);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex6.cosh();
      int int0 = complex2.hashCode();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(839.8383, 839.8383);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.divide(839.8383);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(1437.19638);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.cosh();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex4.NaN.multiply(335);
      Complex complex7 = complex6.ONE.divide(complex0);
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex0.sin();
      Complex complex10 = complex2.I.atan();
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex9.negate();
      Complex complex13 = complex12.I.createComplex((-1473.628313), Double.NaN);
      Complex complex14 = complex2.tan();
      boolean boolean0 = complex8.isNaN();
      Complex complex15 = complex14.conjugate();
      Complex complex16 = complex13.tan();
      Complex complex17 = complex15.cos();
      boolean boolean1 = complex17.equals(complex8);
      Complex complex18 = complex13.createComplex((-1473.628313), 1.0117876529693604);
      Complex complex19 = complex18.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cosh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.INF.pow(605.0);
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex4.INF.divide(176.269769579973);
      Complex complex7 = complex6.ZERO.subtract(complex3);
      Complex complex8 = complex6.ZERO.negate();
      Complex complex9 = complex6.ONE.tan();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex4.ZERO.cosh();
      Complex complex12 = Complex.valueOf(0.0, 1.2995814853898995E-24);
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex4.getArgument();
      Complex complex13 = complex0.cos();
      Complex complex14 = complex13.NaN.tan();
      Complex complex15 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2569.55, 0.0);
      String string0 = complex1.toString();
      Complex complex2 = new Complex(2569.55, (-1761.483877));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ONE.divide(complex2);
      double double0 = complex2.abs();
      Complex complex5 = complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(945.675189, 945.675189);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.ZERO.asin();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex2.ONE.reciprocal();
      Complex complex7 = complex1.ONE.asin();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex8 = complex1.INF.divide(945.675189);
      Object object0 = complex8.INF.readResolve();
      Complex complex9 = complex0.createComplex(945.675189, 945.675189);
      boolean boolean0 = complex9.isNaN();
      double double1 = complex0.NaN.getArgument();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.682607223902455E-9);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.atan();
      try { 
        complex1.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1715.78586));
      try { 
        complex1.nthRoot((-1772));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,772
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.acos();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.multiply(1.0850715739509136E-225);
      Complex complex3 = complex0.divide(0.0);
      int int1 = complex3.INF.hashCode();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex4.ZERO.reciprocal();
      Complex complex7 = complex4.ONE.multiply(complex0);
      double double1 = complex3.abs();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.tan();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex1.ZERO.exp();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex2.asin();
      double double2 = complex0.abs();
      Complex complex4 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(1173.081548, 0.0);
      Complex complex1 = complex0.NaN.conjugate();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.pow(complex1);
      double double0 = complex2.getArgument();
      Complex complex5 = complex0.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.add((-460.3));
      Complex complex2 = complex1.INF.multiply((-460.3));
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex1.I.createComplex((-460.3), 1.0);
      Complex complex5 = complex2.ZERO.createComplex((-460.3), (-460.3));
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex0.pow(1.0521983802642893E-8);
      Complex complex8 = complex7.INF.pow(0.0);
      Complex complex9 = complex2.sin();
      Complex complex10 = complex9.exp();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply((-880.6447350224789));
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex6.INF.exp();
      Object object0 = complex4.readResolve();
      Object object1 = complex0.INF.readResolve();
      Object object2 = complex2.readResolve();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1990.0), 0.0);
      Complex complex1 = complex0.ZERO.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.tanh();
      List<Complex> list0 = complex3.I.nthRoot(595);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.INF.divide(complex1);
      Complex complex6 = complex4.ONE.multiply(1502);
      double double0 = complex3.abs();
      Complex complex7 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      String string0 = complex0.toString();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.NaN.tan();
      double double0 = complex1.I.abs();
      Complex complex3 = complex0.negate();
      double double1 = complex3.getArgument();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.ONE.pow(complex1);
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply((-2097.872815936542));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(919.8257912725);
      Complex complex2 = complex0.multiply(37);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex1.reciprocal();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.multiply((-1056));
      Complex complex2 = complex1.NaN.pow((double) (-1056));
      Complex complex3 = complex0.INF.reciprocal();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.createComplex((-1056), 2205.94777531507);
      Complex complex5 = complex0.subtract((-561.612));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.createComplex((-1.0), (-2595.8409703));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-1692.7177124938), (-1692.7177124938));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.multiply((-1692.7177124938));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex2.multiply(1);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex7 = complex6.multiply(complex2);
      double double0 = complex3.getImaginary();
      Complex complex8 = Complex.valueOf((double) 1, (double) 1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.add(20.0);
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex1.multiply(complex6);
      Complex complex8 = complex3.I.reciprocal();
      Complex complex9 = complex2.NaN.negate();
      Complex complex10 = complex6.NaN.add(complex1);
      Complex complex11 = complex7.ONE.cosh();
      Complex complex12 = complex7.add(complex2);
      Complex complex13 = complex3.subtract(3617.8614427956104);
      Complex complex14 = complex10.subtract(complex7);
      Complex complex15 = complex14.INF.sinh();
      ComplexField complexField0 = complex14.ZERO.getField();
      Complex complex16 = complex11.multiply((-1137.1520143));
      Complex complex17 = complex3.acos();
      Complex complex18 = complex14.asin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.INF.multiply((-3148.747113));
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.I.divide(complex0);
      Object object0 = complex4.I.readResolve();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.I.tanh();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex6.NaN.tan();
      Complex complex12 = complex2.pow(complex6);
      Complex complex13 = complex6.negate();
      Complex complex14 = Complex.valueOf((-1.0));
      Complex complex15 = complex14.asin();
      Complex complex16 = complex14.I.cos();
      Complex complex17 = complex14.I.multiply(1065);
      Complex complex18 = complex12.subtract((-243.77306791));
      Complex complex19 = complex0.sinh();
      Complex complex20 = complex2.ONE.divide(425.0793723535281);
      Complex complex21 = complex19.ONE.sqrt();
      Complex complex22 = complex2.add(complex8);
      ComplexField complexField0 = complex2.getField();
      Complex complex23 = complex3.pow((-3148.747113));
      Complex complex24 = complex2.sinh();
      double double0 = complex1.getArgument();
      Complex complex25 = complex24.createComplex(2257.346, (-243.77306791));
      Complex complex26 = Complex.valueOf(2257.346);
      Complex complex27 = complex11.tan();
      Object object1 = new Object();
      boolean boolean0 = complex13.equals(object1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.multiply((-1417));
      double double1 = complex1.getArgument();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      double double2 = complex1.INF.getArgument();
      Complex complex4 = complex1.multiply((-297.934137115678));
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex7.INF.tan();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex9 = complex5.createComplex((-2261.9), (-1417));
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex5.pow(complex1);
      Complex complex12 = complex11.negate();
      int int0 = complex12.hashCode();
      Complex complex13 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.pow((-3719.37));
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.asin();
      Object object0 = complex2.NaN.readResolve();
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex1.I.add((-3719.37));
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex4.tan();
      double double1 = complex1.getArgument();
      double double2 = complex6.getArgument();
      Complex complex9 = complex8.multiply(0.0);
      Complex complex10 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex0.nthRoot(1102);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.I.conjugate();
      int int0 = complex3.ONE.hashCode();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.ONE.reciprocal();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex5.INF.sqrt1z();
      Complex complex8 = complex7.ZERO.pow(complex0);
      Complex complex9 = complex7.ZERO.cosh();
      List<Complex> list1 = complex0.nthRoot(1102);
      Complex complex10 = complex5.INF.divide(complex8);
      Complex complex11 = complex4.pow(complex2);
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex12.ZERO.atan();
      Complex complex14 = complex7.multiply(1102);
      Complex complex15 = complex0.createComplex(988.4546034358868, 20.0);
      Complex complex16 = complex15.INF.add(complex11);
      Complex complex17 = complex4.cosh();
      double double1 = complex17.ONE.getArgument();
      Complex complex18 = complex3.cosh();
      double double2 = complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(510.3);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.ONE.divide(510.3);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex4.ONE.exp();
      Complex complex8 = Complex.valueOf(510.3);
      String string0 = complex7.INF.toString();
      Complex complex9 = complex7.I.reciprocal();
      Complex complex10 = complex4.INF.divide(510.3);
      Complex complex11 = complex3.ONE.add(2.0);
      Complex complex12 = complex3.add(342.25082);
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex12.INF.reciprocal();
      Complex complex15 = complex11.negate();
      Complex complex16 = complex1.multiply((-2291));
      Complex complex17 = complex4.sin();
      Complex complex18 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = complex5.INF.divide(0.0);
      Complex complex7 = complex4.ONE.conjugate();
      Complex complex8 = complex7.NaN.subtract(complex5);
      double double0 = complex2.abs();
      double double1 = complex1.getReal();
      Complex complex9 = complex0.ZERO.sqrt1z();
      Complex complex10 = complex1.ZERO.multiply(complex2);
      double double2 = complex3.getImaginary();
      double double3 = complex4.abs();
      Complex complex11 = complex2.cosh();
      int int0 = complex11.INF.hashCode();
      Object object0 = complex10.readResolve();
      Complex complex12 = complex11.negate();
      Complex complex13 = new Complex(0.0);
      Complex complex14 = complex0.I.negate();
      Complex complex15 = complex2.reciprocal();
      Complex complex16 = complex4.atan();
      Complex complex17 = complex10.tanh();
      double double4 = complex5.getReal();
      Complex complex18 = complex16.acos();
      double double5 = complex10.abs();
      double double6 = complex6.getArgument();
      Complex complex19 = complex15.multiply(0.0);
      Complex complex20 = Complex.valueOf(0.6619024276733398, (-2026.5411677121974));
      Complex complex21 = complex18.divide(1277.8);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ZERO.add(4904.26974304107);
      Complex complex4 = complex2.createComplex((-1002.0), 1.0812448255518705E-301);
      Complex complex5 = complex2.NaN.pow((-6.380305844689076E-8));
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex4.ONE.sinh();
      Complex complex8 = complex4.ONE.asin();
      Complex complex9 = complex4.INF.multiply(3501);
      List<Complex> list0 = complex9.I.nthRoot(3501);
      Complex complex10 = complex4.conjugate();
      Complex complex11 = Complex.valueOf(1.0812448255518705E-301, 1.0812448255518705E-301);
      Complex complex12 = complex4.sin();
      double double0 = complex0.ONE.abs();
      Complex complex13 = complex0.cosh();
      Complex complex14 = complex3.divide(complex11);
      Complex complex15 = complex8.multiply(complex3);
      Complex complex16 = complex3.subtract(complex9);
      ComplexField complexField0 = complex3.getField();
      Complex complex17 = complex8.add(2373.8778864248634);
      double double1 = complex13.getImaginary();
      int int0 = complex4.NaN.hashCode();
      Complex complex18 = complex10.createComplex(0.0, 1.0);
      String string0 = complex3.toString();
      Complex complex19 = complex10.exp();
      Complex complex20 = complex6.sin();
      ComplexField complexField1 = complex19.getField();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-23.0));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.divide(0.0);
      Complex complex8 = complex2.multiply(0);
      boolean boolean0 = complex6.equals(complex5);
  }
}
