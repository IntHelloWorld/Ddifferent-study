/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:03:47 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.NaN);
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex2 = complex0.subtract((-1055.0));
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.INF.add(complex3);
      Complex complex5 = Complex.valueOf(810.28462);
      Complex complex6 = complex2.pow(1941.26026);
      Complex complex7 = complex0.I.subtract(complex3);
      Complex complex8 = complex1.ONE.exp();
      Complex complex9 = complex8.ONE.divide(complex5);
      Complex complex10 = complex0.I.negate();
      Complex complex11 = complex3.multiply(complex5);
      Complex complex12 = complex7.ZERO.pow(complex1);
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex13.reciprocal();
      Complex complex16 = complex1.multiply((-1055.0));
      Complex complex17 = complex16.INF.asin();
      Complex complex18 = complex15.I.pow(Double.NaN);
      double double0 = complex4.getImaginary();
      Complex complex19 = complex3.I.atan();
      String string0 = complex15.toString();
      Complex complex20 = complex2.cos();
      Complex complex21 = complex13.ONE.cos();
      boolean boolean0 = complex16.equals(complex15);
      Complex complex22 = complex7.cosh();
      Object object0 = complex13.readResolve();
      Object object1 = new Object();
      boolean boolean1 = complex3.equals(object1);
      Complex complex23 = complex5.pow(complex3);
      Complex complex24 = Complex.valueOf((-1284.1));
      Complex complex25 = complex23.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 2.1819935527247946E-7);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply(1105);
      Complex complex3 = complex1.INF.createComplex(0.0, (-2479.48349452537));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.ZERO.multiply(complex1);
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex0.subtract(complex8);
      Complex complex12 = complex8.tan();
      Complex complex13 = complex11.asin();
      List<Complex> list0 = complex5.nthRoot(600);
      Complex complex14 = complex1.multiply(complex12);
      Complex complex15 = complex14.tanh();
      double double0 = complex15.NaN.abs();
      Complex complex16 = complex6.exp();
      Complex complex17 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4181618172507453E-8, 4.4181618172507453E-8);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = new Complex(0.0, 4.4181618172507453E-8);
      Object object0 = complex2.I.readResolve();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.add((-1.1959241322537072E-151));
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex0.NaN.sqrt1z();
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.valueOf((-1.1959241322537072E-151));
      Complex complex8 = complex6.multiply(1);
      String string0 = complex8.I.toString();
      boolean boolean1 = complex4.isNaN();
      Complex complex9 = complex0.conjugate();
      boolean boolean2 = complex3.isInfinite();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex2.pow(complex7);
      Complex complex12 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2656.5, 2.860915548426704E251);
      Complex complex1 = complex0.NaN.pow(2.860915548426704E251);
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf(231.9);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.ZERO.pow(complex0);
      Complex complex8 = complex4.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.NaN.exp();
      double double0 = complex0.getArgument();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex2.ONE.multiply(complex0);
      Complex complex6 = complex5.ONE.sqrt1z();
      String string0 = complex4.toString();
      Complex complex7 = complex4.tanh();
      String string1 = complex4.toString();
      String string2 = complex7.toString();
      Complex complex8 = complex2.multiply(complex4);
      Complex complex9 = complex7.INF.multiply(1);
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex4.exp();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3383.853211095), 0.0);
      Complex complex2 = complex0.I.add(complex1);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-926.20166749887), (-926.20166749887));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.NaN.multiply((-926.20166749887));
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex2.pow(complex7);
      int int0 = complex4.hashCode();
      Complex complex9 = complex2.exp();
      int int1 = complex4.hashCode();
      Complex complex10 = complex4.add(1.475020408630371);
      int int2 = complex4.hashCode();
      Complex complex11 = complex5.exp();
      Complex complex12 = complex6.divide((-3487.241));
      Complex complex13 = complex6.createComplex(1265.5, 1.475020408630371);
      Complex complex14 = complex2.tanh();
      int int3 = complex2.hashCode();
      Complex complex15 = complex8.acos();
      Complex complex16 = complex9.pow((-2565.299457697096));
      Complex complex17 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.4356052279472351, 0.4356052279472351);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.NaN.tanh();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex5.I.negate();
      int int0 = complex5.INF.hashCode();
      Complex complex7 = complex0.NaN.conjugate();
      Complex complex8 = complex2.I.divide(complex6);
      Complex complex9 = complex7.INF.tan();
      Complex complex10 = complex9.I.divide(0.0);
      Object object0 = complex9.readResolve();
      Complex complex11 = complex9.ONE.sinh();
      Complex complex12 = complex7.INF.pow(0.0);
      Complex complex13 = complex12.I.exp();
      Complex complex14 = complex12.ZERO.add(0.4356052279472351);
      Complex complex15 = complex0.subtract(complex1);
      Complex complex16 = complex15.ONE.divide(0.4356052279472351);
      double double0 = complex15.ONE.getArgument();
      Object object1 = complex15.NaN.readResolve();
      Complex complex17 = complex1.reciprocal();
      Complex complex18 = complex17.INF.log();
      Complex complex19 = complex1.add(0.4356052279472351);
      Complex complex20 = complex3.atan();
      double double1 = complex2.abs();
      double double2 = complex2.ONE.getArgument();
      Complex complex21 = complex4.divide((-2089.58529677));
      Complex complex22 = complex1.log();
      Complex complex23 = complex22.ZERO.cos();
      Complex complex24 = complex0.negate();
      double double3 = complex2.getImaginary();
      Complex complex25 = complex1.sqrt();
      Complex complex26 = complex18.sinh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 74.2025303);
      Complex complex1 = complex0.subtract(230.4);
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.INF.negate();
      List<Complex> list0 = complex3.NaN.nthRoot(24);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.I.multiply(2.0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.sqrt();
      double double0 = complex4.NaN.getArgument();
      Complex complex6 = complex4.ZERO.subtract(Double.NaN);
      double double1 = complex0.getImaginary();
      String string0 = complex4.toString();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.ONE.exp();
      int int0 = complex4.hashCode();
      Complex complex9 = complex4.add(complex7);
      Complex complex10 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3872.85061329059));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-3172.6261406), (-4157.81563086));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex2.ZERO.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex2.ONE.pow((-4157.81563086));
      Complex complex7 = complex6.ONE.sinh();
      double double0 = complex1.getImaginary();
      Complex complex8 = complex5.sqrt();
      String string0 = complex8.I.toString();
      Complex complex9 = complex8.ZERO.pow((-3172.6261406));
      Complex complex10 = complex3.INF.divide(complex7);
      double double1 = complex1.abs();
      Complex complex11 = complex3.createComplex(Double.NaN, (-382.325692946));
      Complex complex12 = complex1.multiply(complex0);
      Object object0 = complex2.readResolve();
      Complex complex13 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 994.1416126862161);
      Complex complex1 = complex0.multiply(994.1416126862161);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex3.NaN.pow(994.1416126862161);
      Complex complex5 = complex3.NaN.atan();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex1.divide(994.1416126862161);
      Complex complex7 = complex6.I.subtract(complex2);
      Complex complex8 = complex6.multiply((-2163));
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex0.divide(994.1416126862161);
      boolean boolean1 = complex8.isNaN();
      Complex complex11 = complex2.tanh();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex10.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1602.1), 1884.1617345289);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.ONE.pow(162754.78125);
      Complex complex5 = complex2.ONE.tan();
      double double0 = complex0.abs();
      Complex complex6 = complex1.multiply(469);
      Complex complex7 = complex5.ONE.atan();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex0.multiply(complex2);
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex12.ZERO.divide(1884.1617345289);
      Complex complex14 = complex11.divide(1.0);
      double double1 = complex11.abs();
      Complex complex15 = complex2.atan();
      Complex complex16 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ONE.hashCode();
      List<Complex> list0 = complex0.I.nthRoot(4362);
      List<Complex> list1 = complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.cosh();
      int int1 = complex1.hashCode();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.ZERO.add((-214.278));
      Complex complex7 = Complex.valueOf(189.0768917, 1049.1105876821);
      Complex complex8 = complex6.subtract(complex7);
      Complex complex9 = complex4.add((double) 1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1749.053604346041));
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.I.divide(0.0);
      Complex complex5 = Complex.valueOf((-1.1819540733893871E-7), (-1.1819540733893871E-7));
      Complex complex6 = complex3.ZERO.atan();
      Complex complex7 = complex2.subtract(complex3);
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(313.4);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.createComplex(651.761, (-3316.14253));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ONE.createComplex(651.761, 0.0);
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex2.ONE.subtract(complex1);
      double double0 = complex3.getArgument();
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex1.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex1.ZERO.multiply(3668);
      Complex complex5 = complex3.NaN.atan();
      double double0 = complex0.abs();
      Complex complex6 = complex5.ONE.divide(complex2);
      Complex complex7 = complex5.ZERO.tanh();
      List<Complex> list0 = complex1.nthRoot(23);
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = complex8.NaN.tanh();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sin();
      ComplexField complexField0 = complex1.INF.getField();
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.valueOf((-3.137992585221854E117), (-3.137992585221854E117));
      Complex complex3 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.ZERO.subtract((-7.327771300038971E-8));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.multiply((-7.327771300038971E-8));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2749.233688430483, 2749.233688430483);
      Complex complex1 = complex0.NaN.pow(2749.233688430483);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.I.divide((-1959.012288));
      Complex complex5 = complex4.INF.createComplex(0.0, (-305.1));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1604.663706, 1604.663706);
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2474.5113);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tan();
      String string0 = complex2.toString();
      Complex complex3 = complex1.pow(complex0);
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex3.NaN.add(2408.3604397155);
      Complex complex5 = complex1.negate();
      int int0 = complex3.hashCode();
      Complex complex6 = complex1.multiply(218);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.subtract((-1895.05816));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex1.ONE.subtract((-2329.453069553137));
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex3.NaN.asin();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex0.ZERO.subtract((-2329.453069553137));
      Complex complex8 = complex1.divide(Double.NaN);
      Object object0 = complex8.readResolve();
      Complex complex9 = complex8.NaN.divide(complex3);
      ComplexField complexField0 = complex9.NaN.getField();
      String string0 = complex3.toString();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.INF.sinh();
      Complex complex12 = complex2.atan();
      Complex complex13 = Complex.valueOf((-5012.986055), (-655.51038));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-673));
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = complex5.pow(complex2);
      double double0 = complex3.abs();
      Complex complex8 = complex5.pow(complex0);
      double double1 = complex0.getReal();
      double double2 = complex2.getReal();
      double double3 = complex7.getReal();
      Complex complex9 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1645.8804857);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.add(1645.8804857);
      Complex complex4 = complex3.ONE.multiply(complex1);
      double double0 = complex0.getReal();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.tanh();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(253.70252042339152, 253.70252042339152);
      String string0 = complex0.toString();
      double double0 = complex0.abs();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.createComplex((-592.0), (-592.0));
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.pow(complex0);
      double double1 = complex3.getArgument();
      Complex complex4 = complex1.I.pow((-1940.0375779));
      Complex complex5 = complex4.ONE.subtract(0.0);
      Complex complex6 = complex4.INF.sqrt1z();
      Complex complex7 = complex3.NaN.sqrt();
      Complex complex8 = complex4.NaN.divide((-592.0));
      Complex complex9 = complex3.divide(complex1);
      double double2 = complex3.abs();
      String string1 = complex3.toString();
      Complex complex10 = complex0.cos();
      boolean boolean0 = complex1.isInfinite();
      double double3 = complex10.NaN.abs();
      Complex complex11 = complex0.multiply(0.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex12 = complex11.subtract(253.70252042339152);
      double double4 = complex9.getArgument();
      Complex complex13 = complex0.acos();
      double double5 = complex11.getReal();
      Complex complex14 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex0.pow(6.283185307179586);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ZERO.multiply(0);
      Complex complex6 = complex0.ZERO.tan();
      Complex complex7 = complex4.NaN.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex8 = complex7.I.subtract(2.0);
      Complex complex9 = complex4.I.pow(complex0);
      Complex complex10 = complex9.INF.atan();
      double double0 = complex10.I.getArgument();
      Complex complex11 = complex3.I.conjugate();
      String string0 = complex0.I.toString();
      Complex complex12 = complex4.acos();
      Complex complex13 = complex12.tan();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1720.8956954839, 1720.8956954839);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.multiply(1720.8956954839);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.log();
      Complex complex6 = complex4.pow(1720.8956954839);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex7.add(complex4);
      List<Complex> list0 = complex6.nthRoot(1455);
      double double0 = complex1.getReal();
      Complex complex10 = complex2.subtract(2594.562555991);
      Complex complex11 = complex9.pow(complex3);
      Complex complex12 = complex0.createComplex((-4547.46), 2594.562555991);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex1.reciprocal();
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.ONE.add(complex0);
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex7.ZERO.add(complex1);
      boolean boolean0 = complex4.isNaN();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex7.divide(complex2);
      double double0 = complex7.abs();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex7.pow(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.divide((-1094.981134321855));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.exp();
      String string0 = complex3.NaN.toString();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.NaN.subtract((-1094.981134321855));
      Complex complex8 = complex0.asin();
      Complex complex9 = complex6.ONE.atan();
      int int0 = complex7.hashCode();
      Complex complex10 = complex7.divide((-1094.981134321855));
      Complex complex11 = complex10.acos();
      double double0 = complex2.getReal();
      Complex complex12 = complex5.pow((-1094.981134321855));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.NaN.asin();
      double double0 = complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex3.I.pow(complex1);
      double double1 = complex3.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex4.subtract(1.4142135623730951);
      Complex complex10 = complex3.ONE.subtract((-2555.0));
      Complex complex11 = complex6.negate();
      Complex complex12 = complex7.pow(complex11);
      Complex complex13 = complex2.cosh();
      boolean boolean1 = complex9.isInfinite();
      boolean boolean2 = complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 2290.98673706);
      Complex complex1 = Complex.valueOf(2290.98673706, Double.NaN);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex1.add(Double.NaN);
      Complex complex6 = Complex.valueOf(0.0, 2290.98673706);
      Complex complex7 = Complex.valueOf(Double.NaN);
      String string0 = complex7.ONE.toString();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex1.subtract(2290.98673706);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex2.ONE.pow(0.0);
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex1.ONE.asin();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex1.pow(0.0);
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.add((-1118.96639));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.abs();
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.atan();
      int int1 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 1401.023061257);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1478649410390003E-162, (-2002.4931297));
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.add(3060.930794509278);
      Complex complex2 = complex1.I.reciprocal();
      String string0 = complex0.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.sqrt1z();
      double double0 = complex0.abs();
      Complex complex7 = complex4.pow(0.1734936535358429);
      Complex complex8 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-247.1964039825));
      Object object0 = new Object();
      Complex complex1 = complex0.I.add((-247.1964039825));
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex2.sinh();
      int int0 = complex2.hashCode();
      Complex complex8 = complex0.subtract(0.0);
      int int1 = complex3.ONE.hashCode();
      Complex complex9 = Complex.valueOf(1408.084809268);
      Complex complex10 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1.2930091396008281E-8));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1525.6931962267, 1525.6931962267);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.INF.sqrt();
      ComplexField complexField0 = complex2.NaN.getField();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.reciprocal();
      ComplexField complexField1 = complex4.INF.getField();
      String string0 = complex4.toString();
      Complex complex5 = complex1.sqrt1z();
      String string1 = complex1.toString();
      Complex complex6 = complex2.multiply(1525.6931962267);
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex6.subtract(0.0);
      Complex complex9 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1.692337384653611E-8), (-1.692337384653611E-8));
      Complex complex1 = complex0.NaN.pow((-1.692337384653611E-8));
      Complex complex2 = complex1.INF.createComplex(6.283185307179586, 1.0);
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = complex0.divide((-1.692337384653611E-8));
      double double0 = 0.0;
      Complex complex5 = Complex.valueOf((-1.692337384653611E-8), 0.0);
      String string0 = complex1.ONE.toString();
      int int0 = complex5.INF.hashCode();
      Object object0 = complex5.ZERO.readResolve();
      int int1 = complex1.hashCode();
      Complex complex6 = complex1.subtract(316.9984394980851);
      try { 
        complex6.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.add((-2635.96569));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex3.createComplex(0.0, 0.0);
      Complex complex7 = Complex.valueOf((-4768.8377074), 1.4116039276123047);
      Complex complex8 = complex1.pow(0.0);
      double double0 = (-2924.55814704);
      Complex complex9 = complex5.multiply((-2924.55814704));
      try { 
        complex4.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-802.389));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.sinh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.sqrt();
      double double0 = complex4.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4074.805994163414, 4074.805994163414);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = new Complex(1.7597776278732318E-296);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(8.711129287069315E-8, (-371.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.divide((-371.0));
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.INF.multiply(complex0);
      Complex complex7 = complex3.NaN.subtract(3253.4901727);
      Complex complex8 = complex4.multiply(802);
      Complex complex9 = complex4.multiply(802);
      Complex complex10 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1277.8342);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-1.0));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.asin();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.log();
      double double0 = complex0.abs();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex2.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.log();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.ONE.nthRoot(17);
      Complex complex1 = complex0.subtract(1143.140066384);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex5.ZERO.createComplex(17, 17);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex5.ZERO.conjugate();
      Complex complex9 = complex8.ZERO.subtract(0.0);
      Complex complex10 = complex1.add(complex0);
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex1.subtract(1143.140066384);
      Complex complex13 = complex12.acos();
      Complex complex14 = complex8.divide(1143.140066384);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-756.80445034821));
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.atan();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.ONE.subtract((-1595.649339429));
      double double0 = complex0.abs();
      Complex complex4 = complex1.multiply(0.0);
      Complex complex5 = complex1.I.pow(complex2);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex6.divide(complex0);
      double double1 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex1.ONE.getArgument();
      boolean boolean1 = complex0.equals(complex1);
      Complex complex2 = complex0.add(1024.37680396);
      try { 
        complex2.INF.nthRoot((-435));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -435
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.096733638475319E128));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.add((-3.096733638475319E128));
      double double0 = complex0.getReal();
      Complex complex3 = complex2.add((-3.096733638475319E128));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3289231465997192E-9), 6.283185307179586);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.ONE.add(6.283185307179586);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(717);
      Complex complex2 = complex0.add((-1427.0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4951.921, 4951.921);
      int int0 = 3374;
      List<Complex> list0 = complex1.NaN.nthRoot(3374);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.acos();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.reciprocal();
      ComplexField complexField1 = complex4.ONE.getField();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex0.cos();
      try { 
        complex2.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.subtract((-1313.55901864));
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.NaN.subtract(complex5);
      double double0 = complex2.I.abs();
      Complex complex8 = complex3.divide(769.467025);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.subtract(1090.170798744);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.INF.add(1090.170798744);
      Complex complex5 = complex4.I.subtract(1090.170798744);
      Complex complex6 = complex1.NaN.multiply(1);
      Complex complex7 = complex0.divide((-4754.811259));
      int int0 = complex1.hashCode();
      Complex complex8 = complex7.tanh();
      String string0 = complex8.toString();
      Complex complex9 = complex7.log();
      Complex complex10 = complex5.tanh();
      List<Complex> list0 = complex10.nthRoot(1);
      Complex complex11 = complex5.sinh();
      String string1 = complex11.I.toString();
      Complex complex12 = complex4.tan();
      double double0 = complex9.getImaginary();
      Complex complex13 = complex6.multiply(1);
      Complex complex14 = complex13.INF.pow(complex10);
      Complex complex15 = complex6.NaN.sqrt();
      Complex complex16 = complex4.sqrt1z();
      Complex complex17 = complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 914.0);
      Complex complex1 = complex0.I.conjugate();
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex0.sqrt();
      double double0 = complex0.abs();
      Complex complex5 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.I.asin();
      int int0 = complex0.ZERO.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.3702295314000405E-8));
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.acos();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex2.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.24740394949913025);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.ONE.pow(0.24740394949913025);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex2.NaN.tanh();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-143.6), (-143.6));
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.ZERO.sqrt1z();
      ComplexField complexField0 = complex4.getField();
      double double0 = complex0.getReal();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.2852376699447632, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(2741.29708);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.divide(4693.46);
      Complex complex5 = complex1.INF.atan();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.INF.acos();
      Complex complex7 = complex6.NaN.pow(complex3);
      Complex complex8 = Complex.valueOf(4693.46);
      boolean boolean0 = complex0.equals(object0);
      Complex complex9 = complex0.asin();
      Complex complex10 = complex5.pow(0.3916988968849182);
      Complex complex11 = complex2.divide(complex10);
      Complex complex12 = complex11.INF.multiply(4693.46);
      Complex complex13 = complex1.divide(complex4);
      double double0 = complex2.getImaginary();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      double double1 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(1495.26);
      Complex complex4 = complex2.multiply(579);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1321.86603002));
      Complex complex1 = complex0.cos();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.acos();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.valueOf((-1321.86603002), (-1321.86603002));
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-4378.2972962814), (-4378.2972962814));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.atan();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex1.I.tan();
      double double1 = complex2.INF.getArgument();
      Complex complex3 = complex1.NaN.pow(2819.2);
      Complex complex4 = complex0.subtract(605.0);
      Complex complex5 = complex4.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(605.0);
      Complex complex7 = complex6.cos();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1910.496856891);
      Complex complex2 = complex1.INF.multiply((-435));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex0.I.add(complex4);
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex5.ZERO.negate();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex7 = complex5.ZERO.cos();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex6.INF.multiply((-968896168));
      Complex complex10 = complex9.INF.pow(complex4);
      Object object1 = complex0.readResolve();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex2.multiply((-435));
      double double0 = complex12.ZERO.abs();
      Complex complex13 = complex12.tanh();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex2.reciprocal();
      Complex complex16 = complex15.NaN.multiply((-2249.25404513));
      Complex complex17 = complex10.asin();
      Complex complex18 = complex17.asin();
      Object object2 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.246635423141374E-7));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(2.0);
      Complex complex3 = complex2.ZERO.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.subtract((-1.246635423141374E-7));
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1132.020351), (-1132.020351));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.divide(0.0);
      List<Complex> list0 = complex1.I.nthRoot(638);
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex3.INF.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.NaN.multiply((-1132.020351));
      Complex complex8 = complex5.createComplex(0.0, 1963.22);
      Complex complex9 = complex6.subtract((-1132.020351));
      Complex complex10 = Complex.valueOf(1469.577, (double) 638);
      Complex complex11 = complex3.ZERO.subtract(complex6);
      Complex complex12 = complex0.add(complex1);
      double double0 = complex5.abs();
      Complex complex13 = complex12.cosh();
      Complex complex14 = complex12.NaN.pow(6.283185307179586);
      Complex complex15 = Complex.ONE;
      Complex complex16 = complex12.I.atan();
      Complex complex17 = complex2.divide(complex15);
      Complex complex18 = complex12.divide(0.0);
      double double1 = complex10.abs();
      double double2 = complex15.abs();
      boolean boolean0 = complex10.isInfinite();
      Complex complex19 = complex17.acos();
      Complex complex20 = complex19.multiply((-1236.7549));
      Complex complex21 = complex3.tan();
      Complex complex22 = complex1.multiply(0.0);
      Complex complex23 = complex11.createComplex(1.798489141298457E-208, 0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex1.I.createComplex(85.0, 85.0);
      Complex complex6 = complex5.NaN.multiply(0.0);
      Complex complex7 = complex5.I.pow(complex3);
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex8.ZERO.pow(85.0);
      Complex complex10 = complex9.multiply(37);
      boolean boolean0 = complex0.equals(complex4);
      List<Complex> list0 = complex0.ZERO.nthRoot(611);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.NaN.acos();
      Complex complex13 = complex3.pow(complex11);
      String string0 = complex3.toString();
      Complex complex14 = complex0.subtract(complex13);
      Complex complex15 = complex11.I.createComplex(0.0, 0.0);
      Complex complex16 = complex14.I.log();
      Complex complex17 = complex11.reciprocal();
      String string1 = complex17.ONE.toString();
      int int1 = complex13.hashCode();
      double double0 = complex0.abs();
      Complex complex18 = complex4.conjugate();
      ComplexField complexField0 = complex13.getField();
      Complex complex19 = complex13.acos();
      Complex complex20 = complex11.tan();
      double double1 = complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-903.8018050944805), (-903.8018050944805));
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-236.5342375712), 0.3757305145263672);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex1.I.tanh();
      List<Complex> list0 = complex3.INF.nthRoot(1);
      Complex complex4 = complex1.add((-236.5342375712));
      Complex complex5 = complex2.ZERO.divide((-1740.2));
      Complex complex6 = complex4.NaN.cos();
      Complex complex7 = complex3.reciprocal();
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex5.INF.sqrt();
      Complex complex9 = complex4.multiply(complex2);
      Complex complex10 = complex1.ZERO.multiply(0);
      Complex complex11 = complex5.add((double) 1);
      Complex complex12 = complex4.ONE.sqrt();
      Complex complex13 = complex9.I.subtract(6.283185307179586);
      Complex complex14 = complex11.ONE.atan();
      boolean boolean0 = complex3.equals(complex9);
      Complex complex15 = complex4.sin();
      Complex complex16 = complex0.log();
      Complex complex17 = complex9.asin();
      Complex complex18 = complex15.divide((double) 0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-478.77185), (-478.77185));
      Complex complex1 = complex0.ONE.add(845.5511);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex0.cos();
      double double0 = complex3.abs();
      Complex complex4 = complex0.ZERO.createComplex((-478.77185), (-478.77185));
      double double1 = complex3.abs();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex3.ONE.cos();
      Complex complex7 = complex0.createComplex((-478.77185), 593.4429287462808);
      Complex complex8 = complex3.subtract(593.4429287462808);
      Complex complex9 = Complex.valueOf(593.4429287462808);
      double double2 = complex3.getArgument();
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex6.ZERO.cos();
      String string0 = complex10.ONE.toString();
      Complex complex11 = complex0.add((-1.2497666543513999));
      double double3 = complex6.getImaginary();
      Complex complex12 = complex8.atan();
      double double4 = complex8.getReal();
      Complex complex13 = complex4.divide((-1712.046567990652));
      List<Complex> list0 = complex13.nthRoot(1);
      Complex complex14 = complex11.pow(complex6);
      String string1 = complex13.toString();
      int int0 = complex12.hashCode();
      Complex complex15 = complex0.exp();
      Complex complex16 = complex7.add(0.0);
      String string2 = complex11.toString();
      Complex complex17 = Complex.valueOf((-1.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.multiply(37);
      double double0 = complex1.NaN.abs();
      String string0 = complex1.INF.toString();
      Complex complex3 = complex0.atan();
      double double1 = complex1.abs();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = Complex.valueOf((double) 37, 0.0);
      Complex complex6 = complex4.I.tanh();
      Complex complex7 = complex6.I.multiply((-1.0));
      Complex complex8 = complex4.ONE.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex0.divide(Double.NaN);
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex4.INF.cosh();
      Complex complex12 = complex10.I.sqrt1z();
      Complex complex13 = complex7.ZERO.atan();
      Complex complex14 = complex2.asin();
      Complex complex15 = complex3.pow((double) 37);
      List<Complex> list0 = complex15.ONE.nthRoot(231);
      Complex complex16 = complex10.INF.sin();
      Complex complex17 = complex9.exp();
      Complex complex18 = complex0.I.pow(complex10);
      Complex complex19 = complex7.divide((-2072.67258));
      Complex complex20 = complex1.divide(Double.NaN);
      Complex complex21 = complex14.multiply(37);
      double double2 = complex3.abs();
      Complex complex22 = complex11.tan();
      Complex complex23 = complex11.multiply(complex2);
  }
}
