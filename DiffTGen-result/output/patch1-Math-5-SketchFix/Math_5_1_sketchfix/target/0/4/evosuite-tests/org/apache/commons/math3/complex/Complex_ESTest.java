/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:03:51 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1163.706430881063);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.subtract(1163.706430881063);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.conjugate();
      int int0 = complex0.hashCode();
      boolean boolean1 = complex0.isInfinite();
      Complex complex4 = complex3.ONE.multiply((-3417.0));
      double double1 = complex1.abs();
      double double2 = complex2.getImaginary();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.INF.divide(complex3);
      Complex complex7 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.multiply(5.486523121881414E-8);
      Complex complex9 = complex0.sqrt();
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1073741824));
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.tan();
      double double1 = complex2.ONE.abs();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.I.add((-1705.1));
      List<Complex> list0 = complex4.ZERO.nthRoot(1064);
      Complex complex6 = complex0.NaN.conjugate();
      Complex complex7 = complex0.multiply(1816);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = Complex.valueOf((-1.5707963267948966));
      Complex complex9 = complex1.log();
      Complex complex10 = complex0.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.valueOf((-408.93704), (-1705.1));
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.cosh();
      String string0 = complex0.toString();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.I.createComplex(Double.POSITIVE_INFINITY, 0.0);
      ComplexField complexField0 = complex3.getField();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex1.multiply(complex3);
      Complex complex10 = complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(277.781219736066, 277.781219736066);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.exp();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex1.NaN.divide(complex0);
      Complex complex6 = complex5.ZERO.multiply(complex0);
      Complex complex7 = complex5.ONE.divide(2.0);
      Complex complex8 = complex0.ZERO.log();
      Complex complex9 = complex5.ONE.sin();
      Complex complex10 = complex4.ONE.pow(277.781219736066);
      Complex complex11 = complex10.ONE.cosh();
      Complex complex12 = complex1.log();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex3.log();
      Complex complex15 = complex3.conjugate();
      Complex complex16 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.pow(0.0);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.sin();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.ZERO.subtract(Double.POSITIVE_INFINITY);
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex3.NaN.multiply(0.0);
      Complex complex6 = complex5.NaN.multiply((-210));
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = new Complex((-210), 0.0);
      Complex complex9 = complex6.ZERO.pow(complex8);
      Complex complex10 = complex1.divide(complex0);
      Complex complex11 = complex1.subtract(complex10);
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex12.reciprocal();
      double double2 = complex13.ZERO.abs();
      Complex complex14 = complex13.cos();
      boolean boolean0 = complex10.equals((Object) null);
      Complex complex15 = complex6.subtract((-1958.32316243));
      Complex complex16 = complex8.cosh();
      Object object0 = complex16.readResolve();
      Complex complex17 = complex16.createComplex((-1958.32316243), 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(897.3871213066315, 897.3871213066315);
      Complex complex1 = complex0.sin();
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex2.I.add(897.3871213066315);
      Complex complex5 = complex0.I.log();
      Complex complex6 = complex2.INF.negate();
      List<Complex> list0 = complex5.nthRoot(2704);
      Complex complex7 = complex0.subtract(897.3871213066315);
      Complex complex8 = Complex.valueOf(0.27342069149017334);
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex1.ZERO.multiply((-2782.77845));
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex11.tanh();
      Complex complex13 = Complex.valueOf((double) 2704, (-2.4006971787803736E189));
      Complex complex14 = complex11.NaN.divide(897.3871213066315);
      Complex complex15 = complex12.NaN.createComplex((-1.0), 1.0);
      double double1 = complex7.abs();
      boolean boolean0 = complex1.isNaN();
      Complex complex16 = complex1.exp();
      Complex complex17 = complex1.multiply(complex2);
      Complex complex18 = complex0.cos();
      Complex complex19 = complex6.exp();
      double double2 = complex0.getArgument();
      Complex complex20 = complex6.createComplex(0.0, 0.7853981633974483);
      Complex complex21 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = new Complex(1213.0, 835.178488442);
      String string0 = complex5.I.toString();
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex6.NaN.multiply(complex2);
      Complex complex8 = complex6.I.multiply(1);
      Complex complex9 = new Complex(835.178488442, 835.178488442);
      Complex complex10 = complex2.divide(complex9);
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex6.tan();
      Complex complex14 = complex8.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.divide(Double.NaN);
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex0.exp();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.ONE.acos();
      String string0 = complex4.toString();
      double double0 = complex1.getReal();
      Complex complex9 = Complex.NaN;
      try { 
        complex9.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex3.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.ONE.pow(complex3);
      Complex complex8 = complex5.I.sin();
      String string0 = complex2.ONE.toString();
      Complex complex9 = complex7.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.multiply(complex3);
      Complex complex11 = complex3.INF.add(20.0);
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex1.exp();
      Complex complex15 = complex14.NaN.sqrt();
      Object object0 = complex15.NaN.readResolve();
      Complex complex16 = complex3.add(1355.7252720654);
      Complex complex17 = complex16.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex18 = complex7.divide(complex6);
      Complex complex19 = complex14.createComplex(20.0, (-144.85781688));
      Complex complex20 = complex17.multiply(3393);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex0.ONE.tan();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex0.ONE.asin();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.I.atan();
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex0.add(Double.NaN);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex0.multiply(0);
      Complex complex7 = complex6.multiply(Double.NaN);
      Complex complex8 = Complex.valueOf(1253.9970143608248);
      Complex complex9 = Complex.valueOf(1543.965199);
      Complex complex10 = complex0.divide(complex9);
      Complex complex11 = complex10.INF.multiply(0);
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex0.multiply((-1940));
      Complex complex14 = complex13.ZERO.divide(complex5);
      int int0 = complex5.hashCode();
      Complex complex15 = complex0.NaN.sqrt();
      Complex complex16 = complex15.pow(complex4);
      Complex complex17 = complex16.NaN.subtract(1543.965199);
      Complex complex18 = Complex.valueOf(1253.9970143608248);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex19 = complex3.add(complex7);
      Object object1 = complex5.readResolve();
      Complex complex20 = complex11.reciprocal();
      String string0 = complex13.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.sin();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.ONE.subtract(Double.NaN);
      double double1 = complex4.ZERO.abs();
      Complex complex8 = complex4.ONE.conjugate();
      boolean boolean0 = complex4.isNaN();
      double double2 = complex0.getImaginary();
      Complex complex9 = complex2.ZERO.acos();
      Complex complex10 = complex3.ONE.cos();
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = Complex.valueOf(0.0);
      int int0 = complex12.hashCode();
      Complex complex13 = complex12.NaN.cos();
      Complex complex14 = complex0.pow(complex4);
      Complex complex15 = complex0.divide(complex3);
      Complex complex16 = complex15.ZERO.cos();
      Complex complex17 = complex4.multiply(complex14);
      Complex complex18 = complex17.log();
      Complex complex19 = Complex.valueOf((-805.3218311435421));
      Complex complex20 = complex1.multiply(0.0);
      Complex complex21 = complex4.negate();
      Complex complex22 = complex21.NaN.asin();
      Complex complex23 = complex2.multiply((-4967));
      Complex complex24 = complex14.pow((double) (-4967));
      Complex complex25 = complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3487.6503145), (-3487.6503145));
      Complex complex1 = complex0.NaN.sin();
      double double0 = complex0.abs();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex3.INF.sin();
      Complex complex7 = complex1.multiply(2.1782039447564253E47);
      Complex complex8 = complex7.INF.multiply(complex0);
      int int0 = complex1.hashCode();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.pow(complex9);
      Complex complex11 = Complex.valueOf(2.1782039447564253E47, 0.0);
      Complex complex12 = complex1.subtract((-899.07219475));
      Object object0 = complex12.readResolve();
      Complex complex13 = complex3.sin();
      Complex complex14 = Complex.valueOf((-3487.6503145));
      Complex complex15 = complex0.tan();
      Complex complex16 = complex1.subtract(complex3);
      Complex complex17 = complex2.exp();
      boolean boolean0 = complex12.isNaN();
      Complex complex18 = complex9.multiply(0);
      Complex complex19 = complex8.pow((-1875.5055906897426));
      Complex complex20 = complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      String string0 = complex0.toString();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1439.50405813569);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.cos();
      double double0 = complex3.ONE.abs();
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = Complex.valueOf(1439.50405813569, 1439.50405813569);
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex2.INF.add(complex1);
      Complex complex8 = complex7.ZERO.add(complex6);
      Complex complex9 = complex7.NaN.negate();
      Complex complex10 = complex9.I.subtract(complex1);
      List<Complex> list0 = complex7.INF.nthRoot(7);
      Complex complex11 = complex2.sqrt1z();
      double double1 = complex0.getArgument();
      Complex complex12 = complex1.pow(complex2);
      Object object0 = complex12.I.readResolve();
      Complex complex13 = Complex.valueOf((-1.0), (-588.8217506));
      Complex complex14 = complex13.cosh();
      Complex complex15 = complex13.divide((double) 7);
      Complex complex16 = complex14.divide(complex12);
      Complex complex17 = complex6.exp();
      Complex complex18 = complex1.tan();
      double double2 = complex0.abs();
      double double3 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1350.8275885951348, 1350.8275885951348);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.ONE.pow(0.0);
      Complex complex8 = Complex.valueOf(1180.3968993223693, 1350.8275885951348);
      Complex complex9 = Complex.valueOf(1180.3968993223693);
      int int0 = complex6.hashCode();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex3.divide(complex4);
      Complex complex12 = complex5.divide(complex8);
      Complex complex13 = complex1.reciprocal();
      double double0 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-825.2523090137));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.createComplex((-825.2523090137), (-825.2523090137));
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex2.ZERO.divide(complex3);
      Complex complex5 = complex1.NaN.divide(complex0);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex0.ZERO.reciprocal();
      Complex complex8 = complex0.ZERO.tanh();
      Complex complex9 = complex7.ZERO.createComplex((-562.0), (-562.0));
      Complex complex10 = complex9.ZERO.conjugate();
      double double0 = complex0.INF.getArgument();
      Complex complex11 = Complex.valueOf(0.7853981633974483, 20.0);
      ComplexField complexField0 = complex0.getField();
      double double1 = complex1.getReal();
      Complex complex12 = complex0.sinh();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex7.tanh();
      double double2 = complex1.getArgument();
      Complex complex14 = complex13.pow((-3.141592653589793));
      Complex complex15 = complex7.add((-1.0));
      Complex complex16 = complex13.sin();
      Complex complex17 = Complex.valueOf((-4348.729363106495));
      Complex complex18 = complex17.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2992.61399731));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.exp();
      boolean boolean0 = complex1.equals("Pa&)'MTsQ$/]");
      Complex complex4 = Complex.valueOf(143.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-108.416282));
      Complex complex1 = complex0.INF.reciprocal();
      double double0 = complex0.INF.abs();
      String string0 = complex0.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.0, 1972.728559040123);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.ONE.createComplex(119.0, 1972.728559040123);
      Complex complex5 = complex0.pow(119.0);
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex2.NaN.sin();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex0.divide(119.0);
      Complex complex12 = complex1.subtract(complex2);
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex13.I.sinh();
      Complex complex15 = complex4.cosh();
      Complex complex16 = Complex.valueOf(2075.9612);
      Complex complex17 = complex1.cosh();
      Complex complex18 = complex17.INF.divide(Double.NaN);
      double double0 = complex5.abs();
      boolean boolean0 = complex12.isNaN();
      Complex complex19 = complex1.tan();
      double double1 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.multiply((-921.23));
      Complex complex4 = complex1.log();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex0.multiply(0);
      String string0 = complex1.toString();
      Complex complex8 = Complex.valueOf(0.0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3797.840541875, 0.554580807685852);
      Complex complex1 = complex0.I.sinh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = Complex.valueOf(0.554580807685852, 1110.374828891);
      Complex complex3 = complex0.NaN.subtract(complex2);
      double double0 = complex0.abs();
      Complex complex4 = complex0.ONE.divide(complex3);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1852.564);
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.valueOf((-1393.1982477502215), 1852.564);
      Complex complex2 = complex1.NaN.sin();
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = new Complex((-1291.138148), 155.931);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ZERO.pow((-1831.5889392027088));
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ONE.divide(complex1);
      Complex complex6 = complex5.ONE.subtract(complex0);
      Complex complex7 = complex5.ZERO.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex7.log();
      Complex complex9 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.atan();
      Complex complex11 = complex4.multiply(2146.54055697554);
      Complex complex12 = complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1395.06847077, (-1997.37502504396));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.add(116.728310484263);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.15945645153806E-8));
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex2.I.divide((-1.15945645153806E-8));
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.ZERO.negate();
      double double0 = complex5.getArgument();
      Complex complex9 = complex6.add(complex1);
      double double1 = complex7.abs();
      ComplexField complexField0 = complex9.ONE.getField();
      Complex complex10 = complex5.cosh();
      List<Complex> list0 = complex10.nthRoot(513);
      Complex complex11 = complex9.tan();
      Complex complex12 = complex6.asin();
      Complex complex13 = complex10.tan();
      Complex complex14 = complex13.INF.sinh();
      double double2 = complex9.abs();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = Complex.valueOf((double) 513, 0.0);
      Complex complex17 = complex1.multiply(8.62473089937013E7);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2799.32502427947));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.pow((-891.817388006));
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.reciprocal();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex3.I.add(complex0);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.multiply(0.0);
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex3.readResolve();
      Object object1 = complex3.readResolve();
      Complex complex8 = complex3.conjugate();
      int int0 = complex8.I.hashCode();
      List<Complex> list0 = complex5.nthRoot(37);
      Complex complex9 = complex5.multiply(37);
      boolean boolean1 = complex2.equals("tSGqZX]5Q5");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.ZERO.pow(2.596336841583252);
      double double0 = complex2.NaN.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.INF.subtract(complex3);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex2.pow(complex5);
      Complex complex8 = complex2.ONE.sqrt();
      Complex complex9 = complex2.NaN.negate();
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex7.I.divide(20.0);
      Complex complex12 = complex11.ZERO.add(0.0);
      Complex complex13 = complex2.subtract(2.596336841583252);
      double double1 = complex0.getReal();
      Complex complex14 = complex7.add(complex13);
      boolean boolean0 = complex1.isNaN();
      Complex complex15 = complex4.pow(complex3);
      Complex complex16 = Complex.valueOf(1226.0, (-5.086067707));
      Complex complex17 = complex0.negate();
      Complex complex18 = complex11.log();
      Complex complex19 = complex18.INF.log();
      Complex complex20 = complex0.add(20.0);
      int int0 = complex19.hashCode();
      Complex complex21 = complex2.conjugate();
      Complex complex22 = complex19.subtract(810.5874888341);
      Complex complex23 = complex16.subtract(20.0);
      Complex complex24 = complex17.add(0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1348.23340261435), (-1348.23340261435));
      Complex complex2 = Complex.valueOf(0.0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = new Complex((-593.128));
      Complex complex11 = complex0.add(complex10);
      List<Complex> list0 = complex9.I.nthRoot(1974);
      ComplexField complexField0 = complex9.getField();
      Complex complex12 = complex1.pow(complex9);
      Complex complex13 = complex1.multiply((-1348.23340261435));
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex0.multiply(160);
      boolean boolean0 = complex9.isInfinite();
      Complex complex16 = complex3.pow(complex15);
      Complex complex17 = complex0.multiply(2136);
      Complex complex18 = complex13.pow(complex17);
      Complex complex19 = complex14.asin();
      Complex complex20 = complex14.asin();
      Complex complex21 = complex6.asin();
      Complex complex22 = complex9.acos();
      Complex complex23 = complex9.sqrt1z();
      double double0 = complex16.getImaginary();
      Complex complex24 = complex22.sinh();
      Complex complex25 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.5573811531066895, 0.5573811531066895);
      Complex complex1 = Complex.valueOf(0.5573811531066895, 0.0);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.sin();
      Object object0 = complex2.NaN.readResolve();
      double double0 = complex3.abs();
      Complex complex4 = complex3.subtract((-4006.298));
      double double1 = complex2.ONE.abs();
      List<Complex> list0 = complex4.nthRoot(690);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex3.cos();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2277.19096261783);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex1.ZERO.createComplex((-2054.592974102), (-2054.592974102));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex5.ZERO.multiply((-806));
      Complex complex8 = complex4.divide(complex5);
      Complex complex9 = Complex.valueOf(2.680137967689915E-304);
      Complex complex10 = complex9.I.multiply(1711);
      Complex complex11 = complex10.NaN.divide(2310.60329303);
      String string0 = complex1.ZERO.toString();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex2.pow((double) 1711);
      Complex complex14 = complex9.INF.add(complex4);
      Complex complex15 = complex10.negate();
      Complex complex16 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.I.pow(1.376213550567627);
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.add(0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex5 = complex4.NaN.negate();
      int int0 = complex5.INF.hashCode();
      int int1 = complex0.hashCode();
      Complex complex6 = complex4.INF.subtract(complex0);
      Complex complex7 = complex4.ONE.pow((-1343.87446));
      Complex complex8 = complex0.atan();
      ComplexField complexField1 = complex0.INF.getField();
      double double1 = complex4.abs();
      Complex complex9 = complex6.asin();
      Complex complex10 = Complex.valueOf(2447.2196814551);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex7.equals(object0);
      Complex complex11 = complex2.subtract(complex5);
      boolean boolean1 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.ONE.reciprocal();
      int int0 = complex1.INF.hashCode();
      Complex complex3 = Complex.valueOf(0.0, (-1675.895));
      Complex complex4 = complex1.INF.sin();
      double double1 = complex4.I.abs();
      Complex complex5 = complex2.subtract(0.0);
      double double2 = complex2.abs();
      Complex complex6 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex6.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.INF.readResolve();
      Object object1 = complex0.INF.readResolve();
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      int int0 = complex0.NaN.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.multiply(1585.0012509479);
      boolean boolean1 = complex1.equals(object1);
      boolean boolean2 = complex1.isInfinite();
      boolean boolean3 = complex2.isNaN();
      Complex complex3 = complex1.acos();
      String string0 = complex2.toString();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.pow(Double.NaN);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.sqrt();
      boolean boolean4 = complex6.equals((Object) null);
      Complex complex8 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2477.56289892));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.pow((-2477.56289892));
      String string0 = complex0.toString();
      Complex complex3 = complex0.multiply(0.0);
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex5.pow((-2477.56289892));
      double double1 = complex6.abs();
      Complex complex8 = Complex.ZERO;
      boolean boolean1 = complex7.equals(complex8);
      List<Complex> list0 = complex6.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1270.7188303850044), (-1270.7188303850044));
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.add((-1176.732804));
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex0.I.tanh();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-603.0), (-4.6157237582310713E-8));
      Complex complex1 = complex0.exp();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex1.pow(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex2.pow((-1.0));
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex2.subtract(complex3);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex7.sin();
      Complex complex11 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.multiply((-1750.61));
      Complex complex5 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-918.693296866), 138.19157);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.multiply((-78));
      Complex complex2 = complex0.divide(138.19157);
      Complex complex3 = complex2.sin();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex4 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ONE.add(2.0);
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.add(1.666527509689331);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex5.INF.multiply(complex1);
      boolean boolean0 = complex3.equals(complex5);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex7.INF.divide(complex2);
      List<Complex> list0 = complex6.nthRoot(748);
      Complex complex9 = complex0.INF.cos();
      Complex complex10 = complex4.ZERO.acos();
      Object object0 = complex3.readResolve();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex11.ONE.sqrt1z();
      ComplexField complexField0 = complex4.getField();
      double double0 = complex3.abs();
      String string0 = complex1.toString();
      Complex complex13 = complex10.exp();
      Complex complex14 = complex0.tanh();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex12.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex1.NaN.divide(1.0);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.pow(1.0);
      Complex complex7 = complex3.divide((-1499.41));
      Complex complex8 = complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2101.505379), (-2101.505379));
      Complex complex1 = new Complex(0.0, 717.6);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.ZERO.add(complex0);
      Complex complex7 = complex5.subtract(0.0);
      Complex complex8 = complex0.createComplex((-1009.4733035), 0.0);
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = complex3.divide(complex9);
      boolean boolean0 = complex11.isInfinite();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(5866.93349047381, 5866.93349047381);
      Complex complex1 = complex0.INF.divide((-6.151751570213211E-240));
      Complex complex2 = complex1.NaN.subtract(complex0);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex0.sinh();
      List<Complex> list0 = complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = complex0.I.add(1.0);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex4.cos();
      Complex complex9 = Complex.valueOf(1.0, 0.0);
      Complex complex10 = complex9.I.asin();
      Complex complex11 = complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex(0.0, (-2904.8));
      Complex complex3 = complex1.multiply(0.0);
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ZERO.multiply(complex2);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex6.asin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex0.cosh();
      String string0 = complex10.ONE.toString();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex10.acos();
      Complex complex13 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4805.521));
      Complex complex1 = complex0.INF.multiply((-4805.521));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.pow(4466.0);
      double double0 = complex3.INF.abs();
      Complex complex4 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.add(complex1);
      ComplexField complexField0 = complex0.ONE.getField();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.cosh();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex0.multiply((-2661));
      Complex complex6 = complex5.INF.conjugate();
      double double0 = complex5.ONE.abs();
      Complex complex7 = complex1.createComplex((-3033.9531402), (-3033.9531402));
      int int0 = complex5.hashCode();
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-18.430862426757812));
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = Complex.valueOf((-18.430862426757812));
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.reciprocal();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.NaN.multiply(1.772256261139753E-144);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex1.exp();
      double double1 = complex3.getArgument();
      Complex complex10 = complex7.asin();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = Complex.valueOf(1688.375586);
      Complex complex13 = complex0.pow(complex2);
      Complex complex14 = complex13.sinh();
      Complex complex15 = complex14.ZERO.cos();
      Complex complex16 = complex7.INF.sqrt();
      Complex complex17 = complex10.ZERO.cos();
      Complex complex18 = complex15.ONE.acos();
      Complex complex19 = complex14.NaN.pow(complex2);
      Complex complex20 = complex3.sqrt1z();
      Complex complex21 = complex20.NaN.conjugate();
      Complex complex22 = complex21.conjugate();
      Complex complex23 = complex3.subtract(complex0);
      double double2 = complex10.getImaginary();
      int int0 = complex11.hashCode();
      double double3 = complex8.getReal();
      Complex complex24 = complex12.reciprocal();
      Complex complex25 = complex3.sqrt();
      Complex complex26 = complex18.sin();
      String string0 = complex13.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = new Complex((-20.0), 1663.879197);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex0.add((-20.0));
      Complex complex4 = complex3.I.acos();
      double double0 = complex3.getArgument();
      double double1 = complex3.ZERO.getArgument();
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex7.ZERO.multiply((-1063));
      double double2 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3684740712822874E-41, (-799.477008083));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.valueOf(2.3684740712822874E-41);
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.ONE.tanh();
      double double0 = complex0.I.getArgument();
      Complex complex4 = complex1.acos();
      double double1 = complex4.I.abs();
      Complex complex5 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-2105.267379585395), 1060.6816087059685);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.subtract((-2331.88));
      Complex complex5 = complex1.INF.pow((-2105.267379585395));
      Complex complex6 = complex4.I.createComplex((-2105.267379585395), (-1568.2361345002423));
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex0.multiply(complex10);
      double double0 = complex10.getReal();
      Complex complex12 = complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.reciprocal();
      Object object0 = complex1.ONE.readResolve();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex5.multiply((-1554.10287229574));
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(3463.1750038288);
      Object object0 = complex0.readResolve();
      int int0 = complex0.INF.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      List<Complex> list0 = complex1.I.nthRoot(1);
      double double0 = complex1.getImaginary();
      Complex complex3 = Complex.valueOf(3463.1750038288, 20.0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.ONE.createComplex((-2.0697130057384643E245), 0.0);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex4.atan();
      Complex complex8 = Complex.valueOf((-652.1801301));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1614.58664));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.03643739968538284);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.asin();
      String string0 = complex2.NaN.toString();
      try { 
        complex1.ZERO.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sqrt1z();
      double double1 = complex0.abs();
      Complex complex2 = complex0.ZERO.add(0.0);
      Complex complex3 = complex2.I.createComplex(0.0, 3168.54);
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex0.multiply(3708);
      Complex complex8 = complex7.NaN.createComplex(0.0, 20.0);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.NaN.subtract(complex1);
      Complex complex7 = complex0.multiply(2.0);
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.NaN.subtract(20.0);
      Object object0 = complex0.readResolve();
      double double0 = complex0.abs();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.subtract(1.0);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ONE.tan();
      double double0 = complex0.INF.abs();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex5.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.subtract(complex2);
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.ZERO.subtract(0.0);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = complex5.multiply(2180);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.acos();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2.3686132431030273);
      Complex complex2 = complex0.INF.divide(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.tan();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex3.INF.add(6.283185307179586);
      Complex complex6 = complex5.ZERO.atan();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(2283.31, 2283.31);
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.divide(1.2567956334920216E105);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-2477.400730663554));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.ZERO.multiply(0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = new Complex(0.0, (-474.383563467974));
      boolean boolean0 = complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.cos();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-660.27), (-660.27));
      Complex complex1 = complex0.divide((-660.27));
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.ZERO.cosh();
      boolean boolean0 = complex1.equals("-tEc-=s=pu?");
      Complex complex6 = complex5.multiply(3403);
      double double0 = complex6.INF.abs();
      Complex complex7 = complex1.ONE.add(complex4);
      Complex complex8 = complex5.add((double) 3403);
      double double1 = complex3.abs();
      Complex complex9 = complex0.ZERO.reciprocal();
      Complex complex10 = complex9.divide(complex8);
      Complex complex11 = complex2.ONE.sqrt1z();
      Complex complex12 = complex5.createComplex((-291.87195261395), (-432.52));
      String string0 = complex4.toString();
      Complex complex13 = complex1.reciprocal();
      Complex complex14 = complex1.negate();
      boolean boolean1 = complex1.equals(complex14);
      List<Complex> list0 = complex7.nthRoot(1577);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1788.498479), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(2193.62);
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.ZERO.divide(0.0);
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex1.INF.add(complex4);
      Complex complex7 = complex4.ZERO.acos();
      Complex complex8 = complex2.ONE.subtract(0.0);
      double double0 = complex1.abs();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex3.ZERO.divide((-1788.498479));
      boolean boolean1 = complex0.isNaN();
      double double1 = complex2.abs();
      Complex complex11 = complex9.asin();
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.ZERO.conjugate();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex3.tanh();
      Complex complex16 = Complex.valueOf(1.644449394585716E-196, (-1334.02));
      boolean boolean2 = complex11.isInfinite();
      try { 
        complex4.nthRoot((-1183));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,183
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.0, 1972.728559040123);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.ONE.createComplex(119.0, 1972.728559040123);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex2.NaN.sin();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex0.divide(119.0);
      Complex complex11 = complex1.subtract(complex2);
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex12.I.sinh();
      Complex complex14 = complex13.I.pow(4.4651109654500895E-8);
      Complex complex15 = complex4.cosh();
      Complex complex16 = Complex.valueOf(2075.9612);
      Complex complex17 = complex1.cosh();
      Complex complex18 = complex17.INF.divide(Double.NaN);
      double double0 = complex0.abs();
      boolean boolean0 = complex11.isNaN();
      Complex complex19 = complex1.tan();
      double double1 = complex5.getReal();
      String string0 = complex0.toString();
      Complex complex20 = complex16.createComplex(1972.728559040123, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(1.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = Complex.valueOf(1215.8952911813672, 1215.8952911813672);
      Complex complex8 = complex2.INF.subtract(complex7);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.abs();
      int int0 = complex8.hashCode();
      Complex complex9 = Complex.valueOf((-1.0524451040704701E-7), (-2073.9906081139234));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex1.I.divide(0.0);
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.valueOf(3.0482348236054953E-83);
      Complex complex8 = complex0.exp();
      double double0 = complex3.abs();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex0.subtract(complex7);
      Complex complex11 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex3.ONE.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex0.INF.multiply(0);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex6.I.createComplex(0, (-1962.09661912));
      Complex complex10 = complex8.ZERO.divide(complex2);
      Complex complex11 = complex8.NaN.sin();
      Complex complex12 = complex11.ONE.tan();
      Complex complex13 = complex11.NaN.conjugate();
      double double0 = complex1.getArgument();
      boolean boolean0 = complex2.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex14 = complex1.ZERO.sqrt();
      Complex complex15 = complex14.NaN.add(complex3);
      Complex complex16 = complex5.atan();
      Complex complex17 = complex16.pow(0.0);
      Complex complex18 = complex6.reciprocal();
      Complex complex19 = complex9.pow(0.0);
      Complex complex20 = complex10.exp();
      Complex complex21 = complex12.subtract(2.0);
      Complex complex22 = complex11.createComplex(0.0, 3331.45654572505);
      boolean boolean1 = complex19.isNaN();
      double double1 = complex7.getArgument();
      Complex complex23 = complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-852.71), (-852.71));
      Complex complex2 = complex1.INF.tanh();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex0.I.cos();
      List<Complex> list0 = complex4.INF.nthRoot(1);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ZERO.multiply((-852.71));
      Complex complex7 = complex6.I.sqrt();
      int int0 = complex1.hashCode();
      Complex complex8 = complex3.I.divide(1803.59583512376);
      Complex complex9 = complex5.negate();
      Object object0 = complex3.NaN.readResolve();
      Complex complex10 = complex9.pow(complex0);
      String string0 = complex3.INF.toString();
      double double1 = complex10.abs();
      double double2 = complex5.ZERO.getArgument();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex9.add(Double.NaN);
      Complex complex13 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex14 = complex1.add(complex12);
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex14.ZERO.divide(0.0);
      Complex complex17 = complex16.I.cos();
      Complex complex18 = complex17.NaN.pow(0.0);
      Complex complex19 = complex12.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex10.isNaN();
      Complex complex20 = complex13.cosh();
      Complex complex21 = complex13.acos();
      Complex complex22 = complex4.sqrt1z();
      ComplexField complexField0 = complex10.getField();
      double double3 = complex4.getArgument();
      Complex complex23 = complex0.sinh();
      Complex complex24 = complex22.negate();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      double double0 = complex0.NaN.getArgument();
      double double1 = complex1.NaN.abs();
      double double2 = complex1.ONE.getArgument();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex3.ONE.asin();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex1.createComplex(0.0, 20.0);
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex5.I.add(323.73922012);
      Complex complex8 = complex7.INF.multiply((-3009));
      double double3 = complex1.getImaginary();
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex2.ZERO.negate();
      Complex complex11 = complex6.ZERO.divide(1.4953253269195557);
      try { 
        complex9.nthRoot((-3009));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,009
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ZERO.subtract((-7.461209161105275E-9));
      Complex complex3 = complex2.NaN.pow((-7.461209161105275E-9));
      Complex complex4 = complex0.ZERO.pow(complex1);
      double double0 = complex0.getReal();
      Complex complex5 = complex0.add(1.0);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex2.subtract(8.257484966196574E-8);
      Complex complex9 = Complex.valueOf(8.257484966196574E-8);
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex10 = complex4.ONE.negate();
      List<Complex> list0 = complex10.NaN.nthRoot(692);
      boolean boolean0 = complex8.isInfinite();
      double double1 = complex4.getImaginary();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = complex8.multiply(complex4);
      Complex complex14 = complex7.subtract((-6013.526432801));
      Complex complex15 = complex1.ZERO.cosh();
      Complex complex16 = complex14.ZERO.atan();
      Complex complex17 = complex14.ZERO.divide(0.0);
      Object object0 = new Object();
      boolean boolean1 = complex4.equals(object0);
      boolean boolean2 = complex3.equals("(1.0, 0.0)");
      double double2 = complex11.getArgument();
      Object object1 = complex17.readResolve();
      Complex complex18 = complex3.subtract(complex4);
  }
}
