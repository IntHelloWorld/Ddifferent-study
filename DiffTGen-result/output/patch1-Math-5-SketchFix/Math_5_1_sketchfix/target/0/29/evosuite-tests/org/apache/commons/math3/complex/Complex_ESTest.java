/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:14:24 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf(1097.0, (-1.0));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex5.NaN.pow(complex1);
      Complex complex8 = complex5.divide(Double.NaN);
      Complex complex9 = complex1.multiply((-1701));
      Complex complex10 = complex5.divide((-1.0));
      Complex complex11 = complex4.tan();
      Complex complex12 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(2107.176100002396, Double.NaN);
      Complex complex1 = complex0.I.exp();
      ComplexField complexField0 = complex0.ZERO.getField();
      List<Complex> list0 = complex0.nthRoot(1365);
      Complex complex2 = complex1.multiply(Double.NaN);
      List<Complex> list1 = complex2.nthRoot(3606);
      Complex complex3 = complex2.I.pow(0.7615941559557649);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = new Complex(2540.70438);
      Complex complex6 = complex4.ONE.subtract(complex5);
      Complex complex7 = complex4.ZERO.atan();
      Complex complex8 = complex3.I.exp();
      double double0 = complex8.ZERO.getArgument();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex4.ZERO.divide(complex2);
      Complex complex6 = Complex.valueOf(4058.825061762);
      Complex complex7 = complex0.createComplex(0.0, 2.0);
      Complex complex8 = complex7.divide(complex0);
      Complex complex9 = complex8.ONE.multiply(0);
      double double0 = complex9.INF.abs();
      double double1 = complex9.NaN.abs();
      double double2 = complex0.getReal();
      double double3 = complex7.getReal();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex12.NaN.cosh();
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex10.I.pow(0.0);
      Complex complex16 = complex14.NaN.log();
      Complex complex17 = complex14.ONE.pow(0.0);
      Object object0 = complex14.readResolve();
      Complex complex18 = complex17.INF.add(complex7);
      Complex complex19 = complex11.divide((-2.298302779758532E-9));
      Complex complex20 = complex17.reciprocal();
      Complex complex21 = complex11.multiply(complex14);
      Complex complex22 = complex21.reciprocal();
      Complex complex23 = complex22.ONE.multiply((-1.0));
      ComplexField complexField0 = complex21.getField();
      Complex complex24 = complex4.exp();
      Complex complex25 = complex9.tan();
      Complex complex26 = complex17.subtract(Double.NaN);
      try { 
        complex20.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(2746.0);
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex1.nthRoot(37);
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.I.tan();
      int int1 = complex2.ONE.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex3 = Complex.valueOf(1.2664165777252073E-14);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex5.INF.tanh();
      List<Complex> list1 = complex3.ONE.nthRoot(17);
      Complex complex7 = complex1.divide(2074.383885476);
      String string0 = complex0.toString();
      Complex complex8 = complex1.sqrt1z();
      ComplexField complexField0 = complex8.INF.getField();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.divide(complex2);
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex10.I.sqrt1z();
      Complex complex13 = complex1.acos();
      Complex complex14 = complex13.NaN.subtract(complex0);
      Complex complex15 = complex8.add((-1276.42512716));
      double double0 = complex15.NaN.getArgument();
      Complex complex16 = complex7.tanh();
      Complex complex17 = complex0.I.reciprocal();
      Complex complex18 = complex0.reciprocal();
      double double1 = complex3.abs();
      Object object1 = complex2.readResolve();
      boolean boolean1 = complex6.equals(complex4);
      Complex complex19 = complex2.sinh();
      Complex complex20 = complex17.reciprocal();
      Complex complex21 = complex18.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1727.8892118118));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = new Complex((-1727.8892118118), 0.0);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex3.ZERO.asin();
      Complex complex9 = complex8.I.subtract(complex3);
      Complex complex10 = complex6.reciprocal();
      boolean boolean0 = complex6.isInfinite();
      Complex complex11 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(248.215510402586);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(248.215510402586);
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      double double1 = complex0.INF.abs();
      Complex complex4 = complex3.NaN.sqrt();
      double double2 = complex4.INF.abs();
      Complex complex5 = complex1.add((-3107.691064591569));
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex1.I.acos();
      Complex complex8 = complex6.negate();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex9.ZERO.conjugate();
      boolean boolean0 = complex1.isNaN();
      Complex complex11 = complex6.tanh();
      Complex complex12 = Complex.valueOf(248.215510402586, 2982.1);
      Object object0 = new Object();
      boolean boolean1 = complex7.equals(object0);
      Complex complex13 = complex1.ONE.tan();
      try { 
        complex13.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.valueOf(8.849812639395597E201, 8.849812639395597E201);
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex1.pow(0.0);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex7 = complex3.I.sinh();
      double double0 = complex2.getArgument();
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = complex8.add(1.5707963267948966);
      Complex complex10 = complex5.acos();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex12.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(17);
      Complex complex2 = complex0.NaN.createComplex(1147.039311403, (-6573.888850964534));
      String string0 = complex2.toString();
      Complex complex3 = complex0.divide(3.230089643550739E-275);
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex3.ONE.pow(1147.039311403);
      Complex complex5 = complex4.subtract(1.7663064617118723E-8);
      double double0 = complex0.ZERO.getArgument();
      Complex complex6 = complex3.multiply((-6573.888850964534));
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex6.cos();
      Complex complex13 = complex6.INF.cos();
      Complex complex14 = complex9.I.createComplex(0.0, (-3218.9719372728));
      Complex complex15 = complex1.sin();
      Complex complex16 = complex12.multiply(complex6);
      Complex complex17 = complex15.asin();
      boolean boolean0 = complex16.equals(complex9);
      Complex complex18 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(2876);
      Complex complex2 = complex0.I.multiply((-1410.5847990260777));
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex3.I.subtract((-1410.5847990260777));
      Complex complex6 = complex1.I.negate();
      Complex complex7 = complex0.ONE.sqrt();
      Complex complex8 = complex6.ZERO.createComplex((-1410.5847990260777), 2876);
      double double0 = complex2.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex9 = complex2.NaN.acos();
      List<Complex> list1 = complex9.I.nthRoot(2876);
      Complex complex10 = complex3.INF.acos();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex7.tan();
      Complex complex14 = complex10.ONE.sqrt1z();
      Complex complex15 = complex4.multiply(1);
      Complex complex16 = complex10.negate();
      List<Complex> list2 = complex4.nthRoot(1);
      boolean boolean0 = complex10.equals((Object) null);
      List<Complex> list3 = complex7.nthRoot(68);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.multiply(2073);
      Complex complex6 = Complex.valueOf((-2306.28234), Double.NaN);
      Complex complex7 = complex0.add(Double.NaN);
      Complex complex8 = complex7.conjugate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex9 = complex4.ONE.conjugate();
      Complex complex10 = complex4.createComplex(2073, 2073);
      Complex complex11 = complex4.negate();
      Complex complex12 = complex11.ONE.tan();
      Complex complex13 = complex2.INF.atan();
      boolean boolean1 = complex4.isNaN();
      Complex complex14 = complex7.ONE.pow(complex1);
      Complex complex15 = complex14.INF.sqrt();
      Complex complex16 = complex10.I.divide(complex4);
      Complex complex17 = complex4.asin();
      double double0 = complex17.INF.getArgument();
      Complex complex18 = complex10.divide(complex2);
      Complex complex19 = complex5.createComplex(Double.NaN, (-1.7929433274271985E-8));
      ComplexField complexField0 = complex19.NaN.getField();
      Complex complex20 = complex5.sqrt();
      Complex complex21 = complex7.negate();
      int int0 = complex21.NaN.hashCode();
      Complex complex22 = complex20.multiply(complex2);
      Complex complex23 = complex0.sqrt();
      Complex complex24 = complex20.atan();
      String string0 = complex15.toString();
      Complex complex25 = complex17.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      List<Complex> list0 = complex1.ZERO.nthRoot(7);
      Complex complex2 = Complex.valueOf(294.772804271);
      Complex complex3 = complex1.INF.createComplex(294.772804271, (-2722.5973596));
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.sqrt1z();
      double double0 = complex5.getReal();
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = complex3.tan();
      Complex complex10 = Complex.valueOf((-1814.0694208243));
      Complex complex11 = complex3.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.INF.subtract(complex3);
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.NaN.subtract((-240.12725382743264));
      double double0 = complex0.ZERO.getArgument();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex4.ZERO.divide(complex2);
      Complex complex6 = Complex.valueOf(4058.825061762);
      Complex complex7 = complex0.createComplex(0.0, 2.0);
      Complex complex8 = complex7.divide(complex0);
      Complex complex9 = complex8.ONE.multiply(0);
      double double0 = complex9.INF.abs();
      double double1 = complex9.NaN.abs();
      double double2 = complex0.getReal();
      double double3 = complex7.getReal();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex12.NaN.cosh();
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex10.I.pow(0.0);
      Complex complex16 = complex14.NaN.log();
      Complex complex17 = complex14.ONE.pow(0.0);
      Object object0 = complex14.readResolve();
      Complex complex18 = complex17.INF.add(complex7);
      Complex complex19 = complex11.divide((-2.298302779758532E-9));
      Complex complex20 = complex17.reciprocal();
      Complex complex21 = complex11.multiply(complex14);
      Complex complex22 = complex21.reciprocal();
      ComplexField complexField0 = complex21.getField();
      Complex complex23 = complex4.exp();
      Complex complex24 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = Complex.valueOf(2843.311026);
      Complex complex5 = complex4.NaN.pow((-1748.5295));
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex5.INF.createComplex(2843.311026, 6.1009492034592176E-158);
      Complex complex8 = complex3.pow(complex2);
      Complex complex9 = complex1.negate();
      Complex complex10 = Complex.valueOf(2843.311026, 6.1009492034592176E-158);
      Complex complex11 = complex10.ONE.cosh();
      Complex complex12 = complex3.multiply(56);
      String string0 = complex8.toString();
      Complex complex13 = complex5.reciprocal();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex3.divide(complex0);
      Complex complex16 = complex1.subtract(complex15);
      Complex complex17 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.I.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.atan();
      double double1 = complex2.getImaginary();
      Complex complex4 = complex2.I.pow(complex0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.createComplex(-0.0, -0.0);
      Complex complex7 = complex6.I.acos();
      Complex complex8 = Complex.valueOf(-0.0);
      Complex complex9 = complex2.negate();
      double double2 = complex6.getImaginary();
      Complex complex10 = complex6.INF.sin();
      Complex complex11 = complex2.NaN.subtract(Double.NaN);
      Complex complex12 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex13 = complex8.INF.cos();
      Object object0 = complex12.NaN.readResolve();
      Complex complex14 = complex7.pow(complex5);
      boolean boolean0 = complex8.isInfinite();
      Complex complex15 = complex2.divide((-4440.91));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex4.ONE.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex5.INF.readResolve();
      int int0 = complex1.hashCode();
      Complex complex6 = complex0.add(1842.0);
      Complex complex7 = complex2.log();
      Complex complex8 = complex2.ZERO.cosh();
      Complex complex9 = complex7.add(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.multiply(Double.POSITIVE_INFINITY);
      Object object1 = complex10.I.readResolve();
      boolean boolean0 = complex9.isInfinite();
      Complex complex11 = complex2.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex11.pow(complex0);
      Complex complex13 = complex6.tan();
      Complex complex14 = complex8.I.log();
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex16 = complex15.cosh();
      Complex complex17 = complex15.sin();
      Complex complex18 = complex11.acos();
      double double1 = complex11.getReal();
      double double2 = complex8.abs();
      double double3 = complex3.abs();
      Complex complex19 = complex7.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(22.83, Double.NaN);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.multiply(1);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex5 = complex0.I.multiply(complex2);
      Complex complex6 = complex3.subtract(5.5737717715868425E-8);
      Complex complex7 = complex6.ZERO.multiply(1);
      Complex complex8 = complex5.NaN.subtract(2749.091582407851);
      Complex complex9 = complex7.pow(3360.8);
      Complex complex10 = complex1.multiply((-991));
      Complex complex11 = complex4.subtract(complex7);
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex5.pow(Double.NaN);
      Complex complex15 = complex7.sqrt1z();
      Complex complex16 = complex5.pow(2749.091582407851);
      Complex complex17 = complex5.pow(complex8);
      try { 
        complex15.nthRoot((-248));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -248
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf((-4098.387219), (-4098.387219));
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex1.createComplex((-4098.387219), (-1475.8337));
      Complex complex5 = complex1.ONE.multiply(1);
      Complex complex6 = complex5.ONE.tan();
      double double0 = complex2.abs();
      double double1 = complex0.getImaginary();
      Complex complex7 = complex2.conjugate();
      int int0 = complex0.hashCode();
      double double2 = complex3.abs();
      double double3 = complex0.getReal();
      Complex complex8 = complex7.INF.add(0.0);
      Complex complex9 = complex3.pow(0.0);
      Complex complex10 = complex9.I.asin();
      Complex complex11 = complex9.NaN.pow(complex1);
      double double4 = complex7.abs();
      Complex complex12 = complex9.divide(complex7);
      Complex complex13 = complex7.INF.divide(complex8);
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex13.NaN.cos();
      Complex complex16 = complex13.INF.sqrt();
      boolean boolean0 = complex9.isInfinite();
      Complex complex17 = complex1.negate();
      double double5 = complex0.getReal();
      Complex complex18 = complex7.subtract(complex1);
      Complex complex19 = complex18.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.283163019991001E-164);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.valueOf(2387.6901031);
      Complex complex2 = complex1.tanh();
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex2.nthRoot(1174);
      List<Complex> list1 = complex2.nthRoot(1174);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.createComplex((-3.144430608076357E-21), (-1.5314373779304356E296));
      Complex complex5 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.add(8.881133159512924E277);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.add(complex1);
      double double1 = complex4.ONE.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex6.NaN.multiply(complex5);
      double double2 = complex0.getArgument();
      boolean boolean0 = complex3.equals(complex5);
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.multiply(0.0);
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex0.divide(0.0);
      ComplexField complexField1 = complex0.ZERO.getField();
      Complex complex11 = complex6.subtract(complex0);
      Object object0 = complex7.readResolve();
      boolean boolean1 = complex5.equals(object0);
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex1.pow(complex6);
      Complex complex14 = complex13.sinh();
      Complex complex15 = complex13.NaN.acos();
      ComplexField complexField2 = complex1.getField();
      Complex complex16 = complex1.acos();
      Complex complex17 = Complex.valueOf(1.0, 0.7853981633974483);
      Complex complex18 = complex10.add(0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.valueOf(504.42323);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = Complex.valueOf(504.42323, 504.42323);
      Complex complex6 = complex3.ZERO.subtract(504.42323);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex1.ZERO.sinh();
      Complex complex10 = complex3.ONE.createComplex(0.0, 1159.2694332619);
      int int0 = complex10.hashCode();
      Complex complex11 = complex3.multiply(complex1);
      Complex complex12 = complex4.divide(2569.0);
      Complex complex13 = complex12.NaN.log();
      boolean boolean0 = complex11.isNaN();
      Complex complex14 = complex11.reciprocal();
      Complex complex15 = complex0.ONE.acos();
      Complex complex16 = complex15.I.sinh();
      Complex complex17 = complex14.atan();
      List<Complex> list0 = complex17.nthRoot(2922);
      Complex complex18 = complex11.subtract(504.42323);
      Complex complex19 = complex8.multiply(2922);
      List<Complex> list1 = complex3.ONE.nthRoot(2922);
      double double0 = complex19.NaN.abs();
      Complex complex20 = complex18.cos();
      Complex complex21 = complex19.pow(504.42323);
      Complex complex22 = complex21.sin();
      Object object0 = new Object();
      boolean boolean1 = complex14.equals(object0);
      Complex complex23 = complex8.sqrt1z();
      Complex complex24 = complex8.pow(complex1);
      Complex complex25 = complex24.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.I.pow((-1616.3399672));
      Complex complex3 = complex1.I.divide(complex2);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.NaN.createComplex(1.0, 1.0);
      Complex complex6 = complex5.INF.multiply(2622);
      Complex complex7 = complex5.I.sin();
      int int0 = complex0.hashCode();
      Complex complex8 = complex2.I.multiply(1482);
      Complex complex9 = complex8.NaN.createComplex(0.0, 1482);
      Complex complex10 = complex9.I.cos();
      double double0 = complex0.INF.getArgument();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex1.subtract((-1274.0));
      Complex complex13 = complex12.ZERO.sinh();
      List<Complex> list0 = complex12.nthRoot(1);
      Complex complex14 = complex12.I.asin();
      Complex complex15 = complex1.pow((-1274.0));
      List<Complex> list1 = complex15.NaN.nthRoot(1482);
      Complex complex16 = complex15.ONE.conjugate();
      Complex complex17 = complex0.conjugate();
      Complex complex18 = complex12.multiply(0.0);
      Complex complex19 = complex0.divide(0.6451379060745239);
      Complex complex20 = complex11.multiply(1482);
      double double1 = complex2.abs();
      Complex complex21 = complex19.tanh();
      Complex complex22 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.76097684E-316), (-3289.592342708714));
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = Complex.valueOf((-1.76097684E-316));
      Object object0 = complex0.ZERO.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.add(6.283185307179586);
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-867.93), (-867.93));
      Complex complex1 = complex0.NaN.add(830.48);
      Complex complex2 = complex0.ZERO.conjugate();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex1.ZERO.multiply(1);
      int int0 = complex1.ZERO.hashCode();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.tan();
      Object object0 = complex4.INF.readResolve();
      double double0 = complex4.getArgument();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex0.NaN.add(complex7);
      double double1 = complex4.getArgument();
      Complex complex9 = complex4.multiply(0.0);
      int int0 = complex4.INF.hashCode();
      Complex complex10 = complex6.exp();
      Complex complex11 = complex9.sqrt1z();
      double double2 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.cosh();
      String string0 = complex4.I.toString();
      Object object0 = complex3.readResolve();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex2.atan();
      Complex complex8 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.pow(0.0);
      Object object0 = complex3.readResolve();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.NaN.divide((-1.0));
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex11.INF.sqrt();
      Complex complex13 = complex11.ZERO.pow(944.695641081);
      Complex complex14 = complex1.add((-1.0));
      Complex complex15 = Complex.valueOf(0.0, (-1659.53566));
      Complex complex16 = complex9.sin();
      Complex complex17 = complex16.INF.sin();
      Complex complex18 = complex8.ZERO.sqrt1z();
      Complex complex19 = complex6.cos();
      boolean boolean0 = complex9.isNaN();
      Complex complex20 = complex19.acos();
      boolean boolean1 = complex19.equals(complex17);
      double double0 = complex20.getArgument();
      Complex complex21 = complex18.sqrt();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.divide(3507.46);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      double double1 = complex1.getReal();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex3.subtract(3507.46);
      Object object0 = complex4.readResolve();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1198.9816064671734);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.sqrt();
      double double0 = complex3.I.abs();
      double double1 = complex3.getArgument();
      Complex complex5 = complex3.subtract(1198.9816064671734);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = new Complex(252.4188656044255, 323.353);
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex3.reciprocal();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-672.2447706));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.multiply((-1374.7943690072054));
      Complex complex3 = complex0.NaN.subtract(complex1);
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = Complex.valueOf((-672.2447706), 0.0);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex5.NaN.sqrt1z();
      Complex complex8 = complex4.NaN.pow((-672.2447706));
      Complex complex9 = complex5.NaN.add(2.862518609581133E-20);
      Complex complex10 = complex9.INF.subtract(complex6);
      int int0 = complex3.hashCode();
      Complex complex11 = complex3.multiply(complex4);
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex12.NaN.divide(0.0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex14 = complex0.pow((-672.2447706));
      Complex complex15 = complex3.subtract(complex0);
      Complex complex16 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 213.17566729);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex1.ONE.atan();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex6 = complex1.ONE.exp();
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex6.ZERO.subtract(complex2);
      Complex complex9 = complex6.ONE.negate();
      Complex complex10 = complex6.ZERO.pow(complex3);
      Complex complex11 = complex1.INF.subtract(1.7590672330295415E-8);
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex4.add(complex1);
      double double0 = complex8.getImaginary();
      Complex complex14 = complex7.cos();
      Complex complex15 = complex14.log();
      Complex complex16 = complex11.multiply((-1845));
      Complex complex17 = Complex.valueOf(213.17566729);
      Complex complex18 = complex9.pow(complex17);
      Complex complex19 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.08692999184131622, 2.0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(0.08692999184131622);
      Complex complex4 = complex0.INF.atan();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex5.I.subtract(2.0);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex1.ONE.divide(complex3);
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex2.nthRoot(3884);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.I.pow(396.47160932791);
      Complex complex8 = complex5.INF.pow((double) 3884);
      Complex complex9 = complex3.asin();
      double double0 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(2395.08229010677);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1800.0));
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.divide(complex1);
      int int0 = complex0.NaN.hashCode();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex5.I.createComplex((-1800.0), (-1800.0));
      Complex complex9 = complex6.tan();
      Complex complex10 = complex7.cos();
      boolean boolean0 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-437.33321));
      Complex complex1 = Complex.valueOf((-437.33321), (-437.33321));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(146.600202988, 146.600202988);
      int int0 = complex0.INF.hashCode();
      Complex complex4 = complex0.subtract((-437.33321));
      Complex complex5 = Complex.valueOf(146.600202988);
      Complex complex6 = complex4.log();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex0.createComplex((-3072.9577238039), (-1838.03182));
      double double0 = complex4.abs();
      Complex complex8 = complex1.pow((-437.33321));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Complex complex2 = complex1.I.multiply(1433);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.ZERO.sin();
      Complex complex6 = complex2.I.cosh();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex1.INF.conjugate();
      Complex complex9 = complex2.pow(0.0);
      Complex complex10 = complex8.ZERO.negate();
      double double0 = complex8.getArgument();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex11.divide(complex8);
      int int0 = complex6.hashCode();
      Complex complex13 = complex12.add(20.0);
      int int1 = complex1.hashCode();
      Complex complex14 = complex13.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1116.9425), (-1116.9425));
      Complex complex1 = complex0.ONE.multiply(2136);
      Complex complex2 = complex1.divide(1.4047281742095947);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex2.INF.subtract(complex0);
      Complex complex7 = complex6.I.multiply(complex1);
      Complex complex8 = complex6.sin();
      Complex complex9 = complex0.INF.negate();
      Complex complex10 = complex0.INF.divide(complex2);
      Complex complex11 = complex4.INF.reciprocal();
      Complex complex12 = complex2.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex13.ZERO.subtract(complex4);
      Complex complex15 = complex5.reciprocal();
      Complex complex16 = complex2.log();
      Complex complex17 = complex1.acos();
      Complex complex18 = complex0.tanh();
      Complex complex19 = complex17.tanh();
      Complex complex20 = complex19.negate();
      boolean boolean1 = complex1.isInfinite();
      Complex complex21 = complex17.cos();
      boolean boolean2 = complex0.equals(complex18);
      String string0 = complex19.toString();
      Complex complex22 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1522.0), (-1522.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.NaN.pow(complex3);
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex5.ONE.add((-1522.0));
      Complex complex7 = Complex.valueOf((-2.2667181460478093E132), (-9.185071463667081E-9));
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex0.sin();
      Complex complex11 = complex9.exp();
      Complex complex12 = complex9.INF.tanh();
      int int0 = complex11.hashCode();
      boolean boolean0 = complex11.equals((Object) null);
      double double0 = complex3.INF.getArgument();
      Complex complex13 = complex11.multiply(870);
      Complex complex14 = complex3.createComplex(Double.POSITIVE_INFINITY, (-1779.13297));
      Complex complex15 = complex9.acos();
      Complex complex16 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.I.sqrt();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-7.592155950645605E-8), (-797.4218420264));
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.ZERO.log();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(1.6697361107868944E-8);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.subtract(1.6697361107868944E-8);
      Complex complex3 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 4202.10308008143);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.add((-1.0));
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex0.subtract(complex1);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2034.55, 2034.55);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex4.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.962256961838823E292), 0.0);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2736636153072213E-90);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      List<Complex> list0 = complex1.INF.nthRoot(151);
      String string0 = complex0.toString();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.log();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.ONE.sin();
      ComplexField complexField1 = complex6.I.getField();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex7.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(654.29272, (-3721.353233813));
      Complex complex1 = complex0.divide(654.29272);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf(654.29272, (-6.930491127388755E-8));
      Complex complex4 = complex3.subtract((-19.8811));
      Complex complex5 = Complex.valueOf((-6.930491127388755E-8));
      Complex complex6 = Complex.valueOf((-3721.353233813));
      Complex complex7 = complex2.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2404.5, (-2824.2923102761));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide((-2824.2923102761));
      Complex complex3 = complex1.add((-967.3369665));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2619.4519893826, (-1.0));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.I.pow((-813.0));
      Complex complex6 = complex3.ZERO.pow(2619.4519893826);
      Complex complex7 = complex6.ONE.reciprocal();
      Complex complex8 = Complex.valueOf(5.598413198183808E-9, (-2563.8479945408326));
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex7.I.tanh();
      double double0 = complex10.ZERO.abs();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex11 = complex1.multiply(complex0);
      Complex complex12 = complex3.add(complex2);
      double double1 = complex7.getImaginary();
      Complex complex13 = complex7.conjugate();
      Object object0 = new Object();
      boolean boolean1 = complex12.equals(object0);
      Complex complex14 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-310.1953144229013));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-4389.77329), (-4389.77329));
      Complex complex1 = Complex.valueOf((-4389.77329));
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf((-2178.7975), 0.7853981633974483);
      double double1 = complex0.getImaginary();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.multiply(0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-1202.808504878));
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.divide(3141.30816527573);
      String string0 = complex0.toString();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex7 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.createComplex(2918.3687066141215, 2918.3687066141215);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1.9299691540987203E36);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.I.tan();
      double double0 = complex0.abs();
      Complex complex4 = Complex.NaN;
      boolean boolean0 = complex3.equals(complex4);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.tan();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.I.add((-3829.865469952));
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex1.INF.sqrt1z();
      Complex complex6 = Complex.valueOf(1199.0, (-1516.518));
      Object object0 = complex1.ONE.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.I.createComplex(0.0, (-131.8188));
      Complex complex11 = complex0.add(0.0);
      Complex complex12 = complex1.exp();
      Complex complex13 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.INF.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.ONE.negate();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex3.ONE.sin();
      boolean boolean0 = complex7.isNaN();
      Complex complex10 = complex7.pow(complex4);
      Complex complex11 = complex4.tan();
      Complex complex12 = complex9.subtract(complex1);
      double double0 = complex7.abs();
      Complex complex13 = complex12.I.pow(complex2);
      boolean boolean1 = complex7.isNaN();
      Complex complex14 = complex0.acos();
      Complex complex15 = complex9.pow((-50.0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.exp();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(243.7);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.INF.multiply(complex1);
      List<Complex> list0 = complex0.nthRoot(392);
      Complex complex3 = complex0.acos();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.tan();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.add(complex1);
      int int0 = 0;
      try { 
        complex3.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1150.375973));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.divide((-1150.375973));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex0.NaN.add((-157.0));
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = Complex.valueOf((-1150.375973));
      Complex complex11 = complex7.subtract((-1150.375973));
      boolean boolean0 = complex7.equals(complex2);
      Complex complex12 = Complex.valueOf((-157.0));
      Complex complex13 = complex2.add(complex7);
      Complex complex14 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3289.86647341618);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.subtract(2105.528024);
      Complex complex4 = complex1.divide(2105.528024);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(1213.81383804);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(2746.0);
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex1.nthRoot(37);
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.I.tan();
      int int1 = complex2.ONE.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex3 = Complex.valueOf(1.2664165777252073E-14);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex5.INF.tanh();
      List<Complex> list1 = complex3.ONE.nthRoot(17);
      Complex complex7 = complex1.divide(2074.383885476);
      String string0 = complex0.toString();
      Complex complex8 = complex1.sqrt1z();
      ComplexField complexField0 = complex8.INF.getField();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.divide(complex2);
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex10.I.sqrt1z();
      Complex complex13 = complex1.acos();
      Complex complex14 = complex13.NaN.subtract(complex0);
      Complex complex15 = complex8.add((-1276.42512716));
      double double0 = complex15.NaN.getArgument();
      Complex complex16 = complex0.I.reciprocal();
      Complex complex17 = complex0.reciprocal();
      double double1 = complex3.abs();
      Object object1 = complex2.readResolve();
      boolean boolean1 = complex6.equals(complex4);
      Complex complex18 = complex2.sinh();
      Complex complex19 = complex7.multiply(complex10);
      Complex complex20 = complex18.divide(8.254100460271536);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.INF.subtract(0.0);
      Complex complex5 = complex1.ZERO.multiply(1);
      Complex complex6 = complex1.pow((-1.2778508303324259E-8));
      boolean boolean0 = complex1.equals("");
      String string0 = complex1.toString();
      Complex complex7 = Complex.valueOf((double) 1, (-1.2778508303324259E-8));
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex7.INF.multiply(1);
      Complex complex10 = complex9.INF.add(complex2);
      double double0 = complex0.getArgument();
      Complex complex11 = complex7.exp();
      Object object0 = complex11.I.readResolve();
      Complex complex12 = complex6.reciprocal();
      boolean boolean1 = complex11.isNaN();
      Complex complex13 = complex8.exp();
      Complex complex14 = complex9.NaN.createComplex((-1.2778508303324259E-8), 1.5707963267948966);
      Complex complex15 = complex13.I.pow(complex9);
      Object object1 = complex1.readResolve();
      Complex complex16 = complex11.log();
      Complex complex17 = complex9.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3911.4);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.valueOf(3911.4, 2.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.INF.divide((-484.0));
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.multiply(1377);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex8.I.divide(0.0);
      Complex complex10 = complex4.conjugate();
      int int0 = complex10.NaN.hashCode();
      Complex complex11 = Complex.valueOf((-131.3581707815982));
      Complex complex12 = complex5.cosh();
      Complex complex13 = Complex.valueOf(0.0, (-1429.2095605902693));
      Complex complex14 = complex5.sinh();
      Complex complex15 = complex8.log();
      Complex complex16 = complex13.divide(0.0);
      Complex complex17 = complex15.tanh();
      List<Complex> list0 = complex13.nthRoot(1996);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.INF.cos();
      List<Complex> list0 = complex3.ZERO.nthRoot(419);
      Complex complex4 = complex1.ZERO.pow(complex0);
      Complex complex5 = complex4.ZERO.pow(complex3);
      Complex complex6 = complex0.log();
      double double0 = 2831.270344334948;
      try { 
        complex6.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.reciprocal();
      double double0 = complex1.getImaginary();
      Complex complex3 = Complex.valueOf(-0.0, -0.0);
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-1592);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.ZERO.multiply((-1592));
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex0.I.exp();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex9.NaN.createComplex((-717.8035), (-1592));
      Complex complex11 = complex8.INF.multiply(complex0);
      double double0 = complex11.INF.abs();
      Complex complex12 = complex0.reciprocal();
      try { 
        complex12.NaN.nthRoot((-1592));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,592
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1865.6673221401525, 1865.6673221401525);
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.subtract(2.0);
      Complex complex6 = complex5.INF.multiply(1);
      double double0 = complex5.getArgument();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex5.ZERO.conjugate();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex5.add(complex3);
      Complex complex12 = complex11.NaN.sqrt();
      Complex complex13 = complex3.INF.exp();
      List<Complex> list0 = complex3.nthRoot(17);
      Complex complex14 = Complex.valueOf(186.71589, 3373.578343);
      Complex complex15 = complex1.I.sinh();
      Complex complex16 = complex7.multiply(729);
      Complex complex17 = complex16.NaN.reciprocal();
      Complex complex18 = complex16.conjugate();
      Complex complex19 = complex11.sinh();
      Complex complex20 = Complex.valueOf(2.0, 127.0);
      Complex complex21 = complex20.add(complex4);
      Complex complex22 = complex21.NaN.exp();
      Object object0 = complex21.ONE.readResolve();
      Complex complex23 = complex14.cosh();
      boolean boolean0 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex2.I.divide(complex3);
      Complex complex5 = complex1.NaN.log();
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.ONE.divide(complex7);
      Complex complex9 = complex0.log();
      Complex complex10 = complex5.multiply(0);
      Complex complex11 = complex2.ONE.divide(complex9);
      Complex complex12 = complex5.negate();
      Complex complex13 = complex12.log();
      Complex complex14 = complex13.ONE.add(complex8);
      Complex complex15 = complex14.ONE.add(complex10);
      Complex complex16 = complex12.NaN.add(complex8);
      Complex complex17 = complex1.I.negate();
      Complex complex18 = complex0.sqrt();
      Complex complex19 = complex18.sqrt1z();
      Complex complex20 = complex18.sinh();
      Complex complex21 = Complex.valueOf(0.0);
      boolean boolean0 = complex9.equals(complex21);
      Complex complex22 = complex0.log();
      Complex complex23 = Complex.valueOf((double) 0, 0.0);
      double double0 = complex23.NaN.abs();
      Complex complex24 = complex8.atan();
      Complex complex25 = complex10.reciprocal();
      Complex complex26 = complex5.add(complex21);
      Complex complex27 = complex26.ZERO.pow(complex0);
      try { 
        complex16.nthRoot((-887));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -887
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
