/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:07:22 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.sinh();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.ZERO.add((-1552.8487938744));
      double double0 = complex4.abs();
      Complex complex6 = complex3.sqrt();
      Object object0 = complex4.readResolve();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex7.ONE.divide((-1.0));
      Complex complex9 = complex2.add(1.0975969E7);
      Complex complex10 = complex9.acos();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.I.subtract(1.0975969E7);
      Complex complex13 = complex11.INF.reciprocal();
      Complex complex14 = complex11.tan();
      Complex complex15 = complex3.add(complex2);
      Complex complex16 = complex9.ONE.cosh();
      Complex complex17 = complex11.exp();
      Complex complex18 = complex13.subtract((-5508.27));
      Complex complex19 = complex4.subtract(1.0);
      Complex complex20 = complex3.subtract((-1552.8487938744));
      Complex complex21 = complex20.atan();
      Complex complex22 = complex9.sinh();
      Complex complex23 = complex3.pow(1.0975969E7);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2684.232506642));
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex0.createComplex((-2684.232506642), (-2684.232506642));
      double double0 = complex4.ONE.getArgument();
      Complex complex5 = complex2.createComplex((-2684.232506642), (-2684.232506642));
      Complex complex6 = complex3.INF.subtract(complex1);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex6.ONE.sin();
      Complex complex9 = Complex.valueOf((-1311.51553196), (-2684.232506642));
      Complex complex10 = complex7.I.pow((-2359.955));
      String string0 = complex4.I.toString();
      Complex complex11 = complex1.divide(1132.7117893546558);
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex3.tanh();
      Complex complex14 = complex1.createComplex(1132.7117893546558, 604.0);
      boolean boolean0 = complex4.equals(complex1);
      Complex complex15 = complex3.multiply(complex1);
      Complex complex16 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0, 20.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex3.ZERO.multiply(20.0);
      try { 
        complex2.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(2342.96045);
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      try { 
        complex0.ONE.nthRoot((-1072));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,072
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.ONE.asin();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex0.pow(176.672609);
      Complex complex5 = Complex.valueOf(1997.88278667);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex4.multiply(176.672609);
      boolean boolean0 = complex6.equals(complex2);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex2.atan();
      boolean boolean1 = complex9.isInfinite();
      Object object0 = new Object();
      boolean boolean2 = complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.46593, 864.46593);
      double double0 = complex0.getArgument();
      int int0 = complex0.I.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex2 = complex1.ONE.createComplex(0.7853981633974483, (-104.9298964932176));
      Complex complex3 = complex1.ONE.divide(complex0);
      double double1 = complex3.NaN.getArgument();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.INF.pow(complex5);
      Complex complex8 = Complex.valueOf((-104.9298964932176), (-104.9298964932176));
      Complex complex9 = complex8.INF.pow(complex5);
      double double2 = complex8.ONE.getArgument();
      double double3 = complex3.getReal();
      Complex complex10 = complex2.sin();
      Object object1 = complex4.readResolve();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex4.I.tan();
      Complex complex13 = complex2.ZERO.pow((-2259.0));
      Complex complex14 = complex7.negate();
      ComplexField complexField0 = complex14.NaN.getField();
      Complex complex15 = complex2.pow(complex3);
      Complex complex16 = complex2.cosh();
      Complex complex17 = complex10.reciprocal();
      Complex complex18 = complex17.INF.log();
      boolean boolean0 = complex4.isNaN();
      Complex complex19 = complex1.sqrt1z();
      Complex complex20 = complex3.reciprocal();
      Complex complex21 = complex3.exp();
      Complex complex22 = complex0.subtract(5.783917938790254E-4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex2.ONE.sqrt();
      double double0 = complex5.ZERO.getArgument();
      Complex complex6 = complex2.ZERO.log();
      Complex complex7 = complex0.INF.reciprocal();
      List<Complex> list0 = complex7.NaN.nthRoot(1);
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.I.multiply(complex1);
      Complex complex10 = complex2.INF.negate();
      int int0 = complex10.ZERO.hashCode();
      Complex complex11 = complex0.add(121.039389748552);
      Complex complex12 = complex2.add((-1741.04984));
      double double1 = complex12.getReal();
      Complex complex13 = complex0.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list1 = complex10.nthRoot(148);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2073.054, 2073.054);
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = Complex.valueOf(2073.054);
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex4.add(2073.054);
      Complex complex7 = complex6.ZERO.log();
      double double0 = complex4.INF.getArgument();
      double double1 = complex6.getReal();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.ONE.divide(complex5);
      Object object1 = new Object();
      boolean boolean0 = complex7.equals(object1);
      Complex complex10 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex6.tan();
      Complex complex13 = Complex.valueOf(2073.054);
      Complex complex14 = complex10.add(complex0);
      boolean boolean1 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-5.885186277410878E-9), (-5.885186277410878E-9));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf((-5.885186277410878E-9));
      Complex complex6 = complex4.INF.acos();
      Complex complex7 = complex2.divide(complex0);
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = Complex.valueOf(0.0, (-5.885186277410878E-9));
      Complex complex9 = complex1.divide((-1141.0));
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex7.subtract((-1.2534241706168776E-8));
      Complex complex14 = complex3.log();
      Complex complex15 = complex6.conjugate();
      Complex complex16 = complex15.createComplex(0.0, (-1.2534241706168776E-8));
      Complex complex17 = complex16.I.sqrt1z();
      String string0 = complex17.INF.toString();
      Complex complex18 = complex5.divide(2836.30462);
      double double0 = complex1.getReal();
      boolean boolean1 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1155.4));
      Complex complex1 = complex0.NaN.acos();
      double double0 = complex0.abs();
      Complex complex2 = Complex.valueOf(Double.NaN, (-505.364346126));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.multiply(17);
      double double1 = complex2.getImaginary();
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(3480.237675294453);
      Complex complex3 = complex2.ONE.pow((-2.0332050860436034E-263));
      Complex complex4 = complex2.createComplex(0.0, 2.0358991622924805);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex0.reciprocal();
      double double0 = complex3.getArgument();
      double double1 = complex1.abs();
      Complex complex7 = complex4.INF.cos();
      Complex complex8 = complex2.pow(53.50040786);
      double double2 = complex4.getArgument();
      Complex complex9 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.multiply(1068);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.multiply(complex5);
      boolean boolean0 = complex5.isInfinite();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex2.createComplex(1068, (-1.0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ZERO.createComplex((-2767.9847423308), 0.0);
      Complex complex2 = complex0.sqrt1z();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex0.multiply(2571);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.ZERO.divide(Double.NaN);
      Complex complex5 = complex3.ONE.atan();
      Complex complex6 = complex2.INF.divide(complex0);
      Complex complex7 = complex0.divide((-20.0));
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ONE.pow(1964.3596444);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.valueOf(1964.3596444);
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex0.add((-144.2896041));
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.sin();
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.cosh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.negate();
      double double1 = complex2.getArgument();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex3.INF.multiply(797);
      Complex complex7 = complex2.pow(complex0);
      Complex complex8 = complex3.ONE.multiply((-20.0));
      int int0 = complex0.ONE.hashCode();
      Complex complex9 = complex7.NaN.divide((-20.0));
      Complex complex10 = complex4.INF.tan();
      Complex complex11 = complex2.INF.pow(complex4);
      Complex complex12 = complex2.cos();
      double double2 = complex9.abs();
      Complex complex13 = complex3.createComplex(28.284271247461902, 305.0);
      boolean boolean0 = complex9.equals(complex4);
      double double3 = complex5.getReal();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex5.subtract(complex1);
      Complex complex16 = complex14.NaN.add((-1123.91725213));
      Complex complex17 = complex0.tan();
      Complex complex18 = complex0.subtract(complex2);
      Complex complex19 = complex12.sqrt1z();
      Complex complex20 = complex8.multiply((double) 797);
      Complex complex21 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-448.4175));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.valueOf((-842.37890539), (-448.4175));
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf((-2601.07));
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.divide((-2601.07));
      Complex complex8 = complex5.NaN.divide((-842.37890539));
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex5.createComplex(0.0, (-448.4175));
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex12.INF.cos();
      Complex complex14 = complex5.add(complex11);
      Complex complex15 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-710.0345250712), (-710.0345250712));
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.multiply((-943));
      Complex complex2 = complex1.ONE.log();
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex2.multiply(1117);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.I.add(1.0562105178833008);
      Complex complex5 = complex2.INF.cosh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.divide(9.608060944124859E-295);
      ComplexField complexField0 = complex6.getField();
      int int0 = complex1.hashCode();
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = Complex.valueOf(1.0562105178833008);
      Complex complex10 = complex9.ZERO.createComplex(1.0562105178833008, 9.608060944124859E-295);
      Complex complex11 = complex6.sin();
      Complex complex12 = complex2.multiply(complex6);
      Complex complex13 = complex12.NaN.exp();
      double double0 = complex5.abs();
      Complex complex14 = complex7.ZERO.atan();
      Complex complex15 = complex11.add((-2104.74315));
      double double1 = complex4.getReal();
      Complex complex16 = complex15.multiply(complex2);
      Complex complex17 = complex7.divide(complex2);
      Complex complex18 = complex2.divide(complex4);
      Complex complex19 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.asin();
      try { 
        complex0.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-674.0), (-674.0));
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex1.getReal();
      Complex complex4 = complex3.divide(1776.48850173);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(103.58329904186, 103.58329904186);
      Complex complex1 = complex0.createComplex((-1965.812965244504), 103.58329904186);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.I.conjugate();
      double double0 = complex0.ZERO.getArgument();
      Complex complex3 = complex1.exp();
      ComplexField complexField1 = complex3.ONE.getField();
      Complex complex4 = complex3.ONE.pow(complex0);
      Complex complex5 = complex1.cos();
      double double1 = complex5.NaN.abs();
      Complex complex6 = complex1.I.conjugate();
      Complex complex7 = complex6.NaN.divide(complex3);
      Complex complex8 = complex3.log();
      Complex complex9 = Complex.valueOf(528.8601191956751);
      int int0 = complex8.hashCode();
      Complex complex10 = complex3.ONE.pow(complex0);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex3.cosh();
      double double2 = complex11.getImaginary();
      Complex complex13 = complex5.exp();
      Complex complex14 = complex8.tan();
      Complex complex15 = complex0.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex16 = complex10.pow(complex0);
      double double3 = complex2.getReal();
      Complex complex17 = complex2.sin();
      double double4 = complex17.getImaginary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1846.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = new Complex(1846.0);
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex5.tanh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex3.add(complex8);
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.add(1846.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-46.371827025801), 5646.0607949878);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf(5646.0607949878, 1341.2954);
      Complex complex6 = complex0.divide(complex4);
      double double0 = complex3.getImaginary();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(3313.0, 3313.0);
      Complex complex1 = new Complex(3313.0);
      Complex complex2 = complex0.multiply(3313.0);
      Complex complex3 = new Complex(192.58, 3313.0);
      Complex complex4 = complex0.divide(complex3);
      boolean boolean0 = complex3.equals(complex2);
      Complex complex5 = complex0.tanh();
      boolean boolean1 = complex4.isInfinite();
      Complex complex6 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-500.957455), (-500.957455));
      String string0 = complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex1.INF.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex1.I.cos();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.multiply((-500.957455));
      Complex complex7 = complex6.I.subtract(2298.791);
      Complex complex8 = complex0.INF.exp();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex5.pow(2351.16856208);
      double double0 = complex3.getReal();
      Complex complex11 = complex0.sinh();
      double double1 = complex3.getImaginary();
      int int0 = complex6.hashCode();
      Complex complex12 = complex3.reciprocal();
      ComplexField complexField1 = complex1.getField();
      Complex complex13 = complex4.multiply(Double.NaN);
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-2.290530257391564E-7));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.valueOf((-628.37153), 1213.54);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf(1170.0);
      Complex complex5 = complex4.asin();
      double double0 = complex3.ONE.getArgument();
      Complex complex6 = complex2.pow((-2.290530257391564E-7));
      Complex complex7 = complex3.I.cos();
      double double1 = complex2.getImaginary();
      Complex complex8 = complex7.pow(complex3);
      Complex complex9 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.NaN.atan();
      double double0 = complex0.getReal();
      Complex complex5 = complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.I.subtract(complex2);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.ZERO.conjugate();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex5.createComplex((-2007.031405724363), (-2007.031405724363));
      Complex complex9 = complex8.sqrt();
      double double0 = complex5.INF.getArgument();
      Complex complex10 = complex0.I.multiply((-2434.4607));
      Complex complex11 = complex10.NaN.multiply(complex9);
      Complex complex12 = complex9.ZERO.subtract(0.0);
      Complex complex13 = new Complex(0.4914994239807129, 0.0);
      Complex complex14 = complex0.INF.divide(complex13);
      Complex complex15 = complex2.createComplex((-2007.031405724363), 2.0769322678328357E-128);
      Complex complex16 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ZERO.atan();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = Complex.valueOf(1082.1598130077268);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex5.ZERO.sinh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.ONE.atan();
      Object object0 = complex8.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex10 = complex9.ONE.sqrt();
      ComplexField complexField0 = complex8.I.getField();
      Complex complex11 = Complex.valueOf((-229.3595384803), (-1012.0));
      Complex complex12 = complex8.multiply(complex11);
      Complex complex13 = complex0.tan();
      Object object1 = complex12.I.readResolve();
      Complex complex14 = complex9.asin();
      Complex complex15 = complex14.INF.tanh();
      Complex complex16 = Complex.valueOf((-229.3595384803));
      List<Complex> list0 = complex12.ONE.nthRoot(658);
      Complex complex17 = complex14.cosh();
      Complex complex18 = complex17.I.reciprocal();
      Complex complex19 = complex12.subtract((-1012.0));
      double double0 = complex7.getReal();
      Complex complex20 = complex7.cosh();
      double double1 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex1.ZERO.sqrt1z();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex4.NaN.log();
      Complex complex7 = complex3.I.cos();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex10.NaN.acos();
      Complex complex12 = complex1.subtract((-92.15245558));
      Complex complex13 = complex0.reciprocal();
      Complex complex14 = complex3.pow(complex0);
      Complex complex15 = complex3.asin();
      Complex complex16 = complex2.multiply(1.3399392455370071E-284);
      boolean boolean0 = complex15.isInfinite();
      Complex complex17 = complex11.add((-92.15245558));
      String string0 = complex0.toString();
      Complex complex18 = complex10.cosh();
      Complex complex19 = complex14.exp();
      double double0 = complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1369.2561070042152, 1369.2561070042152);
      Complex complex1 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-2080.9725), (-2080.9725));
      Complex complex1 = complex0.NaN.add((-2006.64499474));
      Complex complex2 = new Complex((-2006.64499474));
      Complex complex3 = complex0.ONE.divide(complex2);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1132.7117893546558));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.multiply((-993));
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex3.ONE.cosh();
      double double0 = complex2.ZERO.abs();
      Complex complex5 = complex0.sqrt();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = Complex.valueOf((-1.0), (-2098.0049161626));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex3.ONE.subtract(complex0);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.ONE.divide(complex7);
      Complex complex9 = Complex.valueOf((-2098.0049161626), (-1.0));
      Complex complex10 = complex3.createComplex((-1.0), (-2098.0049161626));
      Complex complex11 = complex10.INF.sqrt();
      Complex complex12 = complex9.tan();
      Complex complex13 = complex9.sin();
      Complex complex14 = complex10.reciprocal();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex12.sin();
      Complex complex17 = complex4.divide(complex11);
      Complex complex18 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(2.9019628518165404E-61);
      Complex complex4 = complex1.exp();
      Object object0 = complex2.readResolve();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex1.asin();
      int int0 = complex4.hashCode();
      Complex complex8 = Complex.valueOf(20.0, (-20.0));
      Complex complex9 = complex8.sqrt();
      Complex complex10 = Complex.valueOf((-5.36108186384227E-9), 9.693260855961159E-8);
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex4.multiply(complex2);
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex4.multiply(744);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(943.296635938789, 943.296635938789);
      Complex complex1 = new Complex(943.296635938789);
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex0.NaN.pow(943.296635938789);
      Complex complex6 = complex0.divide(complex1);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.cosh();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1909.134210082201), (-1909.134210082201));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(1.2440393009992529E-8);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.valueOf((-1337.299006), 0.0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex1.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1219.026));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.subtract(complex2);
      List<Complex> list0 = complex0.nthRoot(1194);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex6.add((double) 1194);
      Complex complex9 = complex8.ONE.add(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex10 = complex3.multiply(complex2);
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex9.divide(complex10);
      Complex complex13 = complex9.multiply(1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-347.0315314817), (-347.0315314817));
      Complex complex1 = complex0.NaN.asin();
      ComplexField complexField0 = complex1.NaN.getField();
      List<Complex> list0 = complex0.NaN.nthRoot(1348);
      ComplexField complexField1 = complex0.getField();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.negate();
      double double0 = complex3.getArgument();
      Complex complex5 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(3105.5623282149);
      Complex complex2 = complex1.I.pow(3105.5623282149);
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex3.NaN.subtract(3105.5623282149);
      List<Complex> list0 = complex0.ZERO.nthRoot(1245);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1376.669));
      double double0 = complex0.getImaginary();
      Complex complex6 = complex5.divide(1325.0);
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex7.cos();
      Complex complex12 = Complex.valueOf((-1376.669), 1325.0);
      Complex complex13 = Complex.valueOf(0.0, 1325.0);
      Complex complex14 = complex13.ONE.cos();
      ComplexField complexField0 = complex8.ZERO.getField();
      Complex complex15 = complex8.tanh();
      Complex complex16 = complex6.subtract(complex12);
      Complex complex17 = complex8.atan();
      Complex complex18 = Complex.valueOf(3105.5623282149);
      Complex complex19 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(894.3);
      Complex complex2 = Complex.valueOf(1.0, (-2712.944261708437));
      Complex complex3 = complex0.asin();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex5.subtract((-1.0));
      boolean boolean0 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(835.6017099, 835.6017099);
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.I.add(835.6017099);
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1207.5));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex1.getReal();
      Complex complex2 = complex1.divide((-1461.43934053354));
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex3 = complex0.sqrt();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex0.abs();
      Complex complex2 = Complex.valueOf(2602.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(137.0, 137.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex2.add(137.0);
      Complex complex5 = complex4.ONE.divide(complex2);
      Complex complex6 = complex4.add(137.0);
      Complex complex7 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot((-925));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -925
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(315.75052887953);
      Complex complex1 = complex0.ZERO.cos();
      String string0 = complex0.toString();
      Complex complex2 = complex1.subtract((-1580.9438685));
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-744.0), (-2238.9334733235));
      Complex complex1 = complex0.atan();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sinh();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.reciprocal();
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex5.NaN.multiply(complex1);
      Complex complex7 = complex0.NaN.sqrt1z();
      Complex complex8 = complex4.ONE.sin();
      Complex complex9 = complex2.I.negate();
      Complex complex10 = complex8.I.tanh();
      Complex complex11 = complex1.NaN.log();
      double double1 = complex4.getImaginary();
      Complex complex12 = complex3.I.subtract(Double.NaN);
      Complex complex13 = complex12.ZERO.createComplex(Double.NaN, 0.7853981633974483);
      Complex complex14 = complex13.NaN.divide(complex9);
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex1.divide(complex0);
      double double2 = complex3.abs();
      int int1 = 0;
      Complex complex17 = complex4.multiply(0);
      Complex complex18 = complex6.sqrt();
      Complex complex19 = complex18.I.negate();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex2.ZERO.multiply(0.0);
      double double2 = complex2.getArgument();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.ZERO.subtract(Double.NaN);
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex0.I.atan();
      Complex complex9 = complex7.INF.divide(0.0);
      double double3 = complex1.getReal();
      Complex complex10 = complex5.sin();
      double double4 = complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2332.014), (-3.517594695450786E-279));
      Complex complex1 = Complex.valueOf((-3.517594695450786E-279), (-3.517594695450786E-279));
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex1.NaN.tan();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex5 = complex1.NaN.divide(complex4);
      Complex complex6 = complex5.ONE.multiply(0.0);
      boolean boolean0 = complex1.equals(complex0);
      double double1 = complex2.getImaginary();
      Complex complex7 = complex5.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2121.72);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.ONE.sinh();
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex2.reciprocal();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex3.ZERO.sinh();
      Complex complex7 = complex1.ONE.acos();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex8 = complex1.reciprocal();
      double double0 = complex6.getArgument();
      Complex complex9 = complex8.divide(complex2);
      Complex complex10 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(0.0);
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.INF.divide(1.7043828964233398);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.atan();
      ComplexField complexField1 = complex0.getField();
      List<Complex> list0 = complex2.nthRoot(1934);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(458.38926, 458.38926);
      Complex complex1 = Complex.valueOf(458.38926);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(813.6531);
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.subtract((-3.2552002992257195E223));
      Complex complex5 = complex0.pow(4409.41043973322);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.I.add(1.086550235748291);
      Complex complex2 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.I.multiply(complex0);
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex5.createComplex(0.16276302933692932, (-2.0332050860436034E-263));
      Complex complex7 = complex3.NaN.sqrt1z();
      boolean boolean1 = complex1.equals("POLYNOMIAL");
      boolean boolean2 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(794);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.divide((-604.319));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-311.39301526737));
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow((-311.39301526737));
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.divide((-311.39301526737));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(4.817319356453926E214, (-1737.58638));
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.multiply(20);
      Complex complex4 = complex2.ZERO.multiply(7);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex6.I.conjugate();
      Complex complex9 = complex6.INF.pow((-3406.40180885221));
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.NaN.subtract(4.817319356453926E214);
      Complex complex12 = complex1.add(complex5);
      Complex complex13 = complex7.exp();
      Complex complex14 = complex7.I.acos();
      Complex complex15 = complex13.INF.divide((-1737.58638));
      Complex complex16 = complex1.multiply((-1161.2792106032));
      Complex complex17 = complex13.subtract(1.9873779569310022E-227);
      Complex complex18 = complex17.subtract(77.47);
      Complex complex19 = complex0.tanh();
      String string0 = complex12.toString();
      Complex complex20 = complex0.divide((-1.9648717830943396E-8));
      Complex complex21 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1709.3479);
      Complex complex1 = complex0.NaN.multiply(0.052318163216114044);
      Complex complex2 = complex0.tanh();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.NaN.tanh();
      double double0 = complex0.getReal();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex4.add(complex0);
      double double1 = complex3.abs();
      Complex complex8 = complex2.conjugate();
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1534.39);
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf((-5175.8605314), 1964.5);
      double double1 = complex0.ONE.getArgument();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.ZERO.multiply((-5175.8605314));
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex5.log();
      Complex complex8 = complex0.NaN.log();
      Complex complex9 = complex1.INF.sinh();
      Complex complex10 = complex9.INF.subtract(complex7);
      Complex complex11 = complex10.ZERO.multiply((-3816.94828031));
      Complex complex12 = complex0.subtract(complex1);
      Complex complex13 = Complex.I;
      Complex complex14 = complex1.subtract(complex13);
      Complex complex15 = complex14.ZERO.sqrt1z();
      Complex complex16 = complex8.NaN.exp();
      boolean boolean0 = complex9.isNaN();
      double double2 = complex9.getArgument();
      Complex complex17 = complex8.multiply(1270);
      Complex complex18 = complex5.createComplex(101.6170941, 101.6170941);
      boolean boolean1 = complex7.equals(complex1);
      Complex complex19 = Complex.valueOf(1.1541756557557508E254, (-5175.8605314));
      Complex complex20 = complex6.atan();
      double double3 = complex20.getArgument();
      Complex complex21 = complex0.log();
      Complex complex22 = complex6.add(0.6533012390136719);
      Complex complex23 = complex0.acos();
      Complex complex24 = complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.pow(1952.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1270.6917), (-1270.6917));
      Complex complex1 = Complex.valueOf((-3081.48));
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.I.pow((-1270.6917));
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.ONE.sqrt1z();
      Complex complex6 = complex5.I.tanh();
      String string0 = complex0.toString();
      Complex complex7 = complex4.add(complex1);
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.I.divide(186.694683874112);
      Complex complex11 = complex10.INF.negate();
      Complex complex12 = Complex.valueOf((-832.9917237042287), 186.694683874112);
      Complex complex13 = Complex.valueOf((-3081.48), 1.7977178878541792E-7);
      Complex complex14 = complex0.createComplex((-3081.48), (-3081.48));
      Complex complex15 = complex14.INF.sinh();
      Complex complex16 = complex3.subtract(complex8);
      Complex complex17 = complex5.NaN.multiply((-2212.205));
      Complex complex18 = complex16.negate();
      List<Complex> list0 = complex2.nthRoot(969);
      Complex complex19 = complex3.ZERO.sin();
      Object object0 = new Object();
      boolean boolean0 = complex16.equals(object0);
      Complex complex20 = complex6.tanh();
      Complex complex21 = complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.divide(2214.0);
      Complex complex6 = complex5.INF.createComplex(2214.0, 2214.0);
      Complex complex7 = complex6.NaN.exp();
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      String string1 = complex5.toString();
      double double0 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      Complex complex1 = complex0.I.divide((-20.0));
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = complex4.ONE.multiply(531.0);
      Complex complex7 = complex1.I.negate();
      Complex complex8 = complex3.I.acos();
      Complex complex9 = complex8.ZERO.cosh();
      Object object0 = complex8.readResolve();
      String string0 = complex2.toString();
      Complex complex10 = complex0.pow((-20.0));
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex10.divide(complex1);
      Complex complex14 = complex13.I.tan();
      Complex complex15 = complex14.NaN.tanh();
      Complex complex16 = complex15.ONE.exp();
      Complex complex17 = complex16.I.reciprocal();
      Complex complex18 = complex15.pow((-20.0));
      Complex complex19 = complex1.exp();
      Complex complex20 = complex19.ONE.sin();
      double double0 = complex20.abs();
      Complex complex21 = complex10.acos();
      Complex complex22 = Complex.valueOf((-222.952));
      Complex complex23 = complex19.acos();
      List<Complex> list0 = complex15.nthRoot(81);
      Complex complex24 = complex3.reciprocal();
      Complex complex25 = complex13.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply((-1.1410233017161343E-9));
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex5.multiply(1.0);
      double double0 = complex7.getImaginary();
      Complex complex8 = complex5.createComplex(0.0, (-720.8));
  }
}
