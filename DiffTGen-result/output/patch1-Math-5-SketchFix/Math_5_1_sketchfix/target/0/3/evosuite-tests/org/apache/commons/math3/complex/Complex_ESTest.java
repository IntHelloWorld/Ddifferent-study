/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:03:40 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2073.5));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-3959.9419));
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex2.INF.divide((-1612.7));
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex2.ONE.add((-2073.5));
      Complex complex6 = complex1.I.multiply(complex2);
      Complex complex7 = complex1.NaN.tan();
      Complex complex8 = complex1.NaN.exp();
      double double0 = 260.0;
      Complex complex9 = complex0.ZERO.atan();
      Complex complex10 = complex8.I.subtract(260.0);
      Object object0 = complex0.readResolve();
      Complex complex11 = complex1.pow(complex0);
      Complex complex12 = complex8.asin();
      Complex complex13 = complex8.subtract(complex7);
      Complex complex14 = complex0.tanh();
      int int1 = (-1696);
      try { 
        complex11.nthRoot((-1696));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,696
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1306.4008817268), (-1306.4008817268));
      Object object0 = complex0.readResolve();
      double double0 = complex0.abs();
      Complex complex1 = complex0.subtract((-1063.0));
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.ONE.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex1.INF.multiply(17);
      Complex complex7 = complex6.createComplex((-1063.0), 0.0);
      Complex complex8 = complex6.ONE.exp();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex4.acos();
      List<Complex> list0 = complex10.ZERO.nthRoot(612);
      Complex complex11 = complex1.pow(complex4);
      double double1 = complex10.ZERO.getArgument();
      Complex complex12 = Complex.valueOf((-1807.3449707301));
      Complex complex13 = complex11.NaN.log();
      Complex complex14 = complex10.add(complex12);
      double double2 = complex11.getArgument();
      Complex complex15 = complex11.sqrt1z();
      Complex complex16 = complex15.I.multiply(17);
      Complex complex17 = complex16.add(complex15);
      Complex complex18 = complex9.cosh();
      Complex complex19 = complex5.add(complex18);
      boolean boolean0 = complex18.isInfinite();
      Complex complex20 = complex18.atan();
      String string0 = complex13.toString();
      Complex complex21 = complex18.subtract((-1063.0));
      boolean boolean1 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1196.2521711383), (-1196.2521711383));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-1196.2521711383), 3.270849446965521E-265);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex1.ZERO.createComplex((-32.272933217826), (-1196.2521711383));
      Complex complex5 = complex0.ONE.divide(complex2);
      Complex complex6 = Complex.valueOf((-1196.2521711383), (-1196.2521711383));
      Complex complex7 = complex1.I.sqrt1z();
      Complex complex8 = complex1.NaN.sinh();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex8.I.tan();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex6.I.divide((-1196.2521711383));
      Complex complex13 = complex8.ZERO.negate();
      Complex complex14 = complex1.subtract(complex6);
      Complex complex15 = complex14.NaN.cos();
      Complex complex16 = complex1.INF.log();
      Complex complex17 = complex0.INF.multiply((-2522.19968633));
      Complex complex18 = complex4.multiply(complex8);
      Complex complex19 = complex8.tanh();
      Complex complex20 = complex16.sqrt();
      Complex complex21 = complex20.cosh();
      Complex complex22 = complex16.I.sqrt();
      Complex complex23 = complex4.negate();
      Complex complex24 = complex16.I.conjugate();
      Complex complex25 = complex21.multiply(0);
      double double0 = complex22.getImaginary();
      Complex complex26 = complex17.add(0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((-730.563123069105));
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.createComplex((-730.563123069105), (-1806.94));
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex2.I.multiply(1265.7830435);
      Complex complex5 = complex2.sin();
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1.5843229740595697E205), (-219.3));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.log();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex0.multiply((-219.3));
      Complex complex5 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.pow((-1.0524451040704701E-7));
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.subtract((-1.0524451040704701E-7));
      double double0 = complex0.getReal();
      Complex complex6 = complex0.INF.tan();
      Complex complex7 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.createComplex(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex9 = Complex.valueOf(0.0);
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = complex3.log();
      Complex complex11 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(360.26347922546626, 360.26347922546626);
      Complex complex1 = complex0.multiply(530);
      Complex complex2 = complex0.pow((-278.90995108));
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(611.32);
      Complex complex1 = complex0.ONE.tanh();
      List<Complex> list0 = complex1.nthRoot(85);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.valueOf((-1155.696114568));
      Complex complex5 = Complex.valueOf((-1155.696114568), (double) 1);
      Complex complex6 = complex3.multiply(1);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.ZERO.pow(complex6);
      Object object0 = complex6.readResolve();
      Complex complex10 = complex6.divide((double) 85);
      Complex complex11 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.ONE.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.multiply(0.3163207769393921);
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex3.I.divide(complex2);
      Complex complex6 = complex1.divide(0.0);
      Complex complex7 = complex6.INF.subtract(0.3163207769393921);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.equals(complex6);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.add(2917.0);
      Complex complex10 = complex3.sin();
      double double1 = complex8.getImaginary();
      Object object1 = complex6.readResolve();
      double double2 = complex0.abs();
      Complex complex11 = complex9.cos();
      Complex complex12 = Complex.valueOf(5.189062091114782E27, (-5.146939682310558E-234));
      Complex complex13 = complex1.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3117.769804242286));
      List<Complex> list0 = complex0.ZERO.nthRoot(17);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.multiply(2.0);
      double double0 = complex3.ONE.getArgument();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex3.pow(93.260104439);
      Complex complex7 = complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-223.584831392001));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = Complex.valueOf((-223.584831392001));
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.tan();
      double double0 = complex1.getReal();
      double double1 = complex2.abs();
      Complex complex8 = complex2.add(Double.NaN);
      Complex complex9 = complex4.divide(complex2);
      Complex complex10 = complex8.cos();
      ComplexField complexField0 = complex9.getField();
      Complex complex11 = complex6.pow(6.864065601718021);
      Complex complex12 = complex6.createComplex(Double.NaN, Double.NaN);
      Complex complex13 = complex11.sqrt();
      Complex complex14 = Complex.valueOf((-769.476), 0.0);
      boolean boolean0 = complex9.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.subtract(1.1595585743839232E-212);
      Complex complex2 = complex1.I.subtract(Double.NaN);
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex1.ZERO.add(1.1595585743839232E-212);
      Complex complex5 = complex4.ZERO.subtract((-1771.143678529685));
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex6.subtract(complex5);
      Complex complex8 = complex6.ZERO.multiply(complex4);
      Complex complex9 = Complex.I;
      Complex complex10 = complex1.ZERO.subtract(complex9);
      Complex complex11 = complex10.INF.divide(complex5);
      Complex complex12 = complex10.ONE.atan();
      Complex complex13 = Complex.valueOf(713.763);
      Complex complex14 = complex1.ONE.pow(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex15 = complex0.atan();
      List<Complex> list0 = complex15.INF.nthRoot(822);
      Complex complex16 = complex15.NaN.negate();
      Complex complex17 = complex1.ONE.sqrt1z();
      Complex complex18 = complex15.sin();
      Complex complex19 = complex9.cos();
      boolean boolean1 = complex9.isNaN();
      Object object0 = complex18.readResolve();
      Complex complex20 = complex0.sinh();
      String string0 = complex14.toString();
      Complex complex21 = complex0.sin();
      double double1 = complex16.abs();
      Complex complex22 = complex10.subtract(3076.6242181);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1503.5687532617264), (-1503.5687532617264));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.add(complex2);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.ONE.multiply(complex5);
      Complex complex7 = complex4.INF.add((-1503.5687532617264));
      double double0 = complex7.NaN.abs();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex2.multiply(1307);
      Complex complex11 = complex10.divide(complex9);
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex12.I.subtract(complex0);
      Complex complex14 = complex13.ZERO.divide((-1503.5687532617264));
      Complex complex15 = complex7.ONE.divide(complex9);
      Complex complex16 = complex12.acos();
      Complex complex17 = complex16.INF.divide((double) 1307);
      Complex complex18 = complex13.conjugate();
      Complex complex19 = complex13.tan();
      Complex complex20 = complex19.I.conjugate();
      Complex complex21 = complex12.log();
      String string0 = complex12.toString();
      Complex complex22 = complex7.divide(complex12);
      Complex complex23 = complex12.I.sqrt1z();
      Complex complex24 = complex22.ONE.multiply((-120));
      Complex complex25 = complex2.multiply(2548);
      double double1 = complex7.getImaginary();
      Complex complex26 = complex24.sinh();
      Complex complex27 = complex0.conjugate();
      Complex complex28 = complex16.acos();
      Complex complex29 = complex23.cos();
      boolean boolean0 = complex19.isNaN();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex0.add(complex1);
      String string0 = complex0.toString();
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex1.subtract((-9.39725));
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1038.3366865303);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.atan();
      int int0 = complex1.NaN.hashCode();
      double double0 = complex1.INF.getArgument();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex3.INF.subtract(complex2);
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex1.ZERO.subtract(complex0);
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex0.subtract(complex8);
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex0.multiply((-4229));
      Complex complex13 = complex12.ONE.multiply(complex5);
      try { 
        complex11.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.pow(20.0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      String string0 = complex3.toString();
      Complex complex4 = complex0.ZERO.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = Complex.valueOf((-245.145327143374));
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1090631484985352);
      Complex complex1 = complex0.ONE.multiply(2111);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.I.multiply((double) 2111);
      Complex complex4 = Complex.valueOf((-4876.2584), (-4876.2584));
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(4318.145334369532);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex6.atan();
      Complex complex10 = Complex.valueOf(4318.145334369532);
      int int0 = complex3.hashCode();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex10.log();
      Complex complex13 = Complex.valueOf((-1782.29924));
      Complex complex14 = complex4.subtract((-930.2751173));
      Complex complex15 = complex12.conjugate();
      Complex complex16 = Complex.valueOf(3460.705758, 1175.178157093744);
      boolean boolean0 = complex10.isInfinite();
      Complex complex17 = Complex.valueOf((-4876.2584));
      Complex complex18 = complex17.INF.createComplex(1.1090631484985352, 0.0);
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex19.subtract(4318.145334369532);
      Complex complex21 = complex14.cos();
      Complex complex22 = complex21.multiply(2111);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN, (-2013.033073151));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex4.asin();
      double double0 = complex0.abs();
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1173.0872, (-1223.5629));
      List<Complex> list0 = complex0.ZERO.nthRoot(272);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-538.7263086254), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.pow(3082.3182);
      Complex complex7 = complex3.add((-538.7263086254));
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = Complex.valueOf((-538.7263086254));
      Complex complex10 = complex4.exp();
      Complex complex11 = complex9.negate();
      double double0 = complex6.ONE.abs();
      Complex complex12 = complex11.INF.multiply(complex6);
      double double1 = complex9.getImaginary();
      double double2 = complex2.getReal();
      Complex complex13 = complex6.negate();
      Complex complex14 = complex13.ZERO.cosh();
      Complex complex15 = complex5.multiply((-1959.287471821));
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex2.cosh();
      Complex complex18 = complex2.add(1272.0);
      ComplexField complexField0 = complex18.getField();
      Complex complex19 = complex10.add(complex18);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(7142.0, 7142.0);
      Complex complex1 = complex0.ZERO.add(7142.0);
      int int0 = complex0.hashCode();
      Complex complex2 = Complex.valueOf(1895.442478, (-773.1));
      Complex complex3 = complex0.add(1190.8417697);
      Complex complex4 = complex3.sqrt1z();
      double double0 = complex4.I.abs();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex3.add(1190.8417697);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex1.add(complex5);
      ComplexField complexField0 = complex7.getField();
      double double1 = complex7.getArgument();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex8.add(complex1);
      Complex complex11 = complex5.log();
      Object object0 = complex8.readResolve();
      double double2 = complex10.getImaginary();
      Complex complex12 = Complex.valueOf((-2323.73194));
      Complex complex13 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-472.9235), 0.0);
      Complex complex2 = complex1.pow(complex0);
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(2.0);
      Complex complex2 = complex0.conjugate();
      double double0 = complex0.getImaginary();
      try { 
        complex0.nthRoot((-1006));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,006
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(82.23, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ONE.multiply(1211);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex4.INF.sqrt1z();
      int int0 = complex0.hashCode();
      double double0 = complex3.getArgument();
      Complex complex7 = complex4.acos();
      List<Complex> list0 = complex2.nthRoot(1211);
      double double1 = complex6.getImaginary();
      Complex complex8 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2325.737578501, 705.77549);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.exp();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(0.0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.ZERO.multiply(750.3256881488081);
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getReal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2045.9));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ONE.divide((-1618.14309637));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.conjugate();
      boolean boolean1 = complex1.isNaN();
      String string0 = complex0.toString();
      Complex complex4 = complex3.ZERO.multiply((-1868));
      try { 
        complex3.nthRoot((-3409));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,409
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(759.7355475298591, 0.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.valueOf(759.7355475298591);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.subtract(complex2);
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex3.asin();
      boolean boolean1 = complex2.equals((Object) null);
      double double0 = complex0.getArgument();
      boolean boolean2 = complex2.isInfinite();
      Object object1 = complex3.readResolve();
      boolean boolean3 = complex2.equals(object1);
      Complex complex5 = complex0.reciprocal();
      Object object2 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.subtract(454.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ZERO.log();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex7 = complex2.subtract(945.547);
      Complex complex8 = complex7.I.sin();
      boolean boolean1 = complex1.equals("3=dLAF(");
      Complex complex9 = complex4.pow(454.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1157.6309239, 1279.4);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.sinh();
      String string0 = complex0.toString();
      Complex complex4 = complex2.atan();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex0.INF.subtract(1157.6309239);
      boolean boolean0 = complex2.equals(object0);
      double double0 = complex3.getImaginary();
      Complex complex6 = complex1.multiply(Double.NEGATIVE_INFINITY);
      Complex complex7 = complex0.add(complex6);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.ZERO.multiply(875);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex0.tan();
      int int1 = complex5.hashCode();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.pow(complex0);
      double double0 = complex2.getReal();
      Complex complex6 = Complex.valueOf(Double.NEGATIVE_INFINITY);
      Complex complex7 = complex6.subtract(complex0);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex2.add((-1123.815416829206));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.asin();
      double double0 = complex2.getArgument();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-393.01752444), (-393.01752444));
      Complex complex1 = complex0.conjugate();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex1.add((-393.01752444));
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.I.sinh();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex8 = complex3.pow((-393.01752444));
      Complex complex9 = complex3.I.negate();
      int int0 = complex8.ZERO.hashCode();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex10.createComplex(289.34, 1.644449394585716E-196);
      Complex complex12 = complex10.I.multiply(complex7);
      ComplexField complexField0 = complex10.getField();
      Complex complex13 = complex7.log();
      ComplexField complexField1 = complex13.INF.getField();
      Complex complex14 = complex13.cosh();
      Complex complex15 = Complex.valueOf(394.92, (-1590.92237862));
      Complex complex16 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-9.537874867759656E-8), (-9.537874867759656E-8));
      Complex complex1 = complex0.subtract((-9.537874867759656E-8));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex2.add(0.0);
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.tan();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.log();
      Complex complex7 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.divide(complex1);
      int int0 = complex3.hashCode();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(1079.9865413322602);
      Complex complex2 = complex1.I.divide((-1067.3475925853297));
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = new Complex((-1654.91740495337), (-1654.91740495337));
      Complex complex6 = complex1.NaN.subtract(complex5);
      Complex complex7 = complex0.multiply(1518.577397958);
      Complex complex8 = Complex.valueOf((-1654.91740495337));
      Complex complex9 = complex1.pow((-2787.485275311));
      Complex complex10 = complex9.subtract((-1067.3475925853297));
      Complex complex11 = complex8.multiply((-1654.91740495337));
      Complex complex12 = complex11.ONE.tan();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex13.INF.multiply(complex11);
      Complex complex15 = complex11.add(complex8);
      Complex complex16 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.INF.multiply(7);
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex2.ZERO.multiply(complex3);
      Complex complex8 = complex2.multiply((-5040));
      Complex complex9 = complex8.subtract(1072.2984935129);
      Complex complex10 = complex8.multiply(complex2);
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex1.createComplex(2206.12568261, 0.0);
      boolean boolean0 = complex4.isInfinite();
      Complex complex13 = complex9.acos();
      Complex complex14 = complex13.divide((double) (-5040));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.I.multiply(4431);
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex1.ONE.divide(0.0);
      Complex complex5 = complex4.multiply((-5.1088103279787804E-8));
      Complex complex6 = complex0.pow(complex1);
      double double1 = complex6.INF.abs();
      Complex complex7 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2874.844054));
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      double double0 = complex2.getImaginary();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = Complex.valueOf(2.0, 0.0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex4.ZERO.createComplex(0.0, 0.0);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.pow(1136.741596674438);
      Complex complex8 = complex1.subtract(complex5);
      String string0 = complex7.toString();
      Complex complex9 = complex0.divide((-1.1748423022293739E-44));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tanh();
      int int0 = complex1.ZERO.hashCode();
      double double0 = complex1.abs();
      Complex complex2 = complex0.multiply((-2453.8587552450645));
      Complex complex3 = complex2.subtract((-5819.55291491));
      Complex complex4 = complex2.multiply(17);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(0.0, 2.0);
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = complex2.ONE.multiply(complex0);
      double double1 = complex5.INF.getArgument();
      try { 
        complex0.nthRoot((-1173));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,173
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4385.367721));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.reciprocal();
      double double0 = complex2.abs();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex8.multiply(complex6);
      String string0 = complex8.toString();
      double double1 = complex1.getImaginary();
      Complex complex11 = complex6.multiply(1335);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(2200.061718553285);
      Complex complex1 = complex0.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1098.147));
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.441842771290538E-300), Double.NaN);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.subtract(complex1);
      double double0 = complex3.I.getArgument();
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex5.conjugate();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.tan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.INF.multiply(1653.0);
      Complex complex3 = Complex.valueOf((-1781.0788355364427), 3302.2245);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.I.cosh();
      double double0 = complex6.getImaginary();
      double double1 = complex1.getArgument();
      Complex complex8 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(1.7670931816101074, (-139.684));
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex2.ZERO.sinh();
      ComplexField complexField0 = complex4.I.getField();
      int int0 = complex0.hashCode();
      double double0 = complex0.abs();
      Complex complex5 = complex1.conjugate();
      List<Complex> list0 = complex5.I.nthRoot(2083);
      Complex complex6 = complex1.asin();
      double double1 = complex1.getReal();
      Complex complex7 = Complex.valueOf(1.0);
      boolean boolean0 = complex2.equals(complex0);
      Complex complex8 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 871.398);
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex1.ONE.tanh();
      Complex complex6 = complex2.INF.conjugate();
      Complex complex7 = complex5.I.multiply(0);
      Complex complex8 = complex7.NaN.subtract(0.0);
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex9.subtract(complex5);
      Complex complex11 = Complex.valueOf((-3026.334));
      Complex complex12 = complex10.negate();
      Complex complex13 = complex7.cos();
      Complex complex14 = complex0.conjugate();
      double double0 = complex1.getReal();
      Complex complex15 = complex1.conjugate();
      Complex complex16 = complex13.log();
      try { 
        complex16.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.createComplex((-264.6958888), 0.0);
      Complex complex4 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.divide(59.6581692068);
      Complex complex5 = complex1.sqrt();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1570.198967861699, 1570.198967861699);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.createComplex(1570.198967861699, 1570.198967861699);
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.NaN.cosh();
      List<Complex> list0 = complex4.INF.nthRoot(37);
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex4.divide(complex6);
      Complex complex9 = Complex.valueOf((double) 37, 1570.198967861699);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-3.4893601256685762E283));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply(470);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex2.INF.pow((-1.669012123121194E-54));
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.subtract((-2.4006971787803736E189));
      Complex complex8 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.add(3877.2729);
      Complex complex6 = complex3.negate();
      double double0 = complex6.abs();
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = complex0.subtract(1987.3);
      Complex complex6 = complex2.log();
      Complex complex7 = complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-2835.8790657472828), (-2835.8790657472828));
      Complex complex1 = complex0.I.cos();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.NaN.asin();
      List<Complex> list0 = complex4.I.nthRoot(297);
      Complex complex6 = complex0.I.subtract(1251.54980386);
      Complex complex7 = complex1.multiply(1606.0);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex0.add(complex6);
      ComplexField complexField0 = complex6.getField();
      Complex complex10 = complex9.acos();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.log();
      Complex complex8 = complex4.ZERO.add(0.0);
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex9.ONE.multiply(712);
      Complex complex11 = complex4.INF.exp();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex14 = complex3.pow(0.0);
      Complex complex15 = complex5.negate();
      Complex complex16 = Complex.valueOf((-2907.485178786), 0.0);
      Complex complex17 = complex16.acos();
      double double1 = complex17.NaN.getArgument();
      int int0 = 0;
      try { 
        complex15.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = (-1140.34232891255);
      Complex complex0 = new Complex((-1140.34232891255), 2914.128204299);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.INF.subtract(2914.128204299);
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex5.ONE.exp();
      Complex complex9 = complex0.INF.divide(2914.128204299);
      Complex complex10 = complex9.INF.asin();
      Complex complex11 = complex10.NaN.multiply(0.0);
      Complex complex12 = new Complex(2.0, 1.0);
      Complex complex13 = complex0.pow(complex12);
      Complex complex14 = complex13.exp();
      Complex complex15 = complex0.add(0.0);
      Complex complex16 = complex15.ZERO.multiply(4.5909386437919143E-48);
      try { 
        complex3.nthRoot((-2721));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,721
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex1.multiply((-2414));
      Complex complex6 = complex2.negate();
      Complex complex7 = complex2.multiply(1688.933);
      Complex complex8 = complex6.I.subtract(complex5);
      Complex complex9 = complex2.ZERO.subtract(0.0);
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.I.multiply((-1));
      Complex complex12 = complex1.INF.pow(complex8);
      int int0 = complex1.hashCode();
      double double0 = complex6.getReal();
      double double1 = complex1.NaN.abs();
      Complex complex13 = complex6.multiply(1602);
      boolean boolean0 = complex5.isInfinite();
      Complex complex14 = complex9.log();
      Complex complex15 = complex14.INF.createComplex(0.0, (-2414));
      Complex complex16 = complex11.divide(complex13);
      Complex complex17 = complex0.subtract(0.0);
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ONE.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      double double1 = complex0.getImaginary();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      String string0 = complex4.I.toString();
      Complex complex6 = complex2.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.exp();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.INF.sqrt1z();
      Object object0 = complex0.ONE.readResolve();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex0.log();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex7.ONE.sin();
      Complex complex11 = Complex.ZERO;
      boolean boolean0 = complex7.equals(complex11);
      Complex complex12 = complex0.NaN.createComplex(316.78, 316.78);
      Complex complex13 = complex7.cosh();
      Object object1 = complex6.readResolve();
      boolean boolean1 = complex0.equals(object1);
      Complex complex14 = complex13.pow(complex0);
      Complex complex15 = complex14.NaN.add((-20.0));
      double double1 = complex14.getReal();
      Complex complex16 = complex6.sin();
      ComplexField complexField0 = complex9.getField();
      Object object2 = complex1.readResolve();
      Complex complex17 = complex7.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(308.149526388456);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(4.388125271425036E166);
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex1.ONE.reciprocal();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex0.sinh();
      double double1 = complex7.getReal();
      Complex complex8 = complex0.multiply((-799));
      Complex complex9 = complex8.ONE.subtract(complex7);
      Complex complex10 = complex1.NaN.reciprocal();
      Complex complex11 = complex7.divide(3.362086756526068E133);
      Complex complex12 = complex7.I.add(0.0);
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex13 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.I.subtract((-1302.5812314507));
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.ZERO.pow(complex2);
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex2.multiply(0.0);
      Complex complex8 = complex7.INF.pow(0.0);
      Complex complex9 = complex3.pow(complex2);
      double double0 = complex0.getReal();
      int int0 = complex8.hashCode();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = Complex.valueOf((-1302.5812314507), 1.0);
      Complex complex14 = complex13.cos();
      Complex complex15 = Complex.valueOf(1301.76887, 0.0);
      String string0 = complex7.toString();
      ComplexField complexField0 = complex10.getField();
      Complex complex16 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex3.NaN.exp();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.NaN.multiply(complex4);
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.valueOf(3331.70944078, 0.0);
      Complex complex8 = complex6.ZERO.sin();
      double double1 = complex8.NaN.getArgument();
      Complex complex9 = complex8.multiply(complex1);
      double double2 = complex9.getArgument();
      boolean boolean0 = complex2.equals(complex6);
      String string0 = complex2.toString();
      Object object0 = complex5.readResolve();
      Complex complex10 = complex2.ONE.negate();
      Complex complex11 = complex10.ZERO.add(0.0);
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex12.ZERO.multiply(642.344034);
      Complex complex14 = complex1.add((-1113.709));
      Complex complex15 = complex12.divide((-1113.709));
      Complex complex16 = Complex.valueOf(0.0, (-1113.709));
      try { 
        complex8.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1416.50446736874));
      Complex complex1 = Complex.ZERO;
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.ZERO.log();
      double double0 = complex1.getArgument();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex3.INF.multiply((-1416.50446736874));
      double double1 = complex4.INF.getArgument();
      Complex complex5 = complex0.I.subtract(complex1);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.INF.divide(0.0);
      Object object0 = complex0.readResolve();
      double double2 = complex5.getArgument();
      int int1 = complex0.ZERO.hashCode();
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex8.INF.multiply(complex1);
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex12.ZERO.subtract(complex7);
      double double3 = complex1.abs();
      Complex complex14 = complex5.sin();
      Complex complex15 = complex7.ZERO.atan();
      Complex complex16 = complex14.tan();
      Complex complex17 = complex7.pow((-1416.50446736874));
      Complex complex18 = complex12.ONE.negate();
      List<Complex> list0 = complex13.nthRoot(254);
      Complex complex19 = complex7.divide(0.0);
      double double4 = complex3.abs();
      Complex complex20 = complex10.cosh();
      Complex complex21 = complex20.NaN.subtract(complex0);
      Complex complex22 = complex1.atan();
      Complex complex23 = complex22.I.cosh();
      Complex complex24 = Complex.valueOf((-1416.50446736874), (-1132.401223));
      Complex complex25 = complex1.negate();
  }
}
