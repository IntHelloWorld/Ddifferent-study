/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:30:51 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1237.869405794215);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, (-373), (-373));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 1);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(1, (-418201966), 5089);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1598.402, 266);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability((-1548.44), 39, 266);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2356), 2046);
      int int0 = uniformIntegerDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(748.8069, 748.8069, 32767);
      double double0 = poissonDistribution0.cumulativeProbability(0, 151);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 284);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1048575, 0.6712314776071147);
      // Undeclared exception!
      binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution((RandomGenerator) null, 68, 0.9322062192453038);
      // Undeclared exception!
      try { 
        pascalDistribution0.reseedRandomGenerator(0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1598.402, 266);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(0.4843113896130571);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (266) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.5820244756081756, 64);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.5820244756081756);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(226, Double.NaN);
      // Undeclared exception!
      try { 
        pascalDistribution0.solveInverseCumulativeProbability(0.0, 137, 300);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 218
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(68, 68, 0);
      int[] intArray0 = hypergeometricDistribution0.sample(68);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 396, 396);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample((-523));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-523)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1547.27461139638);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(10000000, Integer.MIN_VALUE, (-146));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(68, 68, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.6332046332046332);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(697, 0.0);
      // Undeclared exception!
      pascalDistribution0.sample(697);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(931);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution((RandomGenerator) null, 68, 0.9322062192453038);
      int int0 = pascalDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(931);
      try { 
        poissonDistribution0.inverseCumulativeProbability(1871);
      } catch(IllegalArgumentException e) {
         //
         // 1,871 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1237.869405794215);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-3808.0317548584));
      } catch(IllegalArgumentException e) {
         //
         // -3,808.032 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1598.402, 241);
      try { 
        poissonDistribution0.cumulativeProbability((-28), (-146));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-28) must be less than or equal to upper endpoint (-146)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 284);
      double double0 = uniformIntegerDistribution0.cumulativeProbability((-89), (-89));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1048575, 0.6712314776071147);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 1);
      uniformIntegerDistribution0.reseedRandomGenerator((-3157L));
  }
}
