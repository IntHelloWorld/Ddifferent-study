/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:29:00 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-118), 0);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample((-118));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-118)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(1.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2319, 0, 60);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1610, 106);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-1277L));
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(iSAACRandom0, 536, 2661.644);
      int int0 = zipfDistribution0.solveInverseCumulativeProbability(2661.644, (-1455), (-1455));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(2.220446049250313E-16);
      int int0 = geometricDistribution0.inverseCumulativeProbability(2.220446049250313E-16);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well44497a0, 1.8477422800700083E-6);
      double double0 = geometricDistribution0.cumulativeProbability(903, 584671);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(337, 376.1344);
      // Undeclared exception!
      zipfDistribution0.solveInverseCumulativeProbability(376.1344, 0, 337);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(501.418084, (-4291));
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(1.0, (-1048578), 474);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than -4,291 iterations) for value 501.418
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = Double.NaN;
      int int0 = 1;
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN, 1);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2147483582, 2147483582, 2147483582);
      int int1 = hypergeometricDistribution0.getSampleSize();
      // Undeclared exception!
      poissonDistribution0.sample(327);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well44497b0, Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample();
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((RandomGenerator) null, 234, 888);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.reseedRandomGenerator(234);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1537), (-1));
      int[] intArray0 = uniformIntegerDistribution0.sample(146);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 1608);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(5.820766091346741E-11);
      // Undeclared exception!
      geometricDistribution0.sample(34);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1, Double.NaN);
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN, 1);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2147483644, 0);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(251.8972, 251.8972, 1);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(50, 50);
      int int0 = zipfDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(10000000, 1.0E-12);
      try { 
        binomialDistribution0.inverseCumulativeProbability(10000000);
      } catch(IllegalArgumentException e) {
         //
         // 10,000,000 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(2.220446049250313E-16);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-361.142800646905));
      } catch(IllegalArgumentException e) {
         //
         // -361.143 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      try { 
        pascalDistribution0.cumulativeProbability(1, (-1282));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (1) must be less than or equal to upper endpoint (-1,282)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(34, 34);
      double double0 = zipfDistribution0.cumulativeProbability(34, 34);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(34, 34);
      int int0 = zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(146.9886);
      poissonDistribution0.reseedRandomGenerator(215);
  }
}
