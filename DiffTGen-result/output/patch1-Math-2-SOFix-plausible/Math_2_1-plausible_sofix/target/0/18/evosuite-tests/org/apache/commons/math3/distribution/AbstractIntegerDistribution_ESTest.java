/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:30:52 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(866.911906, 8.0, (-1341));
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-1341));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,341)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 3160, 3160, 0);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, (-99516416), 252);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution((RandomGenerator) null, Double.NaN);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(414.1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2657, 2657, 2657);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 202, 2657);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 3160, 3160, 0);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.09690334161696364);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 40.0, 40.0, 3116);
      double double0 = poissonDistribution0.cumulativeProbability((-558), 3116);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(jDKRandomGenerator0, 1947, 1947);
      // Undeclared exception!
      zipfDistribution0.solveInverseCumulativeProbability(0.0, 1404, 1947);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, (-1904.155250862));
      // Undeclared exception!
      poissonDistribution0.sample(483);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 466.655996419, 466.655996419, 161);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(161);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(jDKRandomGenerator0, 1947, 1947);
      // Undeclared exception!
      zipfDistribution0.inverseCumulativeProbability(0.6285316606947873);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.9E-324);
      // Undeclared exception!
      geometricDistribution0.cumulativeProbability(268435482, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well512a0, 1.0E-6, 1.0E-6, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 0);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2717;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2717;
      doubleArray0[1] = (double) 2717;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, doubleArray0);
      int int0 = enumeratedIntegerDistribution0.inverseCumulativeProbability(0.935510557319503);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2717;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2717;
      doubleArray0[1] = (double) 2717;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, doubleArray0);
      int int0 = enumeratedIntegerDistribution0.inverseCumulativeProbability(1.184154459111628E-8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 2717;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, doubleArray0);
      int int0 = enumeratedIntegerDistribution0.inverseCumulativeProbability(0.935510557319503);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-776), (-665));
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.6217257771213766);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution((RandomGenerator) null, Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.9E-324);
      int[] intArray0 = geometricDistribution0.sample(4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.9E-324);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability((-716.0), (-1221985044), 0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(221, 0.4580921530723572);
      zipfDistribution0.reseedRandomGenerator(864);
      // Undeclared exception!
      zipfDistribution0.sample(864);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well512a0, 257, 257);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(293, Double.NaN);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample();
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.9E-324);
      int int0 = geometricDistribution0.inverseCumulativeProbability(4.9E-324);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.09690334161696364);
      int int0 = geometricDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, (-1904.155250862));
      try { 
        poissonDistribution0.inverseCumulativeProbability(1.886579990386963);
      } catch(IllegalArgumentException e) {
         //
         // 1.887 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.09690334161696364);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-1572.4322667));
      } catch(IllegalArgumentException e) {
         //
         // -1,572.432 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0);
      try { 
        poissonDistribution0.cumulativeProbability(1583, (-451));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (1,583) must be less than or equal to upper endpoint (-451)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1772L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 268, 161, 161);
      double double0 = hypergeometricDistribution0.cumulativeProbability(268, 268);
  }
}
