/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:27:02 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      PascalDistribution pascalDistribution0 = new PascalDistribution(well19937c0, 1, 1);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample((-695));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-695)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      PascalDistribution pascalDistribution0 = new PascalDistribution(mersenneTwister0, 1, 1);
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(1, (-2382), 872800);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(2, 0.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(295.77, 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.5);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(0.0, 2819, 329);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2556, 2, 2);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1023.89455475), (-1826), 1034);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2, 1.0);
      double double0 = pascalDistribution0.cumulativeProbability(2, 2556);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2, 0.001564945226917058);
      double double0 = pascalDistribution0.cumulativeProbability(2, 2556);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, (-1427));
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(4546.38886044872, (-1427), 635);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 119
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 556.18);
      // Undeclared exception!
      poissonDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = 556.18;
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 556.18);
      // Undeclared exception!
      poissonDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(jDKRandomGenerator0, 1048575, 0.001564945226917058, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(1048575, 1048575);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, (-9));
      int[] intArray0 = poissonDistribution0.sample(961);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497b0, 0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(538, 576);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.5);
      // Undeclared exception!
      geometricDistribution0.sample(2861);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2, 0.001564945226917058);
      int int0 = pascalDistribution0.inverseCumulativeProbability(0.001564945226917058);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(888, 5.840064709376958E-194);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      PascalDistribution pascalDistribution0 = new PascalDistribution(mersenneTwister0, 1, 1);
      int int0 = pascalDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497b0, 0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(26, 26);
      try { 
        zipfDistribution0.inverseCumulativeProbability(1.0000000149019483);
      } catch(IllegalArgumentException e) {
         //
         // 1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1872.10766, 1872.10766);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-246.7791774));
      } catch(IllegalArgumentException e) {
         //
         // -246.779 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2394.0, 920.06, 119);
      try { 
        poissonDistribution0.cumulativeProbability(221, (-1856));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (221) must be less than or equal to upper endpoint (-1,856)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(872800, 1898.28);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability((-3098), 5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(95, 0, 0);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      PascalDistribution pascalDistribution0 = new PascalDistribution(mersenneTwister0, 1, 1);
      pascalDistribution0.reseedRandomGenerator((-4370L));
  }
}
