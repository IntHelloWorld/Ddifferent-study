/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:31:19 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(30, 1.0);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample((-1));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937c0, (-2028), 0);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(39.555771, 0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution((RandomGenerator) null, 1, 1);
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(1, 1, 2312);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well19937c0, 828, 1.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, (-2779));
      double double0 = uniformIntegerDistribution0.cumulativeProbability(Integer.MIN_VALUE, 2913);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(882, 882);
      // Undeclared exception!
      zipfDistribution0.sample(882);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution((RandomGenerator) null, Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample(1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(224, 4.9E-324);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 2150, 40.0);
      // Undeclared exception!
      try { 
        zipfDistribution0.reseedRandomGenerator(2150);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 1.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 0);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(399L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 10000000, 10000000, 10000000);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1.0E-6);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1075.289599783532, 1075.289599783532);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1407, 1.0);
      int[] intArray0 = binomialDistribution0.sample(932);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1317));
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well44497a0, (-5948), (-1317));
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(1.0, (-5948), (-1317));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4.9E-324, 4.9E-324);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.04266181920204426);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample();
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4.9E-324, 4.9E-324);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2250.83);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1185, 1185, 0);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(982.5066);
      } catch(IllegalArgumentException e) {
         //
         // 982.507 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(695, 695, 695);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-2809.81067));
      } catch(IllegalArgumentException e) {
         //
         // -2,809.811 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4.9E-324, 4.9E-324);
      try { 
        poissonDistribution0.cumulativeProbability(934, (-581));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (934) must be less than or equal to upper endpoint (-581)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1407, 1.0);
      double double0 = binomialDistribution0.cumulativeProbability(0, 0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      geometricDistribution0.reseedRandomGenerator(2147483648L);
  }
}
