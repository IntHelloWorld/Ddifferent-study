/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:33:17 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1782.0777399422425, 1782.0777399422425);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-1496));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,496)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, 0, 3754);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(1.0E-12, (-1487), 3754);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497b well44497b0 = new Well44497b(intArray0);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well44497b0, (-1081), 0);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability((-1081), 0, 2147482624);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-633066204), 0);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(jDKRandomGenerator0, 754, 754);
      double double0 = zipfDistribution0.cumulativeProbability((-232), 1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0E-9, (-1707.265));
      // Undeclared exception!
      poissonDistribution0.solveInverseCumulativeProbability((-443.53267143749), 0, 63);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(Double.NaN, (-2880), 209);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 16
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(223.3, 223.3, 1877);
      // Undeclared exception!
      poissonDistribution0.sample(1877);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well44497b0, Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample(180);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(267, 267);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 503, 4749.536159034636);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497a0, 0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(7.887051614592191E-8);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, 0, 3754);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, 0, 3754);
      int[] intArray0 = uniformIntegerDistribution0.sample(414);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497b well44497b0 = new Well44497b(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497b0, Integer.MAX_VALUE, 0.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(0.0, (-2130065204), 1011);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well19937c0, 9.223372036854776E18, (-141.675649097315), 1008);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497a0, 0, 0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, 0, 3754);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(223.3, 223.3, 1877);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(jDKRandomGenerator0, 754, 754);
      try { 
        zipfDistribution0.inverseCumulativeProbability(754);
      } catch(IllegalArgumentException e) {
         //
         // 754 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497b well44497b0 = new Well44497b(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497b0, Integer.MAX_VALUE, 0.0);
      try { 
        binomialDistribution0.inverseCumulativeProbability((-122.28792));
      } catch(IllegalArgumentException e) {
         //
         // -122.288 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 1433);
      try { 
        uniformIntegerDistribution0.cumulativeProbability(790, (-14));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (790) must be less than or equal to upper endpoint (-14)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, 0, 3754);
      double double0 = uniformIntegerDistribution0.cumulativeProbability(239, 239);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(230, 0.0);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(230, 0.0);
      pascalDistribution0.reseedRandomGenerator(0L);
  }
}
