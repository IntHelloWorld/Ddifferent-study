/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:33:23 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution((RandomGenerator) null, 0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.5652031276090093);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.5652031276090093);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1434, 1434, 1434);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1434, 1434);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(142, 0.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(2436, 106, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(146, 1.0E-12);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(0.0, 0, 598);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1570.0, 1713);
      double double0 = poissonDistribution0.cumulativeProbability(216, 10000000);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well44497b0, 10000000, 0.5652031276090093);
      // Undeclared exception!
      zipfDistribution0.solveInverseCumulativeProbability(0.0, 0, 1254);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3155.0, 1.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(3609.70277, 0, 100);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 0 iterations) for value 3,155
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(892.565410743269, 892.565410743269, 0);
      // Undeclared exception!
      poissonDistribution0.sample(3094);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2577, Double.NaN);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(2577);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 1434);
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(mersenneTwister0, Double.NaN, (-2.193190669794277E-108), 1);
      // Undeclared exception!
      poissonDistribution0.sample(4608);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1713, 1.0E-12);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((RandomGenerator) null, Integer.MIN_VALUE, 3111);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.reseedRandomGenerator(1462L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1713, 1.0E-12);
      // Undeclared exception!
      zipfDistribution0.inverseCumulativeProbability(1.72927071263654E-5);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.5652031276090093);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.6285316606947873);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well1024a well1024a0 = new Well1024a(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well1024a0, 0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(1.6458113136245473E-38);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2577, Double.NaN);
      // Undeclared exception!
      try { 
        pascalDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1), 331);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample((-1));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well44497b0, 1, 0.5652031276090093);
      int int0 = zipfDistribution0.solveInverseCumulativeProbability((-2146888728), (-2146888728), 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(578, 0.6202304109746932);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2, 2);
      int[] intArray0 = zipfDistribution0.sample(2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1570.0, 1713);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(10000000, 1, 1);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[4];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(iSAACRandom0, Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample();
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1570.0, 1713);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well1024a well1024a0 = new Well1024a(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well1024a0, 0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(mersenneTwister0, 2572.475285788, 533.68415595959, 258);
      try { 
        poissonDistribution0.inverseCumulativeProbability(282.37637071);
      } catch(IllegalArgumentException e) {
         //
         // 282.376 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(176, 108, 27);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-938.669));
      } catch(IllegalArgumentException e) {
         //
         // -938.669 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1), 331);
      try { 
        uniformIntegerDistribution0.cumulativeProbability((-1), (-2146884634));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-1) must be less than or equal to upper endpoint (-2,146,884,634)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1434, 1434, 1434);
      hypergeometricDistribution0.reseedRandomGenerator(1434);
  }
}
