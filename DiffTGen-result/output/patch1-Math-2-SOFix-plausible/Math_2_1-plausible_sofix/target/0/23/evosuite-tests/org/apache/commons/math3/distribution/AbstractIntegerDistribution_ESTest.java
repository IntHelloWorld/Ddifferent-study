/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:30:49 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2.220446049250313E-16, 1320);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-1533));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,533)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(790.2564735, 5576);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, (-98), 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      double double0 = binomialDistribution0.cumulativeProbability(0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1316L));
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well19937a0, 0, 0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(Double.NaN, (-4962), 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(2.0, 719, 719);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0E-12);
      int int0 = poissonDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(111, 1879);
      double double0 = uniformIntegerDistribution0.cumulativeProbability((-3500), 10000000);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well512a0, 96, Double.NaN);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample(96);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 48
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 250, 1293.931088990888);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample(250);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1619, 2.0);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution((RandomGenerator) null, 0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(3771, 3771);
      // Undeclared exception!
      zipfDistribution0.inverseCumulativeProbability(0.9844927786579537);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1316L));
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well19937a0, 0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(mersenneTwister0, 4, 10000000);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.9532324036361115);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(111, 1879);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well512a0, 96, 1589.132366);
      // Undeclared exception!
      zipfDistribution0.sample(96);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(319, 0.0);
      int[] intArray0 = pascalDistribution0.sample(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(319, 0.0);
      int int0 = pascalDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.953216552647234);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(692.3288290729236, 1.2087698972768686E-183, 338);
      try { 
        poissonDistribution0.inverseCumulativeProbability(338);
      } catch(IllegalArgumentException e) {
         //
         // 338 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-5076), 67);
      try { 
        uniformIntegerDistribution0.inverseCumulativeProbability((-200));
      } catch(IllegalArgumentException e) {
         //
         // -200 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, (-530.0));
      try { 
        poissonDistribution0.cumulativeProbability(3771, (-1));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (3,771) must be less than or equal to upper endpoint (-1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.37283856982010466);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2121.573886194933, 2121.573886194933, (-614));
      poissonDistribution0.reseedRandomGenerator((-163L));
  }
}
