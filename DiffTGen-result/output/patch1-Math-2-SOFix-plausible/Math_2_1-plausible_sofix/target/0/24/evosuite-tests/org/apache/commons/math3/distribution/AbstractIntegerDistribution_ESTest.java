/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:33:17 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2041);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well44497b0, 2041, 0.0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-524289), 0);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(0.9999980926586431, (-524289), 2145386496);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(mersenneTwister0, (-4884), (-2656));
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(102, (-2978), 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.35589958023294255);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability((-712.67807), 0, 345);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2024.30155561, 2024.30155561, 139);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(Double.NaN, 0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0);
      double double0 = poissonDistribution0.cumulativeProbability((-1685684224), 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(3838, 3838);
      // Undeclared exception!
      zipfDistribution0.solveInverseCumulativeProbability(3838, 0, 3838);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-2314));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1903, 1082, 1082);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 113, 113, 113);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.reseedRandomGenerator(3271);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1566083941L);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497b0, 27, 1.0);
      int[] intArray0 = binomialDistribution0.sample(27);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(104.7, (-1112.311046132), (-375232704));
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-375232704));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-375,232,704)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-253272164), 655);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(3.530656968851287E-8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1109, 1109, 0);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2041);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well44497b0, 2041, 0.0);
      // Undeclared exception!
      pascalDistribution0.sample(298);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2041);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well44497b0, 2041, 0.0);
      int int0 = pascalDistribution0.inverseCumulativeProbability((byte)1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1693, 1693, 1693);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(666.4818131252);
      } catch(IllegalArgumentException e) {
         //
         // 666.482 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.35589958023294255);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-797.67798986173));
      } catch(IllegalArgumentException e) {
         //
         // -797.678 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3502.8290755, Double.NEGATIVE_INFINITY, (-56));
      try { 
        poissonDistribution0.cumulativeProbability(229, (-1507));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (229) must be less than or equal to upper endpoint (-1,507)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1058, 0.718798533756775);
      double double0 = binomialDistribution0.cumulativeProbability(1058, 1058);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1058, 0.718798533756775);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1109, 1109, 0);
      hypergeometricDistribution0.reseedRandomGenerator(4068L);
  }
}
