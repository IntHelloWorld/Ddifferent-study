/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:32:06 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3429.05421554552, 2406);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-760));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-760)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well512a0, 1.0);
      double double0 = geometricDistribution0.cumulativeProbability(974, 974);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(961, 961);
      int int0 = zipfDistribution0.solveInverseCumulativeProbability(961, 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2619, 668, 2619);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-2499.024), 668, 3739);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.4264049649685464);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(0.4264049649685464, (-1884), (-1884));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(155, 0.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.4987953274430088);
      double double0 = geometricDistribution0.cumulativeProbability(3, 34);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(606, 40.0);
      // Undeclared exception!
      zipfDistribution0.solveInverseCumulativeProbability((-3097), 0, 606);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(87.80171023838055, (-20));
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(6.0, 126, 250);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-20) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2107.53856682, 2);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(2, 914);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 2 iterations) for value 2,107.539
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(226.0, 226.0);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2619, 668, 2619);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.8765646867325942);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.4264049649685464);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.4264049649685464);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(226.0, 226.0);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(2.220446049250313E-16);
      // Undeclared exception!
      geometricDistribution0.sample(1636);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.4987953274430088);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(mersenneTwister0, Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample();
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well19937a well19937a0 = new Well19937a(intArray0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well19937a0, 1591, 0.0);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2619, 668, 2619);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 1.0469679832458496, 2.5486068725585938, 564);
      try { 
        poissonDistribution0.inverseCumulativeProbability(2.5486068725585938);
      } catch(IllegalArgumentException e) {
         //
         // 2.549 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.4264049649685464);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-1.0));
      } catch(IllegalArgumentException e) {
         //
         // -1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well19937a well19937a0 = new Well19937a(intArray0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well19937a0, 1591, 0.0);
      try { 
        pascalDistribution0.cumulativeProbability(2, 0);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2619, 668, 2619);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2, 265);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2619, 668, 2619);
      int[] intArray0 = hypergeometricDistribution0.sample(59);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2619, 668, 2619);
      hypergeometricDistribution0.reseedRandomGenerator(59);
  }
}
