/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:29:01 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(934.59670138262, 934.59670138262);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, (-256), 829);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(2137.102462, (-256), 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(15, 15);
      int int0 = zipfDistribution0.solveInverseCumulativeProbability(0L, 15, 15);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1449L);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well1024a0, 0, 0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution((RandomGenerator) null, 10000000, 0.0);
      int int0 = pascalDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(934.59670138262, 934.59670138262);
      double double0 = poissonDistribution0.cumulativeProbability((-5980), 2143);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3373.706918748, (double) (-588));
      // Undeclared exception!
      poissonDistribution0.solveInverseCumulativeProbability((-1170.321947), (-3518), 19937);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3373.706918748, 0.0, (-588));
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability((-1170.321947), (-3518), 19937);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-588) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution((RandomGenerator) null, 10000000, 1.0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(728, 9.223372036854776E18);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3373.706918748, 3373.706918748, (-588));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(10000000, 10000000);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-588) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(15, 15);
      int int0 = zipfDistribution0.inverseCumulativeProbability(0.07068568536065323);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3373.706918748, 0.0, (-588));
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-3518));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,518)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, (-256), 854);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability((-21), Integer.MIN_VALUE, (-256));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, (-256), 854);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.8462519259353738);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2);
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well1024a0, 31, 2);
      int int0 = zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int[] intArray0 = binomialDistribution0.sample(683);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, (-256), 829);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, (-256), 829);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2);
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well1024a0, 31, 2);
      try { 
        zipfDistribution0.inverseCumulativeProbability(320);
      } catch(IllegalArgumentException e) {
         //
         // 320 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-719));
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well44497b0, 0.9956152061749659);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-886.0504964497428));
      } catch(IllegalArgumentException e) {
         //
         // -886.05 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1453.6);
      try { 
        poissonDistribution0.cumulativeProbability(155, (-3917));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (155) must be less than or equal to upper endpoint (-3,917)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(15, 15);
      double double0 = zipfDistribution0.cumulativeProbability(2738, 2738);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(274, 0.0);
      // Undeclared exception!
      pascalDistribution0.sample(274);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(274, 0.0);
      pascalDistribution0.reseedRandomGenerator((-3500));
  }
}
