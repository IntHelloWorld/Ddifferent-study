/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:27:04 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2191.482767469);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-417));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-417)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(1.0, Integer.MIN_VALUE, 1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 128, 128, 128);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1161.207), 128, 128);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(18, 0, 18);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-254.1968398301133), 18, (-1673));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      double double0 = pascalDistribution0.cumulativeProbability((-444), 1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(577, (-469), 1);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction diverged to NaN for value \u221E
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(185, 185);
      // Undeclared exception!
      zipfDistribution0.sample(185);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 128, 128, 128);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(128);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(274, 274);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 642, 642);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 10000000, 10000000, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(224, 0.0);
      int[] intArray0 = binomialDistribution0.sample(414);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = pascalDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(849, 0);
      int int0 = pascalDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(50.907);
      try { 
        poissonDistribution0.inverseCumulativeProbability(50.907);
      } catch(IllegalArgumentException e) {
         //
         // 50.907 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      try { 
        pascalDistribution0.inverseCumulativeProbability((-272.0556784905195));
      } catch(IllegalArgumentException e) {
         //
         // -272.056 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(224, 0.0);
      try { 
        binomialDistribution0.cumulativeProbability(224, (-3709));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (224) must be less than or equal to upper endpoint (-3,709)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(224, 0.0);
      double double0 = binomialDistribution0.cumulativeProbability(0, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.1857137522090373);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.1857137522090373);
      geometricDistribution0.reseedRandomGenerator((-2931L));
  }
}
