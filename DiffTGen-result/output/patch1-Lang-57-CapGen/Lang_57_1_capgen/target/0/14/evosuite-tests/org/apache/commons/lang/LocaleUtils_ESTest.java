/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:21:29 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("");
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list1 = LocaleUtils.countriesByLanguage("ja");
      Locale locale0 = Locale.GERMAN;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("TH");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = new Locale("", "");
      String string0 = locale1.getDisplayVariant(locale0);
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      String string1 = "Ep# .u";
      String string2 = locale0.getDisplayLanguage();
      Locale locale2 = new Locale("", "", "Ep# .u");
      Locale.setDefault(locale0);
      String string3 = locale0.getDisplayName(locale2);
      String string4 = locale0.getDisplayName();
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      List list3 = LocaleUtils.availableLocaleList();
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list4 = LocaleUtils.languagesByCountry("\u4E2D\u6587 (\u4E2D\u56FD)");
      Set<String> set1 = locale1.getUnicodeLocaleAttributes();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("bg");
      Locale locale1 = LocaleUtils.toLocale("bg");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      List list0 = LocaleUtils.countriesByLanguage("fi");
      String string0 = locale0.getDisplayCountry(locale1);
      List list1 = LocaleUtils.languagesByCountry((String) null);
      Locale locale2 = Locale.forLanguageTag("bg");
      String string1 = locale0.getDisplayLanguage(locale1);
      List list2 = LocaleUtils.availableLocaleList();
      List list3 = LocaleUtils.localeLookupList(locale0);
      String string2 = locale1.getExtension('r');
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("i)@;I4S*$@G|vZx<;Ov");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = new Locale("", "", "Ep# .u");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = new Locale("/nTji'g");
      Locale locale1 = Locale.PRC;
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = new Locale("ru", "gw$I6*p\"A<)hw-", "gw$I6*p\"A<)hw-");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang.LocaleUtils");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zHW=Zk");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zHW=Zk
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("\u4E2D\u6587 (\u4E2D\u56FD)");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: \u4E2D\u6587 (\u4E2D\u56FD)
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("MKz$>");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: MKz$>
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }
}
