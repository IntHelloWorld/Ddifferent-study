/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:21:31 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("dzwo)D0q h1RDN$hl");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dzwo)D0q h1RDN$hl
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("a.L-< MW+");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: a.L-< MW+
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "vjf$Wc_+}y>nk", (String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("");
      List list1 = LocaleUtils.languagesByCountry("");
      List list2 = LocaleUtils.languagesByCountry((String) null);
      List list3 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.forLanguageTag("org.apache.commons.lang.LocaleUtils");
      Locale locale2 = Locale.CHINESE;
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = locale2.hasExtensions();
      Object object0 = locale0.clone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Object[] objectArray0 = linkedList1.toArray();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      String string0 = locale0.toLanguageTag();
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      String string1 = Locale.lookupTag(linkedList0, set0);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list1 = LocaleUtils.countriesByLanguage("");
      List list2 = LocaleUtils.localeLookupList(locale2, locale1);
      List list3 = LocaleUtils.languagesByCountry("zh-CN");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = new Locale("#", "org.apache.commons.lang.LocaleUtils", "org.apache.commons.lang.LocaleUtils");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.forLanguageTag("org.apache.commons.lang.LocaleUtils");
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.lang.LocaleUtils");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = new Locale("#", "org.apache.commons.lang.LocaleUtils", "org.apache.commons.lang.LocaleUtils");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("b{-?|t6");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: b{-?|t6
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Ob/X=!S'nsr=9Y=");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Ob/X=!S'nsr=9Y=
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zh-CN");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zh-CN
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("fr");
      List list0 = LocaleUtils.availableLocaleList();
      List list1 = LocaleUtils.languagesByCountry("");
      List list2 = LocaleUtils.countriesByLanguage("b{-?|t6");
      List list3 = LocaleUtils.countriesByLanguage("fr");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Rpp`ug]BU");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Rpp`ug]BU
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang.LocaleUtils", "IBJ5SC93@!T", "");
      List list0 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      List list1 = LocaleUtils.availableLocaleList();
      List list2 = LocaleUtils.languagesByCountry("org.apache.commons.lang.LocaleUtils");
      Locale locale0 = new Locale("#", "org.apache.commons.lang.LocaleUtils", "org.apache.commons.lang.LocaleUtils");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list3 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string0 = locale0.getDisplayScript();
      List<String> list4 = hashMap0.put("DcAv<f", linkedList1);
      BiFunction<Object, Object, List<String>> biFunction0 = (BiFunction<Object, Object, List<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      List<String> list5 = hashMap0.merge("#", linkedList1, biFunction0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      boolean boolean0 = linkedList2.add(locale0);
      boolean boolean1 = linkedList2.add(locale0);
      Locale locale1 = Locale.lookup(list3, linkedList2);
      List list6 = LocaleUtils.localeLookupList(locale0, locale0);
      List list7 = LocaleUtils.localeLookupList(locale0, locale0);
      Locale locale2 = LocaleUtils.toLocale((String) null);
      List list8 = LocaleUtils.languagesByCountry("JP");
  }
}
