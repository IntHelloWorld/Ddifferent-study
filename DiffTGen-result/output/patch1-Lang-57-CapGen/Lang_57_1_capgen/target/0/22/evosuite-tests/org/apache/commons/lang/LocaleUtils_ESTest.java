/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:23:20 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("d$@D1|C");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d$@D1|C
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = new Locale("", "7", "Invalid locale format: ");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "n+R1Y\" L-lfr[EP";
      List list0 = LocaleUtils.countriesByLanguage("n+R1Y\" L-lfr[EP");
      Locale locale0 = LocaleUtils.toLocale("ca");
      String string1 = locale0.toLanguageTag();
      List list1 = LocaleUtils.countriesByLanguage("ca");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List list2 = LocaleUtils.availableLocaleList();
      // Undeclared exception!
      try { 
        Locale.LanguageRange.parse("n+R1Y\" L-lfr[EP");
      } catch(IllegalArgumentException e) {
         //
         // range=n+r1y\"l-lfr[ep
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ko");
      List list0 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("f");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = new Locale("", "", "\"YLW2}");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CHINA;
      List list0 = LocaleUtils.localeLookupList(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("u|ZsHY]Gf\"-)mqJfCh&");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: u|ZsHY]Gf\"-)mqJfCh&
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("\u4E2D\u56FD");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: \u4E2D\u56FD
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("`0u[ZhAY>MlN");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: `0u[ZhAY>MlN
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zh-CN");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zh-CN
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("f");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: f
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = new Locale("", "", "\"YLW2}");
      List list0 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.countriesByLanguage("");
      List list1 = LocaleUtils.countriesByLanguage("");
      List list2 = LocaleUtils.languagesByCountry("f");
      String[] stringArray0 = Locale.getISOCountries();
      List list3 = LocaleUtils.countriesByLanguage("");
      List list4 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      List list1 = LocaleUtils.countriesByLanguage((String) null);
  }
}
