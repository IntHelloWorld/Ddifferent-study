/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:25:07 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zh-CN");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zh-CN
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("aH;<]=ykgb.4mt)An");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aH;<]=ykgb.4mt)An
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("E4gUg.C");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: E4gUg.C
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "th";
      List list0 = LocaleUtils.countriesByLanguage("th");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("ZI@zw{RMaEf'");
      Locale locale0 = Locale.US;
      List list1 = LocaleUtils.localeLookupList(locale0, locale0);
      Locale locale1 = Locale.ROOT;
      Locale locale2 = LocaleUtils.toLocale("ca");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = locale0.getDisplayScript();
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List list1 = LocaleUtils.languagesByCountry("");
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      List list3 = LocaleUtils.localeLookupList(locale0, locale0);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      List list1 = LocaleUtils.availableLocaleList();
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list2 = LocaleUtils.localeLookupList((Locale) null);
      List list3 = LocaleUtils.languagesByCountry((String) null);
      List list4 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      List list5 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      Locale locale0 = LocaleUtils.toLocale((String) null);
      List list6 = LocaleUtils.languagesByCountry((String) null);
      Locale locale1 = LocaleUtils.toLocale((String) null);
      String string1 = "2|e8M$\"zoD0]/m2";
      List list7 = LocaleUtils.languagesByCountry("2|e8M$\"zoD0]/m2");
      boolean boolean1 = LocaleUtils.isAvailableLocale((Locale) null);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("2|e8M$\"zoD0]/m2");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 2|e8M$\"zoD0]/m2
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      String string0 = locale0.toLanguageTag();
      Locale.setDefault(locale_Category0, locale0);
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      List list0 = LocaleUtils.availableLocaleList();
      Locale locale1 = Locale.forLanguageTag("ja-JP");
      Locale locale2 = locale1.stripExtensions();
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean1 = locale1.hasExtensions();
      List list1 = LocaleUtils.localeLookupList(locale0, locale1);
      Locale locale3 = Locale.ITALY;
      String string1 = locale3.toLanguageTag();
      boolean boolean2 = LocaleUtils.isAvailableLocale(locale3);
      List list2 = LocaleUtils.languagesByCountry("org.apache.commons.lang.LocaleUtils");
      List list3 = LocaleUtils.availableLocaleList();
      List list4 = LocaleUtils.localeLookupList(locale0);
      List list5 = LocaleUtils.availableLocaleList();
      String string2 = "W~ay;D&-':y^Qs";
      Locale locale4 = new Locale(string2);
      List list6 = LocaleUtils.localeLookupList(locale4);
      List list7 = LocaleUtils.languagesByCountry(string0);
      boolean boolean3 = LocaleUtils.isAvailableLocale(locale2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.GERMAN;
      List list0 = LocaleUtils.localeLookupList(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = new Locale("", "", "0/n8&p");
      List list0 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ss_&<]@geBVP;1");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ss_&<]@geBVP;1
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("{=yt(^T,t0>^$Z>b3@|");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: {=yt(^T,t0>^$Z>b3@|
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }
}
