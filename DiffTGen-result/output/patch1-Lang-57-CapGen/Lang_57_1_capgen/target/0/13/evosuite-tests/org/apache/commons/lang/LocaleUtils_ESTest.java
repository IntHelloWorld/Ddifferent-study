/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:21:26 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("yzsgC'HKhh");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yzsgC'HKhh
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("aa/n`\"9n<OeIw`");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aa/n`\"9n<OeIw`
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zW1Prbtlx#5THd9-xM<");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zW1Prbtlx#5THd9-xM<
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("VHHiRm");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: VHHiRm
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getScript();
      Locale locale1 = new Locale("Invalid locale format: ");
      String string1 = locale0.getDisplayLanguage(locale1);
      Locale.setDefault(locale0);
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      String string2 = locale0.toLanguageTag();
      List list0 = LocaleUtils.countriesByLanguage("org.apache.commons.lang.LocaleUtils");
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list1 = LocaleUtils.countriesByLanguage("ja");
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      Locale locale2 = locale0.stripExtensions();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("");
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      String string0 = Locale.lookupTag(linkedList0, set0);
      Locale locale1 = new Locale("", "", "mRr?PBf[");
      Set<String> set1 = locale1.getUnicodeLocaleKeys();
      String string1 = locale0.getDisplayVariant();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      String string2 = locale0.getDisplayName(locale1);
      List list1 = LocaleUtils.localeLookupList(locale0, locale0);
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      Set set2 = LocaleUtils.availableLocaleSet();
      Set set3 = LocaleUtils.availableLocaleSet();
      List list2 = LocaleUtils.languagesByCountry("");
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list3 = LocaleUtils.availableLocaleList();
      Set set4 = LocaleUtils.availableLocaleSet();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      String string3 = Locale.lookupTag(linkedList1, set0);
      List list4 = LocaleUtils.availableLocaleList();
      List list5 = LocaleUtils.countriesByLanguage("=pZDXX");
      List list6 = LocaleUtils.countriesByLanguage((String) null);
      List list7 = LocaleUtils.countriesByLanguage("");
      Set set5 = LocaleUtils.availableLocaleSet();
      Set set6 = LocaleUtils.availableLocaleSet();
      Set set7 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry((String) null);
      List list1 = LocaleUtils.availableLocaleList();
      Locale locale0 = Locale.ITALIAN;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.JAPANESE;
      String string0 = locale1.getScript();
      String string1 = locale0.getDisplayName(locale1);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      String string2 = locale1.getDisplayScript();
      String string3 = locale0.getDisplayName();
      String string4 = locale0.getDisplayLanguage(locale1);
      Locale locale2 = locale0.stripExtensions();
      String string5 = locale0.getDisplayLanguage();
      String string6 = locale0.getDisplayName();
      List list0 = LocaleUtils.localeLookupList(locale0);
      String string7 = "vzY9Yk3";
      List list1 = LocaleUtils.languagesByCountry("vzY9Yk3");
      List list2 = LocaleUtils.availableLocaleList();
      List list3 = LocaleUtils.languagesByCountry("");
      List list4 = LocaleUtils.languagesByCountry("");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang.LocaleUtils");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = new Locale("Invalid locale format: ");
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = new Locale("8;", "ZyR", "ZyR");
      List list0 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ms");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("m'o}nsL,1!");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: m'o}nsL,1!
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("}z30m");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: }z30m
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }
}
