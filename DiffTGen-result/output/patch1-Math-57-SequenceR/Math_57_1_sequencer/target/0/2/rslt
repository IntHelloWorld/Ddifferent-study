* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Starting client
* Connecting to master process on port 17767
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-57-SequenceR/Math_57_1_sequencer/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 115
  - Branch 64
  - Exception 0
  - MutationFactory 161
  - Output 6
  - Method 3
  - MethodNoException 3
  - CBranchFitnessFactory 64
* Using seed 1585460988036
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:===>                          11%] [Cov:>                                  1%][Progress:===>                          13%] [Cov:====>                              13%][Progress:===>                          13%] [Cov:========>                          24%][Progress:===>                          13%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:>                                  1%][Progress:=======>                      25%] [Cov:====>                              13%][Progress:=======>                      25%] [Cov:========>                          24%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:=============>                     39%][Progress:=======>                      25%] [Cov:=================>                 50%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:=======>                           22%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===============>                   43%][Progress:=======>                      26%] [Cov:==================>                54%][Progress:=======>                      26%] [Cov:===================>               57%][Progress:=========>                    33%] [Cov:>                                  0%][Progress:=========>                    33%] [Cov:>                                  1%][Progress:=========>                    33%] [Cov:====>                              13%][Progress:=========>                    33%] [Cov:=====>                             16%][Progress:=========>                    33%] [Cov:======>                            19%][Progress:=========>                    33%] [Cov:========>                          23%][Progress:=========>                    33%] [Cov:===========>                       34%][Progress:=========>                    33%] [Cov:===============>                   45%][Progress:=========>                    33%] [Cov:================>                  46%][Progress:=========>                    33%] [Cov:================>                  47%][Progress:===========>                  38%] [Cov:>                                  1%][Progress:===========>                  38%] [Cov:====>                              13%][Progress:===========>                  38%] [Cov:========>                          24%][Progress:===========>                  38%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 5%][Progress:============>                 40%] [Cov:=====>                             17%][Progress:============>                 40%] [Cov:======>                            19%][Progress:============>                 40%] [Cov:========>                          23%][Progress:============>                 40%] [Cov:===========>                       34%][Progress:============>                 40%] [Cov:===============>                   45%][Progress:============>                 40%] [Cov:================>                  46%][Progress:=============>                45%] [Cov:>                                  0%][Progress:=============>                45%] [Cov:====>                              13%][Progress:=============>                45%] [Cov:=====>                             15%][Progress:=============>                45%] [Cov:======>                            19%][Progress:=============>                45%] [Cov:=======>                           20%][Progress:=============>                45%] [Cov:========>                          24%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:===================>               57%][Progress:=============>                46%] [Cov:===================>               57%][Progress:==============>               48%] [Cov:========>                          24%][Progress:==============>               48%] [Cov:==========>                        31%][Progress:==============>               48%] [Cov:===========>                       34%][Progress:==============>               48%] [Cov:===================>               57%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             56%] [Cov:===================>               56%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:===================>               56%][Progress:==================>           63%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:===================>               56%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:===================>               57%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:=====================>             60%][Progress:========================>     81%] [Cov:=====================>             60%][Progress:=========================>    86%] [Cov:=====================>             60%][Progress:==========================>   88%] [Cov:=====================>             60%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:=====================>             60%][Progress:===========================>  93%] [Cov:=====================>             60%][Progress:============================> 95%] [Cov:=====================>             60%][Progress:=============================>98%] [Cov:=====================>             60%][Progress:==============================100%] [Cov:=====================>             60%][Progress:==============================100%] [Cov:=====================>             60%][Progress:==============================100%] [Cov:=====================>             60%][Progress:==============================100%] [Cov:======================>            63%]
* Search finished after 62s and 12 generations, 6689 statements, best individual has fitness: 261.81638417846267
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 50%
* Total number of goals: 115
* Number of covered goals: 57
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 38%
* Total number of goals: 64
* Number of covered goals: 24
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 161
* Number of covered goals: 86
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 38%
* Total number of goals: 64
* Number of covered goals: 24
* Generated 8 tests with total length 66
* Resulting test suite's coverage: 64% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'KMeansPlusPlusClusterer_ESTest' to evosuite-tests
* Done!

* Computation finished
