* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Starting client
* Connecting to master process on port 9561
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-57-SequenceR/Math_57_1_sequencer/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 115
  - Branch 64
  - Exception 0
  - MutationFactory 161
  - Output 6
  - Method 3
  - MethodNoException 3
  - CBranchFitnessFactory 64
* Using seed 1585460988118
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:===>                          11%] [Cov:>                                  1%][Progress:===>                          11%] [Cov:====>                              13%][Progress:===>                          11%] [Cov:========>                          24%][Progress:===>                          11%] [Cov:==========>                        31%][Progress:=====>                        18%] [Cov:>                                  2%][Progress:=====>                        18%] [Cov:=>                                 3%][Progress:=====>                        18%] [Cov:=====>                             15%][Progress:=====>                        18%] [Cov:=========>                         26%][Progress:=====>                        18%] [Cov:===========>                       34%][Progress:======>                       23%] [Cov:>                                  0%][Progress:======>                       23%] [Cov:====>                              13%][Progress:======>                       23%] [Cov:=====>                             15%][Progress:======>                       23%] [Cov:======>                            19%][Progress:======>                       23%] [Cov:========>                          24%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:>                                  1%][Progress:=======>                      25%] [Cov:====>                              13%][Progress:=======>                      25%] [Cov:========>                          24%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:>                                  1%][Progress:==========>                   36%] [Cov:====>                              13%][Progress:==========>                   36%] [Cov:========>                          24%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:===========>                       34%][Progress:==========>                   36%] [Cov:===============>                   45%][Progress:==========>                   36%] [Cov:================>                  46%][Progress:===========>                  38%] [Cov:===>                               11%][Progress:===========>                  38%] [Cov:=====>                             15%][Progress:===========>                  38%] [Cov:======>                            19%][Progress:===========>                  38%] [Cov:========>                          24%][Progress:===========>                  38%] [Cov:==========>                        31%][Progress:===========>                  38%] [Cov:============>                      37%][Progress:===========>                  38%] [Cov:=================>                 49%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:>                                  1%][Progress:==============>               48%] [Cov:====>                              13%][Progress:==============>               48%] [Cov:========>                          24%][Progress:==============>               48%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:>                                  0%][Progress:===============>              50%] [Cov:>                                  1%][Progress:===============>              50%] [Cov:====>                              13%][Progress:===============>              50%] [Cov:=====>                             16%][Progress:===============>              50%] [Cov:======>                            19%][Progress:===============>              50%] [Cov:========>                          24%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:===========>                       33%][Progress:===============>              51%] [Cov:============>                      35%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:==============>                    42%][Progress:===============>              51%] [Cov:================>                  46%][Progress:===============>              51%] [Cov:==================>                52%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:==================>                52%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 51%][Progress:================>             55%] [Cov:==================>                52%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 51%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:==================>                52%][Progress:===================>          66%] [Cov:=================>                 50%][Progress:===================>          66%] [Cov:==================>                52%][Progress:=====================>        71%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:=================>                 50%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:======================>       75%] [Cov:=================>                 50%][Progress:======================>       75%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     81%] [Cov:==================>                52%][Progress:========================>     81%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:==========================>   88%] [Cov:==================>                52%][Progress:==========================>   88%] [Cov:==================>                52%][Progress:==========================>   88%] [Cov:==================>                53%][Progress:===========================>  90%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:=================>                 50%][Progress:===========================>  93%] [Cov:=================>                 51%][Progress:===========================>  93%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:==================>                53%][Progress:=============================>98%] [Cov:==================>                53%][Progress:=============================>98%] [Cov:===================>               56%][Progress:==============================100%] [Cov:===================>               56%][Progress:==============================100%] [Cov:===================>               56%][Progress:==============================100%] [Cov:=====================>             60%]
* Search finished after 64s and 9 generations, 4677 statements, best individual has fitness: 294.4019607819854
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 42%
* Total number of goals: 115
* Number of covered goals: 48
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 33%
* Total number of goals: 64
* Number of covered goals: 21
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 40%
* Total number of goals: 161
* Number of covered goals: 64
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 33%
* Total number of goals: 64
* Number of covered goals: 21
* Generated 6 tests with total length 45
* Resulting test suite's coverage: 60% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'KMeansPlusPlusClusterer_ESTest' to evosuite-tests
* Done!

* Computation finished
