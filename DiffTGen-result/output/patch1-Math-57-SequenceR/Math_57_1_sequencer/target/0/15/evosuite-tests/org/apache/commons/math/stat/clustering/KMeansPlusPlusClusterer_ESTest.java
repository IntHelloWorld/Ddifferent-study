/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:54:57 GMT 2020
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.valueOf("LARGEST_VARIANCE");
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1316);
      intArray0[1] = 79;
      intArray0[2] = 4;
      intArray0[3] = 0;
      int int0 = 0;
      intArray0[4] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      String string0 = euclideanIntegerPoint0.toString();
      EuclideanIntegerPoint euclideanIntegerPoint1 = euclideanIntegerPoint0.centroidOf(linkedList0);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList0, 4, 5586);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[10];
      intArray0[0] = (-436);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      intArray0[1] = 0;
      intArray0[2] = 22;
      intArray0[3] = (-2386);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList0, 969, (-436));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[10];
      intArray0[0] = (-436);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      intArray0[1] = 0;
      intArray0[2] = 22;
      intArray0[3] = (-2386);
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 954;
      intArray0[6] = 23;
      intArray0[7] = 27;
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      String string0 = euclideanIntegerPoint1.toString();
      boolean boolean1 = linkedList0.add(euclideanIntegerPoint1);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      Random.setNextRandom(0);
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(linkedList0, (-436), 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 323;
      int int1 = mockRandom0.nextInt(323);
      double double0 = mockRandom0.nextDouble();
      float float0 = mockRandom0.nextFloat();
      double double1 = mockRandom0.nextGaussian();
      IntStream intStream0 = mockRandom0.ints(392L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      String string0 = euclideanIntegerPoint0.toString();
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      double double2 = euclideanIntegerPoint1.distanceFrom(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint1);
      Random.setNextRandom(323);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 265, 0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 323;
      int int1 = mockRandom0.nextInt(323);
      double double0 = mockRandom0.nextDouble();
      float float0 = mockRandom0.nextFloat();
      double double1 = mockRandom0.nextGaussian();
      IntStream intStream0 = mockRandom0.ints(392L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint(euclideanIntegerPoint0);
      String string0 = euclideanIntegerPoint0.toString();
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      double double2 = euclideanIntegerPoint1.distanceFrom(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint1);
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(list0, (-2), 120);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 265, 0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 323;
      int int1 = mockRandom0.nextInt(323);
      double double0 = mockRandom0.nextDouble();
      float float0 = mockRandom0.nextFloat();
      double double1 = mockRandom0.nextGaussian();
      IntStream intStream0 = mockRandom0.ints(392L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint(euclideanIntegerPoint0);
      String string0 = euclideanIntegerPoint0.toString();
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      double double2 = euclideanIntegerPoint1.distanceFrom(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint1);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 265, 0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[0];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      boolean boolean1 = linkedList0.add(euclideanIntegerPoint0);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      int int0 = (-3560);
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(linkedList0, (-3560), (-3560));
      String string0 = "";
      // Undeclared exception!
      try { 
        KMeansPlusPlusClusterer.EmptyClusterStrategy.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom(2281L);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) null, 282, Integer.MAX_VALUE);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom(1L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      double double0 = mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[10];
      intArray0[0] = (-436);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      String string0 = euclideanIntegerPoint0.toString();
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      intArray0[7] = 0;
      intArray0[2] = 22;
      intArray0[3] = (-2386);
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 954;
      intArray0[2] = 23;
      intArray0[7] = 27;
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      boolean boolean1 = linkedList0.add(euclideanIntegerPoint1);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      Random.setNextRandom(0);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList0, 2, (-2386));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 323;
      int int1 = mockRandom0.nextInt(323);
      double double0 = mockRandom0.nextDouble();
      float float0 = mockRandom0.nextFloat();
      double double1 = mockRandom0.nextGaussian();
      IntStream intStream0 = mockRandom0.ints(392L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      cluster0.addPoint(euclideanIntegerPoint1);
      Random.setNextRandom(323);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 265, 0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[10];
      intArray0[0] = (-436);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      intArray0[1] = 0;
      intArray0[2] = 22;
      intArray0[3] = (-2386);
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 954;
      intArray0[6] = 23;
      intArray0[7] = 27;
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      boolean boolean1 = linkedList0.add(euclideanIntegerPoint1);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom(1L);
      double double0 = mockRandom0.nextGaussian();
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[9];
      intArray0[0] = 152;
      intArray0[1] = 225;
      intArray0[2] = 4;
      intArray0[3] = (-1837);
      intArray0[4] = 2248;
      intArray0[5] = (-1586);
      int int0 = 101;
      intArray0[6] = 101;
      intArray0[7] = 195;
      intArray0[8] = 982;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      // Undeclared exception!
      try { 
        mockRandom0.longs(1L, 1L, 1L);
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[8];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      intArray0[0] = 4;
      intArray0[1] = 2663;
      intArray0[6] = (-4362);
      intArray0[3] = 115;
      intArray0[4] = (-3210);
      intArray0[5] = 0;
      intArray0[6] = 2924;
      intArray0[7] = 1;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, (-1427), (-1427));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-411);
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-107L), (double) (-40), (-3638.993));
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }
}
