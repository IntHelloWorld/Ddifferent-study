/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:50:18 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(20, (-1), (-1));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(20, (-4834));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 20);
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0, (-4834));
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      // Undeclared exception!
      try { 
        openMapRealVector1.getL1Distance(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-5529.90328);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 78.76949641463834;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-483.2083818776);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1323.1732589443393);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5266.911212;
      doubleArray0[1] = (-1025.0);
      doubleArray0[2] = (-1097.407684);
      doubleArray0[3] = 6.283185307179586;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 5266.911212;
      doubleArray1[1] = (-1097.407684);
      doubleArray1[2] = (-1097.407684);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3185.70122));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      try { 
        eigenDecompositionImpl0.getEigenvector(20);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.9999999999999998;
      doubleArray0[1] = (-577.44084136);
      doubleArray0[2] = 3113.2976574;
      doubleArray0[3] = 0.08325;
      doubleArray0[4] = 1852.34915211;
      doubleArray0[5] = 1.1102230246251565E-14;
      doubleArray0[6] = 726.002473162;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)array2DRowRealMatrix0.getRowMatrix(0);
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.1102230246251565E-14;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      array2DRowRealMatrix1.data = doubleArray1;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix1, 3113.2976574);
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3009.12027262625);
      try { 
        eigenDecompositionImpl0.getEigenvector((-18));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 651.204392;
      doubleArray1[1] = (-754.78264703);
      doubleArray1[2] = 1674.764216188727;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1674.764216188727);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x3 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1.0));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1333, 1333);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-83.6830365747537);
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (-1103.947269966033);
      doubleArray0[3] = (-3309.21308664376);
      doubleArray0[4] = (-84.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(1.0E-12);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3690.041674));
      } catch(RuntimeException e) {
         //
         // a 7x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, Double.NEGATIVE_INFINITY);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 27.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.563);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(20, (-1), (-1));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(20, (-4834));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 20);
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapExpm1ToSelf();
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      // Undeclared exception!
      try { 
        openMapRealVector1.getL1Distance(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1224.85205153);
      doubleArray0[0] = double0;
      Double double1 = new Double(1224.85205153);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double2 = openMapRealVector0.getLInfNorm();
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 1224.85205153);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      double double3 = eigenDecompositionImpl0.getRealEigenvalue(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1803.0;
      doubleArray0[1] = (-2375.161955);
      doubleArray0[2] = 265.19806;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 878.479029;
      doubleArray0[5] = 1428.354052382;
      doubleArray0[6] = 1345.351;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-653.1314714119);
      doubleArray0[1] = 72.8321797592626;
      doubleArray0[2] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.08325);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.5472436891786698);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1224.85205153);
      doubleArray0[0] = double0;
      Double double1 = new Double(1224.85205153);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double2 = openMapRealVector0.getLInfNorm();
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 1224.85205153);
      double double3 = Double.min(2449.70410306, (double) doubleArray0[1]);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double4 = openMapRealVector1.getNorm();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      double double5 = eigenDecompositionImpl0.getRealEigenvalue(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5266.911212;
      doubleArray0[1] = (-1025.12243541);
      doubleArray0[2] = 1079.32;
      doubleArray0[3] = 6.283185307179586;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 5266.911212;
      doubleArray1[1] = 1079.32;
      doubleArray1[2] = 1079.32;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3185.70122));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      try { 
        eigenDecompositionImpl0.getEigenvector(20);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
