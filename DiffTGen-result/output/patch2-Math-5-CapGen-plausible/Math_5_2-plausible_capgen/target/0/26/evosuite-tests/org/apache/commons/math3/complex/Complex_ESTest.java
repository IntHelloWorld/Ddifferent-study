/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:30:30 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.pow((-1426.3081854));
      Complex complex3 = complex2.I.add((-1426.3081854));
      Complex complex4 = complex1.add((-1426.3081854));
      Complex complex5 = complex1.INF.multiply(complex0);
      Complex complex6 = complex4.I.cos();
      int int1 = complex1.hashCode();
      double double0 = complex0.getArgument();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex5.ONE.subtract(0.22079706192016602);
      Complex complex9 = complex7.createComplex(0.22079706192016602, (-1950.90428328942));
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex4.multiply(complex10);
      Complex complex12 = complex5.log();
      Complex complex13 = complex1.ZERO.tan();
      double double1 = complex10.INF.getArgument();
      Complex complex14 = complex12.NaN.pow(complex4);
      Complex complex15 = complex14.I.subtract(complex4);
      Complex complex16 = new Complex(Double.NaN, Double.NaN);
      double double2 = complex1.getImaginary();
      Complex complex17 = complex4.subtract(Double.NaN);
      Complex complex18 = complex14.cos();
      Complex complex19 = complex4.cos();
      Complex complex20 = complex12.conjugate();
      Complex complex21 = complex11.asin();
      Complex complex22 = complex21.NaN.pow(0.0);
      Complex complex23 = complex21.multiply(complex6);
      Complex complex24 = complex23.ONE.divide((-0.7171706400055834));
      Complex complex25 = complex21.ZERO.sqrt1z();
      Complex complex26 = complex17.add(0.7853981633974483);
      double double3 = complex11.abs();
      Complex complex27 = complex1.tan();
      Complex complex28 = complex17.divide(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.NaN.abs();
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = Complex.valueOf(3544.0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.NaN.log();
      Object object0 = complex1.I.readResolve();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.NaN.add(372.45827);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.ZERO.add((-2101.3296));
      Complex complex11 = complex3.asin();
      double double2 = complex11.abs();
      Complex complex12 = complex4.add(Double.NaN);
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex12.INF.subtract(Double.NaN);
      boolean boolean0 = complex12.equals(complex1);
      Complex complex15 = complex2.multiply(2144259467);
      Complex complex16 = complex10.asin();
      boolean boolean1 = complex4.equals("V/R>',e");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.atan();
      String string0 = complex0.toString();
      Complex complex3 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.ZERO.atan();
      try { 
        complex4.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.530656968851287E-8);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = Complex.valueOf(3.530656968851287E-8);
      Complex complex3 = complex2.INF.multiply(844.1);
      Complex complex4 = complex0.createComplex(3.530656968851287E-8, 3.530656968851287E-8);
      Complex complex5 = complex4.INF.pow(complex2);
      Complex complex6 = complex4.createComplex(3.530656968851287E-8, 3.530656968851287E-8);
      Complex complex7 = complex4.NaN.sin();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex4.ZERO.multiply(complex8);
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex4.add(3.530656968851287E-8);
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = complex1.exp();
      Complex complex13 = complex4.cos();
      Complex complex14 = complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2.0, (-1.0));
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.ZERO.divide((-1.0));
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex0.conjugate();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex0.add((-1.0));
      Complex complex7 = complex4.multiply(1988.315781818237);
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex8.divide(complex4);
      Complex complex10 = complex7.ONE.multiply(2.0);
      Complex complex11 = complex1.log();
      Complex complex12 = complex11.NaN.pow(0.20501139760017395);
      boolean boolean0 = complex7.isInfinite();
      Complex complex13 = complex11.exp();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      double double1 = 977.074266999;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.INF.sin();
      boolean boolean0 = complex1.ZERO.equals(complex0);
      Complex complex4 = complex0.reciprocal();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex3.NaN.pow(complex1);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex6.ZERO.cos();
      int int0 = complex4.ONE.hashCode();
      Complex complex8 = complex2.I.sqrt1z();
      Complex complex9 = complex8.I.atan();
      boolean boolean1 = complex2.I.equals(object0);
      Complex complex10 = complex3.multiply(0.0);
      Complex complex11 = complex2.multiply(0.0);
      double double0 = complex3.getReal();
      Complex complex12 = complex9.pow(complex11);
      boolean boolean2 = complex9.isNaN();
      Complex complex13 = complex4.exp();
      Complex complex14 = complex3.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.NaN.add(complex1);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex2.I.equals(object0);
      List<Complex> list0 = complex2.nthRoot(22);
      Complex complex4 = complex1.ONE.multiply(complex0);
      Complex complex5 = complex0.sqrt();
      double double0 = complex0.ZERO.abs();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex5.atan();
      Object object1 = complex6.readResolve();
      Complex complex9 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(420.081);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.ONE.createComplex(420.081, 1.0);
      Complex complex5 = complex4.NaN.add(complex2);
      String string0 = complex0.toString();
      Complex complex6 = complex1.subtract(1071.1112763);
      Complex complex7 = complex2.atan();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex8 = complex3.INF.pow((-807.26));
      List<Complex> list1 = complex2.nthRoot(17);
      Complex complex9 = complex0.tan();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex10 = complex9.acos();
      Complex complex11 = complex6.exp();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = Complex.valueOf((double) 17);
      Complex complex14 = complex12.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex5 = complex0.INF.atan();
      Complex complex6 = complex0.asin();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex6.equals(object0);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex5.multiply(17);
      Object object1 = complex2.readResolve();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex9.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(2.0, (-202.0));
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex4.ZERO.subtract(complex3);
      String string0 = complex0.toString();
      Complex complex6 = complex3.subtract(complex0);
      double double0 = complex2.INF.abs();
      Complex complex7 = complex1.NaN.divide(complex6);
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex2.sin();
      Complex complex11 = Complex.valueOf(0.0, (-2823.32422));
      Complex complex12 = complex8.sqrt1z();
      Complex complex13 = complex1.I.divide(complex8);
      boolean boolean0 = complex3.isNaN();
      Complex complex14 = complex8.pow(2.0);
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex8.subtract(complex6);
      Complex complex17 = complex15.cos();
      Complex complex18 = complex2.sin();
      String string1 = complex1.toString();
      Complex complex19 = complex16.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4573285967670963E-107, 1.4573285967670963E-107);
      Complex complex1 = complex0.I.createComplex(1.4573285967670963E-107, 1.8428773880004883);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.multiply((-1723.8719361));
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.ZERO.subtract(complex1);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = Complex.valueOf((-2848.494423459), 0.0);
      boolean boolean0 = complex5.equals(complex1);
      Complex complex7 = complex0.INF.cos();
      Complex complex8 = complex0.sin();
      Complex complex9 = Complex.valueOf((-2227.405721377), (-2227.405721377));
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex9.sqrt();
      Complex complex13 = Complex.valueOf((-20.0));
      Complex complex14 = complex9.multiply(684);
      Complex complex15 = complex10.multiply(1);
      Complex complex16 = Complex.valueOf((-1.7672547212604003E-8));
      Complex complex17 = complex0.add(complex11);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex1.ONE.sqrt();
      Complex complex7 = complex4.pow(0.5551414489746094);
      Complex complex8 = complex5.subtract(0.5551414489746094);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex8.subtract(0.5551414489746094);
      int int0 = complex1.hashCode();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex9.atan();
      Complex complex13 = complex12.I.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = new Complex(2.0, 164.3838623303);
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex0.sin();
      boolean boolean0 = complex3.equals(complex1);
      Complex complex4 = complex2.tan();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = null;
      Complex complex2 = complex0.atan();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 2281.2929904;
      Complex complex0 = new Complex(2281.2929904, 2281.2929904);
      Complex complex1 = null;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.INF.equals((Object) null);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex3.I.sqrt();
      Complex complex8 = complex2.divide(complex5);
      Complex complex9 = complex3.multiply(complex2);
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex1.divide(complex0);
      Complex complex12 = complex11.multiply(628);
      String string0 = complex10.toString();
      Complex complex13 = complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1645.708186306771, 1645.708186306771);
      Complex complex1 = complex0.multiply((-2295.74117021));
      Complex complex2 = complex1.NaN.createComplex((-2295.74117021), 0.0);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.valueOf(1645.708186306771);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 3704.4072);
      Complex complex7 = complex2.conjugate();
      double double0 = complex7.abs();
      boolean boolean0 = complex2.ZERO.equals(complex1);
      boolean boolean1 = complex7.isNaN();
      Complex complex8 = complex2.createComplex(3704.4072, 1645.708186306771);
      Complex complex9 = complex1.negate();
      Complex complex10 = Complex.ONE;
      boolean boolean2 = complex9.NaN.equals(complex10);
      Complex complex11 = complex8.acos();
      Complex complex12 = complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-2320.0224318), (-2320.0224318));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      double double0 = complex3.getReal();
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
      Complex complex7 = complex2.multiply(0);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex1.sin();
      Object object0 = complex7.readResolve();
      double double1 = complex6.getReal();
      Complex complex10 = complex1.divide(complex5);
      Complex complex11 = complex5.tan();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex7.sqrt();
      List<Complex> list0 = complex5.nthRoot(1511);
      Complex complex13 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add(0.17922431230545044);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.divide(0.17922431230545044);
      Complex complex5 = complex4.ONE.createComplex(0.17922431230545044, 0.17922431230545044);
      Complex complex6 = complex4.NaN.divide(0.17922431230545044);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.asin();
      double double0 = complex4.abs();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex9.ZERO.log();
      Complex complex11 = Complex.valueOf(0.17922431230545044);
      Complex complex12 = complex8.ONE.multiply(complex11);
      Complex complex13 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex14 = complex7.divide(complex8);
      Complex complex15 = complex5.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1929.388897349), (-1929.388897349));
      Complex complex1 = complex0.ONE.subtract((-1929.388897349));
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex3.I.add(complex2);
      double double0 = complex5.ONE.getArgument();
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.ZERO.divide(complex5);
      Complex complex9 = complex5.divide(complex7);
      Complex complex10 = complex4.createComplex(0.0, 0.0);
      Complex complex11 = Complex.valueOf(0.0, 451.68295565696536);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.conjugate();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-1028.059806));
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.I.add(complex2);
      Complex complex7 = complex5.add((-1028.059806));
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(3304.097883893717);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.NaN.multiply(3304.097883893717);
      Complex complex4 = complex0.multiply(complex1);
      boolean boolean0 = complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3947.0), (-3947.0));
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.ZERO.sin();
      int int1 = complex3.hashCode();
      Complex complex5 = new Complex(500.435780121);
      Complex complex6 = complex2.pow(complex5);
      Complex complex7 = complex2.negate();
      Complex complex8 = Complex.valueOf((-3947.0), 2906.0);
      Complex complex9 = complex2.multiply((-3947.0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(621.1883, 1015.76659808013);
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.I.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex3.conjugate();
      double double1 = complex3.I.abs();
      Complex complex5 = Complex.valueOf(621.1883, 621.1883);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex1.acos();
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-663.60353154245), 1275.96188747);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.divide(1275.96188747);
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.ZERO.add(complex2);
      ComplexField complexField1 = complex7.INF.getField();
      Complex complex8 = complex5.I.divide(complex6);
      Complex complex9 = complex6.NaN.exp();
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex3.exp();
      Complex complex13 = complex12.ONE.log();
      Complex complex14 = complex6.exp();
      Complex complex15 = complex14.I.cosh();
      Complex complex16 = complex14.ZERO.pow(complex3);
      Complex complex17 = complex2.divide(complex0);
      boolean boolean0 = complex17.ZERO.equals(complex13);
      Complex complex18 = complex4.divide(complex1);
      ComplexField complexField2 = complex3.getField();
      Complex complex19 = complex3.asin();
      Complex complex20 = complex13.createComplex(916.68357, 916.68357);
      Complex complex21 = complex20.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1747.51965, 6.283185307179586);
      Complex complex1 = complex0.createComplex((-2101.3296), 0.0);
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.INF.sin();
      ComplexField complexField0 = complex3.ONE.getField();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-680.446317094));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(4.0036393271908754E121, 4.0036393271908754E121);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex0.cosh();
      boolean boolean0 = complex4.INF.equals(complex3);
      int int0 = complex0.hashCode();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex3.I.cos();
      Complex complex7 = complex3.tan();
      Complex complex8 = Complex.valueOf(0.0);
      int int1 = complex8.NaN.hashCode();
      Complex complex9 = complex8.INF.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex4.getImaginary();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex7.ZERO.createComplex(0.0, 0.0);
      Complex complex12 = complex7.multiply(1);
      Complex complex13 = complex2.divide(complex1);
      Complex complex14 = complex1.reciprocal();
      Complex complex15 = complex12.cosh();
      double double1 = complex11.getImaginary();
      Complex complex16 = Complex.valueOf(0.0, Double.NaN);
      Complex complex17 = complex14.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.ZERO.add(1231.3);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.I.asin();
      ComplexField complexField1 = complex4.NaN.getField();
      try { 
        complex2.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.ONE.getArgument();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.subtract(0.0);
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      double double2 = complex3.getReal();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = Complex.ZERO;
      boolean boolean0 = complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(1665.21306);
      Complex complex3 = complex0.ZERO.multiply(1498);
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex1.multiply(complex2);
      Complex complex7 = complex1.I.reciprocal();
      Complex complex8 = complex6.INF.multiply(complex5);
      double double0 = complex1.getReal();
      Complex complex9 = complex0.multiply(Double.NaN);
      Complex complex10 = complex6.log();
      Complex complex11 = complex8.multiply(1498);
      Complex complex12 = complex5.exp();
      Complex complex13 = complex3.pow((double) 1498);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1028.0405));
      Complex complex1 = new Complex((-1028.0405), (-1028.0405));
      List<Complex> list0 = complex1.I.nthRoot(1);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex0.NaN.cos();
      int int0 = complex0.INF.hashCode();
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex3 = complex2.NaN.multiply(2.9758750368256437E29);
      Complex complex4 = complex0.ZERO.log();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex2.I.multiply((-1.0));
      Complex complex6 = complex5.I.multiply(complex1);
      Complex complex7 = complex0.exp();
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7190020372374008E-8, (-2481.678854079));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.divide((-1803.6916177834505));
      double double0 = complex0.I.abs();
      String string0 = complex1.ONE.toString();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex0.add((-2481.678854079));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex3.ZERO.divide(complex1);
      Complex complex6 = complex4.INF.tan();
      Complex complex7 = complex6.I.acos();
      Complex complex8 = complex5.ZERO.asin();
      ComplexField complexField1 = complex4.getField();
      Complex complex9 = complex4.pow(1318.27549802962);
      Complex complex10 = complex9.I.acos();
      ComplexField complexField2 = complex9.getField();
      Complex complex11 = complex8.atan();
      Complex complex12 = Complex.valueOf(1.0);
      Object object0 = complex12.readResolve();
      Complex complex13 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.multiply(999);
      String string0 = complex3.I.toString();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.valueOf(1501.76416, 1501.76416);
      Complex complex3 = complex2.INF.log();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.add(1076.553);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.subtract(complex4);
      double double0 = complex2.ONE.abs();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex6.asin();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex8.createComplex(0.0, 0.0);
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex4.I.divide(complex3);
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex14.ONE.subtract(complex5);
      Complex complex16 = complex13.INF.cosh();
      Complex complex17 = complex4.asin();
      boolean boolean0 = complex7.equals(complex0);
      int int0 = complex13.hashCode();
      Complex complex18 = complex17.atan();
      Complex complex19 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-4406.875336711281), (-4406.875336711281));
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.ONE.createComplex(0.6400018930435181, Double.NaN);
      Complex complex4 = complex2.ONE.createComplex((-4406.875336711281), 0.0);
      List<Complex> list0 = complex0.nthRoot(11);
      Complex complex5 = complex0.ZERO.asin();
      List<Complex> list1 = complex5.NaN.nthRoot(1);
      Complex complex6 = complex0.pow((-4406.875336711281));
      Complex complex7 = complex0.INF.negate();
      Complex complex8 = complex7.NaN.multiply(Double.NaN);
      Complex complex9 = complex8.ZERO.createComplex(1239.66895, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex10 = complex0.pow(1815.939199);
      Complex complex11 = complex6.multiply(Double.NaN);
      Complex complex12 = complex6.exp();
      Complex complex13 = complex1.log();
      Complex complex14 = complex13.ZERO.multiply(0.0);
      double double1 = complex5.getImaginary();
      List<Complex> list2 = complex12.nthRoot(11);
      Complex complex15 = complex8.asin();
      Complex complex16 = complex3.sqrt1z();
      Complex complex17 = Complex.valueOf(1239.66895, Double.NaN);
      Complex complex18 = complex1.asin();
      Complex complex19 = complex14.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1872.27625), (-1872.27625));
      Complex complex1 = new Complex((-1872.27625), (-1872.27625));
      Complex complex2 = complex0.NaN.subtract(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex2.cos();
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex2.ONE.divide((-1872.27625));
      Object object1 = complex0.readResolve();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex0.log();
      Complex complex8 = complex4.negate();
      int int0 = complex0.hashCode();
      double double0 = complex7.getImaginary();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex3.createComplex((-1872.27625), (-2.356194490192345));
      Complex complex11 = complex7.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(4324.8875709008, 4324.8875709008);
      Complex complex1 = complex0.createComplex(4324.8875709008, (-4074.6395954714912));
      Complex complex2 = complex0.subtract(4324.8875709008);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex3.log();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.conjugate();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(994.70076253, 843.0251224415);
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex0.nthRoot(983);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.log();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.INF.cosh();
      Complex complex5 = complex2.NaN.conjugate();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.ONE.multiply(Double.NaN);
      int int1 = complex7.ZERO.hashCode();
      double double0 = complex6.getArgument();
      double double1 = complex5.abs();
      String string0 = complex0.toString();
      double double2 = complex6.abs();
      Complex complex9 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1559.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.I.negate();
      double double0 = complex0.abs();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5236.9329610957));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.add((-5236.9329610957));
      List<Complex> list0 = complex1.ZERO.nthRoot(363);
      Complex complex3 = complex1.ZERO.tan();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex1.NaN.multiply((double) 363);
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex5.add(complex1);
      boolean boolean0 = complex1.equals(complex7);
      Complex complex9 = complex7.createComplex(363, (-4.2702997139152675E-8));
      int int1 = complex9.INF.hashCode();
      Complex complex10 = complex0.add(Double.NaN);
      Complex complex11 = complex8.multiply(363);
      Complex complex12 = complex6.subtract(complex5);
      Complex complex13 = Complex.valueOf(675.024048, 675.024048);
      String string0 = complex9.toString();
      Complex complex14 = complex5.add(complex1);
      boolean boolean1 = complex10.isNaN();
      double double0 = complex9.getReal();
      Complex complex15 = complex5.divide((-518.81933155611));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf(Double.NaN, (-3369.3));
      Complex complex6 = complex1.multiply(1374.64553826);
      Complex complex7 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex1.ZERO.reciprocal();
      Complex complex5 = complex0.INF.multiply(1.0531206130981445);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.ONE.equals(complex1);
      boolean boolean1 = complex0.isInfinite();
      double double0 = complex0.getReal();
      List<Complex> list0 = complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.divide(0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex0.NaN.log();
      List<Complex> list0 = complex0.INF.nthRoot(7);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.pow((double) 7);
      Complex complex5 = complex3.add(0.0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.log();
      Complex complex9 = complex6.sinh();
      boolean boolean0 = complex1.equals(complex3);
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = complex0.pow((-1750.0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.multiply(318.798031585);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex0.exp();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3746.55501103443, 3746.55501103443);
      double double0 = complex0.I.abs();
      double double1 = complex0.getImaginary();
      Complex complex1 = new Complex(1.0, 3746.55501103443);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.INF.divide((-2970.2347));
      Complex complex3 = complex0.cosh();
      double double0 = complex2.I.abs();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = Complex.valueOf((-2970.2347), 0.0);
      Complex complex6 = complex1.INF.createComplex((-2970.2347), (-2970.2347));
      Complex complex7 = complex0.pow(complex3);
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex2.log();
      Complex complex9 = complex4.add((-3026.77037));
      boolean boolean0 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(355.0, 2498.8896165);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex1.ONE.multiply(complex0);
      Complex complex5 = complex0.sqrt();
      double double0 = complex0.ZERO.abs();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex5.atan();
      Object object0 = complex6.readResolve();
      Complex complex9 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2570.92085);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.conjugate();
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(659.5218698582424, 0.0);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.pow(659.5218698582424);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(1147.3909698, 1147.3909698);
      Complex complex1 = complex0.divide(1147.3909698);
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.multiply(301);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1303.60381788241);
      double double0 = complex0.I.getArgument();
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 1.5707963267948966);
      Complex complex2 = complex1.I.acos();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.0011245735331586384), (-0.0011245735331586384));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.atan();
      double double0 = complex1.abs();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(679.8, 1447.7665463);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      int int0 = (-1);
      try { 
        complex0.ONE.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.subtract(4.326489915443873E91);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex1.ONE.subtract(263.27385443);
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex6.ONE.createComplex(0.0, (-20.0));
      String string0 = complex0.toString();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex9.multiply(1.0);
      Complex complex11 = complex10.subtract((-532.894));
      Complex complex12 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.ZERO.multiply((-782));
      Complex complex4 = complex3.ZERO.multiply(7.112596406315374E-272);
      Complex complex5 = complex2.NaN.atan();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex1.multiply(complex3);
      try { 
        complex8.nthRoot((-297));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -297
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply((-2421));
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex0.atan();
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-1281.4), 4127.42930565);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ZERO.createComplex((-1281.4), (-3237.68));
      Complex complex3 = complex2.I.divide((-1281.4));
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ONE.divide((-1746.12));
      Complex complex7 = Complex.NaN;
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex5.ONE.equals(object0);
      Complex complex8 = complex2.NaN.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex5.cos();
      double double0 = complex10.I.abs();
      List<Complex> list0 = complex3.nthRoot(803);
      Complex complex11 = complex0.pow(complex3);
      Complex complex12 = complex11.INF.divide(complex0);
      boolean boolean1 = complex12.INF.equals(complex3);
      Complex complex13 = complex4.sinh();
      String string0 = complex7.toString();
      Complex complex14 = Complex.valueOf(2.6489122816E10, Double.POSITIVE_INFINITY);
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex3.divide((-2.552517201762272E-128));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.atan();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex6.multiply(1938);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2422.00923114222), 1353.86);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.INF.cosh();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.subtract(1280.3625);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.NaN.subtract(5.181801397059486E292);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex9.I.subtract(1353.86);
      Complex complex11 = Complex.valueOf((-2422.00923114222), (-2422.00923114222));
      Complex complex12 = complex11.ZERO.multiply(1931.8997427622962);
      Complex complex13 = complex11.INF.sqrt();
      int int0 = complex1.hashCode();
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex1.tan();
      Complex complex16 = complex6.negate();
      Complex complex17 = complex15.tan();
      Complex complex18 = complex13.subtract(complex3);
      Complex complex19 = complex3.reciprocal();
      Complex complex20 = complex3.ZERO.tan();
      Complex complex21 = complex0.I.add(0.2940096855163574);
      Complex complex22 = complex21.ONE.subtract(5.181801397059486E292);
      Complex complex23 = complex3.createComplex((-2422.00923114222), 20.0);
      Complex complex24 = complex19.conjugate();
      Complex complex25 = complex1.I.pow(complex6);
      Complex complex26 = complex24.tanh();
      Object object0 = complex4.readResolve();
      double double0 = complex8.getArgument();
      Complex complex27 = complex10.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(621.1883, 621.1883);
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.I.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex3.conjugate();
      List<Complex> list0 = complex4.nthRoot(495);
      double double1 = complex3.I.abs();
      Complex complex5 = Complex.valueOf(621.1883, 621.1883);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex1.acos();
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.ONE.asin();
      double double0 = complex0.abs();
      Complex complex4 = complex2.ONE.pow(complex1);
      int int1 = complex1.ZERO.hashCode();
      Complex complex5 = complex0.divide((-569.263487381625));
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex3.INF.add(complex2);
      boolean boolean0 = complex5.equals(complex2);
      String string0 = complex2.ONE.toString();
      Complex complex8 = complex2.divide((-569.263487381625));
      Complex complex9 = complex1.subtract(complex2);
      Complex complex10 = complex0.createComplex((-569.263487381625), (-569.263487381625));
      Complex complex11 = complex10.subtract(3035.88263);
      Complex complex12 = complex0.sin();
      Complex complex13 = complex4.I.subtract(complex11);
      Complex complex14 = complex12.ZERO.multiply(3035.88263);
      Complex complex15 = complex8.sqrt1z();
      String string1 = complex15.toString();
      Complex complex16 = complex0.multiply(complex12);
      Complex complex17 = complex16.ZERO.divide((-569.263487381625));
      ComplexField complexField0 = complex17.NaN.getField();
      Complex complex18 = complex3.cosh();
      Complex complex19 = complex2.ZERO.multiply(1);
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex9.isInfinite();
      Complex complex20 = complex15.sinh();
      Complex complex21 = complex0.divide(3035.88263);
      Complex complex22 = complex11.acos();
      double double1 = complex15.getArgument();
      Complex complex23 = complex17.add(complex12);
      int int2 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex1.I.multiply(0.0);
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex0.pow((-1081.39939685823));
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex5 = complex1.ZERO.sqrt1z();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex1.subtract((-1984.2621766685));
      Complex complex8 = Complex.valueOf((-1984.2621766685), (-1984.2621766685));
      Complex complex9 = complex8.INF.pow(426.0);
      Object object1 = complex9.ONE.readResolve();
      Complex complex10 = Complex.valueOf((-1081.39939685823));
      Complex complex11 = complex2.multiply((-1275));
      int int1 = complex11.INF.hashCode();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex2.createComplex((-1549.163), (-1275));
      Complex complex14 = complex11.tanh();
      Complex complex15 = complex13.subtract(complex6);
      List<Complex> list0 = complex5.nthRoot(515);
      Complex complex16 = complex0.add(1.4450790882110596);
      Complex complex17 = complex0.multiply((double) 515);
      Complex complex18 = Complex.valueOf((-633.9260298864), 0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.createComplex((-548.44822673), 0.0);
      Complex complex2 = complex1.sqrt();
      try { 
        complex0.ZERO.nthRoot((-2755));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,755
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.divide(2.462968349456787);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.I.subtract(complex0);
      List<Complex> list0 = complex4.NaN.nthRoot(7);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex5.I.reciprocal();
      Complex complex8 = complex5.NaN.subtract(complex1);
      Complex complex9 = complex6.ONE.asin();
      Complex complex10 = complex4.ZERO.tanh();
      Complex complex11 = complex10.ONE.tanh();
      double double0 = complex1.abs();
      String string0 = complex5.toString();
      Complex complex12 = complex4.conjugate();
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex0.log();
      double double1 = complex13.getReal();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex13.pow(0.0);
      Complex complex17 = complex15.NaN.sin();
      double double2 = complex4.getReal();
      Complex complex18 = complex4.ZERO.sqrt();
      Complex complex19 = complex0.sqrt1z();
      Complex complex20 = complex4.divide(0.0);
      Complex complex21 = complex15.tanh();
      Complex complex22 = complex21.NaN.tan();
      Complex complex23 = complex0.negate();
      Complex complex24 = complex23.INF.divide(complex20);
      Complex complex25 = complex24.INF.negate();
      Complex complex26 = complex8.pow(complex12);
      Complex complex27 = complex8.cosh();
      boolean boolean1 = complex15.isInfinite();
      Complex complex28 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1511.0332312);
      Complex complex1 = complex0.INF.atan();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.divide(complex0);
      int int0 = complex2.NaN.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex2.sqrt();
      int int1 = complex0.hashCode();
      Complex complex5 = complex1.NaN.sqrt();
      Complex complex6 = complex3.NaN.exp();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex7.I.tanh();
      double double1 = complex7.ONE.getArgument();
      Object object0 = new Object();
      boolean boolean1 = complex5.ONE.equals(object0);
      Complex complex9 = complex5.INF.sin();
      Complex complex10 = complex5.multiply((-71));
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex1.negate();
      String string0 = complex3.toString();
      double double2 = complex4.abs();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex3.subtract(0.0);
      Complex complex16 = complex6.cosh();
      Complex complex17 = complex16.INF.subtract(complex11);
      int int2 = complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(1108.947);
      Complex complex2 = complex0.createComplex(1108.947, (-2043.553));
      Complex complex3 = complex0.sinh();
      String string0 = complex1.ZERO.toString();
      double double0 = complex0.abs();
      Complex complex4 = complex3.divide(complex1);
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide((-1.0));
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.multiply((-1683));
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex0.negate();
      double double0 = complex0.getArgument();
      Complex complex5 = complex2.divide((-1.0));
      Complex complex6 = complex0.pow(3173.5531);
      Complex complex7 = complex0.divide(complex5);
      boolean boolean1 = complex3.isInfinite();
  }
}
