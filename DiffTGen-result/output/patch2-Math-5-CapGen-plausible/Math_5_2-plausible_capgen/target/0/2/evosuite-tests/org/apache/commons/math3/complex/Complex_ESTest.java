/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:20:49 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(1139.9584468314401);
      Complex complex2 = complex1.I.pow(complex0);
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.exp();
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.ONE.subtract(complex4);
      double double0 = complex1.abs();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.I.subtract(0.0);
      int int1 = complex0.NaN.hashCode();
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex1.isInfinite();
      Complex complex8 = complex7.log();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex8.subtract(1139.9584468314401);
      boolean boolean3 = complex1.isInfinite();
      Complex complex13 = complex10.log();
      Object object1 = complex5.readResolve();
      Complex complex14 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf((-507.111585513));
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.INF.pow(0.0);
      Complex complex8 = complex3.multiply(281);
      Complex complex9 = complex8.ZERO.reciprocal();
      Complex complex10 = complex1.multiply((-293));
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex2.log();
      Complex complex13 = complex2.add((double) 281);
      Complex complex14 = complex4.add((double) 281);
      Complex complex15 = complex10.sqrt1z();
      Complex complex16 = complex3.log();
      Complex complex17 = complex0.atan();
      Complex complex18 = complex5.add(2.0);
      Complex complex19 = complex4.asin();
      Complex complex20 = Complex.valueOf(2.0, 2.0);
      Complex complex21 = complex20.ZERO.reciprocal();
      Complex complex22 = complex13.pow(complex20);
      Complex complex23 = complex22.ZERO.asin();
      Complex complex24 = complex2.multiply(complex7);
      boolean boolean0 = complex8.isNaN();
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ZERO.divide(Double.NaN);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.INF.pow(Double.NaN);
      Object object0 = complex2.readResolve();
      Complex complex5 = complex4.INF.tanh();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex4.INF.add(193.014);
      Complex complex7 = complex6.ONE.pow(complex0);
      Complex complex8 = complex4.createComplex(193.014, 0.0);
      Complex complex9 = complex8.add(complex4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(409.7, 409.7);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.ZERO.asin();
      boolean boolean0 = complex5.ZERO.equals(complex3);
      Complex complex6 = complex0.NaN.pow(complex4);
      String string0 = complex1.I.toString();
      Complex complex7 = complex0.I.sqrt();
      double double0 = complex6.ZERO.getArgument();
      Complex complex8 = complex7.NaN.divide(0.0);
      int int0 = complex1.I.hashCode();
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = complex9.INF.multiply(409.7);
      ComplexField complexField0 = complex9.getField();
      Complex complex11 = complex6.sinh();
      Object object0 = complex0.readResolve();
      Complex complex12 = Complex.valueOf(409.7);
      Complex complex13 = complex4.multiply(complex12);
      Complex complex14 = complex2.subtract(complex1);
      Complex complex15 = complex2.log();
      Object object1 = complex15.readResolve();
      Complex complex16 = complex10.multiply(616);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1.0));
      double double0 = complex0.abs();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.valueOf(1557.877);
      List<Complex> list0 = complex4.INF.nthRoot(2043);
      Complex complex5 = new Complex((-1.0), Double.NaN);
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex1.divide(complex5);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex7.tan();
      boolean boolean1 = complex8.isNaN();
      boolean boolean2 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(943.87004866, 1190.6791144);
      Complex complex1 = Complex.valueOf((-904.03), (-558.6496205146057));
      Complex complex2 = Complex.valueOf(943.87004866, (-128.61335));
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex1.subtract((-558.6496205146057));
      Complex complex5 = complex0.I.add(complex1);
      Complex complex6 = Complex.valueOf(1190.6791144);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex5.add(complex1);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex6.INF.pow((-1046.63515008987));
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex12.tanh();
      Complex complex15 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.INF.negate();
      int int0 = complex3.hashCode();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 1411.954636305);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Object object1 = complex0.readResolve();
      Complex complex3 = complex1.INF.divide(complex2);
      boolean boolean1 = complex2.equals(object1);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex1.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = complex1.ONE.conjugate();
      double double1 = complex1.getReal();
      double double2 = complex5.I.abs();
      Complex complex8 = complex4.add(complex5);
      Complex complex9 = complex4.asin();
      Object object2 = new Object();
      Complex complex10 = complex0.INF.multiply(complex4);
      boolean boolean2 = complex2.equals(object2);
      double double3 = complex5.getImaginary();
      Complex complex11 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(316.5107639335297, 316.5107639335297);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex3.multiply(1366);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex1.NaN.cosh();
      Complex complex8 = complex6.ONE.tanh();
      Complex complex9 = complex0.createComplex(1004.0, 316.5107639335297);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      boolean boolean1 = complex5.isNaN();
      Complex complex10 = complex2.pow(complex6);
      Complex complex11 = complex2.log();
      Complex complex12 = complex6.add(complex11);
      Complex complex13 = complex12.ONE.sinh();
      Complex complex14 = complex13.pow(0.0);
      Complex complex15 = complex13.ONE.subtract(complex1);
      Complex complex16 = complex12.ZERO.subtract(1004.0);
      double double0 = complex11.abs();
      Complex complex17 = complex5.sqrt1z();
      Complex complex18 = complex6.INF.createComplex(1366, (-8.305334708631055E-8));
      Complex complex19 = complex17.ZERO.reciprocal();
      boolean boolean2 = complex11.equals(complex0);
      String string0 = complex14.NaN.toString();
      Complex complex20 = complex10.subtract(complex17);
      Complex complex21 = complex0.conjugate();
      Complex complex22 = complex11.cos();
      Complex complex23 = complex14.reciprocal();
      Complex complex24 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(803.0173168475987, (-1280.62577958844));
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      try { 
        complex1.ZERO.nthRoot((-847));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -847
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1447.9073334932), (-1447.9073334932));
      String string0 = complex0.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex1.multiply(239.4933333);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3695.244239, 1.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.subtract(3695.244239);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex0.INF.exp();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex0.add(complex4);
      Complex complex10 = Complex.valueOf((-960.69130574595));
      Complex complex11 = complex5.divide(3695.244239);
      Complex complex12 = complex11.I.sin();
      double double0 = complex5.getReal();
      Complex complex13 = complex6.divide(4227.02214624);
      Complex complex14 = complex2.divide(3695.244239);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-255.849524));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.add((-255.849524));
      Complex complex5 = Complex.valueOf((-255.849524));
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex2.subtract((-255.849524));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(0.0, 2019.0);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.asin();
      double double0 = complex4.NaN.getArgument();
      Complex complex6 = Complex.valueOf((-663.23));
      boolean boolean0 = complex2.isInfinite();
      Complex complex7 = complex1.NaN.multiply(1);
      Complex complex8 = complex7.INF.subtract(complex2);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex7.ONE.pow(complex9);
      Complex complex11 = Complex.valueOf(0.0, Double.NaN);
      boolean boolean1 = complex11.I.equals(complex4);
      try { 
        complex0.nthRoot((-3757));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,757
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-481.965));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.INF.multiply((-2300));
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex3.ONE.add(complex0);
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex6.I.subtract((double) (-2300));
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex1.pow((-481.965));
      Complex complex11 = complex6.tan();
      Complex complex12 = complex5.multiply(complex10);
      Complex complex13 = complex1.add((double) (-2300));
      double double0 = complex11.abs();
      Complex complex14 = complex7.pow((double) (-2300));
      Complex complex15 = complex8.negate();
      ComplexField complexField1 = complex15.getField();
      Complex complex16 = complex1.cosh();
      Complex complex17 = Complex.ONE;
      boolean boolean0 = complex6.equals(complex17);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      int int0 = complex1.NaN.hashCode();
      List<Complex> list0 = complex1.nthRoot(2891);
      Complex complex3 = complex1.pow((-3589.0108670291515));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1.9369852542877197);
      Complex complex1 = complex0.I.pow(1.9369852542877197);
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex3.ONE.sqrt();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex0.divide(complex7);
      double double0 = complex6.getReal();
      Complex complex9 = complex7.divide((-633.2027));
      Complex complex10 = complex8.multiply(complex1);
      Complex complex11 = complex8.tan();
      Complex complex12 = complex1.divide(1.9369852542877197);
      Complex complex13 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5592.233222960054));
      Complex complex1 = complex0.ONE.divide((-5592.233222960054));
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.ZERO.atan();
      Object object0 = complex4.NaN.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = Complex.valueOf(0.0, 20.0);
      Complex complex8 = complex5.ZERO.add(complex6);
      String string0 = complex4.toString();
      Complex complex9 = complex6.ZERO.subtract(complex4);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex6.negate();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex5.multiply(complex6);
      Complex complex14 = complex13.INF.multiply(1);
      double double0 = complex5.getImaginary();
      Complex complex15 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4356011804377797E-9));
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.sinh();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1290.03269616, 3177.24);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = Complex.valueOf(1290.03269616);
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex0.multiply(3177.24);
      Complex complex6 = complex3.I.pow(complex2);
      Complex complex7 = complex2.sin();
      Complex complex8 = Complex.valueOf(1290.03269616, (-41.9573671));
      Complex complex9 = complex8.ONE.sqrt();
      boolean boolean0 = complex7.NaN.equals(complex3);
      boolean boolean1 = complex1.NaN.equals(complex4);
      Complex complex10 = complex5.subtract(complex0);
      Complex complex11 = complex3.I.pow(complex4);
      Complex complex12 = complex2.multiply((-1009));
      Complex complex13 = complex12.INF.acos();
      Complex complex14 = Complex.NaN;
      double double0 = complex0.INF.getArgument();
      Complex complex15 = complex10.ONE.tanh();
      boolean boolean2 = complex7.equals(complex14);
      Complex complex16 = complex3.createComplex((-2533.302785438), 1290.03269616);
      Complex complex17 = complex10.acos();
      Complex complex18 = complex10.reciprocal();
      ComplexField complexField0 = complex16.getField();
      Complex complex19 = complex0.conjugate();
      int int0 = complex6.hashCode();
      Complex complex20 = complex19.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.791602708710648E-8), 566.400506);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.ZERO.createComplex((-20.0), 2801.4382441186);
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex0.add(566.400506);
      Complex complex5 = Complex.valueOf(1424.6484);
      Complex complex6 = complex4.I.multiply(complex5);
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex7.multiply(3137.0);
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex1.exp();
      String string0 = complex8.toString();
      ComplexField complexField1 = complex7.getField();
      try { 
        complex11.nthRoot((-1514));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,514
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 1806.901015076;
      Complex complex0 = new Complex(1045.3777262, 1806.901015076);
      Complex complex1 = Complex.valueOf(1045.3777262, 1045.3777262);
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.ONE.negate();
      double double1 = complex4.ZERO.getArgument();
      Complex complex5 = complex4.INF.add(1806.901015076);
      Complex complex6 = complex3.I.add(1045.3777262);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.ZERO.add(1806.901015076);
      Object object0 = complex4.ONE.readResolve();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 6.283185307179586);
      double double0 = complex0.ONE.abs();
      boolean boolean0 = complex0.isNaN();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex1 = complex0.divide(0.6233867406845093);
      Complex complex2 = complex0.divide(0.6233867406845093);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.NaN.multiply(37);
      Complex complex8 = complex1.reciprocal();
      double double1 = complex2.getArgument();
      boolean boolean1 = complex3.isNaN();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2452.257966278, 2452.257966278);
      double double0 = complex0.I.abs();
      Complex complex1 = Complex.valueOf(2452.257966278, (-20.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.multiply(310);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.NaN.add(complex3);
      Complex complex5 = complex2.createComplex(2.31374454498291, 2452.257966278);
      Complex complex6 = complex5.ONE.createComplex(310, (-20.0));
      Complex complex7 = complex6.I.asin();
      Object object0 = complex1.readResolve();
      String string0 = complex1.NaN.toString();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.INF.multiply((-699.19322));
      String string1 = complex8.I.toString();
      Complex complex10 = complex8.divide(complex1);
      Complex complex11 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex0.cosh();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex3.isInfinite();
      Complex complex7 = complex3.add(0.0);
      Complex complex8 = complex2.sin();
      boolean boolean2 = complex3.isNaN();
      Complex complex9 = complex1.add(complex8);
      Complex complex10 = complex9.NaN.conjugate();
      int int0 = complex9.I.hashCode();
      Complex complex11 = complex3.add(8.98570720774568E-8);
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      boolean boolean3 = complex8.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-6751.712055), 0.0);
      Complex complex1 = new Complex(1.1199469566345215);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.I.multiply((-4.279090925831093E-8));
      Complex complex2 = complex1.NaN.log();
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ZERO.sinh();
      double double0 = complex5.ZERO.abs();
      Complex complex6 = complex4.ZERO.add(complex0);
      Complex complex7 = Complex.valueOf(1984.526023828711, (-2616.61128));
      Object object1 = complex7.INF.readResolve();
      Complex complex8 = complex7.ZERO.tanh();
      List<Complex> list0 = complex7.nthRoot(186);
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      Complex complex10 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.divide((-4.3991443996021166E113));
      Complex complex3 = complex0.NaN.tanh();
      ComplexField complexField0 = complex1.I.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.pow(2202.7528);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.I.subtract(complex0);
      Complex complex7 = complex4.I.divide(complex1);
      double double0 = complex1.abs();
      Complex complex8 = Complex.valueOf(0.0);
      double double1 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2934.876, 2934.876);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.log();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.add(2934.876);
      boolean boolean1 = complex5.isNaN();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex6.ONE.createComplex(1.864600658416748, 0.0);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex8.I.log();
      Complex complex10 = Complex.valueOf(2934.876);
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex4.cosh();
      Complex complex12 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-92.84085128112811));
      Complex complex1 = Complex.valueOf(3726.3542315044397);
      Complex complex2 = complex1.divide(3726.3542315044397);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.INF.negate();
      double double0 = complex3.abs();
      Complex complex6 = Complex.valueOf(864.7, (-1617.121585813446));
      Complex complex7 = complex2.INF.atan();
      Complex complex8 = complex1.multiply(1);
      Complex complex9 = complex2.createComplex(3452.398915556327, (-92.84085128112811));
      Complex complex10 = complex9.NaN.sqrt1z();
      double double1 = complex2.getReal();
      Complex complex11 = complex9.exp();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex5.createComplex(3452.398915556327, Double.POSITIVE_INFINITY);
      Object object0 = complex12.readResolve();
      Complex complex14 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-242.691854869));
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6070.97961, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = complex0.INF.asin();
      Complex complex6 = complex0.ZERO.cosh();
      Object object0 = complex5.INF.readResolve();
      double double0 = complex5.ZERO.abs();
      String string0 = complex0.toString();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex5.multiply(702);
      boolean boolean0 = complex4.isInfinite();
      double double1 = complex7.getReal();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3345.28311), (-1.0));
      Complex complex1 = complex0.pow(0.30917787551879883);
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sin();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.INF.asin();
      double double1 = complex5.I.getArgument();
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.I.divide(6.283185307179586);
      Complex complex9 = complex4.createComplex(0.0, 2163.2);
      int int1 = complex3.hashCode();
      Complex complex10 = complex2.add(complex4);
      Complex complex11 = complex4.tan();
      Complex complex12 = complex2.tan();
      double double2 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.ONE.add(1.0);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.negate();
      int int0 = complex0.hashCode();
      Complex complex5 = complex3.divide((-3302.87843086939));
      Complex complex6 = complex5.NaN.pow((double) (-2533));
      Complex complex7 = complex5.multiply((-2533));
      Complex complex8 = complex7.ONE.reciprocal();
      Complex complex9 = new Complex(1.0);
      Complex complex10 = complex4.multiply(complex9);
      Complex complex11 = complex7.subtract(complex5);
      Complex complex12 = complex7.multiply((-2533));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(36.87992962237611);
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.subtract(2531.0073524695026);
      double double1 = complex3.abs();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8829871423339434E201);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1458.0748357845202);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3.733241849647479E32);
      Complex complex1 = complex0.multiply(759);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(832.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.ONE.divide(complex0);
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex6.ONE.cos();
      boolean boolean0 = complex6.isInfinite();
      List<Complex> list0 = complex6.nthRoot(604);
      Object object0 = complex7.readResolve();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.I.subtract((double) 604);
      boolean boolean1 = complex5.isInfinite();
      double double0 = complex7.getReal();
      Complex complex11 = complex7.subtract(0.0);
      Complex complex12 = complex6.multiply(0.0);
      Complex complex13 = Complex.valueOf(2163.821727, 20.0);
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.ONE.pow(complex2);
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex4.subtract(complex2);
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex9.INF.atan();
      Complex complex12 = Complex.valueOf((-1222.52230770688));
      Complex complex13 = complex12.I.subtract((-1222.52230770688));
      Complex complex14 = complex12.I.cosh();
      Complex complex15 = complex12.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.13047236597869E-8));
      Complex complex1 = complex0.NaN.sin();
      List<Complex> list0 = complex0.nthRoot(2941);
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex1.multiply((-1127));
      Complex complex4 = complex0.NaN.divide(1.0800340064859439E241);
      Complex complex5 = complex2.I.pow(2728.2354);
      double double0 = complex3.INF.abs();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = Complex.valueOf(1381.2836682, 1381.2836682);
      String string0 = complex7.ONE.toString();
      Complex complex9 = Complex.valueOf((double) (-1127));
      Complex complex10 = complex3.tan();
      Complex complex11 = complex2.subtract(0.0);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex6.I.equals(object0);
      Complex complex12 = complex11.multiply(complex1);
      Object object1 = complex6.readResolve();
      Complex complex13 = Complex.valueOf(4395.600636467);
      Complex complex14 = complex13.INF.multiply(complex4);
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.subtract((-1325.357024391));
      Complex complex3 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      List<Complex> list0 = complex0.INF.nthRoot(3306);
      Complex complex1 = complex0.INF.subtract(0.0);
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.multiply((-319));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ONE.sqrt1z();
      boolean boolean0 = complex2.NaN.equals(complex3);
      Complex complex5 = complex2.add((double) 3306);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex5.subtract((double) 3306);
      Complex complex8 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.INF;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.INF.asin();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex5.INF.subtract(0.0);
      Complex complex8 = complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.ZERO.add(complex0);
      double double0 = complex9.ZERO.getArgument();
      double double1 = complex1.getReal();
      Complex complex10 = complex0.subtract(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex1.ZERO.subtract(913.141613);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex1.ZERO.asin();
      Complex complex7 = complex6.ZERO.subtract(complex0);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex0.asin();
      int int0 = complex10.I.hashCode();
      Complex complex11 = complex10.asin();
      double double0 = complex10.getReal();
      Complex complex12 = complex0.log();
      Complex complex13 = complex12.sqrt1z();
      double double1 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.INF.multiply(2513.9915);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.sqrt();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.divide(0.0);
      Object object1 = complex1.readResolve();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex2.INF.multiply(0);
      Complex complex9 = complex7.I.pow(complex5);
      int int0 = complex3.hashCode();
      Complex complex10 = complex2.subtract(complex7);
      Complex complex11 = complex0.atan();
      boolean boolean1 = complex9.isNaN();
      Complex complex12 = complex0.pow(complex2);
      Complex complex13 = complex0.createComplex(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(234.56802);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex1.ZERO.multiply(90);
      Complex complex5 = complex3.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.exp();
      String string0 = complex6.ONE.toString();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.cos();
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = Complex.valueOf((-1171.967), (-1171.967));
      int int0 = complex1.NaN.hashCode();
      Complex complex4 = complex3.ONE.add(complex1);
      double double1 = complex3.INF.getArgument();
      Complex complex5 = complex1.multiply(0.0);
      boolean boolean0 = complex5.ZERO.equals("");
      Complex complex6 = complex1.divide(complex3);
      Complex complex7 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.ZERO.multiply(2.343525263620692E-8);
      Complex complex4 = complex3.ZERO.sinh();
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex6.NaN.subtract(0.0);
      Complex complex8 = complex5.ZERO.pow((-859.447));
      Complex complex9 = complex2.ZERO.multiply(0.0);
      Complex complex10 = complex8.ZERO.atan();
      Complex complex11 = complex8.INF.asin();
      Complex complex12 = complex11.ONE.add(complex7);
      Complex complex13 = complex1.sin();
      Complex complex14 = complex13.NaN.pow(1163.9324256645573);
      ComplexField complexField0 = complex14.ZERO.getField();
      Complex complex15 = complex5.createComplex(Double.NaN, (-859.447));
      double double1 = complex6.getArgument();
      Complex complex16 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(2005.4862914, (-1.0));
      Complex complex1 = complex0.ZERO.acos();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = Complex.valueOf(2005.4862914);
      int int0 = complex0.ONE.hashCode();
      Complex complex5 = Complex.valueOf((-1.0), (-1.0));
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.NaN.createComplex((-1135.723422752905), 0.0);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex1.divide(complex8);
      Complex complex10 = complex5.INF.sqrt();
      Complex complex11 = complex5.INF.acos();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex12.ONE.multiply((-1.0));
      double double0 = complex3.getImaginary();
      Complex complex14 = complex4.acos();
      Complex complex15 = complex1.tanh();
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex11.subtract(complex14);
      Complex complex18 = complex9.createComplex(0.0, 2005.4862914);
      Complex complex19 = complex1.add(complex11);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.INF.divide(1.0);
      Complex complex2 = complex0.createComplex(0.0, 1.0);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.253671992213344E-296), (-7.253671992213344E-296));
      Complex complex1 = complex0.log();
      double double0 = complex1.abs();
      Complex complex2 = complex1.log();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex0.reciprocal();
      double double1 = complex3.ONE.abs();
      Complex complex4 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(917.409594);
      Complex complex1 = complex0.INF.multiply(2916);
      boolean boolean0 = complex1.NaN.equals("{L$");
      boolean boolean1 = complex0.equals("{L$");
      Complex complex2 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex1.ONE.nthRoot(798);
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf((-1.9821451970481713E-7), (-2138.553));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.I.subtract(6.380177790989479E207);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.sinh();
      List<Complex> list0 = complex4.I.nthRoot(1113);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex1.tanh();
      boolean boolean0 = complex0.equals(complex7);
      Complex complex8 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-3723.34969282));
      Complex complex1 = complex0.multiply(971);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(3358.99, 3358.99);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.atan();
      boolean boolean1 = complex1.isInfinite();
      boolean boolean2 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(2520.47, 1894.7167476887);
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = (-5444);
      try { 
        complex0.ZERO.nthRoot((-5444));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,444
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.subtract(3250.27126562);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex5.ONE.sin();
      Complex complex9 = complex5.pow(complex3);
      Complex complex10 = complex9.ONE.subtract(complex6);
      List<Complex> list0 = complex9.nthRoot(490);
      Complex complex11 = complex5.cosh();
      List<Complex> list1 = complex2.nthRoot(490);
      List<Complex> list2 = complex9.nthRoot(490);
      Complex complex12 = complex3.multiply(0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.INF.equals((Object) null);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.divide(complex0);
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.conjugate();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.subtract(1.8802599072446818E-125);
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.I.add(1.8802599072446818E-125);
      Complex complex5 = new Complex(1.8802599072446818E-125, (-188.729781896));
      Complex complex6 = Complex.valueOf(1.8802599072446818E-125, (-188.729781896));
      Complex complex7 = complex3.add(complex5);
      Complex complex8 = complex3.asin();
      Complex complex9 = complex3.atan();
      Complex complex10 = complex3.divide(1.8802599072446818E-125);
      Complex complex11 = complex7.subtract((-188.729781896));
      Complex complex12 = complex4.divide(1.8802599072446818E-125);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.NaN.pow((-1705.5101));
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex5.pow((-2245.0));
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.reciprocal();
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.createComplex(2646.910535, 2646.910535);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex4.subtract(2646.910535);
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.ONE;
      boolean boolean0 = complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(324.219337865);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.log();
      double double0 = complex0.I.getArgument();
      List<Complex> list0 = complex1.INF.nthRoot(1041);
      Complex complex3 = complex0.NaN.subtract(0.0);
      Complex complex4 = complex0.ONE.multiply(complex1);
      Complex complex5 = complex0.divide(Double.NaN);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.INF.sqrt();
      Object object0 = complex6.INF.readResolve();
      Complex complex9 = complex0.add(0.0);
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex1.divide(complex2);
      Complex complex12 = complex11.ONE.sqrt();
      Complex complex13 = complex12.ZERO.multiply((-3407));
      Complex complex14 = complex12.sin();
      Complex complex15 = complex4.divide(0.0);
      Complex complex16 = complex4.subtract((-150.696409));
      Complex complex17 = complex15.sin();
      Complex complex18 = complex17.ONE.add(0.0);
      Complex complex19 = complex3.add((-150.696409));
      Complex complex20 = complex3.subtract(complex11);
      List<Complex> list1 = complex10.nthRoot(3189);
      int int0 = complex5.hashCode();
      Complex complex21 = complex10.sqrt();
      String string0 = complex12.toString();
      Complex complex22 = complex9.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.INF.createComplex((-1797.0), (-1797.0));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex3.pow(20.0);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.conjugate();
      double double0 = complex1.abs();
      Complex complex8 = complex7.tanh();
      String string0 = complex6.NaN.toString();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.pow(complex1);
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex9.asin();
      Complex complex14 = complex13.sinh();
      Complex complex15 = complex5.divide(complex6);
      Complex complex16 = complex6.I.asin();
      List<Complex> list0 = complex15.nthRoot(2531);
      Complex complex17 = complex3.sin();
      Complex complex18 = complex17.INF.divide(complex1);
      Complex complex19 = complex3.ZERO.tan();
      int int0 = complex8.hashCode();
      Complex complex20 = complex1.createComplex(1662.586831144, 5053.22824532951);
      ComplexField complexField0 = complex15.getField();
      boolean boolean1 = complex9.equals(complex1);
      Complex complex21 = complex15.multiply(complex6);
      Complex complex22 = complex18.conjugate();
      Complex complex23 = complex12.exp();
      Complex complex24 = complex21.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex1.I.createComplex(0.567397952079773, 20.0);
      Complex complex5 = complex4.NaN.asin();
      int int0 = (-4876);
      try { 
        complex2.ONE.nthRoot((-4876));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,876
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.374152583940637E-239);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.add(3.4429618182751655E-8);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.I.divide((-2081.2));
      Complex complex2 = complex0.negate();
      String string0 = complex1.ONE.toString();
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex1.INF.divide((-2081.2));
      Complex complex4 = complex2.ONE.subtract((-2081.2));
      String string1 = complex4.ONE.toString();
      Complex complex5 = complex2.ZERO.multiply(complex1);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex0.createComplex(2083.766717880959, 0.0);
      Complex complex10 = complex2.multiply(complex0);
      Complex complex11 = complex7.reciprocal();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.ONE.tan();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex0.multiply(complex6);
      Complex complex9 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      double double0 = complex1.ONE.getArgument();
      double double1 = 0.0;
      Complex complex2 = complex1.I.pow(0.0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.ONE.cos();
      double double2 = 0.0;
      Complex complex8 = complex7.NaN.add(0.0);
      Complex complex9 = complex0.multiply(complex3);
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex4.I.negate();
      try { 
        complex11.NaN.nthRoot((-1923));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,923
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-189.549), (-189.549));
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex1.asin();
      String string0 = complex5.I.toString();
      double double0 = complex1.I.abs();
      Object object1 = complex1.I.readResolve();
      int int0 = complex1.I.hashCode();
      Complex complex6 = complex1.NaN.sqrt1z();
      Complex complex7 = complex0.subtract((-20.0));
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex7.ONE.negate();
      List<Complex> list0 = complex8.ONE.nthRoot(788);
      Complex complex10 = complex1.asin();
      Object object2 = new Object();
      boolean boolean0 = complex7.equals(object2);
      Complex complex11 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = Complex.valueOf(815.3295);
      Complex complex8 = complex6.INF.negate();
      Complex complex9 = complex8.I.conjugate();
      Complex complex10 = Complex.valueOf(0.0, 4216.98982);
      Complex complex11 = complex10.INF.divide(0.0);
      Complex complex12 = complex3.multiply((-1904.50202578));
      Complex complex13 = complex12.ONE.negate();
      Complex complex14 = complex12.ZERO.divide(1.5173907279968262);
      Complex complex15 = complex0.atan();
      Complex complex16 = complex9.ONE.add(0.0);
      double double1 = complex9.NaN.getArgument();
      Complex complex17 = complex2.subtract(complex12);
      Complex complex18 = complex9.pow(complex17);
      ComplexField complexField0 = complex9.getField();
      Complex complex19 = complex17.I.sqrt1z();
      Complex complex20 = complex6.add(0.0);
      Complex complex21 = complex2.conjugate();
      double double2 = complex18.getReal();
      Complex complex22 = complex21.pow(5215.74976345);
      Complex complex23 = Complex.valueOf(3121.3720042329237, (-3268.231));
  }
}
