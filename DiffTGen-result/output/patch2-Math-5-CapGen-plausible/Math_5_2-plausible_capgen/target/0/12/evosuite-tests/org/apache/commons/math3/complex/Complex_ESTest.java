/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:23:56 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = new Complex(Double.NaN, (-413.1060861849));
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.INF.multiply(Double.NaN);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ZERO.add(complex0);
      Complex complex6 = complex5.I.multiply(0.0);
      Complex complex7 = complex1.I.multiply(complex5);
      Complex complex8 = complex3.I.multiply((-1431));
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex5.ZERO.pow(0.0);
      Complex complex11 = complex4.subtract(complex0);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex4.tanh();
      double double0 = complex15.ZERO.getArgument();
      Complex complex16 = complex4.pow(88.38);
      ComplexField complexField1 = complex4.getField();
      Complex complex17 = complex16.sin();
      double double1 = complex11.getImaginary();
      Complex complex18 = complex9.multiply(621);
      Complex complex19 = complex18.INF.multiply((-1431));
      double double2 = complex13.getReal();
      Complex complex20 = complex13.add(complex16);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2751.42, (-1578.429956221959));
      Complex complex1 = complex0.I.multiply((-572));
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ONE.add(complex0);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.NaN.divide(complex1);
      Complex complex6 = complex3.ONE.add((-1578.429956221959));
      int int0 = complex5.ZERO.hashCode();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex3.I.reciprocal();
      Complex complex11 = complex8.NaN.tan();
      String string0 = complex8.toString();
      Complex complex12 = complex8.tan();
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = Complex.valueOf(0.0, (double) (-572));
      Complex complex15 = complex13.INF.pow(complex14);
      Complex complex16 = complex15.NaN.subtract(complex0);
      Complex complex17 = complex2.tan();
      Complex complex18 = complex17.conjugate();
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex19 = complex12.negate();
      ComplexField complexField1 = complex5.getField();
      Complex complex20 = Complex.valueOf(201.143267, 860.52262479);
      Complex complex21 = complex19.atan();
      Complex complex22 = complex2.multiply(1);
      Object object0 = new Object();
      boolean boolean0 = complex15.equals(object0);
      Complex complex23 = complex22.multiply((-2044));
      Complex complex24 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-954.058793448));
      String string0 = complex0.toString();
      Complex complex1 = complex0.NaN.cosh();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.sqrt1z();
      ComplexField complexField0 = complex4.I.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.INF.multiply((-2420));
      Complex complex9 = complex7.ONE.subtract(6.283185307179586);
      Complex complex10 = complex2.I.pow(0.0);
      boolean boolean1 = complex0.isNaN();
      Complex complex11 = complex5.atan();
      Complex complex12 = complex0.multiply(1163);
      double double0 = complex11.getArgument();
      Complex complex13 = complex7.atan();
      Complex complex14 = complex13.I.multiply(1163);
      Complex complex15 = complex3.sqrt();
      Complex complex16 = complex13.cosh();
      boolean boolean2 = complex11.isNaN();
      Complex complex17 = complex8.add(complex11);
      Complex complex18 = complex5.sqrt1z();
      List<Complex> list0 = complex11.nthRoot(1);
      Complex complex19 = complex4.divide(complex15);
      Complex complex20 = complex0.subtract((-1884.83709515238));
      Complex complex21 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(0, Double.NaN);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.I.subtract(complex3);
      boolean boolean0 = complex1.INF.equals(complex2);
      ComplexField complexField0 = complex1.getField();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.8377876767612725E-8);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.tanh();
      String string0 = complex0.INF.toString();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex0.NaN.asin();
      Complex complex8 = complex0.INF.pow(complex6);
      double double0 = complex6.NaN.getArgument();
      Complex complex9 = complex3.pow(complex6);
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex10.createComplex((-1467.6), (-543.7892955265838));
      Complex complex12 = Complex.valueOf(1745.80899501722, (-3297.5002018));
      Complex complex13 = complex1.conjugate();
      List<Complex> list0 = complex1.nthRoot(1474);
      Complex complex14 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5876781940460205, 0.5876781940460205);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex4.ONE.multiply(1);
      Complex complex6 = Complex.valueOf(0.0, (-28.989231712));
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex6.ONE.reciprocal();
      List<Complex> list0 = complex6.nthRoot(165);
      Complex complex8 = complex0.NaN.tan();
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex9.NaN.cos();
      Complex complex11 = Complex.valueOf((-1358.057), 0.0);
      Complex complex12 = complex9.subtract(0.0);
      Complex complex13 = complex12.NaN.sin();
      Complex complex14 = complex7.conjugate();
      Complex complex15 = Complex.valueOf((-28.989231712), (-1025.93022267));
      double double0 = complex0.abs();
      Complex complex16 = complex14.asin();
      Complex complex17 = complex0.add(0.0);
      Complex complex18 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      int int0 = (-109);
      Complex complex2 = complex0.multiply((-109));
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex2.ZERO.sqrt1z();
      try { 
        complex3.ONE.nthRoot((-109));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -109
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.pow(1.4310184489676175E-201);
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.sin();
      int int0 = complex2.NaN.hashCode();
      int int1 = 2938;
      List<Complex> list0 = complex2.ONE.nthRoot(2938);
      int int2 = complex0.hashCode();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex6.ONE.subtract((-2112.22));
      Complex complex8 = complex0.INF.sin();
      Complex complex9 = complex8.ONE.asin();
      double double1 = (-1410.3691194756252);
      Complex complex10 = complex4.add((-1410.3691194756252));
      Complex complex11 = complex6.I.sinh();
      // Undeclared exception!
      complex10.ZERO.nthRoot(2938);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.439791652732591E81, (double) 471);
      Complex complex2 = complex0.NaN.multiply(471);
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.valueOf(4.439791652732591E81, 3.0680417869552433E146);
      Complex complex7 = complex4.pow(complex1);
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2300.5338873748);
      Complex complex1 = complex0.add((-1623.588774699192));
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.createComplex(2300.5338873748, 2300.5338873748);
      Complex complex4 = complex3.cosh();
      int int0 = complex4.hashCode();
      Complex complex5 = complex4.createComplex(1436, (-1623.588774699192));
      Complex complex6 = complex5.ZERO.createComplex(0.0, 1436);
      Complex complex7 = complex3.multiply(1436);
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex4.sqrt1z();
      double double0 = complex9.abs();
      Complex complex10 = complex4.pow(complex1);
      double double1 = complex10.I.abs();
      boolean boolean1 = complex7.equals(complex2);
      Complex complex11 = complex2.cos();
      Complex complex12 = Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1904.7), (-1904.7));
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex1.ONE.divide(17.7953330434999);
      Complex complex5 = complex4.multiply((-218.513177008117));
      Complex complex6 = complex4.NaN.sinh();
      double double0 = complex4.INF.getArgument();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.ZERO.asin();
      double double1 = complex1.I.getArgument();
      Complex complex9 = complex0.pow(complex7);
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex1.divide(complex9);
      Complex complex13 = complex8.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.pow((-4251.16509742));
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex1.ZERO.divide(Double.NaN);
      Complex complex4 = complex1.INF.subtract(complex2);
      boolean boolean0 = complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1483.8212907942766), (-20.0));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      double double0 = complex2.INF.abs();
      Complex complex3 = complex2.ZERO.cos();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.createComplex(Double.POSITIVE_INFINITY, 3376.4722493);
      Complex complex6 = complex4.NaN.add(Double.POSITIVE_INFINITY);
      double double2 = complex0.getReal();
      double double3 = complex1.getArgument();
      Complex complex7 = Complex.valueOf((-1483.8212907942766), Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex7.INF.nthRoot(1);
      Complex complex8 = complex7.log();
      Complex complex9 = complex2.tan();
      Object object0 = complex9.readResolve();
      Complex complex10 = complex1.I.divide(complex5);
      Complex complex11 = complex1.ZERO.cosh();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex2.negate();
      double double4 = complex13.abs();
      Complex complex14 = complex3.acos();
      Complex complex15 = complex4.log();
      Complex complex16 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1771.0, 1771.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.pow(1771.0);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex4.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.multiply(complex2);
      String string0 = complex4.toString();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.ONE.add((double) 0);
      Complex complex7 = complex3.conjugate();
      double double0 = complex3.INF.getArgument();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex8.createComplex(226.82685, 2542.1674211);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex0.INF.multiply((-499));
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex2.ZERO.reciprocal();
      Complex complex6 = complex5.ONE.tan();
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex5.INF.readResolve();
      Complex complex7 = complex0.multiply((-806.1587848423554));
      double double0 = complex4.ZERO.abs();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.createComplex(Double.NaN, Double.NaN);
      Complex complex10 = complex7.ONE.atan();
      Complex complex11 = complex4.multiply((-499));
      Complex complex12 = complex8.atan();
      Complex complex13 = complex9.negate();
      Complex complex14 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.multiply((-4115.0));
      Complex complex4 = complex3.ZERO.tanh();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.INF.multiply(1);
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex6.INF.negate();
      Complex complex9 = complex0.ONE.multiply(complex8);
      boolean boolean0 = complex5.isInfinite();
      Complex complex10 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(678.6305983644);
      Complex complex1 = complex0.ZERO.pow(678.6305983644);
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex1.abs();
      double double1 = complex1.NaN.abs();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex2 = complex0.atan();
      double double2 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.tanh();
      List<Complex> list1 = complex2.I.nthRoot(1);
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex3.divide(1380.979107854);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.pow(complex2);
      boolean boolean0 = complex5.isNaN();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-5642.176937002477);
      Complex complex0 = new Complex((-5642.176937002477), (-5642.176937002477));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex2.ZERO.add(complex1);
      double double1 = 1.281519889831543;
      Complex complex4 = Complex.valueOf(1.281519889831543);
      int int0 = 0;
      try { 
        complex4.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-675.70846569));
      Complex complex2 = complex0.add((-12.772070864));
      Complex complex3 = complex0.negate();
      try { 
        complex3.nthRoot((-1716));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,716
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2097.7, 2097.7);
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.atan();
      double double0 = complex3.NaN.getArgument();
      Object object1 = complex1.readResolve();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex5.INF.add(Double.NaN);
      Complex complex8 = complex2.multiply((-44));
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      try { 
        complex0.I.nthRoot((-3137));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,137
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.add(2227.695812061486);
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.cos();
      Object object0 = complex5.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex7 = complex5.createComplex(0.0, 0.0);
      Complex complex8 = complex6.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.subtract(0.0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.log();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex1.sqrt();
      int int1 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(76.88072);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.multiply(1013);
      Complex complex4 = complex3.multiply((-2812.77850491884));
      Complex complex5 = complex1.pow((double) 1013);
      Complex complex6 = complex3.createComplex(76.88072, 76.88072);
      double double0 = complex6.ONE.abs();
      Complex complex7 = Complex.valueOf(0.0, (-4810.5521));
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex5.acos();
      Complex complex11 = complex9.I.sqrt();
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex9.add(76.88072);
      Complex complex13 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf((-1607.623483545406), 0.0);
      String string0 = complex3.toString();
      Complex complex4 = complex2.createComplex(1977.884109782709, 488.307321451);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.subtract(complex2);
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex7 = complex5.multiply(1658.6939141750213);
      String string1 = complex7.toString();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex7.NaN.sqrt1z();
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex3.pow(complex4);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex7.ONE.subtract(complex12);
      Complex complex14 = Complex.valueOf(1658.6939141750213, 0.5191890001296997);
      Complex complex15 = complex6.subtract(complex7);
      Complex complex16 = complex4.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex17 = complex12.asin();
      Complex complex18 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-3915.6364);
      Complex complex0 = Complex.valueOf((-3915.6364), (-3915.6364));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.NaN.subtract((-2657.1));
      Complex complex4 = complex1.I.divide(complex0);
      double double1 = complex4.NaN.getArgument();
      Complex complex5 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex5);
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1583.389675, 1851.3822818367582);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex0.ONE.divide(complex2);
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex4.ONE.exp();
      Complex complex10 = complex7.INF.pow((-319.875796504099));
      Complex complex11 = complex0.add(complex1);
      Complex complex12 = complex1.tan();
      boolean boolean0 = complex4.isNaN();
      Complex complex13 = complex7.INF.multiply(complex11);
      Complex complex14 = complex10.multiply(0.5707147121429443);
      Complex complex15 = complex10.asin();
      Complex complex16 = complex4.pow(complex15);
      Complex complex17 = complex10.multiply(complex1);
      Complex complex18 = complex14.tanh();
      Complex complex19 = complex7.add(complex10);
      double double0 = complex0.getArgument();
      Complex complex20 = complex10.atan();
      Complex complex21 = complex20.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.I.tan();
      List<Complex> list0 = complex0.ONE.nthRoot(3754);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.negate();
      int int1 = complex4.hashCode();
      Complex complex5 = complex4.multiply(3754);
      double double0 = complex2.abs();
      Complex complex6 = complex3.log();
      Complex complex7 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1184.0), (-1184.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.exp();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex0.INF.multiply(436.93816);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex0.reciprocal();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex4.multiply((-1.900947109027913E-7));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.pow((-1088.8924));
      Complex complex4 = complex1.ONE.multiply(complex0);
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex4.I.add(complex0);
      Complex complex6 = complex0.divide(437.94456);
      Complex complex7 = complex0.I.sinh();
      Complex complex8 = complex7.ONE.divide(1.5707963267948966);
      String string0 = complex6.INF.toString();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex1.I.asin();
      Complex complex11 = complex4.divide(0.0);
      Complex complex12 = complex11.I.cosh();
      Complex complex13 = complex12.I.conjugate();
      Object object0 = complex9.ZERO.readResolve();
      double double1 = complex9.ZERO.getArgument();
      String string1 = complex6.toString();
      int int0 = complex9.hashCode();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.I.add((-1867.224018741));
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.conjugate();
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex4.pow((-1293.1627097874243));
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = complex5.multiply((-3901.0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.createComplex((-4.0873400635183405E225), 0.0);
      boolean boolean0 = complex3.INF.equals(complex0);
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-1541.8), (-1541.8));
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.ONE.add((-1541.8));
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex0.acos();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex6.ZERO.multiply(complex2);
      boolean boolean0 = complex6.equals(object0);
      Complex complex8 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2139.81928294);
      Complex complex1 = Complex.valueOf(20.0);
      Object object0 = complex0.ZERO.readResolve();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.NaN.subtract(complex1);
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.NaN.exp();
      Complex complex6 = complex0.INF.sqrt1z();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = Complex.valueOf((-4.332335454045836E52), (-4.332335454045836E52));
      Complex complex9 = complex8.pow((-472.2496914));
      Complex complex10 = complex9.NaN.sin();
      double double0 = complex5.INF.getArgument();
      double double1 = complex0.getArgument();
      Complex complex11 = complex0.divide(Double.NaN);
      Complex complex12 = complex11.createComplex(0.7853981633974483, 4077.418446808286);
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex4.multiply((-2320.599));
      Complex complex15 = complex14.add((-472.2496914));
      Complex complex16 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(916.3770297, 3.076063086193525E-48);
      Complex complex1 = complex0.subtract(3.076063086193525E-48);
      Complex complex2 = complex1.I.asin();
      Object object0 = complex0.readResolve();
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.valueOf((-1937.0), 916.3770297);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-41.9902), (-2.724174869314043E-8));
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.pow((-41.9902));
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex3.I.asin();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex5.INF.acos();
      double double0 = complex3.getImaginary();
      Complex complex10 = complex1.tanh();
      double double1 = complex4.getArgument();
      double double2 = complex10.abs();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex2.add(complex11);
      double double3 = complex12.getArgument();
      Complex complex13 = complex11.pow(complex10);
      Complex complex14 = complex12.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ONE.multiply(5.575759739697068E-8);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.INF.log();
      Complex complex6 = complex2.ZERO.cos();
      Complex complex7 = complex0.log();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex2.multiply(7);
      Complex complex10 = complex2.ONE.tan();
      Complex complex11 = Complex.valueOf((-933.4478));
      Complex complex12 = complex7.subtract(complex4);
      ComplexField complexField0 = complex7.getField();
      String string0 = complex0.toString();
      Complex complex13 = complex9.I.pow(complex11);
      Complex complex14 = complex9.atan();
      Complex complex15 = Complex.valueOf(0.0);
      boolean boolean0 = complex9.isInfinite();
      Complex complex16 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.negate();
      double double0 = complex2.getImaginary();
      Complex complex4 = complex3.pow(-0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.multiply(2034);
      Complex complex5 = complex0.add(complex4);
      double double0 = complex3.getReal();
      Complex complex6 = complex3.ZERO.pow(complex1);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.NaN.add((-1041.631));
      Complex complex9 = complex4.ONE.conjugate();
      Complex complex10 = Complex.valueOf((double) 2034, 0.0);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.atan();
      Complex complex13 = complex0.add(complex11);
      Complex complex14 = complex13.sqrt();
      double double1 = complex3.getArgument();
      Complex complex15 = complex2.multiply(2034);
      Complex complex16 = complex8.multiply(complex3);
      Complex complex17 = complex1.reciprocal();
      Complex complex18 = complex13.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(882.530175, 882.530175);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex2.ZERO.negate();
      List<Complex> list0 = complex4.nthRoot(907);
      Complex complex7 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1146.1));
      Complex complex1 = new Complex((-1146.1));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.NaN.add((-1146.1));
      Complex complex5 = complex3.ONE.pow((-233.0037597869449));
      Complex complex6 = Complex.valueOf((-1146.1), (-1085.76058549));
      ComplexField complexField0 = complex4.I.getField();
      double double0 = complex0.getReal();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-103.88));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.pow((-924.0));
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.atan();
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex0.sin();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-1.1753008498403413E-7));
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(3129.6116279124776, 780.1838381886996);
      Complex complex4 = complex1.subtract(1821.11983286303);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.I.cosh();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex4.INF.pow(complex2);
      Complex complex9 = Complex.valueOf(1.0, (-1.0));
      Complex complex10 = complex3.INF.multiply((-1316));
      Complex complex11 = complex1.add(5.5996586041611455E262);
      boolean boolean0 = complex3.equals(complex2);
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 614.4812084377629);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.divide(22.29849824);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex2.ZERO.add(0.0);
      Complex complex7 = complex4.tan();
      Complex complex8 = Complex.valueOf((-1097.03352462));
      Complex complex9 = complex3.createComplex(614.4812084377629, 160.24735);
      Complex complex10 = complex4.multiply(complex1);
      Complex complex11 = complex1.sin();
      Complex complex12 = complex11.subtract(complex10);
      boolean boolean0 = complex12.I.equals(complex10);
      boolean boolean1 = complex0.equals(complex11);
      Complex complex13 = complex7.tanh();
      ComplexField complexField1 = complex8.getField();
      boolean boolean2 = complex7.isNaN();
      Complex complex14 = complex9.add(complex12);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex2.INF.multiply(1);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = complex5.createComplex((-2350.39805493), 0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.pow((-1.0));
      double double0 = complex1.getArgument();
      Complex complex2 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.sqrt();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.tanh();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(1);
      Complex complex2 = complex1.NaN.cos();
      try { 
        complex0.I.nthRoot((-2418));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,418
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-464.28));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.NaN.pow(complex5);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex0.asin();
      try { 
        complex2.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.I.cosh();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex1.ONE.multiply(1044);
      Complex complex5 = complex0.I.cos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.multiply(complex4);
      Complex complex8 = complex1.NaN.negate();
      Complex complex9 = complex8.subtract(complex6);
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex1.ONE.sin();
      Complex complex12 = complex10.ZERO.acos();
      Complex complex13 = complex6.reciprocal();
      Complex complex14 = complex12.cosh();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = complex10.add(complex2);
      String string0 = complex10.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = new Complex(0.0, (-2812.2));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.I.cosh();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.asin();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.asin();
      double double0 = complex0.getArgument();
      double double1 = complex0.getArgument();
      int int0 = complex0.hashCode();
      double double2 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(403.3880904);
      double double0 = complex0.abs();
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex0.multiply(complex1);
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(794.648763, 804.9376);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(794.648763, 794.648763);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex2.NaN.add(complex3);
      Complex complex5 = complex3.I.divide((-1229.3));
      Complex complex6 = complex1.ONE.multiply(0.0);
      Complex complex7 = complex3.ZERO.sqrt();
      Complex complex8 = complex7.ONE.tan();
      double double0 = complex7.ZERO.getArgument();
      Complex complex9 = complex3.ONE.negate();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.I.atan();
      Complex complex12 = complex8.ONE.divide(3.645999732952202E-9);
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex10.ZERO.divide(complex12);
      Complex complex15 = complex13.NaN.conjugate();
      String string0 = complex15.INF.toString();
      String string1 = complex2.toString();
      Complex complex16 = complex7.divide(complex8);
      Complex complex17 = complex12.log();
      Complex complex18 = complex10.reciprocal();
      Complex complex19 = complex1.divide(0.0);
      Complex complex20 = complex19.NaN.multiply(complex16);
      Complex complex21 = complex5.createComplex(2106.9223241239, 0.0);
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = 624.119503866307;
      Complex complex0 = new Complex(624.119503866307);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.ONE.cos();
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2020.14603, 2020.14603);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = Complex.valueOf(2020.14603, Double.NaN);
      Complex complex4 = complex1.NaN.sqrt();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.INF.acos();
      Complex complex7 = complex1.ZERO.subtract(complex0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex4.subtract(complex1);
      ComplexField complexField0 = complex8.getField();
      double double1 = complex3.abs();
      Complex complex9 = complex8.NaN.exp();
      boolean boolean1 = complex0.isNaN();
      double double2 = complex8.abs();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex9.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.I.cosh();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex1.createComplex(Double.NaN, 0.0);
      boolean boolean0 = complex1.NaN.equals(complex0);
      Complex complex3 = complex1.I.subtract(Double.NaN);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex0.reciprocal();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.68), (-167.68));
      Complex complex1 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-59.44002));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.NaN.divide(1.0);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.negate();
      Object object1 = complex5.readResolve();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(650.5348253314);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-2422.43527402), (-116.4482099542));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex2.NaN.nthRoot(997);
      double double0 = complex1.getImaginary();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.add((-116.4482099542));
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.reciprocal();
      double double1 = complex0.getImaginary();
      double double2 = complex4.getReal();
      Complex complex7 = complex2.subtract((-1098.7548));
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.reciprocal();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.multiply(2210.5432);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      double double0 = complex0.ZERO.getArgument();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.tanh();
      double double1 = complex5.INF.abs();
      Complex complex7 = complex5.sqrt1z();
      int int0 = complex7.hashCode();
      Complex complex8 = complex3.multiply(0.0);
      Complex complex9 = complex8.NaN.add(2.2403693199157715);
      Complex complex10 = complex6.add((-1490.317044269));
      Complex complex11 = complex6.subtract(1236.55989543166);
      Complex complex12 = complex6.atan();
      Complex complex13 = Complex.valueOf(2.2403693199157715, 0.0);
      Complex complex14 = complex13.NaN.cos();
      Complex complex15 = complex13.ONE.divide((-1490.317044269));
      Complex complex16 = complex10.add(complex13);
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = complex12.tan();
      Complex complex18 = complex2.tan();
      double double2 = complex7.getImaginary();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(655.242457436);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.sin();
      boolean boolean0 = complex2.ZERO.equals(complex0);
      Complex complex3 = complex1.ZERO.conjugate();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.pow(Double.NaN);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex5.NaN.subtract(Double.NaN);
      Complex complex8 = complex5.divide(complex1);
      Complex complex9 = complex5.ZERO.pow(complex7);
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = Complex.valueOf(0.0, (-164.163868683));
      Complex complex12 = Complex.valueOf((-164.163868683));
      boolean boolean1 = complex10.I.equals(complex11);
      Complex complex13 = complex3.INF.pow(1218.0);
      boolean boolean2 = complex6.isInfinite();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex10.reciprocal();
      boolean boolean3 = complex15.isNaN();
      Object object0 = complex14.readResolve();
      Complex complex16 = complex1.subtract(Double.NaN);
      boolean boolean4 = complex5.equals(complex10);
      double double0 = complex14.abs();
      Complex complex17 = complex1.pow(complex10);
      String string0 = complex15.toString();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(2254);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.ONE.cosh();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(3403.89132);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex3.NaN.tanh();
      Complex complex6 = complex0.sin();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex0.ZERO.divide(complex7);
      Complex complex9 = complex6.multiply(3403.89132);
      Complex complex10 = complex3.sinh();
      int int0 = complex3.I.hashCode();
      Complex complex11 = complex10.I.multiply(0.0);
      Complex complex12 = Complex.valueOf((-1.0));
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex13 = Complex.valueOf(0.0, (-3.303297758377758E-145));
      Complex complex14 = complex0.multiply(3675.03738808);
      Complex complex15 = complex14.NaN.negate();
      Complex complex16 = complex10.sqrt();
      Complex complex17 = complex10.reciprocal();
      Complex complex18 = complex15.subtract((-3.303297758377758E-145));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-991.54275070149));
      Complex complex1 = complex0.I.divide((-991.54275070149));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex1.I.reciprocal();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex1.sin();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex8.multiply(0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.ZERO.equals(object0);
      Complex complex2 = complex1.INF.acos();
      boolean boolean1 = complex1.INF.equals(complex0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex3 = complex0.createComplex(0.0, (-20.0));
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex6.add((-1.0));
      double double0 = complex0.abs();
      double double1 = complex6.getArgument();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex5.pow(complex0);
      try { 
        complex10.ONE.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(634.16767);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.divide(634.16767);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex0.INF.add(complex3);
      Complex complex6 = complex5.I.multiply(634.16767);
      Complex complex7 = complex0.ONE.atan();
      Complex complex8 = Complex.valueOf(1419.501872849);
      Complex complex9 = complex8.I.subtract(complex2);
      Complex complex10 = complex8.NaN.pow(1243.5295934928);
      int int0 = complex0.hashCode();
      Complex complex11 = complex0.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1954.95225));
      List<Complex> list0 = complex0.nthRoot(782);
      Complex complex1 = Complex.valueOf(4.153321337726989E-8, 4.153321337726989E-8);
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.NaN.subtract(complex1);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.divide(625.78016);
      Complex complex6 = complex4.INF.createComplex(1.0, 0.0);
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = new Complex((-1954.95225));
      Complex complex9 = complex4.NaN.subtract(complex8);
      Complex complex10 = complex7.add(complex5);
      boolean boolean0 = complex6.isInfinite();
      Complex complex11 = complex6.atan();
      Complex complex12 = Complex.valueOf(4.153321337726989E-8);
      Complex complex13 = complex12.INF.multiply((-1907.74687));
      Complex complex14 = complex1.ONE.add(complex12);
      boolean boolean1 = complex11.isNaN();
      double double0 = complex2.getReal();
      Complex complex15 = complex2.tan();
      Complex complex16 = Complex.valueOf(1979.8);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.divide((-705.6887508707416));
      Complex complex3 = Complex.valueOf(1.0, (-705.6887508707416));
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex0.ZERO.createComplex((-705.6887508707416), 0.0);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.sin();
      String string0 = complex7.ZERO.toString();
      Complex complex8 = complex7.NaN.multiply(1.0);
      Complex complex9 = complex7.negate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex10 = complex0.pow(1.0);
      Complex complex11 = complex6.INF.divide(complex10);
      Complex complex12 = complex9.tanh();
      Complex complex13 = complex6.cosh();
      Complex complex14 = Complex.valueOf((-705.6887508707416), 1.0);
      Complex complex15 = complex13.ZERO.pow(complex14);
      Complex complex16 = complex2.sinh();
      Complex complex17 = complex13.INF.log();
      Complex complex18 = Complex.valueOf(4.878798101459259E-8, 0.0);
      Complex complex19 = complex12.exp();
      Complex complex20 = complex13.ONE.sinh();
      Complex complex21 = complex20.INF.add(0.0);
      try { 
        complex19.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex3.abs();
      Complex complex4 = complex0.tan();
  }
}
