/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:23:54 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2.268889128622553E-8));
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex2.ZERO.subtract(0.0);
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.INF.divide(complex0);
      Complex complex8 = complex7.ZERO.multiply((-2.268889128622553E-8));
      int int0 = complex1.INF.hashCode();
      Complex complex9 = complex6.NaN.tan();
      ComplexField complexField0 = complex9.I.getField();
      Complex complex10 = complex4.log();
      Complex complex11 = complex9.I.sinh();
      Complex complex12 = complex11.I.subtract(1.0);
      Complex complex13 = complex1.cos();
      Complex complex14 = complex13.INF.divide(1.1933437776279623E-7);
      Object object0 = complex4.readResolve();
      Complex complex15 = complex9.sinh();
      Complex complex16 = complex2.add(0.0);
      Complex complex17 = Complex.valueOf(0.0, (-1.145810806477298E-8));
      Complex complex18 = complex16.sqrt();
      double double0 = complex16.getReal();
      Complex complex19 = complex12.tanh();
      boolean boolean0 = complex1.isNaN();
      Complex complex20 = complex0.asin();
      Complex complex21 = complex0.pow(complex14);
      Complex complex22 = new Complex((-2.268889128622553E-8), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.471526002431, 8.227620163729258E-235);
      Complex complex1 = new Complex(2413.471526002431, 2413.471526002431);
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex1.pow(complex0);
      String string0 = complex0.INF.toString();
      Complex complex4 = complex0.createComplex(2413.471526002431, 0.0);
      Complex complex5 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex0.ONE.equals(complex1);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.subtract(0.0);
      boolean boolean1 = complex1.I.equals(complex2);
      Complex complex7 = complex2.INF.atan();
      Complex complex8 = complex3.pow(complex1);
      Complex complex9 = complex2.conjugate();
      double double0 = complex7.I.abs();
      int int0 = complex8.hashCode();
      Complex complex10 = complex7.sqrt1z();
      boolean boolean2 = complex6.isInfinite();
      List<Complex> list0 = complex2.nthRoot(195);
      Complex complex11 = complex10.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.NaN.sqrt1z();
      double double1 = complex3.getImaginary();
      Complex complex13 = complex3.subtract(0.0);
      Complex complex14 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex15 = complex14.reciprocal();
      double double2 = complex10.getReal();
      Complex complex16 = complex2.acos();
      Complex complex17 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex18 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(2348.232247332291, 2348.232247332291);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.NaN.cos();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex1.add(2348.232247332291);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex4.add(0.6228630542755127);
      boolean boolean0 = complex4.NaN.equals(complexField0);
      double double0 = complex10.INF.abs();
      Complex complex11 = complex4.sqrt1z();
      Object object0 = complex1.NaN.readResolve();
      Complex complex12 = complex11.subtract(2348.232247332291);
      Complex complex13 = complex2.pow(complex11);
      Object object1 = complex2.ZERO.readResolve();
      Complex complex14 = complex13.ONE.asin();
      double double1 = complex14.INF.getArgument();
      Complex complex15 = complex4.negate();
      Complex complex16 = complex3.sin();
      Complex complex17 = complex3.multiply(complex16);
      double double2 = complex14.getImaginary();
      Complex complex18 = complex12.cosh();
      boolean boolean1 = complex13.isNaN();
      Complex complex19 = complex18.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.divide(Double.NaN);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex1.subtract(complex0);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex0.NaN.add((-625.8870762791));
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex5.I.subtract(0.0);
      Complex complex7 = complex1.conjugate();
      boolean boolean0 = complex6.isInfinite();
      double double0 = complex3.I.getArgument();
      Complex complex8 = complex2.pow(complex3);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.I.divide(complex6);
      double double1 = complex8.getArgument();
      Complex complex11 = complex0.add(complex6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1523.348314827222), 1383.3440759038906);
      int int0 = complex0.ONE.hashCode();
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.I.subtract(1383.3440759038906);
      Complex complex2 = complex0.ZERO.multiply((-1523.348314827222));
      Complex complex3 = complex2.ZERO.pow(complex1);
      double double0 = complex2.I.abs();
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = Complex.ONE;
      int int0 = complex0.ONE.hashCode();
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.subtract(complex0);
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex7.I.pow(complex5);
      Complex complex10 = complex4.pow((-4596.2805228561665));
      Complex complex11 = Complex.valueOf((-4596.2805228561665));
      boolean boolean0 = complex9.isNaN();
      boolean boolean1 = complex1.isInfinite();
      Complex complex12 = complex4.divide(0.0);
      double double1 = complex2.abs();
      Complex complex13 = complex11.divide(1.0);
      Complex complex14 = Complex.valueOf(1934.5341948144182, 1576.019338175);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.NaN.sqrt();
      double double0 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex4 = Complex.valueOf(2232.868772255829, 2232.868772255829);
      Complex complex5 = complex4.INF.add(0.0);
      double double1 = complex4.ONE.abs();
      boolean boolean0 = complex4.ZERO.equals(complex5);
      Complex complex6 = complex5.multiply(complex2);
      boolean boolean1 = complex1.isNaN();
      Complex complex7 = complex4.pow(2232.868772255829);
      Complex complex8 = complex7.ZERO.add(1.0);
      Complex complex9 = complex8.INF.cosh();
      double double2 = complex3.abs();
      Complex complex10 = complex8.log();
      Complex complex11 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.valueOf((-3380.0542439135725), 2.0);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex3.ONE.multiply((-2046));
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.subtract(complex0);
      Complex complex8 = complex2.multiply(1);
      Complex complex9 = complex6.divide(complex3);
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex6.tanh();
      Object object0 = complex4.readResolve();
      Complex complex12 = complex11.divide(complex1);
      ComplexField complexField1 = complex5.getField();
      Complex complex13 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = Complex.valueOf(1518.05215, 0.0);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex1.ONE.pow(0.0);
      Complex complex6 = complex0.ONE.conjugate();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex7.ONE.sinh();
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex0.tan();
      double double0 = complex4.getReal();
      Complex complex5 = complex1.INF.divide(complex3);
      Complex complex6 = complex4.INF.sqrt();
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = Complex.valueOf(394.92, Double.NaN);
      Complex complex11 = complex1.NaN.add(complex10);
      Complex complex12 = complex4.multiply((-299.506174668));
      Complex complex13 = complex12.NaN.pow(complex6);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex14 = complex12.asin();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.divide(1595.1893465954918);
      Complex complex3 = complex2.ZERO.divide(Double.NaN);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.I.tanh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex3.add(Double.NaN);
      boolean boolean0 = complex6.isInfinite();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex2.sinh();
      ComplexField complexField0 = complex9.INF.getField();
      Complex complex10 = complex9.ONE.reciprocal();
      Complex complex11 = complex3.multiply(0.0);
      Complex complex12 = complex10.ONE.subtract(complex4);
      Complex complex13 = Complex.valueOf(1595.1893465954918, 1174.519012085);
      Complex complex14 = complex5.I.cosh();
      Complex complex15 = complex14.ZERO.sinh();
      Complex complex16 = Complex.valueOf(1595.1893465954918);
      try { 
        complex5.nthRoot((-1559));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,559
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 91.49787842233815);
      Complex complex1 = Complex.valueOf(91.49787842233815);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.I.log();
      double double0 = complex3.getImaginary();
      Complex complex5 = complex4.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.exp();
      double double1 = complex2.NaN.abs();
      Complex complex7 = complex6.INF.reciprocal();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = complex8.INF.readResolve();
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex9.multiply(complex6);
      double double2 = complex0.getArgument();
      Complex complex11 = new Complex((-2482.51572740393), 0.0);
      Complex complex12 = complex0.NaN.subtract(complex11);
      Complex complex13 = complex0.multiply(complex8);
      Complex complex14 = complex1.asin();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex10.cosh();
      Complex complex17 = complex10.exp();
      Complex complex18 = complex3.sqrt1z();
      Complex complex19 = complex11.subtract(complex17);
      double double3 = complex10.INF.getArgument();
      double double4 = complex10.getArgument();
      Object object1 = new Object();
      boolean boolean0 = complex10.equals(object1);
      Complex complex20 = complex2.tan();
      boolean boolean1 = complex19.isNaN();
      Complex complex21 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3012.3463755516);
      Complex complex1 = complex0.multiply((-1717));
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1841.0));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.I.multiply(complex1);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex2.ONE.createComplex((-1841.0), (-1841.0));
      Complex complex4 = complex2.ONE.conjugate();
      try { 
        complex2.ONE.nthRoot((-626));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -626
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      boolean boolean0 = complex1.I.equals(",&mA{7");
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.divide((-36.2267398250946));
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex2.INF.tanh();
      Complex complex8 = complex6.NaN.pow((-3083.30686));
      String string0 = complex3.toString();
      List<Complex> list0 = complex2.ONE.nthRoot(1428);
      Complex complex9 = complex4.pow(199.3041971412116);
      Complex complex10 = complex1.divide(complex6);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex3.ZERO.add((-1460.520071722));
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex7.ZERO.subtract((-1460.520071722));
      Object object0 = complex4.NaN.readResolve();
      Complex complex9 = complex0.ONE.sqrt();
      Complex complex10 = complex9.ZERO.multiply((-1460.520071722));
      double double0 = complex3.getArgument();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex11.NaN.acos();
      double double1 = complex10.abs();
      Complex complex13 = complex1.sqrt1z();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex4.getReal();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex6.NaN.divide(complex1);
      Complex complex8 = complex5.createComplex((-3141.728815249612), 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-1603));
      Complex complex2 = complex1.ZERO.acos();
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.INF.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.subtract(complex1);
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-1603));
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.INF.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.subtract(complex1);
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-443.826767));
      String string0 = complex0.toString();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-404.518), (-404.518));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex1.divide(complex0);
      String string0 = complex1.ONE.toString();
      Complex complex6 = complex0.createComplex((-404.518), (-404.518));
      int int0 = 4272;
      List<Complex> list0 = complex0.nthRoot(4272);
      Complex complex7 = complex6.subtract((-404.518));
      Complex complex8 = complex6.NaN.createComplex((-404.518), (-2062.2));
      Complex complex9 = complex8.ONE.subtract((double) 4272);
      Complex complex10 = complex9.NaN.pow(3249.95432);
      double double0 = complex6.I.abs();
      Complex complex11 = complex7.reciprocal();
      try { 
        complex7.nthRoot((-1785));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,785
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-3194.538807643585), (-3194.538807643585));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.negate();
      double double0 = complex1.I.abs();
      Complex complex6 = complex5.I.sqrt1z();
      int int0 = complex5.NaN.hashCode();
      Complex complex7 = Complex.valueOf(4547.699877, 2026.915503955);
      boolean boolean0 = complex5.isInfinite();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.I.divide(complex4);
      Complex complex10 = complex1.INF.subtract(1.6649010181427002);
      Complex complex11 = Complex.valueOf((-2325.7475934861923));
      String string0 = complex8.toString();
      Complex complex12 = Complex.valueOf((-3194.538807643585));
      Complex complex13 = complex7.atan();
      int int1 = complex13.NaN.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex14 = complex5.pow(complex1);
      Complex complex15 = complex14.atan();
      Complex complex16 = complex7.sinh();
      Complex complex17 = complex14.pow(complex6);
      ComplexField complexField1 = complex9.getField();
      Complex complex18 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-997.887946);
      double double1 = (-487.136176441);
      Complex complex0 = new Complex((-997.887946), (-487.136176441));
      double double2 = 2.07200288772583;
      Complex complex1 = complex0.subtract(2.07200288772583);
      int int0 = (-1527);
      try { 
        complex1.NaN.nthRoot((-1527));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,527
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ZERO.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.add(Double.NaN);
      List<Complex> list0 = complex1.nthRoot(1);
      Object object0 = complex0.I.readResolve();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex2.multiply(722);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex2.cos();
      boolean boolean1 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-293.3901207645357), 0.0);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.NaN.pow(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.add(Double.NaN);
      Object object0 = complex6.NaN.readResolve();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 4.397691311390564E-8);
      Complex complex1 = new Complex((-98.052173435));
      Complex complex2 = complex0.ZERO.pow(complex1);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-666.6517658712994), (-666.6517658712994));
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1969.905155837), 2.3093822298965837E116);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = Complex.valueOf(2.3093822298965837E116, (-1969.905155837));
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex6.multiply(complex4);
      Complex complex9 = complex6.INF.reciprocal();
      Complex complex10 = complex8.INF.divide(complex0);
      Complex complex11 = complex10.NaN.sqrt1z();
      Complex complex12 = complex1.ONE.acos();
      Complex complex13 = Complex.valueOf(2.3093822298965837E116, (-1969.905155837));
      Complex complex14 = complex8.INF.pow(complex13);
      Complex complex15 = Complex.valueOf((-288.35101381633535));
      String string0 = complex10.toString();
      double double0 = complex4.INF.getArgument();
      Complex complex16 = complex1.createComplex(2279.772966, 0.0);
      Complex complex17 = complex16.I.subtract((-268.76336234976));
      Complex complex18 = complex16.cosh();
      Complex complex19 = complex4.tan();
      boolean boolean0 = complex6.equals(complex1);
      ComplexField complexField0 = complex12.getField();
      Complex complex20 = complex19.exp();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1725.710885055, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.I.equals("");
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.subtract((-1.0));
      double double0 = complex0.abs();
      Complex complex2 = complex1.sqrt();
      double double1 = complex0.I.abs();
      double double2 = complex0.getReal();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.ZERO.pow(complex0);
      Complex complex6 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-866.672), 1055.4809061);
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex1.ZERO.pow(178.2716);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.INF.sqrt1z();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex3.add((-1.0481908869377813E-8));
      Complex complex7 = complex1.sin();
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex1.conjugate();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex7.hashCode();
      Complex complex9 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1545.794, 0.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex1.atan();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex0.NaN.multiply(complex4);
      Complex complex7 = complex1.NaN.pow(0.0);
      List<Complex> list0 = complex0.NaN.nthRoot(7);
      List<Complex> list1 = complex0.NaN.nthRoot(7);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex1.sinh();
      double double0 = complex8.getImaginary();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.valueOf((-2472.84242));
      Complex complex4 = complex2.ZERO.pow(complex3);
      Complex complex5 = complex1.add(882.1873572);
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = complex5.multiply(37);
      Complex complex8 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3868.210000978821);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.negate();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex2.I.subtract(3868.210000978821);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.ONE.multiply(complex0);
      Complex complex8 = complex1.ONE.sin();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex1.equals(complex0);
      Complex complex9 = complex0.cosh();
      String string0 = complex9.toString();
      Complex complex10 = Complex.valueOf((-159.0));
      double double0 = complex3.getReal();
      double double1 = complex0.getReal();
      Complex complex11 = complex0.asin();
      double double2 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.4439696075216986E-307, 0.026976589113473892);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex1.createComplex(2.4439696075216986E-307, 2.4439696075216986E-307);
      String string0 = complex4.NaN.toString();
      Complex complex5 = Complex.valueOf(0.026976589113473892);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex1.log();
      Complex complex9 = complex1.NaN.pow((-1594.40355));
      Complex complex10 = complex0.divide(complex1);
      double double0 = complex10.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double1 = complex9.getReal();
      Complex complex11 = Complex.valueOf(Double.NaN);
      Complex complex12 = complex11.INF.reciprocal();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex11.acos();
      Complex complex15 = Complex.valueOf((-684.35593));
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.getArgument();
      Complex complex1 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.I.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.I.negate();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(1.5707963267948966);
      Complex complex7 = complex0.createComplex(0.0, 84.0);
      double double1 = complex1.getArgument();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex9.NaN.pow((-1611.9402756408));
      Complex complex11 = complex8.INF.divide(0.0);
      Object object0 = complex8.readResolve();
      Complex complex12 = complex1.NaN.sqrt();
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex13 = complex1.tan();
      int int0 = complex11.hashCode();
      String string0 = complex13.toString();
      List<Complex> list0 = complex9.nthRoot(17);
      Complex complex14 = complex6.ONE.atan();
      Complex complex15 = complex10.exp();
      Complex complex16 = complex14.ZERO.subtract(complex6);
      double double2 = complex14.ZERO.abs();
      Complex complex17 = complex10.pow((-110.562112223551));
      Complex complex18 = Complex.INF;
      boolean boolean1 = complex13.equals(complex18);
      List<Complex> list1 = complex7.nthRoot(17);
      Complex complex19 = complex17.multiply(17);
      boolean boolean2 = complex11.equals(complex19);
      Complex complex20 = complex12.sqrt();
      Complex complex21 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, 3113.2572);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex0.pow(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      String string0 = complex1.toString();
      Complex complex2 = complex0.INF.divide(0.0);
      Complex complex3 = Complex.valueOf(1959.127071497172);
      Complex complex4 = complex1.ZERO.sin();
      String string1 = complex0.I.toString();
      double double0 = complex0.NaN.getArgument();
      Complex complex5 = complex0.cosh();
      boolean boolean0 = complex5.NaN.equals((Object) null);
      boolean boolean1 = complex0.isNaN();
      Complex complex6 = complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(5113.727686588756, (-2254.8504935));
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex1.ZERO.add(complex0);
      List<Complex> list0 = complex1.nthRoot(964);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      List<Complex> list0 = complex0.ZERO.nthRoot(545);
      Complex complex2 = new Complex((-1659.0908324846193));
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex2.pow(complex6);
      Complex complex8 = complex7.INF.multiply((-1659.0908324846193));
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex7.divide(complex6);
      Complex complex11 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.133891373));
      Complex complex1 = complex0.I.add(1.134857098306787E-82);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex2.subtract(0.0);
      Complex complex6 = complex0.cosh();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-742.85), (-742.85));
      Complex complex1 = complex0.tanh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.exp();
      boolean boolean0 = complex0.isInfinite();
      int int1 = complex1.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.0, 1264.1061);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.NaN.toString();
      String string1 = complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.NaN.multiply(0);
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
      Complex complex8 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-337.176));
      Complex complex1 = complex0.log();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex1.I.equals("e]:3jia,C5h<t[.TZs");
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.multiply((-337.176));
      Complex complex4 = complex0.pow((-337.176));
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex1.I.conjugate();
      Complex complex7 = complex4.ONE.tanh();
      Complex complex8 = complex1.sqrt();
      ComplexField complexField1 = complex4.I.getField();
      Complex complex9 = complex8.ONE.add((-337.176));
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = Complex.ONE;
      Object object0 = complex11.I.readResolve();
      Complex complex12 = complex1.add(complex11);
      Complex complex13 = complex12.ZERO.negate();
      double double0 = complex7.getImaginary();
      ComplexField complexField2 = complex4.getField();
      ComplexField complexField3 = complex11.getField();
      Object object1 = new Object();
      boolean boolean1 = complex4.equals(object1);
      Complex complex14 = complex8.multiply((-493.2410189240798));
      Complex complex15 = complex3.acos();
      double double1 = complex15.abs();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1907.0));
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex2.ONE.cos();
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.exp();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2208.56), (-1411.76508165));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3365.90580270261, 20.0);
      Complex complex1 = complex0.I.sqrt();
      String string0 = complex0.INF.toString();
      String string1 = complex0.NaN.toString();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.divide((-536.1404654396));
      Complex complex3 = complex2.I.multiply(1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.add(20.0);
      Complex complex6 = complex4.negate();
      String string2 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.add((-1529.713595183727));
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex1.acos();
      boolean boolean0 = complex5.I.equals((Object) null);
      Complex complex6 = complex1.INF.acos();
      boolean boolean1 = complex5.isNaN();
      Complex complex7 = complex3.atan();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.log();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.296916663646698, 0.0);
      Object object0 = new Object();
      Complex complex1 = complex0.ONE.add(0.0);
      boolean boolean0 = complex0.INF.equals(object0);
      Complex complex2 = complex0.log();
      Object object1 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.atan();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = Complex.valueOf((-343.45), 0.0);
      Complex complex5 = complex4.NaN.pow((-343.45));
      String string0 = complex4.ZERO.toString();
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex6.pow(0.0);
      boolean boolean0 = complex6.ZERO.equals(complex0);
      Complex complex8 = complex1.INF.subtract(complex0);
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex0.divide(complex1);
      Complex complex11 = complex8.add(0.0);
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-545.807), 0.0);
      Complex complex1 = complex0.subtract(0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.ONE.divide(1.1759889125823975);
      Complex complex4 = complex1.multiply(17);
      Complex complex5 = complex1.atan();
      double double1 = complex5.NaN.getArgument();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.atan();
      double double2 = complex7.getArgument();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex4.INF.sin();
      double double0 = 2567.760160139917;
      int int1 = 0;
      Complex complex6 = complex0.INF.createComplex(0.0, 2567.760160139917);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex7.NaN.subtract(complex4);
      try { 
        complex5.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex4.I.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.ZERO.acos();
      Complex complex8 = complex4.INF.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex3.add(complex2);
      Complex complex10 = complex5.multiply(complex6);
      Complex complex11 = complex10.INF.add(complex0);
      ComplexField complexField0 = complex9.getField();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex13 = complex10.cosh();
      Complex complex14 = complex8.subtract(0.0);
      Complex complex15 = complex10.asin();
      Complex complex16 = complex0.exp();
      Complex complex17 = complex16.INF.cosh();
      Complex complex18 = complex4.add(1.0);
      Complex complex19 = complex2.INF.subtract(complex10);
      Complex complex20 = complex1.sqrt1z();
      Object object0 = complex7.readResolve();
      double double1 = complex11.getImaginary();
      Complex complex21 = complex11.pow(complex20);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.add(344.3194153737638);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex2.log();
      Complex complex7 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.conjugate();
      Object object0 = complex2.readResolve();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex5.log();
      Complex complex8 = complex2.add(complex1);
      double double0 = complex8.abs();
      Complex complex9 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2212.97169770519), (-2212.97169770519));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Object object0 = complex3.NaN.readResolve();
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.valueOf(0.6275664567947388, (-2.356194490192345));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.sqrt();
      int int1 = complex2.INF.hashCode();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex1.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.I.tan();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex3 = complex1.conjugate();
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-1187.5300889067776));
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.add((-1653.0569414517058));
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex2.INF.tanh();
      List<Complex> list0 = complex0.ZERO.nthRoot(17);
      Complex complex4 = complex1.ZERO.tan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex1.hashCode();
      String string0 = complex0.toString();
      Complex complex5 = complex4.negate();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.I.tan();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex1.NaN.multiply(0);
      Complex complex4 = complex1.ONE.subtract(complex0);
      Complex complex5 = complex2.INF.multiply(432);
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(886.4861);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.log();
      List<Complex> list0 = complex0.nthRoot(1722);
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.sqrt1z();
      try { 
        complex5.ONE.nthRoot((-1824));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,824
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 736.5);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.NaN.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      double double0 = complex0.abs();
      Complex complex3 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.I.subtract((-1035.05009167058));
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.createComplex((-4582.534175459), (-4582.534175459));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.multiply((-1270));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.add(0.0);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = Complex.valueOf(2161.05507245217);
      Complex complex7 = complex4.cos();
      Complex complex8 = complex3.NaN.multiply(complex4);
      Complex complex9 = complex6.ZERO.tan();
      Complex complex10 = complex7.I.add(243.43937901553);
      Complex complex11 = complex7.ONE.subtract((-2752.678));
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex3.isNaN();
      Complex complex12 = complex6.sin();
      double double0 = complex12.abs();
      Complex complex13 = complex2.subtract(complex10);
      Complex complex14 = Complex.valueOf(1.291561142865928E207);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(1239.1448983323);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.I.createComplex(0.0, 1294.3779080258);
      Complex complex6 = complex5.ONE.add(complex1);
      double double0 = complex0.ONE.getArgument();
      Complex complex7 = complex2.ONE.subtract(complex0);
      double double1 = complex0.getReal();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(823.33474);
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf(823.33474);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.createComplex(Double.NaN, 823.33474);
      boolean boolean0 = complex5.isNaN();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex0.ONE.equals(complex1);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.subtract(0.0);
      boolean boolean1 = complex1.I.equals(complex2);
      Complex complex7 = complex2.INF.atan();
      Complex complex8 = complex3.pow(complex1);
      Complex complex9 = complex2.conjugate();
      double double0 = complex7.I.abs();
      int int0 = complex8.hashCode();
      Complex complex10 = complex7.sqrt1z();
      boolean boolean2 = complex6.isInfinite();
      List<Complex> list0 = complex2.nthRoot(195);
      Complex complex11 = complex10.divide(Double.POSITIVE_INFINITY);
      double double1 = complex3.getImaginary();
      Complex complex12 = complex3.subtract(0.0);
      Complex complex13 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.reciprocal();
      double double2 = complex10.getReal();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex4.subtract((-2124.98789514));
      Complex complex17 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-2899.7));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.divide((-2954.43));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1696.1688));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-3995));
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = new Complex((-3995), (-3020.995023378897));
      Complex complex7 = complex2.INF.multiply(complex6);
      double double0 = complex0.getReal();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex9.INF.tan();
      boolean boolean0 = complex0.equals(complex8);
      Complex complex11 = complex8.multiply((-3995));
      Complex complex12 = complex11.NaN.multiply(complex2);
      Complex complex13 = complex11.sinh();
      double double1 = complex2.getReal();
      Complex complex14 = complex13.add(Double.POSITIVE_INFINITY);
      double double2 = complex14.I.getArgument();
      Complex complex15 = complex4.tan();
      Complex complex16 = complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      int int0 = complex1.NaN.hashCode();
      boolean boolean0 = complex1.ZERO.equals((Object) null);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf((-4.1975650319859075E-8), (-2218.360552610286));
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex1.ONE.pow(complex2);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex1.asin();
      boolean boolean0 = complex5.equals(complex6);
      Complex complex7 = complex0.multiply((-2218.360552610286));
      List<Complex> list0 = complex0.nthRoot(286);
      Complex complex8 = complex7.sqrt1z();
      double double0 = complex7.abs();
      Object object0 = complex4.readResolve();
      Complex complex9 = complex6.reciprocal();
      int int0 = complex2.hashCode();
      double double1 = complex6.abs();
      Complex complex10 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.INF.divide(complex3);
      Complex complex5 = complex2.ZERO.tanh();
      Complex complex6 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.divide((-1723.0));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(1203.1612, 1643.5738);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.pow(complex2);
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex1.reciprocal();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.I.sinh();
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.atan();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.ONE.equals(object0);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = Complex.valueOf((-1191.7504));
      Complex complex4 = complex3.ZERO.multiply(1185.78285718);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex0.ONE.conjugate();
      Complex complex8 = complex2.subtract(0.0);
      Complex complex9 = complex8.ONE.pow(complex3);
      Object object1 = complex4.ONE.readResolve();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex2.divide((-1191.7504));
      Complex complex12 = complex11.ONE.subtract(complex5);
      Complex complex13 = Complex.valueOf(1185.78285718);
      double double0 = complex13.getImaginary();
      Complex complex14 = complex4.sqrt();
      ComplexField complexField0 = complex14.getField();
      Complex complex15 = complex5.cos();
      boolean boolean1 = complex5.isNaN();
      boolean boolean2 = complex4.isInfinite();
      Complex complex16 = complex5.add(0.0);
      Complex complex17 = complex6.sqrt();
      Complex complex18 = complex0.tanh();
      Complex complex19 = complex5.conjugate();
      Complex complex20 = complex13.asin();
      Object object2 = complex12.readResolve();
      boolean boolean3 = complex20.ONE.equals(object2);
      double double1 = complex17.getImaginary();
      Complex complex21 = complex13.multiply((-1191.7504));
      double double2 = complex21.getReal();
      Complex complex22 = complex16.add(complex10);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.add(0.0);
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-572.2));
      Complex complex1 = complex0.I.multiply(509.94598261);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.NaN.reciprocal();
      boolean boolean0 = complex3.ONE.equals(complex0);
      List<Complex> list0 = complex0.nthRoot(399);
      boolean boolean1 = complex2.isInfinite();
      Complex complex4 = complex0.add((double) 399);
      Complex complex5 = Complex.valueOf((double) 399, (double) 399);
      Complex complex6 = complex4.add(509.94598261);
      Complex complex7 = complex1.divide(complex4);
      List<Complex> list1 = complex0.nthRoot(716);
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex7.multiply(1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.createComplex(20.0, 20.0);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex3.conjugate();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1546.854003);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.acos();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.subtract(3547.4373);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex1.divide(1042.5559524);
      Complex complex8 = complex1.pow(Double.NaN);
      double double0 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4473.94018796, 0.0);
      String string0 = complex0.NaN.toString();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.add(complex0);
      double double0 = complex2.I.abs();
      Complex complex3 = complex1.multiply(540);
      double double1 = complex0.NaN.abs();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex1.multiply(Double.NaN);
      int int1 = complex0.ZERO.hashCode();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex6.ZERO.multiply(540);
      int int2 = complex4.hashCode();
      Complex complex8 = complex2.divide(0.0);
      Complex complex9 = complex8.I.add(complex2);
      Complex complex10 = complex0.pow((-1722.7735));
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex2.sqrt1z();
      double double2 = complex8.getImaginary();
      String string1 = complex2.toString();
      boolean boolean0 = complex7.isInfinite();
      Complex complex13 = complex2.cos();
      Complex complex14 = complex5.sqrt();
      double double3 = complex14.getReal();
      Complex complex15 = complex13.conjugate();
      Complex complex16 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex5.I.cosh();
      Complex complex9 = complex1.ONE.cosh();
      Complex complex10 = complex2.divide(complex0);
      Complex complex11 = complex10.ZERO.asin();
      Complex complex12 = complex10.INF.asin();
      ComplexField complexField0 = complex12.INF.getField();
      double double0 = 0.0;
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      Complex complex14 = complex13.NaN.conjugate();
      Object object0 = complex13.readResolve();
      double double1 = complex0.getReal();
      int int0 = 1;
      boolean boolean0 = complex3.I.equals(complex10);
      Complex complex15 = complex10.ZERO.tanh();
      List<Complex> list0 = complex2.INF.nthRoot(1);
      Complex complex16 = complex0.add(complex1);
      Complex complex17 = complex16.NaN.log();
      Complex complex18 = complex17.INF.add(0.0);
      try { 
        complex11.nthRoot((-389));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -389
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
