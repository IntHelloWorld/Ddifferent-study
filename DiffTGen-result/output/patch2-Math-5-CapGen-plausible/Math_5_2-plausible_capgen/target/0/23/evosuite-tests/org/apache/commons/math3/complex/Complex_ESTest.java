/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:27:20 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ZERO.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.cos();
      Complex complex5 = (Complex)complex2.readResolve();
      boolean boolean0 = complex1.I.equals(complex5);
      double double0 = complex1.getReal();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.multiply(303);
      Complex complex10 = Complex.valueOf((-3307.737397660135), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ZERO.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.cos();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.I.equals(object0);
      double double0 = complex1.getReal();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.1794393062591553);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.add(1.1794393062591553);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ONE.divide(1.7129486892266285E256);
      Complex complex4 = complex1.I.negate();
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex0.I.sqrt();
      List<Complex> list0 = complex6.I.nthRoot(12);
      double double1 = complex1.NaN.abs();
      boolean boolean0 = complex2.I.equals(complex1);
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex0.multiply((-1492));
      double double2 = complex2.getImaginary();
      Complex complex10 = complex0.reciprocal();
      ComplexField complexField0 = complex10.ZERO.getField();
      int int0 = complex10.NaN.hashCode();
      boolean boolean1 = complex1.equals(complex7);
      double double3 = complex4.abs();
      int int1 = complex7.hashCode();
      Complex complex11 = complex8.acos();
      Complex complex12 = complex11.atan();
      boolean boolean2 = complex7.equals(complex0);
      Complex complex13 = complex3.tanh();
      double double4 = complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ZERO.log();
      double double1 = complex0.INF.abs();
      String string0 = complex0.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.log();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex4.add((-1660.096568216));
      double double2 = complex4.abs();
      Complex complex9 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1306.577722180602, 1306.577722180602);
      Complex complex1 = Complex.NaN;
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.I.equals(object0);
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.log();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex3.NaN.log();
      List<Complex> list0 = complex4.nthRoot(1839);
      ComplexField complexField1 = complex3.I.getField();
      Complex complex5 = complex2.ZERO.createComplex(3801.382448944169, 3801.382448944169);
      Complex complex6 = Complex.valueOf(3801.382448944169, 982.34);
      Complex complex7 = complex3.createComplex(0.0, 0.0);
      Complex complex8 = complex1.NaN.cos();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex0.I.tan();
      double double0 = complex10.ZERO.getArgument();
      Complex complex11 = complex2.divide(complex0);
      Complex complex12 = complex11.NaN.exp();
      Complex complex13 = complex11.NaN.acos();
      Object object0 = complex2.readResolve();
      Complex complex14 = complex1.add(19.0);
      boolean boolean0 = complex14.isInfinite();
      double double1 = complex1.getReal();
      Complex complex15 = complex2.subtract(3.495384792953975E-252);
      boolean boolean1 = complex2.isNaN();
      Complex complex16 = complex8.log();
      Complex complex17 = complex16.asin();
      Complex complex18 = complex17.INF.tan();
      Complex complex19 = complex7.multiply(477);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply((-1353));
      Complex complex3 = complex2.INF.subtract(272.46);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.sin();
      boolean boolean0 = complex4.equals(complex5);
      Complex complex8 = Complex.valueOf(135.35388965599194, 3.91527572177694E207);
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex3.add(complex2);
      Complex complex11 = Complex.valueOf(3.91527572177694E207);
      Complex complex12 = complex7.subtract((double) (-1353));
      int int0 = complex2.hashCode();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex6.sqrt1z();
      double double0 = complex12.getImaginary();
      Complex complex15 = complex2.exp();
      Complex complex16 = complex0.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = new Complex((-1756.7312737906), Double.NaN);
      double double1 = 0.0;
      double double2 = 1.70518021921727E-8;
      Complex complex1 = Complex.valueOf(0.0, 1.70518021921727E-8);
      Complex complex2 = complex1.NaN.multiply(3407);
      try { 
        complex1.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-766.98));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide((-766.98));
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.divide(0.0);
      Object object0 = complex1.readResolve();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.divide(complex0);
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex8.acos();
      Complex complex12 = Complex.valueOf(20.0, (-1871.83518085));
      Complex complex13 = complex2.add(complex12);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.sin();
      int int0 = complex1.I.hashCode();
      Complex complex2 = new Complex(0.0, (-2636.85756605));
      Complex complex3 = complex2.ONE.multiply((-2636.85756605));
      Complex complex4 = complex3.NaN.pow(3952.670408500572);
      Complex complex5 = complex0.divide(complex2);
      try { 
        complex5.INF.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = new Complex(140.85629898, 140.85629898);
      Complex complex5 = complex0.ONE.add(complex4);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.createComplex(8.472965161251656E-169, 8.472965161251656E-169);
      Complex complex7 = complex6.ZERO.add(140.85629898);
      Complex complex8 = complex6.ONE.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex6.NaN.getArgument();
      Complex complex9 = complex4.multiply(complex1);
      Complex complex10 = complex9.divide(complex0);
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex3.log();
      Complex complex13 = complex2.negate();
      String string0 = complex10.toString();
      Complex complex14 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2794.1762007, (-724.7));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex4.NaN.divide(0.0);
      Complex complex7 = complex2.ZERO.sin();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex2.I.divide(2794.1762007);
      Object object0 = complex9.readResolve();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex1.tan();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex2.pow(complex0);
      Complex complex14 = Complex.ONE;
      Object object1 = complex14.readResolve();
      Object object2 = complex12.NaN.readResolve();
      Complex complex15 = complex12.ZERO.pow(complex14);
      double double0 = complex13.abs();
      Object object3 = complex12.readResolve();
      boolean boolean0 = complex1.equals(complex3);
      Complex complex16 = complex11.cosh();
      int int0 = complex15.INF.hashCode();
      Complex complex17 = complex16.NaN.divide((-724.7));
      Complex complex18 = complex16.ONE.tan();
      Complex complex19 = complex15.sin();
      Complex complex20 = complex19.conjugate();
      Complex complex21 = complex16.cosh();
      Complex complex22 = complex7.negate();
      Complex complex23 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.48850810527801514, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.createComplex((-1615.4195407856), 0.48850810527801514);
      Complex complex2 = complex1.ONE.divide(complex0);
      boolean boolean0 = complex1.NaN.equals(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex4.INF.conjugate();
      Complex complex7 = complex1.INF.pow(0.0);
      Complex complex8 = complex7.ONE.conjugate();
      Complex complex9 = complex5.INF.multiply(2093);
      Complex complex10 = complex9.NaN.divide(complex3);
      int int0 = complex3.ONE.hashCode();
      double double0 = complex5.NaN.getArgument();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex11.INF.subtract(complex9);
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex11.pow(Double.POSITIVE_INFINITY);
      Complex complex15 = complex14.ZERO.sqrt();
      Complex complex16 = complex4.sqrt1z();
      Complex complex17 = complex9.negate();
      Complex complex18 = complex10.add(complex2);
      Complex complex19 = complex11.ONE.asin();
      Complex complex20 = complex17.ZERO.cos();
      Complex complex21 = complex17.subtract((-1398.3018713279));
      Complex complex22 = complex3.multiply(complex9);
      Complex complex23 = complex15.atan();
      Complex complex24 = complex15.sin();
      Complex complex25 = complex8.log();
      Complex complex26 = complex0.pow(complex15);
      boolean boolean1 = complex18.isInfinite();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.854154449263851E-34, 9.854154449263851E-34);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.reciprocal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.I.add(9.854154449263851E-34);
      Complex complex7 = complex5.INF.multiply(0);
      Complex complex8 = Complex.valueOf((double) 0);
      List<Complex> list0 = complex5.nthRoot(2230);
      Complex complex9 = complex0.reciprocal();
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex10.INF.pow(complex4);
      Complex complex12 = complex9.acos();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex10.ZERO.sinh();
      Complex complex15 = complex13.NaN.sqrt1z();
      Complex complex16 = complex15.INF.multiply((double) 2230);
      Complex complex17 = complex11.sqrt1z();
      double double0 = complex10.getImaginary();
      List<Complex> list1 = complex10.ONE.nthRoot(2234);
      Complex complex18 = complex12.divide(4688.5511266);
      Complex complex19 = complex8.sqrt1z();
      Complex complex20 = complex17.reciprocal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.createComplex(9.119538242455128E-8, 0.0);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex1.divide(9.119538242455128E-8);
      Complex complex6 = complex3.ZERO.log();
      Complex complex7 = complex4.sinh();
      Complex complex8 = Complex.valueOf(9.119538242455128E-8);
      boolean boolean0 = complex3.equals(complex0);
      try { 
        complex4.NaN.nthRoot((-1889));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,889
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.negate();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.ZERO.multiply(complex2);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = Complex.valueOf(0.0);
      double double0 = complex6.getArgument();
      Complex complex9 = complex6.cos();
      double double1 = complex3.getReal();
      Complex complex10 = complex0.ZERO.sin();
      int int0 = complex4.hashCode();
      Complex complex11 = complex8.NaN.cosh();
      Complex complex12 = complex8.ZERO.asin();
      Complex complex13 = complex0.subtract(complex4);
      ComplexField complexField0 = complex13.I.getField();
      Complex complex14 = complex3.asin();
      Complex complex15 = complex4.exp();
      Complex complex16 = complex8.exp();
      Complex complex17 = complex10.subtract(complex0);
      Complex complex18 = complex13.pow(0.0);
      Complex complex19 = complex6.createComplex(0.0, 1633.2817);
      Complex complex20 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-867.01508237), 1108.8443066838151);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1108.8443066838151, (-6392.65574723));
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex2.multiply(1096);
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex(0.0, Double.NaN);
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.valueOf(40.99037638);
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(4.090184282164232E-176);
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.ONE.add(9.248598815279678E300);
      Complex complex4 = complex3.INF.multiply((-29));
      Complex complex5 = complex4.NaN.pow(complex0);
      double double0 = complex0.ONE.abs();
      Complex complex6 = complex0.subtract(2.0);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex2.multiply(1.0);
      String string1 = complex0.toString();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2301.190621781));
      Complex complex1 = Complex.valueOf((-2301.190621781), (-2301.190621781));
      Complex complex2 = complex1.NaN.add((-2301.190621781));
      Complex complex3 = complex2.ZERO.divide((-2301.190621781));
      double double0 = complex0.getImaginary();
      Complex complex4 = Complex.valueOf((-2301.190621781));
      String string0 = complex0.toString();
      double double1 = complex4.I.getArgument();
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.valueOf((-2301.190621781));
      Complex complex7 = complex6.ONE.conjugate();
      boolean boolean0 = complex4.isNaN();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex9.NaN.add(1.5707963267948966);
      Complex complex12 = complex11.ZERO.multiply(1.5707963267948966);
      String string1 = complex12.NaN.toString();
      Complex complex13 = complex11.INF.multiply(complex6);
      try { 
        complex10.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-711.2955838907421));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.INF.createComplex(2.0, (-2952.592390878897));
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex4.INF.pow(complex3);
      Complex complex6 = complex4.ZERO.multiply(2.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex6.divide(6.283185307179586);
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex8.I.createComplex((-711.2955838907421), (-711.2955838907421));
      Complex complex11 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = null;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex0.ZERO.multiply(1887.7);
      List<Complex> list0 = complex5.INF.nthRoot(4221);
      String string0 = complex5.INF.toString();
      Complex complex6 = complex2.INF.createComplex((-423.856), (-1532.8));
      Complex complex7 = complex0.ONE.tan();
      Complex complex8 = complex0.ZERO.cosh();
      Complex complex9 = complex8.divide((-1104.56));
      Complex complex10 = complex8.I.atan();
      Complex complex11 = complex10.ZERO.subtract((-2161.98885876));
      Complex complex12 = complex1.createComplex(0.0, (-934.8535721));
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.ONE.multiply(824);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex0.ONE.multiply(1);
      boolean boolean0 = complex5.ONE.equals("");
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex0.log();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex11.INF.createComplex(824, 1217.1443);
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex2.subtract(complex13);
      Complex complex15 = complex6.cosh();
      int int1 = complex7.hashCode();
      Complex complex16 = complex3.pow(complex5);
      ComplexField complexField0 = complex1.getField();
      try { 
        complex2.nthRoot((-940));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -940
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.subtract(complex2);
      double double0 = complex2.ZERO.abs();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.add(1.0730302255093144E-182);
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex4.ONE.acos();
      String string0 = complex6.ONE.toString();
      double double1 = complex6.abs();
      try { 
        complex0.nthRoot((-541));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -541
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.NaN.cos();
      double double1 = complex1.getArgument();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = Complex.valueOf((-1.5707963267948966));
      Complex complex9 = complex7.add(487.46702246);
      Complex complex10 = complex5.subtract((-1.5707963267948966));
      List<Complex> list0 = complex9.nthRoot(1);
      String string0 = complex0.ZERO.toString();
      Complex complex11 = complex9.ZERO.sin();
      Complex complex12 = complex7.multiply(0);
      Complex complex13 = complex8.NaN.atan();
      Complex complex14 = complex5.multiply(2391);
      Complex complex15 = complex14.ONE.exp();
      Complex complex16 = complex0.exp();
      Complex complex17 = Complex.valueOf(4959.845761478986, (-2085.9638683396));
      Complex complex18 = complex8.add(3.106037603716254E-245);
      Complex complex19 = complex18.multiply(complex17);
      Complex complex20 = complex6.subtract((double) 2391);
      Complex complex21 = complex9.pow(complex20);
      Complex complex22 = complex4.divide((double) 0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(2887.62201535644);
      Complex complex1 = complex0.INF.multiply(2887.62201535644);
      Complex complex2 = complex0.conjugate();
      String string0 = complex2.toString();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.I.reciprocal();
      int int0 = complex3.hashCode();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.subtract(2887.62201535644);
      double double0 = complex6.abs();
      String string1 = complex7.INF.toString();
      Complex complex8 = complex0.ZERO.subtract(2887.62201535644);
      Complex complex9 = Complex.valueOf(2887.62201535644);
      Complex complex10 = complex9.INF.sin();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex11.I.multiply(1);
      Complex complex13 = complex12.INF.cosh();
      Complex complex14 = Complex.valueOf(2887.62201535644);
      ComplexField complexField0 = complex14.getField();
      Complex complex15 = complex6.tanh();
      boolean boolean1 = complex6.isNaN();
      boolean boolean2 = complex5.isInfinite();
      Complex complex16 = complex5.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.reciprocal();
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.NaN.log();
      boolean boolean0 = complex2.isInfinite();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.NaN.createComplex((-1041.73993295767), 729.7366);
      Complex complex6 = complex0.ONE.reciprocal();
      Complex complex7 = complex3.createComplex(2750.413597, (-491.0));
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.multiply(complex7);
      Complex complex10 = complex9.ONE.add(complex3);
      Complex complex11 = complex8.ONE.multiply(complex3);
      Complex complex12 = complex9.ONE.subtract(complex2);
      Complex complex13 = complex9.negate();
      Complex complex14 = complex13.pow(complex1);
      Complex complex15 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.ZERO.asin();
      double double0 = complex5.INF.getArgument();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex6 = complex0.I.sqrt();
      double double1 = complex6.abs();
      Object object0 = complex0.readResolve();
      Object object1 = complex3.readResolve();
      double double2 = complex4.getReal();
      Complex complex7 = complex0.divide(Double.NaN);
      ComplexField complexField1 = complex4.getField();
      Complex complex8 = complex2.log();
      Complex complex9 = complex3.sqrt1z();
      double double3 = complex3.getReal();
      Complex complex10 = complex0.asin();
      double double4 = complex5.getReal();
      Complex complex11 = complex4.cosh();
      Object object2 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.negate();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.INF.atan();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex4.atan();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex6.INF.add(complex8);
      Complex complex10 = complex0.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex4.sin();
      double double1 = complex6.getImaginary();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.NaN.tan();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex14.asin();
      Complex complex16 = Complex.valueOf(Double.NaN);
      Object object0 = complex1.readResolve();
      Complex complex17 = complex12.add(complex10);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1024.79122, 1024.79122);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.ONE.divide(1024.79122);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-909.63573491), (-909.63573491));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.ONE.multiply(1);
      Complex complex5 = complex2.ONE.cosh();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex5.ONE.equals(object0);
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex2.INF.cos();
      Complex complex7 = complex0.createComplex(1017.6709698570113, 1017.6709698570113);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex7.ZERO.add(complex3);
      int int0 = complex1.hashCode();
      Complex complex10 = complex9.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(4.888792154132158E-111);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.pow(4.888792154132158E-111);
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.multiply(4.888792154132158E-111);
      Complex complex6 = Complex.valueOf(4.888792154132158E-111, 4.888792154132158E-111);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex2.divide(complex1);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex6.pow((-621.723794449584));
      Complex complex12 = complex1.reciprocal();
      double double0 = complex4.getImaginary();
      Object object0 = complex9.readResolve();
      boolean boolean0 = complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-532.19812086));
      Complex complex1 = complex0.reciprocal();
      boolean boolean0 = complex1.equals((Object) null);
      List<Complex> list0 = complex1.nthRoot(55);
      Complex complex2 = complex0.createComplex((-20.0), (-20.0));
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex2.equals(complex0);
      Complex complex3 = complex1.log();
      boolean boolean3 = complex3.isInfinite();
      Complex complex4 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.ZERO.cosh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-1487.0));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.ONE.multiply(641);
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = complex0.INF.log();
      double double0 = complex1.I.abs();
      Complex complex6 = complex3.NaN.negate();
      Complex complex7 = complex0.multiply(1043);
      int int0 = complex1.hashCode();
      int int1 = complex3.hashCode();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex1.divide((double) 641);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(0.0, 1911.0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.ZERO.createComplex(0.0, 0.0);
      Complex complex7 = new Complex(0.0, 0.0);
      Complex complex8 = complex3.multiply(complex7);
      Complex complex9 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(4.923458004084836E41);
      Complex complex2 = complex1.INF.multiply(4.923458004084836E41);
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1525.889316823052), (-1525.889316823052));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = new Complex(519.23512654751);
      boolean boolean0 = complex2.I.equals(complex3);
      Complex complex4 = complex2.pow(6.283185307179586);
      Complex complex5 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(741.416185597891, 0.0);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-4720));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.ONE.add(complex2);
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.exp();
      double double0 = complex1.abs();
      Complex complex8 = complex1.log();
      Complex complex9 = complex5.pow(3444.78);
      Complex complex10 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.NaN.multiply((-1));
      double double0 = complex1.I.abs();
      Complex complex2 = Complex.valueOf(6.283185307179586);
      Complex complex3 = complex0.divide(6.283185307179586);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.ZERO.tan();
      double double1 = complex3.INF.abs();
      Complex complex6 = complex3.ONE.tan();
      Complex complex7 = complex1.log();
      String string0 = complex7.NaN.toString();
      Complex complex8 = Complex.valueOf((double) (-1));
      Complex complex9 = complex3.add(2383.1169);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-1.882201085012735E-7), (-1.882201085012735E-7));
      Complex complex3 = complex2.reciprocal();
      double double0 = complex2.getArgument();
      Complex complex4 = Complex.valueOf((-2.356194490192345));
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex4.INF.divide(1.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex2.subtract((-326.69679));
      Complex complex8 = complex2.ONE.sqrt1z();
      Complex complex9 = complex7.ONE.divide((-2.356194490192345));
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.subtract(0.0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3480.3237126838903), (-3480.3237126838903));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.divide((-1035.32671883));
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf((-1035.32671883), 843.0);
      Complex complex5 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex1.ONE.tan();
      double double0 = complex2.getReal();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.NaN.tanh();
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = Complex.valueOf(Double.NaN, 1.0918686389923096);
      Object object0 = complex7.ZERO.readResolve();
      Complex complex9 = complex0.subtract(Double.NaN);
      Complex complex10 = complex0.divide(2819.6694137);
      Complex complex11 = complex4.sqrt();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex0.pow((-20.0));
      Complex complex6 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.55284719912458E-8, 3.55284719912458E-8);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf(3.55284719912458E-8);
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = Complex.valueOf(3.55284719912458E-8, 3.55284719912458E-8);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex1.pow(complex2);
      String string0 = complex6.toString();
      Complex complex9 = Complex.valueOf((-1512.0), (-732.5756282072));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.multiply(1);
      Complex complex3 = complex0.pow(4860.386521501156);
      Complex complex4 = complex3.I.pow(complex1);
      double double0 = complex3.getArgument();
      Complex complex5 = complex0.conjugate();
      double double1 = complex0.abs();
      Complex complex6 = complex5.multiply(0.0);
      Complex complex7 = complex3.atan();
      Object object0 = complex7.ZERO.readResolve();
      Complex complex8 = new Complex(4860.386521501156, (-1073.2777668488739));
      Complex complex9 = complex6.add(complex8);
      String string0 = complex7.toString();
      Complex complex10 = complex8.sqrt1z();
      double double2 = complex1.getImaginary();
      Complex complex11 = complex7.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2004.32075), (-524.816283004));
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.pow((-524.816283004));
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.divide(complex2);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.valueOf((-1784.2), (-914.0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(2357.92469, 0.0);
      Complex complex1 = new Complex((-6570.1918074167), (-1127.60228930994));
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.createComplex(6.283185307179586, (-226.10527));
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.NaN.reciprocal();
      ComplexField complexField0 = complex1.getField();
      int int0 = complex1.hashCode();
      Complex complex5 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4168487931443637E-264, 0.0);
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.799550702470095E-8, 0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.I.multiply(920);
      Complex complex5 = complex4.ZERO.multiply(0);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.subtract(2032.133);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(1886.16);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = Complex.valueOf(1886.16, 0.0);
      Complex complex4 = complex0.reciprocal();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex2.multiply(complex4);
      double double0 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.add((-1783.03));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.INF.pow((-1619.0390741152685));
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex4.subtract(complex0);
      double double0 = complex1.getImaginary();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2717.707), (-2717.707));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = Complex.valueOf((-1308.193351710072), (-2717.707));
      Complex complex4 = complex0.add(20.0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ONE.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex5.add((-2717.707));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.366272509098053, 0.366272509098053);
      Complex complex1 = complex0.conjugate();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.ZERO.subtract(0.366272509098053);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.acos();
      ComplexField complexField0 = complex4.NaN.getField();
      List<Complex> list0 = complex4.ONE.nthRoot(1);
      Complex complex5 = complex1.multiply((-40));
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.subtract(0.366272509098053);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex5.sin();
      Complex complex10 = Complex.valueOf((-3175.906), 4.999126524757713E-197);
      boolean boolean0 = complex2.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.multiply((-176));
      Complex complex4 = complex3.divide(1462.508130129454);
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2285.890549726);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(20.0);
      List<Complex> list0 = complex1.nthRoot(684);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.exp();
      Complex complex6 = Complex.valueOf((-4226.0670981681815), (-4226.0670981681815));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(1972.9, (-1931.9151865040058));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.NaN.multiply(1.0680488848057261E284);
      Complex complex3 = complex0.multiply((-1931.9151865040058));
      Complex complex4 = complex3.pow(1.0680488848057261E284);
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex2.negate();
      Complex complex6 = Complex.valueOf(1.0680488848057261E284, (-627.2247752));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2747.354915561);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.multiply((-1056.2154051495932));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.ZERO.negate();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex0.equals("5gS+bZs8!v");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.divide((-2292.416970117));
      Complex complex6 = complex5.divide((-16.4693297));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(4.734805892507655E-8, 5867.72902086);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.multiply(1174);
      Complex complex3 = complex1.sqrt();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 567.0219498741848);
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.subtract(567.0219498741848);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.ZERO.sinh();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex5.atan();
      double double0 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1514.3429), 0.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.NaN.sin();
      boolean boolean0 = complex3.ZERO.equals("1`F6s ssDm9qf ?23");
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.createComplex(2592.36823304, 0.0);
      Complex complex6 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3023.364318166);
      Complex complex1 = complex0.createComplex(3023.364318166, 3023.364318166);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.INF.conjugate();
      double double0 = complex0.abs();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex0.createComplex((-604.94), 3023.364318166);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.NaN.equals("6n;DR'F*<$, IW");
      Complex complex1 = complex0.I.conjugate();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.tan();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.cosh();
      List<Complex> list0 = complex0.nthRoot(4493);
      Complex complex2 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-474.30161348968));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.sinh();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(871.742, 871.742);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(1541.22868684232);
      double double0 = complex0.INF.getArgument();
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.ONE.multiply(complex4);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex5.NaN.pow(937.9543);
      Complex complex8 = complex4.divide(0.0);
      Complex complex9 = complex2.NaN.sin();
      Complex complex10 = complex9.log();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex2.subtract(complex1);
      Complex complex14 = complex13.ZERO.createComplex(0.0, 0.0);
      Complex complex15 = complex2.subtract(complex8);
      Complex complex16 = complex15.INF.reciprocal();
      Complex complex17 = complex16.NaN.createComplex(2300.860596644, 0.0);
      Complex complex18 = complex15.asin();
      Complex complex19 = complex11.log();
      boolean boolean0 = complex4.equals(complex3);
      double double0 = complex19.getArgument();
      Complex complex20 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex6.getField();
      Complex complex21 = complex11.multiply(930);
      try { 
        complex21.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2264.2396104188915);
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex2 = complex1.ZERO.divide(2264.2396104188915);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ZERO.sin();
      boolean boolean1 = complex1.equals(complex3);
      String string0 = complex2.toString();
      Complex complex5 = Complex.valueOf(2264.2396104188915);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(3586.764306603698);
      String string0 = complex1.toString();
      Complex complex3 = Complex.valueOf(2402.6566961113, 0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.createComplex(2.0, Double.POSITIVE_INFINITY);
      double double1 = complex0.getImaginary();
      Complex complex2 = complex1.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-3393.454327), 0.0);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = new Complex((-3393.454327), (-2080.387925852236));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = Complex.valueOf((-2080.387925852236));
      double double1 = complex3.getArgument();
      Object object0 = complex0.ONE.readResolve();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.conjugate();
      int int1 = complex3.hashCode();
      double double2 = complex0.getArgument();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.tanh();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = Complex.valueOf(1479.51369321, (-270.57776032));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex4.ZERO.subtract(complex2);
      String string1 = complex5.ONE.toString();
      double double1 = complex2.NaN.abs();
      Complex complex6 = complex3.I.negate();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex3.isInfinite();
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex0.divide(1479.51369321);
      double double2 = complex0.getImaginary();
      Complex complex9 = complex4.divide(complex2);
      Complex complex10 = complex8.I.asin();
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex5.NaN.add(complex0);
      Complex complex13 = complex5.add(complex1);
      Complex complex14 = complex6.sqrt();
      Complex complex15 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex16 = complex13.atan();
      String string2 = complex8.toString();
      Complex complex17 = Complex.valueOf((-270.57776032), 0.0);
      Complex complex18 = complex15.sqrt();
      Complex complex19 = new Complex(Double.NaN);
      boolean boolean2 = complex18.ONE.equals(complex19);
      Complex complex20 = complex18.I.sin();
      Complex complex21 = complex20.ONE.sin();
      Complex complex22 = complex16.atan();
      ComplexField complexField0 = complex13.getField();
      Complex complex23 = complex19.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.NaN.divide(complex1);
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex2.NaN.divide(0.0);
      Complex complex9 = complex5.I.sqrt1z();
      Complex complex10 = Complex.valueOf(Double.NaN, 312.695);
      Complex complex11 = complex9.NaN.multiply(Double.NaN);
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex2.NaN.subtract(complex7);
      Complex complex13 = complex4.pow(complex3);
      Complex complex14 = complex4.subtract(7.467788172398272E228);
      Complex complex15 = complex14.ONE.acos();
      try { 
        complex15.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-939.4283559), 0.5330380201339722);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex4.I.divide(926.0);
      Complex complex6 = complex1.multiply((-939.4283559));
      Object object0 = complex1.ZERO.readResolve();
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ONE.subtract(complex0);
      Object object1 = complex6.readResolve();
      boolean boolean0 = complex8.INF.equals(object1);
      Complex complex9 = complex6.multiply((-2565.683536));
      Complex complex10 = complex7.cos();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex10.tan();
      Object object2 = complex12.NaN.readResolve();
      Complex complex13 = complex12.createComplex(3.991755413823315E-226, (-939.4283559));
      Complex complex14 = complex9.add(0.19999954120254515);
      Complex complex15 = complex14.I.tan();
      Complex complex16 = complex14.reciprocal();
      Complex complex17 = complex10.tan();
      Complex complex18 = complex17.ONE.multiply((-2565.683536));
      Object object3 = new Object();
      boolean boolean1 = complex1.equals(object3);
      Complex complex19 = complex12.cosh();
      Complex complex20 = complex11.negate();
      Complex complex21 = complex1.reciprocal();
      Complex complex22 = complex0.exp();
      Complex complex23 = Complex.valueOf(0.19999954120254515);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2391.5574044902));
      Complex complex1 = complex0.ONE.createComplex(1.0, 0.0);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.ONE.divide((-2391.5574044902));
      Complex complex4 = complex3.I.divide(0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.INF.equals(object0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex6.ONE.log();
      double double0 = complex0.INF.getArgument();
      Complex complex8 = complex5.NaN.multiply(2169);
      boolean boolean1 = complex0.isInfinite();
      boolean boolean2 = complex0.isInfinite();
      Object object1 = complex0.readResolve();
      Complex complex9 = complex0.NaN.asin();
      int int0 = (-1651);
      try { 
        complex0.nthRoot((-1651));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,651
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = (-2201.5642145703546);
      Complex complex0 = Complex.valueOf((-2201.5642145703546));
      Complex complex1 = Complex.valueOf((-2201.5642145703546));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex1.ZERO.add(complex2);
      Complex complex5 = complex4.I.subtract(complex2);
      Object object0 = complex4.ONE.readResolve();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.ONE.divide(complex2);
      Complex complex8 = complex6.ZERO.multiply(complex1);
      Complex complex9 = complex8.ONE.multiply(0.0);
      int int0 = complex1.hashCode();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.ONE.multiply(complex4);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex5.NaN.pow((-5.057430382371206E-9));
      Complex complex9 = complex4.divide(0.0);
      Complex complex10 = complex2.NaN.sin();
      Complex complex11 = complex10.log();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex2.subtract(complex1);
      Complex complex15 = complex14.ZERO.createComplex(0.0, 0.0);
      Complex complex16 = complex2.subtract(complex9);
      Complex complex17 = complex16.INF.reciprocal();
      Complex complex18 = complex17.NaN.createComplex(2300.860596644, 0.0);
      Complex complex19 = complex16.asin();
      Complex complex20 = complex12.log();
      Complex complex21 = complex20.I.reciprocal();
      boolean boolean0 = complex4.equals(complex3);
      double double0 = complex20.getArgument();
      Complex complex22 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex6.getField();
      Complex complex23 = complex12.multiply(930);
      try { 
        complex23.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex2.NaN.subtract(0.0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.asin();
      String string0 = complex7.ZERO.toString();
      Complex complex8 = complex7.I.subtract(complex0);
      List<Complex> list0 = complex5.NaN.nthRoot(1);
      Complex complex9 = complex5.I.divide((-215.2100763143));
      Complex complex10 = complex1.divide(complex6);
      Complex complex11 = complex2.asin();
      Complex complex12 = complex11.ZERO.sinh();
      Object object0 = complex12.NaN.readResolve();
      String string1 = complex12.ONE.toString();
      List<Complex> list1 = complex5.nthRoot(1404);
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex0.tan();
      Object object1 = complex7.readResolve();
      boolean boolean0 = complex14.equals(object1);
      Complex complex15 = complex4.sqrt1z();
      Complex complex16 = complex15.createComplex(7.054443447243064E-8, 1088.6768);
      Complex complex17 = complex11.acos();
      Object object2 = complex15.ZERO.readResolve();
      Object object3 = new Object();
      boolean boolean1 = complex15.equals(object3);
      Complex complex18 = complex0.subtract((-337.1723524));
      Complex complex19 = complex18.divide(7.054443447243064E-8);
      double double0 = complex18.getImaginary();
      Complex complex20 = complex9.add(complex8);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2974.39509774618), (-2974.39509774618));
      Complex complex1 = complex0.NaN.multiply(2713.0);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.divide((-2974.39509774618));
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex3.INF.add((-2974.39509774618));
      Complex complex5 = complex0.subtract((-2974.39509774618));
      Complex complex6 = complex0.NaN.cosh();
      double double1 = complex5.ONE.getArgument();
      Complex complex7 = complex5.ONE.multiply(2713.0);
      boolean boolean0 = complex5.isNaN();
      Complex complex8 = complex5.sin();
      Complex complex9 = Complex.valueOf((-2974.39509774618), (-2974.39509774618));
      Complex complex10 = complex4.subtract(complex2);
      Complex complex11 = complex4.tanh();
  }
}
