/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:30:37 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 1102.8;
      Complex complex0 = Complex.valueOf(1102.8, 1102.8);
      Complex complex1 = complex0.NaN.multiply((-388));
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(3381.147827895);
      Complex complex1 = complex0.I.negate();
      double double0 = complex0.abs();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex3.NaN.tan();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex3.NaN.equals(object0);
      Complex complex6 = Complex.valueOf((-1.0857572226543142E-10));
      Complex complex7 = complex2.multiply(1073741824);
      Complex complex8 = Complex.valueOf(3381.147827895, 2.3705437300557087E169);
      Complex complex9 = complex5.I.sqrt();
      Complex complex10 = complex8.subtract(complex1);
      Complex complex11 = complex10.asin();
      Complex complex12 = Complex.valueOf(5477052.0646243105, (-1623.200499896769));
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex13.ZERO.pow((-1623.200499896769));
      ComplexField complexField0 = complex13.ZERO.getField();
      Complex complex15 = complex12.divide(3381.147827895);
      Complex complex16 = complex0.cos();
      double double1 = complex1.abs();
      Complex complex17 = complex5.subtract((-1.0857572226543142E-10));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-24.65004), (-1552.521654290902));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.reciprocal();
      Object object0 = complex1.ZERO.readResolve();
      double double0 = complex1.abs();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex1.NaN.cos();
      Complex complex8 = complex6.INF.add(2.537151232242133E10);
      Complex complex9 = complex1.acos();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex4.cos();
      List<Complex> list0 = complex5.nthRoot(7);
      Complex complex12 = complex1.I.multiply(2.537151232242133E10);
      Complex complex13 = complex5.add(complex4);
      Complex complex14 = complex11.cosh();
      Complex complex15 = complex9.createComplex((-2578.0656203), 2.537151232242133E10);
      Complex complex16 = complex0.asin();
      Complex complex17 = complex3.multiply(1.0009635582278238);
      Complex complex18 = Complex.valueOf(2.537151232242133E10);
      Complex complex19 = complex15.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide(1.6993968486785889);
      Complex complex2 = complex0.ONE.divide(2933.0329056734);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = Complex.valueOf(2933.0329056734, 4.86882298924053E84);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex4.multiply(1485);
      Complex complex10 = new Complex(1485);
      Complex complex11 = complex1.NaN.log();
      Complex complex12 = complex10.INF.divide(0.0);
      Complex complex13 = complex9.ZERO.multiply(complex10);
      Complex complex14 = complex8.exp();
      Object object0 = complex14.ONE.readResolve();
      String string0 = complex14.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex15 = complex6.sin();
      ComplexField complexField0 = complex12.ONE.getField();
      Complex complex16 = complex2.add(1.6993968486785889);
      Complex complex17 = complex16.exp();
      boolean boolean1 = complex1.equals(complex0);
      Complex complex18 = complex8.createComplex(1996.2986139656, 1.6993968486785889);
      ComplexField complexField1 = complex18.ZERO.getField();
      boolean boolean2 = complex12.isInfinite();
      double double0 = complex2.abs();
      double double1 = complex14.getArgument();
      Complex complex19 = Complex.valueOf(1.6993968486785889);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex1.ONE.multiply(complex2);
      Complex complex5 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex2.I.divide(complex4);
      int int0 = complex5.I.hashCode();
      double double0 = complex0.abs();
      Complex complex8 = complex2.INF.sqrt();
      Complex complex9 = Complex.valueOf((-773.9356));
      Complex complex10 = Complex.valueOf(1.0, 2.2361985518423144E-8);
      Complex complex11 = complex10.ZERO.cosh();
      boolean boolean0 = complex2.I.equals(complex0);
      Complex complex12 = complex10.I.cos();
      Object object0 = complex0.I.readResolve();
      Object object1 = complex1.INF.readResolve();
      double double1 = complex1.getArgument();
      Complex complex13 = complex0.multiply(complex10);
      Complex complex14 = complex13.conjugate();
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.add(1530.49821883821);
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex1.ONE.exp();
      String string0 = complex1.I.toString();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.createComplex(3578.3101934975025, (-2741.872756624679));
      Complex complex5 = complex0.ZERO.pow(complex1);
      Complex complex6 = complex5.ONE.subtract(3578.3101934975025);
      Complex complex7 = complex6.NaN.exp();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.nthRoot(1376);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex5.NaN.multiply(complex2);
      Complex complex11 = complex9.ZERO.tanh();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex8.sinh();
      Object object1 = complex5.readResolve();
      Complex complex14 = complex13.NaN.subtract(complex10);
      Complex complex15 = complex1.pow(complex6);
      String string1 = complex15.INF.toString();
      Complex complex16 = complex4.divide(complex7);
      Complex complex17 = complex13.pow(complex1);
      Complex complex18 = complex0.add((double) 1376);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2113.2373944685633, 2113.2373944685633);
      Complex complex1 = complex0.negate();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.createComplex(2113.2373944685633, 2113.2373944685633);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.INF.subtract(complex2);
      Complex complex6 = complex5.NaN.divide((-20.0));
      Complex complex7 = complex0.reciprocal();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.NaN.add((-20.0));
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.asin();
      Object object0 = complex11.readResolve();
      Complex complex13 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-716.595469765), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.divide((-716.595469765));
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.INF.negate();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex0.INF.multiply(0.0);
      Complex complex7 = complex5.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      double double0 = complex7.ONE.getArgument();
      ComplexField complexField1 = complex0.getField();
      ComplexField complexField2 = complex2.getField();
      Complex complex8 = complex2.multiply(complex4);
      Complex complex9 = complex0.multiply(complex4);
      Complex complex10 = complex5.exp();
      ComplexField complexField3 = complex10.getField();
      Complex complex11 = complex8.asin();
      Complex complex12 = complex11.add((-716.595469765));
      Complex complex13 = complex8.subtract(complex0);
      Complex complex14 = complex11.tan();
      Complex complex15 = complex3.ONE.exp();
      Complex complex16 = complex8.subtract(1732.0);
      Complex complex17 = complex3.reciprocal();
      Complex complex18 = complex9.multiply((-1397));
      Complex complex19 = complex18.ONE.asin();
      Complex complex20 = complex18.multiply(Double.POSITIVE_INFINITY);
      Complex complex21 = complex2.sin();
      Complex complex22 = complex19.divide(complex17);
      Complex complex23 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex1.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex1.INF.nthRoot(1086);
      Complex complex5 = complex4.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.asin();
      double double0 = complex1.getReal();
      int int0 = complex0.I.hashCode();
      Complex complex7 = complex1.multiply(complex0);
      double double1 = complex2.abs();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.NaN.divide(complex1);
      Complex complex10 = complex7.cosh();
      boolean boolean0 = complex10.equals(complex0);
      Complex complex11 = complex7.log();
      Complex complex12 = complex2.pow((double) 1086);
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.I.multiply((-3058));
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex4.ONE.sin();
      String string0 = complex4.NaN.toString();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex7.ONE.negate();
      Complex complex10 = complex8.INF.multiply(1739.79033484);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex11 = complex0.createComplex(4361.6595111605, (-39.9481));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(787.86007658528, 1.0);
      Complex complex1 = complex0.INF.subtract(787.86007658528);
      Complex complex2 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.valueOf(3871.8856767);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.NaN.multiply(695);
      Complex complex5 = complex1.ONE.cos();
      Complex complex6 = complex1.NaN.pow(complex5);
      Complex complex7 = complex5.ONE.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.I.equals((Object) null);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.multiply(3871.8856767);
      int int0 = complex2.hashCode();
      int int1 = complex2.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex10 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1.777477741241455, 1.777477741241455);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.NaN.conjugate();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex4.I.log();
      Complex complex8 = complex3.subtract(1.777477741241455);
      Complex complex9 = complex4.pow(1.777477741241455);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.multiply((-1746.2046445852711));
      Complex complex3 = complex0.ONE.cos();
      Object object0 = complex2.readResolve();
      double double0 = complex2.getImaginary();
      Complex complex4 = complex3.INF.multiply(0.0);
      boolean boolean1 = complex3.isInfinite();
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.add(complex2);
      Complex complex8 = complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.15693697333335876, 0.15693697333335876);
      Complex complex1 = complex0.ZERO.pow(0.15693697333335876);
      Complex complex2 = complex0.I.add(complex1);
      ComplexField complexField0 = complex0.ONE.getField();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.asin();
      List<Complex> list0 = complex3.I.nthRoot(767);
      double double0 = complex1.getImaginary();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex6.ZERO.add(Double.NaN);
      String string0 = complex7.ZERO.toString();
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.ONE.subtract(Double.NaN);
      Complex complex10 = Complex.valueOf(0.15693697333335876);
      Complex complex11 = complex10.multiply(1919.36);
      Complex complex12 = complex11.ZERO.sqrt1z();
      ComplexField complexField1 = complex8.INF.getField();
      Complex complex13 = complex5.I.createComplex(0.0, 1919.36);
      List<Complex> list1 = complex0.nthRoot(767);
      Complex complex14 = complex6.sin();
      Complex complex15 = complex3.asin();
      Complex complex16 = complex3.NaN.add(1.9409124727247465E-8);
      int int0 = complex7.hashCode();
      Complex complex17 = complex15.negate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.NaN.add((-636.224998));
      double double0 = complex2.abs();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2697.2391545896);
      Complex complex1 = new Complex((-891.1555518041566), (-891.1555518041566));
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.I.subtract((-1380.0999));
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.NaN.tan();
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex1.I.createComplex((-1364.641802601), (-1364.641802601));
      Complex complex7 = complex1.multiply(2697.2391545896);
      Complex complex8 = complex0.ONE.subtract((-891.1555518041566));
      Complex complex9 = Complex.valueOf((-891.1555518041566));
      Complex complex10 = complex1.cos();
      Complex complex11 = complex10.ONE.divide((-891.1555518041566));
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex12.INF.cos();
      Complex complex14 = complex0.pow(complex10);
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex15.exp();
      Complex complex17 = complex15.NaN.cos();
      Complex complex18 = complex3.asin();
      Object object0 = complex16.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 941.2);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-20.0));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.pow((-1038.0727));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2433.5054930527776, 2433.5054930527776);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex0);
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex0.ONE.asin();
      Complex complex7 = complex0.multiply(2667.0);
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex7.ZERO.log();
      Complex complex10 = complex2.atan();
      Complex complex11 = Complex.valueOf(2667.0);
      Complex complex12 = complex0.exp();
      boolean boolean0 = complex12.isInfinite();
      double double0 = complex11.getArgument();
      Complex complex13 = complex6.sinh();
      Complex complex14 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      List<Complex> list0 = complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = new Complex((-2255.45399118), 0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.INF.pow(0.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1.5573703263204683E-94);
      Complex complex2 = new Complex(1.5573703263204683E-94, 1.5573703263204683E-94);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex4.INF.add(complex3);
      double double0 = complex3.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex2.equals(complex1);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex0.ZERO.subtract(0.35745590925216675);
      Complex complex9 = complex7.INF.cosh();
      Complex complex10 = complex0.divide(6.283185307179586);
      Complex complex11 = complex10.multiply(1241.341077);
      Complex complex12 = complex5.conjugate();
      Complex complex13 = complex2.multiply(complex9);
      boolean boolean2 = complex0.isInfinite();
      Complex complex14 = complex12.createComplex(Double.NEGATIVE_INFINITY, 2.1775261204E-314);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.NaN.multiply((-1955));
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex1.I.sin();
      ComplexField complexField0 = complex1.ONE.getField();
      double double0 = complex2.getReal();
      Complex complex7 = complex2.multiply(Double.NaN);
      boolean boolean1 = complex1.isNaN();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.I.createComplex(Double.NaN, 1189.5021);
      Complex complex10 = complex7.divide(complex0);
      boolean boolean2 = complex2.isInfinite();
      Complex complex11 = complex10.I.reciprocal();
      Complex complex12 = complex6.asin();
      Complex complex13 = complex12.INF.cosh();
      double double1 = complex12.INF.abs();
      Complex complex14 = Complex.valueOf(6.283185307179586);
      double double2 = complex10.getImaginary();
      double double3 = complex14.getReal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1274.24583, 1274.24583);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.pow(1274.24583);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.multiply((-1945.88));
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.INF.pow(0.0);
      boolean boolean0 = complex0.INF.equals(complex5);
      Complex complex7 = complex3.INF.pow(1274.24583);
      Complex complex8 = complex3.I.sqrt();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex10.log();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex12.I.asin();
      Complex complex14 = complex2.multiply(complex12);
      Complex complex15 = complex4.cos();
      Complex complex16 = complex15.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-285.5110410635044));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.cos();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex4 = complex2.multiply(Double.NaN);
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex2.divide(Double.NaN);
      double double0 = complex3.abs();
      boolean boolean0 = complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(205.12);
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = new Complex(0.0, 205.12);
      Complex complex3 = complex2.I.divide(Double.NaN);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex2.createComplex(205.12, 205.12);
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.pow((-1.0));
      boolean boolean0 = complex1.ONE.equals(complex0);
      boolean boolean1 = complex1.isNaN();
      Complex complex3 = complex1.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex1.log();
      Object object0 = complex2.ONE.readResolve();
      Complex complex6 = complex1.NaN.subtract(complex2);
      Complex complex7 = Complex.valueOf((-1891.06836942), 0.0);
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex3.negate();
      ComplexField complexField1 = complex3.getField();
      Complex complex10 = complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(2.0, 3072.3473573403676);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ONE.divide(0.0);
      try { 
        complex3.nthRoot((-1723));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,723
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.divide(complex0);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.tanh();
      Object object0 = new Object();
      Object object1 = complex3.ZERO.readResolve();
      boolean boolean1 = complex3.I.equals(object0);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.createComplex(0.0, (-197.047083804372));
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.subtract(complex1);
      double double0 = complex0.abs();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.valueOf(0.0, (-1690.34667507));
      Complex complex8 = Complex.valueOf((-1690.34667507));
      boolean boolean0 = complex6.equals((Object) null);
      Complex complex9 = complex0.I.atan();
      Complex complex10 = complex9.I.createComplex((-4.503599627370496E15), (-4.503599627370496E15));
      Complex complex11 = complex10.add(0.0);
      Complex complex12 = complex4.pow(complex3);
      Complex complex13 = complex12.INF.sqrt();
      Complex complex14 = complex1.conjugate();
      Complex complex15 = complex14.multiply(332);
      List<Complex> list0 = complex5.nthRoot(332);
      Complex complex16 = complex1.divide(1.0);
      Complex complex17 = complex12.subtract(complex9);
      Complex complex18 = Complex.valueOf(1.0, 0.0);
      Complex complex19 = complex8.cos();
      Complex complex20 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1257.6728831), (-1257.6728831));
      Complex complex1 = Complex.valueOf((-1257.6728831));
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.INF.divide(1055.0);
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex0.I.negate();
      Complex complex6 = complex0.ONE.divide(complex1);
      Complex complex7 = complex0.ONE.pow(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex1.subtract((-1257.6728831));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.atan();
      double double1 = complex0.abs();
      Complex complex3 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex4.pow(complex3);
      Complex complex7 = complex6.divide(2282.7658824780874);
      double double2 = complex7.getArgument();
      List<Complex> list0 = complex1.nthRoot(2224);
      Complex complex8 = complex7.add(complex0);
      double double3 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      Complex complex1 = complex0.NaN.sqrt();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.sqrt();
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-370.234303508569));
      Complex complex2 = complex1.NaN.subtract(2344.484155708);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex0.multiply((-2410.5999310167));
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex0.ONE.cos();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex0.ONE.multiply((-1257));
      Complex complex9 = complex7.ONE.asin();
      double double0 = complex0.getReal();
      Complex complex10 = complex7.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1371.003534324717), (-1371.003534324717));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.NaN.subtract((-1371.003534324717));
      Complex complex4 = Complex.valueOf((-3478.777533));
      Complex complex5 = complex2.ZERO.reciprocal();
      Complex complex6 = Complex.valueOf(6.283185307179586);
      boolean boolean0 = complex6.I.equals(complex2);
      Complex complex7 = complex0.divide(6.283185307179586);
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex7.I.pow(6.283185307179586);
      Complex complex10 = complex9.ONE.multiply(129);
      Complex complex11 = complex5.NaN.acos();
      int int0 = complex5.ZERO.hashCode();
      Complex complex12 = complex5.ONE.multiply(1);
      Complex complex13 = complex1.cos();
      double double0 = complex13.ZERO.getArgument();
      Complex complex14 = complex5.NaN.multiply(1);
      Object object0 = complex0.readResolve();
      Complex complex15 = complex2.ONE.cosh();
      Complex complex16 = complex0.pow((double) 1);
      Complex complex17 = complex16.I.log();
      Complex complex18 = complex1.atan();
      Object object1 = complex11.readResolve();
      boolean boolean1 = complex1.isInfinite();
      Complex complex19 = complex0.atan();
      String string0 = complex5.toString();
      Complex complex20 = Complex.valueOf(2.6965931069318893E-8, (double) 1);
      Complex complex21 = complex20.INF.createComplex((-3478.777533), 0.0);
      Complex complex22 = Complex.valueOf((-1371.003534324717));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.subtract(0.0);
      boolean boolean0 = complex0.isInfinite();
      int int1 = complex0.hashCode();
      Complex complex3 = complex0.reciprocal();
      boolean boolean1 = complex0.isNaN();
      double double0 = complex1.getArgument();
      double double1 = complex3.getArgument();
      String string0 = complex3.toString();
      Complex complex4 = complex1.subtract(0.0);
      boolean boolean2 = complex0.equals(complex4);
      Object object0 = complex4.readResolve();
      boolean boolean3 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5278670787811279);
      Complex complex1 = complex0.ZERO.multiply(0.5278670787811279);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.pow(0.5278670787811279);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.NaN.add(0.0);
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex1.ZERO.reciprocal();
      Complex complex6 = complex0.add(complex1);
      boolean boolean0 = complex1.equals(complex5);
      ComplexField complexField1 = complex4.getField();
      Complex complex7 = complex5.multiply(complex1);
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex5.createComplex(0.0, 0.0);
      Complex complex13 = complex11.multiply((-1592));
      Complex complex14 = complex5.pow((double) (-1592));
      Complex complex15 = complex10.subtract((-2989.0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3618.6274691));
      Complex complex1 = new Complex((-3618.6274691), (-3618.6274691));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.I.multiply(complex2);
      Complex complex6 = Complex.valueOf((-3618.6274691));
      Complex complex7 = complex4.I.atan();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.ONE.exp();
      Complex complex11 = complex4.add((-3618.6274691));
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex1.add(complex7);
      Complex complex14 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.divide((-3705.3619562278));
      Complex complex3 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.valueOf((-20.0));
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex3.ZERO.abs();
      Object object1 = new Object();
      boolean boolean0 = complex3.I.equals(object1);
      double double1 = complex0.getReal();
      String string0 = complex1.toString();
      Complex complex4 = complex2.multiply((-1.8359244902596882E-7));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.ONE.multiply((-5.7055442971184756E-8));
      Complex complex4 = complex1.NaN.cos();
      double double0 = 0.0;
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex5.ONE.multiply(0.0);
      Complex complex9 = complex0.subtract((-3474.3672160501214));
      Complex complex10 = complex9.I.pow(complex7);
      Complex complex11 = complex5.exp();
      try { 
        complex0.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.I.multiply(complex0);
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      boolean boolean0 = complex0.NaN.equals(object0);
      Complex complex1 = complex0.multiply(1177);
      Complex complex2 = complex1.INF.add(20.0);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.NaN.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.1184473002226595E-10);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.divide((-443.3966376199));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.INF.conjugate();
      double double0 = complex1.abs();
      Complex complex5 = complex2.INF.subtract(3.1184473002226595E-10);
      Complex complex6 = complex1.I.cos();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex6.INF.createComplex(3.1184473002226595E-10, 1.0000000003118448);
      Complex complex9 = complex0.NaN.add(5.162248481759758E164);
      boolean boolean0 = complex0.equals((Object) null);
      boolean boolean1 = complex1.equals(complex2);
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex10.divide(complex4);
      Complex complex12 = complex4.sinh();
      boolean boolean2 = complex9.equals(complex12);
      Complex complex13 = complex6.exp();
      Complex complex14 = complex7.subtract(complex13);
      double double1 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2132.257060971514));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.I.add(20.0);
      Complex complex5 = complex0.exp();
      boolean boolean0 = complex5.ONE.equals(complex0);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.INF.multiply(1265);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex5.I.cosh();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.multiply(2.0);
      Complex complex10 = complex0.divide(2.0);
      Complex complex11 = complex1.exp();
      Complex complex12 = complex3.negate();
      Complex complex13 = complex9.divide(complex3);
      Complex complex14 = complex10.subtract(complex1);
      Complex complex15 = complex14.tanh();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.divide((-626.8));
      Complex complex3 = complex2.ZERO.negate();
      String string0 = complex1.toString();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1222.8694, 1222.8694);
      Complex complex1 = complex0.NaN.pow(2.0);
      String string0 = complex0.toString();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4330.4027937298, 0.0);
      Complex complex1 = complex0.ZERO.multiply(4330.4027937298);
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      double double0 = complex0.getReal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex4.INF.divide(2.0);
      Complex complex6 = complex5.ZERO.add(4330.4027937298);
      double double1 = complex3.INF.abs();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex1.asin();
      Object object0 = complex0.readResolve();
      try { 
        complex4.ONE.nthRoot((-400));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -400
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1975.4460411938073);
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.getReal();
      Complex complex1 = Complex.valueOf(1975.4460411938073);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      int int0 = complex1.ONE.hashCode();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = Complex.valueOf(0.0, (-1890.34349));
      Complex complex7 = complex2.divide(1438.0);
      Complex complex8 = complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex2.multiply(1644);
      Complex complex6 = complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.subtract(1955.724101775053);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1550.2));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.divide((-1308.0));
      Complex complex3 = complex2.ONE.sqrt();
      double double1 = complex3.ZERO.getArgument();
      double double2 = complex0.abs();
      Complex complex4 = complex2.createComplex(0.0, (-1308.0));
      Complex complex5 = Complex.valueOf((-1550.2), (-1550.2));
      Complex complex6 = complex2.acos();
      Complex complex7 = complex0.createComplex(1550.2, 92.418);
      Complex complex8 = complex0.atan();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(375.6175612, 6.846440394397547E-120);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.multiply(375.6175612);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.NaN.divide(1017.49022848769);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.add(complex0);
      ComplexField complexField0 = complex4.ONE.getField();
      int int0 = complex4.hashCode();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex2.sqrt1z();
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex6.divide(1017.49022848769);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.ONE.subtract(complex4);
      List<Complex> list0 = complex0.nthRoot(714);
      boolean boolean0 = complex3.equals(complex1);
      Complex complex6 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals("_tIvT|c~L39?");
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(2.3024744987487793);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.divide(2.3024744987487793);
      double double0 = complex1.getReal();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex1.multiply(2.3024744987487793);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(247.6123213188125);
      Complex complex1 = complex0.NaN.asin();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2945.0817565124));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.I.abs();
      double double1 = complex0.abs();
      Complex complex1 = Complex.valueOf(1202.580383, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.divide(3734.95742486604);
      Complex complex4 = complex3.ZERO.divide(1202.580383);
      String string0 = complex2.toString();
      Complex complex5 = complex1.createComplex((-159.5079685701944), (-3856.476939937631));
      Complex complex6 = complex4.cos();
      Complex complex7 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1136.995325298), (-1136.995325298));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.add((-50.2819902048));
      Complex complex3 = complex0.multiply((-1219));
      Complex complex4 = complex3.divide((-50.2819902048));
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(608.64949);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.divide(0.0);
      int int0 = complex4.hashCode();
      Complex complex5 = complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.6603899002075195);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.createComplex((-3388.7759616566), (-3388.7759616566));
      Complex complex4 = Complex.valueOf((-1254.0860622952));
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex3.ONE.pow(complex8);
      Complex complex10 = complex3.sin();
      double double0 = complex3.abs();
      Complex complex11 = complex6.createComplex((-1254.0860622952), (-3388.7759616566));
      Complex complex12 = complex10.atan();
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.7318417252599104E-185);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.negate();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-896.97));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.divide(complex0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.add((-1015.9298772916338));
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.I.cos();
      Complex complex5 = complex4.sqrt1z();
      double double0 = complex5.ONE.abs();
      Object object0 = complex0.ONE.readResolve();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2036.661413);
      Complex complex2 = complex0.NaN.divide(2.6396811618001066E-8);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1280.4827797115);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.multiply((-1844));
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.negate();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex5 = complex0.add(1280.4827797115);
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = Complex.valueOf((double) (-1844));
      boolean boolean0 = complex7.INF.equals(":F}");
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      double double0 = 0.0;
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex4.ZERO.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.NaN.pow(complex5);
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex7.INF.sqrt1z();
      try { 
        complex6.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.6634125709533691, 0.6634125709533691);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.add(1.2210872189854344E-232);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex2.ONE.negate();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex1.atan();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex3.multiply(complex7);
      Complex complex11 = complex5.pow((-623.16429563));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex0.nthRoot((-1449));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,449
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(2.3024744987487793);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-1896.0573166317663));
      Complex complex1 = complex0.NaN.pow((-1896.0573166317663));
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 886.76140469335);
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-366.27248727435), (-2969.8123256));
      Complex complex2 = complex1.INF.cosh();
      double double0 = complex2.abs();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = Complex.valueOf((-20.0), (-2739.9364));
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.I.multiply((-2146283688));
      double double0 = complex4.getArgument();
      int int0 = complex0.hashCode();
      double double1 = complex0.abs();
      Complex complex5 = Complex.valueOf((-2294.3024043964324), (-3722.40030195526));
      Complex complex6 = complex5.createComplex((-1084.33571515), (-2294.3024043964324));
      Complex complex7 = complex5.I.sqrt();
      Complex complex8 = complex0.subtract((-2753.9589805400187));
      boolean boolean0 = complex6.equals(complex0);
      String string0 = complex3.toString();
      Complex complex9 = complex8.ONE.divide(complex6);
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.I.subtract(complex6);
      Complex complex12 = complex1.multiply((-1084.33571515));
      Complex complex13 = complex3.add(complex8);
      Complex complex14 = complex13.ONE.cosh();
      Complex complex15 = complex10.NaN.pow(3.597600556519039E85);
      Complex complex16 = Complex.valueOf((-20.0));
      Complex complex17 = Complex.I;
      boolean boolean1 = complex16.ZERO.equals(complex17);
      Complex complex18 = complex12.divide(complex10);
      Complex complex19 = Complex.valueOf((-2753.9589805400187), (double) (-2146283688));
      Complex complex20 = complex16.exp();
      Complex complex21 = complex2.tanh();
      try { 
        complex17.nthRoot((-829));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -829
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.acos();
      double double0 = complex2.ZERO.getArgument();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex1.multiply(2277.2369536842);
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex3.subtract(2277.2369536842);
      Complex complex6 = complex3.I.reciprocal();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.NaN.createComplex(Double.POSITIVE_INFINITY, 1484.865483);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex8.NaN.asin();
      Complex complex11 = complex10.createComplex((-2612.0), Double.POSITIVE_INFINITY);
      Complex complex12 = complex7.multiply(7);
      Complex complex13 = complex4.multiply(complex2);
      Complex complex14 = complex0.NaN.subtract(4.923458004084836E41);
      Complex complex15 = complex13.divide(Double.POSITIVE_INFINITY);
      Complex complex16 = complex15.I.add(0.0);
      Complex complex17 = complex2.ONE.createComplex(7, (-1.0292817180691822E123));
      int int1 = complex16.ZERO.hashCode();
      Complex complex18 = complex12.NaN.multiply(7);
      Complex complex19 = complex0.multiply(896);
      double double1 = complex12.getArgument();
      boolean boolean0 = complex7.equals(complex16);
      Complex complex20 = complex18.divide(0.0);
      boolean boolean1 = complex8.equals(complex4);
      Complex complex21 = complex5.divide(complex17);
      Complex complex22 = complex8.multiply(896);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3752.778));
      Complex complex1 = complex0.INF.add((-2280.23700563));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex5.ZERO.divide(complex2);
      Complex complex7 = complex4.ONE.divide((-2280.23700563));
      boolean boolean0 = complex1.equals("KBu3");
      Complex complex8 = complex2.ZERO.asin();
      Complex complex9 = complex2.ZERO.add(complex0);
      Complex complex10 = complex9.NaN.pow(complex8);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex11.INF.multiply((-1));
      Complex complex13 = complex8.createComplex(1243.391868331666, (-5.150590480969644E-8));
      String string0 = complex11.toString();
      Complex complex14 = complex8.conjugate();
      Complex complex15 = Complex.valueOf((-3752.778), (double) (-1));
      Complex complex16 = complex1.tan();
      int int0 = complex2.hashCode();
      Complex complex17 = complex1.multiply((-2378));
      List<Complex> list0 = complex12.nthRoot(1);
      Complex complex18 = Complex.valueOf((-27.480974132926));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-1973.56385));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = Complex.valueOf((-464.2678), (-1973.56385));
      double double0 = complex1.ONE.getArgument();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.INF.subtract(complex3);
      Complex complex9 = complex1.multiply((-1247.14));
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex4.ONE.subtract((-47.0));
      Complex complex12 = complex1.divide(2176.838951890979);
      Complex complex13 = complex3.subtract(complex4);
      Complex complex14 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      String string0 = complex0.toString();
      Complex complex2 = complex0.ONE.sqrt1z();
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.subtract(1782.25204);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex4.subtract(372.3478483176023);
      Complex complex9 = complex8.ONE.pow(complex3);
      ComplexField complexField0 = complex9.I.getField();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex4.INF.add(complex5);
      int int0 = complex10.NaN.hashCode();
      Complex complex13 = complex11.ZERO.add(0.0);
      Complex complex14 = Complex.valueOf((-750.07434971651), (double) 1);
      Complex complex15 = complex14.INF.subtract(complex2);
      Complex complex16 = complex1.divide(complex4);
      double double0 = complex16.ZERO.getArgument();
      Complex complex17 = complex16.sin();
      boolean boolean0 = complex17.isNaN();
      Object object0 = complex2.readResolve();
      Complex complex18 = complex11.add(complex6);
      Complex complex19 = complex11.tan();
      Complex complex20 = complex3.tan();
      Complex complex21 = complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = Complex.valueOf(3.104297782658242E26);
      Complex complex4 = new Complex((-838.494811166), 5.280062387569078E130);
      Complex complex5 = complex3.I.multiply(complex4);
      Complex complex6 = Complex.valueOf(3.104297782658242E26);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.sqrt();
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex2.cos();
      Complex complex13 = complex4.add(complex5);
      Complex complex14 = complex11.divide(complex9);
      Complex complex15 = complex12.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex1.ZERO.nthRoot(1525);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ZERO.createComplex(0.0, 0.0);
      Complex complex5 = complex3.I.divide(complex0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex3.NaN.acos();
      Complex complex9 = complex1.NaN.tan();
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex10.I.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex12 = complex2.divide((double) 1525);
      Complex complex13 = complex12.NaN.createComplex(1525, 1525);
      Complex complex14 = complex0.sin();
      List<Complex> list1 = complex12.nthRoot(7);
      Complex complex15 = complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.ONE.createComplex((-1297.01255627), 0.0);
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.ONE.multiply(complex0);
      Complex complex8 = complex6.asin();
      Complex complex9 = complex7.NaN.pow(complex6);
      Complex complex10 = complex6.NaN.sinh();
      Complex complex11 = complex8.ZERO.add(complex1);
      Complex complex12 = complex11.I.conjugate();
      Complex complex13 = complex7.cos();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.sinh();
      double double0 = complex3.ZERO.abs();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex((-583.271));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.tan();
      String string0 = complex3.toString();
      Complex complex6 = complex0.tanh();
  }
}
