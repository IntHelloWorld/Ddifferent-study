/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:27:12 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.INF.atan();
      List<Complex> list0 = complex1.nthRoot(763);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.I.sin();
      Complex complex6 = complex0.add((double) 763);
      Complex complex7 = complex0.tan();
      double double0 = complex6.ONE.abs();
      Complex complex8 = complex6.ONE.sinh();
      int int0 = complex6.NaN.hashCode();
      Complex complex9 = complex0.I.sqrt1z();
      Complex complex10 = complex1.atan();
      Complex complex11 = Complex.valueOf(1.0, (-2057.6));
      Complex complex12 = complex11.I.subtract(2.0);
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex13.ONE.conjugate();
      double double1 = complex12.ONE.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex15 = complex2.subtract(complex3);
      Complex complex16 = complex5.negate();
      Complex complex17 = complex16.ONE.divide(complex2);
      Complex complex18 = complex15.INF.negate();
      Complex complex19 = Complex.valueOf(10.0);
      Complex complex20 = complex9.divide(6.283185307179586);
      Complex complex21 = complex15.pow(complex5);
      Complex complex22 = complex20.log();
      Complex complex23 = complex17.exp();
      Complex complex24 = complex1.subtract(complex0);
      Complex complex25 = complex12.multiply(763);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1.8112388823726723E41, 963.2436791264674);
      Complex complex1 = new Complex(1.8112388823726723E41, 1.8112388823726723E41);
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = new Complex((-1.8112388823726723E41));
      Complex complex6 = complex3.sin();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex7 = complex4.I.log();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.ONE.add(1.8112388823726723E41);
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex9.NaN.cosh();
      Complex complex12 = complex11.I.sqrt();
      Complex complex13 = complex6.INF.divide(complex7);
      Complex complex14 = Complex.I;
      boolean boolean0 = complex1.equals(complex14);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex15 = complex2.asin();
      ComplexField complexField1 = complex6.getField();
      Complex complex16 = new Complex((-1.8112388823726723E41), Double.POSITIVE_INFINITY);
      Complex complex17 = new Complex(1.8112388823726723E41, 1731.87508548);
      Complex complex18 = complex3.atan();
      Complex complex19 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2318.43395), (-2318.43395));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ZERO.pow(complex0);
      Complex complex6 = complex0.tanh();
      boolean boolean0 = complex0.ONE.equals(complex1);
      Complex complex7 = complex6.INF.multiply(1);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex6.subtract(0.0);
      Complex complex10 = complex9.subtract(complex2);
      Complex complex11 = complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ZERO.pow(complex0);
      ComplexField complexField0 = complex1.ZERO.getField();
      double double1 = complex0.ZERO.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.valueOf(4.2999935789083046E-8, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.I.asin();
      double double2 = complex6.I.abs();
      Complex complex7 = complex2.INF.pow(complex0);
      Complex complex8 = complex1.cos();
      Complex complex9 = complex0.add(complex2);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-2475.522));
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.cos();
      double double0 = complex2.INF.abs();
      double double1 = complex1.abs();
      Complex complex6 = complex1.NaN.createComplex(0.0, (-2475.522));
      Complex complex7 = complex0.acos();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex0.ONE.createComplex(0.0, (-2475.522));
      Complex complex9 = Complex.valueOf((-943.48494625));
      Complex complex10 = complex8.NaN.pow(complex5);
      Complex complex11 = complex0.multiply((-2125));
      Complex complex12 = complex3.I.acos();
      Complex complex13 = complex7.sqrt();
      Complex complex14 = complex3.I.multiply(complex12);
      Complex complex15 = complex13.subtract(complex8);
      Complex complex16 = complex3.sin();
      Complex complex17 = complex2.subtract(complex16);
      Complex complex18 = complex17.I.pow(complex10);
      Complex complex19 = complex5.add(Double.POSITIVE_INFINITY);
      Complex complex20 = complex6.tanh();
      Complex complex21 = complex3.sin();
      Complex complex22 = complex21.INF.multiply((-2125));
      Complex complex23 = complex9.pow(complex1);
      Complex complex24 = complex12.divide(complex16);
      boolean boolean1 = complex24.isNaN();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.I.multiply(4.0447634595724164E195);
      double double0 = complex0.ZERO.abs();
      Complex complex4 = complex0.createComplex((-1708.6465332391), 0.0);
      Complex complex5 = complex4.multiply((-1708.6465332391));
      double double1 = complex4.getArgument();
      boolean boolean0 = complex5.isNaN();
      Complex complex6 = Complex.valueOf(0.0, 2.757030889767851E-8);
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex4.multiply(complex6);
      boolean boolean1 = complex0.isInfinite();
      Complex complex9 = complex6.I.multiply(2.757030889767851E-8);
      try { 
        complex9.ONE.nthRoot((-3181));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,181
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.exp();
      List<Complex> list0 = complex1.nthRoot(282);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.ZERO.add(complex1);
      Complex complex6 = complex3.ONE.createComplex(282, 854.6812686801863);
      Complex complex7 = complex3.ONE.reciprocal();
      Complex complex8 = complex5.INF.log();
      Complex complex9 = complex5.I.multiply((double) 282);
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = Complex.valueOf((double) 282);
      Complex complex12 = complex3.I.reciprocal();
      Complex complex13 = complex2.cos();
      Complex complex14 = complex13.I.cosh();
      Complex complex15 = complex14.INF.reciprocal();
      Complex complex16 = complex13.INF.subtract(0.0);
      Complex complex17 = complex13.pow(complex2);
      Complex complex18 = complex1.add(complex0);
      Complex complex19 = complex0.atan();
      Complex complex20 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      double double0 = complex13.getReal();
      Complex complex21 = complex13.tan();
      Complex complex22 = complex17.cosh();
      boolean boolean0 = complex16.isNaN();
      Complex complex23 = complex22.reciprocal();
      Complex complex24 = Complex.valueOf(Double.NaN);
      double double1 = complex11.getReal();
      Complex complex25 = complex22.cos();
      Complex complex26 = complex21.add(complex19);
      Complex complex27 = complex24.reciprocal();
      Complex complex28 = complex22.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1102.537474393);
      boolean boolean0 = complex0.NaN.equals("");
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.multiply(1.0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.multiply(881);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex0.divide((double) 881);
      Complex complex10 = complex1.subtract(8.854771398921902E-70);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 436.230516141975;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, (-4042.5299899));
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.INF.multiply(complex2);
      Complex complex4 = complex1.createComplex(601.1212, 964.69980287291);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.NaN.divide(complex3);
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex6.pow(0.0);
      Complex complex9 = complex4.cosh();
      List<Complex> list0 = complex1.ONE.nthRoot(561);
      Complex complex10 = complex1.multiply((-4042.5299899));
      Complex complex11 = complex9.add(830.0);
      Complex complex12 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1718.9644216349343));
      Complex complex1 = complex0.ZERO.add((-1718.9644216349343));
      Complex complex2 = complex0.add(2131.0);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.NaN.acos();
      Complex complex6 = complex1.INF.sqrt();
      Complex complex7 = complex6.I.add(693.936);
      Complex complex8 = complex0.ONE.cosh();
      Complex complex9 = Complex.valueOf(2131.0);
      boolean boolean0 = complex9.equals(complex1);
      Complex complex10 = complex1.multiply(complex0);
      Complex complex11 = complex10.I.divide(693.936);
      Complex complex12 = complex9.ONE.atan();
      Complex complex13 = complex1.subtract(762.2854719547);
      Complex complex14 = complex13.ZERO.divide(complex9);
      Complex complex15 = complex13.ONE.log();
      Complex complex16 = complex1.cos();
      Complex complex17 = complex0.pow(complex14);
      Complex complex18 = complex3.atan();
      Complex complex19 = Complex.valueOf((-228.3));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(516.377481963116);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex2.NaN.cos();
      Complex complex6 = complex5.NaN.subtract(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex2.I.subtract(0.0);
      double double0 = complex9.INF.abs();
      Complex complex10 = complex5.INF.multiply(516.377481963116);
      Complex complex11 = complex4.ONE.atan();
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex4.multiply(complex0);
      Complex complex14 = complex13.INF.sin();
      boolean boolean1 = complex13.isNaN();
      Complex complex15 = complex7.createComplex(516.377481963116, 516.377481963116);
      Complex complex16 = complex15.reciprocal();
      Complex complex17 = complex4.multiply((-1676));
      Complex complex18 = complex17.INF.reciprocal();
      Complex complex19 = complex17.INF.acos();
      Complex complex20 = complex1.divide(516.377481963116);
      double double1 = complex12.INF.abs();
      boolean boolean2 = complex20.isNaN();
      Complex complex21 = complex5.cos();
      double double2 = complex21.getArgument();
      Complex complex22 = complex17.multiply(0.0);
      boolean boolean3 = complex5.isInfinite();
      Complex complex23 = complex12.acos();
      Complex complex24 = complex11.conjugate();
      try { 
        complex14.nthRoot((-758));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -758
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2512.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-400.0));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.sqrt();
      double double0 = complex4.ONE.getArgument();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex4.add(complex1);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex5.subtract(2291.94);
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex6.subtract(complex2);
      Complex complex12 = complex2.createComplex(0.0, 0.0);
      Complex complex13 = complex12.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(36.67, 36.67);
      Complex complex1 = complex0.tan();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.pow(36.67);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-809.68), 1930.0);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ONE.add((-737.78967822));
      double double0 = 0.0;
      double double1 = Double.NaN;
      Complex complex3 = complex2.I.multiply(Double.NaN);
      double double2 = (-3220.738261953);
      Complex complex4 = complex0.I.createComplex((-3220.738261953), 240.43467085);
      Complex complex5 = complex1.ZERO.divide(0.0);
      Complex complex6 = complex0.atan();
      int int0 = complex6.ZERO.hashCode();
      int int1 = complex0.hashCode();
      Complex complex7 = complex2.INF.multiply(0.0);
      Complex complex8 = complex1.multiply(complex2);
      double double3 = complex8.getReal();
      Complex complex9 = complex0.ONE.sqrt1z();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex2.divide(complex6);
      int int2 = 665;
      List<Complex> list0 = complex6.nthRoot(665);
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.add(3.163163464591171E-136);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex3.ONE.subtract(complex2);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1540.447859));
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex7 = complex4.ONE.exp();
      int int0 = complex3.ZERO.hashCode();
      Complex complex8 = Complex.valueOf(3.163163464591171E-136, 3.163163464591171E-136);
      Complex complex9 = Complex.valueOf(3.163163464591171E-136, 0.0);
      Complex complex10 = complex1.divide(613.434300169);
      Complex complex11 = complex10.INF.add(complex4);
      Complex complex12 = complex2.sin();
      Complex complex13 = complex4.INF.cos();
      Complex complex14 = complex2.I.atan();
      Complex complex15 = complex14.ZERO.log();
      double double0 = complex12.getReal();
      double double1 = complex2.getReal();
      Complex complex16 = complex3.conjugate();
      Complex complex17 = complex7.asin();
      Complex complex18 = complex11.subtract(complex9);
      Complex complex19 = complex3.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.cos();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.createComplex(325.87, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.sqrt1z();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(5.650063324725722E-8, 3.1263099916916113E178);
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.I.createComplex(1.5707963267948966, 0.0);
      Complex complex5 = complex1.ONE.reciprocal();
      int int0 = complex0.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.I.cos();
      Complex complex7 = complex0.add(9.608060944124859E-295);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex7.ZERO.multiply(complex5);
      ComplexField complexField0 = complex8.NaN.getField();
      Object object0 = new Object();
      Complex complex10 = complex8.I.pow(3.1263099916916113E178);
      boolean boolean0 = complex8.ZERO.equals(object0);
      Complex complex11 = complex8.INF.tanh();
      int int1 = complex8.ZERO.hashCode();
      int int2 = complex7.hashCode();
      Complex complex12 = complex5.add(complex0);
      Complex complex13 = complex5.conjugate();
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex0.ONE.cosh();
      Complex complex16 = complex8.sinh();
      Complex complex17 = complex11.sqrt();
      double double2 = complex10.getArgument();
      Complex complex18 = complex9.divide(complex11);
      Complex complex19 = complex1.cosh();
      Complex complex20 = complex11.add(complex10);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = new Complex(20.0, Double.NaN);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.ZERO.conjugate();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex4.isNaN();
      String string0 = complex0.toString();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.sqrt();
      boolean boolean2 = complex7.isInfinite();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex6.multiply(complex4);
      double double0 = complex3.getReal();
      Complex complex10 = complex4.multiply(complex8);
      Complex complex11 = complex10.log();
      Complex complex12 = complex9.divide(20.0);
      Complex complex13 = Complex.valueOf((-4.27932550865546E-8), (-1.59487803965136));
      Complex complex14 = complex3.createComplex(638.0970854759, 20.0);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex15 = complex6.sinh();
      Complex complex16 = complex9.pow(174.1343);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(733.728283409);
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.divide(complex0);
      String string0 = complex0.INF.toString();
      Complex complex3 = complex0.INF.multiply(7);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ZERO.cos();
      String string1 = complex5.NaN.toString();
      Complex complex6 = complex4.NaN.pow(complex1);
      Complex complex7 = Complex.valueOf(733.728283409);
      Complex complex8 = complex4.I.cosh();
      Complex complex9 = Complex.ZERO;
      boolean boolean0 = complex8.I.equals(complex9);
      Complex complex10 = complex1.NaN.createComplex((-2081.1276), (-1733.524207843752));
      Complex complex11 = complex10.NaN.asin();
      Complex complex12 = complex0.subtract(complex1);
      double double1 = complex0.I.getArgument();
      double double2 = complex4.getImaginary();
      Complex complex13 = complex3.negate();
      Complex complex14 = complex7.exp();
      Complex complex15 = complex14.multiply(complex8);
      try { 
        complex14.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 7;
      Complex complex1 = complex0.I.atan();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.INF.acos();
      String string1 = complex2.INF.toString();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex0.INF.multiply(7);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex5.pow((-1.4265564976097062E122));
      double double0 = complex0.getImaginary();
      try { 
        complex5.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.INF.tan();
      Complex complex7 = complex4.INF.add(0.0);
      Complex complex8 = complex5.I.tanh();
      Complex complex9 = complex8.ONE.divide(0.0);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex1.multiply(1);
      Complex complex12 = complex0.negate();
      Complex complex13 = complex12.NaN.acos();
      Complex complex14 = complex4.I.divide(Double.POSITIVE_INFINITY);
      Complex complex15 = complex5.reciprocal();
      Complex complex16 = complex15.pow(0.0);
      boolean boolean0 = complex15.isNaN();
      Complex complex17 = complex14.ONE.divide(complex5);
      Complex complex18 = complex4.tan();
      Complex complex19 = complex15.add(0.0);
      Complex complex20 = complex5.pow(complex4);
      double double0 = complex14.getReal();
      Complex complex21 = complex1.I.sqrt();
      Complex complex22 = complex1.pow(complex5);
      Complex complex23 = complex11.multiply((double) 1);
      Complex complex24 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(233.102554394051, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.asin();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex1.reciprocal();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.divide(2997.364);
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.INF.subtract(complex4);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex3.asin();
      double double1 = complex9.abs();
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex2.tan();
      Complex complex14 = complex9.conjugate();
      Complex complex15 = complex1.acos();
      Complex complex16 = Complex.ZERO;
      Complex complex17 = complex7.add(complex16);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex18 = complex7.pow(2997.364);
      Complex complex19 = complex4.reciprocal();
      Complex complex20 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex21 = complex12.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      double double0 = complex0.I.abs();
      Complex complex1 = Complex.valueOf((-20.0));
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.ONE.negate();
      Object object0 = complex2.INF.readResolve();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex4.NaN.tanh();
      Complex complex7 = complex5.ZERO.conjugate();
      int int0 = complex7.hashCode();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.I.sinh();
      Complex complex10 = complex0.acos();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex1.equals(complex7);
      Complex complex11 = complex8.asin();
      Complex complex12 = complex3.acos();
      Complex complex13 = Complex.valueOf((-20.0), (-20.0));
      Complex complex14 = complex11.exp();
      Complex complex15 = complex3.pow(complex1);
      Complex complex16 = complex6.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.INF.sqrt();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.ONE.createComplex(30.65384605888952, (-411.489322745));
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.valueOf(30.65384605888952);
      Complex complex7 = complex0.ONE.add(complex5);
      boolean boolean1 = complex1.equals("(Infinity, Infinity)");
      Complex complex8 = complex0.exp();
      Complex complex9 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1792.9), (-616.82087));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.ZERO.divide((-616.82087));
      Complex complex4 = complex0.ONE.divide(complex1);
      String string0 = complex2.I.toString();
      Complex complex5 = complex3.NaN.log();
      double double0 = complex2.abs();
      Complex complex6 = complex2.cos();
      String string1 = complex4.toString();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.INF.subtract(complex7);
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex5.subtract((-1792.9));
      Complex complex10 = complex1.exp();
      Complex complex11 = complex6.subtract((-616.82087));
      String string2 = complex4.toString();
      Complex complex12 = complex4.subtract((-616.82087));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.divide(complex0);
      double double0 = complex0.abs();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.exp();
      String string0 = complex4.toString();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.I.pow(complex5);
      Complex complex8 = Complex.valueOf(1692.1874287681894);
      Complex complex9 = complex8.I.multiply(complex2);
      Complex complex10 = complex0.tan();
      Complex complex11 = complex6.multiply(0.0);
      Complex complex12 = complex1.log();
      Complex complex13 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.ZERO.add(0.0);
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.valueOf(853.5936, 0.0);
      String string0 = complex4.toString();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex5.divide((-1029.39659510346));
      Complex complex11 = complex3.add(0.0);
      Complex complex12 = Complex.I;
      Complex complex13 = complex11.ONE.reciprocal();
      Complex complex14 = complex12.I.pow((-1981.081912102));
      Complex complex15 = complex11.pow(complex12);
      Complex complex16 = complex2.pow((-981.4925105));
      double double0 = complex16.NaN.getArgument();
      Complex complex17 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-559.9658028469));
      Complex complex1 = complex0.ZERO.multiply((-4176));
      Complex complex2 = complex0.I.multiply(37);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.I.sqrt();
      List<Complex> list0 = complex3.nthRoot(37);
      Complex complex6 = complex0.subtract((double) 37);
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex0.createComplex(2509.85869, 0.31489628553390503);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex4.add(complex8);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      double double1 = 2397.053624161793;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(3208.0746635200417, (-4228.35));
      Complex complex2 = complex0.ONE.multiply(3720);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.cosh();
      int int0 = complex4.hashCode();
      Complex complex5 = complex1.createComplex((-4228.35), 3208.0746635200417);
      Complex complex6 = complex1.multiply(3208.0746635200417);
      Complex complex7 = Complex.valueOf((double) 3720);
      Complex complex8 = complex3.I.add((-4228.35));
      Complex complex9 = complex6.tan();
      Complex complex10 = complex9.createComplex(3720, (-535.6579257267263));
      Complex complex11 = complex6.pow(complex7);
      Complex complex12 = complex3.add(0.0);
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex13.multiply((-4228.35));
      Complex complex15 = complex13.add(0.0);
      Complex complex16 = complex11.multiply(3720);
      Complex complex17 = complex7.conjugate();
      Complex complex18 = complex3.pow(3208.0746635200417);
      Complex complex19 = complex18.NaN.exp();
      Complex complex20 = complex2.acos();
      Complex complex21 = complex5.cosh();
      Complex complex22 = complex10.pow(complex19);
      double double0 = complex18.getReal();
      Complex complex23 = complex17.multiply(complex21);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(699.5, 699.5);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.subtract(complex1);
      List<Complex> list0 = complex0.nthRoot(583);
      Complex complex4 = complex1.pow((double) 583);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ONE.divide(1954.773756);
      Complex complex2 = complex1.NaN.subtract((-1.0));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.INF.asin();
      List<Complex> list0 = complex3.INF.nthRoot(17);
      Complex complex5 = new Complex(2861.514702);
      Complex complex6 = complex5.INF.divide(complex2);
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex7.NaN.sqrt1z();
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.pow(1.905394922122271E10);
      ComplexField complexField0 = complex1.getField();
      double double0 = complex1.abs();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.INF.cos();
      int int0 = complex3.NaN.hashCode();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.pow((-6243.59));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex3.NaN.subtract(687.88);
      Object object0 = complex3.readResolve();
      Complex complex9 = complex1.cos();
      Object object1 = complex9.readResolve();
      Complex complex10 = Complex.valueOf((-6243.59), (-2171.90238437));
      double double0 = complex10.getArgument();
      Complex complex11 = complex8.subtract(1337.6361);
      double double1 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1220.7964041));
      Complex complex2 = complex0.add(complex1);
      String string0 = complex1.ONE.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex1.conjugate();
      boolean boolean0 = complex0.equals(complex3);
      double double0 = complex2.INF.abs();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.INF.divide(complex0);
      Complex complex8 = complex0.sqrt();
      double double1 = complex5.getImaginary();
      int int0 = complex3.ZERO.hashCode();
      Complex complex9 = complex2.add(complex8);
      Complex complex10 = Complex.valueOf(-0.0, (-3.2330960700986594E-292));
      Complex complex11 = complex6.INF.multiply(0);
      Complex complex12 = complex10.createComplex(2979.81909164797, (-1435.4112171348));
      Complex complex13 = complex6.multiply((-3.2330960700986594E-292));
      Complex complex14 = complex5.subtract(complex6);
      Complex complex15 = complex8.subtract(Double.POSITIVE_INFINITY);
      Complex complex16 = complex4.cosh();
      Complex complex17 = complex1.sqrt();
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex8.equals("(1.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1082.9256), 0.0);
      double double0 = 549.1;
      Complex complex1 = complex0.NaN.subtract(549.1);
      double double1 = complex1.ZERO.getArgument();
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2498.880647464028);
      Complex complex1 = complex0.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = complex3.ONE.acos();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex5 = complex1.pow((-20.0));
      Complex complex6 = complex5.INF.pow(5.377173488599035E239);
      Complex complex7 = complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add(2360.0938834829);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.log();
      double double0 = complex2.I.abs();
      Complex complex4 = complex0.ONE.multiply(17);
      boolean boolean0 = complex0.NaN.equals(complex2);
      Complex complex5 = Complex.valueOf((-3392.395), (-3392.395));
      int int0 = complex5.hashCode();
      boolean boolean1 = complex0.equals(complex5);
      List<Complex> list0 = complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1047.7315306393218));
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-4764.0));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-1553));
      Complex complex2 = Complex.valueOf((-2637.972100801073), (-2637.972100801073));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex0.cosh();
      String string0 = complex3.toString();
      String string1 = complex0.toString();
      Complex complex8 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(1004.109890642, 1004.109890642);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.I.sqrt();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex5 = complex2.pow(2086.8625);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex5.I.equals(object0);
      Complex complex6 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1868.76));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.subtract((-1868.76));
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex1.log();
      Complex complex7 = complex2.sinh();
      String string0 = complex2.toString();
      Complex complex8 = complex3.createComplex((-1958.731652061982), 9.098790295810902E-8);
      Complex complex9 = complex8.I.subtract(complex4);
      String string1 = complex4.toString();
      Complex complex10 = complex6.exp();
      try { 
        complex6.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.INF.add(0.0);
      Complex complex4 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ONE.add((-358.5001));
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex1.multiply(5766.054882446633);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex2.exp();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex4.tanh();
      double double1 = complex9.abs();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex6.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1312.637221551295));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.NaN.subtract(complex2);
      ComplexField complexField1 = complex0.getField();
      Complex complex7 = complex0.subtract((-1312.637221551295));
      Complex complex8 = complex5.asin();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex5.log();
      int int0 = (-1092);
      try { 
        complex4.nthRoot((-1092));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,092
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3094.6807709));
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1711.891, 2034.9);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cos();
      Object object1 = new Object();
      Complex complex2 = complex1.NaN.asin();
      Object object2 = complex2.ONE.readResolve();
      Complex complex3 = complex0.ZERO.asin();
      boolean boolean0 = complex1.equals(object1);
      double double0 = complex1.getReal();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-2318.43395), (-2318.43395));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.tanh();
      boolean boolean0 = complex0.ONE.equals(complex1);
      Complex complex6 = complex5.INF.multiply(1);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex5.subtract(0.0);
      Complex complex9 = complex8.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex4 = Complex.valueOf(2366.0092981, 2366.0092981);
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex3.I.divide(2366.0092981);
      Complex complex7 = complex3.cosh();
      Complex complex8 = Complex.valueOf(2366.0092981, (-97.79590196));
      boolean boolean0 = complex1.isNaN();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.ZERO.pow(20.0);
      Complex complex4 = complex3.ZERO.createComplex(20.0, 0.0);
      String string0 = complex3.INF.toString();
      Complex complex5 = complex4.NaN.subtract(complex1);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.ZERO.conjugate();
      String string1 = complex4.toString();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2138.5432762056703, (-1353.862433955605));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.multiply(255);
      Complex complex3 = Complex.valueOf((-20.0), (-20.0));
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.add((-1353.862433955605));
      Complex complex6 = complex4.sin();
      Complex complex7 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1430.712412308));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.divide(Double.NaN);
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.ZERO.createComplex(Double.NaN, 727.207596107);
      Complex complex10 = complex8.I.log();
      int int0 = complex8.I.hashCode();
      Complex complex11 = complex7.ONE.multiply((-1430.712412308));
      Complex complex12 = complex0.pow((-1430.712412308));
      Complex complex13 = complex7.cos();
      Complex complex14 = Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.561702766944378E139);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.sin();
      boolean boolean0 = complex0.ZERO.equals(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.INF.divide((-1252.0));
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex3.ONE.pow(complex0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex7.I.exp();
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex10.ONE.multiply(complex0);
      boolean boolean1 = complex0.equals(complex1);
      Complex complex12 = complex7.atan();
      Complex complex13 = complex6.add(complex7);
      Complex complex14 = complex13.I.pow(complex4);
      Complex complex15 = complex3.acos();
      Object object0 = complex8.readResolve();
      Complex complex16 = complex10.multiply(2.561702766944378E139);
      boolean boolean2 = complex3.isInfinite();
      double double1 = complex16.abs();
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex17 = complex3.sqrt1z();
      Complex complex18 = complex1.reciprocal();
      Complex complex19 = Complex.valueOf((double) 1, 0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.subtract((-176.64901699));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tanh();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.sqrt();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = (-1160);
      try { 
        complex0.ONE.nthRoot((-1160));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,160
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.abs();
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.multiply(complex0);
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(1810.061591);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.NaN.add(1810.061591);
      Complex complex7 = complex5.INF.cos();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex8 = Complex.valueOf((-4580.41941));
      Complex complex9 = complex1.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.pow(0.0);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex2 = Complex.valueOf((-514.902668240029), 0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 3867.0);
      Complex complex1 = complex0.INF.add(Double.NaN);
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex1.multiply(1);
      Object object0 = complex0.readResolve();
      Complex complex4 = Complex.valueOf(0.0, Double.NaN);
      Complex complex5 = Complex.valueOf(3.323458344853057E-8, Double.NaN);
      Complex complex6 = Complex.valueOf(3867.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-493.1284));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex0.sqrt();
      boolean boolean0 = complex4.ZERO.equals(complex0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex5.NaN.reciprocal();
      Complex complex9 = complex7.ONE.tan();
      Complex complex10 = complex9.NaN.acos();
      List<Complex> list0 = complex10.ONE.nthRoot(1093);
      Complex complex11 = complex9.tan();
      Complex complex12 = complex11.NaN.sqrt1z();
      Complex complex13 = complex7.NaN.tan();
      Complex complex14 = complex13.NaN.add(complex8);
      Complex complex15 = complex13.ZERO.divide((-493.1284));
      Complex complex16 = complex1.atan();
      Complex complex17 = complex1.tanh();
      Complex complex18 = complex4.add(1697.646079979261);
      Complex complex19 = complex16.sin();
      Complex complex20 = complex0.pow(0.0875862700108075);
      Complex complex21 = complex19.ONE.pow(0.27233843829976273);
      Complex complex22 = complex21.INF.asin();
      Complex complex23 = complex6.divide(0.8619057550743663);
      Complex complex24 = complex9.multiply(complex16);
      Complex complex25 = complex19.multiply((-2143146527));
      Object object0 = complex4.readResolve();
      Complex complex26 = complex16.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex4.INF.subtract((-20.0));
      Complex complex6 = complex0.multiply((-548));
      Complex complex7 = complex1.divide((-20.0));
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex7.createComplex(2060.42345, (-1453.083529));
      Complex complex10 = complex0.multiply(322);
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex4.reciprocal();
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex9.log();
      Complex complex14 = complex13.ONE.subtract(complex2);
      Complex complex15 = complex1.asin();
      Complex complex16 = complex10.atan();
      Complex complex17 = complex9.multiply((-548));
      double double0 = complex7.abs();
      Complex complex18 = complex9.reciprocal();
      double double1 = complex7.getImaginary();
      Complex complex19 = complex18.createComplex(322, (-548));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.pow((-1842.8368188));
      Complex complex4 = complex0.I.divide(0.0);
      List<Complex> list0 = complex0.ZERO.nthRoot(1418);
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex0.add(1934.499725636374);
      int int0 = complex6.INF.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex6.INF.subtract(complex0);
      Complex complex8 = complex0.atan();
      String string0 = complex0.toString();
      Complex complex9 = complex6.ONE.add(512.60321);
      List<Complex> list1 = complex0.nthRoot(1418);
      Complex complex10 = complex6.asin();
      boolean boolean1 = complex10.ONE.equals(list0);
      Complex complex11 = complex6.multiply(1418);
      Complex complex12 = complex4.tan();
      Complex complex13 = complex8.divide(277.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(400.0);
      Complex complex1 = complex0.createComplex(400.0, 5004.29707);
      double double0 = complex0.I.abs();
      Complex complex2 = new Complex(1.523329496383667, 1.523329496383667);
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.ZERO.atan();
      Complex complex8 = complex1.subtract(complex6);
      Complex complex9 = complex1.createComplex(5004.29707, 400.0);
      Complex complex10 = complex0.atan();
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex8.exp();
      Complex complex13 = complex7.tan();
      Complex complex14 = complex13.ONE.exp();
      Complex complex15 = complex2.acos();
      try { 
        complex8.nthRoot((-53));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -53
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-4.342161053332263E165), (-4.342161053332263E165));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.NaN.pow(0.0);
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex4.INF.exp();
      Complex complex8 = complex0.ONE.createComplex(6.283185307179586, 6.283185307179586);
      Object object0 = complex0.readResolve();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex9.NaN.tan();
      boolean boolean0 = complex10.INF.equals(complex8);
      Complex complex11 = complex9.ZERO.reciprocal();
      Complex complex12 = complex3.subtract((-1186.7));
      double double0 = complex11.I.getArgument();
      Complex complex13 = complex6.NaN.tanh();
      Complex complex14 = Complex.valueOf(1.5216652792122652E-7, 1.5216652792122652E-7);
      Complex complex15 = complex6.multiply((-1086));
      Complex complex16 = complex0.ZERO.negate();
      Complex complex17 = complex15.I.createComplex(0.0, 0.0);
      Complex complex18 = complex17.ONE.tanh();
      boolean boolean1 = complex15.equals("");
      boolean boolean2 = complex5.equals(complex2);
      Complex complex19 = complex3.multiply(complex6);
      String string0 = complex19.ONE.toString();
      Complex complex20 = complex19.exp();
      Complex complex21 = complex18.createComplex((-686.27), 0.0);
      Complex complex22 = complex21.I.tan();
      boolean boolean3 = complex15.isInfinite();
      Object object1 = complex19.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-749.9729));
      List<Complex> list0 = complex0.ONE.nthRoot(100);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = Complex.valueOf((-749.9729), 0.0);
      double double0 = complex4.getImaginary();
      Complex complex5 = complex4.ONE.createComplex(0.0, (-749.9729));
      Complex complex6 = complex4.log();
      double double1 = complex6.abs();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2136.05, 2136.05);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.NaN.multiply((-2080.0893));
      Complex complex5 = complex4.ZERO.pow(complex1);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.ZERO.sin();
      Complex complex8 = complex7.NaN.multiply(315);
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex10.I.log();
      Complex complex12 = complex11.ZERO.divide(2136.05);
      Complex complex13 = complex0.createComplex(2136.05, 2136.05);
      Complex complex14 = Complex.valueOf(2136.05);
      Complex complex15 = complex1.I.sinh();
      Complex complex16 = complex14.cosh();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex17 = complex16.cos();
      Complex complex18 = complex16.tan();
      Complex complex19 = complex17.divide((-2080.0893));
      Complex complex20 = complex3.atan();
      double double0 = complex3.getReal();
      String string0 = complex20.toString();
      Complex complex21 = complex19.subtract(complex20);
      int int0 = complex11.hashCode();
      Complex complex22 = complex21.pow(complex18);
      boolean boolean1 = complex16.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1.8112388823726723E41, 963.2436791264674);
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex2.sin();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex6 = complex3.I.log();
      Complex complex7 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.ONE.add(1.8112388823726723E41);
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex9.NaN.cosh();
      Complex complex12 = complex11.I.sqrt();
      Complex complex13 = complex5.INF.divide(complex6);
      Object object1 = complex5.readResolve();
      boolean boolean0 = complex7.equals(object1);
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex14 = complex1.asin();
      ComplexField complexField1 = complex5.getField();
      Complex complex15 = complex6.divide((-6.269066061111782E-9));
      Complex complex16 = complex9.multiply(1731.87508548);
      Complex complex17 = complex2.atan();
      Complex complex18 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex1.NaN.log();
      Complex complex5 = complex0.sinh();
      double double1 = complex5.getImaginary();
      String string0 = complex5.INF.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = complex3.pow(complex4);
      Complex complex8 = complex3.NaN.multiply(924);
      Complex complex9 = complex0.log();
      Complex complex10 = complex3.negate();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex0.NaN.multiply(474);
      Complex complex12 = complex10.log();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex8.ZERO.tanh();
      Complex complex15 = complex7.I.cosh();
      Complex complex16 = complex15.INF.negate();
      double double2 = complex10.getArgument();
      try { 
        complex10.nthRoot((-542));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -542
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3555502536444713E-266);
      Complex complex1 = complex0.I.negate();
      List<Complex> list0 = complex1.ZERO.nthRoot(804);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex1.INF.multiply(complex3);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.valueOf((-164.201));
      Complex complex7 = complex2.asin();
      Complex complex8 = complex4.sin();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex9 = Complex.valueOf(1.3555502536444713E-266);
      List<Complex> list1 = complex0.nthRoot(7);
      Complex complex10 = Complex.valueOf(1.3555502536444713E-266);
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex10.sin();
      Complex complex13 = Complex.valueOf(1.3555502536444713E-266, 1320.55212251091);
      Complex complex14 = complex13.I.reciprocal();
      List<Complex> list2 = complex0.nthRoot(1276);
      Complex complex15 = complex2.divide((double) 7);
      Complex complex16 = complex15.I.log();
      double double0 = complex0.getReal();
      Complex complex17 = Complex.NaN;
      boolean boolean0 = complex9.equals(complex17);
      double double1 = complex9.getArgument();
      Complex complex18 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.NaN.cosh();
      double double0 = complex5.getReal();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.ONE.multiply(complex5);
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex4.sin();
      Complex complex11 = complex8.divide(complex10);
      boolean boolean0 = complex0.equals(complex7);
      Complex complex12 = complex4.subtract(0.0);
      Complex complex13 = complex12.INF.acos();
      try { 
        complex13.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
