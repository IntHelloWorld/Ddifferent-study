/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:20:28 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.pow(Double.NaN);
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.multiply(5033);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.pow(0.0);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.ONE.subtract(0.0);
      Complex complex12 = Complex.valueOf(0.0, (-2444.6573185671255));
      Complex complex13 = complex0.exp();
      Complex complex14 = complex8.conjugate();
      Complex complex15 = Complex.valueOf((-1894.22692));
      // Undeclared exception!
      complex0.nthRoot(5033);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.pow(Double.NaN);
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.multiply(5033);
      Complex complex7 = complex6.ZERO.subtract(2356.72461154);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.pow(0.0);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.ONE.subtract(0.0);
      Complex complex12 = Complex.valueOf(0.0, (-2444.6573185671255));
      Complex complex13 = complex12.ZERO.acos();
      Complex complex14 = complex0.exp();
      Complex complex15 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.acos();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex5 = complex1.INF.multiply(1605);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.ONE.add(complex6);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.valueOf(0.0, (double) 1605);
      boolean boolean0 = complex10.equals(complex7);
      Complex complex13 = complex7.ZERO.exp();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(4007.9273, Double.NaN);
      Complex complex1 = Complex.valueOf(396.178997, 4007.9273);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf(396.178997);
      Complex complex6 = complex4.ZERO.pow(0.0);
      Complex complex7 = complex1.I.sqrt();
      Complex complex8 = complex2.subtract(complex0);
      Complex complex9 = complex8.ONE.multiply((-1702));
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex5.multiply(37);
      Complex complex13 = complex8.divide(0.0);
      Complex complex14 = complex12.sqrt1z();
      Complex complex15 = complex9.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex6.ZERO.pow(0.0);
      Complex complex8 = complex5.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = complex0.cos();
      Complex complex13 = complex5.conjugate();
      Complex complex14 = Complex.valueOf(0.0, 1252.6633189236563);
      Complex complex15 = complex14.NaN.add(complex6);
      Complex complex16 = complex8.acos();
      Complex complex17 = complex16.ONE.sinh();
      Complex complex18 = complex8.sin();
      double double0 = complex18.getImaginary();
      Complex complex19 = complex8.add(1252.6633189236563);
      Complex complex20 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex21 = complex20.NaN.sinh();
      Complex complex22 = complex10.add(complex9);
      double double1 = complex17.getReal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-127.6268));
      double double0 = complex0.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.sin();
      double double1 = complex2.INF.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.subtract((-127.6268));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.ONE.pow((-127.6268));
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = complex4.sinh();
      Complex complex9 = Complex.valueOf(0.0, (-370.898412037));
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = complex0.I.pow(complex8);
      int int0 = complex4.hashCode();
      Complex complex12 = complex9.divide((-370.898412037));
      Complex complex13 = Complex.valueOf(0.0, (-21.48062255265));
      Complex complex14 = complex3.subtract(complex0);
      Complex complex15 = complex4.divide((-370.898412037));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.acos();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex5 = complex1.INF.multiply(1605);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.ONE.add(complex6);
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.valueOf(0.0, (double) 1605);
      boolean boolean0 = complex10.equals(complex7);
      Complex complex13 = complex7.ZERO.exp();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.I.createComplex((-1.0), 1992.0);
      Complex complex2 = complex1.ZERO.createComplex(2900.0, 2900.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.multiply(136);
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = complex4.INF.subtract((double) 136);
      Complex complex7 = complex4.pow(1992.0);
      Complex complex8 = complex5.subtract(1992.0);
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex0.ONE.multiply(1992.0);
      Complex complex11 = complex4.cosh();
      Complex complex12 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex0.sin();
      double double0 = complex0.abs();
      Complex complex5 = complex3.atan();
      double double1 = complex5.INF.getArgument();
      ComplexField complexField0 = complex1.getField();
      double double2 = complex1.abs();
      Complex complex6 = complex3.multiply(Double.NaN);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = complex2.NaN.subtract(0.0);
      double double3 = complex6.getReal();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex10.INF.exp();
      ComplexField complexField1 = complex6.getField();
      Complex complex12 = complex2.add(complex0);
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-162.98), 2.0);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(5366.92, (-3888.744));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.pow(5366.92);
      Complex complex3 = complex2.ZERO.add(1137.4);
      Complex complex4 = complex3.ONE.subtract(0.0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex5.ONE.log();
      Complex complex8 = complex5.divide(complex6);
      Complex complex9 = complex0.pow(complex8);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex9.acos();
      boolean boolean0 = complex9.NaN.equals(complex10);
      Complex complex12 = complex8.ZERO.acos();
      String string0 = complex9.toString();
      double double0 = complex7.NaN.abs();
      double double1 = complex7.INF.abs();
      Complex complex13 = complex0.I.pow(complex5);
      Complex complex14 = complex6.multiply(0.0);
      Complex complex15 = complex7.log();
      Complex complex16 = complex8.sqrt();
      Complex complex17 = complex16.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex18 = complex4.negate();
      double double2 = complex18.ZERO.getArgument();
      Complex complex19 = complex1.sqrt1z();
      try { 
        complex6.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.multiply((-762.536659));
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex0.createComplex((-762.536659), 0.0);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex6.acos();
      Object object0 = complex8.NaN.readResolve();
      double double1 = complex3.getReal();
      double double2 = complex2.getArgument();
      Complex complex9 = complex5.log();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex4.tan();
      Complex complex12 = Complex.valueOf((-6033.772628609));
      Complex complex13 = complex12.createComplex(Double.NaN, (-762.536659));
      Complex complex14 = complex8.add((-4634.827175743381));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1826.653936169));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(2427.892682882, (-749.0));
      Complex complex1 = complex0.multiply(369);
      Complex complex2 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.cos();
      double double0 = complex1.ONE.abs();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.INF.sin();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex5.pow(complex2);
      Complex complex8 = complex7.ZERO.cosh();
      String string0 = complex3.I.toString();
      Complex complex9 = complex8.ZERO.reciprocal();
      List<Complex> list0 = complex9.I.nthRoot(1);
      Complex complex10 = complex1.subtract(2427.892682882);
      Complex complex11 = complex10.NaN.conjugate();
      Complex complex12 = complex7.ZERO.add(complex3);
      Complex complex13 = complex0.tan();
      ComplexField complexField1 = complex6.NaN.getField();
      Complex complex14 = complex13.ZERO.createComplex((-4006.083891), (-749.0));
      Complex complex15 = complex6.divide(complex0);
      Complex complex16 = complex13.conjugate();
      String string1 = complex10.toString();
      Complex complex17 = complex5.subtract((double) 369);
      Complex complex18 = complex11.exp();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      double double0 = 694.2898713944097;
      boolean boolean0 = complex0.ONE.equals(complex1);
      Complex complex2 = complex1.ZERO.createComplex(694.2898713944097, 694.2898713944097);
      Complex complex3 = complex1.INF.divide(complex0);
      double double1 = complex3.ONE.getArgument();
      Complex complex4 = complex3.ZERO.multiply(1);
      Complex complex5 = complex0.INF.tanh();
      try { 
        complex0.nthRoot((-1789));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,789
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(49.85, 49.85);
      Complex complex2 = Complex.valueOf(49.85, 49.85);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.I.multiply(complex5);
      boolean boolean0 = complex5.equals(complex2);
      Complex complex7 = complex6.INF.add(2.0);
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex0.I.multiply(complex5);
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex9.ZERO.pow(complex0);
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex11.reciprocal();
      Complex complex14 = complex10.acos();
      Complex complex15 = complex14.I.asin();
      double double0 = complex10.getImaginary();
      Complex complex16 = complex9.subtract(2.0);
      Complex complex17 = complex5.reciprocal();
      Complex complex18 = complex13.ZERO.createComplex(2160.49623646, 2160.49623646);
      double double1 = complex17.ONE.getArgument();
      Complex complex19 = complex13.negate();
      int int0 = complex0.hashCode();
      int int1 = complex12.hashCode();
      Complex complex20 = complex17.I.divide((-1912.25284546));
      Complex complex21 = complex2.multiply(complex3);
      Complex complex22 = complex16.createComplex(0.0, 0.0);
      Complex complex23 = complex22.multiply(complex7);
      Complex complex24 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1819.25421152, 1819.25421152);
      Complex complex1 = Complex.valueOf(0.0, (-1178.955394924049));
      Complex complex2 = complex1.acos();
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex0.I.subtract(complex1);
      int int0 = complex0.NaN.hashCode();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex5.equals("sJKx^aI>T@9$l");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-2499.4628915476));
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-993.874788726492));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex2.NaN.pow(complex1);
      Complex complex5 = complex4.NaN.add(complex3);
      Complex complex6 = complex5.ONE.createComplex(0.0, 3247.58515878939);
      Complex complex7 = complex5.ZERO.createComplex((-993.874788726492), (-989.0));
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.NaN.reciprocal();
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex2.subtract((-803.0));
      Complex complex11 = complex10.NaN.pow(0.48008447885513306);
      Complex complex12 = complex10.INF.sin();
      Complex complex13 = complex10.ONE.acos();
      Complex complex14 = complex2.atan();
      Complex complex15 = Complex.valueOf((-3364.75), (-993.874788726492));
      double double0 = complex3.abs();
      Complex complex16 = complex3.asin();
      Complex complex17 = complex4.add((-3364.75));
      Complex complex18 = complex3.createComplex((-383.458), (-993.874788726492));
      Complex complex19 = complex15.subtract(complex16);
      Complex complex20 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.10928992), 0.0);
      double double0 = complex1.I.getArgument();
      boolean boolean0 = complex0.equals(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.createComplex(0.0, (-717.0));
      String string0 = complex1.toString();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.acos();
      ComplexField complexField1 = complex1.ONE.getField();
      Complex complex5 = complex0.INF.sinh();
      double double1 = complex4.NaN.abs();
      Complex complex6 = complex5.ZERO.divide(Double.NaN);
      Complex complex7 = complex4.I.pow(complex1);
      Complex complex8 = complex0.createComplex(0.0, 857.331181546);
      Complex complex9 = complex8.INF.subtract(0.0);
      Complex complex10 = complex0.multiply(complex8);
      List<Complex> list0 = complex1.nthRoot(1008);
      Complex complex11 = complex10.subtract(complex5);
      Complex complex12 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1950.61778, 0.0);
      Complex complex1 = new Complex(1950.61778);
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex1.I.multiply(1339);
      Complex complex3 = complex0.pow(complex1);
      double double1 = complex3.abs();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex4.cosh();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(761.251069851605);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.multiply(401);
      Complex complex4 = complex3.ONE.multiply(401);
      Complex complex5 = complex0.ZERO.divide(complex3);
      Complex complex6 = complex0.ONE.cos();
      boolean boolean0 = complex6.equals(complex3);
      double double0 = complex6.I.abs();
      Complex complex7 = complex5.INF.log();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.ONE.divide((-644.9));
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.INF.tanh();
      int int0 = complex0.hashCode();
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex2.ONE.pow(complex3);
      Complex complex5 = complex2.ZERO.multiply(Double.NaN);
      Complex complex6 = complex5.ZERO.multiply((-4.079585475491198E-54));
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = Complex.valueOf(Double.NaN);
      int int0 = complex1.I.hashCode();
      Complex complex10 = complex2.INF.divide((-3102.14797552));
      Complex complex11 = complex2.exp();
      Complex complex12 = complex0.multiply(complex2);
      Complex complex13 = complex1.subtract(complex12);
      String string0 = complex12.toString();
      Complex complex14 = complex4.sin();
      Complex complex15 = complex14.I.asin();
      Complex complex16 = complex10.multiply(1);
      Complex complex17 = complex1.multiply(complex3);
      Complex complex18 = complex12.reciprocal();
      int int1 = complex1.hashCode();
      Complex complex19 = complex14.conjugate();
      List<Complex> list0 = complex19.nthRoot(1);
      boolean boolean0 = complex11.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex2.ONE.divide((-1506.9942139272));
      boolean boolean0 = complex4.ZERO.equals(complex1);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.divide(complex0);
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex6.NaN.add((-1370.38373016));
      double double0 = complex0.getReal();
      boolean boolean1 = complex5.equals(complexField0);
      Complex complex9 = complex6.multiply(1);
      Complex complex10 = Complex.valueOf(2481.532026, 292.030719137);
      Complex complex11 = complex7.cosh();
      Complex complex12 = complex11.subtract(complex6);
      Complex complex13 = complex7.I.conjugate();
      Complex complex14 = complex12.INF.divide((-1506.9942139272));
      Complex complex15 = complex1.pow(2481.532026);
      int int0 = complex7.hashCode();
      Complex complex16 = complex5.cosh();
      double double1 = complex14.getArgument();
      Complex complex17 = complex0.cos();
      Complex complex18 = complex8.divide(292.030719137);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1112.69466228973), (-1112.69466228973));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex3.subtract(0.0);
      int int0 = complex0.hashCode();
      Complex complex6 = complex4.I.subtract(3973.7);
      Object object0 = complex0.ONE.readResolve();
      Complex complex7 = complex6.ONE.subtract(complex3);
      Complex complex8 = complex7.ONE.subtract(complex2);
      Complex complex9 = complex7.ZERO.asin();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex11.I.divide(0.0);
      Complex complex13 = complex10.ONE.subtract(complex6);
      Complex complex14 = complex10.INF.createComplex(1121.6586177, (-1112.69466228973));
      double double0 = complex5.abs();
      Complex complex15 = complex3.subtract(complex4);
      Complex complex16 = complex13.ZERO.pow(Double.NaN);
      Complex complex17 = Complex.valueOf(0.0);
      Complex complex18 = complex5.reciprocal();
      Complex complex19 = complex13.exp();
      boolean boolean0 = complex19.NaN.equals(complex3);
      Object object1 = complex19.readResolve();
      Complex complex20 = complex13.add(complex19);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.multiply((-3275.955645553678));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.I;
      boolean boolean0 = complex1.I.equals(complex2);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = Complex.valueOf((-2221.8295391), (-2221.8295391));
      double double0 = complex5.INF.abs();
      Complex complex6 = complex5.ONE.createComplex((-2221.8295391), 0.0);
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.ONE.tan();
      int int0 = complex0.hashCode();
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex1.isNaN();
      Complex complex9 = complex3.sin();
      double double1 = complex0.abs();
      Complex complex10 = complex8.NaN.atan();
      int int1 = complex9.hashCode();
      Complex complex11 = complex8.atan();
      boolean boolean3 = complex7.I.equals(complex1);
      Complex complex12 = complex0.divide(complex8);
      Complex complex13 = complex7.multiply((-2221.8295391));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.ZERO.sqrt1z();
      double double0 = complex3.getImaginary();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex4.I.divide(Double.NaN);
      Complex complex9 = complex0.divide(2.0);
      Object object0 = complex4.readResolve();
      Complex complex10 = complex2.ZERO.exp();
      Complex complex11 = complex2.multiply(0.0);
      Complex complex12 = complex9.divide(0.0);
      Complex complex13 = complex12.NaN.pow(0.0);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex9.reciprocal();
      Complex complex16 = complex15.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.createComplex(0.0, 5.1453167686439515E140);
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = complex2.ONE.createComplex(0.0, 5.1453167686439515E140);
      Complex complex7 = complex6.NaN.divide((-1072.2555057));
      boolean boolean1 = complex0.equals(complex2);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.divide((-2124.244735));
      Object object0 = complex1.readResolve();
      Complex complex10 = complex8.multiply(complex1);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.createComplex((-20.0), (-20.0));
      Complex complex3 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex0.equals("");
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.createComplex((-3386.0), 2.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.I.multiply((-1582));
      Complex complex6 = complex0.subtract((-277.58196557));
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex0.cos();
      Complex complex10 = Complex.valueOf((-3386.0));
      ComplexField complexField0 = complex5.getField();
      Complex complex11 = complex6.sin();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-738.618562367));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow(Double.NaN);
      Object object0 = complex1.I.readResolve();
      try { 
        complex0.INF.nthRoot((-3512));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,512
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.pow(0.008333333333329196);
      Complex complex6 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-1695.79399918489));
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex3.INF.multiply(6.283185307179586);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.INF.exp();
      try { 
        complex8.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(420.71997651815826, (-3926.0452929614));
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ONE.divide(2648.27);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.multiply(complex7);
      Complex complex9 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.cosh();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.atan();
      List<Complex> list0 = complex2.I.nthRoot(37);
      Complex complex5 = complex2.multiply(3269.50720769899);
      Complex complex6 = complex0.pow(3269.50720769899);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.valueOf(412.60365859);
      Complex complex9 = complex4.divide(complex7);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4368.1, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.ZERO.divide(0.0);
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex6.ZERO.reciprocal();
      Complex complex10 = complex6.ONE.subtract((-36.116841252));
      String string0 = complex6.toString();
      boolean boolean0 = complex6.isInfinite();
      Complex complex11 = complex1.tan();
      double double0 = complex7.getReal();
      Complex complex12 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(70.98045369, 3143.93979);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex3.I.add(3719.284831454331);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex4.asin();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1220.567936954483, 0.0);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2782.013245));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.createComplex((-2782.013245), 329.0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex3.ONE.multiply(complex1);
      double double0 = complex5.INF.abs();
      Complex complex6 = complex0.NaN.asin();
      Object object0 = complex3.NaN.readResolve();
      double double1 = complex0.getReal();
      Complex complex7 = complex0.NaN.asin();
      Complex complex8 = complex0.subtract(complex3);
      Complex complex9 = complex8.ZERO.multiply(complex3);
      Complex complex10 = complex8.ONE.acos();
      Complex complex11 = complex0.pow((-2782.013245));
      Complex complex12 = complex11.multiply(0);
      Complex complex13 = complex11.tan();
      Complex complex14 = complex13.ONE.createComplex(0.0, 0.0);
      Complex complex15 = complex7.tanh();
      Complex complex16 = complex7.add(complex13);
      Complex complex17 = Complex.valueOf(0.0, (-1587.8026422401));
      String string0 = complex4.toString();
      Complex complex18 = complex0.exp();
      Complex complex19 = complex14.asin();
      Complex complex20 = complex12.conjugate();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex20.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1512.10387857));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.valueOf(1354.2809796905817, 2927.7319782);
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.pow((-1869.8721583862));
      List<Complex> list0 = complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-782.803827352));
      Complex complex1 = complex0.cosh();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.cosh();
      boolean boolean0 = complex2.isNaN();
      Complex complex5 = complex2.createComplex((-782.803827352), (-782.803827352));
      Complex complex6 = complex3.tan();
      double double0 = complex5.getReal();
      Complex complex7 = complex5.subtract((-782.803827352));
      Complex complex8 = complex7.ZERO.sqrt();
      double double1 = complex7.I.getArgument();
      Complex complex9 = complex6.subtract((-782.803827352));
      Complex complex10 = complex9.asin();
      boolean boolean1 = complex9.isNaN();
      Complex complex11 = complex9.conjugate();
      double double2 = complex1.abs();
      Complex complex12 = complex8.subtract(complex7);
      Complex complex13 = complex9.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.negate();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-893.738402));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.subtract((-1371.018458842));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.multiply(complex1);
      double double1 = complex2.getArgument();
      Complex complex5 = complex2.I.atan();
      double double2 = complex2.abs();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = Complex.valueOf((-1921.7), (-1921.7));
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex11.ONE.subtract((-1921.7));
      Complex complex13 = complex4.tan();
      Complex complex14 = complex3.multiply(Double.NaN);
      Complex complex15 = complex2.add((-1921.7));
      Complex complex16 = complex4.log();
      Complex complex17 = Complex.valueOf((-3.141592653589793), (-1921.7));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(1.6419797090870802E-8);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.047124671392676E-8));
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex0.ZERO.abs();
      double double1 = complex1.I.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.add((-2.047124671392676E-8));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.ZERO.divide(complex0);
      Complex complex6 = complex0.divide(1.5707963267948966);
      double double2 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3521.96607), (-8.846040040259342E-8));
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.negate();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.valueOf(5741.228294);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.subtract(5741.228294);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(452.9691744527);
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.NaN.exp();
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex1.sqrt1z();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.subtract(0.0);
      boolean boolean1 = complex1.isInfinite();
      Complex complex5 = Complex.valueOf(0.0, 271.94);
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex1.pow(complex5);
      Complex complex8 = complex4.pow(complex1);
      Complex complex9 = complex8.INF.cosh();
      String string0 = complex9.I.toString();
      Complex complex10 = complex7.ZERO.sqrt1z();
      int int0 = complex0.hashCode();
      double double1 = complex7.getReal();
      Complex complex11 = complex7.multiply(complex6);
      Complex complex12 = complex7.add(2154.236178528);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3303.4, (-1906.5850781473416));
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex2.I.divide((-1.0));
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex0.add(complex1);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.exp();
      double double0 = complex0.abs();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex1.sin();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1389.6993114123), (-1389.6993114123));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.NaN.divide(0.0);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.sin();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(918.72978751, 918.72978751);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(918.72978751, 918.72978751);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex4.ONE.add((-986.2));
      Complex complex6 = Complex.valueOf((-20.0));
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.tan();
      double double0 = complex6.abs();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex0.multiply(764.87043055);
      double double1 = complex7.abs();
      Complex complex12 = complex8.asin();
      Complex complex13 = complex8.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1713.6625734424, 1713.6625734424);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.multiply(complex1);
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex3.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ZERO.divide((-2730.8441023));
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.atan();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex1.ONE.pow(3320.7648886);
      Complex complex3 = complex1.I.cosh();
      try { 
        complex3.ONE.nthRoot((-4472));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,472
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4792));
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex2.NaN.multiply((-4792));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.pow(0.0);
      ComplexField complexField0 = complex0.getField();
      double double0 = 0.0;
      Complex complex6 = complex0.createComplex(0.0, 0.0);
      Complex complex7 = complex0.sin();
      Complex complex8 = Complex.valueOf(0.0, (double) (-4792));
      Complex complex9 = complex8.NaN.multiply(2.0);
      try { 
        complex0.nthRoot((-4792));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,792
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1400.3911297469, 1400.3911297469);
      Complex complex1 = complex0.I.subtract(2040.0);
      Complex complex2 = complex0.ZERO.add(Double.NaN);
      Complex complex3 = complex2.ONE.cos();
      double double0 = complex3.abs();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex2.isNaN();
      Complex complex4 = complex2.ONE.multiply(complex3);
      Complex complex5 = complex0.I.tanh();
      Complex complex6 = complex2.NaN.negate();
      Complex complex7 = complex0.cos();
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = Complex.valueOf((-3527.535305211539), (-1233.27));
      Complex complex9 = Complex.valueOf(0.0, 0.5403023058681398);
      Object object1 = complex9.ONE.readResolve();
      Complex complex10 = Complex.valueOf(440.28009119228);
      Complex complex11 = complex4.multiply(0.0);
      Complex complex12 = complex3.tan();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex13 = complex0.subtract((-3527.535305211539));
      Complex complex14 = complex3.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(1131.3);
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex2.I.divide(1131.3);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.createComplex(1131.3, 1131.3);
      Complex complex6 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-1823.2810833768));
      String string0 = complex1.toString();
      Complex complex2 = complex1.add((-1823.2810833768));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.NaN.add(complex1);
      Complex complex6 = complex1.atan();
      int int0 = complex0.hashCode();
      Complex complex7 = complex3.subtract((-789.9560051796));
      Complex complex8 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1042);
      double double0 = complex0.I.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.subtract(517.655);
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2077903747558594);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.divide(0.0);
      double double0 = complex2.getReal();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2949.82621401358));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3275.955645553678), 1656.734878018);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sinh();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1327.429, 1327.429);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.multiply(1327.429);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(0.0, 1327.429);
      Complex complex7 = complex6.INF.add(847.119890656);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex5.pow(1842.24286);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.pow(0.0);
      boolean boolean0 = complex0.equals("ROBUSTNESS_ITERATIONS");
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.ONE.subtract(0.4419025182723999);
      List<Complex> list0 = complex2.nthRoot(722);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2699.99598891, 1.2871924223480165E-8);
      Complex complex1 = complex0.add((-1400.4360773616033));
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.multiply(1.2871924223480165E-8);
      Complex complex4 = complex3.sinh();
      double double0 = complex0.getReal();
      Complex complex5 = complex2.negate();
      List<Complex> list0 = complex0.ONE.nthRoot(1541);
      Complex complex6 = complex4.acos();
      Complex complex7 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1682.7761076145, 1682.7761076145);
      Complex complex1 = complex0.NaN.createComplex(2.0, 2.0);
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-2138.01651226953), (-2138.01651226953));
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.ONE.tan();
      Complex complex6 = complex3.ONE.pow(Double.NaN);
      Complex complex7 = complex3.negate();
      Complex complex8 = complex3.multiply(107.969);
      int int0 = complex0.hashCode();
      Complex complex9 = complex0.exp();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex8.acos();
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex2.pow(complex6);
      Complex complex14 = complex12.ONE.reciprocal();
      Complex complex15 = complex2.tan();
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex12.isInfinite();
      Complex complex16 = complex4.sinh();
      Complex complex17 = complex16.pow(complex6);
      Complex complex18 = complex14.multiply((-2747.728335));
      Complex complex19 = complex16.exp();
      Complex complex20 = Complex.valueOf(Double.NaN, 107.969);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(3269017.5);
      Complex complex1 = complex0.ZERO.conjugate();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.pow(3269017.5);
      double double0 = complex0.NaN.abs();
      Complex complex3 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.divide(3269017.5);
      Complex complex5 = complex0.I.conjugate();
      Complex complex6 = Complex.valueOf(3269017.5);
      Complex complex7 = complex4.NaN.tan();
      Complex complex8 = Complex.valueOf(3269017.5, Double.NaN);
      Complex complex9 = Complex.INF;
      boolean boolean1 = complex4.equals(complex9);
      boolean boolean2 = complex2.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.NaN.equals(complex1);
      boolean boolean1 = complex0.NaN.equals(complex1);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.sqrt1z();
      int int0 = complex1.ZERO.hashCode();
      int int1 = complex3.hashCode();
      double double0 = complex1.getImaginary();
      Complex complex5 = Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(7.77328837578952E-9, (-830.3376584122));
      Complex complex2 = complex0.multiply(0);
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex0.sqrt();
      double double0 = complex4.abs();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.ZERO.cos();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double double0 = 7.404811709785613E140;
      double double1 = Double.NaN;
      Complex complex0 = new Complex(7.404811709785613E140, Double.NaN);
      Complex complex1 = new Complex(7.404811709785613E140, Double.NaN);
      Complex complex2 = complex1.ZERO.createComplex((-1479.67), 3521.96607);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.ZERO.sin();
      try { 
        complex1.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.reciprocal();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex1.NaN.add(complex0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.NaN.subtract(0.9950124688279302);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.sqrt();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex1.add((-3.7646381826067834E-8));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.divide(7.066491077377918E172);
      Complex complex2 = complex1.createComplex(7.066491077377918E172, 7.066491077377918E172);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex1.ZERO.exp();
      Complex complex5 = complex0.cos();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex3.ZERO.multiply(7.066491077377918E172);
      Complex complex7 = complex6.I.subtract(complex3);
      Complex complex8 = complex6.NaN.tan();
      Complex complex9 = complex6.ZERO.divide(complex5);
      Complex complex10 = complex0.divide(complex1);
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex2.tan();
      Complex complex13 = complex11.I.sinh();
      Complex complex14 = complex3.multiply(Double.NaN);
      Object object1 = complex3.readResolve();
      Complex complex15 = complex13.divide(1.5453160659068463E-161);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      ComplexField complexField0 = complex1.getField();
      ComplexField complexField1 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex2 = complex1.subtract((-2076.48083));
      String string1 = complex2.ONE.toString();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.INF.divide(0.0);
      Complex complex5 = complex1.I.log();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex9.ZERO.asin();
      boolean boolean0 = complex5.isInfinite();
      ComplexField complexField0 = complex6.getField();
      Complex complex12 = complex3.atan();
      Complex complex13 = complex5.add(20.0);
      Complex complex14 = complex13.NaN.createComplex(0.0, 0.0);
      Complex complex15 = complex12.I.reciprocal();
      Complex complex16 = complex2.multiply(1304);
      boolean boolean1 = complex3.equals(complex16);
      Complex complex17 = complex12.tanh();
      Complex complex18 = complex15.pow(complex2);
      Complex complex19 = complex7.subtract(0.0);
      Complex complex20 = complex17.sqrt();
      Complex complex21 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cos();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.INF.multiply(37);
      boolean boolean0 = complex1.I.equals(object0);
      Complex complex4 = complex0.NaN.subtract(complex2);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.INF.pow((double) 37);
      double double0 = complex0.abs();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.cos();
      Object object1 = complex8.ONE.readResolve();
      Complex complex9 = complex8.ONE.multiply(0.0);
      double double1 = complex0.abs();
      Object object2 = new Object();
      boolean boolean1 = complex9.INF.equals(object2);
      Complex complex10 = complex8.acos();
      Complex complex11 = complex7.NaN.acos();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex9.ONE.asin();
      Complex complex14 = complex9.add((-1.0));
      Complex complex15 = complex14.tan();
      Complex complex16 = complex3.divide(complex8);
      Complex complex17 = complex16.ONE.divide(16.56007774167);
      List<Complex> list0 = complex7.nthRoot(37);
      double double2 = complex1.getImaginary();
      Complex complex18 = complex14.sinh();
      Object object3 = complex3.ZERO.readResolve();
      boolean boolean2 = complex0.equals(complex3);
      Complex complex19 = complex7.pow(complex3);
      Complex complex20 = complex13.reciprocal();
      Complex complex21 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.pow(20.0);
      Complex complex2 = complex1.NaN.multiply((-1.0));
      Complex complex3 = complex2.NaN.add(20.0);
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex1.INF.subtract(complex0);
      Complex complex6 = complex0.ZERO.sqrt();
      Complex complex7 = complex6.pow(546.28697);
      double double0 = complex5.ONE.abs();
      int int0 = complex0.ZERO.hashCode();
      String string0 = complex0.toString();
      int int1 = complex1.hashCode();
      Complex complex8 = complex1.INF.sinh();
      Complex complex9 = complex5.divide(complex1);
      List<Complex> list0 = complex9.nthRoot(332);
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex10.ONE.pow(1776.1905544996);
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex12.cos();
      Complex complex14 = complex5.cos();
      Object object0 = complex14.readResolve();
      double double1 = complex9.getImaginary();
      Complex complex15 = complex12.subtract(0.0);
      Complex complex16 = complex3.sqrt1z();
      Complex complex17 = complex3.exp();
      Complex complex18 = complex4.add(1.8279051206232177E83);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.createComplex(823.8354054833, 823.8354054833);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.multiply(2237);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.I.add(823.8354054833);
      Complex complex7 = complex0.acos();
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex8.ONE.multiply((-55.37));
      Complex complex11 = complex4.INF.multiply(0.0);
      boolean boolean0 = complex11.ZERO.equals(complex7);
      Complex complex12 = complex6.ZERO.sqrt1z();
      Complex complex13 = complex10.INF.divide(complex5);
      boolean boolean1 = complex2.isInfinite();
      Complex complex14 = complex2.pow(823.8354054833);
      double double0 = complex14.ZERO.getArgument();
      Complex complex15 = complex1.divide((-1.0));
      Complex complex16 = complex2.divide(complex0);
      Complex complex17 = complex6.sqrt();
      ComplexField complexField0 = complex7.getField();
      Complex complex18 = complex4.cos();
      Complex complex19 = complex18.sinh();
      Complex complex20 = complex19.ONE.createComplex(2933.6, 0.0);
      Complex complex21 = complex18.multiply(823.8354054833);
      int int0 = complex21.hashCode();
      Complex complex22 = complex17.add(556.23484137588);
      Complex complex23 = complex16.add(complex8);
      Complex complex24 = complex12.sqrt1z();
      Complex complex25 = complex10.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex3.ZERO.sin();
      Complex complex8 = complex7.ZERO.add(complex1);
      Complex complex9 = complex7.cos();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex4.ZERO.atan();
      String string0 = complex0.toString();
      Complex complex12 = complex3.add(complex4);
      Complex complex13 = complex12.ONE.sqrt1z();
      String string1 = complex12.ZERO.toString();
      Complex complex14 = complex2.asin();
      double double0 = (-940.5336436277031);
      Complex complex15 = complex14.NaN.createComplex((-940.5336436277031), (-940.5336436277031));
      try { 
        complex15.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(2787.8813873719, 2787.8813873719);
      Complex complex1 = Complex.valueOf(2787.8813873719);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex3.INF.negate();
      boolean boolean0 = complex3.ONE.equals(complex0);
      Complex complex5 = complex0.divide(complex1);
      boolean boolean1 = complex5.equals(complex2);
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.ONE.sin();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.INF.log();
      double double0 = complex10.NaN.abs();
      Complex complex11 = complex10.reciprocal();
      Object object0 = new Object();
      boolean boolean2 = complex1.equals(object0);
      Complex complex12 = complex1.tan();
      Complex complex13 = complex12.NaN.pow(0.0);
      Complex complex14 = complex12.subtract(363.0);
      Complex complex15 = complex6.sin();
      Complex complex16 = Complex.valueOf((-2139.447739722534), 1379.47956);
      Complex complex17 = complex7.pow(complex3);
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = Complex.valueOf(1402.8249989634, (-1638.78694378522));
      Object object1 = new Object();
      boolean boolean3 = complex18.equals(object1);
      Complex complex20 = complex18.acos();
      Complex complex21 = complex20.divide(complex5);
      Complex complex22 = complex0.acos();
  }
}
