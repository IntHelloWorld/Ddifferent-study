/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:30:41 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex1.NaN.multiply(complex5);
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex5.conjugate();
      double double0 = complex7.ZERO.abs();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex2.sqrt();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex5.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex12 = complex9.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.I.cosh();
      Complex complex14 = complex0.multiply(complex9);
      ComplexField complexField1 = complex14.NaN.getField();
      Complex complex15 = complex14.exp();
      Complex complex16 = complex15.NaN.sqrt();
      Complex complex17 = complex3.sinh();
      ComplexField complexField2 = complex3.getField();
      Complex complex18 = complex8.createComplex((-0.9999950969577236), 0.0);
      Complex complex19 = complex18.ZERO.divide(0.0);
      double double1 = complex0.abs();
      Complex complex20 = complex0.log();
      ComplexField complexField3 = complex20.getField();
      Complex complex21 = complex20.sinh();
      Complex complex22 = complex16.multiply(1);
      Complex complex23 = complex12.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ONE.getField();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 3277.58953091;
      Complex complex0 = new Complex(3277.58953091, 3277.58953091);
      int int0 = 5269;
      // Undeclared exception!
      complex0.nthRoot(5269);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(237.8174723993957);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.add((-1291.17018275545));
      Complex complex4 = complex2.ONE.createComplex((-566.0), 3045.18334);
      Complex complex5 = complex2.sinh();
      Complex complex6 = new Complex((-1.1487079818684332E-8));
      Complex complex7 = Complex.valueOf(20.0, (-566.0));
      Complex complex8 = complex7.NaN.createComplex(20.0, 0.0);
      Complex complex9 = Complex.valueOf(20.0);
      Complex complex10 = complex5.ONE.add(complex6);
      Complex complex11 = complex10.ONE.cosh();
      Complex complex12 = complex3.tan();
      Complex complex13 = complex3.atan();
      int int0 = complex1.hashCode();
      double double0 = complex13.getReal();
      Complex complex14 = complex2.multiply((-1.1487079818684332E-8));
      ComplexField complexField0 = complex0.getField();
      Complex complex15 = Complex.valueOf((-2957.390676627819), 0.0);
      Complex complex16 = complex3.pow(complex15);
      Complex complex17 = complex16.ZERO.sin();
      Complex complex18 = complex12.add((-36.939));
      double double1 = complex13.getImaginary();
      Complex complex19 = complex9.divide((-1.5700218361711396));
      boolean boolean0 = complex7.equals(complex9);
      Complex complex20 = complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.ONE.conjugate();
      int int1 = complex3.INF.hashCode();
      Complex complex4 = complex0.add(3457.28);
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex1.log();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex6.createComplex(3457.28, 3557.7883432654494);
      boolean boolean0 = complex2.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex4.createComplex((-858.31853), 0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      double double0 = 2025.2;
      Complex complex2 = complex0.pow(2025.2);
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      boolean boolean0 = complex1.I.equals((Object) null);
      Complex complex3 = complex0.add(complex1);
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(179.654804, 179.654804);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.tan();
      int int0 = complex2.I.hashCode();
      Object object0 = complex5.NaN.readResolve();
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex2.divide(complex0);
      String string0 = complex2.toString();
      Object object1 = complex2.readResolve();
      Complex complex8 = complex0.multiply(complex2);
      String string1 = complex1.toString();
      Complex complex9 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.multiply((-2.380286345847567E70));
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex2.multiply(complex1);
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex1.ONE.sqrt1z();
      String string0 = complex4.ONE.toString();
      Complex complex6 = complex0.I.sin();
      Complex complex7 = complex1.negate();
      Complex complex8 = Complex.valueOf((-2.380286345847567E70), Double.NaN);
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf((-2.380286345847567E70), Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex11.NaN.sqrt();
      Complex complex13 = complex9.sqrt1z();
      Complex complex14 = complex5.cos();
      Complex complex15 = complex7.cos();
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex16 = complex0.exp();
      Complex complex17 = complex8.exp();
      Complex complex18 = complex17.asin();
      double double1 = complex18.ZERO.abs();
      Complex complex19 = complex7.conjugate();
      Complex complex20 = complex12.cosh();
      Complex complex21 = complex14.createComplex((-2.380286345847567E70), Double.POSITIVE_INFINITY);
      Complex complex22 = complex6.cosh();
      Complex complex23 = Complex.valueOf((double) 1);
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2570.5288552530965));
      double double0 = complex0.getImaginary();
      Complex complex1 = new Complex(0.0, (-2377.87445620195));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(179.0);
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(2330.0, 2330.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.I.divide(complex3);
      Complex complex5 = complex2.add(2330.0);
      Complex complex6 = complex4.multiply(0);
      Complex complex7 = complex5.INF.add((-894.43508494));
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex7.ZERO.cosh();
      Complex complex10 = complex7.NaN.exp();
      Complex complex11 = Complex.I;
      boolean boolean0 = complex1.I.equals(complex11);
      Complex complex12 = complex9.ONE.subtract(complex4);
      Complex complex13 = complex5.ONE.sin();
      Complex complex14 = complex5.negate();
      Complex complex15 = complex14.ZERO.multiply(2330.0);
      Complex complex16 = complex14.ZERO.sqrt1z();
      Complex complex17 = Complex.valueOf((-1245.35464826), 4004.0019);
      Complex complex18 = complex2.tan();
      Complex complex19 = complex13.add(complex4);
      Complex complex20 = complex19.ONE.add((-894.43508494));
      try { 
        complex3.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(2.0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex3.ONE.add(complex2);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.I.multiply(complex6);
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex5.ZERO.sqrt1z();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex1.isInfinite();
      Complex complex10 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex3.divide(2865.5841821);
      Complex complex12 = complex11.atan();
      Complex complex13 = complex12.ZERO.asin();
      Complex complex14 = complex2.reciprocal();
      Complex complex15 = complex14.ONE.subtract(2865.5841821);
      Complex complex16 = complex12.I.sqrt();
      Complex complex17 = complex2.pow(Double.POSITIVE_INFINITY);
      Object object1 = complex17.INF.readResolve();
      Object object2 = complex12.readResolve();
      Complex complex18 = complex8.cos();
      int int0 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(2959);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf((-1873.3492503267155), (-1681.20797814));
      Complex complex4 = complex0.INF.divide(complex3);
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex4.NaN.tanh();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex4.multiply(complex0);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = Complex.valueOf((-1732.0569), 1654.2827162);
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex0.sqrt1z();
      Object object1 = complex8.readResolve();
      boolean boolean0 = complex3.isInfinite();
      Complex complex12 = complex9.atan();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex13.divide(Double.NaN);
      Complex complex15 = complex8.sin();
      Complex complex16 = complex7.pow(complex9);
      Complex complex17 = complex11.cos();
      Complex complex18 = complex17.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.divide(0.0);
      Complex complex3 = complex2.add(0.0);
      int int0 = complex2.NaN.hashCode();
      Complex complex4 = complex2.INF.pow(complex1);
      Complex complex5 = complex1.sin();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf(0.0, 20.0);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.ZERO.conjugate();
      String string0 = complex8.INF.toString();
      Complex complex10 = complex7.acos();
      List<Complex> list0 = complex1.nthRoot(7);
      Complex complex11 = complex7.tan();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex0.divide(20.0);
      Complex complex14 = complex13.exp();
      Complex complex15 = complex7.I.conjugate();
      int int1 = complex11.hashCode();
      int int2 = complex12.hashCode();
      Complex complex16 = complex5.exp();
      Complex complex17 = complex16.multiply(complex11);
      Complex complex18 = complex17.ONE.sqrt1z();
      ComplexField complexField1 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(84.7942, (-1455.8995490452));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      double double0 = complex0.getImaginary();
      Complex complex3 = Complex.valueOf(Double.NaN, (-1455.8995490452));
      Complex complex4 = complex3.NaN.multiply((-2241.0));
      Complex complex5 = complex4.I.multiply((-2601.9555602773835));
      Complex complex6 = complex5.NaN.cos();
      ComplexField complexField0 = complex4.getField();
      double double1 = complex3.getArgument();
      double double2 = complex0.getReal();
      Complex complex7 = complex3.multiply((-1216));
      Complex complex8 = complex7.multiply((-1216));
      double double3 = complex8.NaN.abs();
      Complex complex9 = complex7.multiply(1);
      Complex complex10 = complex0.subtract(84.7942);
      Complex complex11 = complex10.ZERO.multiply(1);
      Complex complex12 = complex7.asin();
      Complex complex13 = Complex.valueOf(0.0, Double.NaN);
      Complex complex14 = complex7.asin();
      Complex complex15 = complex7.multiply(complex12);
      Complex complex16 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(622.86433228542);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ZERO.asin();
      Object object0 = complex2.readResolve();
      Complex complex5 = complex0.ZERO.divide((-649.71663578887));
      Complex complex6 = complex5.INF.divide((-649.71663578887));
      Complex complex7 = complex6.INF.add((-649.71663578887));
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.cosh();
      boolean boolean0 = complex5.equals(complexField0);
      List<Complex> list0 = complex8.nthRoot(7);
      Complex complex9 = complex0.ONE.acos();
      Complex complex10 = complex9.ONE.tan();
      boolean boolean1 = complex0.isInfinite();
      Complex complex11 = complex0.subtract(complex8);
      double double0 = complex0.getReal();
      Complex complex12 = complex11.sqrt1z();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.pow(20.0);
      Complex complex5 = complex1.ZERO.sqrt();
      String string0 = complex1.toString();
      Complex complex6 = complex1.I.log();
      Complex complex7 = complex6.log();
      Complex complex8 = complex6.NaN.multiply((-368));
      String string1 = complex6.I.toString();
      Complex complex9 = complex0.createComplex(20.0, 20.0);
      Complex complex10 = complex9.multiply((-368));
      double double0 = complex0.getReal();
      String string2 = complex8.toString();
      int int0 = complex6.hashCode();
      Complex complex11 = Complex.valueOf(1158.49, (double) (-368));
      boolean boolean0 = complex4.equals(complex11);
      Complex complex12 = complex4.pow(1.3483035574114863E-58);
      Complex complex13 = complex10.sinh();
      Complex complex14 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2489.893));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.ONE.conjugate();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.reciprocal();
      double double0 = complex0.I.abs();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex6.subtract(complex0);
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.ONE.divide(complex0);
      Complex complex11 = complex9.sinh();
      Complex complex12 = complex9.exp();
      boolean boolean0 = complex12.equals(complex4);
      boolean boolean1 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.I.multiply((-2950));
      Complex complex2 = complex1.ZERO.multiply(4725);
      Complex complex3 = complex0.ONE.divide(1.275898268643374);
      double double0 = complex0.I.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.multiply(923);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(255.80193958, 255.80193958);
      Complex complex1 = complex0.INF.asin();
      Object object0 = complex1.readResolve();
      List<Complex> list0 = complex0.nthRoot(958);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.I.add(complex3);
      Complex complex5 = complex3.I.add(Double.NaN);
      Complex complex6 = complex1.ONE.acos();
      Complex complex7 = complex0.multiply(1173.911964857111);
      Complex complex8 = complex7.ONE.tan();
      boolean boolean0 = complex0.equals("h");
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex10.negate();
      Complex complex12 = complex11.ONE.conjugate();
      Complex complex13 = complex0.reciprocal();
      double double0 = complex9.abs();
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex14.add(8.131762373533769E79);
      Complex complex16 = complex11.ONE.cosh();
      double double1 = complex13.getArgument();
      Complex complex17 = complex12.sqrt1z();
      Complex complex18 = complex14.tanh();
      Complex complex19 = complex15.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex0.getImaginary();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.ZERO.divide(480.92272216051);
      Complex complex5 = complex3.ONE.createComplex(1319.158, 1319.158);
      Complex complex6 = complex0.log();
      Complex complex7 = complex2.divide(complex6);
      Complex complex8 = complex7.atan();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.ZERO.add(complex7);
      Complex complex11 = complex7.I.subtract(complex9);
      Complex complex12 = complex2.acos();
      Complex complex13 = complex12.INF.tan();
      Complex complex14 = complex6.multiply(1.0);
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex0.divide(1.0);
      String string0 = complex14.toString();
      Complex complex17 = complex14.multiply(2.6398000717163086);
      Complex complex18 = complex10.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-1282.629694079));
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.valueOf(20.0);
      boolean boolean0 = complex3.I.equals(complex0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.multiply(7);
      boolean boolean1 = complex6.INF.equals(complex1);
      Complex complex7 = complex0.I.sin();
      Complex complex8 = complex5.sinh();
      try { 
        complex3.nthRoot((-185));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -185
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.createComplex(2617.770374844, 2617.770374844);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf(2617.770374844);
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex5.ONE.add(2556.0);
      Complex complex9 = complex1.ONE.cosh();
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = complex2.INF.subtract(complex1);
      boolean boolean1 = complex4.isInfinite();
      Complex complex11 = complex2.ONE.tanh();
      Complex complex12 = complex4.pow(complex8);
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex9.pow(complex2);
      Complex complex15 = complex14.ZERO.cosh();
      Complex complex16 = Complex.valueOf(2556.0);
      boolean boolean2 = complex5.equals(complex16);
      Complex complex17 = complex2.exp();
      Complex complex18 = complex7.tan();
      Complex complex19 = complex3.acos();
      double double1 = complex10.getArgument();
      Complex complex20 = complex7.tan();
      Complex complex21 = complex18.multiply(2690);
      List<Complex> list0 = complex13.nthRoot(2690);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.conjugate();
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.ONE.pow(1.0);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex2.ONE.pow((-1545.5271416904));
      double double2 = complex0.getReal();
      double double3 = complex2.getImaginary();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex7.multiply((-1626));
      String string0 = complex0.toString();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex5.pow(complex2);
      Complex complex13 = complex1.createComplex((-1626), 0.5220900774002075);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(1059.982, (-1361.548119673));
      Complex complex2 = Complex.valueOf((-1361.548119673));
      Complex complex3 = complex2.I.multiply(105);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 105);
      boolean boolean0 = complex5.I.equals(complex6);
      Complex complex9 = complex7.I.asin();
      Complex complex10 = complex5.sin();
      double double0 = complex5.abs();
      double double1 = complex2.getArgument();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4207.2, 4207.2);
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex3.ZERO.subtract(0.0);
      Complex complex5 = complex2.ZERO.cos();
      Complex complex6 = complex2.INF.divide(complex1);
      Complex complex7 = complex6.NaN.multiply((-1630.7929583913792));
      Complex complex8 = complex5.ZERO.multiply(1);
      double double1 = complex5.INF.abs();
      Complex complex9 = complex0.subtract(complex1);
      double double2 = complex0.abs();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2247.7));
      List<Complex> list0 = complex0.NaN.nthRoot(1316);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.NaN.pow(166.29331886707);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex0.NaN.tan();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex3.conjugate();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex8 = complex4.I.exp();
      boolean boolean0 = complex1.I.equals(complex0);
      Complex complex9 = complex1.ZERO.sinh();
      boolean boolean1 = complex0.equals((Object) null);
      String string0 = complex3.toString();
      Complex complex10 = complex0.cosh();
      Complex complex11 = Complex.valueOf((-1.3620325027706252E-7), (-1.3620325027706252E-7));
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex3.add(complex4);
      Complex complex14 = complex2.add(complex0);
      Complex complex15 = complex7.multiply(complex12);
      Complex complex16 = complex10.subtract(complex11);
      double double0 = complex15.abs();
      Complex complex17 = complex11.sin();
      List<Complex> list1 = complex13.nthRoot(448);
      Complex complex18 = complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.NaN.pow(0.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.pow(531.93619);
      Complex complex4 = complex0.divide(0.0);
      String string0 = complex4.I.toString();
      String string1 = complex3.toString();
      double double0 = complex2.getImaginary();
      Complex complex5 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.sinh();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = Complex.ONE;
      ComplexField complexField1 = complex3.ONE.getField();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex0.INF.multiply(complex3);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex0.multiply(0.0);
      Object object1 = complex6.readResolve();
      Complex complex9 = complex7.ZERO.pow((-1293.20671));
      Complex complex10 = complex4.exp();
      Complex complex11 = complex7.add(complex4);
      Complex complex12 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex5.pow(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.INF.pow((-1053.732));
      Complex complex15 = complex12.cos();
      Complex complex16 = complex15.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.exp();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-166.6571155714));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.NaN.conjugate();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-450.70694624859493));
      Complex complex1 = complex0.createComplex((-450.70694624859493), 0.0);
      List<Complex> list0 = complex1.ZERO.nthRoot(37);
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.valueOf((double) 37);
      double double0 = complex0.getReal();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex4.ZERO.atan();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = (-2621.67596);
      Complex complex0 = Complex.valueOf((-2621.67596), (-2621.67596));
      Complex complex1 = Complex.valueOf((-2621.67596));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.createComplex((-2621.67596), 1.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.INF.reciprocal();
      double double1 = 0.0;
      try { 
        complex2.INF.nthRoot((-262));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -262
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1229.7314978001), (-1229.7314978001));
      Complex complex1 = complex0.multiply((-1229.7314978001));
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex1.reciprocal();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-42.3746898093614);
      double double1 = 2.1454644909004582E-228;
      Complex complex0 = new Complex((-42.3746898093614), 2.1454644909004582E-228);
      double double2 = 0.0;
      try { 
        complex0.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.log();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.ZERO.multiply(Double.NaN);
      Complex complex5 = complex2.INF.acos();
      List<Complex> list0 = complex5.I.nthRoot(4098);
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex7 = complex0.atan();
      List<Complex> list1 = complex0.nthRoot(350);
      Complex complex8 = complex0.add((-1638.0));
      Complex complex9 = complex1.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(156.885368, Double.NaN);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.divide(107.37798462642053);
      Complex complex3 = complex1.NaN.multiply(217);
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex1.INF.multiply(1);
      Complex complex6 = complex5.ONE.multiply(complex3);
      Complex complex7 = complex1.NaN.sin();
      Complex complex8 = complex0.acos();
      Object object0 = complex8.I.readResolve();
      double double0 = complex1.getReal();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex5.pow(complex9);
      Complex complex12 = complex11.asin();
      double double1 = complex5.abs();
      Complex complex13 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.5662899017333984, 0.5662899017333984);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.subtract(3290.729912355757);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex6.ZERO.pow(complex3);
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex8.createComplex(3.330146018487787E-8, 1615.0);
      Complex complex11 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2739.28551784));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.NaN.sqrt1z();
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = Complex.valueOf((-2739.28551784), (-2739.28551784));
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.sqrt();
      boolean boolean0 = complex4.equals("");
      double double0 = complex2.getArgument();
      String string0 = complex5.toString();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = Complex.valueOf((-4018.1));
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.I.conjugate();
      Complex complex8 = complex0.sinh();
      Complex complex9 = Complex.valueOf((-4018.1));
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex10.ZERO.sin();
      Complex complex12 = complex11.ZERO.subtract((-2464.34681814));
      Complex complex13 = complex10.reciprocal();
      Complex complex14 = complex4.negate();
      Complex complex15 = complex0.cosh();
      List<Complex> list0 = complex15.I.nthRoot(110);
      Complex complex16 = complex0.atan();
      Complex complex17 = complex4.multiply((-4018.1));
      Complex complex18 = complex17.multiply((-2464.34681814));
      Complex complex19 = complex6.multiply(complex4);
      Complex complex20 = complex2.tanh();
      Complex complex21 = complex1.divide(complex2);
      Complex complex22 = complex14.tan();
      Complex complex23 = Complex.valueOf((-2464.34681814));
      int int0 = complex22.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2873.02);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex1.I.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.ONE.cosh();
      boolean boolean0 = complex6.equals(complex7);
      boolean boolean1 = complex0.isNaN();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex4.sin();
      List<Complex> list0 = complex2.nthRoot(1);
      List<Complex> list1 = complex5.nthRoot(1);
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.getArgument();
      List<Complex> list0 = complex0.nthRoot(23);
      Complex complex1 = Complex.INF;
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.divide(complex1);
      List<Complex> list1 = complex0.nthRoot(705);
      Complex complex3 = complex0.tan();
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex3.multiply(0);
      Complex complex5 = complex3.cos();
      Complex complex6 = complex1.exp();
      double double1 = complex3.I.getArgument();
      List<Complex> list2 = complex6.ONE.nthRoot(328);
      Complex complex7 = complex6.ZERO.subtract(complex3);
      Complex complex8 = complex2.pow(complex5);
      Complex complex9 = complex0.conjugate();
      int int0 = complex4.hashCode();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex3.INF.tan();
      Complex complex12 = complex9.INF.conjugate();
      boolean boolean0 = complex5.isNaN();
      Complex complex13 = complex10.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.valueOf(1.4605950309628873E-8);
      double double0 = complex0.abs();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.multiply(58);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-216.020212432283));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex3.ONE.sqrt1z();
      double double0 = complex1.abs();
      Complex complex5 = complex1.pow(0.0);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1799.6352), 4492.6457231858);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.divide((-1799.6352));
      Complex complex3 = complex0.ONE.add(complex1);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex3.pow((-1799.6352));
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.I.divide(1.0);
      Complex complex2 = complex0.negate();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.NaN.multiply(1);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex3.INF.pow(complex4);
      Complex complex6 = complex4.INF.divide((-1080.29351457141));
      Complex complex7 = complex3.log();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex7.I.tan();
      Complex complex10 = complex9.NaN.divide((-2619.0));
      Complex complex11 = complex7.NaN.atan();
      double double0 = complex1.getArgument();
      Object object0 = complex3.readResolve();
      Complex complex12 = complex0.INF.log();
      Complex complex13 = complex3.negate();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex4.atan();
      Complex complex16 = complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex6.NaN.negate();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex1.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-231.38166413351297));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.add(1090.02647);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.sqrt1z();
      String string0 = complex0.toString();
      Complex complex7 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-483.97462));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.pow((-1055.95975));
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.add(43.475249558022504);
      Complex complex3 = Complex.valueOf(43.475249558022504, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.INF.divide(complex3);
      double double0 = complex0.abs();
      Complex complex5 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      ComplexField complexField0 = complex2.NaN.getField();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex5.NaN.exp();
      Complex complex8 = complex6.NaN.createComplex(0.0, 1);
      Complex complex9 = complex3.multiply(complex5);
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.cos();
      boolean boolean0 = complex4.equals(complex0);
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(702.273);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.multiply(complex2);
      List<Complex> list0 = complex3.nthRoot(585);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(341.99588794283, 341.99588794283);
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.sqrt1z();
      try { 
        complex3.nthRoot((-787));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -787
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1889), 1479.9514);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.ZERO.cos();
      double double1 = complex0.getImaginary();
      Complex complex2 = complex1.divide(0.0);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(3.3664990715562672E72);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex3.multiply(2373);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-3006.060052), (-567.064));
      Complex complex1 = complex0.createComplex((-3006.060052), (-567.064));
      double double0 = complex0.abs();
      Complex complex2 = Complex.valueOf((-2538.1662743151583), (-2538.1662743151583));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-333.074136865));
      Complex complex1 = complex0.I.pow((-333.074136865));
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.INF.pow((-653.123));
      Complex complex5 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(897.951915629, (-2971.491555793339));
      Complex complex1 = complex0.I.pow((-2971.491555793339));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.pow(complex1);
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1623125976292733E-7));
      Complex complex1 = complex0.NaN.subtract(2850.6);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex0.INF.subtract((-1.1623125976292733E-7));
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.abs();
      double double1 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-3927.13905), (-3927.13905));
      int int0 = complex0.hashCode();
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.subtract(0.38308101892471313);
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = complex4.reciprocal();
      List<Complex> list0 = complex7.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-771.56368556029));
      Complex complex1 = complex0.subtract((-771.56368556029));
      boolean boolean0 = complex0.NaN.equals("SAME_SIGN_AT_ENDPOINTS");
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf((-771.56368556029));
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-2044.541436), 1.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.subtract((-486.39319444672));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.INF.subtract(complex1);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.pow(5.094280572218447E-8);
      try { 
        complex5.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = Complex.valueOf(493.241071, 493.241071);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.ONE.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = Complex.valueOf((-763.9087867477));
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex5.sqrt1z();
      String string0 = complex1.ZERO.toString();
      List<Complex> list0 = complex4.nthRoot(157);
      Complex complex7 = complex3.add(493.241071);
      Complex complex8 = complex1.multiply((-1291.585497735));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = Complex.valueOf(522.0376012725, 522.0376012725);
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.NaN.divide(complex1);
      Complex complex5 = Complex.valueOf(522.0376012725, 522.0376012725);
      Complex complex6 = complex4.I.subtract(complex5);
      Complex complex7 = complex0.multiply((-875.87));
      Complex complex8 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.log();
      try { 
        complex0.nthRoot((-2474));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,474
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(605.77351);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.multiply(1);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(6.283185307179586);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.ZERO.equals(object0);
      boolean boolean1 = complex1.isNaN();
      Complex complex2 = complex1.createComplex(6.283185307179586, 6.283185307179586);
      Object object1 = complex0.readResolve();
      Complex complex3 = complex2.NaN.divide(6.283185307179586);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex1.acos();
      double double0 = complex2.getArgument();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(892.0962598859672, 0.25380951278058683);
      Complex complex1 = complex0.NaN.divide(518.4784);
      Object object0 = complex0.ONE.readResolve();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex2 = complex0.divide((double) 17);
      boolean boolean0 = complex2.INF.equals((Object) null);
      Complex complex3 = complex2.NaN.negate();
      double double0 = complex1.abs();
      Complex complex4 = complex0.multiply(17);
      Complex complex5 = complex4.INF.acos();
      boolean boolean1 = complex3.INF.equals(complex1);
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = Complex.valueOf((-921.60495053353));
      boolean boolean2 = complex6.INF.equals((Object) null);
      Complex complex8 = complex1.subtract((-126.218523438));
      Complex complex9 = complex0.divide(complex4);
      Complex complex10 = complex3.cosh();
      Complex complex11 = Complex.valueOf(Double.NaN);
      Complex complex12 = Complex.INF;
      boolean boolean3 = complex4.I.equals(complex12);
      Complex complex13 = complex11.add(complex0);
      Complex complex14 = complex9.conjugate();
      Complex complex15 = complex14.NaN.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex16 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex17 = complex10.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1180.5785727084524);
      Complex complex1 = complex0.ZERO.sinh();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.ZERO.add(1180.5785727084524);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex4.INF.add(complex1);
      String string0 = complex7.ZERO.toString();
      try { 
        complex1.nthRoot((-1889));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,889
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = Complex.valueOf((-634.53204));
      Complex complex2 = complex1.ZERO.pow((-634.53204));
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.tan();
      List<Complex> list0 = complex3.nthRoot(1);
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex1.subtract((-1.0));
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex4.INF.cos();
      Complex complex7 = complex6.ONE.tanh();
      double double0 = complex7.NaN.getArgument();
      Complex complex8 = complex4.INF.tanh();
      Complex complex9 = complex3.NaN.exp();
      Complex complex10 = complex2.divide(complex1);
      Complex complex11 = complex1.cos();
      Complex complex12 = complex10.conjugate();
      Complex complex13 = complex9.exp();
      Complex complex14 = complex11.asin();
      int int0 = complex5.hashCode();
      Complex complex15 = complex6.add(0.0);
      int int1 = complex0.hashCode();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex3.ZERO.subtract(complex1);
      Complex complex6 = complex0.divide((-4553.45));
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.NaN.add(complex2);
      Complex complex10 = complex8.ONE.log();
      Complex complex11 = complex3.reciprocal();
      boolean boolean0 = complex6.isInfinite();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex12.ONE.reciprocal();
      Complex complex14 = complex1.cos();
      ComplexField complexField1 = complex14.NaN.getField();
      Complex complex15 = complex1.sin();
      Complex complex16 = complex6.divide((-479.32444));
      Complex complex17 = complex16.sqrt();
      Complex complex18 = complex16.NaN.atan();
      Complex complex19 = complex10.ONE.add((-479.32444));
      Complex complex20 = complex9.ONE.add(complex1);
      Complex complex21 = Complex.valueOf(0.0, (-126.126016647));
      double double0 = complex8.getImaginary();
      Complex complex22 = complex13.multiply(complex9);
      Complex complex23 = complex0.exp();
      boolean boolean1 = complex16.isNaN();
      Complex complex24 = complex0.subtract(complex9);
      Complex complex25 = complex21.sqrt();
      Complex complex26 = complex14.negate();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = Complex.valueOf((-2279.53970378894));
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.log();
      int int1 = complex4.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex1.multiply(2647);
      Complex complex7 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.multiply(1536.1368598151307);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = Complex.valueOf(662.33515, 662.33515);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.I.atan();
      Complex complex10 = complex7.tan();
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex8.divide((-556.66732));
      int int0 = (-149);
      try { 
        complex9.nthRoot((-149));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -149
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex1.NaN.asin();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex1.I.sqrt();
      Complex complex10 = complex7.I.atan();
      Complex complex11 = complex4.cosh();
      double double0 = complex11.INF.abs();
      double double1 = complex4.abs();
      Object object1 = new Object();
      boolean boolean0 = complex2.NaN.equals(object1);
      Complex complex12 = complex2.tan();
      Complex complex13 = complex12.ONE.cos();
      Complex complex14 = complex13.ZERO.tanh();
      Complex complex15 = complex14.NaN.exp();
      boolean boolean1 = complex5.isNaN();
      Complex complex16 = complex3.tan();
      Complex complex17 = Complex.ONE;
      Complex complex18 = complex17.INF.multiply(complex11);
      boolean boolean2 = complex4.equals(complex17);
      String string0 = complex4.toString();
      Complex complex19 = complex11.tanh();
      Complex complex20 = complex19.reciprocal();
      String string1 = complex6.toString();
      Complex complex21 = complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.I.equals(object0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.add(complex2);
      String string0 = complex3.toString();
  }
}
