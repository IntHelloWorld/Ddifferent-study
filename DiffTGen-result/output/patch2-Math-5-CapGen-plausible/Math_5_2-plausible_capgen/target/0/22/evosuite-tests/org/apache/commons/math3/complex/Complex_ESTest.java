/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:27:15 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-950.8816336097151), (-950.8816336097151));
      Complex complex1 = complex0.subtract((-950.8816336097151));
      String string0 = complex0.toString();
      Complex complex2 = complex0.exp();
      double double0 = 1.0;
      Complex complex3 = Complex.valueOf(1.0);
      double double1 = 2188.2057659;
      Complex complex4 = complex2.ONE.createComplex(2160.95571, 1.0);
      Complex complex5 = complex2.createComplex(1.0, 2188.2057659);
      Complex complex6 = complex5.createComplex(2188.2057659, 5.091070300111434E-88);
      Complex complex7 = complex6.acos();
      // Undeclared exception!
      complex7.nthRoot(5235);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.INF.asin();
      double double0 = complex3.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = new Object();
      boolean boolean0 = complex0.ONE.equals(object0);
      boolean boolean1 = complex0.NaN.equals((Object) null);
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ZERO.pow(complex1);
      Complex complex6 = complex0.divide(Double.NaN);
      Complex complex7 = complex4.I.multiply(complex3);
      Complex complex8 = complex2.add(1.0);
      double double2 = complex8.INF.abs();
      Complex complex9 = complex4.add(complex8);
      Complex complex10 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.multiply(0.0);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.ONE.divide(Double.POSITIVE_INFINITY);
      int int0 = complex5.ONE.hashCode();
      boolean boolean0 = complex3.isNaN();
      Complex complex10 = complex5.acos();
      Complex complex11 = Complex.valueOf((-4966.370908054006));
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.cosh();
      Complex complex14 = complex5.acos();
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow(1.0);
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.divide(1.0);
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex0.reciprocal();
      boolean boolean0 = complex1.equals(complex2);
      int int0 = complex3.ZERO.hashCode();
      double double1 = complex0.abs();
      double double2 = complex0.getArgument();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex2.INF.divide(complex1);
      boolean boolean1 = complex2.isNaN();
      String string0 = complex3.toString();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.I.asin();
      double double3 = complex8.I.getArgument();
      Complex complex10 = complex6.tanh();
      double double4 = complex0.getArgument();
      Complex complex11 = new Complex(Double.NaN, 0.0);
      Complex complex12 = complex2.divide(complex11);
      Complex complex13 = complex12.ONE.negate();
      Complex complex14 = complex0.multiply(complex4);
      double double5 = complex12.getReal();
      Complex complex15 = complex7.tanh();
      Complex complex16 = complex15.atan();
      Complex complex17 = complex12.sin();
      Complex complex18 = complex3.tanh();
      Complex complex19 = complex3.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(0.0, (-20.0));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.multiply(0.0);
      Object object0 = new Object();
      Complex complex4 = complex3.NaN.subtract((-1237.44780064));
      boolean boolean0 = complex3.NaN.equals(object0);
      Complex complex5 = Complex.valueOf(396.031714797579, 0.0);
      double double1 = complex1.getImaginary();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex6.sin();
      Complex complex9 = Complex.valueOf(396.031714797579, 2.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(3482.5363837, (-417.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex2.ZERO.multiply(complex3);
      ComplexField complexField0 = complex3.getField();
      Object object0 = new Object();
      boolean boolean0 = complex4.I.equals(object0);
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.ZERO.log();
      double double0 = complex1.getArgument();
      Complex complex8 = Complex.valueOf(8.98570720774568E-8);
      String string0 = complex0.ONE.toString();
      Complex complex9 = Complex.valueOf(1.6517235225090794, (-1.6990896855901115E-55));
      double double1 = complex9.getArgument();
      Complex complex10 = complex1.multiply((-1.6990896855901115E-55));
      Complex complex11 = complex0.sqrt();
      Complex complex12 = Complex.valueOf(20.0);
      Complex complex13 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(1935.148131);
      Complex complex3 = Complex.valueOf(1935.148131);
      Complex complex4 = Complex.valueOf(1935.148131);
      Complex complex5 = complex0.ONE.cosh();
      Complex complex6 = complex5.ZERO.pow(1935.148131);
      Complex complex7 = complex1.cos();
      String string0 = complex5.I.toString();
      Complex complex8 = complex4.ZERO.sinh();
      Complex complex9 = null;
      try { 
        complex7.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1478);
      Complex complex2 = complex1.INF.multiply(complex0);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.ONE.equals(object0);
      Complex complex3 = complex1.ZERO.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.ZERO.sin();
      double double0 = complex2.getArgument();
      Complex complex5 = complex1.pow(4581.525987209118);
      Complex complex6 = complex5.NaN.sqrt();
      ComplexField complexField1 = complex2.getField();
      int int0 = complex1.hashCode();
      Complex complex7 = complex1.conjugate();
      double double1 = complex2.abs();
      Complex complex8 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex7.atan();
      List<Complex> list0 = complex8.nthRoot(3384);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-927.3756834064683), (-927.3756834064683));
      Complex complex1 = complex0.ZERO.add((-927.3756834064683));
      int int0 = complex0.ONE.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.add((-927.3756834064683));
      try { 
        complex4.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ONE.conjugate();
      double double0 = complex0.abs();
      double double1 = complex2.getReal();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex1.ZERO.pow(1.0);
      Complex complex6 = Complex.valueOf(1563.60087);
      Complex complex7 = complex1.subtract(1.0);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex3.sin();
      Complex complex10 = complex9.ZERO.subtract(complex3);
      Complex complex11 = complex8.ZERO.createComplex((-629.862944), 1.0);
      Complex complex12 = Complex.valueOf(1.0);
      Complex complex13 = complex12.NaN.subtract(complex3);
      Complex complex14 = complex12.atan();
      Complex complex15 = complex8.sin();
      Complex complex16 = complex1.sin();
      Complex complex17 = complex4.reciprocal();
      Complex complex18 = complex16.add(3.1149346370027763E33);
      Complex complex19 = complex5.negate();
      Complex complex20 = complex6.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.INF.multiply(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = complex0.multiply(complex0);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.I.add(Double.NaN);
      Complex complex8 = complex6.NaN.cosh();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex0.createComplex(0.0, (-1605.432518009));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.ONE.createComplex(0.0, (-530.1105612));
      boolean boolean0 = complex4.equals(complex5);
      Complex complex7 = complex4.subtract(complex0);
      double double0 = complex4.getArgument();
      int int0 = complex2.hashCode();
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex9.pow(complex7);
      Object object0 = complex0.ZERO.readResolve();
      String string0 = complex1.toString();
      Complex complex11 = complex4.subtract(complex7);
      Complex complex12 = complex7.atan();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-2707.9013395860547));
      Complex complex2 = complex1.NaN.acos();
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex4.I.add(complex1);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex0.subtract((-2707.9013395860547));
      Complex complex9 = complex6.exp();
      boolean boolean0 = complex6.equals((Object) null);
      Complex complex10 = complex9.subtract(complex4);
      boolean boolean1 = complex0.equals(complex7);
      int int1 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.6420594453811646, 992.3638027268);
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.ZERO.divide(992.3638027268);
      Complex complex6 = complex5.I.cos();
      List<Complex> list0 = complex0.ONE.nthRoot(1103);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.I.sinh();
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex8.equals(object0);
      boolean boolean1 = complex4.equals(complex1);
      Complex complex10 = complex7.multiply(complex3);
      double double0 = complex3.getReal();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex6.exp();
      Complex complex13 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2370.953535602, 3747.45628198801);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1102.73, Double.NaN);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = Complex.valueOf((-5.253258132241335E-8));
      boolean boolean0 = complex1.INF.equals(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = Complex.valueOf(1102.73);
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.ONE.createComplex(0.0, Double.NaN);
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.valueOf(0.0);
      boolean boolean1 = complex2.isNaN();
      Complex complex9 = complex7.sinh();
      Complex complex10 = Complex.valueOf(1.8279051206232177E83, 214.0457963);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8428773880004883, Double.NaN);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0, 1.8428773880004883);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.INF.add(229.6);
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex5.add(complex2);
      Complex complex8 = complex0.createComplex(0.0, 1.8428773880004883);
      Complex complex9 = complex0.subtract(1.8428773880004883);
      Complex complex10 = complex4.INF.pow(complex5);
      double double0 = complex8.getArgument();
      Complex complex11 = complex9.I.subtract(0.0);
      Complex complex12 = complex9.ZERO.createComplex(1.5707963267948966, 1.8428773880004883);
      Complex complex13 = complex5.multiply(complex3);
      boolean boolean0 = complex9.isNaN();
      Complex complex14 = complex0.multiply((-1.0));
      Complex complex15 = complex14.acos();
      ComplexField complexField0 = complex10.getField();
      Complex complex16 = complex13.divide(complex9);
      Complex complex17 = complex14.multiply(1953);
      double double1 = complex10.getArgument();
      Complex complex18 = complex4.asin();
      Complex complex19 = complex5.cosh();
      int int0 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3490.59913456), 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = Complex.valueOf(0.0, (-1.0));
      Complex complex4 = complex3.I.createComplex(428.842043, (-4985.080506));
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex6.subtract(0.0);
      Complex complex10 = Complex.valueOf(0.0, (-3490.59913456));
      Complex complex11 = complex9.ZERO.divide(complex10);
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex12.INF.sinh();
      Complex complex14 = complex12.I.sqrt();
      Complex complex15 = complex6.atan();
      Complex complex16 = complex9.atan();
      Complex complex17 = complex6.ONE.atan();
      Complex complex18 = complex14.ONE.negate();
      Complex complex19 = new Complex(0.0);
      Complex complex20 = complex16.NaN.divide(complex19);
      double double0 = complex9.getImaginary();
      Complex complex21 = complex14.sinh();
      double double1 = complex20.getArgument();
      Complex complex22 = complex15.sinh();
      Complex complex23 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(433.5762);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf(433.5762);
      List<Complex> list0 = complex0.ZERO.nthRoot(1051);
      Complex complex4 = complex0.I.divide(433.5762);
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.multiply(1);
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = Complex.valueOf(433.5762);
      String string0 = complex8.ONE.toString();
      List<Complex> list1 = complex6.nthRoot(1);
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.NaN.multiply((-2330.62));
      Complex complex11 = complex9.divide(2165.484);
      Complex complex12 = complex4.log();
      Complex complex13 = complex9.log();
      Complex complex14 = complex13.I.tanh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex15 = complex14.multiply(1);
      Complex complex16 = complex6.cosh();
      boolean boolean1 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1013.65638), (-1013.65638));
      Complex complex1 = Complex.valueOf((-1013.65638), (-1013.65638));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex3.I.pow(complex1);
      Complex complex5 = complex3.INF.divide((-1013.65638));
      Complex complex6 = complex5.ONE.add((-1013.65638));
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex7.ONE.divide((-1013.65638));
      Complex complex12 = Complex.valueOf((-1013.65638));
      Complex complex13 = complex10.INF.createComplex(1781.7616, (-957.327041));
      Complex complex14 = complex2.cos();
      Complex complex15 = complex14.ZERO.divide(complex7);
      ComplexField complexField0 = complex14.getField();
      Complex complex16 = complex9.sin();
      Complex complex17 = complex2.tanh();
      Complex complex18 = Complex.valueOf((-767.6692690908608), (-2301.38161424877));
      Complex complex19 = complex16.add(complex10);
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.INF.multiply(complex2);
      Complex complex4 = complex2.ZERO.multiply(819.3093);
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex2.INF.tan();
      Complex complex9 = complex0.ONE.add((-48.6161068));
      Complex complex10 = complex0.cos();
      Complex complex11 = complex0.ONE.sinh();
      double double0 = complex0.abs();
      Complex complex12 = complex10.subtract(complex0);
      boolean boolean0 = complex12.isInfinite();
      Complex complex13 = complex10.multiply(4396);
      Complex complex14 = complex11.reciprocal();
      Complex complex15 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.valueOf(3208.9206831);
      String string0 = complex1.toString();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.INF.multiply(3208.9206831);
      boolean boolean0 = complex1.equals(complex0);
      ComplexField complexField0 = complex1.getField();
      ComplexField complexField1 = complex4.getField();
      double double0 = complex1.getReal();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex4.equals(object0);
      boolean boolean2 = complex4.isInfinite();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.subtract(326.017564256);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.NaN.add(6.283185307179586);
      Complex complex5 = complex0.asin();
      String string0 = complex0.toString();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.valueOf(0.0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex9 = complex2.atan();
      Complex complex10 = complex0.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.multiply(2368);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = Complex.valueOf(0.36358463764190674, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-388.02849839));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(complex0);
      double double0 = complex1.getImaginary();
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.NaN.subtract(complex3);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex2.sin();
      double double1 = complex7.getArgument();
      Complex complex10 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1682.6652));
      Complex complex1 = Complex.valueOf(0.0, (-2950.1));
      Complex complex2 = Complex.valueOf((-1682.6652));
      String string0 = complex2.toString();
      String string1 = complex1.toString();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(705.7602484739);
      Complex complex5 = complex3.INF.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.atan();
      Complex complex7 = Complex.valueOf(20.0, 20.0);
      Complex complex8 = complex3.multiply((-1288.52046218));
      boolean boolean0 = complex8.INF.equals(complex1);
      double double0 = complex0.abs();
      Complex complex9 = complex5.reciprocal();
      String string0 = complex2.toString();
      Complex complex10 = Complex.valueOf((-1288.52046218));
      Complex complex11 = complex6.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(236.09292148795);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.reciprocal();
      double double0 = complex3.INF.abs();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-6.402740469853475E39), (-20.0));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2663.914552);
      Complex complex1 = new Complex(6.283185307179586, 2663.914552);
      Complex complex2 = complex0.I.multiply(0.0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = (Complex)complex1.readResolve();
      boolean boolean0 = complex1.INF.equals(complex4);
      Complex complex5 = complex0.subtract(complex1);
      boolean boolean1 = complex1.equals(complex0);
      boolean boolean2 = complex1.equals(complex3);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = Complex.valueOf(2663.914552, 0.0);
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex1.subtract(complex2);
      Complex complex10 = complex3.ONE.multiply(2663.914552);
      Complex complex11 = complex0.NaN.negate();
      Complex complex12 = complex9.ONE.sin();
      Complex complex13 = complex12.ONE.pow(6.283185307179586);
      double double0 = complex4.getImaginary();
      Complex complex14 = complex9.sin();
      Complex complex15 = complex2.conjugate();
      Complex complex16 = complex8.add(0.0);
      Complex complex17 = complex12.asin();
      Complex complex18 = complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex0.tanh();
      String string0 = complex5.toString();
      Complex complex6 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex0.subtract((-993.9));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex5.asin();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex1.NaN.sqrt1z();
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex0.sqrt();
      try { 
        complex0.NaN.nthRoot((-644));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -644
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-3535.573623469936), (-3535.573623469936));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.negate();
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex1.ONE.pow((-3535.573623469936));
      Complex complex6 = complex3.ONE.tan();
      Complex complex7 = Complex.valueOf(0.0);
      boolean boolean0 = complex3.I.equals(complex7);
      Complex complex8 = Complex.valueOf((-3535.573623469936), 2107.12964132366);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3403.00605574858);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex0.NaN.add((-20.0));
      Complex complex4 = complex3.ZERO.createComplex(0.0, (-1257.6747));
      Complex complex5 = complex3.I.add(complex0);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.INF.divide((-20.0));
      Complex complex8 = complex6.NaN.sinh();
      Complex complex9 = complex3.multiply(1364.1130381758965);
      Complex complex10 = complex9.ZERO.subtract(complex0);
      Complex complex11 = complex3.NaN.pow(0.0);
      Complex complex12 = complex1.sin();
      List<Complex> list0 = complex12.INF.nthRoot(1626);
      String string0 = complex5.toString();
      int int0 = complex4.hashCode();
      double double0 = complex11.getReal();
      Complex complex13 = complex11.sqrt1z();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.divide(257.62485);
      double double0 = complex1.getImaginary();
      Complex complex3 = complex1.sinh();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-3365.0453245);
      Complex complex0 = new Complex((-3365.0453245));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.ZERO.cos();
      int int0 = (-2061);
      try { 
        complex1.ZERO.nthRoot((-2061));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,061
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(5.5375196488302575E305);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex0.multiply(5.5375196488302575E305);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex1.NaN.divide((-1549.9375622));
      Complex complex3 = complex0.INF.divide(4.203159541613745E-8);
      List<Complex> list0 = complex0.nthRoot(788);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex4.I.atan();
      Complex complex7 = complex0.subtract((-799.0));
      Complex complex8 = complex7.NaN.pow((double) 788);
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex9.ZERO.subtract(complex8);
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex10.multiply(complex3);
      Complex complex14 = complex9.INF.sqrt();
      Complex complex15 = complex13.pow(complex1);
      boolean boolean1 = complex15.equals(complex10);
      List<Complex> list1 = complex0.nthRoot(788);
      boolean boolean2 = complex12.equals(complex7);
      ComplexField complexField0 = complex2.getField();
      Complex complex16 = complex2.asin();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex17.I.acos();
      Complex complex19 = complex5.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(3153.0, 3153.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3439.4405518));
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.I.cos();
      List<Complex> list0 = complex1.INF.nthRoot(1);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-3439.4405518));
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex0.divide(complex2);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.multiply(complex3);
      Complex complex7 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract(1372.2468220267422);
      Complex complex2 = complex1.ZERO.add(6.283185307179586);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.add(complex3);
      Complex complex5 = complex0.atan();
      List<Complex> list0 = complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.pow(Double.NaN);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ONE.pow(complex0);
      Complex complex6 = complex4.ONE.multiply(130);
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex0.multiply((-812));
      Complex complex9 = complex8.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex4.add(311.96);
      boolean boolean1 = complex3.isNaN();
      Complex complex11 = complex3.acos();
      List<Complex> list0 = complex1.nthRoot(130);
      Complex complex12 = complex9.cosh();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.add(complex4);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2997.3939848, 2997.3939848);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.NaN.pow(3254.610493);
      Complex complex4 = complex2.ONE.subtract(complex1);
      Complex complex5 = complex4.ZERO.pow(0.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex2.I.add(0.0);
      Complex complex8 = complex5.NaN.subtract(complex6);
      String string0 = complex0.toString();
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex2.subtract(3254.610493);
      double double0 = complex11.abs();
      Complex complex12 = complex6.INF.subtract(complex7);
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex13.multiply(7);
      Complex complex15 = complex13.tanh();
      boolean boolean0 = complex8.isInfinite();
      Complex complex16 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4174.67));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      List<Complex> list0 = complex0.nthRoot(493);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.createComplex(0.0, (-4174.67));
      Object object1 = complex2.ZERO.readResolve();
      double double0 = complex2.abs();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.subtract((-903.50771034));
      Complex complex3 = complex1.add(complex0);
      double double0 = complex2.I.getArgument();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex3.sqrt();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex3.subtract((-903.50771034));
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.I.divide((-1.0));
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex3.pow(complex1);
      Complex complex13 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-497.5));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.INF.tan();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.ONE.multiply((-2090));
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.valueOf(1013.3129211352667, 0.0);
      boolean boolean1 = complex0.isNaN();
      Complex complex7 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.1838092090922606E287, (-2254.968443494516));
      Complex complex1 = Complex.valueOf(3.1838092090922606E287, (-1049.4));
      Complex complex2 = complex0.createComplex((-2254.968443494516), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.negate();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex0.negate();
      double double0 = complex2.ONE.getArgument();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.pow(complex1);
      Complex complex8 = Complex.valueOf((-3386.2784483944847));
      Complex complex9 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4858.0);
      Complex complex1 = complex0.createComplex(4858.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1.1588881015777588);
      Object object0 = complex0.readResolve();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex2.multiply((-1.0));
      Complex complex9 = complex7.divide(complex4);
      Complex complex10 = complex3.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3375.8353781422525));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.ONE.divide((-3375.8353781422525));
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex0.multiply(0.0);
      String string1 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.reciprocal();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.negate();
      double double0 = complex1.ONE.getArgument();
      List<Complex> list0 = complex1.INF.nthRoot(140);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.negate();
      double double1 = complex3.getImaginary();
      double double2 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(1144.455);
      Complex complex2 = complex0.multiply(2995);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.I.multiply(2995);
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.valueOf((double) 2995);
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = complex6.multiply(2995);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.2715470790863037);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.ZERO.sqrt();
      double double0 = complex1.getArgument();
      Complex complex4 = Complex.valueOf((-0.33333333333333287), 1.2715470790863037);
      double double1 = complex0.NaN.abs();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex0.ONE.add(complex1);
      Complex complex7 = complex6.log();
      Complex complex8 = complex6.NaN.exp();
      Object object0 = complex6.I.readResolve();
      Complex complex9 = complex0.tanh();
      double double2 = complex0.getImaginary();
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.valueOf(842.1352502068288);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.atan();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply((-3520.4017254));
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.I.atan();
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.INF.pow(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.log();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex1.subtract(complex4);
      Complex complex11 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.divide(1.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.conjugate();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex1.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = Complex.valueOf((-1513.79923633), (-586.05330327));
      Complex complex5 = complex3.pow((-1513.79923633));
      Complex complex6 = complex0.add((-1513.79923633));
      Complex complex7 = complex1.divide(47.88746401549);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1616.3446267278596);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.tanh();
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      double double0 = complex2.getReal();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.tanh();
      double double1 = complex5.ONE.abs();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4342737197875977);
      Complex complex1 = complex0.ZERO.multiply(2036);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = Complex.valueOf((double) 2036);
      Complex complex5 = complex4.negate();
      int int0 = complex2.hashCode();
      Complex complex6 = complex4.pow(2.4342737197875977);
      Complex complex7 = complex3.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2.2667083759873216E16));
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      String string0 = complex0.toString();
      Complex complex2 = Complex.valueOf(4.326489915443873E91);
      Complex complex3 = Complex.valueOf(0.0);
      boolean boolean0 = complex1.equals(complex3);
      Complex complex4 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(375.0);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.19220098853111267, 0.19220098853111267);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1406.7425);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.NaN.sqrt1z();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply((-479.74155832));
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(2751.1529168);
      Complex complex1 = complex0.ZERO.cosh();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.ONE.sin();
      Complex complex7 = complex2.ZERO.exp();
      Complex complex8 = complex3.multiply(814);
      String string0 = complex8.toString();
      Object object1 = complex0.readResolve();
      ComplexField complexField0 = complex1.INF.getField();
      boolean boolean0 = complex3.equals(object1);
      double double0 = complex1.getArgument();
      Complex complex9 = complex2.subtract(0.0);
      Complex complex10 = complex3.multiply(3.9174693825966044E-64);
      Complex complex11 = Complex.valueOf((double) 814, 0.0);
      Complex complex12 = complex7.tan();
      Complex complex13 = complex1.subtract(422.4998231);
      Complex complex14 = complex1.exp();
      boolean boolean1 = complex13.equals("(NaN, NaN)");
      Complex complex15 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-50.549298));
      Complex complex1 = complex0.ZERO.subtract((-50.549298));
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.ONE.subtract(complex0);
      Complex complex7 = complex1.I.reciprocal();
      Object object0 = complex3.INF.readResolve();
      Complex complex8 = Complex.valueOf((-50.549298), (-50.549298));
      Complex complex9 = complex3.ONE.createComplex((-50.549298), (-50.549298));
      String string0 = complex7.INF.toString();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex0.tan();
      Complex complex12 = Complex.valueOf((-50.549298));
      Complex complex13 = complex7.pow(248.71402);
      Complex complex14 = complex13.INF.negate();
      Complex complex15 = complex10.pow(248.71402);
      Complex complex16 = complex7.pow((-50.549298));
      Complex complex17 = complex5.ZERO.subtract((-50.549298));
      Complex complex18 = complex0.INF.divide((-50.549298));
      double double0 = complex15.abs();
      Complex complex19 = complex16.log();
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex6.negate();
      Complex complex22 = complex16.acos();
      Complex complex23 = complex16.negate();
      boolean boolean0 = complex7.isInfinite();
      Complex complex24 = complex3.multiply(0);
      Complex complex25 = Complex.valueOf((-135.2728523984), 0.0);
      Complex complex26 = complex15.sin();
      Complex complex27 = complex14.subtract(complex10);
      double double1 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = complex2.I.log();
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.multiply(1.0);
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex2.pow(complex1);
      Complex complex10 = complex9.ONE.pow(1.0);
      Complex complex11 = complex9.multiply(complex2);
      Object object1 = complex5.I.readResolve();
      Complex complex12 = complex11.add(0.0);
      Complex complex13 = Complex.valueOf((-6.950808333865794E-9), (-6.950808333865794E-9));
      List<Complex> list0 = complex6.nthRoot(1526);
      Complex complex14 = complex6.sin();
      Complex complex15 = complex7.multiply((-1465));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2597.2801));
      Complex complex1 = complex0.divide((-2597.2801));
      Complex complex2 = complex1.NaN.add((-2597.2801));
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.add((-2597.2801));
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.valueOf(412.074995057, (-2597.2801));
      Complex complex7 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.negate();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.ONE.multiply(1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = Complex.valueOf(1.0, 1.0);
      Complex complex7 = complex0.NaN.pow((double) 1);
      double double0 = complex1.getArgument();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.ZERO.multiply(18);
      Complex complex11 = complex9.INF.tanh();
      double double1 = complex6.getImaginary();
      Complex complex12 = Complex.valueOf(1.0);
      try { 
        complex4.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2434.43112559);
      Complex complex1 = complex0.pow(2434.43112559);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex2.INF.pow(complex0);
      Complex complex5 = complex2.ZERO.atan();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex1.getField();
      double double0 = complex0.getImaginary();
      double double1 = complex1.I.abs();
      Complex complex6 = complex1.multiply(7);
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.ZERO.multiply(7);
      Complex complex9 = complex0.add(complex7);
      Complex complex10 = complex9.subtract(complex0);
      Complex complex11 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-1160.3));
      Complex complex1 = complex0.tan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex2.INF.createComplex((-1160.3), 81);
      Complex complex7 = complex5.I.pow(complex0);
      Complex complex8 = complex7.INF.add((-1160.3));
      List<Complex> list0 = complex0.nthRoot(81);
      Complex complex9 = complex2.ONE.divide(complex1);
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex9.ZERO.acos();
      Object object0 = complex11.ZERO.readResolve();
      Complex complex12 = complex3.acos();
      Complex complex13 = complex1.conjugate();
      boolean boolean0 = complex13.INF.equals("");
      Complex complex14 = complex2.cos();
      boolean boolean1 = complex14.NaN.equals("");
      Complex complex15 = complex0.divide((double) 81);
      Complex complex16 = complex9.pow((-216.820400967));
      Complex complex17 = complex16.pow((-216.820400967));
      Complex complex18 = Complex.valueOf((double) 81);
      Object object1 = complex10.readResolve();
      double double0 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = Complex.valueOf((-2008.8), (-2008.8));
      Object object0 = complex0.readResolve();
      Complex complex3 = Complex.valueOf((-2.8964095485948707E176), (-2.8964095485948707E176));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex0.I.readResolve();
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.tanh();
      List<Complex> list0 = complex0.nthRoot(129);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.INF.pow(complex4);
      boolean boolean0 = complex4.NaN.equals(object0);
      Complex complex6 = complex0.NaN.multiply(complex3);
      int int1 = complex4.INF.hashCode();
      boolean boolean1 = complex3.isInfinite();
      double double0 = complex3.getReal();
      Complex complex7 = complex3.ONE.cos();
      double double1 = complex4.abs();
      String string0 = complex3.toString();
      boolean boolean2 = complex0.ONE.equals(complex3);
      double double2 = complex4.abs();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.NaN.tan();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex3.add(0.0);
      Complex complex12 = complex11.INF.multiply(37);
      Complex complex13 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex1.INF.multiply(Double.NaN);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex4.sinh();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
