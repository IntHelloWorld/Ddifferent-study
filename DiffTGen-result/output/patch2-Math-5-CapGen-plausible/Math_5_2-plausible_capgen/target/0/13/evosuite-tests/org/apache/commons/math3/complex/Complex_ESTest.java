/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:24:06 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.subtract(39.417549);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.valueOf((-3961.751), (-3961.751));
      Complex complex5 = complex0.INF.pow(complex1);
      Complex complex6 = complex0.NaN.multiply(0.0);
      Complex complex7 = complex2.I.asin();
      Complex complex8 = Complex.valueOf((-3961.751));
      Complex complex9 = complex5.NaN.createComplex(0.0, 1354.4168);
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex6.multiply((-94));
      Complex complex11 = complex10.subtract(complex5);
      ComplexField complexField0 = complex5.getField();
      Complex complex12 = complex4.asin();
      Object object1 = complex10.readResolve();
      Complex complex13 = complex1.multiply(complex8);
      Complex complex14 = new Complex(1354.4168, 871.5);
      Complex complex15 = complex12.pow(complex14);
      Complex complex16 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(754.4341, (-763.0));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply(2416.321184298785);
      int int1 = complex1.hashCode();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.multiply(981);
      double double0 = complex1.getArgument();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.cosh();
      double double1 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.pow((-2558.95));
      Complex complex2 = complex1.I.cos();
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = new Complex((-2558.95), Double.NaN);
      Complex complex5 = complex3.ZERO.divide(complex4);
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex3.NaN.sin();
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex7.NaN.sinh();
      double double1 = complex0.getReal();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex2.pow(complex3);
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex13.NaN.cos();
      Complex complex15 = complex3.exp();
      Complex complex16 = complex3.acos();
      double double2 = complex13.INF.abs();
      Complex complex17 = complex16.INF.pow(Double.NaN);
      Object object0 = complex5.readResolve();
      Complex complex18 = complex7.I.subtract(Double.NaN);
      List<Complex> list0 = complex13.nthRoot(1);
      Complex complex19 = complex4.sinh();
      Complex complex20 = complex0.log();
      Complex complex21 = complex8.NaN.subtract(0.0);
      double double3 = complex12.abs();
      List<Complex> list1 = complex8.nthRoot(1);
      Complex complex22 = complex7.reciprocal();
      boolean boolean1 = complex2.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(0.0);
      boolean boolean0 = complex1.ONE.equals(complex0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      List<Complex> list0 = complex3.NaN.nthRoot(2229);
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf((double) 2229);
      String string0 = complex3.ONE.toString();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.NaN.add((double) 2229);
      Complex complex8 = complex2.multiply(complex5);
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex8.ZERO.add(complex4);
      List<Complex> list1 = complex9.INF.nthRoot(1);
      int int0 = complex9.INF.hashCode();
      Complex complex12 = complex2.INF.sqrt();
      Complex complex13 = complex12.ONE.negate();
      String string1 = complex3.toString();
      Complex complex14 = complex2.pow(0.0);
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex2.equals(object0);
      double double0 = complex3.abs();
      boolean boolean2 = complex12.isInfinite();
      Complex complex15 = complex10.cosh();
      Complex complex16 = complex10.tanh();
      List<Complex> list2 = complex1.nthRoot(2229);
      Complex complex17 = complex10.exp();
      Complex complex18 = complex3.asin();
      Complex complex19 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply((-2849));
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex0.log();
      double double0 = complex1.I.getArgument();
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex4.NaN.exp();
      Complex complex7 = complex3.INF.log();
      Complex complex8 = complex1.NaN.sinh();
      Complex complex9 = Complex.valueOf(2.0);
      Complex complex10 = complex3.INF.tan();
      Complex complex11 = complex10.ZERO.add(1.5707963267948966);
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = complex3.sqrt();
      Complex complex13 = complex12.ZERO.sin();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex0.sqrt1z();
      boolean boolean0 = complex15.isNaN();
      double double1 = complex15.I.abs();
      Complex complex16 = complex15.sinh();
      Complex complex17 = complex16.ONE.pow(complex14);
      Complex complex18 = complex16.negate();
      int int0 = complex7.hashCode();
      Complex complex19 = complex1.subtract(complex15);
      Complex complex20 = complex17.sqrt();
      Complex complex21 = complex7.sqrt1z();
      Complex complex22 = complex21.NaN.negate();
      Complex complex23 = complex14.add(complex1);
      boolean boolean1 = complex1.isInfinite();
      double double2 = complex5.abs();
      Complex complex24 = complex13.atan();
      Complex complex25 = complex24.sin();
      Complex complex26 = complex18.asin();
      Complex complex27 = complex4.subtract(complex23);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.exp();
      List<Complex> list0 = complex0.ZERO.nthRoot(3142);
      Complex complex2 = complex0.multiply(3142);
      double double0 = complex2.INF.getArgument();
      double double1 = complex1.getReal();
      Complex complex3 = complex0.subtract(complex1);
      int int0 = complex3.hashCode();
      Complex complex4 = complex3.cos();
      boolean boolean0 = complex1.equals(list0);
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex3.reciprocal();
      Object object0 = complex6.ONE.readResolve();
      double double2 = complex6.ONE.getArgument();
      double double3 = complex2.getReal();
      Complex complex7 = complex3.ONE.pow(complex6);
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex2.divide(complex0);
      Complex complex11 = complex10.ONE.multiply(complex6);
      Complex complex12 = complex6.atan();
      Complex complex13 = complex10.sqrt1z();
      boolean boolean1 = complex0.equals(complex9);
      Complex complex14 = complex13.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex15 = complex14.NaN.conjugate();
      Complex complex16 = complex9.pow(1.0);
      Complex complex17 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 5074;
      // Undeclared exception!
      complex0.nthRoot(5074);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.NaN.equals(object0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.add(6.283185307179586);
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex1.multiply(706.22827554);
      Complex complex5 = complex4.I.createComplex(1357.7933695807626, 1357.7933695807626);
      Complex complex6 = Complex.valueOf(6.283185307179586);
      Complex complex7 = complex6.ZERO.asin();
      double double0 = complex6.getImaginary();
      Complex complex8 = complex7.add(273.7);
      int int0 = complex8.I.hashCode();
      Complex complex9 = complex1.multiply(complex6);
      Complex complex10 = complex9.I.add(0.0);
      Complex complex11 = complex9.I.log();
      Complex complex12 = complex8.subtract(0.0);
      Complex complex13 = complex4.add(complex9);
      ComplexField complexField0 = complex7.getField();
      Complex complex14 = complex8.multiply(complex3);
      boolean boolean1 = complex4.isNaN();
      Complex complex15 = complex3.cos();
      Object object1 = complex0.readResolve();
      boolean boolean2 = complex6.isInfinite();
      Object object2 = complex3.readResolve();
      Complex complex16 = complex1.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex2.I.subtract(complex0);
      Complex complex5 = complex1.createComplex((-207.03005628), (-207.03005628));
      Complex complex6 = complex5.INF.cos();
      String string0 = complex5.I.toString();
      Complex complex7 = complex1.ZERO.reciprocal();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex1.ZERO.add((-207.03005628));
      Complex complex10 = complex0.subtract(Double.NaN);
      int int0 = complex0.hashCode();
      int int1 = complex6.hashCode();
      Complex complex11 = complex9.sin();
      Complex complex12 = complex11.multiply((-207.03005628));
      Complex complex13 = complex1.reciprocal();
      double double0 = complex13.getArgument();
      Complex complex14 = complex6.divide(2055.0);
      Complex complex15 = complex14.ZERO.reciprocal();
      String string1 = complex6.toString();
      Complex complex16 = Complex.valueOf(0.0, Double.NaN);
      Complex complex17 = complex10.multiply(1);
      Complex complex18 = complex8.tanh();
      Complex complex19 = complex9.acos();
      double double1 = complex16.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.multiply((-1078.1));
      Complex complex3 = Complex.valueOf(6.283185307179586, (-1078.1));
      Complex complex4 = complex1.INF.asin();
      double double0 = complex1.ZERO.abs();
      List<Complex> list0 = complex1.nthRoot(933);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.sqrt1z();
      List<Complex> list1 = complex6.ZERO.nthRoot(933);
      Complex complex7 = complex6.NaN.divide(complex3);
      Complex complex8 = complex6.createComplex(0.0, 933);
      Complex complex9 = complex8.ONE.cosh();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex3.sin();
      List<Complex> list2 = complex2.nthRoot(577);
      Complex complex11 = Complex.valueOf((-1591.3319));
      int int0 = complex5.hashCode();
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1650.1565, 1650.1565);
      Complex complex1 = Complex.ONE;
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.createComplex((-620.33998), 1650.1565);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.NaN.reciprocal();
      Complex complex7 = complex5.I.pow(complex1);
      int int0 = complex7.ONE.hashCode();
      Complex complex8 = complex0.ZERO.createComplex((-2679.985737376338), 1650.1565);
      Complex complex9 = complex5.INF.multiply((-6.764191876212205E-9));
      Complex complex10 = complex0.sqrt1z();
      double double0 = complex9.INF.abs();
      Complex complex11 = complex4.INF.tan();
      Complex complex12 = complex1.NaN.divide((-3384.11903));
      Complex complex13 = complex10.ZERO.negate();
      Complex complex14 = complex13.ONE.add((-620.33998));
      Complex complex15 = complex14.ZERO.subtract((-2679.985737376338));
      Complex complex16 = complex13.ZERO.multiply(complex9);
      Complex complex17 = complex10.ONE.tanh();
      Complex complex18 = complex1.divide((-6.764191876212205E-9));
      try { 
        complex7.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.INF.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.atan();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex1.ONE.createComplex((-2115.0), (-4866.750712907217));
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex3.ZERO.add(Double.NaN);
      Complex complex5 = complex2.ZERO.cosh();
      Complex complex6 = complex1.ZERO.pow(3557.977191517);
      Complex complex7 = complex0.multiply(complex1);
      Object object1 = complex1.readResolve();
      Complex complex8 = complex2.I.divide(complex0);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex10.ONE.divide(1735.2276646455334);
      Object object2 = complex10.INF.readResolve();
      Complex complex12 = Complex.valueOf((-2115.0), Double.NaN);
      Complex complex13 = complex4.I.conjugate();
      Complex complex14 = complex12.negate();
      double double1 = complex12.getReal();
      Complex complex15 = complex4.divide(complex1);
      Complex complex16 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(7.710512446969693E192);
      Complex complex1 = complex0.INF.acos();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.INF.cosh();
      double double1 = complex0.INF.abs();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex0.ZERO.sin();
      List<Complex> list0 = complex0.I.nthRoot(306);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.ZERO.pow(complex2);
      Complex complex7 = complex5.divide(complex2);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex4.ONE.multiply((-309.5672076));
      String string0 = complex9.ZERO.toString();
      double double2 = complex0.getArgument();
      Complex complex10 = complex1.subtract(2.0);
      Complex complex11 = complex0.acos();
      Complex complex12 = complex10.log();
      Complex complex13 = complex12.multiply(complex0);
      Complex complex14 = complex13.INF.asin();
      Complex complex15 = complex12.sinh();
      Complex complex16 = complex15.cos();
      Complex complex17 = complex4.asin();
      Complex complex18 = complex17.ONE.sqrt();
      Complex complex19 = complex10.divide(complex16);
      Complex complex20 = Complex.valueOf((-281.5), (-309.5672076));
      Complex complex21 = complex19.cos();
      Complex complex22 = complex9.cosh();
      Complex complex23 = complex19.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1699.50746335941), (-1699.50746335941));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.INF.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = Complex.valueOf((-1699.50746335941));
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex6.ONE.multiply((-2538));
      Complex complex8 = Complex.valueOf((double) (-2538), 0.0);
      Complex complex9 = complex2.ZERO.cos();
      boolean boolean0 = complex9.equals(complexField0);
      Complex complex10 = complex2.INF.sin();
      Complex complex11 = complex1.ONE.sin();
      Complex complex12 = complex0.pow(complex1);
      Complex complex13 = complex12.NaN.multiply((-2.3085653185818848E-7));
      Complex complex14 = complex13.ZERO.multiply((-2.3085653185818848E-7));
      Complex complex15 = complex12.add((-1699.50746335941));
      Complex complex16 = complex2.divide((-1699.50746335941));
      Complex complex17 = complex1.acos();
      Complex complex18 = complex0.createComplex((-1699.50746335941), (-2.3085653185818848E-7));
      Complex complex19 = complex0.I.atan();
      Complex complex20 = complex19.ONE.multiply((-1699.50746335941));
      Complex complex21 = complex0.exp();
      Complex complex22 = complex15.sqrt();
      Complex complex23 = Complex.valueOf((-2.3085653185818848E-7));
      Complex complex24 = Complex.valueOf((-2.3085653185818848E-7), (-2.3085653185818848E-7));
      boolean boolean1 = complex2.equals(complex24);
      double double0 = complex3.getArgument();
      Complex complex25 = complex24.negate();
      int int0 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-464.0));
      Complex complex2 = complex0.multiply((-953));
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex3.INF.cos();
      boolean boolean0 = complex2.NaN.equals((Object) null);
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex5.NaN.divide(complex0);
      Object object0 = complex2.readResolve();
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.pow(complex5);
      Complex complex9 = complex8.add(complex2);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex8.reciprocal();
      Complex complex12 = Complex.valueOf((-518.499832457697));
      double double0 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-452.3));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.createComplex(1429.635699349, (-2337.051805));
      Complex complex3 = Complex.valueOf((-452.3), (-452.3));
      Complex complex4 = complex3.ZERO.multiply((-1134));
      Complex complex5 = complex3.NaN.subtract((-452.3));
      Complex complex6 = complex5.NaN.createComplex(0.0, (-2474.8576055356166));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex3.NaN.conjugate();
      Complex complex10 = complex9.ZERO.multiply(850.8);
      int int0 = complex3.ONE.hashCode();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex11.INF.sqrt1z();
      Complex complex13 = Complex.valueOf((-452.3));
      Complex complex14 = complex13.NaN.subtract(complex1);
      Complex complex15 = complex13.I.acos();
      int int1 = complex13.hashCode();
      double double0 = complex5.abs();
      double double1 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(462.6035291721, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.I.multiply(0.0);
      Complex complex4 = complex0.multiply(308);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex5.add(complex2);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex7 = complex4.NaN.sqrt1z();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex8 = complex0.INF.conjugate();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex4.pow(complex0);
      Complex complex11 = complex0.createComplex(0.0, 0.0);
      Complex complex12 = complex2.log();
      Complex complex13 = complex3.subtract(complex8);
      boolean boolean0 = complex3.equals(object0);
      Complex complex14 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex15 = complex3.ONE.atan();
      boolean boolean1 = complex0.equals(complex7);
      Complex complex16 = complex11.tanh();
      Complex complex17 = complex16.ZERO.exp();
      boolean boolean2 = complex10.isNaN();
      Complex complex18 = complex4.subtract(complex13);
      Complex complex19 = complex12.pow((-1586.0));
      Object object1 = complex8.readResolve();
      double double0 = complex14.abs();
      Complex complex20 = complex6.subtract(Double.POSITIVE_INFINITY);
      boolean boolean3 = complex6.equals((Object) null);
      Complex complex21 = complex19.sin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0686607360839844);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.INF.tanh();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = Complex.valueOf(1.0686607360839844, 2478.8272512110802);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex0.reciprocal();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getArgument();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.add(complex2);
      Complex complex10 = complex2.exp();
      Complex complex11 = complex9.tanh();
      double double1 = complex11.INF.getArgument();
      Complex complex12 = complex11.NaN.asin();
      double double2 = complex6.getReal();
      Complex complex13 = complex9.atan();
      boolean boolean1 = complex9.isInfinite();
      Complex complex14 = complex11.cosh();
      Complex complex15 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3343.0, 3343.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ONE.multiply(911);
      Complex complex3 = Complex.valueOf(3343.0);
      ComplexField complexField0 = complex1.INF.getField();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex0.pow(3343.0);
      Complex complex10 = complex8.NaN.multiply(complex3);
      Complex complex11 = complex4.add(complex8);
      Complex complex12 = complex3.divide(complex11);
      Complex complex13 = complex7.subtract(complex8);
      Object object0 = complex13.ONE.readResolve();
      Complex complex14 = complex13.atan();
      Complex complex15 = complex14.ONE.sqrt1z();
      double double1 = complex14.getArgument();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex6.pow(complex2);
      ComplexField complexField0 = complex5.getField();
      boolean boolean1 = complex0.isNaN();
      int int0 = complex2.hashCode();
      Complex complex8 = complex4.multiply(complex2);
      Complex complex9 = complex5.acos();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex7.tanh();
      String string0 = complex10.ONE.toString();
      Complex complex11 = complex5.I.multiply(complex7);
      Complex complex12 = complex11.ONE.tan();
      Complex complex13 = complex9.createComplex(6.283185307179586, (-8.423418717543));
      Complex complex14 = complex4.reciprocal();
      Complex complex15 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex3.ONE.pow(complex1);
      int int0 = complex3.hashCode();
      Complex complex5 = complex1.INF.conjugate();
      Complex complex6 = complex0.I.negate();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2525.4969390614, 2525.4969390614);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex3.ONE.pow(0.0);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.ONE.divide(0.0);
      double double0 = complex7.abs();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex4.ONE.tanh();
      Complex complex12 = complex2.ONE.reciprocal();
      Complex complex13 = complex9.NaN.subtract(2626.366);
      boolean boolean0 = complex0.isNaN();
      Complex complex14 = complex5.cos();
      Complex complex15 = complex2.cosh();
      Complex complex16 = complex6.sin();
      Complex complex17 = complex15.pow(2626.366);
      Complex complex18 = complex15.subtract(2525.4969390614);
      Complex complex19 = complex13.tan();
      int int0 = complex5.hashCode();
      Complex complex20 = complex17.subtract(complex5);
      Complex complex21 = complex4.tanh();
      Complex complex22 = complex8.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(633.314);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply((-3656));
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.I.subtract(5555.57);
      Complex complex6 = complex2.INF.asin();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex1.NaN.multiply(0.0);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = Complex.valueOf(5555.57);
      Complex complex11 = complex2.exp();
      int int0 = complex3.hashCode();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex0.isInfinite();
      ComplexField complexField0 = complex7.getField();
      Complex complex12 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.subtract(39.417549);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.valueOf((-3961.751), (-3961.751));
      Complex complex5 = complex0.INF.pow(complex1);
      Complex complex6 = complex0.NaN.multiply(0.0);
      Complex complex7 = complex2.I.asin();
      Complex complex8 = Complex.valueOf((-3961.751));
      Complex complex9 = complex5.NaN.createComplex(0.0, 1354.4168);
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex6.multiply((-94));
      Complex complex11 = complex10.subtract(complex5);
      ComplexField complexField0 = complex5.getField();
      Complex complex12 = complex4.asin();
      Object object1 = complex10.readResolve();
      Complex complex13 = complex1.multiply(complex8);
      Complex complex14 = complex3.multiply(871.5);
      Complex complex15 = complex12.pow(complex14);
      Complex complex16 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 3189.9878672);
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.NaN.reciprocal();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex2.negate();
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.I.add(2.0);
      List<Complex> list0 = complex6.ONE.nthRoot(2276);
      Complex complex8 = complex2.divide(3189.9878672);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.I.pow(2.8946401383311E-63);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.pow(complex0);
      double double0 = complex2.getArgument();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.NaN.add(2.8946401383311E-63);
      Complex complex11 = complex8.ZERO.acos();
      double double1 = complex2.getReal();
      Complex complex12 = complex5.cosh();
      double double2 = complex10.abs();
      Complex complex13 = complex5.subtract(Double.NaN);
      Complex complex14 = complex6.atan();
      Complex complex15 = complex2.ONE.multiply(Double.NaN);
      String string0 = complex8.toString();
      Complex complex16 = complex2.tanh();
      Complex complex17 = complex10.tanh();
      boolean boolean0 = complex2.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sin();
      double double0 = complex0.INF.abs();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.I.asin();
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.I.tan();
      int int1 = complex0.hashCode();
      Complex complex6 = complex0.cosh();
      double double1 = complex2.getReal();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex4.multiply(Double.POSITIVE_INFINITY);
      double double2 = complex2.getArgument();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex7.pow(complex0);
      Object object0 = complex6.readResolve();
      Complex complex10 = complex1.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(1.0, 1.0);
      Complex complex4 = complex0.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.multiply(40);
      Object object0 = complex5.readResolve();
      double double2 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1393.780465553411), 453.06);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.add((-4716.39559));
      Complex complex3 = complex1.subtract(0.0);
      Complex complex4 = Complex.valueOf((-4716.39559));
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-376.89067317), 2876.388006331);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.INF.createComplex(5820.7763, Double.NaN);
      Complex complex2 = Complex.valueOf(0.0, 2.0);
      Complex complex3 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.add((-1211.887972098315));
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex5.multiply(complex2);
      double double0 = complex3.getImaginary();
      String string0 = complex0.toString();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex5.subtract(complex2);
      Complex complex9 = complex7.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(4339.880036, 4339.880036);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.cos();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex3.NaN.pow(4339.880036);
      Complex complex5 = Complex.valueOf(4339.880036);
      boolean boolean0 = complex4.NaN.equals(complex5);
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex0.equals(object0);
      Complex complex6 = complex4.sqrt();
      int int0 = complex2.hashCode();
      Complex complex7 = complex4.pow(4339.880036);
      Complex complex8 = complex5.subtract(complex2);
      Complex complex9 = complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex2.sqrt1z();
      int int0 = complex4.ZERO.hashCode();
      double double0 = complex4.ONE.abs();
      int int1 = complex1.hashCode();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex2.sinh();
      try { 
        complex1.nthRoot((-2635));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2111.253086784878, 2111.253086784878);
      Complex complex2 = Complex.valueOf(2111.253086784878);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.sin();
      double double0 = complex1.getArgument();
      double double1 = complex0.getReal();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex3.I.sin();
      List<Complex> list0 = complex7.NaN.nthRoot(1007);
      Complex complex8 = complex7.ONE.cosh();
      List<Complex> list1 = complex0.nthRoot(1007);
      Complex complex9 = complex4.sqrt();
      double double2 = complex2.getImaginary();
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex0.tan();
      Complex complex12 = complex3.negate();
      Complex complex13 = complex5.pow((double) 1007);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ONE.tanh();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex3 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(555.6643268010721, (-483.56586281127153));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.cos();
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex2.ONE.pow(complex1);
      Complex complex5 = complex2.I.conjugate();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex1.divide(complex2);
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = new Complex(0.7853981633974483);
      boolean boolean0 = complex5.equals(complex10);
      boolean boolean1 = complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 4171.5827;
      Complex complex0 = new Complex(4171.5827);
      Complex complex1 = null;
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1726.01949775263));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex3.ONE.subtract(2096.6);
      Complex complex5 = complex3.I.multiply((-385));
      Complex complex6 = complex3.ZERO.multiply(complex0);
      Complex complex7 = complex0.createComplex((-1726.01949775263), (-343.9));
      Complex complex8 = complex2.ONE.tanh();
      double double0 = complex7.getArgument();
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = complex7.multiply(complex2);
      Complex complex11 = complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(81.06585177705);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply((-1445));
      Complex complex3 = complex1.subtract(81.06585177705);
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.ONE.cosh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex0.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex9.NaN.cos();
      boolean boolean1 = complex7.NaN.equals(complex8);
      Complex complex11 = Complex.valueOf(921.0);
      Complex complex12 = complex11.INF.negate();
      Complex complex13 = complex12.divide((-1114.0));
      Complex complex14 = complex11.tanh();
      Complex complex15 = complex12.sin();
      boolean boolean2 = complex7.isNaN();
      Complex complex16 = complex11.conjugate();
      Complex complex17 = complex11.divide(0.0);
      double double0 = complex9.getReal();
      Complex complex18 = complex2.subtract(complex9);
      Complex complex19 = complex18.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1143.246), 0.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.INF.subtract(complex1);
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = Complex.valueOf((-7.853944465095286E-8), (-7.853944465095286E-8));
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex5.divide((-1143.246));
      Complex complex7 = complex3.multiply((-732.1112731976277));
      Complex complex8 = complex1.NaN.reciprocal();
      Complex complex9 = complex7.subtract(complex5);
      boolean boolean1 = complex9.ONE.equals(complex0);
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex4.createComplex((-2447.552692333601), 620.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-492.4569904199428));
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.divide(8.0315614296865);
      Complex complex4 = complex0.INF.log();
      String string0 = complex1.toString();
      Complex complex5 = complex0.multiply(11);
      List<Complex> list0 = complex5.ZERO.nthRoot(11);
      Complex complex6 = complex5.multiply(163);
      int int0 = complex0.hashCode();
      Complex complex7 = complex2.add(complex5);
      ComplexField complexField0 = complex7.INF.getField();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.abs();
      double double1 = complex0.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.negate();
      Object object1 = new Object();
      boolean boolean0 = complex2.equals(object1);
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-456.326));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.INF.createComplex((-2013.653), (-2013.653));
      Complex complex4 = complex0.I.divide(complex2);
      Complex complex5 = complex4.INF.pow(complex1);
      Complex complex6 = complex1.NaN.sin();
      double double0 = complex0.getArgument();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.INF.multiply((-1.5707963267948966));
      Complex complex9 = complex0.divide(0.0);
      boolean boolean0 = complex7.isInfinite();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.acos();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(622.0, 622.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex1.INF.createComplex((-3.9945124955316294E-8), 622.0);
      Complex complex4 = Complex.valueOf(2.0, 622.0);
      Complex complex5 = complex4.add(complex2);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex0.pow(622.0);
      Complex complex8 = Complex.valueOf(622.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(1521.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf(1521.0, 2365.04279780607);
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = new Complex((-4697.63));
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex7.add((-4697.63));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.add(6.283185307179586);
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = Complex.valueOf(392.308454243, 6.283185307179586);
      Complex complex5 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2505.775652));
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.add((-2505.775652));
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.I.subtract(0.0);
      Complex complex8 = complex4.multiply((-1306.03153848));
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = complex4.NaN.sin();
      boolean boolean0 = complex0.equals("not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})");
      Complex complex11 = complex0.subtract(complex5);
      double double0 = complex3.getImaginary();
      Complex complex12 = complex11.sinh();
      double double1 = complex0.abs();
      Complex complex13 = complex11.cos();
      Complex complex14 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3408.331, (-636.7));
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.pow((-636.7));
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(2719.69451328398);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.I.subtract(2719.69451328398);
      Complex complex4 = complex0.pow(0.0);
      double double0 = complex4.INF.abs();
      Complex complex5 = complex0.sqrt1z();
      String string0 = complex0.toString();
      try { 
        complex4.nthRoot((-1274));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,274
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(2.9274120974020826E167);
      boolean boolean0 = complex3.equals(complex1);
      Complex complex4 = complex3.conjugate();
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex0.multiply(920);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex4.I.divide(complex1);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex1.exp();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex5.getField();
      double double1 = complex3.getArgument();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex9.atan();
      Complex complex12 = new Complex(0.0, 521.05);
      Complex complex13 = complex10.add(complex12);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.valueOf(2.016791373353671E-194, (-936.7395297));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.I.pow(complex1);
      boolean boolean0 = complex1.ZERO.equals("");
      Complex complex3 = complex0.subtract(0.0);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1471.01740312036));
      Complex complex1 = complex0.ZERO.multiply((-1207));
      double double0 = complex0.getReal();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.add(complex2);
      double double1 = complex1.getImaginary();
      Complex complex5 = complex3.I.log();
      Complex complex6 = complex1.divide((-9.441842771290538E-300));
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(607.2949917355);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = Complex.valueOf(6.283185307179586);
      Complex complex5 = complex1.ZERO.sqrt();
      Complex complex6 = complex2.sinh();
      String string0 = complex1.toString();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(846.2610180369556, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(846.2610180369556, 846.2610180369556);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.pow(complex2);
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex3.ONE.subtract(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex3.NaN.getField();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.ONE.multiply(complex0);
      Complex complex7 = complex1.createComplex(846.2610180369556, 1736.859439);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1758.698731739), 2.022029399871826);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-403.0));
      Complex complex1 = complex0.I.divide((-403.0));
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.INF.divide(0.0);
      Complex complex4 = complex0.pow((-403.0));
      Complex complex5 = complex0.cosh();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 764.2749531);
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3160.0, (-1940.7004956));
      Complex complex1 = Complex.valueOf(886.301386769, 3160.0);
      Complex complex2 = complex1.NaN.pow((-20.0));
      Complex complex3 = complex2.INF.pow((-1940.7004956));
      Complex complex4 = complex3.INF.pow((-1096.089207163915));
      Complex complex5 = complex3.ONE.multiply(3160.0);
      List<Complex> list0 = complex3.ZERO.nthRoot(17);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(956.15328, 1286.0751);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.pow(2008.3091401513896);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.ZERO.divide(complex2);
      Complex complex5 = complex0.NaN.multiply(1286.0751);
      Complex complex6 = complex0.multiply(1286.0751);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex4.createComplex(956.15328, 1286.0751);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2384.80408);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.divide(1.7976931348623157E308);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-9.662182911679299));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.NaN.multiply((-9.662182911679299));
      Complex complex6 = complex2.INF.divide(complex1);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-117.6268943), (-117.6268943));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ONE.add(6.443805025317327E169);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2068.07625824247), 1.1144917011260986);
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex1.I.equals(complex0);
      Complex complex2 = complex0.I.add(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex2.divide((-2068.07625824247));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(435.45398018813);
      Complex complex1 = new Complex((-109.0));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.atan();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.abs();
      Complex complex5 = complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.exp();
      double double0 = complex0.INF.abs();
      double double1 = complex0.getReal();
      Complex complex2 = complex1.multiply(6.283185307179586);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex1.ZERO.multiply(complex3);
      Complex complex6 = complex2.ZERO.exp();
      Complex complex7 = complex2.NaN.createComplex((-3737.95477377374), (-1497.4915915655188));
      Complex complex8 = complex2.INF.multiply(1919.89028360841);
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex7.log();
      Object object0 = complex1.readResolve();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex4.asin();
      Complex complex13 = complex12.sqrt1z();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(790.05665814);
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.INF.multiply((-2749.9061));
      Complex complex4 = complex0.pow(1.0);
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.createComplex(Double.NaN, 1.0);
      Complex complex7 = complex1.subtract(complex6);
      double double0 = complex0.getReal();
      double double1 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-679.309398806));
      Complex complex1 = complex0.I.createComplex((-679.309398806), (-2751.32));
      Complex complex2 = complex0.I.reciprocal();
      String string0 = complex0.toString();
      Complex complex3 = complex0.createComplex((-679.309398806), 1783.056071);
      Complex complex4 = complex3.NaN.subtract(2519.41103424783);
      int int0 = complex0.hashCode();
      Complex complex5 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 66.142578);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.multiply((-2607.06477311126));
      Complex complex2 = complex0.subtract((-2607.06477311126));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2210.062652857647));
      Complex complex1 = complex0.add((-2210.062652857647));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.divide(450.439);
      Complex complex5 = complex1.multiply((-882.9475268127783));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = Complex.valueOf(2.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2236.888268616136);
      Complex complex1 = complex0.NaN.pow(1.0738916397094727);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.asin();
      double double1 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      boolean boolean0 = complex1.NaN.equals((Object) null);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex7.NaN.subtract(complex2);
      Complex complex9 = complex6.NaN.conjugate();
      ComplexField complexField0 = complex6.NaN.getField();
      Object object0 = complex0.ONE.readResolve();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex4.asin();
      Object object1 = complex10.readResolve();
      Complex complex13 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.INF.sinh();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex2.getReal();
      Complex complex4 = complex3.exp();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-20.0), 434.7353101);
      Complex complex3 = complex1.sin();
      int int0 = complex0.hashCode();
      int int1 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex2.INF.divide(complex1);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.add((-599.46881));
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex1.INF.pow((-4370.2435248344));
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex1.ZERO.conjugate();
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex8.ZERO.multiply(complex1);
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = complex12.cos();
      Complex complex14 = complex2.tan();
      ComplexField complexField1 = complex9.ONE.getField();
      Complex complex15 = complex12.ZERO.createComplex(0.0, (-2194.057626552817));
      Complex complex16 = complex0.negate();
      Complex complex17 = complex13.multiply(550.78331029);
      Complex complex18 = complex10.multiply(complex3);
      Complex complex19 = Complex.NaN;
      Complex complex20 = complex18.divide(complex19);
      Complex complex21 = complex17.I.divide(0.0);
      Complex complex22 = complex3.acos();
      Complex complex23 = complex13.log();
      Complex complex24 = complex23.I.cosh();
      Complex complex25 = complex8.subtract(complex13);
      Complex complex26 = complex10.tanh();
      Complex complex27 = complex10.multiply(17);
      Complex complex28 = complex1.multiply(998);
      Complex complex29 = Complex.valueOf((-4370.2435248344), 550.78331029);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = complex2.I.subtract(0.0);
      Complex complex7 = complex0.INF.divide(Double.NaN);
      Complex complex8 = complex0.I.tan();
      Complex complex9 = complex2.conjugate();
      int int0 = complex7.ZERO.hashCode();
      int int1 = 1;
      List<Complex> list0 = complex7.NaN.nthRoot(1);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex10.INF.multiply(complex7);
      Complex complex12 = complex11.I.tan();
      double double1 = complex11.I.getArgument();
      Complex complex13 = complex0.sin();
      int int2 = (-3831);
      try { 
        complex1.nthRoot((-3831));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,831
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.9722796756250217E-108, 494.0);
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex0.NaN.subtract(7.48533983136081E-196);
      Complex complex4 = complex0.negate();
      String string0 = complex3.toString();
      List<Complex> list0 = complex1.nthRoot(3053);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.NaN.multiply(6.283185307179586);
      Complex complex7 = complex6.INF.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex0.sqrt();
      ComplexField complexField0 = complex2.getField();
      Complex complex9 = complex1.tan();
      boolean boolean1 = complex1.isInfinite();
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-190.665));
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.ZERO.divide((-429.7763168739051));
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.ONE.subtract((-429.7763168739051));
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf((-190.665));
      Complex complex7 = complex6.ONE.atan();
      boolean boolean0 = complex2.ZERO.equals(complex0);
      Complex complex8 = complex0.add((-190.665));
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = complex9.pow(complex8);
      Complex complex11 = complex10.acos();
      Complex complex12 = complex8.divide((-190.665));
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex13.I.sin();
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      double double0 = complex13.getReal();
      Complex complex16 = complex14.sqrt1z();
      Complex complex17 = Complex.valueOf((-190.665));
      Complex complex18 = complex0.reciprocal();
      Complex complex19 = complex13.I.cos();
      Complex complex20 = complex18.reciprocal();
      Complex complex21 = complex20.reciprocal();
      boolean boolean1 = complex12.isNaN();
      Complex complex22 = complex10.sin();
      Complex complex23 = complex14.atan();
      Complex complex24 = complex23.I.sin();
      Complex complex25 = complex15.sqrt();
      Complex complex26 = complex25.sqrt1z();
      Complex complex27 = complex3.divide(361.8203);
      Complex complex28 = complex25.negate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.NaN.acos();
      double double1 = complex3.INF.abs();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = complex7.readResolve();
      Complex complex9 = complex0.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = Complex.ONE;
      Object object1 = complex10.readResolve();
      boolean boolean0 = complex3.equals(object1);
      Complex complex11 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ONE.sinh();
      double double0 = 2.8946401383311E-63;
      Complex complex3 = complex2.I.pow(2.8946401383311E-63);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.ONE.multiply(2.8946401383311E-63);
      Complex complex8 = complex6.pow(complex0);
      double double1 = complex2.getArgument();
      ComplexField complexField0 = complex8.getField();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
