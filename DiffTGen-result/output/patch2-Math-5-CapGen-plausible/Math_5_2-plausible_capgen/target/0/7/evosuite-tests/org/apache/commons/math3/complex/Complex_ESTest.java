/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:20:23 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.pow((-879.057));
      Complex complex2 = complex1.I.pow(1343.20775469275);
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.INF.divide(complex1);
      Complex complex5 = complex2.INF.acos();
      int int0 = complex3.NaN.hashCode();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.log();
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex8.ONE.subtract(complex0);
      Complex complex12 = complex4.subtract((-1877.164047));
      Complex complex13 = complex12.ZERO.subtract(complex0);
      double double0 = complex8.getReal();
      Complex complex14 = complex10.INF.log();
      Complex complex15 = complex4.sin();
      double double1 = complex10.abs();
      double double2 = complex4.abs();
      Complex complex16 = complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(7.120242132370469E65);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ZERO.multiply(7.120242132370469E65);
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex0.NaN.exp();
      Complex complex6 = complex5.NaN.add(7.120242132370469E65);
      Complex complex7 = complex4.ZERO.conjugate();
      Complex complex8 = complex0.NaN.subtract(complex4);
      Complex complex9 = complex0.NaN.cosh();
      Complex complex10 = complex5.ZERO.tan();
      Complex complex11 = complex1.I.tan();
      Complex complex12 = complex4.createComplex(0.0, 0.0);
      Complex complex13 = complex12.ZERO.divide(complex8);
      Complex complex14 = complex12.multiply((-2171.8698));
      Complex complex15 = complex1.pow(complex2);
      Complex complex16 = complex15.log();
      List<Complex> list0 = complex16.NaN.nthRoot(1123);
      ComplexField complexField0 = complex16.NaN.getField();
      Complex complex17 = complex15.INF.add(complex7);
      Complex complex18 = complex0.asin();
      double double0 = complex5.INF.abs();
      Complex complex19 = complex2.multiply(complex1);
      List<Complex> list1 = complex19.ZERO.nthRoot(2226);
      Complex complex20 = Complex.valueOf((double) 1123);
      boolean boolean0 = complex5.isInfinite();
      Complex complex21 = complex8.subtract(0.0);
      Complex complex22 = complex2.sqrt();
      Complex complex23 = complex6.cosh();
      Complex complex24 = complex3.reciprocal();
      Complex complex25 = complex13.multiply(complex9);
      Complex complex26 = complex15.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-569.4716529), (-2469.16));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.conjugate();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex3 = complex0.negate();
      int int0 = complex3.ONE.hashCode();
      double double0 = complex0.abs();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.add(2533.9789006731403);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.INF.sqrt();
      boolean boolean0 = complex6.equals(complex7);
      Complex complex9 = complex6.ONE.pow(0.0);
      Complex complex10 = complex9.INF.tanh();
      Complex complex11 = complex10.INF.multiply(complex0);
      Complex complex12 = complex0.subtract(9.248598815279678E300);
      Complex complex13 = complex0.log();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex14.NaN.acos();
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex7.multiply(complex5);
      Complex complex18 = complex8.pow(complex11);
      Complex complex19 = complex1.atan();
      Complex complex20 = complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1745.08051);
      Complex complex1 = complex0.I.add(124.020291432);
      Complex complex2 = complex1.I.conjugate();
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.I.divide(complex3);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.NaN.createComplex(0.0, 0.0);
      Complex complex9 = complex3.add(Double.NaN);
      Complex complex10 = complex9.NaN.add(Double.NaN);
      Complex complex11 = complex7.ONE.subtract(complex0);
      Complex complex12 = complex9.subtract(1.0);
      Complex complex13 = complex12.NaN.multiply(complex8);
      Complex complex14 = complex5.atan();
      Object object0 = complex0.readResolve();
      Complex complex15 = complex4.negate();
      Complex complex16 = complex15.sin();
      Complex complex17 = complex16.cos();
      double double0 = complex12.getReal();
      Complex complex18 = complex13.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 2275.8026);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.I.divide(0.0);
      Complex complex5 = complex1.ONE.tanh();
      Complex complex6 = complex1.ONE.multiply(0);
      Complex complex7 = complex1.ONE.exp();
      Complex complex8 = complex4.createComplex(Double.POSITIVE_INFINITY, 2275.8026);
      Complex complex9 = complex4.ONE.divide(Double.POSITIVE_INFINITY);
      int int0 = complex9.INF.hashCode();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex10.ONE.add(3783.689579);
      double double0 = complex10.INF.getArgument();
      boolean boolean0 = complex10.ZERO.equals(complex4);
      double double1 = complex0.abs();
      Complex complex12 = complex10.ONE.negate();
      Object object0 = complex1.readResolve();
      double double2 = complex10.getArgument();
      boolean boolean1 = complex3.isNaN();
      Complex complex13 = complex10.reciprocal();
      Complex complex14 = complex10.acos();
      int int1 = complex7.hashCode();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.INF.pow(complex0);
      double double0 = complex1.abs();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex1.INF.subtract(0.0);
      Complex complex6 = complex0.multiply((-1455));
      Complex complex7 = complex1.cos();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 4.6097680405580995E-243);
      Complex complex9 = complex6.I.pow(complex8);
      Complex complex10 = complex6.pow(complex5);
      Complex complex11 = complex5.ONE.add(0.0);
      Complex complex12 = complex2.ZERO.subtract((-1401.2851771));
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex13.INF.pow(0.0);
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex3.pow(complex4);
      ComplexField complexField0 = complex10.getField();
      double double1 = complex11.getImaginary();
      Object object0 = complex6.readResolve();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1.3509137630462646);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex1.multiply((-141));
      Complex complex6 = complex2.divide((double) (-141));
      Complex complex7 = complex6.add(complex2);
      boolean boolean0 = complex4.equals(complex3);
      Object object0 = new Object();
      boolean boolean1 = complex5.equals(object0);
      List<Complex> list0 = complex5.nthRoot(3143);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6063569876284005E-8, (-56.06212011895143));
      double double0 = complex0.abs();
      Complex complex1 = complex0.subtract(1.6063569876284005E-8);
      Complex complex2 = complex1.ONE.multiply(1366.6);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1521.705), (-1480.9));
      Complex complex1 = Complex.valueOf((-1480.9), (-1521.705));
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.createComplex((-1521.705), (-395.0));
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex6.pow((-1480.9));
      ComplexField complexField0 = complex3.getField();
      int int0 = complex0.hashCode();
      ComplexField complexField1 = complex3.getField();
      Object object0 = complex1.readResolve();
      Complex complex11 = complex9.sinh();
      Complex complex12 = complex11.INF.cos();
      double double0 = complex11.getImaginary();
      Complex complex13 = complex9.sin();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2788.5617), (-2788.5617));
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.log();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      double double1 = complex0.getReal();
      Complex complex4 = complex0.tanh();
      try { 
        complex4.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(1.8325902719086093E-273, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1355.589171271), (-1355.589171271));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.sinh();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.584912896E9, 0.0);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.multiply(108);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex0.multiply(Double.NaN);
      Complex complex5 = complex0.sin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(874.537192487502, 874.537192487502);
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sqrt1z();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.ZERO.conjugate();
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.NaN.pow(1.0);
      Complex complex7 = complex5.pow(complex0);
      String string1 = complex7.I.toString();
      Complex complex8 = Complex.valueOf((double) 1);
      ComplexField complexField0 = complex8.I.getField();
      Object object1 = complex8.readResolve();
      boolean boolean1 = complex3.equals(object1);
      Complex complex9 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.6754317105801715E46), (-3.6754317105801715E46));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.ONE.equals(object0);
      Complex complex3 = complex0.cos();
      double double0 = complex3.getArgument();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex2.INF.divide(complex0);
      Complex complex7 = complex5.ONE.add((-3.6754317105801715E46));
      Complex complex8 = complex4.asin();
      double double1 = complex3.getArgument();
      Complex complex9 = complex0.add((-0.7853981633974483));
      String string0 = complex0.toString();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.tanh();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex1.add(complex0);
      int int0 = complex0.hashCode();
      Complex complex7 = complex2.divide(complex6);
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1465.1352985103));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex4.asin();
      double double0 = complex4.NaN.abs();
      Complex complex6 = complex4.ZERO.multiply((-867.6920200778));
      Complex complex7 = complex0.subtract(4207.2);
      Object object0 = complex5.readResolve();
      Complex complex8 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.add((-1092.8592496443));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ZERO.pow((-442.88660081));
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.ONE.reciprocal();
      Complex complex9 = complex0.pow(358.5819062);
      Complex complex10 = complex9.I.negate();
      double double0 = complex5.getReal();
      Complex complex11 = complex5.INF.asin();
      boolean boolean0 = complex4.isNaN();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = Complex.valueOf((-2095.31787888));
      Complex complex14 = complex11.NaN.negate();
      Complex complex15 = complex13.log();
      Complex complex16 = complex6.cos();
      Complex complex17 = complex15.acos();
      Complex complex18 = complex17.tan();
      Complex complex19 = complex9.pow((-442.88660081));
      boolean boolean1 = complex13.equals(complex18);
      double double1 = complex18.getArgument();
      double double2 = complex11.getReal();
      double double3 = complex15.getReal();
      String string0 = complex13.toString();
      Complex complex20 = complex2.add(complex19);
      double double4 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-2889.016));
      Complex complex1 = complex0.INF.multiply(1.4793481826782227);
      Complex complex2 = Complex.valueOf(1.4793481826782227, 0.0);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex0.ZERO.cos();
      Complex complex8 = complex3.subtract(39.94364241);
      String string0 = complex8.INF.toString();
      Complex complex9 = complex0.pow(0.0);
      Complex complex10 = complex2.ONE.subtract(complex5);
      Complex complex11 = complex8.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.valueOf(6.666544384808297E-279, (-2889.016));
      Complex complex13 = complex12.INF.tan();
      double double0 = complex9.getReal();
      Complex complex14 = complex5.multiply((-522.66165));
      Complex complex15 = complex1.cos();
      Complex complex16 = complex12.subtract(39.94364241);
      Complex complex17 = complex9.divide(complex14);
      List<Complex> list0 = complex17.nthRoot(536);
      Complex complex18 = complex4.add(0.0);
      Complex complex19 = complex18.I.sqrt1z();
      Complex complex20 = complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1995.1535672);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex3.INF.subtract((-4476.46737272596));
      Complex complex5 = Complex.valueOf(1230.393284457);
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = Complex.valueOf(1995.1535672);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex0.add((-48.706955));
      Complex complex11 = complex10.NaN.asin();
      List<Complex> list0 = complex9.NaN.nthRoot(230);
      double double0 = complex11.ONE.abs();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex9.divide(complex2);
      Complex complex14 = complex12.sin();
      double double1 = complex1.getArgument();
      Complex complex15 = complex4.sinh();
      double double2 = complex11.abs();
      Complex complex16 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.6696103838614634E-8);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.subtract(complex1);
      List<Complex> list0 = complex2.nthRoot(37);
      Complex complex3 = complex1.multiply((-639.224876));
      String string0 = complex1.toString();
      Complex complex4 = complex2.subtract(0.0);
      boolean boolean0 = complex3.equals(list0);
      Complex complex5 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.atan();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.INF.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = Complex.valueOf(0.0);
      double double1 = complex6.I.getArgument();
      Complex complex8 = complex3.ZERO.cos();
      Complex complex9 = complex8.ONE.multiply(complex6);
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex9.I.multiply((-121));
      double double2 = complex9.ONE.abs();
      Complex complex12 = complex6.ONE.tanh();
      Complex complex13 = complex1.divide(0.0);
      Complex complex14 = complex13.ZERO.exp();
      Complex complex15 = complex1.createComplex(0.0, 6.283185307179586);
      Complex complex16 = complex4.subtract(complex13);
      Complex complex17 = complex6.ZERO.cos();
      Complex complex18 = complex6.multiply(1);
      Complex complex19 = complex7.atan();
      Complex complex20 = complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.log();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ONE.subtract((double) 2195);
      Complex complex5 = complex0.ZERO.multiply(2195);
      Complex complex6 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.I.equals(complex6);
      double double0 = complex2.abs();
      Complex complex7 = complex1.exp();
      List<Complex> list0 = complex7.NaN.nthRoot(2195);
      Complex complex8 = complex2.sin();
      Complex complex9 = complex8.ONE.cosh();
      Object object1 = complex3.readResolve();
      int int0 = complex0.hashCode();
      Complex complex10 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4419.698958005508, 4419.698958005508);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.pow(complex2);
      boolean boolean0 = complex3.equals(complex2);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = Complex.valueOf(4419.698958005508, (-658.0));
      Complex complex10 = Complex.valueOf((-658.0), (-658.0));
      Complex complex11 = complex9.INF.sinh();
      double double0 = complex3.getReal();
      Complex complex12 = complex8.subtract(complex2);
      Complex complex13 = complex2.asin();
      Complex complex14 = complex3.negate();
      Complex complex15 = complex9.negate();
      Complex complex16 = complex12.atan();
      double double1 = complex5.getImaginary();
      List<Complex> list0 = complex8.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1736.7, 1939.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.pow(complex4);
      List<Complex> list0 = complex3.nthRoot(5874);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add(complex0);
      Complex complex2 = complex0.INF.multiply((-134));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.cos();
      double double0 = complex0.getImaginary();
      double double1 = complex5.getReal();
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(813.0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.0, Double.NaN);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex0.INF.add(complex3);
      Complex complex5 = complex3.INF.acos();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex0.ONE.sin();
      Complex complex9 = complex0.tan();
      double double0 = complex2.getArgument();
      Complex complex10 = complex9.INF.log();
      Object object0 = complex9.readResolve();
      Complex complex11 = complex9.sqrt1z();
      Complex complex12 = complex11.ZERO.acos();
      Complex complex13 = Complex.valueOf(1.0, 0.0);
      Complex complex14 = complex2.ONE.reciprocal();
      Complex complex15 = complex9.ONE.sqrt1z();
      Complex complex16 = complex13.ONE.multiply(3452.12);
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      double double1 = complex2.getReal();
      double double2 = complex8.getImaginary();
      Complex complex17 = complex2.pow(20.0);
      Complex complex18 = complex17.INF.createComplex(Double.NaN, 242.934906334);
      boolean boolean0 = complex11.isNaN();
      double double3 = complex9.getReal();
      boolean boolean1 = complex10.isInfinite();
      Complex complex19 = complex8.pow(complex16);
      Complex complex20 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.787906051540986E261);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.NaN.divide(complex4);
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.valueOf(0.0, 2.787906051540986E261);
      Complex complex9 = complex4.cosh();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(340.533975);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex0.multiply(complex1);
      String string0 = complex1.I.toString();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = Complex.valueOf(340.533975);
      Complex complex9 = complex6.INF.subtract(complex4);
      int int0 = complex2.hashCode();
      Complex complex10 = Complex.valueOf(426.792790086824);
      Complex complex11 = complex5.divide(complex8);
      Complex complex12 = complex0.subtract(complex3);
      Complex complex13 = complex12.ZERO.divide(complex2);
      Complex complex14 = complex8.sin();
      Complex complex15 = complex8.atan();
      int int1 = complex3.hashCode();
      Complex complex16 = complex15.multiply(426.792790086824);
      String string1 = complex14.toString();
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = complex7.multiply(426.792790086824);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ZERO.add((-1.0));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.exp();
      Object object0 = new Object();
      boolean boolean0 = complex5.ZERO.equals(object0);
      Complex complex6 = complex2.add((-1.0));
      Complex complex7 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1498.28211), 2347.82011);
      Complex complex1 = new Complex(1859.466, (-1498.28211));
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex4.NaN.reciprocal();
      Complex complex7 = complex3.multiply((-3288));
      Complex complex8 = complex7.conjugate();
      Complex complex9 = Complex.valueOf(0.0, (-1119.1143974772906));
      Complex complex10 = complex4.INF.pow(complex3);
      Complex complex11 = complex3.sinh();
      double double0 = complex5.abs();
      double double1 = complex11.getReal();
      Complex complex12 = complex2.multiply((-3288));
      Complex complex13 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1636.24));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ONE.divide(Double.NaN);
      Complex complex4 = complex3.INF.divide(complex2);
      Complex complex5 = complex3.NaN.negate();
      double double0 = complex1.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.multiply((-1636.24));
      ComplexField complexField0 = complex4.getField();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2329.0), (-267.912404));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex1.divide(678.115874177317);
      Complex complex6 = complex4.multiply(0.7853981633974483);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex5.add(2.2950686306677644E-244);
      Complex complex9 = complex7.ZERO.log();
      Complex complex10 = complex6.INF.multiply((-1800.656488));
      Object object0 = complex6.readResolve();
      Complex complex11 = complex4.INF.divide(complex7);
      Complex complex12 = complex3.log();
      Complex complex13 = complex12.NaN.tanh();
      Complex complex14 = complex4.log();
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex1.tanh();
      Complex complex17 = complex1.asin();
      Complex complex18 = complex14.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(20.0);
      Complex complex2 = complex0.INF.divide(20.0);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.multiply(complex2);
      Complex complex6 = complex5.NaN.cosh();
      String string0 = complex4.toString();
      Complex complex7 = complex5.INF.multiply(complex4);
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex7.INF.subtract(complex4);
      boolean boolean0 = complex4.isInfinite();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex5.multiply(2799.0);
      Complex complex12 = complex9.ZERO.sin();
      Complex complex13 = complex11.NaN.multiply((-931.30658457016));
      int int0 = complex9.hashCode();
      Complex complex14 = complex1.subtract((-677.4));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-916.448815899271), 1694.07);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ZERO.subtract((-916.448815899271));
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.add(2583.7235);
      double double0 = complex0.getImaginary();
      double double1 = complex3.ONE.abs();
      Complex complex5 = complex2.pow(376.4);
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1862.14850119));
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.createComplex((-917.770934), 0.0);
      Complex complex3 = complex1.tanh();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1806.0, 1806.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.createComplex(1806.0, (-1551.0846423084683));
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex2.ONE.tanh();
      Object object0 = complex0.readResolve();
      ComplexField complexField1 = complex1.getField();
      Complex complex6 = complex1.exp();
      try { 
        complex1.nthRoot((-578));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -578
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-852.77672), (-852.77672));
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(1330.2209382121);
      Complex complex1 = complex0.I.divide(1330.2209382121);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      String string0 = complex0.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.sin();
      Complex complex7 = Complex.valueOf(1330.2209382121);
      Complex complex8 = complex0.multiply(complex7);
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex4.subtract(1330.2209382121);
      ComplexField complexField0 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1709.530790585));
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.valueOf((-929.439), (-929.439));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.I.multiply((-1709.530790585));
      Complex complex6 = complex2.atan();
      boolean boolean0 = complex2.equals(complex3);
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.5745704174041748, 0.5745704174041748);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.INF.cosh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.NaN.divide(5.055224959032211E-240);
      int int0 = (-1537);
      try { 
        complex1.ZERO.nthRoot((-1537));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,537
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = (-227.517948100135);
      Complex complex0 = Complex.valueOf((-227.517948100135), 954.178758);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.ONE.cos();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex0.NaN.equals(object0);
      Complex complex5 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.cosh();
      double double1 = complex0.getReal();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.pow(17.90471533672);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.divide(complex2);
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex4.divide(17.90471533672);
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2680.175200288573));
      Complex complex1 = complex0.pow(618.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2200.90825898341), 481.3133177271);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-1.0));
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.tanh();
      int int0 = complex3.hashCode();
      String string0 = complex0.toString();
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex1.INF.sin();
      Complex complex7 = complex1.pow((-20.0));
      Complex complex8 = complex0.asin();
      Complex complex9 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1698.45));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(complex0);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2626.486779);
      Complex complex1 = complex0.subtract(2626.486779);
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(4231.27220233);
      Complex complex1 = Complex.valueOf(4231.27220233);
      Complex complex2 = Complex.valueOf(4231.27220233);
      Complex complex3 = complex1.NaN.sin();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.conjugate();
      double double0 = complex4.getArgument();
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(Double.NaN, 4231.27220233);
      Complex complex8 = complex4.INF.createComplex(Double.NaN, 0.0);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex9.pow(complex1);
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(740.1494663964, (-1800.9971662404614));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1878.90370518);
      Complex complex1 = complex0.ONE.divide(1878.90370518);
      Complex complex2 = complex1.subtract(3460.56321666);
      Complex complex3 = complex2.I.reciprocal();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex4 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-3782.207068));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = Complex.valueOf(2.2381820678710938, (-1709.6858072396));
      double double0 = complex3.getArgument();
      Complex complex6 = complex4.pow((-3782.207068));
      Complex complex7 = complex3.acos();
      Complex complex8 = complex0.ZERO.sinh();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex7.subtract((-3782.207068));
      Complex complex10 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1476.0), (-1476.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.asin();
      double double0 = complex4.getReal();
      Complex complex5 = complex4.I.multiply(complex1);
      ComplexField complexField0 = complex5.ONE.getField();
      List<Complex> list0 = complex4.I.nthRoot(7);
      boolean boolean0 = complex4.equals(";x:W.u)");
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.sinh();
      String string0 = complex6.ONE.toString();
      String string1 = complex6.INF.toString();
      double double1 = complex4.getArgument();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex4.tan();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(430.862331042);
      Complex complex1 = complex0.ONE.subtract(430.862331042);
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-1561.851017));
      Complex complex1 = complex0.multiply(3262);
      Complex complex2 = complex0.divide((double) 3262);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(4396.424680263037, 4396.424680263037);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex1.sqrt();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.sqrt();
      double double2 = complex1.getImaginary();
      Complex complex6 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.sin();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.486523121881414E-8, (-2570.38587315107));
      Complex complex1 = new Complex((-2570.38587315107), 4857.801);
      double double0 = complex1.I.getArgument();
      Complex complex2 = Complex.valueOf((-73.29626), 0.27786844968795776);
      List<Complex> list0 = complex2.NaN.nthRoot(535);
      Complex complex3 = complex0.ZERO.log();
      List<Complex> list1 = complex1.I.nthRoot(1627);
      Complex complex4 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1679.534451), (-1690.2819));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.add(0.0);
      boolean boolean0 = complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.add(2192.58820390327);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.tan();
      String string0 = complex0.INF.toString();
      String string1 = complex0.INF.toString();
      double double0 = complex0.I.abs();
      ComplexField complexField0 = complex0.ZERO.getField();
      double double1 = complex0.abs();
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3065.6), (-3065.6));
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex2.ZERO.negate();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      List<Complex> list0 = complex0.nthRoot(935);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.NaN.sin();
      double double1 = complex2.I.abs();
      Complex complex4 = complex2.cos();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1816.78857861416);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(2626.48678);
      double double0 = complex0.NaN.abs();
      Complex complex1 = new Complex(2626.48678);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-324.78643), 1204.45);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1587.71782), 238.247413303);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.I.add(2141.9385694394);
      Complex complex4 = new Complex((-1351.75132065));
      Complex complex5 = complex0.NaN.add(complex4);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = complex4.divide(238.247413303);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.ZERO.reciprocal();
      Complex complex11 = complex4.divide(complex9);
      Complex complex12 = complex4.asin();
      Complex complex13 = complex12.atan();
      Complex complex14 = complex11.pow((-1351.75132065));
      Complex complex15 = complex12.conjugate();
      Object object0 = complex13.readResolve();
      Complex complex16 = Complex.valueOf(5370.6341676256);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1658.41171868));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.multiply(17);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex4.tanh();
      boolean boolean0 = complex5.ZERO.equals(complex2);
      Complex complex6 = complex4.INF.asin();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.I.multiply((-3224.52));
      Complex complex9 = complex6.I.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex10 = complex2.NaN.tan();
      Complex complex11 = complex2.subtract(complex0);
      ComplexField complexField0 = complex11.NaN.getField();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.NaN.cos();
      Complex complex14 = complex13.I.cos();
      Complex complex15 = complex1.multiply((-1658.41171868));
      Complex complex16 = complex15.INF.atan();
      ComplexField complexField1 = complex4.getField();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex0.subtract(complex17);
      Complex complex19 = complex18.NaN.add(complex6);
      boolean boolean1 = complex0.isNaN();
      Complex complex20 = complex16.tanh();
      int int0 = complex14.hashCode();
      double double1 = complex5.getArgument();
      int int1 = complex10.hashCode();
      Complex complex21 = complex20.multiply(1002);
      Complex complex22 = complex1.tanh();
      Complex complex23 = complex19.add(complex21);
      Complex complex24 = complex2.pow(complex12);
      boolean boolean2 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-1217.42402112036));
      Complex complex1 = new Complex(1929.898, 1929.898);
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.NaN.pow((-1217.42402112036));
      Complex complex4 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-507.67));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.pow((-507.67));
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.multiply((-507.67));
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.I.negate();
      Complex complex7 = complex1.INF.sqrt();
      Complex complex8 = complex5.ZERO.reciprocal();
      List<Complex> list0 = complex3.nthRoot(1753);
      Complex complex9 = complex5.pow(0.0);
      boolean boolean0 = complex1.isInfinite();
      String string0 = complex3.toString();
      double double1 = complex1.getArgument();
      Complex complex10 = complex0.subtract(complex1);
      Complex complex11 = complex2.atan();
      Complex complex12 = complex11.cosh();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex11.subtract(complex13);
      Complex complex15 = complex3.divide((double) 1753);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex2.NaN.multiply(complex0);
      Complex complex5 = complex0.divide(0.0);
      boolean boolean0 = complex0.NaN.equals(complex4);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.I.multiply(complex6);
      Complex complex8 = complex4.divide(1.1918249660105651E-8);
      Complex complex9 = complex5.subtract(0.18329763412475586);
      Complex complex10 = complex2.subtract(0.18329763412475586);
      Complex complex11 = complex4.negate();
      Complex complex12 = complex11.multiply(952);
      Complex complex13 = complex5.reciprocal();
      Complex complex14 = complex7.multiply(complex9);
      Complex complex15 = Complex.valueOf(0.0);
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      double double0 = 7.887051614592191E-8;
      Complex complex0 = Complex.valueOf(7.887051614592191E-8);
      Complex complex1 = complex0.INF.add(7.887051614592191E-8);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.ZERO.log();
      try { 
        complex2.I.nthRoot((-3214));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,214
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.I.pow(1538.0);
      Complex complex3 = complex0.createComplex(1538.0, 0.0);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.ZERO.sqrt();
      double double0 = complex0.NaN.abs();
      Complex complex6 = complex4.I.sqrt();
      Complex complex7 = complex4.I.add((-622.78244));
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = Complex.valueOf(1538.0, 0.0);
      double double1 = complex1.getArgument();
      Complex complex11 = Complex.valueOf(1538.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.718446464587963E12), 636.66517);
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex2.INF.divide((-1273.18));
      Complex complex6 = complex0.ZERO.divide(0.0);
      Complex complex7 = complex5.ONE.createComplex((-354.6830253017005), 0.0);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex8 = Complex.valueOf((-1273.18));
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex9.INF.multiply(0.0);
      boolean boolean0 = complex1.isNaN();
      String string0 = complex0.toString();
      Complex complex12 = Complex.valueOf(7.054443447243064E-8);
      Complex complex13 = complex12.ONE.sinh();
      Complex complex14 = complex13.NaN.conjugate();
      int int0 = complex5.NaN.hashCode();
      Complex complex15 = complex14.INF.createComplex((-354.6830253017005), 7.054443447243064E-8);
      Complex complex16 = complex5.pow(6.283185307179586);
      ComplexField complexField1 = complex0.getField();
      Complex complex17 = complex11.acos();
      Complex complex18 = complex9.tan();
      double double0 = complex10.getImaginary();
      boolean boolean1 = complex7.isNaN();
      Complex complex19 = complex4.reciprocal();
      Complex complex20 = complex13.divide(636.66517);
      Complex complex21 = complex8.sqrt();
      Complex complex22 = complex18.conjugate();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      boolean boolean0 = complex0.equals("");
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex3.NaN.divide(complex0);
      Complex complex6 = Complex.valueOf(519.0950293987);
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex6.I.cos();
      Complex complex10 = complex9.reciprocal();
      double double0 = complex9.NaN.getArgument();
      Complex complex11 = complex8.ZERO.sinh();
      int int0 = complex7.hashCode();
      Complex complex12 = Complex.valueOf((-1478.5462254143));
      Complex complex13 = Complex.valueOf(2.2185957416622524E-48);
      double double1 = complex7.ONE.getArgument();
      Complex complex14 = complex0.add(3447.3031);
      Complex complex15 = complex7.exp();
      int int1 = complex15.hashCode();
      Complex complex16 = complex8.ONE.asin();
      ComplexField complexField0 = complex13.getField();
      ComplexField complexField1 = complex8.getField();
      double double2 = complex7.getArgument();
      Complex complex17 = complex2.acos();
      Complex complex18 = complex11.cos();
      boolean boolean0 = complex1.equals(complex5);
      Complex complex19 = complex18.log();
      Complex complex20 = complex9.reciprocal();
      Complex complex21 = complex16.acos();
      Complex complex22 = complex0.divide(1.083371639251709);
  }
}
