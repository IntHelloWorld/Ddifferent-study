/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 09:29:59 GMT 2020
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math3.analysis.function.Identity;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-2963);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2963), (-1), Double.NaN);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-2963);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-2963);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 1730.6158);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1));
      } catch(IllegalArgumentException e) {
         //
         // -2,959 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1947.24491181703);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-4514.813236305431));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-4514.813236305431));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0.0);
      double double1 = arrayRealVector0.getL1Distance(openMapRealVector0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 0.0, 0);
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(linkedList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3979.105722303;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 933.44119514997;
      doubleArray0[8] = 6.283185307179586;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 10.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 0);
      int int0 = simplexTableau0.getSlackVariableOffset();
      RealVector realVector0 = RealVector.unmodifiableRealVector((RealVector) null);
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum(realVector0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 322.269206696185;
      doubleArray0[1] = 3603.010632179816;
      doubleArray0[2] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1433.919064);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 3603.010632179816);
      boolean boolean0 = linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3603.010632179816, 2077);
      boolean boolean1 = simplexTableau0.isOptimal();
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(1066, (-476), 0.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (1,066)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2410.16059900585);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-2410.16059900585));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2410.16059900585));
      int int0 = simplexTableau0.getSlackVariableOffset();
      simplexTableau0.dropPhase1Objective();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int1 = simplexTableau0.getHeight();
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow((-443));
      } catch(IllegalArgumentException e) {
         //
         // column index (-443)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      double double0 = arrayRealVector1.getL1Norm();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 2253.5627178545);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1636.25161437529);
      doubleArray0[1] = 2253.5627178545;
      doubleArray0[2] = (-1636.25161437529);
      doubleArray0[3] = 2253.5627178545;
      doubleArray0[4] = 2253.5627178545;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, (-1636.25161437529), relationship0, arrayRealVector0, (-1.0));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      doubleArray0[5] = (-1636.25161437529);
      doubleArray0[6] = 2253.5627178545;
      Relationship relationship1 = Relationship.LEQ;
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 2253.5627178545);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.subtract(arrayRealVector0);
      boolean boolean1 = linkedList0.add(linearConstraint1);
      boolean boolean2 = linkedList0.add(linearConstraint1);
      boolean boolean3 = linkedList0.add(linearConstraint1);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1636.25161437529), 1809);
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2743.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      boolean boolean0 = true;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-2692.55576820986));
      boolean boolean1 = linkedList0.add(linearConstraint0);
      LinearConstraint linearConstraint1 = linkedList0.remove();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3337.08467869453));
      Double[] doubleArray1 = new Double[3];
      Double double1 = new Double((-2692.55576820986));
      doubleArray1[0] = double1;
      Double double2 = new Double((-3337.08467869453));
      doubleArray1[1] = double2;
      Double double3 = new Double(5123.076998496);
      doubleArray1[2] = double3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, (-1735), 0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      double double4 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector1);
      boolean boolean2 = linkedList0.add(linearConstraint1);
      int int0 = simplexTableau0.getNumDecisionVariables();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      simplexTableau0.initializeColumnLabels();
      double double5 = simplexTableau0.getEntry(0, 0);
      int int1 = simplexTableau0.hashCode();
      int int2 = simplexTableau0.getOriginalNumDecisionVariables();
      // Undeclared exception!
      try { 
        simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-534.820228985));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1196.0));
      int int0 = simplexTableau0.getNumSlackVariables();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1893.1513;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1622.046589451002);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1481.6408950059056);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-158.17);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3498.628, 0);
      simplexTableau0.setEntry(0, 0, 0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      List<LinearConstraint> list1 = simplexTableau0.normalizeConstraints(list0);
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(3573, 10, 0.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (3,573)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2226.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4225.279568943821;
      doubleArray0[3] = 1430.64938;
      doubleArray0[4] = 2008.849791457108;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 689.355580775;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 689.355580775);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      int int0 = simplexTableau0.getArtificialVariableOffset();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-520);
      int int1 = 164;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-520), 164);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-520));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 164;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = (double) 164;
      doubleArray0[4] = (double) 164;
      doubleArray0[5] = 1.0E-12;
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 3126.3547342106);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 164.0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      RealVector realVector0 = openMapRealVector0.mapMultiplyToSelf(164);
      SimplexTableau simplexTableau1 = null;
      try {
        simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 1.0E-12, (-520));
      } catch(IllegalArgumentException e) {
         //
         // -517 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 887.1559;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 192.734577567;
      doubleArray0[3] = 17.3415654859;
      doubleArray0[4] = (-4243.359425);
      doubleArray0[5] = 743.00415802;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 17.3415654859, 2054);
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(2054, 0);
      } catch(IllegalArgumentException e) {
         //
         // row index (2,054)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-335.4561281841);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-714.69685));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-714.69685));
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(825, (-1680.577411480326));
      } catch(IllegalArgumentException e) {
         //
         // row index (825)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 298.6;
      doubleArray0[1] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-429.98905843363383), 588);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 1.0);
      PointValuePair pointValuePair0 = simplexTableau1.getSolution();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1111.3650859480883;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1111.3650859480883);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 182.255126573085);
      Integer integer0 = simplexTableau0.getBasicRow(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-329.20748758);
      doubleArray0[1] = (-1365.09179480734);
      doubleArray0[2] = 3370.2589412;
      doubleArray0[3] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
      int int0 = simplexTableau0.getRhsOffset();
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      simplexTableau0.divideRow(0, 279.667264469);
      double[][] doubleArray1 = simplexTableau0.getData();
      int int1 = simplexTableau0.getOriginalNumDecisionVariables();
      int int2 = simplexTableau0.getNumArtificialVariables();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 1915.69867;
      doubleArray0[4] = (-733.01);
      doubleArray0[5] = (-364.926);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-364.926));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-733.01));
      int int0 = simplexTableau0.hashCode();
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((-3387), Double.NEGATIVE_INFINITY);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-359.7123022);
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = (-3072.74862757074);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1594.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 5);
      simplexTableau0.divideRow(0, (-359.7123022));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 302.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3266.878305;
      doubleArray0[3] = (-1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 0);
      int int0 = simplexTableau0.hashCode();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 0.0);
      int int0 = simplexTableau1.getRhsOffset();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 900.75503658;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, Double.NaN);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, Double.NaN, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 0.0);
      simplexTableau1.subtractRow(0, 0, (-2865.09));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 365.2521542);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2724.0134, 2);
      double double1 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      Object[] objectArray0 = linkedList0.toArray();
      simplexTableau0.initializeColumnLabels();
      double[][] doubleArray1 = simplexTableau0.getData();
      // Undeclared exception!
      try { 
        simplexTableau0.subtractRow(2, 0, 3429.4974);
      } catch(IllegalArgumentException e) {
         //
         // row index (2)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1017.04371491);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 1606.080520580321;
      doubleArray0[6] = 2849.4;
      doubleArray0[7] = (-1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1017.04371491), 31);
      int int0 = simplexTableau0.getNumArtificialVariables();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 1.0E-12);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1348.67;
      doubleArray0[2] = 2453.953239965;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0E-12;
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 2453.953239965);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = linearObjectiveFunction1.getValue(doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1348.67;
      doubleArray1[2] = 1348.67;
      doubleArray1[3] = 1348.67;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, true, 1.0, 643);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
      double double1 = linearObjectiveFunction1.getValue(doubleArray0);
      SimplexTableau simplexTableau1 = null;
      try {
        simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, (-4622.2678552077205));
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-5326.0368622);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1747.9525;
      doubleArray0[4] = (-1464.395299);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, false, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2383.85298062082;
      doubleArray0[1] = 392.142;
      doubleArray0[2] = 1808.0625207055555;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1699.92945663628;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector2, 1192.1056328697);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-825.2038521212899));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 392.142, 5930);
      int int0 = simplexTableau1.getWidth();
      int int1 = simplexTableau1.getNumObjectiveFunctions();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 1593);
      RealMatrix realMatrix0 = simplexTableau0.createTableau(false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 858.6;
      doubleArray0[1] = (-1522.198430315);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1522.198430315));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 858.6, (-1841));
      boolean boolean0 = simplexTableau0.isOptimal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 903.0934163431738);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 903.0934163431738, 0);
      simplexTableau0.initializeColumnLabels();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 484.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 484.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, (-1));
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow(10);
      } catch(IllegalArgumentException e) {
         //
         // column index (10)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Object object0 = linkedList0.clone();
      double double0 = 0.0;
      int int0 = 0;
      LinearConstraint linearConstraint0 = null;
      boolean boolean0 = linkedList0.add((LinearConstraint) null);
      boolean boolean1 = linkedList0.add((LinearConstraint) null);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, 0.0, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) null, 2059.91186741275);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      boolean boolean0 = linkedList0.remove((Object) linearObjectiveFunction0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2059.91186741275, 31);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 80.88139526153789;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-148.45008);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1228.5686879364052);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 608.183;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-148.45008));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-354.78), 10);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 1.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(469);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector1, relationship0, 0.0);
      boolean boolean0 = simplexTableau1.equals(linearConstraint0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 597.1094583645513;
      doubleArray0[1] = 1383.9481143798;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2673.03318;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 2673.03318);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1830.4383, (-394));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, (-318.1093986));
      PointValuePair pointValuePair0 = simplexTableau1.getSolution();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1307.395;
      doubleArray0[1] = 2119.89;
      doubleArray0[2] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.setSubVector(0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      double double0 = arrayRealVector1.getLInfNorm();
      double double1 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.EQ;
      double double2 = linearObjectiveFunction0.getValue(doubleArray0);
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      LinearConstraint linearConstraint1 = new LinearConstraint(arrayRealVector1, 2119.89, relationship0, arrayRealVector1, (-6854.57));
      boolean boolean1 = linkedList0.add(linearConstraint1);
      LinearConstraint linearConstraint2 = linkedList0.pollLast();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-467.1), 0);
      boolean boolean2 = simplexTableau0.isOptimal();
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(845, (-971.0246684));
      } catch(IllegalArgumentException e) {
         //
         // row index (845)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1447);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0);
      double double0 = linearObjectiveFunction0.getValue((RealVector) openMapRealVector0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      double double1 = linearObjectiveFunction0.getValue((RealVector) openMapRealVector0);
      RealVector realVector0 = openMapRealVector0.mapDivide(1447);
      Identity identity0 = new Identity();
      DifferentiableUnivariateFunction differentiableUnivariateFunction0 = identity0.derivative();
      RealVector realVector1 = openMapRealVector0.map(differentiableUnivariateFunction0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2447.705586795);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, relationship0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = (double) 1447;
      doubleArray0[7] = (double) 1447;
      doubleArray0[8] = 1.0E-12;
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.getValue(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // 1,447 != 9
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 2792.56214);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1, 0);
      int int0 = simplexTableau0.getNumDecisionVariables();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 10;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(10);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 10);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      RealVector realVector0 = openMapRealVector0.mapMultiplyToSelf(10);
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      boolean boolean1 = linkedList0.add((LinearConstraint) null);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      double double0 = arrayRealVector0.getL1Norm();
      RealVector realVector1 = openMapRealVector0.combineToSelf(10, Double.NaN, arrayRealVector0);
      linkedList0.sort((Comparator<? super LinearConstraint>) null);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 10);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1040.2433));
      doubleArray0[4] = double4;
      Double double5 = new Double((-4240.0));
      doubleArray0[5] = double5;
      double double6 = 29.6191;
      Double double7 = new Double(29.6191);
      doubleArray0[6] = double7;
      double double8 = Double.max(0.0, (double) doubleArray0[6]);
      int int0 = (-1);
      int int1 = (-2829);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1), (-2829));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }
}
