/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 09:29:52 GMT 2020
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Identity;
import org.apache.commons.math3.analysis.function.Minus;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector1, 1.0E-12);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0E-12;
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, true, 0.0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 1162.7, 1125);
      // Undeclared exception!
      try { 
        simplexTableau1.getBasicRow(1125);
      } catch(IllegalArgumentException e) {
         //
         // column index (1,125)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1379.66014;
      doubleArray0[1] = 0.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-3096.59317199015));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 785.1008304803566);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      int int0 = 0;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 1.0E-12, 0);
      simplexTableau1.dropPhase1Objective();
      boolean boolean0 = simplexTableau1.equals(openMapRealVector0);
      PointValuePair pointValuePair0 = simplexTableau1.getSolution();
      SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0));
      boolean boolean1 = simplexTableau1.equals(simplexTableau2);
      int int1 = simplexTableau2.getOriginalNumDecisionVariables();
      PointValuePair pointValuePair1 = simplexTableau2.getSolution();
      // Undeclared exception!
      try { 
        openMapRealVector0.combineToSelf(0.0, 0.0, openMapRealVector1);
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2880.0240163613694);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1819.1411;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-160.502852);
      doubleArray0[8] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2300.12878));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 1.0, relationship0, doubleArray0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1819.1411);
      int int0 = simplexTableau0.getNumArtificialVariables();
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      int int1 = simplexTableau0.getNumObjectiveFunctions();
      simplexTableau0.initializeColumnLabels();
      Integer integer0 = simplexTableau0.getBasicRow(0);
      int int2 = simplexTableau0.getNumSlackVariables();
      int int3 = simplexTableau0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2589.5733524);
      doubleArray0[1] = 2735.10595;
      doubleArray0[2] = 3388.571427;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 3388.571427);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = linkedList0.containsAll(linkedList1);
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      double double1 = linearObjectiveFunction0.getValue(doubleArray0);
      double double2 = linearObjectiveFunction0.getValue(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2735.10595;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2735.10595;
      doubleArray1[3] = 2735.10595;
      doubleArray1[4] = 2735.10595;
      doubleArray1[5] = 2735.10595;
      doubleArray1[6] = 2.5672499592493393E7;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, (-2589.5733524));
      boolean boolean1 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2589.5733524));
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3059.2564125252884);
      doubleArray0[2] = (-4209.2609591217915);
      doubleArray0[3] = (-318.0);
      doubleArray0[4] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-9);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Iterator<LinearConstraint> iterator0 = linkedList0.iterator();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3059.2564125252884));
      double double0 = simplexTableau0.getEntry(0, 0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      double double1 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      double double0 = 786.22219677381;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(Integer.MAX_VALUE, 786.22219677381);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-33.45));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, Integer.MAX_VALUE, relationship0, openMapRealVector0, (-314.97878737607));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1682.865));
      } catch(IllegalArgumentException e) {
         //
         // -2,147,483,645 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1945.409612);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3613.403571333472;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-3337.987918666944);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1945.409612);
      doubleArray1[3] = (-3337.987918666944);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double double1 = linearObjectiveFunction0.getValue(doubleArray1);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      boolean boolean0 = simplexTableau0.equals(linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5035.06961);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 0.0);
      int int0 = arrayRealVector1.getMinIndex();
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2340.0881303));
      // Undeclared exception!
      try { 
        simplexTableau0.subtractRow(2, 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // row index (2)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1064.4292487;
      doubleArray0[1] = (-3223.9962951405);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      double double0 = linearObjectiveFunction0.getValue(doubleArray1);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2122.51), 0);
      Integer integer0 = simplexTableau0.getBasicRow(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-719.8);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1569.9850994457304;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-719.8));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      boolean boolean0 = linkedList0.add((LinearConstraint) null);
      boolean boolean1 = linkedList0.add((LinearConstraint) null);
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      boolean boolean2 = simplexTableau0.isOptimal();
      boolean boolean3 = simplexTableau0.isOptimal();
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(2015, (-719.8));
      } catch(IllegalArgumentException e) {
         //
         // row index (2,015)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector1, 607.3722578997);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      RealVector realVector0 = openMapRealVector1.mapMultiplyToSelf(0.0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 0);
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      int int1 = simplexTableau0.getHeight();
      int int2 = simplexTableau0.hashCode();
      int int3 = simplexTableau0.getNumObjectiveFunctions();
      int int4 = simplexTableau0.getWidth();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 3);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 3);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>(linkedList0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, true, 0.0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 1584.1577282748215, relationship0, arrayRealVector0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 0.0, (-193));
      simplexTableau1.initializeColumnLabels();
      boolean boolean1 = simplexTableau1.equals(list0);
      PointValuePair pointValuePair0 = simplexTableau1.getSolution();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 691.00291464;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3146.536394052066;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1054.4501413685798);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3308.259184;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 3146.536394052066);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1347.164), (-1102));
      double double0 = simplexTableau0.getEntry(0, 0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(92, 92);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 92);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      RealVector realVector0 = arrayRealVector0.append((RealVector) openMapRealVector0);
      Sinc sinc0 = new Sinc();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 92;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = (double) 92;
      doubleArray0[5] = (double) 92;
      doubleArray0[6] = (double) 92;
      doubleArray0[7] = 1.0E-12;
      doubleArray0[8] = 1.0E-12;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 1.0E-12);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      UnivariateFunction univariateFunction0 = sinc0.derivative();
      ArrayRealVector arrayRealVector1 = arrayRealVector0.mapToSelf(univariateFunction0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      boolean boolean1 = simplexTableau0.equals(linkedList0);
      int int0 = simplexTableau0.getNumObjectiveFunctions();
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 31, 0);
      int int0 = simplexTableau0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1001.6922);
      doubleArray0[0] = double0;
      Double double1 = new Double(1001.6922);
      doubleArray0[1] = double1;
      Double double2 = new Double(1001.6922);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1084.9439323795));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = (double) doubleArray0[3];
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = (double) doubleArray0[1];
      doubleArray1[5] = (double) doubleArray0[2];
      doubleArray1[6] = (double) doubleArray0[2];
      doubleArray1[7] = 1001.6922;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, 1001.6922, relationship0, doubleArray1, 0.0);
      boolean boolean0 = linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray0[0], (-452));
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-840.98241102063);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 1847.41705964015;
      doubleArray0[3] = (-1384.1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1866.93898572;
      doubleArray0[6] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 10.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 1);
      simplexTableau0.setEntry(0, 0, (-1384.1));
      simplexTableau0.subtractRow(0, 0, 0);
      int int0 = simplexTableau0.getNumSlackVariables();
      int int1 = simplexTableau0.getWidth();
      simplexTableau0.divideRow(0, 226.3588420628);
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      simplexTableau0.subtractRow(0, 0, 1552.83216);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      RealMatrix realMatrix0 = simplexTableau0.createTableau(true);
      int int2 = simplexTableau0.getNumArtificialVariables();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 635.973;
      doubleArray0[1] = 1900.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0E-9;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2737.7);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 2085.96712625372);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 302.2252442079585);
      simplexTableau0.subtractRow(0, 0, 1.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1045);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 548.13849966617);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 548.13849966617, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, (-787.63084));
      // Undeclared exception!
      try { 
        simplexTableau1.subtractRow((-1621), 1, (-1696.44));
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,621)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 919.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6.283185307179586;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 919.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1464.77232, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 919.0);
      simplexTableau1.divideRow(0, 6.283185307179586);
      int int0 = simplexTableau1.getNumObjectiveFunctions();
      Integer integer0 = new Integer((-1));
      boolean boolean0 = simplexTableau1.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(20);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 2256.86669618107);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      arrayRealVector1.setSubVector(20, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(17, 17, 20);
      RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 4066.78334857, 20);
      int int0 = simplexTableau0.getRhsOffset();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int1 = simplexTableau0.getArtificialVariableOffset();
      Integer integer0 = simplexTableau0.getBasicRow(21);
      int int2 = simplexTableau0.getHeight();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-2529.65));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 379.63921979);
      int int0 = simplexTableau0.getRhsOffset();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-466.0);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 273.4086413);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-596.5274), 94);
      int int0 = simplexTableau0.getArtificialVariableOffset();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 191.279274;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-939.108776221639);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 191.279274);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1151.424936886719);
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry((-2139), 1210, 0.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (-2,139)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 1803.392399951;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 285.03187008;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-906.96175561));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(arrayRealVector0, 3.141592653589793);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = linearObjectiveFunction1.getValue(doubleArray0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, (-876.9086849265173));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      int int0 = 434;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 0.0, 434);
      double double1 = linearObjectiveFunction1.getValue(doubleArray0);
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(linkedList0);
      int int1 = simplexTableau0.getOriginalNumDecisionVariables();
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(2236, 2236);
      } catch(IllegalArgumentException e) {
         //
         // row index (2,236)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 6.283185307179586);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0, (-1418));
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry((-1418), (-1418), 5520.708);
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,418)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1709.120829615571;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-617.38459);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      int int0 = simplexTableau0.getSlackVariableOffset();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1070.446821177445);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 739.112;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1724.4677548646;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1070.446821177445));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), 2);
      int int0 = simplexTableau0.getNumDecisionVariables();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 10);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((-27.6207276));
      GoalType goalType1 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-27.6207276);
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (-27.6207276);
      Identity identity0 = new Identity();
      RealVector realVector0 = openMapRealVector1.map(identity0);
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = 1.0E-12;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1946.23929758936);
      linkedList0.addLast(linearConstraint0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, (-79.0));
      int int0 = simplexTableau1.getNumObjectiveFunctions();
      // Undeclared exception!
      try { 
        simplexTableau1.divideRow(1, 1.0E-12);
      } catch(IllegalArgumentException e) {
         //
         // row index (1)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3734.940028;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1451.1462);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2946.9667373002);
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 1835.77429587;
      doubleArray0[8] = 1928.0846604554847;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      Collection<LinearConstraint> collection0 = null;
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, true, 0.0, (-947));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 290.498815407;
      doubleArray0[2] = (-1609.54);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1801.440919);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, (-1099.85279677276));
      Collection<LinearConstraint> collection0 = null;
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, (Collection<LinearConstraint>) null, goalType0, true, 1.0E-12);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-316.127805111253);
      doubleArray0[0] = (-316.127805111253);
      double double1 = 3353.0;
      doubleArray0[1] = 3353.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 1, (-1));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4395.67486);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.5);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      UnaryOperator<LinearConstraint> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      linkedList0.replaceAll(unaryOperator0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      double double0 = arrayRealVector0.getLInfNorm();
      double double1 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-4395.67486));
      simplexTableau0.dropPhase1Objective();
      double[][] doubleArray1 = simplexTableau0.getData();
      int int0 = simplexTableau0.getHeight();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      // Undeclared exception!
      try { 
        arrayRealVector1.projection(arrayRealVector0);
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2154.48471821;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 362.41352364;
      doubleArray0[5] = (-2655.21);
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (-1.0));
      double[] doubleArray1 = openMapRealVector1.toArray();
      Minus minus0 = new Minus();
      DifferentiableUnivariateFunction differentiableUnivariateFunction0 = minus0.derivative();
      DifferentiableUnivariateFunction differentiableUnivariateFunction1 = minus0.derivative();
      RealVector realVector0 = openMapRealVector0.map(minus0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(1.0E-9);
      double double0 = openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector1);
      RealVector realVector1 = openMapRealVector0.mapSubtractToSelf((-1.0));
      RealVector realVector2 = openMapRealVector0.mapSubtractToSelf(0.0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.copy();
      double double2 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2154.48471821);
      Collection<LinearConstraint> collection0 = null;
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, (Collection<LinearConstraint>) null, goalType0, true, 362.41352364, 46);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2245.2960181);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 543.4293503;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-775.872482);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1517.2);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      double double0 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-2245.2960181));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      ListIterator<LinearConstraint> listIterator0 = linkedList0.listIterator();
      boolean boolean1 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1717.57273431);
      simplexTableau0.initializeColumnLabels();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 560.8267956872;
      doubleArray0[1] = 2468.914664746;
      doubleArray0[2] = (-624.505318083);
      doubleArray0[3] = (-541.86727327809);
      doubleArray0[4] = (-3355.1);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-893.4682);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 10);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, (-1774.2617));
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(linkedList0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int0 = 1438;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, (Collection<LinearConstraint>) null, goalType0, false, (-2440.45), 1438);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-202.82240974);
      doubleArray0[1] = (-2253.0);
      doubleArray0[2] = 1074.230108987;
      doubleArray0[3] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2652.454253), 2058);
      simplexTableau0.dropPhase1Objective();
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(2058, (-202.82240974));
      } catch(IllegalArgumentException e) {
         //
         // row index (2,058)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      // Undeclared exception!
      try { 
        openMapRealVector0.getEntry(0);
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 10;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(10, 0.0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      double double0 = arrayRealVector0.getLInfDistance(realVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-110.182));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      LinearConstraint linearConstraint0 = linkedList0.pollLast();
      arrayRealVector0.set(10);
      boolean boolean0 = linkedList0.remove((Object) "RHS");
      GoalType goalType0 = GoalType.MINIMIZE;
      LinearConstraint linearConstraint1 = linkedList0.pollFirst();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 10, 10);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int1 = simplexTableau0.getNumSlackVariables();
      simplexTableau0.initializeColumnLabels();
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(1085, 1085);
      } catch(IllegalArgumentException e) {
         //
         // row index (1,085)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2955.808;
      doubleArray0[1] = 1054.04783;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1054.04783);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1054.04783);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, false, 1054.04783, (-1591));
      int int0 = simplexTableau1.hashCode();
  }
}
