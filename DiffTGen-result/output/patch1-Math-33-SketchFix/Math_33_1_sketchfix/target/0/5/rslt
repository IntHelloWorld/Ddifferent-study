* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math3.optimization.linear.SimplexTableau
* Starting client
* Connecting to master process on port 8667
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-33-SketchFix/Math_33_1_sketchfix/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.optimization.linear.SimplexTableau
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 189
  - Branch 154
  - Exception 0
  - MutationFactory 545
  - Output 72
  - Method 27
  - MethodNoException 27
  - CBranchFitnessFactory 154
* Using seed 1585473578504
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:====>                         15%] [Cov:>                                  0%][Progress:====>                         15%] [Cov:====>                              12%][Progress:====>                         16%] [Cov:==>                                6%][Progress:====>                         16%] [Cov:===>                               11%][Progress:====>                         16%] [Cov:========>                          24%][Progress:=====>                        18%] [Cov:==========>                        31%][Progress:=====>                        18%] [Cov:===========>                       34%][Progress:=====>                        18%] [Cov:============>                      36%][Progress:=====>                        18%] [Cov:=============>                     39%][Progress:======>                       20%] [Cov:========>                          23%][Progress:======>                       20%] [Cov:========>                          24%][Progress:======>                       20%] [Cov:=========>                         26%][Progress:======>                       20%] [Cov:=========>                         27%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:===========>                       34%][Progress:======>                       20%] [Cov:============>                      35%][Progress:======>                       21%] [Cov:=======>                           21%][Progress:======>                       21%] [Cov:=======>                           22%][Progress:======>                       21%] [Cov:========>                          23%][Progress:======>                       21%] [Cov:========>                          25%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:============>                      37%][Progress:======>                       21%] [Cov:=============>                     39%][Progress:======>                       23%] [Cov:==>                                6%][Progress:======>                       23%] [Cov:===>                               11%][Progress:======>                       23%] [Cov:========>                          23%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:======>                       23%] [Cov:============>                      36%][Progress:======>                       23%] [Cov:==============>                    41%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:============>                 40%] [Cov:=>                                 4%][Progress:================>             55%] [Cov:==>                                7%][Progress:================>             55%] [Cov:=======>                           20%][Progress:==================>           61%] [Cov:========>                          24%][Progress:==================>           63%] [Cov:========>                          24%][Progress:==================>           63%] [Cov:=========>                         26%][Progress:==================>           63%] [Cov:=========>                         27%][Progress:==================>           63%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:=======>                           21%][Progress:=====================>        71%] [Cov:========>                          23%][Progress:=====================>        71%] [Cov:========>                          24%][Progress:=====================>        71%] [Cov:========>                          25%][Progress:=============================>98%] [Cov:=>                                 4%][Progress:==============================100%] [Cov:==>                                6%][Progress:==============================100%] [Cov:======>                            19%][Progress:==============================100%] [Cov:=======>                           22%][Progress:==============================100%] [Cov:========>                          25%][Progress:==============================100%] [Cov:==========>                        29%][Progress:==============================100%] [Cov:==========>                        30%][Progress:==============================100%] [Cov:=>                                 5%][Progress:==============================100%] [Cov:==>                                8%][Progress:==============================100%] [Cov:=======>                           20%][Progress:==============================100%] [Cov:========>                          25%][Progress:==============================100%] [Cov:=========>                         27%][Progress:==============================100%] [Cov:==========>                        29%][Progress:==============================100%] [Cov:==========>                        30%][Progress:==============================100%] [Cov:===============>                   43%][Progress:==============================100%] [Cov:=======================>           66%]
* Search finished after 64s and 0 generations, 1214 statements, best individual has fitness: 523.8890909090909
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 189
* Number of covered goals: 141
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 59%
* Total number of goals: 154
* Number of covered goals: 91
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 70%
* Total number of goals: 545
* Number of covered goals: 381
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 25%
* Total number of goals: 72
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 89%
* Total number of goals: 27
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 78%
* Total number of goals: 27
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 58%
* Total number of goals: 154
* Number of covered goals: 90
* Generated 33 tests with total length 214
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'SimplexTableau_ESTest' to evosuite-tests
* Done!

* Computation finished
