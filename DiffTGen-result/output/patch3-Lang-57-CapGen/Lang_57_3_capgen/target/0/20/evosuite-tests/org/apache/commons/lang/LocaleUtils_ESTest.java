/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:01:51 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z<3A`&Uua");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z<3A`&Uua
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("nu)50$[");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: nu)50$[
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("tr");
      List list1 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      List list2 = LocaleUtils.availableLocaleList();
      List list3 = LocaleUtils.localeLookupList((Locale) null);
      boolean boolean1 = LocaleUtils.isAvailableLocale((Locale) null);
      boolean boolean2 = LocaleUtils.isAvailableLocale((Locale) null);
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getScript();
      String[] stringArray0 = Locale.getISOLanguages();
      String string1 = locale0.getDisplayLanguage();
      List list4 = LocaleUtils.localeLookupList((Locale) null, locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.JAPANESE;
      String string0 = locale1.getDisplayLanguage();
      String string1 = locale0.getDisplayScript(locale1);
      String string2 = locale1.getDisplayVariant();
      String string3 = locale1.getDisplayName();
      String string4 = locale1.getDisplayName(locale0);
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      String string5 = locale1.toLanguageTag();
      List list0 = LocaleUtils.languagesByCountry("Japanese");
      List list1 = LocaleUtils.localeLookupList(locale1, locale0);
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale1);
      Locale locale2 = locale0.stripExtensions();
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list2 = LocaleUtils.countriesByLanguage("");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      LocaleUtils localeUtils0 = new LocaleUtils();
      Locale locale0 = Locale.CHINA;
      List list1 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.JAPANESE;
      String string0 = locale1.getDisplayLanguage();
      String string1 = locale0.getDisplayScript(locale1);
      String string2 = locale1.getDisplayVariant();
      String string3 = locale1.getDisplayName();
      String string4 = locale1.getDisplayName(locale0);
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      String string5 = locale1.toLanguageTag();
      List list0 = LocaleUtils.languagesByCountry("Japanese");
      List list1 = LocaleUtils.localeLookupList(locale1, locale0);
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale1);
      Locale locale2 = locale0.stripExtensions();
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list2 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      Locale locale0 = LocaleUtils.toLocale("hu");
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      List list0 = LocaleUtils.localeLookupList(locale1, locale1);
      Locale locale2 = Locale.forLanguageTag("vI");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange>[] linkedListArray0 = (LinkedList<Locale.LanguageRange>[]) Array.newInstance(LinkedList.class, 1);
      linkedListArray0[0] = linkedList0;
      LinkedList<Locale.LanguageRange>[] linkedListArray1 = linkedList0.toArray(linkedListArray0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      List list2 = LocaleUtils.localeLookupList(locale2);
      String string0 = locale2.getDisplayLanguage(locale1);
      String string1 = locale2.toLanguageTag();
      List list3 = LocaleUtils.availableLocaleList();
      String string2 = locale2.getExtension('E');
      List list4 = LocaleUtils.languagesByCountry("vI");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("JP");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = new Locale("", "%YML3](>;T6;", "jGJ!SS8EV$ppN1)]");
      List list0 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("v}Le@j?R}QX%\"4");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: v}Le@j?R}QX%\"4
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("|~!~K-`g*RCcy]uT&I#");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: |~!~K-`g*RCcy]uT&I#
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("mUrf%");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: mUrf%
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("GB");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: GB
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      boolean boolean1 = LocaleUtils.isAvailableLocale((Locale) null);
      List list1 = LocaleUtils.localeLookupList((Locale) null);
      List list2 = LocaleUtils.countriesByLanguage("JP");
      List list3 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      List list4 = LocaleUtils.availableLocaleList();
      List list5 = LocaleUtils.availableLocaleList();
      boolean boolean2 = LocaleUtils.isAvailableLocale((Locale) null);
      List list6 = LocaleUtils.languagesByCountry("JP");
      List list7 = LocaleUtils.localeLookupList((Locale) null);
      List list8 = LocaleUtils.languagesByCountry("JP");
      boolean boolean3 = LocaleUtils.isAvailableLocale((Locale) null);
      List list9 = LocaleUtils.countriesByLanguage("JP");
      List list10 = LocaleUtils.languagesByCountry("CU");
      List list11 = LocaleUtils.availableLocaleList();
      boolean boolean4 = LocaleUtils.isAvailableLocale((Locale) null);
      List list12 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      List list13 = LocaleUtils.availableLocaleList();
  }
}
