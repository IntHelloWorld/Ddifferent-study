/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:03:34 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("TT%}*Ep");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: TT%}*Ep
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = new Locale("9,e,KMP", "ml&&?DkBQT`RMo\u0001B]$", "ml&&?DkBQT`RMo\u0001B]$");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("nl");
      List list1 = LocaleUtils.availableLocaleList();
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayName();
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      List list3 = LocaleUtils.languagesByCountry("nl");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list4 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.forLanguageTag("");
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      List list0 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gi\"6-0STiC9B@f-B*8");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gi\"6-0STiC9B@f-B*8
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("eIYoIp#Q=(>?");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: eIYoIp#Q=(>?
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("~l0 ':PkFd!?Pjk/nre");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~l0 ':PkFd!?Pjk/nre
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(")lUJt");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: )lUJt
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ko");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      String string0 = null;
      List list1 = LocaleUtils.countriesByLanguage((String) null);
      Locale locale0 = Locale.CANADA;
      String string1 = locale0.getDisplayScript();
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gi\"6-0STiC9B@f-B*8");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gi\"6-0STiC9B@f-B*8
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      List list1 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      List list2 = LocaleUtils.languagesByCountry("JP");
  }
}
