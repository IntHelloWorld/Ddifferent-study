/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:01:51 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("a@E6G->u=j]%.riF");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: a@E6G->u=j]%.riF
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("English");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: English
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("et");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.languagesByCountry("DED");
      List list1 = LocaleUtils.localeLookupList((Locale) null);
      Locale locale0 = Locale.UK;
      List list2 = LocaleUtils.countriesByLanguage("");
      Set set0 = LocaleUtils.availableLocaleSet();
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      Locale locale1 = Locale.US;
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale1);
      List list3 = LocaleUtils.localeLookupList(locale0, locale0);
      Locale locale2 = LocaleUtils.toLocale("ja");
      List list4 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.languagesByCountry("DED");
      List list1 = LocaleUtils.localeLookupList((Locale) null);
      Locale locale0 = Locale.UK;
      List list2 = LocaleUtils.countriesByLanguage("");
      Locale locale1 = Locale.JAPANESE;
      String[] stringArray0 = Locale.getISOLanguages();
      List list3 = LocaleUtils.localeLookupList(locale1, locale1);
      String string0 = locale1.toLanguageTag();
      List list4 = LocaleUtils.languagesByCountry("");
      List list5 = LocaleUtils.localeLookupList(locale1);
      Locale locale2 = new Locale("");
      String string1 = locale0.getScript();
      boolean boolean0 = locale2.hasExtensions();
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale2);
      List list6 = LocaleUtils.availableLocaleList();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string0 = Locale.lookupTag(linkedList0, linkedList1);
      List list0 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = new Locale("v$GmLGmg!Kq-s1n+2", "&cgD,>@u6Msvo#Ie,", "v$GmLGmg!Kq-s1n+2");
      List list0 = LocaleUtils.localeLookupList(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang.LocaleUtils");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("|#Fpdd',");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: |#Fpdd',
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Q&*U!");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Q&*U!
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("");
      List list1 = LocaleUtils.languagesByCountry("z{Ix|J4E=S4{=?yE=");
      List list2 = LocaleUtils.countriesByLanguage((String) null);
      Locale locale0 = Locale.US;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LocaleUtils localeUtils0 = new LocaleUtils();
  }
}
