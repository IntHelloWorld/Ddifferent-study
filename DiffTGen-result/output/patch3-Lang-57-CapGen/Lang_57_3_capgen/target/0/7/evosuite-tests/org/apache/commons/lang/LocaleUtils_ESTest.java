/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 04:58:17 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z#8&AL!><P8:u0&FZ");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z#8&AL!><P8:u0&FZ
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("aU=|gA*");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aU=|gA*
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.JAPANESE;
      List list0 = LocaleUtils.localeLookupList(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("iw");
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      boolean boolean0 = locale0.hasExtensions();
      List<Locale.LanguageRange> list1 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) set0);
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2);
      List<String> list4 = hashMap0.put("\"<pC", list3);
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list5 = Locale.filterTags(list1, (Collection<String>) set1, locale_FilteringMode0);
      String[] stringArray0 = Locale.getISOLanguages();
      String[] stringArray1 = Locale.getISOLanguages();
      List list6 = LocaleUtils.localeLookupList(locale0);
      Locale locale1 = Locale.FRANCE;
      Locale locale2 = Locale.CHINA;
      String string0 = locale1.getDisplayLanguage(locale2);
      String string1 = locale0.getDisplayLanguage(locale1);
      String string2 = locale0.getExtension('C');
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale0);
      List list7 = LocaleUtils.localeLookupList(locale0);
      List list8 = LocaleUtils.countriesByLanguage("");
      List list9 = LocaleUtils.localeLookupList(locale0, locale0);
      List list10 = LocaleUtils.countriesByLanguage("");
      String string3 = "T0YLbM";
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("T0YLbM");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: T0YLbM
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list1 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = new Locale("0!>x*", "0!>x*", "0!>x*");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.ommon8.lang.LocaleUtils");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.ommon8.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("o}SNM%OV_8T");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: o}SNM%OV_8T
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("}H{z8");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: }H{z8
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("9ozBoR.rpy%L?w");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 9ozBoR.rpy%L?w
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("es");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.JAPAN;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      String string0 = locale0.getDisplayScript(locale1);
      Locale.setDefault(locale0);
      List list1 = LocaleUtils.localeLookupList(locale0);
      List list2 = LocaleUtils.languagesByCountry("org.apache.commons.lang.LocaleUtils");
      List list3 = LocaleUtils.countriesByLanguage("ga");
      List list4 = LocaleUtils.localeLookupList(locale1);
  }
}
