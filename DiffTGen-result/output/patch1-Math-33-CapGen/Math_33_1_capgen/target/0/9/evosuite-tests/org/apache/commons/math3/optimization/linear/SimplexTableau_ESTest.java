/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:30:49 GMT 2020
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 751.943804281;
      doubleArray0[1] = 296.5775394804874;
      doubleArray0[2] = 751.943804281;
      doubleArray0[3] = (-3781.617826544383);
      doubleArray0[4] = 751.943804281;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 751.943804281);
      boolean boolean0 = linkedList0.offer(linearConstraint0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 751.943804281;
      doubleArray1[1] = (double) 2099;
      doubleArray1[0] = (double) 2099;
      doubleArray1[3] = 751.943804281;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray1, (-2399.1));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2099);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(arrayRealVector2, (-1346.4437528628378));
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, 2125.8418, 2099);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 751.943804281;
      doubleArray0[1] = 296.5775394804874;
      doubleArray0[2] = 751.943804281;
      doubleArray0[3] = (-3781.617826544383);
      doubleArray0[4] = 751.943804281;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 751.943804281);
      boolean boolean0 = linkedList0.offer(linearConstraint0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 751.943804281;
      doubleArray1[1] = (double) 2099;
      doubleArray1[2] = (double) 2099;
      doubleArray1[3] = 751.943804281;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray1, (-2399.1));
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2125.8418);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1515.962;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 120.651526;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1500.7824867295);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
      boolean boolean0 = linkedList0.offer(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 46);
      int int0 = simplexTableau0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1482.585;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, (-759.8473921285868));
      Integer integer0 = simplexTableau1.getBasicRow(0);
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(linkedList0);
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(140, 701, 0.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (140)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[0];
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-1687.72186), relationship0, doubleArray0, (-2237.3942));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1136.8155553650254));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1136.8155553650254);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1136.8155553650254);
      doubleArray1[3] = 1.0E-12;
      doubleArray1[4] = 651.847555418;
      doubleArray1[5] = 466.2363939193;
      doubleArray1[6] = 0.0;
      double double0 = new Double(651.847555418);
      int int0 = simplexTableau0.getNumDecisionVariables();
      int int1 = simplexTableau0.getOriginalNumDecisionVariables();
      // Undeclared exception!
      try { 
        openMapRealVector0.unitVector();
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1718.3);
      doubleArray0[3] = (-532.9991788926583);
      doubleArray0[4] = (-1804.2196192);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1677.39160401);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-3723.129);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector1);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2534));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-2534));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = 1622.739627907885;
      int int0 = 283;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1622.739627907885, 283);
      } catch(IllegalArgumentException e) {
         //
         // -2,531 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3850.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-3850.0);
      Double double1 = new Double((-3850.0));
      doubleArray1[3] = double1;
      doubleArray1[4] = (Double) (-3850.0);
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) (-3850.0);
      doubleArray1[7] = (Double) (-3850.0);
      doubleArray1[8] = (Double) 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector1, 0.0, relationship0, openMapRealVector1, 1614.15);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      Relationship relationship1 = Relationship.LEQ;
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, 1543.87, relationship1, doubleArray0, 2.0);
      boolean boolean1 = linkedList0.add(linearConstraint1);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 31, relationship0, openMapRealVector0, 31);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      openMapRealVector0.set((-443.67));
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 944);
      RealMatrix realMatrix0 = simplexTableau0.createTableau(true);
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int1 = simplexTableau0.getRhsOffset();
      int int2 = simplexTableau0.hashCode();
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) 31;
      doubleArray0[2] = (double) 944;
      doubleArray0[3] = (double) 31;
      doubleArray0[4] = (double) 31;
      doubleArray0[5] = (double) 31;
      doubleArray0[6] = (-443.67);
      doubleArray0[7] = (double) 35;
      doubleArray0[8] = (double) 31;
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.getValue(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // 31 != 9
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3956.6);
      doubleArray0[1] = (-669.66);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-853.8163803754956));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Integer integer0 = new Integer(477);
      Integer integer1 = Integer.getInteger(" *C.Xt>B]V(0sZ$+");
      boolean boolean0 = linkedList0.remove((Object) integer0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-669.66), (-3020));
      boolean boolean1 = simplexTableau0.isOptimal();
      int int0 = simplexTableau0.getHeight();
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry((-3020), 477, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // row index (-3,020)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-17.69071012138));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 6228);
      int int0 = simplexTableau0.getNumSlackVariables();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2037.4602158711);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Spliterator<LinearConstraint> spliterator0 = linkedList0.spliterator();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2037.4602158711);
      int int0 = simplexTableau0.getNumObjectiveFunctions();
      int int1 = simplexTableau0.getNumObjectiveFunctions();
      int int2 = simplexTableau0.getNumDecisionVariables();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1852.625;
      doubleArray0[2] = (-2515.965794525683);
      doubleArray0[3] = 1.0E-9;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1536.62871);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1541.87));
      int int0 = simplexTableau0.getHeight();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 0, 0.5);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      simplexTableau0.divideRow(0, (-2515.965794525683));
      PointValuePair pointValuePair1 = simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 3120.93;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector1, (-1.0), relationship0, arrayRealVector0, 0.0);
      boolean boolean1 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 849.251043, (-1798));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow((-1798), 849.251043);
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,798)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1594.056224701);
      doubleArray0[2] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      int int0 = (-1);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1594.056224701), (-1));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 0.0);
      // Undeclared exception!
      try { 
        simplexTableau1.divideRow((-1), 10.0);
      } catch(IllegalArgumentException e) {
         //
         // row index (-1)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 16, 16);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      double double1 = linearObjectiveFunction0.getValue((RealVector) openMapRealVector0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 16, 0);
      simplexTableau0.initializeColumnLabels();
      int int0 = simplexTableau0.getRhsOffset();
      int int1 = simplexTableau0.getNumDecisionVariables();
      boolean boolean0 = simplexTableau0.equals(openMapRealVector2);
      // Undeclared exception!
      try { 
        simplexTableau0.subtractRow(16, 1, 6.586);
      } catch(IllegalArgumentException e) {
         //
         // row index (16)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1188.55;
      doubleArray0[1] = (-672.1839893901);
      doubleArray0[2] = 345.54548818968;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 1859.39958685;
      doubleArray0[5] = 758.094018;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 4487.969403723929;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 4487.969403723929);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 758.094018);
      int int0 = simplexTableau0.hashCode();
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(1704, 1704);
      } catch(IllegalArgumentException e) {
         //
         // row index (1,704)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 938.654299, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, (-1340.4468));
      int int0 = simplexTableau1.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0E-9;
      doubleArray0[3] = 313.927228;
      doubleArray0[4] = (-1727.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-9);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, (-1653));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      linkedList0.clear();
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, (-2201.725018467));
      List<LinearConstraint> list1 = simplexTableau1.normalizeConstraints(list0);
      RealMatrix realMatrix0 = simplexTableau1.createTableau(true);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      boolean boolean0 = simplexTableau1.equals(goalType0);
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow((-1653));
      } catch(IllegalArgumentException e) {
         //
         // column index (-1,653)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(3573.6);
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf(3573.6);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      double double3 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector1);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[2];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 3573.6;
      doubleArray1[4] = 0.0;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray1, arrayRealVector1);
      double double4 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 363.3);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2949.4575));
      int int0 = simplexTableau0.getWidth();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3212.31306);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 119.0150774;
      doubleArray0[3] = 1066.0267973608;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2539.948633634556);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 0.0, 1);
      int int0 = simplexTableau1.getNumObjectiveFunctions();
      RealMatrix realMatrix0 = simplexTableau0.createTableau(false);
      int int1 = simplexTableau0.getHeight();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-247.45975);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 602.07362;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 558.50523413013;
      doubleArray0[5] = 862.15499;
      doubleArray0[6] = 25.22316215;
      doubleArray0[7] = 133.26897171638356;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1396.681745138702));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3.141592653589793);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1939.9028);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1939.9028));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1939.9028), 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      simplexTableau0.initializeColumnLabels();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, Double.NEGATIVE_INFINITY);
      double[][] doubleArray1 = simplexTableau1.getData();
      // Undeclared exception!
      try { 
        simplexTableau1.setEntry((-1683), (-1683), 0);
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,683)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1205;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 1205);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = Double.NEGATIVE_INFINITY;
      Iterator<LinearConstraint> iterator0 = linkedList0.iterator();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, Double.NEGATIVE_INFINITY);
      double double1 = 1.0;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0, relationship0, openMapRealVector0, 0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      // Undeclared exception!
      simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 743.3389852053053);
      int int0 = simplexTableau1.getArtificialVariableOffset();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.copy();
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 0.0);
      double[] doubleArray0 = new double[0];
      double double1 = linearObjectiveFunction0.getValue(doubleArray0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, 3470.67478, relationship0, doubleArray1, 0.0);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      double double2 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      int int0 = (-1001);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, (-1001));
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 3568;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3568);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 484.559);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      boolean boolean1 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3568);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-749.613702812148);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2515.965794525683);
      doubleArray0[3] = 1652.150265;
      doubleArray0[4] = 2222.4120373274914;
      doubleArray0[5] = (-2683.308817715829);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-945.274));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-2515.965794525683));
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2321.163882);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(149.78611);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector1, 998.806345810637);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      boolean boolean0 = simplexTableau0.equals(double1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2612, (-1.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2612;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, false);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector2, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2612, 0);
      int int0 = simplexTableau0.getNumArtificialVariables();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 1.0E-9;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-9);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 10.0, 0);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType0, true, 10.0);
      int int0 = simplexTableau1.getOriginalNumDecisionVariables();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = 1218.25887412;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, 1218.25887412);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1151.48745);
      doubleArray0[1] = 1280.5470867;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2350.6591785337));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2350.6591785337), (-1));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, true, 396.691372);
      // Undeclared exception!
      try { 
        simplexTableau1.subtractRow((-1), 0, 396.691372);
      } catch(IllegalArgumentException e) {
         //
         // row index (-1)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      int int0 = arrayRealVector0.getMaxIndex();
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = 0.0;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      int int1 = 0;
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow(528);
      } catch(IllegalArgumentException e) {
         //
         // column index (528)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-1813.143);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1006.11826);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = linearObjectiveFunction0.getValue((RealVector) openMapRealVector0);
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      double double1 = linearObjectiveFunction0.getValue(doubleArray0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, Double.NEGATIVE_INFINITY, (-750));
      int int0 = simplexTableau0.getSlackVariableOffset();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow((-2426), 565.32);
      } catch(IllegalArgumentException e) {
         //
         // row index (-2,426)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 0);
      simplexTableau0.subtractRow(0, 0, 0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      int int0 = (-1729);
      boolean boolean0 = linkedList0.removeLastOccurrence((Object) null);
      boolean boolean1 = linkedList0.add((LinearConstraint) null);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, 0.0, (-1729));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-90.6334));
      simplexTableau0.initializeColumnLabels();
      simplexTableau0.initializeColumnLabels();
      int int0 = simplexTableau0.getHeight();
      simplexTableau0.divideRow(0, 1.0E-12);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1827.9423286728706);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-534.6);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      boolean boolean0 = simplexTableau0.isOptimal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-51.605));
      double[][] doubleArray0 = simplexTableau0.getData();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      boolean boolean0 = simplexTableau0.isOptimal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1199.138377420398);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1199.138377420398));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-1813.143);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = openMapRealVector0.getNorm();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1802.624);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 734.29);
      boolean boolean0 = simplexTableau0.isOptimal();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-9;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 92.9859359;
      doubleArray0[7] = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      double double0 = linearObjectiveFunction0.getValue(doubleArray0);
      int int0 = simplexTableau0.getWidth();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int1 = simplexTableau0.getSlackVariableOffset();
      RealMatrix realMatrix0 = simplexTableau0.createTableau(true);
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow((-531), 92.9859359);
      } catch(IllegalArgumentException e) {
         //
         // row index (-531)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 751.943804281;
      doubleArray0[1] = 296.5775394804874;
      doubleArray0[2] = 751.943804281;
      doubleArray0[3] = (-3781.617826544383);
      doubleArray0[4] = 751.943804281;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 751.943804281);
      boolean boolean0 = linkedList0.offer(linearConstraint0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 751.943804281;
      doubleArray1[1] = (double) 2099;
      doubleArray1[2] = (double) 2099;
      doubleArray1[3] = 751.943804281;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray1, (-2399.1));
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2125.8418);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 31, relationship0, openMapRealVector0, 31);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      openMapRealVector0.set((-443.67));
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 944);
      RealMatrix realMatrix0 = simplexTableau0.createTableau(true);
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      int int1 = simplexTableau0.getRhsOffset();
      int int2 = simplexTableau0.hashCode();
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 31;
      doubleArray0[2] = (double) 944;
      doubleArray0[3] = (double) 31;
      doubleArray0[4] = (double) 31;
      doubleArray0[5] = (double) 31;
      doubleArray0[6] = (-443.67);
      doubleArray0[7] = (double) 35;
      doubleArray0[8] = (double) 31;
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.getValue(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // 31 != 9
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double double0 = (-788.26721316);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-788.26721316));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-788.26721316);
      doubleArray0[1] = (-788.26721316);
      doubleArray0[2] = (-788.26721316);
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.getValue(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-4377.1787);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4377.1787));
      int int0 = 2233;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2233);
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(arrayRealVector0, 2233);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = linearObjectiveFunction0.getValue(doubleArray0);
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.getValue((RealVector) arrayRealVector0);
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,233
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-978.21216857));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-978.21216857), 2019);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      GoalType goalType1 = GoalType.MINIMIZE;
      int int0 = simplexTableau0.getHeight();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, list0, goalType1, false, 1497.076393);
      int int1 = simplexTableau1.getHeight();
      int int2 = 10;
      boolean boolean0 = simplexTableau1.isOptimal();
      int int3 = 0;
      int int4 = simplexTableau1.getSlackVariableOffset();
      // Undeclared exception!
      try { 
        simplexTableau1.setEntry(10, 0, 1497.076393);
      } catch(IllegalArgumentException e) {
         //
         // row index (10)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }
}
