/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 07:44:30 GMT 2020
 */

package org.apache.commons.math.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Iterator;
import org.apache.commons.math.stat.Frequency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Frequency_ESTest extends Frequency_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      long long0 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      String string1 = frequency0.toString();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      long long1 = frequency0.getCumFreq('~');
      int int0 = frequency0.hashCode();
      Integer integer0 = new Integer((-718));
      frequency0.addValue(integer0);
      long long2 = frequency0.getCount('~');
      long long3 = frequency0.getCumFreq((Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency0.addValue(0L);
      int int1 = Integer.divideUnsigned((-718), 283);
      long long4 = frequency0.getCount((Comparable<?>) integer0);
      double double0 = frequency0.getCumPct((Object) integer0);
      long long5 = frequency0.getCumFreq('+');
      long long6 = frequency0.getCumFreq(283);
      long long7 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      boolean boolean0 = frequency0.equals((Object) null);
      double double1 = frequency0.getCumPct((Comparable<?>) integer0);
      frequency0.addValue(integer0);
      Iterator<Comparable<?>> iterator1 = frequency0.valuesIterator();
      long long8 = frequency0.getSumFreq();
      double double2 = frequency0.getCumPct(228);
      // Undeclared exception!
      try { 
        frequency0.getCumPct((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      int int0 = 1358;
      double double0 = frequency0.getPct(1358);
      int int1 = frequency0.hashCode();
      frequency0.addValue((-341L));
      // Undeclared exception!
      try { 
        frequency0.getPct((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = "";
      double double0 = frequency0.getCumPct((Object) "");
      Long long0 = new Long(1069L);
      long long1 = frequency0.getCount((Object) long0);
      frequency0.addValue('z');
      double double1 = frequency0.getPct((-502));
      // Undeclared exception!
      try { 
        frequency0.addValue(1069L);
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 31, (-1), 6024).when(comparator0).compare(anyLong() , anyLong());
      Frequency frequency0 = new Frequency(comparator0);
      frequency0.clear();
      Integer integer0 = Integer.getInteger("NCNw'xju", 1345);
      boolean boolean0 = frequency0.equals(integer0);
      double double0 = frequency0.getPct(4295L);
      frequency0.addValue(4295L);
      long long0 = frequency0.getCumFreq(0L);
      long long1 = frequency0.getCumFreq('w');
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Integer integer0 = new Integer(811);
      frequency0.addValue(integer0);
      String string0 = frequency0.toString();
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct(1000L);
      long long0 = frequency0.getSumFreq();
      double double1 = frequency0.getCumPct((Comparable<?>) null);
      boolean boolean0 = frequency0.equals(frequency0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      long long0 = frequency0.getCumFreq('u');
      double double0 = frequency0.getPct(0);
      frequency0.addValue(0L);
      Integer integer0 = Integer.getInteger("5``5`l;+");
      // Undeclared exception!
      try { 
        frequency0.getPct((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue('>');
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Frequency frequency1 = new Frequency(comparator0);
      boolean boolean0 = frequency0.equals(frequency1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparable0).compareTo(any());
      double double0 = frequency0.getCumPct(comparable0);
      int int0 = 10;
      Integer integer0 = new Integer(10);
      // Undeclared exception!
      try { 
        frequency0.addValue(integer0);
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      String string0 = "";
      double double0 = frequency0.getPct(0);
      double double1 = frequency0.getCumPct((Object) "");
      frequency0.addValue(comparable0);
      double double2 = frequency0.getCumPct((Comparable<?>) "");
      double double3 = frequency0.getCumPct(1823L);
      Integer integer0 = new Integer(1269);
      int int0 = Integer.max((-454), (-1669));
      int int1 = Integer.divideUnsigned(0, 1);
      // Undeclared exception!
      try { 
        frequency0.addValue(integer0);
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = "]_h_-&iFaE?{f%a";
      Integer integer0 = Integer.getInteger("]_h_-&iFaE?{f%a");
      // Undeclared exception!
      try { 
        frequency0.getCount((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(2875);
      long long0 = frequency0.getCumFreq(0);
      long long1 = frequency0.getCumFreq(0L);
      String string0 = frequency0.toString();
      double double0 = frequency0.getPct('1');
      long long2 = frequency0.getCumFreq('X');
      long long3 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n2875\t1\t100%\t100%\n");
      long long4 = frequency0.getCount('l');
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      double double1 = frequency0.getPct('J');
      String string1 = frequency0.toString();
      double double2 = frequency0.getPct('X');
      // Undeclared exception!
      try { 
        frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n2875\t1\t100%\t100%\n");
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.String not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Object object0 = new Object();
      frequency0.addValue('0');
      boolean boolean0 = frequency0.equals(object0);
      int int0 = frequency0.hashCode();
      long long0 = frequency0.getSumFreq();
      Comparable<Frequency> comparable0 = (Comparable<Frequency>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(any(org.apache.commons.math.stat.Frequency.class));
      frequency0.addValue(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable1).compareTo(any());
      frequency0.addValue(comparable1);
      double double0 = frequency0.getPct('H');
      double double1 = frequency0.getCumPct(0);
      long long1 = frequency0.getCount('0');
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Frequency frequency0 = new Frequency(comparator0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      frequency0.addValue(comparable0);
      double double0 = frequency0.getCumPct(' ');
      Integer integer0 = Integer.valueOf((-1933));
      double double1 = frequency0.getPct((Comparable<?>) integer0);
      double double2 = frequency0.getCumPct((Object) null);
      frequency0.addValue((-682L));
      String string0 = frequency0.toString();
      double double3 = frequency0.getPct((Object) null);
      frequency0.addValue('\'');
      double double4 = frequency0.getCumPct(646);
      double double5 = frequency0.getCumPct('\'');
      long long0 = frequency0.getCumFreq('\'');
      double double6 = frequency0.getPct((-814));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      frequency0.addValue((long) 227);
      double double0 = frequency0.getPct(227);
      frequency0.clear();
      double double1 = frequency0.getCumPct('J');
      frequency0.clear();
      int int0 = (-1993);
      double double2 = frequency0.getCumPct((-1993));
      long long0 = frequency0.getCumFreq('.');
      int int1 = 0;
      frequency0.addValue(0);
      // Undeclared exception!
      try { 
        frequency0.addValue('.');
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Character not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Frequency frequency0 = new Frequency(comparator0);
      long long0 = frequency0.getCumFreq(4274L);
      long long1 = frequency0.getCumFreq((-3223));
      int int0 = 0;
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      double double0 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      int int0 = 0;
      int int1 = (-516);
      double double1 = frequency0.getPct((Object) "");
      // Undeclared exception!
      try { 
        frequency0.addValue((-516));
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      // Undeclared exception!
      try { 
        frequency0.getCount((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Frequency frequency1 = new Frequency();
      String string0 = frequency1.toString();
      long long0 = frequency0.getCount((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency1.getCumPct('Q');
      double double1 = frequency1.getCumPct((-974L));
      double double2 = frequency1.getPct(0L);
      long long1 = frequency0.getCount('Q');
      String string1 = frequency1.toString();
      double double3 = frequency0.getCumPct(0L);
      Long long2 = new Long(0L);
      frequency0.addValue(1534);
      long long3 = frequency0.getCount((Object) long2);
      double double4 = frequency1.getPct(0L);
      long long4 = frequency0.getCumFreq((Comparable<?>) long2);
      Long long5 = Long.getLong("D/`c@Nb~VD", long2);
      long long6 = frequency0.getSumFreq();
      long long7 = frequency0.getCount((Comparable<?>) long2);
      double double5 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long8 = frequency0.getCount((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency1.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      int int0 = frequency1.hashCode();
      double double6 = frequency0.getPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long9 = frequency0.getCumFreq('y');
      long long10 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long11 = frequency0.getCount('T');
      double double7 = frequency1.getCumPct((Comparable<?>) long2);
      frequency0.addValue(417);
      long long12 = frequency0.getSumFreq();
      long long13 = frequency0.getSumFreq();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      char char0 = ')';
      double double0 = frequency0.getPct(')');
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      int int0 = frequency0.hashCode();
      Integer integer0 = new Integer((-2922));
      int int1 = Integer.min((-2922), 1);
      int int2 = Integer.max(1, (-2922));
      String string0 = Integer.toUnsignedString((-2922));
      double double1 = frequency0.getPct((Object) integer0);
      double double2 = frequency0.getCumPct(71);
      // Undeclared exception!
      try { 
        frequency0.getCount((Object) iterator0);
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class) , any(org.apache.commons.math.stat.Frequency.class));
      Frequency frequency0 = new Frequency(comparator0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double0 = frequency0.getPct((Comparable<?>) "instance of class {0} not comparable to existing values");
      double double1 = frequency0.getCumPct(comparable0);
      frequency0.addValue(10);
      frequency0.addValue('\\');
      long long0 = frequency0.getCumFreq((Comparable<?>) "instance of class {0} not comparable to existing values");
      long long1 = frequency0.getCumFreq((Object) "instance of class {0} not comparable to existing values");
      frequency0.clear();
      frequency0.addValue(2L);
      double double2 = frequency0.getPct(1343L);
      long long2 = frequency0.getCount((Object) "instance of class {0} not comparable to existing values");
      double double3 = frequency0.getCumPct((Object) "instance of class {0} not comparable to existing values");
      int int0 = frequency0.hashCode();
      double double4 = frequency0.getCumPct('9');
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Frequency frequency0 = new Frequency(comparator0);
      double double0 = frequency0.getCumPct(0L);
      Integer integer0 = Integer.valueOf(0);
      int int0 = Integer.compare(0, 2116);
      double double1 = frequency0.getPct('@');
      int int1 = Integer.divideUnsigned(3959, 1);
      frequency0.addValue(0L);
      frequency0.addValue((Comparable<?>) integer0);
      double double2 = frequency0.getPct((Comparable<?>) integer0);
      int int2 = Integer.min(2352, 0);
      int int3 = frequency0.hashCode();
      double double3 = frequency0.getCumPct((Comparable<?>) integer0);
      frequency0.addValue('@');
      Integer integer1 = new Integer(0);
      frequency0.addValue(integer1);
      double double4 = frequency0.getPct('e');
      frequency0.clear();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue('#');
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      long long0 = frequency0.getCumFreq('#');
      long long1 = frequency0.getCumFreq(669);
      long long2 = frequency0.getSumFreq();
      long long3 = frequency0.getSumFreq();
      frequency0.addValue('#');
      int int0 = frequency0.hashCode();
      String string0 = "D|P}W]lTAM.yO}9:~";
      try { 
        Long.decode("D|P}W]lTAM.yO}9:~");
      } catch(NumberFormatException e) {
         //
         // For input string: \"D|P}W]lTAM.yO}9:~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(309, (-1043), (-1043), (-1043), 963).when(comparator0).compare(any() , any());
      Frequency frequency0 = new Frequency(comparator0);
      frequency0.addValue(0L);
      frequency0.addValue((-2357));
      long long0 = frequency0.getCumFreq((Object) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      frequency0.addValue(comparable0);
      double double0 = frequency0.getPct(0L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyLong() , anyLong());
      Frequency frequency0 = new Frequency(comparator0);
      int int0 = (-1272);
      double double0 = frequency0.getPct((-1272));
      frequency0.addValue((-1272));
      double double1 = frequency0.getCumPct(834L);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      // Undeclared exception!
      try { 
        frequency0.getCumPct((Object) iterator0);
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct(0L);
      long long0 = frequency0.getCumFreq((Object) null);
      long long1 = frequency0.getSumFreq();
      long long2 = frequency0.getCumFreq('A');
      long long3 = frequency0.getCumFreq(793);
      double double1 = frequency0.getPct(0L);
      String string0 = frequency0.toString();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      frequency0.addValue(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparable1).compareTo(any());
      long long4 = frequency0.getCumFreq(comparable1);
      double double2 = frequency0.getPct('_');
      long long5 = frequency0.getCount((Object) "OC'+TL}J;`Ui6");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(0);
      frequency0.addValue(integer0);
      double double0 = new Integer((-4271));
      Integer integer1 = Integer.getInteger("", (-4271));
      long long0 = frequency0.getCumFreq((-4271));
      long long1 = frequency0.getSumFreq();
      Integer integer2 = Integer.getInteger("");
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-4271)).when(comparable0).compareTo(any());
      Object object0 = new Object();
      boolean boolean0 = frequency0.equals(object0);
      long long2 = frequency0.getCumFreq(comparable0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getPct(0L);
      long long0 = frequency0.getCumFreq('V');
      frequency0.addValue((-243L));
      double double1 = frequency0.getCumPct((-677L));
      long long1 = (-1546L);
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      boolean boolean0 = frequency0.equals((Object) null);
      double double0 = frequency0.getCumPct('3');
      double double1 = frequency0.getCumPct(0);
      int int0 = frequency0.hashCode();
      int int1 = frequency0.hashCode();
      double double2 = frequency0.getPct(0);
      double double3 = frequency0.getPct('\'');
      Integer integer0 = new Integer(687);
      Integer integer1 = new Integer(0);
      String string0 = ".-s!Lgp9N;`k */i";
      int int2 = Integer.min(0, 2598);
      Integer integer2 = Integer.getInteger(".-s!Lgp9N;`k */i");
      Integer integer3 = Integer.getInteger("", integer1);
      frequency0.addValue(integer0);
      long long0 = frequency0.getCumFreq((Comparable<?>) integer0);
      long long1 = frequency0.getCumFreq(0L);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      double double4 = frequency0.getCumPct((Comparable<?>) integer0);
      Object object0 = new Object();
      boolean boolean1 = frequency0.equals(object0);
      // Undeclared exception!
      try { 
        frequency0.getPct((Object) iterator0);
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getPct('D');
      long long0 = 0L;
      int int0 = 10;
      double double1 = frequency0.getPct((long) 10);
      Frequency frequency1 = new Frequency();
      // Undeclared exception!
      try { 
        frequency1.addValue((Object) frequency0);
      } catch(IllegalArgumentException e) {
         //
         // class (org.apache.commons.math.stat.Frequency) does not implement Comparable
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      double double0 = frequency0.getCumPct(1200L);
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Frequency frequency1 = new Frequency(comparator0);
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Object) frequency1);
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyLong() , anyLong());
      Frequency frequency0 = new Frequency(comparator0);
      int int0 = frequency0.hashCode();
      long long0 = frequency0.getCumFreq((Object) "");
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      long long1 = frequency0.getCumFreq('C');
      boolean boolean0 = frequency0.equals("");
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double0 = frequency0.getCumPct(comparable0);
      frequency0.addValue(0L);
      frequency0.addValue(1);
      double double1 = frequency0.getPct((long) 1);
      frequency0.addValue('C');
      Iterator<Comparable<?>> iterator1 = frequency0.valuesIterator();
      long long2 = frequency0.getCount('%');
      long long3 = frequency0.getCount(1);
      double double2 = frequency0.getPct(3L);
      String string0 = frequency0.toString();
      frequency0.addValue(0L);
      double double3 = frequency0.getCumPct('C');
      String string1 = frequency0.toString();
      long long4 = frequency0.getCumFreq(1);
      frequency0.addValue((long) 1);
      long long5 = frequency0.getCount((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t4\t100%\t100%\n");
      long long6 = frequency0.getCount(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Frequency frequency0 = new Frequency(comparator0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double0 = frequency0.getPct(comparable0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct((-1L));
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      long long0 = frequency0.getCumFreq(0);
      Long long1 = new Long(1L);
      Integer integer0 = new Integer(1082);
      frequency0.addValue(integer0);
      Long long2 = Long.getLong("");
      long long3 = Long.remainderUnsigned(669L, 669L);
      Long long4 = Long.getLong("");
      long long5 = frequency0.getCount((Object) long1);
      frequency0.addValue(2050);
      double double1 = frequency0.getPct((Comparable<?>) long1);
      Integer integer1 = new Integer(2050);
      try { 
        Integer.parseUnsignedInt("", 0);
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(0);
      double double0 = frequency0.getCumPct((Object) null);
      frequency0.addValue(integer0);
      frequency0.addValue(integer0);
      double double1 = frequency0.getPct(0);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      Object object0 = new Object();
      boolean boolean0 = frequency0.equals(object0);
      long long0 = frequency0.getCumFreq(0);
      long long1 = frequency0.getCount((Comparable<?>) integer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      frequency0.addValue('_');
      long long0 = frequency0.getSumFreq();
      long long1 = frequency0.getCount((Object) "");
      long long2 = frequency0.getCount('_');
      Iterator<Comparable<?>> iterator1 = frequency0.valuesIterator();
      double double0 = frequency0.getPct('6');
      boolean boolean0 = frequency0.equals(iterator0);
      long long3 = frequency0.getCumFreq(1);
      frequency0.clear();
      long long4 = frequency0.getCumFreq('6');
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getCumFreq((Object) "");
      Long long1 = Long.getLong("", 0L);
      boolean boolean0 = frequency0.equals(long1);
      int int0 = frequency0.hashCode();
      frequency0.addValue('f');
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1431655765, (-231), 1431655765, 1036, (-231)).when(comparator0).compare(anyString() , anyString());
      Frequency frequency0 = new Frequency(comparator0);
      frequency0.addValue(1);
      double double0 = frequency0.getCumPct((-3723));
      Long long0 = new Long(1);
      boolean boolean0 = frequency0.equals(long0);
      double double1 = frequency0.getCumPct('W');
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class) , any(org.apache.commons.math.stat.Frequency.class));
      Frequency frequency0 = new Frequency(comparator0);
      Integer integer0 = new Integer((-1));
      frequency0.addValue(integer0);
      long long0 = frequency0.getCount((-989L));
      Frequency frequency1 = new Frequency();
      long long1 = frequency1.getCumFreq(0L);
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) frequency1);
      } catch(IllegalArgumentException e) {
         //
         // class (org.apache.commons.math.stat.Frequency) does not implement Comparable
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(0);
      frequency0.addValue((Comparable<?>) integer0);
      long long0 = frequency0.getCount((Object) integer0);
      long long1 = 2921L;
      frequency0.addValue(integer0);
      Integer integer1 = new Integer(0);
      double double0 = frequency0.getCumPct((Object) integer1);
      // Undeclared exception!
      try { 
        Integer.remainderUnsigned(2956, 0);
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Frequency> comparator0 = (Comparator<Frequency>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.math.stat.Frequency.class) , any(org.apache.commons.math.stat.Frequency.class));
      Frequency frequency0 = new Frequency(comparator0);
      double double0 = frequency0.getPct('U');
      int int0 = frequency0.hashCode();
      long long0 = frequency0.getCount((-1908L));
      Long long1 = new Long((-1908L));
      int int1 = Long.compare((-19L), (-3320L));
      frequency0.addValue((Comparable<?>) long1);
      long long2 = frequency0.getCount(1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      boolean boolean0 = frequency0.equals((Object) null);
      Integer integer0 = new Integer(0);
      double double0 = frequency0.getCumPct((Object) null);
      frequency0.addValue(integer0);
      frequency0.addValue(integer0);
      double double1 = frequency0.getPct(0);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      Object object0 = new Object();
      long long0 = frequency0.getSumFreq();
      boolean boolean1 = frequency0.equals(object0);
      long long1 = frequency0.getCumFreq(0);
      double double2 = frequency0.getCumPct(0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue((-98L));
      long long0 = frequency0.getCumFreq((-98L));
      boolean boolean0 = frequency0.equals((Object) null);
      double double0 = frequency0.getPct((-98L));
      long long1 = frequency0.getCumFreq('j');
      double double1 = frequency0.getCumPct('j');
      Integer integer0 = new Integer(310);
      Integer integer1 = Integer.getInteger("", integer0);
      Integer integer2 = Integer.getInteger("", integer1);
      frequency0.addValue(integer0);
      long long2 = frequency0.getCount(916);
      long long3 = frequency0.getCount(0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      int int0 = frequency0.hashCode();
      double double0 = frequency0.getPct('f');
      double double1 = frequency0.getPct(3870);
      long long0 = frequency0.getCumFreq('?');
      double double2 = frequency0.getPct('?');
      long long1 = frequency0.getCumFreq(0L);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double3 = frequency0.getCumPct(comparable0);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      frequency0.addValue(2668L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        frequency0.getPct(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      int int0 = 942;
      double double0 = frequency0.getPct(942);
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        frequency0.addValue((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Frequency frequency0 = new Frequency(comparator0);
      Integer integer0 = null;
      // Undeclared exception!
      try { 
        frequency0.addValue((Integer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getSumFreq();
      long long1 = frequency0.getCumFreq(0);
      String string0 = frequency0.toString();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        frequency0.getCumFreq(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getSumFreq();
      double double0 = frequency0.getPct(0L);
      frequency0.clear();
      long long1 = frequency0.getCumFreq(0);
      long long2 = frequency0.getCount('d');
      frequency0.addValue((-1));
      // Undeclared exception!
      try { 
        frequency0.addValue('d');
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Character not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      int int0 = frequency0.hashCode();
      double double0 = frequency0.getPct('X');
      frequency0.addValue('`');
      // Undeclared exception!
      try { 
        frequency0.addValue(0);
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      char char0 = 'T';
      frequency0.addValue((-2230L));
      // Undeclared exception!
      try { 
        frequency0.addValue('T');
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Character not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      long long0 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long1 = frequency0.getSumFreq();
      frequency0.clear();
      double double0 = frequency0.getCumPct('/');
      Integer integer0 = new Integer(0);
      frequency0.addValue(integer0);
      double double1 = frequency0.getPct(0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct(124);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(0);
      Integer integer0 = new Integer((-523));
      Integer integer1 = Integer.getInteger((String) null);
      double double0 = frequency0.getCumPct((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getPct(1L);
      double double1 = frequency0.getCumPct((Object) "8+");
      long long0 = frequency0.getCount(863L);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getPct((Object) "kW8_zqLG\u0006^Q9RvT");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getCount(3004);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Long long0 = new Long(0L);
      long long1 = Long.sum((-251L), 0L);
      double double0 = frequency0.getCumPct((Object) long0);
      String string0 = frequency0.toString();
      Integer integer0 = new Integer(0);
      long long2 = frequency0.getCount((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(640);
      long long0 = Integer.toUnsignedLong(0);
      frequency0.addValue((Object) integer0);
      frequency0.addValue((Comparable<?>) integer0);
      long long1 = frequency0.getCumFreq(';');
      long long2 = frequency0.getCumFreq(0L);
      double double0 = frequency0.getCumPct((long) 640);
      Object object0 = new Object();
      boolean boolean0 = frequency0.equals(object0);
      // Undeclared exception!
      try { 
        frequency0.addValue('I');
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Character not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      int int0 = frequency0.hashCode();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) iterator0);
      } catch(IllegalArgumentException e) {
         //
         // class (java.util.TreeMap$KeyIterator) does not implement Comparable
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Frequency frequency0 = new Frequency(comparator0);
      boolean boolean0 = frequency0.equals("org.apache.commons.math.MathRuntimeException$4");
      double double0 = frequency0.getPct((Object) "org.apache.commons.math.MathRuntimeException$4");
      int int0 = frequency0.hashCode();
      String string0 = frequency0.toString();
      double double1 = frequency0.getCumPct(219L);
      Object object0 = new Object();
      boolean boolean1 = frequency0.equals(object0);
      frequency0.addValue(1L);
      long long0 = frequency0.getCount(380);
      long long1 = frequency0.getCount((Comparable<?>) "org.apache.commons.math.MathRuntimeException$4");
      frequency0.addValue(3077);
      double double2 = frequency0.getPct(1L);
      String string1 = frequency0.toString();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Frequency frequency1 = new Frequency(comparator1);
      double double3 = frequency1.getPct((Comparable<?>) "org.apache.commons.math.MathRuntimeException$4");
      boolean boolean2 = frequency0.equals(frequency1);
      double double4 = frequency0.getPct(474);
      double double5 = frequency0.getCumPct(1L);
      long long2 = frequency0.getCumFreq((long) 3077);
      Frequency frequency2 = new Frequency();
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Object) frequency2);
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(637, 0, 0, 0, (-1523)).when(comparator0).compare(any() , any());
      Frequency frequency0 = new Frequency(comparator0);
      double double0 = frequency0.getCumPct((-700L));
      frequency0.addValue('u');
      double double1 = frequency0.getPct('u');
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      long long0 = frequency0.getCumFreq(comparable1);
      boolean boolean0 = frequency0.equals((Object) null);
      double double2 = frequency0.getCumPct(comparable0);
      Object object0 = new Object();
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double double3 = frequency0.getPct(comparable2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Frequency frequency0 = new Frequency(comparator0);
      long long0 = frequency0.getCumFreq((-342L));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("", 0L);
      long long2 = frequency0.getCount((Object) long0);
      Long long3 = Long.getLong((String) null, (-434L));
      double double0 = frequency0.getPct(0L);
      double double1 = frequency0.getPct('B');
      long long4 = frequency0.getCumFreq(0L);
      double double2 = frequency0.getCumPct(0L);
      double double3 = frequency0.getPct((Comparable<?>) long1);
      long long5 = frequency0.getCumFreq((Object) long1);
      long long6 = frequency0.getCount(617);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      long long0 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      String string1 = frequency0.toString();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      long long1 = frequency0.getCumFreq('~');
      int int0 = frequency0.hashCode();
      Integer integer0 = new Integer((-718));
      frequency0.addValue(integer0);
      long long2 = frequency0.getCount('~');
      long long3 = frequency0.getCumFreq((Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency0.addValue(0L);
      int int1 = Integer.divideUnsigned((-718), 283);
      long long4 = frequency0.getCount((Comparable<?>) integer0);
      double double0 = frequency0.getCumPct((Object) integer0);
      long long5 = frequency0.getCumFreq('+');
      long long6 = frequency0.getCumFreq(283);
      long long7 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      boolean boolean0 = frequency0.equals((Object) null);
      double double1 = frequency0.getCumPct((Comparable<?>) integer0);
      frequency0.addValue(integer0);
      Iterator<Comparable<?>> iterator1 = frequency0.valuesIterator();
      long long8 = frequency0.getSumFreq();
      double double2 = frequency0.getCumPct((-536L));
      double double3 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2015, 2015, 2015, (-1), (-2059)).when(comparator0).compare(anyString() , anyString());
      Frequency frequency0 = new Frequency(comparator0);
      frequency0.addValue(1);
      double double0 = frequency0.getCumPct((-3723));
      Long long0 = new Long(1);
      boolean boolean0 = frequency0.equals(long0);
      double double1 = frequency0.getCumPct('W');
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2534), (-2534), (-5459), (-1), (-1)).when(comparator0).compare(anyInt() , anyInt());
      Frequency frequency0 = new Frequency(comparator0);
      double double0 = frequency0.getCumPct(549L);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      int int0 = 1136;
      double double1 = frequency0.getCumPct(1136);
      String string0 = frequency0.toString();
      long long0 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long1 = frequency0.getCount((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency0.addValue(0L);
      double double2 = frequency0.getCumPct((Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency0.addValue('/');
      long long2 = frequency0.getCount((Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double3 = frequency0.getCumPct(0);
      char char0 = '{';
      double double4 = frequency0.getCumPct('{');
      frequency0.addValue('{');
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      Integer integer0 = new Integer(1);
      frequency0.addValue(integer0);
      double double5 = frequency0.getPct(1);
      int int1 = frequency0.hashCode();
      double double6 = frequency0.getPct((Comparable<?>) integer0);
      // Undeclared exception!
      try { 
        frequency0.getPct((Object) iterator0);
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(31);
      frequency0.addValue((Object) integer0);
      double double0 = frequency0.getPct((-1L));
      int int0 = (-474);
      Integer integer1 = new Integer((-474));
      String string0 = "7n:Wf7>";
      int int1 = Integer.max(21, (-474));
      try { 
        Integer.parseUnsignedInt((String) null);
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct(0);
      double double1 = frequency0.getCumPct(0);
      int int0 = Long.compareUnsigned(1L, (-739L));
      long long0 = frequency0.getCount(0);
      Integer integer0 = Integer.valueOf((-1));
      int int1 = Integer.compare(0, 0);
      frequency0.addValue(integer0);
      double double2 = frequency0.getCumPct(10);
      // Undeclared exception!
      try { 
        frequency0.addValue('i');
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Character not comparable to existing values
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyLong() , anyLong());
      Frequency frequency0 = new Frequency(comparator0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      long long0 = frequency0.getCumFreq(comparable0);
      Frequency frequency1 = new Frequency();
      boolean boolean0 = frequency0.equals(frequency1);
      frequency0.addValue('O');
      frequency0.addValue('{');
      String string0 = frequency0.toString();
      double double0 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \nO\t2\t100%\t100%\n");
      frequency0.clear();
      boolean boolean1 = frequency0.equals(frequency1);
      double double1 = frequency0.getCumPct('O');
      long long1 = frequency0.getCumFreq('v');
      double double2 = frequency0.getCumPct(1453L);
      double double3 = frequency0.getCumPct((Object) "Value \t Freq. \t Pct. \t Cum Pct. \nO\t2\t100%\t100%\n");
      double double4 = frequency1.getCumPct(728L);
      long long2 = frequency1.getCumFreq(0L);
      frequency1.clear();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1), 369, (-1138), (-1)).when(comparator0).compare(anyLong() , anyLong());
      Frequency frequency0 = new Frequency(comparator0);
      frequency0.clear();
      Integer integer0 = Integer.getInteger("NCNw'xju", 1345);
      double double0 = frequency0.getPct(4289L);
      frequency0.addValue(4289L);
      long long0 = frequency0.getCumFreq(0L);
      long long1 = frequency0.getCumFreq(0);
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.Frequency", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct((Object) "");
      Long long0 = new Long(1069L);
      long long1 = frequency0.getCount((Object) long0);
      frequency0.addValue('z');
      double double1 = frequency0.getPct((-502));
      long long2 = frequency0.getCount((Comparable<?>) "");
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
  }
}
