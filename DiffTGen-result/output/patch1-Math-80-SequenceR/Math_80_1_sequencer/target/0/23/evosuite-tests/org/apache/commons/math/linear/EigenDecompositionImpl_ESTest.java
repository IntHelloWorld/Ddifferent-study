/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 21:51:13 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1814.288973);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 304.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      double double0 = openMapRealVector0.getEntry(0);
      double double1 = openMapRealVector0.getNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double2 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      double double4 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = (-651.0);
      doubleArray1[2] = (-651.0);
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector(68);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 1.5674174605289701;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.5674174605289701;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2184.7308782555365);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray0[4] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.25;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 4.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 4.0;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 0.25;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      int int0 = 40;
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-1814.288973);
      doubleArray0[1] = (-1814.288973);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 304.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      double double0 = openMapRealVector0.getEntry(0);
      double double1 = openMapRealVector0.getNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.1792694642326074);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double2 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      double double4 = eigenDecompositionImpl0.getImagEigenvalue(0);
      double double5 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1814.288973);
      doubleArray0[1] = (-1814.288973);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 304.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      double double0 = openMapRealVector0.getEntry(0);
      double double1 = openMapRealVector0.getNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 1.469053151192874;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[5] = 0.0;
      doubleArray0[0] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray0[2] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 1.469053151192874;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1806.710248113779);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 304.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      double double0 = openMapRealVector0.getEntry(0);
      double double1 = openMapRealVector0.getNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double2 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      double double4 = eigenDecompositionImpl0.getImagEigenvalue(0);
      double double5 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 649.67;
      doubleArray0[1] = (-1212.8322941971);
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 2633.8517587;
      doubleArray0[4] = (-2442.79501074039);
      doubleArray0[5] = (-198.59305);
      doubleArray0[6] = 1.2924746374947634E-26;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1168.4729035666621;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-352.20920011077976));
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1916.3);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 743;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(743, 743);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 2829.48748790483);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      int int0 = (-10);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-10));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1814.288973);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 304.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      double double0 = openMapRealVector0.getEntry(0);
      double double1 = openMapRealVector0.getNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double2 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      double double4 = eigenDecompositionImpl0.getImagEigenvalue(0);
      double double5 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 215.4047153);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 2.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 4.0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 27.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // a 2x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4142.897593951);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-323.0));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 1.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1713.0;
      doubleArray1[1] = (-130.0);
      doubleArray1[2] = 0.5;
      doubleArray1[3] = 1281.76129;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = -0.0;
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(1304.2952966);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2125.61));
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x8 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-631.76978606519);
      doubleArray0[3] = 54.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.25;
      doubleArray0[6] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4442.5357240691);
      doubleArray0[3] = 2431.85700625;
      doubleArray0[4] = (-3120.271129433265);
      doubleArray0[5] = (-3951.2483681615);
      doubleArray0[6] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1846.69631392828;
      doubleArray0[1] = 109.0277;
      doubleArray0[2] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 383.0537);
      } catch(RuntimeException e) {
         //
         // a 3x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1475;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1475, 1475);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-449.0));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2305.750771293;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2171.35074);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-651.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-651.0);
      doubleArray1[1] = 2305.750771293;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.25;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-651.0);
      doubleArray1[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector(40);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 2.2250738585072014E-308;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.NaN;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix7 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      try { 
        eigenDecompositionImpl0.getEigenvector(15);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3511.470982);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2969.0;
      doubleArray0[4] = 1021.3;
      doubleArray0[5] = (-2682.73);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 304.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      double double0 = openMapRealVector0.getEntry(0);
      double double1 = openMapRealVector0.getNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapLog1p();
      double double2 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      realMatrix0.setEntry(0, 0, 0.25);
      double double4 = eigenDecompositionImpl0.getImagEigenvalue(0);
      realMatrix0.setColumn(0, doubleArray0);
      double double5 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-199), (-199));
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapPowToSelf(1800.3749394);
      try { 
        openMapRealVector0.outerproduct(openMapRealVector0);
      } catch(IllegalArgumentException e) {
         //
         // invalid row dimension -199 (must be positive)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
