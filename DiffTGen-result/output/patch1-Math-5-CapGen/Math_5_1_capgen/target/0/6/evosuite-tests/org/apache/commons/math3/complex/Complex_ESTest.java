/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:14:23 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.NaN.negate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex0.ZERO.subtract(1128.804693185);
      String string0 = complex1.toString();
      Complex complex4 = complex1.divide(1.088911919926534E-149);
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = Complex.valueOf(2.7472456017809066E228, 1.088911919926534E-149);
      Complex complex6 = complex4.pow(1291.5577);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(628.4447, 644.3);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.multiply(628.4447);
      Object object0 = new Object();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.divide((-1.0));
      boolean boolean0 = complex1.equals(object0);
      Complex complex5 = complex0.I.log();
      Complex complex6 = complex0.ZERO.multiply(1);
      Complex complex7 = complex1.reciprocal();
      Object object1 = complex7.readResolve();
      Complex complex8 = complex1.sqrt1z();
      Object object2 = complex7.ZERO.readResolve();
      double double1 = complex4.I.abs();
      boolean boolean1 = complex0.isInfinite();
      Complex complex9 = complex4.ONE.reciprocal();
      Complex complex10 = complex6.ZERO.sin();
      Complex complex11 = complex6.tan();
      Complex complex12 = complex4.reciprocal();
      String string0 = complex2.NaN.toString();
      Complex complex13 = complex1.subtract(complex0);
      Complex complex14 = complex2.sinh();
      double double2 = complex11.getArgument();
      Complex complex15 = complex14.log();
      Complex complex16 = complex12.subtract(complex11);
      Complex complex17 = complex13.INF.sinh();
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex13.multiply(complex18);
      Complex complex20 = complex2.sqrt();
      Complex complex21 = complex1.add((double) 1);
      Complex complex22 = complex1.subtract((double) 1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1645.109));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.NaN.subtract((-1645.109));
      Complex complex4 = complex0.ONE.multiply((-1172));
      double double0 = complex1.abs();
      Object object0 = complex0.INF.readResolve();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex1.createComplex((-1645.109), 1645.108696068743);
      String string0 = complex1.toString();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.I.subtract(complex2);
      Complex complex9 = complex8.ONE.pow(complex3);
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex6.log();
      double double1 = complex1.getReal();
      Complex complex11 = complex6.NaN.acos();
      Complex complex12 = Complex.valueOf((-4062.9461904), 0.0);
      Complex complex13 = Complex.valueOf((double) (-1172));
      Complex complex14 = complex6.divide(complex13);
      Complex complex15 = complex0.multiply(complex2);
      double double2 = complex14.getArgument();
      Complex complex16 = complex7.tanh();
      Complex complex17 = complex3.createComplex(966.8224048160624, (-1007.5525745478));
      ComplexField complexField0 = complex16.getField();
      double double3 = complex2.abs();
      Object object1 = complex4.readResolve();
      Complex complex18 = complex6.add(complex8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.NaN.sin();
      double double1 = complex4.INF.abs();
      Complex complex5 = complex2.ZERO.sinh();
      Complex complex6 = complex2.NaN.sqrt1z();
      Complex complex7 = complex6.ZERO.pow(complex1);
      Complex complex8 = complex7.ZERO.divide(Double.POSITIVE_INFINITY);
      double double2 = complex2.getImaginary();
      Complex complex9 = complex1.pow(complex5);
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex5.log();
      Complex complex12 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex13 = complex12.I.exp();
      Complex complex14 = complex2.atan();
      Complex complex15 = complex11.sin();
      Complex complex16 = complex15.I.conjugate();
      double double3 = complex3.getReal();
      Complex complex17 = complex15.INF.createComplex((-1.0), (-1450.065722939824));
      Complex complex18 = complex5.divide(complex8);
      ComplexField complexField0 = complex18.NaN.getField();
      Complex complex19 = complex2.pow(complex15);
      Complex complex20 = complex4.log();
      int int0 = complex19.hashCode();
      Complex complex21 = complex8.negate();
      double double4 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1646.74682299);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.NaN.subtract(1646.74682299);
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = new Complex((-2687.4748));
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.I.sqrt1z();
      List<Complex> list0 = complex6.I.nthRoot(4077);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.I.reciprocal();
      Complex complex9 = complex4.log();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex1.add((-2687.4748));
      Complex complex14 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1778.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.createComplex(1778.0, 1778.0);
      Complex complex3 = complex1.divide(complex0);
      String string0 = complex2.toString();
      Complex complex4 = complex1.I.pow(complex2);
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex0.INF.subtract(0.0);
      ComplexField complexField0 = complex5.ONE.getField();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ONE.subtract(0.5010119676589966);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.ONE.add(complex1);
      Complex complex8 = complex1.multiply(complex0);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.NaN.sin();
      Complex complex11 = new Complex(0.5010119676589966);
      boolean boolean0 = complex0.equals(complex11);
      Complex complex12 = complex3.exp();
      double double1 = complex12.ONE.getArgument();
      Complex complex13 = complex1.log();
      Complex complex14 = complex11.cos();
      int int0 = complex14.INF.hashCode();
      Complex complex15 = complex0.sin();
      double double2 = complex14.getArgument();
      Complex complex16 = complex2.NaN.acos();
      Complex complex17 = complex8.tanh();
      int int1 = complex0.hashCode();
      ComplexField complexField0 = complex5.getField();
      Complex complex18 = complex3.divide(1876.8);
      Complex complex19 = complex7.multiply(complex4);
      Complex complex20 = complex18.acos();
      Complex complex21 = complex19.conjugate();
      Object object0 = complex2.readResolve();
      Object object1 = complex13.readResolve();
      Complex complex22 = complex15.atan();
      boolean boolean1 = complex21.isInfinite();
      Complex complex23 = complex16.tanh();
      Complex complex24 = complex5.sin();
      boolean boolean2 = complex17.isNaN();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.0), 1501.0);
      String string0 = complex0.toString();
      Complex complex1 = complex0.subtract((-499.0441625212));
      Complex complex2 = complex0.atan();
      double double0 = complex0.getArgument();
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = Complex.ONE;
      String string1 = complex3.ONE.toString();
      Complex complex4 = complex2.ONE.subtract(complex3);
      double double1 = complex4.NaN.getArgument();
      String string2 = complex1.toString();
      Complex complex5 = complex2.createComplex((-1780.0), (-1780.0));
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex5.reciprocal();
      int int0 = complex0.hashCode();
      String string3 = complex6.NaN.toString();
      Complex complex8 = complex5.I.tan();
      Complex complex9 = complex0.atan();
      boolean boolean0 = complex6.isInfinite();
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex6.subtract((-1780.0));
      Complex complex12 = complex11.I.add(complex9);
      int int1 = complex1.hashCode();
      Complex complex13 = complex2.multiply((-2150));
      double double2 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      double double1 = complex0.ONE.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex1.ZERO.sqrt1z();
      Complex complex5 = complex1.createComplex(Double.NaN, 0.0);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex1.NaN.reciprocal();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex9.I.pow(complex5);
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex13.ONE.multiply(complex10);
      double double2 = complex9.abs();
      double double3 = complex1.getArgument();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = complex7.ONE.add(complex6);
      Complex complex17 = complex1.atan();
      Complex complex18 = complex2.reciprocal();
      Complex complex19 = complex18.I.divide(complex3);
      Complex complex20 = complex18.cos();
      Complex complex21 = complex7.pow(Double.NaN);
      Complex complex22 = complex3.acos();
      Complex complex23 = complex10.atan();
      boolean boolean0 = complex22.isNaN();
      double double4 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.multiply((-20.0));
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.I.sin();
      Complex complex7 = complex0.cos();
      int int0 = complex3.hashCode();
      Complex complex8 = complex6.negate();
      boolean boolean0 = complex2.equals(complex8);
      double double0 = complex6.getReal();
      Complex complex9 = complex3.exp();
      boolean boolean1 = complex1.equals("/`<LC");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(0);
      Complex complex3 = Complex.valueOf(2216.26);
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex0.pow(complex1);
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex1.I.divide(0.0);
      int int0 = complex4.I.hashCode();
      Complex complex6 = complex0.divide((-1291.92839415538));
      Complex complex7 = complex4.add(complex1);
      Complex complex8 = complex7.ONE.divide(726.65073579);
      Complex complex9 = complex0.divide(2216.26);
      boolean boolean1 = complex7.equals(complex6);
      double double0 = complex0.getImaginary();
      Complex complex10 = complex5.add(complex0);
      Complex complex11 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-378.398000709), (-378.398000709));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex5.ONE.multiply(319.919658510183);
      int int0 = complex1.hashCode();
      Complex complex7 = complex2.log();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex3.pow(complex8);
      Complex complex10 = complex8.pow((-378.398000709));
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex2.createComplex(0.0, 134.455847);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.I.readResolve();
      Object object1 = complex0.ONE.readResolve();
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex2.ONE.acos();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex7.INF.multiply(173);
      Complex complex9 = complex6.ONE.tanh();
      Complex complex10 = complex6.multiply((-796));
      Complex complex11 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex7.multiply(636);
      Complex complex14 = complex12.negate();
      Complex complex15 = complex11.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.divide(complex0);
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex3.multiply(complex2);
      Complex complex9 = complex4.NaN.negate();
      Complex complex10 = complex4.add(complex1);
      double double0 = complex10.NaN.getArgument();
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex1.ONE.multiply(1126);
      Complex complex13 = complex11.ZERO.divide(Double.NaN);
      double double1 = complex1.getImaginary();
      Complex complex14 = complex8.sqrt1z();
      Complex complex15 = complex9.ZERO.negate();
      Complex complex16 = complex14.exp();
      Complex complex17 = complex16.divide(complex10);
      Complex complex18 = complex1.tanh();
      ComplexField complexField0 = complex6.getField();
      Complex complex19 = complex5.multiply(complex7);
      Complex complex20 = complex19.INF.divide(Double.NaN);
      Complex complex21 = Complex.NaN;
      Complex complex22 = complex20.ZERO.sinh();
      Complex complex23 = complex22.ZERO.sin();
      double double2 = complex21.I.abs();
      Complex complex24 = complex20.ONE.add(complex21);
      Complex complex25 = complex9.atan();
      int int1 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = Complex.valueOf(1254.22);
      Complex complex5 = complex3.NaN.add(20.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = Complex.valueOf(1254.22);
      int int0 = (-10);
      try { 
        complex0.nthRoot((-10));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -10
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2461.9), (-2461.9));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.conjugate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex2.subtract((-2461.9));
      Complex complex5 = complex1.tan();
      boolean boolean1 = complex4.isInfinite();
      Complex complex6 = complex3.divide(20.0);
      Complex complex7 = complex5.sqrt1z();
      int int0 = complex0.hashCode();
      try { 
        complex4.nthRoot((-1241));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,241
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1716.545578), 0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.ONE.tan();
      List<Complex> list0 = complex3.nthRoot(941);
      Complex complex5 = complex0.I.pow(2647.7496747596);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex8.ONE.tan();
      double double0 = complex9.INF.abs();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.ZERO.tan();
      Complex complex12 = complex10.ONE.subtract(620.099807);
      Complex complex13 = complex1.add(complex10);
      Complex complex14 = complex13.NaN.multiply(941);
      Complex complex15 = complex13.I.add(complex7);
      Complex complex16 = complex10.conjugate();
      Complex complex17 = complex13.cosh();
      Complex complex18 = complex17.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(467.465195696);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.divide(complex1);
      double double0 = complex0.getArgument();
      Complex complex7 = Complex.valueOf((-735.88), 0.0);
      Complex complex8 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ZERO.atan();
      List<Complex> list0 = complex4.INF.nthRoot(1027);
      double double0 = complex0.abs();
      double double1 = complex4.getArgument();
      double double2 = complex4.NaN.abs();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex3.add(complex4);
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex6.log();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex9.I.conjugate();
      Object object0 = complex6.readResolve();
      Complex complex11 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex4.I.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.INF.sin();
      Complex complex8 = complex7.add(complex5);
      Complex complex9 = complex6.NaN.reciprocal();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex0.multiply(complex6);
      Complex complex12 = complex11.INF.subtract(complex2);
      Complex complex13 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex14 = complex6.sqrt1z();
      Complex complex15 = complex8.I.atan();
      Complex complex16 = complex5.NaN.sqrt1z();
      Complex complex17 = complex5.multiply((-1050));
      Complex complex18 = complex17.NaN.sin();
      Complex complex19 = Complex.valueOf(0.0, 0.0);
      Complex complex20 = complex17.add(complex5);
      Complex complex21 = complex0.add(complex8);
      Complex complex22 = complex0.atan();
      Complex complex23 = complex22.I.createComplex(0.0, 0.0);
      Complex complex24 = complex7.sinh();
      Complex complex25 = complex15.conjugate();
      int int0 = complex15.hashCode();
      Complex complex26 = complex3.add(Double.POSITIVE_INFINITY);
      Object object1 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-2425.11395), (-2425.11395));
      Complex complex1 = complex0.createComplex((-2425.11395), (-2425.11395));
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.divide(2163.20287284);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.multiply(6.283185307179586);
      Complex complex7 = complex2.multiply((-150));
      Complex complex8 = complex6.multiply(1);
      Complex complex9 = complex6.ONE.cosh();
      Complex complex10 = complex0.cos();
      Complex complex11 = Complex.valueOf(2474.385409254943);
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex2.divide(6.283185307179586);
      Complex complex14 = complex13.NaN.acos();
      Complex complex15 = complex2.negate();
      Complex complex16 = complex5.subtract(complex6);
      Complex complex17 = complex6.log();
      Complex complex18 = complex10.tanh();
      Complex complex19 = complex16.sin();
      Complex complex20 = complex4.asin();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(979.38099);
      Complex complex1 = complex0.ONE.createComplex(979.38099, 979.38099);
      Complex complex2 = Complex.valueOf(979.38099);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex2.I.multiply((-4242.514));
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.valueOf(979.38099);
      Complex complex7 = complex5.ZERO.pow(0.5483922958374023);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = Complex.valueOf((-4242.514), (-4242.514));
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex11.INF.add(0.0);
      Complex complex13 = complex3.log();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex6.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.989519470441919E45, 3.989519470441919E45);
      Complex complex1 = new Complex(3.989519470441919E45);
      Complex complex2 = complex1.ONE.add(3.989519470441919E45);
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex4.NaN.createComplex(0.26146239042282104, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex1.pow(3.989519470441919E45);
      Complex complex9 = complex0.add(3.989519470441919E45);
      double double0 = complex0.getImaginary();
      Complex complex10 = complex2.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.ONE.add(Double.NaN);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.I.subtract(complex5);
      Complex complex7 = complex3.NaN.sinh();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex1.pow(0.0);
      Complex complex10 = complex9.subtract(complex1);
      double double0 = complex0.getReal();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex5.NaN.add(0.0);
      Complex complex13 = Complex.valueOf((-811.19251546));
      Complex complex14 = complex13.I.asin();
      double double1 = complex14.ONE.abs();
      Complex complex15 = complex3.NaN.exp();
      Complex complex16 = complex15.NaN.acos();
      Complex complex17 = complex7.pow(complex1);
      Complex complex18 = complex5.log();
      Object object0 = complex4.readResolve();
      Complex complex19 = complex17.multiply(962);
      Complex complex20 = complex14.multiply(complex15);
      Complex complex21 = complex7.negate();
      Complex complex22 = complex20.subtract(complex3);
      Complex complex23 = complex22.NaN.pow((double) 962);
      Complex complex24 = complex5.tanh();
      Complex complex25 = complex19.pow(0.0);
      Complex complex26 = complex0.negate();
      boolean boolean0 = complex19.equals("");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.I.subtract(complex3);
      Complex complex5 = complex0.sin();
      double double0 = complex5.ZERO.getArgument();
      Complex complex6 = complex0.divide(0.0);
      double double1 = complex1.NaN.abs();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.NaN.asin();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex6.I.acos();
      Complex complex13 = complex6.ZERO.atan();
      double double2 = complex10.getImaginary();
      Complex complex14 = complex10.pow(complex11);
      Complex complex15 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf((-1460.016492), (-13.432644661));
      Complex complex4 = complex3.ONE.multiply(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.valueOf(83.56189156);
      Complex complex7 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = new Complex(683.956);
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = complex4.subtract(20.0);
      Complex complex6 = complex5.ONE.add(20.0);
      int int0 = complex5.hashCode();
      Complex complex7 = Complex.valueOf(683.956, 20.0);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.add((-2803.87373802381));
      Complex complex10 = complex3.cos();
      Complex complex11 = complex3.multiply((-3252));
      Complex complex12 = complex7.INF.cosh();
      Complex complex13 = complex11.atan();
      ComplexField complexField0 = complex7.getField();
      int int1 = complex10.hashCode();
      List<Complex> list0 = complex10.nthRoot(1161);
      double double0 = complex10.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex14 = complex13.divide(complex10);
      Complex complex15 = Complex.valueOf(20.0, 1898.590572223);
      Complex complex16 = Complex.valueOf((-187.145811191083));
      int int2 = complex1.hashCode();
      Complex complex17 = complex9.sqrt1z();
      Complex complex18 = complex7.ZERO.exp();
      Complex complex19 = Complex.valueOf(0.0, 0.0);
      Complex complex20 = complex12.multiply(complex19);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ZERO.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.ZERO.multiply(Double.NaN);
      Complex complex3 = complex0.I.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.ONE.pow(complex5);
      Complex complex7 = complex0.multiply(574);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.I.subtract(0.0);
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = Complex.valueOf(0.0);
      String string0 = complex7.I.toString();
      double double0 = complex2.abs();
      double double1 = complex0.getArgument();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex7.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.acos();
      int int0 = complex3.hashCode();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex0.acos();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.INF.nthRoot(1157);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.I.add((-458.286234917624));
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.conjugate();
      double double0 = complex3.getArgument();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1101.4));
      Complex complex1 = Complex.valueOf((-237.354325134));
      String string0 = complex0.toString();
      Complex complex2 = Complex.valueOf((-1101.4), 628.0);
      Complex complex3 = complex1.subtract((-1101.4));
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ONE.sqrt1z();
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex3.sqrt();
      try { 
        complex5.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.INF.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ONE.add(0.0);
      double double0 = complex2.ONE.getArgument();
      Complex complex6 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.INF.subtract((-558.3503061));
      Complex complex8 = complex7.ZERO.divide(complex0);
      Complex complex9 = complex0.sin();
      Complex complex10 = complex0.ONE.add(complex9);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex9.negate();
      Complex complex13 = complex0.ZERO.cosh();
      Complex complex14 = complex12.NaN.reciprocal();
      Complex complex15 = complex12.INF.negate();
      Complex complex16 = complex9.log();
      double double1 = complex11.abs();
      Complex complex17 = complex16.exp();
      boolean boolean0 = complex11.isInfinite();
      Complex complex18 = complex16.tanh();
      Complex complex19 = complex14.subtract(0.0);
      Complex complex20 = complex19.I.subtract(complex0);
      Complex complex21 = complex15.divide(complex12);
      Complex complex22 = complex21.NaN.pow(1981.925062507379);
      String string1 = complex0.toString();
      Complex complex23 = complex20.cos();
      Complex complex24 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1020.607340796), (-1020.607340796));
      Complex complex1 = complex0.negate();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex1.atan();
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
      Complex complex7 = Complex.valueOf(1413.581904);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex2.ONE.createComplex(0.0, (-3095.986858000204));
      Complex complex7 = complex0.pow(518.6161475);
      Complex complex8 = Complex.valueOf(3154.9481098449155, (-20.0));
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex9 = complex2.subtract(complex1);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex9.multiply(2141);
      Complex complex12 = complex1.tan();
      double double0 = complex1.getArgument();
      Complex complex13 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(725.1032349470955);
      Complex complex1 = complex0.NaN.pow(1349.828283258825);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex2.divide(complex3);
      String string0 = complex0.I.toString();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex1.divide(725.1032349470955);
      Complex complex11 = complex10.NaN.add(complex2);
      Complex complex12 = complex4.pow(complex9);
      Complex complex13 = complex1.divide((-193.124954209));
      Complex complex14 = complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide((-2671.620528452));
      Complex complex2 = Complex.valueOf((-2671.620528452));
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.abs();
      Complex complex3 = complex0.NaN.divide(complex2);
      Object object0 = complex2.readResolve();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.I.add(3221.196671662176);
      Complex complex6 = complex2.ONE.createComplex(0.0, 1191.21384904918);
      Complex complex7 = complex0.multiply(complex1);
      Object object1 = new Object();
      boolean boolean0 = complex7.equals(object1);
      double double2 = complex2.getImaginary();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex0.add(complex1);
      double double3 = complex1.getReal();
      List<Complex> list0 = complex1.ZERO.nthRoot(186);
      Complex complex10 = complex9.divide(0.0);
      Complex complex11 = complex2.add(complex3);
      Complex complex12 = complex8.multiply(958);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.INF.divide(complex0);
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.I.pow(37.870804296);
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex2.multiply(0.16666666666745392);
      Complex complex8 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex4.divide(complex1);
      List<Complex> list0 = complex3.nthRoot(752);
      Complex complex7 = complex5.negate();
      Complex complex8 = complex1.sin();
      Object object0 = complex4.readResolve();
      Complex complex9 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex0.ONE.multiply(0.0);
      Complex complex7 = complex5.ONE.divide(complex0);
      Complex complex8 = complex7.ZERO.sin();
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex0.negate();
      double double0 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.conjugate();
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1148.813233, 3373.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(1.0, (-1633.6));
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.subtract(3373.0);
      Complex complex6 = complex4.sinh();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.I.multiply((-3946));
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex complex5 = complex0.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.ONE.divide(194.7);
      Complex complex7 = complex0.log();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex5.ZERO.reciprocal();
      double double0 = complex8.getImaginary();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex1.ZERO.add(complex2);
      ComplexField complexField0 = complex11.I.getField();
      Complex complex12 = complex5.multiply((-3946));
      Complex complex13 = complex1.pow(complex3);
      List<Complex> list0 = complex0.nthRoot(1);
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1822.920461489503);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex1.getImaginary();
      Complex complex3 = Complex.valueOf(0.0, (-85.67601599));
      Complex complex4 = complex0.add(1822.920461489503);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.NaN.add(3758.6922601624);
      double double0 = (-309.1);
      Complex complex3 = Complex.valueOf((-309.1), 0.1246747374534607);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.ONE.multiply(complex5);
      Complex complex8 = complex0.ONE.multiply(complex5);
      Complex complex9 = Complex.valueOf(0.0, 2.3684740712822874E-41);
      Complex complex10 = complex9.I.acos();
      Complex complex11 = complex0.multiply(complex9);
      Complex complex12 = complex11.atan();
      Complex complex13 = complex9.divide(complex0);
      double double1 = complex13.ONE.abs();
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex13.atan();
      List<Complex> list0 = complex11.I.nthRoot(17);
      Complex complex16 = complex11.subtract((-1865.2143890044808));
      try { 
        complex2.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.92909364037955E-9, 1.92909364037955E-9);
      Complex complex1 = complex0.I.multiply(727);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex6.multiply((double) 727);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.multiply((-309.1106));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(541.0361406671082);
      Complex complex1 = new Complex((-1999.48189), (-1999.48189));
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.multiply(844);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1877.41766331, 1877.41766331);
      Complex complex1 = complex0.divide((-1214.63879));
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.NaN.pow(1877.41766331);
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.divide((-1214.63879));
      Complex complex7 = complex1.multiply((-1214.63879));
      boolean boolean0 = complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.negate();
      int int0 = complex5.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex7.INF.add(Double.NaN);
      Complex complex9 = complex5.multiply(0.0);
      Complex complex10 = complex9.multiply(complex3);
      Complex complex11 = complex4.NaN.sqrt1z();
      Complex complex12 = complex10.exp();
      Object object0 = complex10.readResolve();
      Complex complex13 = complex6.tan();
      Complex complex14 = complex5.reciprocal();
      int int1 = complex4.hashCode();
      Complex complex15 = complex11.tanh();
      Complex complex16 = complex15.multiply(complex6);
      Complex complex17 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.INF.exp();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2866.3595, 1666.98848);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.NaN.add(1459.93);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = Complex.valueOf(1867.7389298988, (-664.345543096));
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(394.0);
      Complex complex2 = complex0.createComplex(394.0, 0.0);
      boolean boolean0 = complex0.equals("[@Q");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1092.568548854923), (-1092.568548854923));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.valueOf(302.82275047);
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex4.INF.multiply(complex0);
      double double0 = complex0.I.getArgument();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex6.log();
      Complex complex8 = complex6.add(0.0);
      Complex complex9 = complex5.subtract(complex1);
      Complex complex10 = Complex.valueOf(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.add((-681.36));
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex4.multiply(1.7177505493164062);
      Complex complex8 = complex5.exp();
      Complex complex9 = complex7.createComplex(20.0, (-301.59703));
      Complex complex10 = complex9.INF.add(complex4);
      double double0 = complex10.ONE.abs();
      List<Complex> list0 = complex9.nthRoot(1);
      double double1 = complex4.getReal();
      Complex complex11 = complex2.sin();
      Complex complex12 = complex7.createComplex((-9.698281856949837E-8), 1.1612894529345954);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.6183651590639875E-8), (-1695.1158548));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.tan();
      String string0 = complex1.toString();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex3.multiply(complex0);
      Complex complex7 = complex4.multiply((-1948.0));
      Complex complex8 = complex0.add((-970.9122278019271));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.divide((-3047.76));
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex3.add((-2123.530881837));
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex7.NaN.multiply((-3047.76));
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex9.add(complex10);
      Complex complex12 = complex10.I.asin();
      Complex complex13 = complex2.tan();
      Complex complex14 = complex10.subtract(complex13);
      Complex complex15 = complex0.cos();
      Complex complex16 = complex15.NaN.tanh();
      Complex complex17 = complex16.I.sqrt();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex18 = complex4.createComplex(0.0, 0.0);
      int int0 = (-1);
      try { 
        complex10.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex1.I.exp();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.pow(1.1857939200074815E-7);
      double double0 = complex0.getReal();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.NaN.createComplex(2789.66405111735, Double.NaN);
      Complex complex3 = complex2.sqrt1z();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf(4189.2843, 4189.2843);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.INF.multiply(complex4);
      Complex complex6 = complex3.exp();
      Complex complex7 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex1.divide(0.0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex2.multiply((-566));
      Complex complex8 = complex0.I.add(2922.8532427026194);
      Complex complex9 = complex1.asin();
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex1.subtract(0.0);
      Complex complex12 = complex11.ZERO.sqrt1z();
      boolean boolean0 = complex3.equals(complex9);
      Complex complex13 = complex3.ONE.sinh();
      Complex complex14 = Complex.valueOf((double) (-566), 0.0);
      Complex complex15 = Complex.valueOf(2922.8532427026194, (-104.364792));
      Complex complex16 = complex3.atan();
      Complex complex17 = complex7.subtract(complex14);
      Complex complex18 = complex17.acos();
      Complex complex19 = complex2.negate();
      Complex complex20 = complex19.negate();
      Complex complex21 = complex14.divide((-1914.5393008981));
      Complex complex22 = complex10.sqrt();
      Complex complex23 = complex22.subtract(complex6);
      Complex complex24 = complex10.tan();
      Complex complex25 = complex22.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-773.545222219), (-773.545222219));
      Complex complex1 = complex0.ZERO.sin();
      String string0 = complex1.INF.toString();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.tan();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-455.92));
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(5133.125766135);
      Complex complex2 = Complex.valueOf((-455.92));
      double double1 = complex0.getArgument();
      double double2 = complex0.getArgument();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex2.pow((-3346.82055974506));
      Complex complex7 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2552.0));
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.INF.negate();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex5.negate();
      double double2 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2136.85423184);
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.add((-934.39));
      Complex complex4 = complex2.conjugate();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 4308.907;
      Complex complex1 = complex0.ONE.createComplex(4308.907, (-2420.260861));
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.INF.subtract((-2420.260861));
      Complex complex3 = complex2.I.cosh();
      double double1 = complex2.NaN.getArgument();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex4.multiply((-2420.260861));
      Complex complex7 = Complex.valueOf((-2420.260861), (-2420.260861));
      String string0 = complex7.toString();
      Complex complex8 = complex0.ZERO.divide(complex4);
      Complex complex9 = complex0.INF.exp();
      Complex complex10 = complex8.NaN.add(complex0);
      Complex complex11 = complex0.INF.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex12 = complex9.log();
      Complex complex13 = complex11.NaN.sinh();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex6.pow(complex14);
      Complex complex16 = complex11.ZERO.subtract(complex3);
      Complex complex17 = complex9.asin();
      try { 
        complex8.NaN.nthRoot((-1451));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,451
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.7978130078372714E51);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.INF.multiply((-230));
      Complex complex3 = complex0.reciprocal();
      List<Complex> list0 = complex1.nthRoot(17);
      Complex complex4 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.negate();
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex2.I.divide((-3356.4248833));
      Complex complex4 = complex1.subtract(1.9867963790893555);
      Complex complex5 = Complex.valueOf(1779.339750369);
      Complex complex6 = complex2.I.add(complex4);
      Complex complex7 = complex2.pow(0.0);
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex0.add(1.9867963790893555);
      Complex complex11 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = new Complex((-3739.321));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex0.ONE.multiply(complex1);
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.multiply(814.41);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.I.multiply(0.0);
      Object object0 = complex0.readResolve();
      double double1 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1080.2583912);
      Complex complex1 = complex0.createComplex(0.0, 1278.632419620121);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.divide(2.3593788146972656);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.divide(0.0);
      double double0 = complex5.getReal();
      String string0 = complex3.toString();
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = complex6.INF.pow(complex5);
      Complex complex8 = complex3.add(complex6);
      Complex complex9 = complex1.createComplex((-1775.205), 1278.632419620121);
      Complex complex10 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2402.691449084447));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ONE.multiply(1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.I.subtract(4896.3872);
      Complex complex5 = complex4.NaN.divide(4896.3872);
      Complex complex6 = complex5.ONE.sin();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex2.createComplex((-2.1899520225809197E-7), 4896.3872);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(3682.42114781588, 3682.42114781588);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.valueOf(3682.42114781588, 3682.42114781588);
      Complex complex4 = complex3.ONE.divide(2483.29441085094);
      double double0 = complex1.ZERO.getArgument();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex0.subtract((-1.2030229087793677E-8));
      String string0 = complex4.ZERO.toString();
      double double0 = complex2.getArgument();
      double double1 = complex1.getReal();
      Complex complex5 = Complex.valueOf(0.0, 797.642182878674);
      Complex complex6 = complex0.createComplex((-2602.0), 797.642182878674);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex4.divide(complex2);
      Complex complex9 = complex7.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.NaN.multiply(1423);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex2.NaN.sqrt();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex1.createComplex(893.9, (-20.0));
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex10.cos();
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      double double0 = complex9.getImaginary();
      Complex complex16 = complex8.asin();
      Complex complex17 = complex1.cosh();
      Complex complex18 = complex17.cos();
      Complex complex19 = complex16.sqrt();
      Complex complex20 = complex13.cos();
      Complex complex21 = complex8.divide(321.934353051334);
      Complex complex22 = complex21.I.conjugate();
      Complex complex23 = Complex.valueOf((-20.0), 1630.7785);
      Complex complex24 = complex2.multiply(0.0);
      Complex complex25 = complex10.add(complex19);
      Complex complex26 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.acos();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex1.ONE.atan();
      double double0 = complex4.I.abs();
      Complex complex5 = complex4.add((-1.0));
      Complex complex6 = Complex.valueOf(0.512191891670227, 1.0);
      Complex complex7 = complex4.ONE.sqrt1z();
      Complex complex8 = complex1.cos();
      double double1 = complex8.I.abs();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex1.subtract((-1.0));
      Complex complex11 = complex9.I.asin();
      Object object0 = complex11.I.readResolve();
      Complex complex12 = complex11.I.cos();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex11.log();
      Complex complex15 = complex14.ONE.multiply(complex7);
      Complex complex16 = complex14.ZERO.log();
      Complex complex17 = complex9.sin();
      Complex complex18 = complex4.INF.sinh();
      List<Complex> list0 = complex3.nthRoot(1081);
      Complex complex19 = complex11.multiply((double) 1081);
      Complex complex20 = complex19.ONE.asin();
      Complex complex21 = complex17.add((-1637.2446052172943));
      Complex complex22 = complex2.multiply(6028);
      Complex complex23 = complex20.sqrt1z();
      Complex complex24 = complex7.acos();
      Complex complex25 = complex4.tan();
      Complex complex26 = complex21.sqrt1z();
      Complex complex27 = complex21.reciprocal();
      Complex complex28 = complex7.add(complex19);
  }
}
