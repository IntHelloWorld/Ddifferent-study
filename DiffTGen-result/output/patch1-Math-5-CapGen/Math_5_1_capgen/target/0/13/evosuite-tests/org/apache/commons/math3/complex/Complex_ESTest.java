/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:17:58 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      double double0 = complex1.ONE.abs();
      Complex complex2 = Complex.valueOf(20.0, (-1.8921091400297595E93));
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex2.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.divide(1.0);
      Complex complex8 = complex7.I.multiply(1203);
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex7.I.divide(complex3);
      Complex complex11 = complex1.multiply(0);
      Complex complex12 = complex0.createComplex((-1572.13075607), (-1572.13075607));
      Complex complex13 = complex1.log();
      Complex complex14 = complex12.sin();
      boolean boolean1 = complex13.isNaN();
      Complex complex15 = complex14.acos();
      Complex complex16 = complex15.INF.sin();
      Complex complex17 = complex16.ZERO.cos();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.multiply(1.6218081151910012E-71);
      Complex complex3 = complex2.I.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex2.ZERO.createComplex((-1353.7051574528289), 476.0);
      Complex complex7 = complex5.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.ZERO.asin();
      Complex complex9 = complex1.add(1.6218081151910012E-71);
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.ZERO.pow(1.6218081151910012E-71);
      Complex complex12 = complex10.ZERO.tanh();
      Complex complex13 = complex12.ZERO.conjugate();
      Complex complex14 = complex2.atan();
      Complex complex15 = complex14.add(1.6218081151910012E-71);
      Complex complex16 = complex0.subtract(Double.POSITIVE_INFINITY);
      double double0 = complex5.abs();
      Complex complex17 = complex16.createComplex(Double.NaN, 9.608060944124859E-295);
      Complex complex18 = complex17.NaN.add(complex7);
      Complex complex19 = complex17.asin();
      Complex complex20 = complex17.add(complex1);
      Complex complex21 = complex20.ZERO.cos();
      Complex complex22 = complex8.subtract((-1891.0));
      int int0 = complex17.hashCode();
      Complex complex23 = complex2.atan();
      Complex complex24 = complex9.acos();
      Complex complex25 = complex4.sin();
      Complex complex26 = complex19.createComplex((-1353.7051574528289), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.787906051540986E261, 1659.82818945652);
      Complex complex1 = complex0.ZERO.createComplex(2.787906051540986E261, (-992.181627));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.add(2.787906051540986E261);
      Complex complex4 = complex2.I.acos();
      Complex complex5 = complex3.ZERO.conjugate();
      Complex complex6 = complex3.NaN.cos();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.log();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex7.tanh();
      double double0 = complex12.abs();
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex6.cos();
      Complex complex16 = complex1.tan();
      Complex complex17 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.valueOf(0.0, (-852.61));
      Complex complex3 = complex2.NaN.pow((-852.61));
      Complex complex4 = complex3.add(complex0);
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex0.I.add(complex2);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.NaN.subtract(complex3);
      Complex complex8 = complex6.ZERO.cos();
      double double1 = complex0.ZERO.abs();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex9 = complex0.NaN.sqrt();
      Complex complex10 = complex9.NaN.tan();
      double double2 = complex0.abs();
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex5.log();
      Complex complex13 = complex12.tanh();
      int int1 = complex13.INF.hashCode();
      Complex complex14 = complex4.multiply(37);
      double double3 = complex8.ONE.abs();
      Complex complex15 = complex11.tan();
      Complex complex16 = complex8.reciprocal();
      Complex complex17 = complex11.atan();
      Complex complex18 = Complex.valueOf((double) 37, 1460.2922);
      Complex complex19 = complex5.negate();
      Complex complex20 = Complex.valueOf(0.0, 443.9198);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5660886764526367);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.INF.createComplex((-1347.47890388), (-1347.47890388));
      Complex complex4 = complex0.ZERO.createComplex(206.0, 2.5660886764526367);
      String string0 = complex0.toString();
      Complex complex5 = Complex.valueOf(2.5660886764526367);
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex4.subtract(2.5660886764526367);
      Complex complex7 = complex4.NaN.subtract((-1347.47890388));
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = complex3.NaN.multiply(complex4);
      Complex complex10 = Complex.valueOf(2.0);
      Complex complex11 = complex6.pow(2.5660886764526367);
      Complex complex12 = Complex.INF;
      boolean boolean0 = complex0.equals(complex12);
      Complex complex13 = complex4.ZERO.asin();
      Complex complex14 = complex0.pow(complex3);
      Complex complex15 = complex14.ONE.add(complex2);
      Complex complex16 = complex14.asin();
      Complex complex17 = complex16.ZERO.exp();
      Complex complex18 = complex14.NaN.reciprocal();
      Complex complex19 = complex3.subtract(complex6);
      boolean boolean1 = complex6.isNaN();
      Complex complex20 = complex17.sqrt1z();
      double double0 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1384.98));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.ZERO.multiply(1082);
      Complex complex6 = complex2.subtract(3098.72274386297);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex0.ONE.subtract(complex1);
      List<Complex> list0 = complex0.ZERO.nthRoot(1082);
      Complex complex9 = Complex.valueOf((-1738.0));
      boolean boolean0 = complex2.equals(complex1);
      Complex complex10 = complex1.asin();
      Object object0 = complex10.readResolve();
      double double0 = complex0.abs();
      Complex complex11 = complex3.add(3.3730714236579374E186);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.add(complex0);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex0.NaN.add(1.0);
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      Complex complex7 = new Complex(1.0, 1197.0755031249428);
      Complex complex8 = complex1.multiply(complex7);
      Complex complex9 = complex8.NaN.createComplex(1197.0755031249428, (-707.2860036));
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex2.asin();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex11.multiply(4109);
      boolean boolean0 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2936.37, 2936.37);
      Complex complex1 = complex0.INF.pow(2936.37);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex3.ZERO.pow(2936.37);
      Complex complex6 = complex3.NaN.log();
      Complex complex7 = complex6.INF.multiply(2936.37);
      String string0 = complex6.NaN.toString();
      double double0 = complex0.getArgument();
      double double1 = complex1.abs();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex8.NaN.asin();
      Complex complex13 = complex11.ZERO.add(Double.NaN);
      ComplexField complexField0 = complex8.getField();
      Complex complex14 = complex13.INF.multiply(Double.NaN);
      Complex complex15 = complex10.sqrt1z();
      Complex complex16 = complex13.divide(0.0);
      ComplexField complexField1 = complex1.getField();
      Complex complex17 = complex13.add(complex1);
      Complex complex18 = complex13.divide(0.6517757177352905);
      Complex complex19 = complex2.tanh();
      Complex complex20 = complex18.reciprocal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow((-261.2582434753));
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = Complex.valueOf(5.82391923137467E-8, (-1.0));
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex0.ONE.sqrt();
      Complex complex8 = complex5.I.divide(25.817070035);
      Complex complex9 = complex0.pow(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex10 = complex4.add((-481.136273519304));
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex11.INF.sinh();
      Complex complex13 = complex8.divide(complex0);
      Complex complex14 = complex2.cosh();
      Complex complex15 = complex14.INF.multiply((-261.2582434753));
      boolean boolean0 = complex12.isNaN();
      String string0 = complex13.toString();
      Complex complex16 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex3.ONE.add(complex1);
      Complex complex6 = complex2.tanh();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex2.INF.conjugate();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex1.NaN.multiply(0);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex10.ZERO.createComplex(0, 0);
      Complex complex12 = complex6.acos();
      Complex complex13 = complex12.multiply(complex3);
      Complex complex14 = complex9.INF.subtract(complex5);
      Complex complex15 = complex6.ZERO.multiply((-94.5945991247));
      Complex complex16 = complex15.ONE.multiply(complex6);
      Complex complex17 = complex15.NaN.acos();
      double double0 = complex2.getReal();
      Complex complex18 = complex6.multiply(1);
      Complex complex19 = complex3.createComplex(0.0, 0.0);
      double double1 = complex12.getArgument();
      Complex complex20 = complex15.pow(942.21674473776);
      Complex complex21 = complex20.INF.reciprocal();
      Complex complex22 = complex20.tan();
      ComplexField complexField0 = complex4.getField();
      Complex complex23 = complex8.createComplex(Double.NaN, 4662.876);
      Complex complex24 = complex9.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-236.9522486));
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.ONE.multiply((-1046));
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex7.I.multiply(complex0);
      Complex complex9 = Complex.valueOf(20.0);
      Complex complex10 = complex2.reciprocal();
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex2.pow(complex7);
      Complex complex12 = complex7.add(0.0);
      Complex complex13 = complex11.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(738.7223139436, 738.7223139436);
      Complex complex1 = complex0.multiply((-627.22145723284));
      Complex complex2 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-409.1528904));
      Complex complex1 = complex0.ZERO.add(0.0);
      double double0 = complex0.abs();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex2.ZERO.conjugate();
      Complex complex5 = complex4.I.multiply(187);
      int int0 = complex2.hashCode();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex0.ZERO.divide(409.1528904);
      Complex complex8 = complex1.multiply((-4410));
      Object object0 = complex8.INF.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex1.log();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex11.I.cosh();
      Complex complex13 = complex6.multiply(complex7);
      Complex complex14 = complex7.sqrt1z();
      Complex complex15 = complex1.add(0.0);
      Complex complex16 = complex14.sqrt();
      Complex complex17 = complex6.multiply((-4410));
      Complex complex18 = complex5.tan();
      Complex complex19 = Complex.I;
      Complex complex20 = complex8.multiply(complex19);
      Complex complex21 = complex20.ONE.tanh();
      Complex complex22 = complex18.sqrt1z();
      Complex complex23 = complex20.multiply(complex4);
      List<Complex> list0 = complex8.nthRoot(1);
      // Undeclared exception!
      complex10.nthRoot(8388608);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1772.1260433435862), (-1772.1260433435862));
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-1772.1260433435862), 516.243581359963);
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.INF.divide(complex0);
      String string0 = complex2.toString();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.I.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex9.ZERO.abs();
      Complex complex10 = complex1.pow((-1772.1260433435862));
      Complex complex11 = complex7.ONE.acos();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex12 = complex8.subtract(complex1);
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex3.tan();
      Complex complex15 = complex11.log();
      Complex complex16 = Complex.valueOf((double) 7, (double) 7);
      int int0 = complex14.hashCode();
      ComplexField complexField0 = complex4.getField();
      Complex complex17 = complex12.createComplex(Double.POSITIVE_INFINITY, (-1258.759254809));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2174.51);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = new Complex(0.008750664070248604, 0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.pow(0.008750664070248604);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex1.I.add(0.0);
      double double0 = complex3.getImaginary();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex4.sin();
      ComplexField complexField0 = complex7.getField();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ONE.add(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex0.ONE.divide(0.0);
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex4.ZERO.pow(Double.NaN);
      Complex complex6 = complex2.ONE.tan();
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.ZERO.acos();
      boolean boolean0 = complex6.isNaN();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-3393.590433553483));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ONE.tan();
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.NaN.sin();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex3.multiply(complex0);
      Complex complex7 = complex5.conjugate();
      double double2 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1425.02581404689, 1425.02581404689);
      Complex complex1 = complex0.NaN.cos();
      List<Complex> list0 = complex1.I.nthRoot(1934);
      double double0 = complex1.ONE.abs();
      double double1 = complex0.abs();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.divide(Double.NaN);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.ZERO.subtract(complex4);
      double double2 = complex5.abs();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.I.subtract((-3062.89421));
      Complex complex9 = complex6.INF.acos();
      Complex complex10 = complex9.NaN.add(1425.02581404689);
      Complex complex11 = complex10.INF.sqrt();
      double double3 = complex2.getArgument();
      Complex complex12 = complex2.INF.multiply((-1.2500675565781447E89));
      Complex complex13 = complex4.pow(6.283185307179586);
      double double4 = complex6.getImaginary();
      String string0 = complex4.toString();
      Complex complex14 = complex5.sin();
      Complex complex15 = complex7.divide(0.0);
      Complex complex16 = complex15.INF.asin();
      Complex complex17 = complex7.conjugate();
      boolean boolean0 = complex15.isInfinite();
      Complex complex18 = complex2.createComplex((-1020.043752268), 0.0);
      Complex complex19 = complex18.ONE.cosh();
      Complex complex20 = complex6.conjugate();
      Complex complex21 = Complex.valueOf((double) 1934);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 2116.586978668686;
      Complex complex0 = Complex.valueOf(2116.586978668686, (-231.3217427650276));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.NaN.pow(complex1);
      try { 
        complex1.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = Complex.valueOf((-782.8), (-749.20895));
      Complex complex6 = complex5.pow(complex0);
      double double0 = complex5.NaN.getArgument();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex7 = complex0.tanh();
      Complex complex8 = new Complex((-782.8));
      Complex complex9 = complex7.divide(Double.NaN);
      Complex complex10 = Complex.valueOf((-3775.295441), (-603.19641));
      Complex complex11 = complex10.ONE.add(20.0);
      Complex complex12 = complex6.I.subtract(complex8);
      Complex complex13 = complex7.ZERO.add((-749.20895));
      double double1 = complex0.getArgument();
      ComplexField complexField1 = complex13.getField();
      Complex complex14 = complex6.INF.add(complex2);
      Complex complex15 = complex7.NaN.cos();
      Complex complex16 = complex0.subtract(complex6);
      Complex complex17 = complex7.add(complex1);
      Complex complex18 = complex17.subtract(complex16);
      String string0 = complex16.ONE.toString();
      Complex complex19 = complex17.divide(complex16);
      Complex complex20 = complex6.pow(complex19);
      boolean boolean0 = complex2.isNaN();
      Complex complex21 = complex5.acos();
      String string1 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.NaN.cos();
      int int0 = complex0.hashCode();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      int int1 = (-1493);
      try { 
        complex3.INF.nthRoot((-1493));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,493
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.multiply(127.624723569);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.ONE.negate();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex1.INF.conjugate();
      Complex complex9 = complex5.I.pow((-2697.84));
      Complex complex10 = complex4.divide(complex5);
      Complex complex11 = complex8.I.multiply(201);
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = Complex.valueOf((-2697.84));
      Object object0 = complex12.readResolve();
      Complex complex14 = complex10.log();
      Complex complex15 = complex10.tan();
      Complex complex16 = complex12.NaN.log();
      double double0 = complex8.getImaginary();
      Complex complex17 = complex12.sqrt1z();
      Complex complex18 = complex13.atan();
      Complex complex19 = Complex.valueOf(1096.694469651331, 488.7873);
      double double1 = complex4.getReal();
      Complex complex20 = complex8.multiply(390);
      Complex complex21 = complex20.divide(complex17);
      double double2 = complex14.getArgument();
      Complex complex22 = complex0.sqrt1z();
      Complex complex23 = complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-254.76));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.I.divide(complex1);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.I.asin();
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex2.asin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.INF.conjugate();
      Complex complex9 = complex0.add(complex5);
      Complex complex10 = complex1.cos();
      Complex complex11 = complex10.ZERO.sqrt1z();
      Complex complex12 = complex10.I.add(complex5);
      Complex complex13 = complex2.acos();
      Complex complex14 = complex8.sqrt();
      Complex complex15 = complex5.pow(0.0);
      Complex complex16 = complex0.atan();
      Complex complex17 = complex13.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1664.0649006655888), 0.0);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex3.I.sinh();
      String string0 = complex3.ONE.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.ZERO.subtract((-1664.0649006655888));
      double double0 = complex3.ONE.getArgument();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.add((-1664.0649006655888));
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex11.pow(complex8);
      boolean boolean1 = complex11.isInfinite();
      Complex complex13 = Complex.valueOf(0.0, Double.NaN);
      Complex complex14 = complex13.NaN.tanh();
      Complex complex15 = complex3.atan();
      Complex complex16 = complex0.I.tan();
      Complex complex17 = complex12.createComplex(0.0, 2339.06042666555);
      Complex complex18 = complex7.cosh();
      Complex complex19 = complex16.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.1671272667059652E211, 1.1671272667059652E211);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = Complex.valueOf(1.1671272667059652E211, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex2.log();
      double double0 = complex2.getArgument();
      double double1 = complex0.getArgument();
      Complex complex8 = complex2.NaN.atan();
      Complex complex9 = complex7.cos();
      int int0 = complex9.NaN.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex7.add(4214.325748562597);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(93.0);
      Complex complex1 = Complex.valueOf((-1159.0775));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = Complex.valueOf((-1159.0775));
      Complex complex7 = complex3.pow(complex6);
      Complex complex8 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-562.46512896));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.add(20.0);
      Complex complex4 = complex0.pow(20.0);
      Complex complex5 = complex0.ZERO.multiply(20.0);
      Complex complex6 = complex0.ZERO.multiply(479);
      Complex complex7 = complex6.ZERO.pow(complex4);
      Complex complex8 = complex4.ONE.atan();
      boolean boolean0 = complex4.isInfinite();
      List<Complex> list0 = complex4.nthRoot(1137);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex1.divide(complex2);
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex1.createComplex((-2581.417448), (-2581.417448));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.subtract((-1169.796130178498));
      Complex complex2 = new Complex((-6733.87));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.ONE.reciprocal();
      List<Complex> list0 = complex2.I.nthRoot(1);
      Complex complex5 = complex3.cos();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex0.createComplex((-6733.87), (-6733.87));
      Complex complex8 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-38.08), (-752.9871438064014));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.subtract((-752.9871438064014));
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = Complex.valueOf((-752.9871438064014));
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex5.INF.subtract(complex2);
      Complex complex9 = complex3.I.sqrt1z();
      Complex complex10 = complex5.NaN.subtract(complex6);
      Complex complex11 = complex3.I.conjugate();
      double double0 = complex3.abs();
      Complex complex12 = complex5.divide(complex10);
      Complex complex13 = complex12.conjugate();
      try { 
        complex10.I.nthRoot((-1673));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,673
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-127.3), 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.add(3843.1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex5.I.divide(0.0);
      boolean boolean0 = complex3.equals(complex1);
      Complex complex9 = complex0.NaN.sin();
      Complex complex10 = complex4.multiply(1);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex5.ZERO.divide(complex8);
      Complex complex13 = complex2.pow(6.283185307179586);
      Complex complex14 = complex0.tan();
      Complex complex15 = complex14.conjugate();
      Complex complex16 = complex1.INF.createComplex(0.0, 0.0);
      int int0 = complex1.hashCode();
      Complex complex17 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.multiply(781);
      Complex complex3 = complex0.sqrt1z();
      int int0 = complex3.ONE.hashCode();
      List<Complex> list0 = complex2.ZERO.nthRoot(1);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.multiply((double) 781);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex4.ZERO.cos();
      Complex complex8 = complex4.log();
      Complex complex9 = complex8.ZERO.add(complex4);
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(675.75533712557);
      Complex complex1 = Complex.valueOf(675.75533712557);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex1.atan();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.divide((-4703.0));
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex0.ONE.conjugate();
      Complex complex9 = complex7.log();
      Complex complex10 = complex2.asin();
      Complex complex11 = Complex.valueOf((-4703.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex4.NaN.createComplex((-349.9102964048791), (-1332.337663451409));
      Complex complex8 = complex3.cos();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex7.createComplex(2.0740270614624023, (-1332.337663451409));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-3528.1876392), (-3528.1876392));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.I.subtract((-3528.1876392));
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.pow((-89.12941922543864));
      Complex complex6 = complex0.tanh();
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-826.56624406), (-2026.86164645));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.reciprocal();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex8.createComplex((-826.56624406), 9.56881327374431E-100);
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex4.subtract(complex6);
      double double0 = complex4.getArgument();
      Complex complex12 = complex2.tan();
      Object object0 = complex10.readResolve();
      boolean boolean0 = complex8.equals(object0);
      Complex complex13 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2342.1), (-2342.1));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.createComplex(1984.3582, 1984.3582);
      Complex complex4 = complex2.INF.add(complex0);
      Complex complex5 = complex0.multiply((-2247));
      Complex complex6 = complex5.INF.add((-3201.0844));
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.multiply(complex6);
      Complex complex9 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.INF.add(complex3);
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = complex7.reciprocal();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex9 = complex5.pow((double) 1);
      Complex complex10 = Complex.valueOf((double) 1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.INF.add(0.3810817003250122);
      Object object0 = new Object();
      Complex complex3 = Complex.valueOf(0.0, 0.11865071952342987);
      Complex complex4 = complex2.I.subtract(complex1);
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.I.cos();
      boolean boolean1 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ONE.sin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = Complex.valueOf((double) 1);
      Object object0 = complex2.INF.readResolve();
      Complex complex5 = complex3.add((-1.0));
      Complex complex6 = complex5.I.divide(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(995.592745);
      Complex complex4 = complex2.add(4020.56159);
      Complex complex5 = complex4.ZERO.multiply(4020.56159);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex2.subtract(1011.978);
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(722.3352, 1.0E-6);
      Complex complex1 = new Complex((-344.30112061));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = new Complex(1.0E-6, 722.3352);
      double double0 = complex4.INF.abs();
      Complex complex5 = complex0.createComplex(722.3352, 1.0E-6);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(1.0033721426962048E-8, 4823.6);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf(0.0, (-50.109207459));
      Complex complex6 = complex1.log();
      Complex complex7 = complex4.subtract(0.0);
      Complex complex8 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.log();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.I.multiply(1);
      Complex complex8 = complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = new Complex(306.1196575000118, 306.1196575000118);
      double double0 = complex0.ZERO.abs();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.I.divide(0.0);
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex5.createComplex(2636.8882585382, 1.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1197.31731));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-393.01382967), (-393.01382967));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ONE.add((-393.01382967));
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.subtract((-393.01382967));
      Complex complex4 = complex0.NaN.exp();
      String string0 = complex2.toString();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.subtract((-393.01382967));
      Complex complex7 = Complex.valueOf(1671.12289898, (-393.01382967));
      Complex complex8 = complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.valueOf(15.580596744, 15.580596744);
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.subtract(complex4);
      boolean boolean0 = complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double double0 = 6116.0;
      Complex complex0 = Complex.valueOf(6116.0, 6116.0);
      Complex complex1 = complex0.ZERO.atan();
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-151.7756996956));
      Complex complex1 = complex0.add(5.082190670014963E-262);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.NaN.divide(complex2);
      Complex complex6 = complex3.I.subtract(complex0);
      Object object0 = complex6.I.readResolve();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex6.isInfinite();
      double double0 = complex4.getArgument();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex2.divide(5.082190670014963E-262);
      Complex complex9 = complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(117.6962842);
      Complex complex1 = complex0.createComplex(1630.3, 117.6962842);
      Complex complex2 = complex1.divide(117.6962842);
      double double0 = complex0.abs();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex3.I.divide(complex0);
      List<Complex> list0 = complex5.I.nthRoot(1);
      Complex complex6 = complex2.ZERO.pow(117.6962842);
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex1.ONE.tanh();
      double double1 = complex8.I.abs();
      Complex complex9 = Complex.valueOf(1630.3);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex6.multiply(117.6962842);
      Complex complex12 = complex4.subtract(232.39);
      Complex complex13 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2358.8995178732));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.conjugate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = complex4.divide(2.0);
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex0.tanh();
      Complex complex9 = Complex.valueOf((-2358.8995178732));
      Complex complex10 = complex9.ZERO.conjugate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex11 = complex3.ONE.asin();
      Complex complex12 = complex11.I.multiply(complex5);
      int int0 = complex9.hashCode();
      Complex complex13 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1678.78, 1678.78);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.divide(1678.78);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.multiply(1678.78);
      Complex complex7 = complex2.negate();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      int int0 = (-4337);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.NaN.sqrt1z();
      try { 
        complex0.nthRoot((-4337));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,337
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = Complex.valueOf((-2499.426664), (-2499.426664));
      try { 
        complex1.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(2252.0);
      Complex complex2 = complex1.sqrt();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex1.INF.log();
      String string0 = complex0.toString();
      double double0 = complex3.getReal();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex5.multiply(37);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.createComplex((-148.5785646442), (-148.5785646442));
      Complex complex6 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex1.ZERO.subtract(0.0);
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.NaN.sqrt();
      double double1 = complex0.I.getArgument();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex1.log();
      Complex complex9 = Complex.valueOf(0.0);
      double double2 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.acos();
      double double0 = complex0.abs();
      Complex complex5 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.multiply(0.0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex1.negate();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex3.getField();
      boolean boolean1 = complex3.equals(complex1);
      Complex complex4 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.add((-617.82626511677));
      Complex complex4 = Complex.valueOf(9.501439740542955E-252, (-744.1226740835));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ZERO.subtract(655.0);
      Complex complex4 = complex0.INF.log();
      int int0 = complex1.hashCode();
      Complex complex5 = (Complex)complex1.readResolve();
      Complex complex6 = complex1.pow(0.0);
      Complex complex7 = complex1.exp();
      Complex complex8 = (Complex)complex5.readResolve();
      Complex complex9 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex1.conjugate();
      List<Complex> list0 = complex4.INF.nthRoot(7);
      double double0 = complex2.INF.abs();
      Complex complex5 = complex1.NaN.divide((-2836.36606));
      Complex complex6 = complex5.I.multiply(1);
      Complex complex7 = complex5.I.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.NaN.multiply(0.0);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex4.exp();
      Complex complex12 = complex4.ONE.add(complex3);
      Complex complex13 = complex8.multiply(complex5);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(6.283185307179586, 678.86898566514);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex2.I.atan();
      Complex complex6 = complex4.I.log();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.I.subtract(0.0);
      Complex complex10 = complex2.ZERO.multiply((-332.7379990761));
      Complex complex11 = complex4.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex12 = complex8.subtract(6.283185307179586);
      Complex complex13 = complex12.ZERO.exp();
      try { 
        complex13.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.77929222446451E85, (-2523.69622753869));
      Complex complex1 = complex0.I.add((-2523.69622753869));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex1.createComplex((-2523.69622753869), 388.4456455);
      Complex complex6 = complex0.ONE.atan();
      Complex complex7 = complex5.add(complex2);
      Complex complex8 = Complex.valueOf(9.77929222446451E85);
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex9.I.acos();
      Complex complex11 = complex5.multiply(1025);
      Complex complex12 = complex11.INF.add(complex1);
      Complex complex13 = complex11.INF.divide(complex5);
      int int0 = complex0.NaN.hashCode();
      Complex complex14 = complex5.INF.multiply(9.45732984079136E214);
      Complex complex15 = complex13.INF.reciprocal();
      Complex complex16 = complex13.ONE.tan();
      Complex complex17 = complex12.pow(3581.07825777426);
      double double0 = complex5.getImaginary();
      Complex complex18 = complex12.I.divide(0.0);
      Complex complex19 = complex11.multiply(complex0);
      Complex complex20 = complex1.tanh();
      Complex complex21 = complex20.multiply(1025);
      Complex complex22 = complex12.divide(2173.57571);
      Complex complex23 = Complex.ONE;
      Complex complex24 = complex5.pow(complex23);
      Complex complex25 = complex24.ONE.negate();
      Complex complex26 = complex6.divide(complex22);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.divide(7.928680793406766E-182);
      Complex complex4 = complex3.I.asin();
      String string0 = complex3.toString();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex3.divide(complex1);
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex10.ZERO.subtract(7.928680793406766E-182);
      Complex complex12 = complex11.NaN.add((-1.0732735585199074E280));
      Complex complex13 = complex11.ONE.reciprocal();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex14.I.multiply(4210);
      Complex complex16 = complex14.ZERO.divide((-6.905990750285027E-8));
      Complex complex17 = complex6.conjugate();
      Complex complex18 = complex17.NaN.multiply((-343));
      Complex complex19 = complex14.subtract(complex1);
      Complex complex20 = complex1.pow(complex17);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex21 = complex2.acos();
      Complex complex22 = complex20.multiply((double) (-343));
      Complex complex23 = complex22.INF.subtract((-3386.069117616));
      Complex complex24 = complex16.multiply(complex1);
      Complex complex25 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3431.362523642));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = Complex.valueOf((-2553.61569543098));
      Complex complex6 = complex0.NaN.log();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex1.negate();
      boolean boolean0 = complex6.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-2327.92), (-2327.92));
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex1.I.pow(complex2);
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex4.INF.sin();
      Complex complex8 = complex4.NaN.reciprocal();
      String string0 = complex4.I.toString();
      String string1 = complex2.INF.toString();
      Complex complex9 = complex4.ONE.asin();
      Complex complex10 = complex9.I.add(0.0);
      Complex complex11 = complex0.I.tanh();
      double double0 = complex0.getArgument();
      Complex complex12 = complex0.ZERO.subtract((-2327.92));
      Complex complex13 = complex12.NaN.sqrt1z();
      Complex complex14 = complex11.pow(complex0);
      Complex complex15 = complex11.INF.negate();
      Object object0 = complex0.readResolve();
      Complex complex16 = complex11.subtract((-2327.92));
      Complex complex17 = complex1.pow(complex0);
      Complex complex18 = complex3.log();
      Complex complex19 = complex17.acos();
      Complex complex20 = complex18.negate();
      boolean boolean0 = complex8.isInfinite();
      Complex complex21 = complex17.cos();
      Complex complex22 = complex9.sinh();
      Complex complex23 = complex14.sin();
      Complex complex24 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.ONE.sqrt1z();
      double double0 = complex1.abs();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ONE.multiply((-2367.217941442316));
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex2.add(complex5);
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex9.ONE.sqrt();
      Complex complex11 = complex7.ZERO.sinh();
      Object object0 = complex9.readResolve();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex12.subtract(complex5);
      double double1 = complex4.abs();
      int int0 = complex7.hashCode();
      Complex complex14 = complex12.cos();
      Complex complex15 = complex10.negate();
      Complex complex16 = complex14.reciprocal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(3126.701206609, 3126.701206609);
      Object object0 = complex0.INF.readResolve();
      ComplexField complexField0 = complex0.INF.getField();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.subtract(0.7853981633974483);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.I.sqrt1z();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex3.ZERO.add(complex2);
      String string1 = complex4.toString();
      int int0 = complex2.NaN.hashCode();
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex6.ZERO.divide((-2292.9171));
      Complex complex8 = complex6.ZERO.sinh();
      Complex complex9 = complex1.add((-2292.9171));
      int int1 = complex0.hashCode();
      double double1 = complex0.getArgument();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex9.pow(complex1);
      Complex complex12 = complex11.INF.subtract(complex9);
      Complex complex13 = complex0.divide((-9.83920263200211E-9));
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex2.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex17 = complex3.cos();
      Object object0 = new Object();
      boolean boolean1 = complex15.equals(object0);
  }
}
