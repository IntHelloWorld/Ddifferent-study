/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:21:25 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.subtract(Double.NaN);
      Complex complex3 = complex2.ONE.multiply(Double.NaN);
      Complex complex4 = complex0.INF.subtract(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.I.exp();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.NaN.multiply(429);
      Complex complex9 = Complex.valueOf(0.0, 1338.49663720126);
      List<Complex> list0 = complex7.nthRoot(1);
      List<Complex> list1 = complex2.nthRoot(1);
      Complex complex10 = complex4.asin();
      Complex complex11 = complex4.NaN.add(complex9);
      Complex complex12 = complex11.cos();
      Complex complex13 = Complex.I;
      int int0 = complex13.ONE.hashCode();
      Complex complex14 = complex7.exp();
      Complex complex15 = complex10.divide(complex13);
      Complex complex16 = complex10.pow((double) 429);
      Complex complex17 = complex5.multiply(415.3242);
      Complex complex18 = complex10.conjugate();
      Complex complex19 = Complex.valueOf(Double.NaN);
      Complex complex20 = Complex.valueOf(415.3242, 1.166837215423584);
      Complex complex21 = complex1.createComplex(2815.810299223472, 2815.810299223472);
      Complex complex22 = complex13.multiply(complex9);
      boolean boolean0 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2359.171), (-2359.171));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex1.NaN.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = Complex.valueOf((-2359.171));
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex8.divide(complex7);
      Complex complex11 = complex9.add((-2359.171));
      Complex complex12 = complex11.add((-2359.171));
      Complex complex13 = complex6.tan();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex15 = complex0.multiply(3.627172425759641E-305);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.ZERO.multiply((-1));
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex7 = complex0.INF.createComplex(Double.NaN, 1234.2336446455236);
      Complex complex8 = complex5.I.conjugate();
      double double1 = complex5.ZERO.getArgument();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex2.subtract(0.0);
      Complex complex11 = complex5.subtract(89.865099232501);
      Complex complex12 = complex2.conjugate();
      double double2 = complex11.getArgument();
      double double3 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = Complex.valueOf(5.475072932318336E-266);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.I.reciprocal();
      double double0 = complex5.getArgument();
      int int0 = complex0.hashCode();
      double double1 = complex5.getImaginary();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex1.createComplex(5.475072932318336E-266, (-779.2784777731681));
      double double2 = complex14.ZERO.abs();
      double double3 = complex1.getArgument();
      double double4 = complex14.ZERO.abs();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex0.ZERO.log();
      double double5 = complex10.getImaginary();
      Complex complex17 = complex14.log();
      Complex complex18 = complex15.ZERO.log();
      Complex complex19 = complex8.multiply(complex13);
      Complex complex20 = complex3.add(complex15);
      Complex complex21 = complex16.sqrt();
      boolean boolean0 = complex19.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-72.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.NaN.subtract(20.0);
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex5.NaN.pow(complex2);
      double double0 = complex2.NaN.getArgument();
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex3.hashCode();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex1.ONE.tan();
      double double1 = complex3.abs();
      Complex complex10 = complex2.I.tanh();
      double double2 = complex2.getArgument();
      Complex complex11 = complex9.NaN.divide(4.172067355757241E-18);
      Complex complex12 = complex1.pow(complex3);
      Complex complex13 = complex12.ONE.sin();
      Complex complex14 = complex0.reciprocal();
      boolean boolean1 = complex3.isInfinite();
      Complex complex15 = complex7.pow(complex3);
      Complex complex16 = complex9.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2447.628986419));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.I.pow(2.303190374523956E-168);
      Complex complex6 = complex3.subtract((-2447.628986419));
      double double0 = complex3.abs();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.I.reciprocal();
      double double1 = complex8.I.abs();
      Complex complex10 = complex0.subtract((-2447.628986419));
      String string0 = complex10.NaN.toString();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex1.ZERO.reciprocal();
      Object object0 = complex11.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex13 = complex11.multiply((-1.347867098583136E42));
      Complex complex14 = complex0.divide(2447.628986419);
      Complex complex15 = complex1.sqrt1z();
      Complex complex16 = complex7.cosh();
      double double2 = complex11.getReal();
      double double3 = complex4.abs();
      List<Complex> list0 = complex15.nthRoot(1);
      Complex complex17 = complex2.add(Double.NaN);
      Complex complex18 = complex1.negate();
      Complex complex19 = complex17.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-2060.022616));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.ZERO.sqrt1z();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex5.log();
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      int int0 = complex2.hashCode();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.acos();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex3.I.tan();
      List<Complex> list0 = complex3.ONE.nthRoot(3564);
      Complex complex6 = complex3.I.sqrt();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex2.subtract(complex3);
      Complex complex9 = complex7.cos();
      Complex complex10 = complex0.multiply(complex3);
      Complex complex11 = complex10.ZERO.createComplex(0.0, 3564);
      Complex complex12 = complex10.INF.divide(complex0);
      Complex complex13 = complex1.add((double) 3564);
      Complex complex14 = complex8.createComplex(0.0, 3564);
      Complex complex15 = complex14.tanh();
      boolean boolean0 = complex1.equals(complex15);
      Complex complex16 = complex5.log();
      Complex complex17 = complex1.asin();
      Complex complex18 = complex14.cosh();
      Complex complex19 = complex18.negate();
      Complex complex20 = complex10.cosh();
      Complex complex21 = complex3.multiply((-2.0697130057384643E245));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1486.855), 0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.pow((-2676.9199));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex2.ZERO.log();
      Complex complex7 = complex5.pow((-1486.855));
      Complex complex8 = complex5.ZERO.tan();
      Complex complex9 = complex0.divide(1.384300947189331);
      Complex complex10 = complex9.INF.add(complex2);
      boolean boolean0 = complex5.isInfinite();
      Complex complex11 = complex9.divide(1.256828068633383E-7);
      Object object0 = complex9.readResolve();
      Object object1 = complex10.readResolve();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex5.sqrt();
      Object object2 = complex12.I.readResolve();
      String string0 = complex0.I.toString();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex9.atan();
      Complex complex15 = complex2.negate();
      Complex complex16 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ZERO.asin();
      List<Complex> list0 = complex1.I.nthRoot(1);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.I.add(complex1);
      String string0 = complex1.NaN.toString();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.tan();
      Object object0 = complex4.readResolve();
      String string1 = complex1.toString();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex2.pow(0.0);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.INF.subtract(372.6579);
      int int0 = complex8.ONE.hashCode();
      double double1 = complex3.getArgument();
      Complex complex9 = complex7.acos();
      Object object1 = complex7.readResolve();
      Complex complex10 = complex3.subtract(6.283185307179586);
      Complex complex11 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(Double.NaN);
      Complex complex2 = complex0.multiply((-1042));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.I.acos();
      String string0 = complex0.INF.toString();
      Complex complex5 = Complex.valueOf(1601.69);
      Complex complex6 = Complex.valueOf(1.0, 1601.69);
      Complex complex7 = complex6.INF.pow((-1402.0));
      Complex complex8 = Complex.INF;
      Complex complex9 = new Complex(1.0, (-1402.0));
      Complex complex10 = complex8.INF.pow(complex9);
      Complex complex11 = complex7.I.pow(complex8);
      Complex complex12 = complex4.sqrt();
      ComplexField complexField0 = complex12.ZERO.getField();
      Object object0 = complex2.readResolve();
      Complex complex13 = complex4.atan();
      Complex complex14 = complex13.ZERO.log();
      double double0 = complex13.ZERO.getArgument();
      Complex complex15 = complex5.atan();
      Complex complex16 = complex15.NaN.cos();
      double double1 = complex6.getReal();
      Complex complex17 = complex1.multiply(2268);
      Complex complex18 = Complex.valueOf(1.0);
      Complex complex19 = complex10.pow(367.332312992);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(1.778528517418201E-68);
      Complex complex2 = complex1.ZERO.multiply(1);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex0.NaN.divide(complex1);
      Object object0 = complex0.NaN.readResolve();
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 411.8898662777);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.add(411.8898662777);
      Complex complex4 = complex3.NaN.divide(411.8898662777);
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex0.negate();
      ComplexField complexField0 = complex6.getField();
      double double0 = complex1.I.getArgument();
      Complex complex7 = complex0.add(complex3);
      List<Complex> list0 = complex6.INF.nthRoot(884);
      double double1 = complex0.getReal();
      Complex complex8 = Complex.valueOf((-4918.32));
      Complex complex9 = complex1.pow(complex6);
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex10.multiply(884);
      Complex complex14 = Complex.valueOf((-1337.99425), 5775.303382);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1570.0100421999);
      Complex complex0 = new Complex(0.0, (-1570.0100421999));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = Complex.valueOf((-1392.488), (-1570.0100421999));
      ComplexField complexField1 = complex2.ONE.getField();
      Complex complex4 = complex2.NaN.divide(complex3);
      // Undeclared exception!
      complex4.I.nthRoot(5927);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(602.02712, 6240.625488900726);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.valueOf(0.0, 6240.625488900726);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.INF.cosh();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex6.sinh();
      Object object0 = complex0.I.readResolve();
      Complex complex8 = complex6.subtract((-1513.9780952769113));
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex8.cos();
      Complex complex12 = complex3.add(1522.08);
      Complex complex13 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-1970.428146058);
      Complex complex0 = new Complex((-1970.428146058));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.ZERO.multiply(1);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.075769060297565E143, (-456.04));
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = complex2.INF.abs();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ZERO.sqrt1z();
      int int0 = complex5.hashCode();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.NaN.divide(complex7);
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(7.112596406315374E-272, (-350.8884487));
      Complex complex1 = complex0.ZERO.multiply(7.112596406315374E-272);
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex3.I.sqrt();
      double double1 = complex4.ONE.abs();
      Complex complex5 = complex3.I.subtract(7.112596406315374E-272);
      double double2 = complex0.abs();
      double double3 = complex0.abs();
      Complex complex6 = complex0.subtract(350.8884487);
      Complex complex7 = complex6.INF.subtract(7.112596406315374E-272);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.INF.atan();
      double double4 = complex8.getReal();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex4.isNaN();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.I.add((-3719.48018912283));
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex0.pow(770.8353983);
      double double1 = complex5.getArgument();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-611.7135151), (-611.7135151));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex3.INF.conjugate();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.subtract((-600.2015085));
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = Complex.valueOf((-600.2015085), (-345.3829401309276));
      double double0 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-896.596));
      Complex complex1 = complex0.I.reciprocal();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex2.I.add(0.0);
      String string0 = complex1.ONE.toString();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tan();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.createComplex(0.0, (-4283.38639091664));
      String string1 = complex2.toString();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex4.tan();
      Complex complex8 = Complex.valueOf(0.0, (-1.830335419852293E-147));
      Complex complex9 = complex7.pow(0.0);
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.exp();
      boolean boolean1 = complex2.isInfinite();
      Complex complex12 = complex4.sin();
      Complex complex13 = complex6.add(complex1);
      Complex complex14 = complex11.cosh();
      Complex complex15 = complex14.add(complex11);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.tan();
      int int0 = complex0.I.hashCode();
      int int1 = complex0.hashCode();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.acos();
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.getReal();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex(1608.825317017);
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = Complex.valueOf(0.0, 4.255446699237779E-11);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.sin();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex3.createComplex(0.0, 627.1);
      double double0 = complex5.INF.getArgument();
      try { 
        complex2.nthRoot((-397));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -397
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(2812.0);
      double double0 = complex1.INF.getArgument();
      Complex complex2 = Complex.valueOf((-288.60187939), 2812.0);
      Complex complex3 = complex0.createComplex((-1.0), (-1.0));
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = complex3.multiply(1362);
      Complex complex5 = Complex.valueOf((-1.0), (-288.60187939));
      Complex complex6 = complex2.add(complex5);
      double double1 = complex6.I.abs();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.multiply(complex0);
      double double2 = complex4.getArgument();
      boolean boolean1 = complex3.equals((Object) null);
      boolean boolean2 = complex2.isNaN();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex5.multiply(2617.827935038265);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex11.ZERO.negate();
      String string0 = complex11.ZERO.toString();
      Complex complex13 = complex10.reciprocal();
      Complex complex14 = complex11.ZERO.sinh();
      Complex complex15 = complex10.sin();
      Complex complex16 = complex10.I.subtract(6.283185307179586);
      Complex complex17 = complex15.log();
      Complex complex18 = complex17.ONE.sqrt1z();
      Complex complex19 = complex2.tan();
      boolean boolean3 = complex0.isNaN();
      Complex complex20 = complex19.exp();
      Complex complex21 = complex14.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex22 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(555);
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = Complex.valueOf(4.880146806045633E-170);
      Complex complex4 = complex0.add(complex3);
      double double0 = complex4.INF.abs();
      Complex complex5 = complex2.subtract(complex3);
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.NaN.add(complex5);
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.divide(1.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = complex2.add(complex3);
      boolean boolean0 = complex4.equals(complex2);
      Complex complex8 = complex3.ZERO.conjugate();
      Object object0 = complex5.readResolve();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex7.NaN.subtract(1.0);
      Complex complex11 = complex0.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex2.divide(complex7);
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex5.multiply(2788);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1267.439965), (-1267.439965));
      Complex complex1 = Complex.valueOf((-2973.8), 671.2);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tanh();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1514.46507930355), (-1743.1042386));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.exp();
      double double0 = complex0.I.getArgument();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex1.atan();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      int int0 = complex1.hashCode();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.reciprocal();
      double double0 = complex1.getArgument();
      boolean boolean1 = complex1.isInfinite();
      int int1 = complex3.I.hashCode();
      Complex complex4 = complex1.log();
      double double1 = complex3.getImaginary();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = Complex.valueOf((-2.449276515303664E-16), 2742.86142700609);
      int int2 = complex0.NaN.hashCode();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.add(1113.864);
      Complex complex3 = complex1.INF.acos();
      List<Complex> list0 = complex3.ONE.nthRoot(192);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.I.subtract(complex0);
      Complex complex8 = complex1.I.sin();
      Complex complex9 = complex8.I.log();
      int int0 = complex1.hashCode();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex8.atan();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex1.cos();
      Complex complex15 = complex8.multiply(0);
      Complex complex16 = complex15.I.sin();
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = complex14.ONE.createComplex(0, 243.8852014);
      Object object0 = complex0.readResolve();
      double double0 = complex14.getArgument();
      int int1 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(87.507982732608);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.valueOf(87.507982732608);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex3 = null;
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.I.sqrt();
      String string0 = complex3.I.toString();
      Complex complex4 = complex0.createComplex((-1175.4540275343763), (-1175.4540275343763));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex1 = complex0.multiply((-639));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2087.0);
      Complex complex2 = complex0.add(3.405124925700107E-8);
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex0.multiply((-458.52));
      Complex complex5 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ZERO.multiply(1.9151693415969248E-174);
      Complex complex2 = complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.NaN.divide(1.43695591408832E-9);
      String string0 = complex0.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4.985137671479376E-20);
      Complex complex1 = complex0.INF.sqrt();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.createComplex(6.283185307179586, 0.0);
      Complex complex3 = complex2.ONE.divide(0.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.divide(complex2);
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex4.NaN.pow(2471.1055711);
      Complex complex8 = complex2.sinh();
      Complex complex9 = Complex.valueOf((-1.0), Double.NaN);
      double double1 = complex2.getReal();
      Complex complex10 = complex2.subtract(6.283185307179586);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex5.add(1.1247213964487372E264);
      Complex complex13 = complex12.ONE.pow(complex3);
      Complex complex14 = complex12.I.add(0.0);
      Complex complex15 = Complex.valueOf(6.283185307179586, 0.0);
      double double2 = complex3.getImaginary();
      String string0 = complex2.toString();
      String string1 = complex7.toString();
      Complex complex16 = Complex.valueOf(3.913063150326019E-282, 4.985137671479376E-20);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex2.I.subtract(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex6.ONE.cosh();
      ComplexField complexField1 = complex2.getField();
      Complex complex8 = complex5.pow(complex2);
      int int0 = complex2.hashCode();
      Complex complex9 = complex2.tanh();
      Complex complex10 = new Complex(0.0, 0.0);
      boolean boolean0 = complex8.equals(complex10);
      boolean boolean1 = complex3.equals(complex4);
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex7.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-607.088369), (-607.088369));
      Complex complex1 = complex0.acos();
      String string0 = complex1.I.toString();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.ZERO.asin();
      Complex complex7 = complex5.ONE.sin();
      Complex complex8 = complex7.I.negate();
      double double0 = complex4.ZERO.getArgument();
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex5.tanh();
      int int0 = complex0.hashCode();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = Complex.valueOf((-2649.815), (-2649.815));
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.ONE.abs();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2372.2096136281243));
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.add((-1343.092636114));
      Complex complex3 = complex0.I.createComplex((-2372.2096136281243), 2238.5);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 2342.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.ZERO.divide((-1.0));
      Complex complex4 = complex2.I.multiply(209);
      Complex complex5 = Complex.valueOf(Double.NaN, (-1422.716261488));
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = Complex.I;
      Complex complex10 = complex0.ZERO.divide(complex9);
      Complex complex11 = complex7.divide(Double.NaN);
      Complex complex12 = complex1.subtract(complex0);
      double double0 = complex0.getImaginary();
      Complex complex13 = complex11.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex14 = complex10.divide(2342.0);
      Complex complex15 = complex11.cosh();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2765.3747);
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.sinh();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.valueOf(1174.9825063901, 0.0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4214.22900008));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = Complex.valueOf(9.981031744879876E-224);
      Complex complex3 = Complex.valueOf((-4214.22900008), 2655.25239);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.ZERO.sqrt1z();
      Complex complex7 = complex1.I.divide(complex4);
      Complex complex8 = complex1.add(complex0);
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex6.pow(2655.25239);
      double double0 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-568.954816));
      Complex complex1 = complex0.ZERO.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex4.ONE.log();
      String string0 = complex3.toString();
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex0.atan();
      double double0 = complex3.getReal();
      Object object0 = complex3.readResolve();
      Complex complex9 = complex0.pow(2253.2);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex7.multiply(0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.75, 0.75);
      Complex complex1 = complex0.reciprocal();
      String string0 = complex0.toString();
      Complex complex2 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1838.8), 6.243669516810509E102);
      Complex complex1 = complex0.NaN.add(6.243669516810509E102);
      Complex complex2 = complex1.ZERO.createComplex((-3481.3), (-1838.8));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.divide(6.243669516810509E102);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.I.divide(complex1);
      Complex complex5 = complex0.add((-8252.212228074544));
      Complex complex6 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-782.2));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.INF.negate();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex2.asin();
      int int0 = complex0.hashCode();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.multiply(complex6);
      Complex complex8 = complex0.add((-782.2));
      Complex complex9 = complex6.subtract((-782.2));
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex2.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-3112.2978114), (-3112.2978114));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.add(1.3555502536444713E-266);
      double double0 = complex1.getImaginary();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(572.4761574848, 1.0);
      Complex complex1 = complex0.ZERO.createComplex(1.0, 1.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.reciprocal();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex5.multiply(572.4761574848);
      int int0 = complex3.hashCode();
      Complex complex7 = complex6.createComplex(0.0, 1.3095299991573769E-143);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.subtract(2.084178924560547);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex3.INF.subtract((-20.0));
      Complex complex5 = complex2.ZERO.cos();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.ZERO.add(0.0);
      double double0 = complex2.abs();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1772.79357981);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.add(1772.79357981);
      Complex complex3 = Complex.valueOf((-3301.352664338388), 0.0);
      Complex complex4 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1453.21));
      Complex complex2 = complex0.I.tanh();
      String string0 = complex0.INF.toString();
      Complex complex3 = complex0.multiply(0);
      String string1 = complex3.toString();
      Complex complex4 = complex2.sin();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.divide(complex5);
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.subtract((-2686.3367451018));
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex1.reciprocal();
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.subtract((-2938.0));
      Complex complex4 = complex1.ZERO.sqrt1z();
      Complex complex5 = complex4.NaN.multiply(0.0);
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex0.tanh();
      int int0 = complex7.hashCode();
      Complex complex8 = complex7.ZERO.exp();
      List<Complex> list0 = complex7.ZERO.nthRoot(1306);
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex5.pow(complex2);
      boolean boolean0 = complex4.equals(complex7);
      Object object0 = complex10.readResolve();
      Complex complex11 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1749.640909));
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex0.INF.pow(complex3);
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex4.NaN.pow((-3634.9));
      Complex complex9 = complex4.I.multiply((-3634.9));
      Complex complex10 = complex7.INF.cos();
      String string0 = complex4.toString();
      Complex complex11 = complex0.atan();
      double double0 = complex5.abs();
      Complex complex12 = Complex.valueOf(Double.NaN);
      Complex complex13 = complex12.negate();
      Complex complex14 = complex9.subtract(6.283185307179586);
      Complex complex15 = complex14.NaN.log();
      int int0 = complex15.ONE.hashCode();
      Complex complex16 = complex0.divide(complex13);
      double double1 = complex7.getReal();
      boolean boolean0 = complex0.equals("(1.0, 0.0)");
      boolean boolean1 = complex16.equals(complex8);
      Complex complex17 = complex9.pow(complex5);
      Complex complex18 = complex17.log();
      Complex complex19 = complex1.sqrt();
      Complex complex20 = complex6.reciprocal();
      double double2 = complex19.getReal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.pow(1.0);
      Object object0 = complex2.readResolve();
      double double0 = complex2.abs();
      boolean boolean1 = complex1.isInfinite();
      Complex complex3 = complex1.subtract(complex0);
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.add(Double.NaN);
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex6.INF.pow(complex1);
      int int0 = complex5.INF.hashCode();
      Complex complex8 = complex1.conjugate();
      ComplexField complexField1 = complex8.NaN.getField();
      double double1 = complex3.getImaginary();
      Complex complex9 = complex8.divide(1.0);
      Complex complex10 = complex4.sinh();
      boolean boolean2 = complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.log();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.NaN.multiply(1);
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      double double1 = complex0.abs();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.ONE.subtract(complex5);
      Complex complex7 = complex4.INF.reciprocal();
      Complex complex8 = complex0.ZERO.pow(0.0);
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex9.NaN.subtract(complex1);
      List<Complex> list0 = complex9.I.nthRoot(26);
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.INF.createComplex(0.0, (-1567.89));
      Complex complex14 = complex0.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex15 = complex12.NaN.pow((-1214.9571));
      Complex complex16 = complex15.ONE.reciprocal();
      Complex complex17 = complex8.atan();
      Complex complex18 = complex0.sin();
      Complex complex19 = complex2.sinh();
      double double0 = complex2.getImaginary();
      Complex complex20 = complex4.divide(0.0);
      Complex complex21 = complex19.subtract(complex18);
      Complex complex22 = complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex23 = complex18.conjugate();
      double double1 = complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3692.3466), (-3692.3466));
      Complex complex1 = complex0.INF.sin();
      String string0 = complex1.NaN.toString();
      Complex complex2 = Complex.valueOf(3257.4255846889487);
      Complex complex3 = complex0.ZERO.subtract((-3692.3466));
      Complex complex4 = complex0.divide((-3692.3466));
      double double0 = complex0.getArgument();
      Complex complex5 = complex4.I.pow(complex1);
      double double1 = complex0.getImaginary();
      Complex complex6 = complex4.cos();
      double double2 = complex5.abs();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex3.NaN.subtract(0.0);
      Complex complex5 = complex0.createComplex(0.0, (-3710.08057396));
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex0.add(complex5);
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex1.INF.sqrt();
      Complex complex10 = complex2.atan();
      List<Complex> list0 = complex5.INF.nthRoot(1054);
      Complex complex11 = complex8.NaN.subtract((double) 1054);
      double double0 = complex1.getReal();
      Complex complex12 = complex8.pow(complex1);
      Complex complex13 = complex12.INF.negate();
      Complex complex14 = complex10.createComplex(0.0, 0.0);
      Complex complex15 = complex1.createComplex((-3710.08057396), 4.818);
      List<Complex> list1 = complex14.nthRoot(1);
      Object object0 = complex14.I.readResolve();
      Complex complex16 = complex8.createComplex((-396.8), 0.0);
      Complex complex17 = complex16.INF.multiply(complex0);
      Complex complex18 = complex6.sqrt1z();
      Complex complex19 = complex14.multiply(complex1);
      Complex complex20 = complex13.conjugate();
      Complex complex21 = complex4.sinh();
      boolean boolean0 = complex11.isInfinite();
      Complex complex22 = complex15.multiply(complex21);
      double double1 = complex20.getArgument();
      double double2 = complex15.getReal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.pow(300.23131745591843);
      double double0 = complex5.NaN.getArgument();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex5.atan();
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex5.add(0.0);
      Complex complex12 = complex11.ZERO.sin();
      Complex complex13 = complex5.subtract(complex4);
      Object object0 = complex6.INF.readResolve();
      Complex complex14 = complex7.cosh();
      Complex complex15 = complex10.sqrt1z();
      double double1 = complex6.getReal();
      Complex complex16 = complex6.multiply((-1392));
      Complex complex17 = complex4.pow((double) (-1392));
      Complex complex18 = complex8.ZERO.acos();
      Complex complex19 = Complex.valueOf((double) (-1392), 323.1284469641);
      Complex complex20 = complex0.sqrt();
      Complex complex21 = complex20.ONE.divide((-946.424568));
      Object object1 = new Object();
      boolean boolean0 = complex9.equals(object1);
      Complex complex22 = Complex.valueOf((-946.424568), (-946.424568));
      Complex complex23 = complex10.multiply((-329));
      Complex complex24 = complex21.sinh();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.multiply(1);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex0.I.divide(2762.52802);
      Complex complex5 = Complex.valueOf(2762.52802);
      Complex complex6 = complex0.multiply(644.3072549617);
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = Complex.valueOf(644.3072549617, 2762.52802);
      Complex complex12 = Complex.valueOf(3595.0);
      double double0 = complex5.abs();
      Complex complex13 = complex4.ZERO.multiply(complex10);
      Complex complex14 = Complex.valueOf(248.0427894439);
      Complex complex15 = complex14.add(complex8);
      Complex complex16 = complex12.asin();
      boolean boolean0 = complex6.isInfinite();
      Complex complex17 = complex16.reciprocal();
      boolean boolean1 = complex7.isNaN();
      Complex complex18 = complex4.divide((-5.292913162607026E-9));
      Complex complex19 = complex2.acos();
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1131.0), (-1131.0));
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.INF.subtract(Double.NaN);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.multiply((-1131.0));
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.I;
      double double1 = complex6.ONE.getArgument();
      Complex complex7 = complex6.ONE.divide((-1131.0));
      Complex complex8 = complex6.NaN.sqrt();
      Complex complex9 = complex5.add(complex6);
      Complex complex10 = complex6.createComplex(1656.82954759813, 0.0);
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex1.pow(0.0);
      int int0 = complex9.hashCode();
      Complex complex14 = complex0.pow(0.0);
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex7.add((-5.810700336));
      Complex complex17 = complex12.multiply(0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.createComplex(1684.4018742738456, 2.0);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex3.INF.atan();
      boolean boolean0 = complex3.isNaN();
      double double0 = complex4.ZERO.abs();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.ONE.add(complex2);
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex6.I.negate();
      String string0 = complex4.toString();
      String string1 = complex3.ONE.toString();
      Object object0 = complex2.readResolve();
      Complex complex10 = complex7.multiply(complex3);
      Complex complex11 = complex10.add(complex1);
      List<Complex> list0 = complex7.nthRoot(4);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2301.0));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.NaN.divide(9.92958982547828E-153);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex0.divide(0.0);
      double double0 = complex0.getReal();
      Complex complex6 = complex0.add(complex1);
      String string0 = complex2.toString();
      Complex complex7 = complex2.ONE.reciprocal();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex1.conjugate();
      int int0 = (-1);
      Complex complex10 = complex4.multiply((-1));
      Complex complex11 = Complex.valueOf(0.0);
      double double1 = complex11.ZERO.abs();
      Complex complex12 = complex9.NaN.log();
      Complex complex13 = complex4.atan();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex10.pow(complex14);
      double double2 = complex9.getArgument();
      Complex complex16 = complex0.exp();
      try { 
        complex14.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4456.85911734088, 4456.85911734088);
      Complex complex1 = complex0.ONE.tanh();
      double double0 = complex1.abs();
      Complex complex2 = complex1.ZERO.add(569.814115);
      Complex complex3 = complex2.ZERO.divide(1364.55808942327);
      double double1 = complex3.I.getArgument();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.ZERO.multiply(complex2);
      Complex complex6 = Complex.valueOf(4456.85911734088);
      String string0 = complex0.toString();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex7.ZERO.add(1.78211222185955E-7);
      List<Complex> list0 = complex2.nthRoot(1524);
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex8.ONE.negate();
      Complex complex11 = complex10.divide(Double.NaN);
      Complex complex12 = complex0.acos();
      Complex complex13 = complex12.sin();
      Object object0 = complex7.readResolve();
      Complex complex14 = complex7.pow(complex2);
      double double2 = complex6.getReal();
      String string1 = complex4.toString();
      Complex complex15 = complex3.pow(complex5);
      Complex complex16 = complex15.I.asin();
      Complex complex17 = complex7.sin();
      Complex complex18 = complex7.exp();
      Complex complex19 = complex13.atan();
  }
}
