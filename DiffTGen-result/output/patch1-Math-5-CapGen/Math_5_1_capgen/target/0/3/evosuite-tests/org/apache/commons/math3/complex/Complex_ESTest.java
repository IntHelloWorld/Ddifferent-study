/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:14:22 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6369.170255114385));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.divide((-6369.170255114385));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.exp();
      double double0 = complex1.getArgument();
      Complex complex5 = complex0.negate();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.pow((-2801.90344391451));
      Complex complex3 = new Complex((-74.424564197096), 608.6611120005575);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.I.multiply(0);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.NaN.add(complex3);
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex9.NaN.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = Complex.valueOf(608.6611120005575);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-431.894866285529));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex0.asin();
      Complex complex9 = Complex.valueOf((-431.894866285529), 640.718231);
      Complex complex10 = complex9.I.divide((-431.894866285529));
      Complex complex11 = complex10.ZERO.cosh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex12 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-5180.6967364448));
      Complex complex1 = complex0.pow((-5180.6967364448));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply((-5180.6967364448));
      String string0 = complex0.toString();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex2.tan();
      double double0 = complex4.abs();
      double double1 = complex2.getArgument();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex2.add(complex1);
      double double2 = complex0.getArgument();
      double double3 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex1.INF.createComplex(0.0, 539.479308);
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex0.add(539.479308);
      Complex complex7 = complex6.NaN.sinh();
      ComplexField complexField0 = complex6.ONE.getField();
      double double1 = complex0.getArgument();
      Complex complex8 = complex0.log();
      int int0 = complex1.hashCode();
      Complex complex9 = complex0.sqrt1z();
      double double2 = complex9.INF.getArgument();
      Complex complex10 = complex2.pow(complex8);
      Complex complex11 = complex3.asin();
      Complex complex12 = complex10.cos();
      Complex complex13 = complex9.cos();
      Complex complex14 = complex0.NaN.subtract(complex12);
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex15 = complex3.ONE.add(1864.085942);
      Complex complex16 = complex15.I.add(complex14);
      double double3 = complex10.getImaginary();
      Complex complex17 = complex3.reciprocal();
      Complex complex18 = complex13.exp();
      Complex complex19 = complex18.ZERO.cos();
      Complex complex20 = complex18.INF.add(complex11);
      Complex complex21 = complex10.reciprocal();
      Complex complex22 = Complex.valueOf((double) 1, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      double double0 = complex0.abs();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.log();
      Complex complex7 = complex5.ONE.sin();
      Complex complex8 = complex6.multiply((-2648));
      Complex complex9 = complex0.INF.cosh();
      int int1 = complex9.ONE.hashCode();
      Complex complex10 = complex5.NaN.conjugate();
      Complex complex11 = Complex.valueOf((-7.315860999413894E129), Double.POSITIVE_INFINITY);
      Object object0 = complex11.NaN.readResolve();
      Complex complex12 = complex6.ZERO.acos();
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex13 = complex6.pow(185.0);
      String string0 = complex13.INF.toString();
      Complex complex14 = complex2.acos();
      Complex complex15 = complex1.cosh();
      Complex complex16 = complex3.pow(complex4);
      Complex complex17 = complex6.cos();
      Complex complex18 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.add(3890.5396862967614);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.tan();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex1.subtract(complex4);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.I.negate();
      double double0 = complex8.abs();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex8.sinh();
      Complex complex13 = complex12.I.divide(complex2);
      Complex complex14 = complex7.divide(2463.645861212488);
      Complex complex15 = complex14.acos();
      Complex complex16 = complex1.pow(complex5);
      Complex complex17 = complex16.NaN.acos();
      boolean boolean1 = complex14.isNaN();
      Complex complex18 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex19 = complex9.multiply(2112);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1471.560632673974));
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.NaN.add((-376.205));
      Complex complex3 = complex0.ZERO.subtract(0.0);
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.ONE.acos();
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex4.NaN.log();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex9 = complex8.ZERO.divide(complex7);
      boolean boolean1 = complex4.equals(complex1);
      ComplexField complexField1 = complex1.getField();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = complex3.asin();
      Complex complex14 = Complex.valueOf((-2869.7));
      Complex complex15 = complex14.ZERO.multiply(Double.NaN);
      Complex complex16 = complex11.add(0.0);
      Complex complex17 = complex7.reciprocal();
      Complex complex18 = complex2.cosh();
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex17.multiply(2141);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2868.3546716);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.INF.subtract(1784.19);
      Complex complex5 = complex4.ZERO.cos();
      List<Complex> list0 = complex2.INF.nthRoot(886);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.acos();
      Object object0 = complex3.ONE.readResolve();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex4.log();
      boolean boolean0 = complex5.isInfinite();
      Complex complex10 = complex1.createComplex(2868.3546716, 2868.3546716);
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = complex4.NaN.subtract(complex6);
      Object object0 = complex7.ZERO.readResolve();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex3.ONE.exp();
      Complex complex10 = complex3.INF.subtract(complex0);
      ComplexField complexField0 = complex3.getField();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.NaN.add(complex9);
      Complex complex13 = complex9.acos();
      Object object1 = complex9.readResolve();
      boolean boolean0 = complex1.equals(complex7);
      Complex complex14 = complex9.createComplex(0.0, 111.314);
      Complex complex15 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ONE.log();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.I.getField();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.negate();
      double double1 = complex2.ONE.getArgument();
      Complex complex3 = complex1.conjugate();
      String string0 = complex2.toString();
      double double2 = complex0.getImaginary();
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-428.1392), 1511.37);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex3.ZERO.multiply(1795.13401855628);
      Complex complex5 = complex4.I.divide(complex3);
      Complex complex6 = Complex.valueOf((-428.1392), 1511.37);
      Complex complex7 = complex0.multiply((-2946));
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex7.multiply((-428.1392));
      double double0 = complex8.NaN.getArgument();
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex8.INF.sqrt1z();
      Complex complex11 = complex10.add(complex7);
      Complex complex12 = complex3.pow(1795.13401855628);
      Complex complex13 = Complex.valueOf((double) (-2946), 1795.13401855628);
      Complex complex14 = complex10.ZERO.add(complex3);
      try { 
        complex8.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2251.1973);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex0.createComplex(2251.1973, 2.0);
      Complex complex7 = complex0.NaN.log();
      Complex complex8 = complex1.pow((-895.05795));
      Complex complex9 = complex5.ZERO.subtract(complex1);
      Complex complex10 = complex0.I.add(783.7792161586);
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex5.multiply(complex8);
      Complex complex13 = complex8.createComplex((-895.05795), 2251.1973);
      double double0 = complex3.getImaginary();
      Complex complex14 = complex1.I.subtract(complex0);
      double double1 = complex6.getReal();
      Complex complex15 = complex13.atan();
      double double2 = complex3.getImaginary();
      boolean boolean0 = complex13.isNaN();
      Complex complex16 = complex0.add(2251.1973);
      try { 
        complex16.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3140.0));
      Complex complex1 = complex0.I.asin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex4.log();
      Complex complex6 = complex2.INF.subtract(complex3);
      int int0 = complex0.ZERO.hashCode();
      Complex complex7 = complex0.createComplex(3840.165, 3840.165);
      Complex complex8 = complex7.ZERO.exp();
      String string0 = complex7.I.toString();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.I.multiply(2013);
      Complex complex11 = complex0.pow(complex7);
      Complex complex12 = complex7.multiply(3840.165);
      ComplexField complexField1 = complex0.getField();
      Complex complex13 = complex11.reciprocal();
      Complex complex14 = complex13.divide(complex2);
      Complex complex15 = complex14.add(complex7);
      Complex complex16 = complex2.ONE.sin();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex17 = complex8.divide((double) 1);
      Complex complex18 = complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1116.1560682616348, 1116.1560682616348);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.pow(9.37721319457112E-9);
      Complex complex3 = complex0.NaN.add(1116.1560682616348);
      Complex complex4 = complex0.sin();
      double double0 = complex3.abs();
      Complex complex5 = complex3.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.NaN.acos();
      double double1 = complex5.getArgument();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex3.divide(complex11);
      Complex complex13 = complex11.sin();
      Complex complex14 = complex13.I.add(complex12);
      Complex complex15 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1034.08653353809);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(1034.08653353809, 1034.08653353809);
      double double0 = complex1.ONE.getArgument();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex0.NaN.multiply((-3758.393580311));
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.I.pow(0.0);
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex11.ZERO.add(0.6181373596191406);
      Complex complex13 = complex6.pow(complex0);
      Complex complex14 = complex2.exp();
      Complex complex15 = complex14.ONE.tan();
      Complex complex16 = complex9.log();
      Complex complex17 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = complex5.INF.multiply(0.0);
      List<Complex> list0 = complex1.nthRoot(17);
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply((-1646.3));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-3288.47));
      Complex complex2 = complex1.subtract(2.291259288787842);
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex3.I.divide(1579.279804521);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.ONE.subtract(complex5);
      Complex complex7 = complex0.createComplex((-3288.47), (-3288.47));
      String string0 = complex2.toString();
      Complex complex8 = complex3.pow(1579.279804521);
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex5.divide(919.5);
      double double0 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2982.0), (-2982.0));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(41.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.valueOf(119.724, (-3184.88146327179));
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex1.I.multiply(complex0);
      Complex complex6 = complex5.I.add(3610.34646);
      Complex complex7 = complex0.pow(complex3);
      double double0 = complex3.NaN.abs();
      Complex complex8 = complex2.I.multiply(1.2100088103262734E-7);
      Complex complex9 = complex7.pow(complex3);
      Complex complex10 = complex9.add(119.724);
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex8.divide(0.4974554181098938);
      Complex complex13 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2667.5), 2.3663015365600586);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.NaN.subtract(0.0);
      Complex complex5 = complex3.tan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex6 = complex2.ONE.multiply((-381));
      Complex complex7 = complex3.NaN.pow(2.3663015365600586);
      boolean boolean0 = complex2.isNaN();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.add(complex8);
      double double0 = complex0.getReal();
      Complex complex10 = complex6.ZERO.sqrt();
      double double1 = complex8.ONE.abs();
      Complex complex11 = Complex.valueOf(0.0, 5.538565518604807E-10);
      double double2 = complex8.getImaginary();
      ComplexField complexField1 = complex5.getField();
      Complex complex12 = complex2.subtract(complex7);
      Complex complex13 = Complex.valueOf((-726.75534));
      Object object0 = complex9.readResolve();
      Complex complex14 = complex9.divide(complex8);
      Complex complex15 = complex11.cosh();
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = Complex.valueOf(3169.67022);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-184.771384), (-2460.9276));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.NaN.exp();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.I.createComplex((-2460.9276), (-2460.9276));
      Complex complex7 = Complex.valueOf((-2460.9276), (-2460.9276));
      Complex complex8 = complex5.NaN.add(complex1);
      Complex complex9 = complex5.INF.sinh();
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex4.sin();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1952.0, 1952.0);
      Complex complex1 = Complex.valueOf(1952.0, (-113.71532579));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.subtract(1952.0);
      Complex complex5 = complex3.INF.pow(complex1);
      Complex complex6 = complex3.INF.sqrt();
      Complex complex7 = complex4.ZERO.add(1943.809364717245);
      Complex complex8 = complex3.multiply(complex1);
      ComplexField complexField0 = complex8.ONE.getField();
      Complex complex9 = complex2.subtract(complex1);
      Complex complex10 = complex9.add(complex3);
      Complex complex11 = complex8.sqrt();
      double double0 = complex2.getReal();
      Complex complex12 = complex4.tanh();
      List<Complex> list0 = complex4.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1.0568403170659571E-8), (-1.0568403170659571E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.tanh();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex1.nthRoot(1);
      int int0 = complex1.ZERO.hashCode();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ONE.pow(complex2);
      Complex complex6 = complex4.INF.pow(complex0);
      double double0 = complex4.getImaginary();
      boolean boolean0 = complex6.equals("org.apache.commons.math3.complex.Complex");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex4.ZERO.cos();
      Complex complex7 = complex6.I.subtract(complex3);
      Complex complex8 = complex1.pow(2.9279594746502846E161);
      Complex complex9 = complex3.createComplex((-159.4408201451), 0.0);
      int int1 = complex1.I.hashCode();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex7.add((-159.4408201451));
      Complex complex12 = complex7.pow(2.9279594746502846E161);
      Complex complex13 = complex11.sin();
      Complex complex14 = complex2.multiply((-159.4408201451));
      Complex complex15 = complex8.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1449.817873);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.add(complex2);
      double double1 = complex2.getArgument();
      Complex complex5 = complex4.ONE.multiply(1);
      double double2 = complex5.NaN.getArgument();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.add(complex6);
      try { 
        complex4.nthRoot((-1663));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,663
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = null;
      Complex complex3 = complex1.NaN.multiply(2673.5);
      try { 
        complex3.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex0.sqrt1z();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-4031.0), (-4031.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.add((-1101.412004896));
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.multiply(complex3);
      double double0 = complex5.abs();
      Complex complex6 = complex3.subtract((-1101.412004896));
      Complex complex7 = complex6.acos();
      Complex complex8 = complex6.multiply((-1101.412004896));
      boolean boolean0 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1138.8669493772136));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex0.I.add((-1138.8669493772136));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.pow(4025.342);
      Complex complex6 = complex5.ZERO.negate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1264.4630623245);
      Complex complex1 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.ONE.subtract(1264.4630623245);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.subtract(1264.4630623245);
      Complex complex5 = complex0.reciprocal();
      List<Complex> list0 = complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.NaN.multiply(1);
      Complex complex4 = complex2.I.createComplex(0.47158926725387573, 1974.75240024);
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex0.divide(0.47158926725387573);
      ComplexField complexField0 = complex8.ONE.getField();
      Complex complex9 = complex8.NaN.tan();
      Complex complex10 = complex4.atan();
      double double0 = complex8.abs();
      Complex complex11 = Complex.valueOf(0.47158926725387573);
      Complex complex12 = complex0.subtract(0.47158926725387573);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.add(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.add(0.7853981633974483);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.atan();
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.I.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex2.ZERO.multiply(7);
      double double0 = complex2.getArgument();
      Complex complex5 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2066.0));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      double double0 = complex3.I.abs();
      Complex complex4 = complex2.sinh();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(0);
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-702.91));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex1.INF.subtract((-702.91));
      Complex complex4 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(423);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex0.I.tanh();
      Complex complex7 = complex2.multiply(0);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.I.log();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex4.divide((double) 423);
      int int0 = complex0.ONE.hashCode();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.INF.add((double) 423);
      Complex complex13 = complex2.log();
      double double0 = complex9.getReal();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex5.asin();
      Complex complex16 = complex5.conjugate();
      Complex complex17 = Complex.valueOf(0.0, 783.077442365373);
      Complex complex18 = complex15.createComplex(37.85995189, Double.POSITIVE_INFINITY);
      Complex complex19 = complex18.cos();
      double double1 = complex16.getImaginary();
      Complex complex20 = complex16.subtract(complex14);
      Complex complex21 = complex17.tan();
      Complex complex22 = complex10.acos();
      Complex complex23 = complex13.multiply((-2091.2589325));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(942.4862880972, (-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.createComplex((-20.0), 942.4862880972);
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex0.add((-20.0));
      Complex complex6 = complex0.INF.negate();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex5.I.multiply((-1006));
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.17690416513));
      Complex complex1 = complex0.divide((-3072.3793));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(4.7978130078372714E51);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ZERO.tan();
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex2.isInfinite();
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.valueOf(8.5029538631631E-93);
      Complex complex6 = complex4.NaN.acos();
      double double0 = complex2.getReal();
      Complex complex7 = Complex.valueOf(0.0, (-790.3477814398));
      Complex complex8 = complex0.I.sqrt1z();
      Complex complex9 = complex4.multiply((-1277.03));
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex10.INF.divide(complex9);
      boolean boolean2 = complex3.equals(complex10);
      boolean boolean3 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1958.3456445));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.subtract((-892.04798));
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 67.02461223);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-370.41003785408), (-370.41003785408));
      Complex complex1 = complex0.INF.cosh();
      String string0 = complex0.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.subtract((-370.41003785408));
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.INF.createComplex((-370.41003785408), (-370.41003785408));
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex4.ZERO.sqrt();
      Complex complex8 = complex7.NaN.add((-370.41003785408));
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.pow((-1939.44398315));
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.INF.pow(complex4);
      Complex complex6 = complex3.ONE.multiply((-2996));
      Complex complex7 = Complex.valueOf(0.0, (-2246.085528));
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.I.pow(0.0);
      boolean boolean0 = complex4.isNaN();
      Complex complex11 = complex0.NaN.multiply((-2996));
      Complex complex12 = complex1.add(0.0);
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex12.NaN.cos();
      Complex complex15 = Complex.valueOf(Double.NaN, 0.0);
      double double0 = complex2.getImaginary();
      Complex complex16 = complex0.add(complex2);
      Complex complex17 = complex3.divide(1912.9170739839915);
      Complex complex18 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1649.20447));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-411.522225), (-411.522225));
      Complex complex1 = complex0.ONE.createComplex((-411.522225), (-411.522225));
      double double0 = complex1.abs();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.add(complex4);
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = (-8.124251825289188E-11);
      Complex complex0 = Complex.valueOf((-1513.5965209999677), (-8.124251825289188E-11));
      int int0 = (-2);
      Complex complex1 = complex0.ZERO.multiply((-2));
      int int1 = (-123);
      try { 
        complex1.NaN.nthRoot((-123));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -123
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract(4130.716888889834);
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.NaN.add((-2081.160489828587));
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.sin();
      List<Complex> list0 = complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1238.1), (-1238.1));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.cos();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.log();
      double double0 = complex1.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.pow(2.0);
      Complex complex3 = complex2.tanh();
      boolean boolean1 = complex2.isInfinite();
      Complex complex4 = complex0.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1.4953253269195557);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.NaN.negate();
      Object object0 = complex1.I.readResolve();
      double double0 = complex0.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.valueOf((-2297.555891458));
      Complex complex3 = complex0.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-2236.1314729878));
      String string0 = complex0.ONE.toString();
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.abs();
      Complex complex1 = complex0.asin();
      double double2 = complex0.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = Complex.valueOf((-2236.1314729878), 2236.1314729878);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.pow((-1.0));
      double double0 = complex1.getArgument();
      Complex complex4 = complex3.divide(286.5930258);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide((-854.629056718937));
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.divide((-246.4821675631192));
      try { 
        complex1.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.INF.asin();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex1.createComplex(0.0, 0.0);
      Complex complex5 = complex2.ONE.acos();
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex4.ZERO.pow(0.0);
      Complex complex8 = complex7.ZERO.subtract((-20.0));
      String string1 = complex0.toString();
      boolean boolean0 = complex4.equals(complex0);
      Complex complex9 = complex0.ZERO.negate();
      double double0 = complex1.getArgument();
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex0.tan();
      int int0 = complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cos();
      double double1 = complex1.abs();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.cosh();
      boolean boolean0 = complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.multiply((-956));
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex0.NaN.sin();
      Complex complex6 = complex5.I.multiply(0.0);
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex10.multiply((-2.990535475079021E-239));
      Complex complex12 = complex5.divide((-20.0));
      Complex complex13 = complex7.sin();
      Complex complex14 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.multiply(1520);
      double double0 = complex1.abs();
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.ZERO.sin();
      Complex complex8 = complex5.multiply(0.0);
      Complex complex9 = complex5.multiply(complex2);
      Complex complex10 = complex4.multiply(1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = Complex.valueOf(1391.615483488668, 1391.615483488668);
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex3.NaN.multiply((-479));
      Complex complex7 = complex6.INF.pow(complex1);
      Complex complex8 = complex0.subtract((-711.6752268974872));
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(3442);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.tanh();
      boolean boolean0 = complex2.equals((Object) null);
      Complex complex3 = complex1.tan();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.cos();
      double double0 = complex2.abs();
      Complex complex6 = complex3.cosh();
      String string0 = complex5.toString();
      Complex complex7 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.tanh();
      List<Complex> list0 = complex1.ONE.nthRoot(1272);
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.divide(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex0.subtract(1033.0);
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-4624.622139272));
      Complex complex2 = complex0.NaN.subtract(205.1923);
      Complex complex3 = complex2.ONE.sqrt1z();
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(175.089432912925);
      Complex complex3 = Complex.valueOf(664.4306665);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = Complex.valueOf(1322.814321048254, 175.089432912925);
      boolean boolean0 = complex0.equals(complex5);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.divide(1385.094149);
      Complex complex2 = Complex.valueOf(1385.094149, 1318.283144);
      Complex complex3 = complex1.NaN.createComplex(2.192160831263035E-8, 2.192160831263035E-8);
      double double0 = complex3.NaN.abs();
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.reciprocal();
      double double1 = complex3.getReal();
      double double2 = complex3.getArgument();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex6.I.add(complex0);
      Complex complex8 = complex0.divide((-4591.836782863));
      double double3 = complex5.getImaginary();
      Complex complex9 = complex4.log();
      List<Complex> list0 = complex9.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.divide(0.0);
      Complex complex7 = complex4.divide(complex5);
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex4.multiply((-2253.3250436));
      double double0 = complex10.INF.abs();
      Complex complex12 = complex7.sin();
      boolean boolean0 = complex10.isNaN();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex15 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.abs();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.add(2.1238058974550874E-214);
      Complex complex3 = complex0.createComplex(Double.NaN, 3639.261180775);
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1.8386917534879182E-8, 1.8386917534879182E-8);
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.INF.getArgument();
      List<Complex> list0 = complex0.ZERO.nthRoot(2414);
      Complex complex2 = complex1.ZERO.pow((-901.210184102));
      Complex complex3 = Complex.valueOf((-901.210184102), 1.8386917534879182E-8);
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex2.I.tan();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.multiply((double) 2414);
      Complex complex7 = complex6.I.tanh();
      int int0 = complex1.hashCode();
      Complex complex8 = complex2.ONE.log();
      Complex complex9 = complex1.createComplex(0.0, (-901.210184102));
      Complex complex10 = complex5.INF.multiply(complex2);
      int int1 = complex9.INF.hashCode();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex2.exp();
      double double1 = complex3.getImaginary();
      Complex complex13 = complex9.sin();
      double double2 = complex9.getArgument();
      Complex complex14 = complex4.negate();
      Complex complex15 = complex14.ONE.sqrt();
      Complex complex16 = complex14.NaN.cosh();
      double double3 = complex12.getArgument();
      Complex complex17 = complex5.subtract((-901.210184102));
      Complex complex18 = complex5.asin();
      Complex complex19 = complex12.atan();
      Complex complex20 = complex2.conjugate();
      Complex complex21 = complex19.sqrt1z();
      Complex complex22 = complex9.add(1354.66);
      Complex complex23 = complex19.pow(1.8386917534879182E-8);
      double double4 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.add(complex3);
      Complex complex5 = complex4.NaN.multiply(complex3);
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex3.I.sqrt();
      Complex complex7 = complex6.ZERO.divide((-1192.9299780077602));
      double double0 = complex0.INF.abs();
      ComplexField complexField1 = complex0.INF.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex6.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.cos();
      Complex complex10 = Complex.valueOf((-933.0));
      Complex complex11 = Complex.valueOf(331.4944389);
      Complex complex12 = complex6.sin();
      Complex complex13 = complex4.conjugate();
      double double1 = complex7.abs();
      Complex complex14 = complex5.subtract(complex4);
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex9.pow(complex5);
      double double2 = complex16.I.abs();
      double double3 = complex13.getReal();
      boolean boolean1 = complex2.isNaN();
      Complex complex17 = complex5.tanh();
      Complex complex18 = complex17.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-3055));
      Complex complex2 = complex1.I.createComplex((-1181.126), (-5.67996159922899E-5));
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.valueOf(0.0, (-775.0));
      Complex complex6 = complex5.ONE.subtract((double) (-3055));
      Complex complex7 = complex5.add(20.0);
      Complex complex8 = complex0.multiply(1609.949);
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = new Complex((-775.0));
      Complex complex11 = complex8.pow(complex10);
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex11.ZERO.cos();
      Complex complex14 = new Complex((-3055));
      Complex complex15 = complex11.multiply(complex14);
      boolean boolean0 = complex8.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-418.253271274352));
      Complex complex1 = complex0.ONE.atan();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.divide((-418.253271274352));
      Complex complex3 = complex0.multiply((-418.253271274352));
      Complex complex4 = complex1.exp();
      double double0 = complex0.abs();
      Complex complex5 = complex0.pow(418.253271274352);
      Complex complex6 = complex4.multiply((-776));
      Complex complex7 = complex3.tanh();
      Complex complex8 = Complex.valueOf((-472.9009872379));
      Complex complex9 = complex0.log();
      Complex complex10 = Complex.valueOf(0.0, (-472.9009872379));
      Complex complex11 = complex7.atan();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex5.ZERO.pow((double) (-776));
      Complex complex14 = Complex.valueOf(3146.214791576515, 0.0);
      Complex complex15 = complex5.multiply(0.0);
      Complex complex16 = complex5.tan();
      Complex complex17 = complex4.atan();
      Complex complex18 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex0.I.pow(complex1);
      boolean boolean0 = complex1.equals(complex0);
      double double0 = complex1.getReal();
      Complex complex6 = Complex.valueOf(2697.66254885753, 2976.558095);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex8.ZERO.reciprocal();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-357.25), (-357.25));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      String string0 = complex0.toString();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex5.I.divide(complex0);
      double double0 = complex4.abs();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex2.multiply((-357.25));
      Complex complex9 = complex2.exp();
      String string1 = complex2.toString();
      Complex complex10 = complex8.createComplex((-82.0637), 4.263390023436419E58);
      Complex complex11 = complex10.INF.multiply(670);
      Complex complex12 = complex6.ZERO.multiply(2972.74);
      Complex complex13 = complex0.sin();
      Complex complex14 = complex6.sqrt1z();
      Complex complex15 = complex14.I.createComplex((-280.170367262918), (-280.170367262918));
      Complex complex16 = complex13.cosh();
      String string2 = complex4.toString();
      Complex complex17 = complex1.log();
      Complex complex18 = complex3.add(0.0);
      Complex complex19 = complex11.multiply(complex7);
      Complex complex20 = complex14.sin();
      boolean boolean0 = complex3.equals((Object) null);
  }
}
