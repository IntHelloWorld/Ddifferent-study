/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:14:24 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-321.0814), 8.281321669236493E188);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.tanh();
      List<Complex> list0 = complex1.nthRoot(37);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.subtract(complex3);
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex4.ONE.add(complex0);
      Complex complex6 = complex3.I.sin();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex4.subtract(1.9873779569310022E-227);
      Complex complex8 = Complex.valueOf(1.9873779569310022E-227);
      Complex complex9 = complex8.asin();
      String string0 = complex8.toString();
      Complex complex10 = complex8.pow(complex7);
      Complex complex11 = complex10.pow(complex8);
      Complex complex12 = complex10.pow(complex5);
      boolean boolean1 = complex1.isNaN();
      Complex complex13 = complex6.sqrt();
      Complex complex14 = complex6.tan();
      double double0 = complex1.getArgument();
      Complex complex15 = complex7.add(complex14);
      Complex complex16 = complex13.divide(630.39420663);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = complex5.sqrt();
      boolean boolean0 = complex7.equals(complex8);
      Complex complex9 = complex0.createComplex(1426.1, 0.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1512.83791));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = Complex.valueOf(9.813901863427107E161, 5.073114566291778E-164);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = Complex.valueOf(5.073114566291778E-164);
      Complex complex6 = complex4.ZERO.add((-1512.83791));
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.log();
      Complex complex9 = complex6.divide(complex2);
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex7.exp();
      Complex complex12 = complex9.createComplex((-1512.83791), 9.813901863427107E161);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-446.775), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex4.INF.add(complex0);
      Object object0 = complex4.readResolve();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.ZERO.add((-446.775));
      boolean boolean0 = complex2.isInfinite();
      Object object1 = new Object();
      Complex complex8 = complex6.log();
      Complex complex9 = complex4.ONE.multiply(3360);
      List<Complex> list0 = complex8.NaN.nthRoot(607);
      boolean boolean1 = complex3.equals(object1);
      Complex complex10 = complex6.asin();
      boolean boolean2 = complex2.isInfinite();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex6.ZERO.pow(complex9);
      Complex complex13 = complex11.atan();
      Complex complex14 = complex5.cos();
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex1.acos();
      Complex complex17 = Complex.valueOf((-1581.330352622331), (-446.775));
      String string0 = complex14.toString();
      Complex complex18 = complex13.exp();
      Complex complex19 = complex14.cosh();
      Complex complex20 = complex11.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1682.174301736011), (-1682.174301736011));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.I.cosh();
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex0.cos();
      double double0 = complex3.I.abs();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex4.I.reciprocal();
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex2.ONE.subtract(complex5);
      Complex complex9 = complex3.cos();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex0.reciprocal();
      String string1 = complex7.toString();
      Complex complex13 = complex1.NaN.divide(complex2);
      double double1 = complex13.NaN.abs();
      Complex complex14 = Complex.I;
      Complex complex15 = complex11.subtract(complex14);
      Complex complex16 = complex12.atan();
      Complex complex17 = complex14.multiply(282);
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex3.subtract(complex18);
      Complex complex20 = complex19.add(complex3);
      Complex complex21 = complex5.sinh();
      Complex complex22 = Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2021.20133209609));
      Complex complex1 = new Complex((-2021.20133209609));
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.INF.add(complex0);
      List<Complex> list0 = complex3.I.nthRoot(834);
      Complex complex4 = complex0.divide(complex1);
      ComplexField complexField0 = complex2.ZERO.getField();
      double double0 = complex4.getArgument();
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = complex3.ONE.multiply(-0.0);
      Complex complex7 = complex0.divide((-2021.20133209609));
      Complex complex8 = complex7.I.subtract(complex4);
      boolean boolean0 = complex4.isNaN();
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex9.INF.createComplex((-2021.20133209609), 0.0);
      double double1 = complex3.ZERO.getArgument();
      Complex complex11 = complex1.pow(216.0);
      Complex complex12 = complex11.INF.log();
      Complex complex13 = complex3.negate();
      Complex complex14 = complex2.pow(complex3);
      Complex complex15 = complex9.reciprocal();
      double double2 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.divide(472.1);
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex1.I.add(8.208715337901827E-9);
      Complex complex6 = complex2.ZERO.atan();
      Complex complex7 = complex4.createComplex(8.208715337901827E-9, 8.208715337901827E-9);
      Complex complex8 = complex1.INF.add(complex5);
      Complex complex9 = Complex.valueOf(4603.6582, (-2783.3612949));
      Object object0 = complex2.ZERO.readResolve();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(504.067739369335);
      Complex complex1 = Complex.valueOf(1312.0, 504.067739369335);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.createComplex((-1.0), (-1.0));
      Complex complex4 = complex1.NaN.pow((-1351.8137885999));
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex1.ONE.tanh();
      Complex complex8 = complex0.createComplex((-1.0), 1312.0);
      Complex complex9 = complex6.INF.tanh();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex1.ONE.pow(complex0);
      Complex complex11 = complex10.INF.divide(complex3);
      Complex complex12 = complex11.ZERO.cosh();
      Complex complex13 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.I.log();
      int int0 = complex13.I.hashCode();
      Complex complex15 = complex2.sqrt();
      double double0 = complex4.abs();
      double double1 = complex6.abs();
      Complex complex16 = complex9.conjugate();
      Complex complex17 = Complex.valueOf(504.067739369335, 6.915856859192531);
      Complex complex18 = complex5.divide(1312.0);
      Complex complex19 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Object object1 = complex19.readResolve();
      boolean boolean0 = complex4.equals(object1);
      Complex complex20 = Complex.valueOf(1312.0);
      Complex complex21 = complex11.pow(459.8723);
      Complex complex22 = complex21.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1.4282433986663818);
      int int0 = (-3288);
      Complex complex1 = complex0.ONE.multiply((-3288));
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex0.pow(1.4282433986663818);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex2.pow(complex6);
      Complex complex9 = complex6.add(complex0);
      Complex complex10 = complex1.ONE.sqrt();
      Complex complex11 = complex9.INF.atan();
      Complex complex12 = complex3.I.sqrt1z();
      Complex complex13 = complex3.ONE.add((double) (-3288));
      Complex complex14 = complex13.I.reciprocal();
      Complex complex15 = complex14.atan();
      double double0 = complex14.ONE.abs();
      try { 
        complex6.ONE.nthRoot((-3288));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,288
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide(5221.66848974648);
      Complex complex2 = complex1.ZERO.add(20.0);
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.NaN.atan();
      int int0 = complex5.I.hashCode();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex9.ZERO.pow(complex2);
      String string1 = complex8.toString();
      Complex complex11 = complex8.divide(complex5);
      double double0 = complex0.getReal();
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.ZERO.multiply(complex4);
      Object object0 = complex12.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex6.exp();
      Complex complex16 = complex15.sinh();
      Complex complex17 = complex0.reciprocal();
      Object object1 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.sqrt1z();
      String string0 = complex2.I.toString();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex1.NaN.cosh();
      Complex complex6 = Complex.valueOf((-3782.9111), 7.667647949477605E-53);
      Complex complex7 = Complex.valueOf((-3782.9111), (-1.0));
      Complex complex8 = complex6.tan();
      Complex complex9 = complex6.multiply((-1.0));
      Complex complex10 = complex2.pow(complex7);
      double double0 = complex1.getReal();
      Complex complex11 = complex3.divide((-1.0));
      boolean boolean0 = complex11.equals(complex10);
      Complex complex12 = complex8.atan();
      Complex complex13 = complex5.createComplex(0.0, 0.0);
      Complex complex14 = Complex.valueOf((-3589.0), (-3782.9111));
      Complex complex15 = complex8.add(complex13);
      Complex complex16 = complex9.subtract(973.7555);
      Complex complex17 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2957.315670633979));
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.negate();
      ComplexField complexField0 = complex1.ONE.getField();
      List<Complex> list0 = complex1.ZERO.nthRoot(17);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.multiply((double) 17);
      Complex complex6 = complex4.ZERO.acos();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex4.INF.atan();
      Complex complex8 = complex4.I.multiply(complex5);
      Complex complex9 = Complex.valueOf((-1005.015910382809), (-2957.315670633979));
      Object object1 = complex9.ZERO.readResolve();
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex4.acos();
      Complex complex12 = complex11.NaN.atan();
      Complex complex13 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.negate();
      String string0 = complex0.toString();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.ZERO.multiply(0.0);
      Complex complex5 = complex3.I.cosh();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.pow((-20.0));
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex6.NaN.asin();
      Complex complex10 = complex9.negate();
      double double0 = complex6.getArgument();
      Complex complex11 = complex3.divide(0.0);
      Complex complex12 = complex6.asin();
      Complex complex13 = complex3.add(0.0);
      boolean boolean0 = complex4.equals(complex0);
      Complex complex14 = complex0.createComplex(0.0, 2041.7451);
      boolean boolean1 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(588.0701668646188, Double.NaN);
      Complex complex1 = Complex.valueOf(588.0701668646188, 1407.0979291330057);
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.add(complex2);
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1168.4811767927142), 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.multiply((-1457.566));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex6.I.sin();
      double double0 = complex5.I.getArgument();
      Complex complex8 = complex5.ONE.conjugate();
      Complex complex9 = complex8.I.tan();
      Complex complex10 = complex9.ZERO.createComplex((-1457.566), 0.0);
      Complex complex11 = complex3.pow((-1168.4811767927142));
      Complex complex12 = complex5.log();
      int int0 = complex12.hashCode();
      double double1 = complex4.getReal();
      Complex complex13 = complex9.I.sinh();
      ComplexField complexField0 = complex10.getField();
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-386.01295727), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.add(0.0);
      List<Complex> list0 = complex3.INF.nthRoot(1092);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex0.NaN.log();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.NaN.divide((-295.31));
      double double2 = complex1.abs();
      double double3 = complex1.abs();
      Complex complex5 = complex0.divide(2.2776327994966818E-125);
      Complex complex6 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow((-639.106670517502));
      double double0 = complex1.ZERO.getArgument();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.multiply(195);
      double double1 = complex0.abs();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex0.INF.cosh();
      Complex complex11 = complex9.negate();
      Complex complex12 = complex1.multiply(195);
      Complex complex13 = complex9.divide(complex2);
      Complex complex14 = complex13.ONE.add(complex3);
      Complex complex15 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.221340469489223E-27, 3.221340469489223E-27);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.atan();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.NaN.conjugate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = Complex.valueOf(3.221340469489223E-27, (double) 1);
      ComplexField complexField1 = complex1.INF.getField();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.ZERO.add((double) 1);
      Complex complex9 = complex8.ONE.createComplex((-4554.647074009914), (-4554.647074009914));
      Complex complex10 = Complex.valueOf((-1986.5238), (double) 1);
      Complex complex11 = complex2.tanh();
      ComplexField complexField2 = complex11.NaN.getField();
      double double0 = complex3.ZERO.getArgument();
      double double1 = complex1.abs();
      Complex complex12 = complex6.cos();
      boolean boolean1 = complex2.equals((Object) null);
      Complex complex13 = complex4.log();
      Complex complex14 = complex6.cosh();
      Complex complex15 = complex6.cos();
      Complex complex16 = complex9.divide(4470.475995545707);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex0.I.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex1.ONE.add(complex0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.ZERO.pow(complex0);
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = Complex.valueOf(1.950605015323617E-8, (double) 1);
      Complex complex10 = complex5.multiply(1);
      Complex complex11 = complex0.INF.log();
      Complex complex12 = complex0.conjugate();
      double double0 = complex10.abs();
      Complex complex13 = complex5.cos();
      Complex complex14 = complex13.ONE.divide(709.233939478639);
      String string0 = complex1.toString();
      boolean boolean0 = complex10.isNaN();
      Complex complex15 = complex2.log();
      boolean boolean1 = complex1.isNaN();
      boolean boolean2 = complex2.isNaN();
      Complex complex16 = complex0.I.exp();
      Complex complex17 = complex16.ZERO.tan();
      boolean boolean3 = complex1.isNaN();
      Complex complex18 = complex4.negate();
      boolean boolean4 = complex4.isNaN();
      int int0 = complex3.hashCode();
      Complex complex19 = Complex.valueOf((-1.0), 2814.56);
      Complex complex20 = complex18.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      String string0 = complex1.toString();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.NaN.pow((-21.9144491413));
      Complex complex3 = complex0.sqrt();
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex3.atan();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex5 = complex0.subtract((-596.758872581));
      double double0 = complex3.ZERO.abs();
      Complex complex6 = complex3.ONE.sin();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex7.I.sinh();
      int int1 = complex7.hashCode();
      Complex complex9 = complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex((-3727.9030205332), Double.POSITIVE_INFINITY);
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(4476.0, 0.0);
      Complex complex1 = Complex.valueOf(4476.0, 0.0);
      Complex complex2 = complex1.ZERO.add(1.5453160659068463E-161);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = complex5.ZERO.divide(complex3);
      Complex complex7 = complex5.pow(4476.0);
      Complex complex8 = complex0.I.add(complex1);
      Complex complex9 = complex0.I.log();
      Complex complex10 = complex9.ONE.reciprocal();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.ZERO.multiply(740);
      Complex complex13 = complex0.multiply(complex1);
      List<Complex> list0 = complex0.nthRoot(63);
      Complex complex14 = complex9.createComplex(0.0, 1.5453160659068463E-161);
      Complex complex15 = complex2.add(0.0);
      Complex complex16 = complex2.cos();
      Complex complex17 = complex2.createComplex(0.0, 0.0);
      double double0 = complex2.getArgument();
      double double1 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex0.NaN.cos();
      try { 
        complex1.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex1.divide(0.0);
      double double1 = complex0.I.getArgument();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.multiply(complex1);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.subtract(1186.4723690528065);
      try { 
        complex0.ZERO.nthRoot((-700));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -700
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2933.4097544244773);
      Complex complex1 = new Complex(527.1732858, 2933.4097544244773);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex1.I.pow(2933.4097544244773);
      Complex complex6 = complex1.NaN.reciprocal();
      Complex complex7 = complex0.divide(complex1);
      boolean boolean0 = complex5.isInfinite();
      List<Complex> list0 = complex0.nthRoot(5085);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2067.5242649), (-2067.5242649));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.valueOf((-2067.5242649));
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.multiply(complex1);
      int int0 = complex3.hashCode();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex5.multiply(74);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex2.I.pow(complex1);
      Complex complex5 = complex4.ONE.add(0.0);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      double double0 = complex6.getImaginary();
      double double1 = complex2.getReal();
      double double2 = complex3.abs();
      Complex complex9 = Complex.valueOf((-971.779481243623));
      Object object0 = complex9.readResolve();
      Complex complex10 = complex6.acos();
      double double3 = complex1.abs();
      Complex complex11 = complex0.exp();
      Complex complex12 = Complex.valueOf(1.5430806348152437, 0.0);
      boolean boolean0 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1488.2298, 2.0);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1027.262356353328));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.atan();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.INF.subtract(complex3);
      Complex complex5 = complex0.subtract(655.328);
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex5.divide((-2487.412216134833));
      String string0 = complex7.toString();
      Complex complex8 = complex0.divide(complex7);
      Complex complex9 = complex6.subtract((-2487.412216134833));
      int int1 = complex6.hashCode();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex1.multiply(1);
      double double0 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1242.91224541733));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = new Complex((-1242.91224541733), (-1242.91224541733));
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.ONE.divide(complex2);
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex0.INF.sinh();
      Complex complex11 = Complex.valueOf((-251.809029181), (-838.4724297));
      Complex complex12 = complex2.add(0.0);
      Complex complex13 = new Complex((-1.0), 0.0);
      Complex complex14 = complex4.INF.sqrt1z();
      Complex complex15 = complex12.ZERO.divide(complex13);
      Complex complex16 = complex5.ZERO.pow(complex2);
      Complex complex17 = complex5.subtract((-1242.91224541733));
      double double1 = complex5.getImaginary();
      Complex complex18 = complex3.multiply(complex2);
      Complex complex19 = complex18.negate();
      Complex complex20 = complex4.pow(complex10);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.ZERO.multiply(1542);
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1586.640191932663, (-2615.28));
      Complex complex1 = complex0.subtract(1586.640191932663);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf(1586.640191932663, 4110.66285);
      Complex complex7 = complex4.INF.subtract(complex5);
      Complex complex8 = complex6.pow(complex2);
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex6.atan();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex12.cosh();
      Complex complex14 = complex4.reciprocal();
      Complex complex15 = complex4.reciprocal();
      Complex complex16 = complex15.NaN.createComplex(4110.66285, (-4834.035114505715));
      Complex complex17 = complex11.exp();
      Complex complex18 = complex0.acos();
      ComplexField complexField0 = complex18.NaN.getField();
      Complex complex19 = complex4.cosh();
      Complex complex20 = complex0.negate();
      Complex complex21 = complex18.tan();
      Complex complex22 = Complex.INF;
      List<Complex> list0 = complex6.I.nthRoot(37);
      Complex complex23 = complex19.divide(complex22);
      Complex complex24 = complex23.NaN.divide(5.744446753652847E185);
      Object object0 = complex10.readResolve();
      Complex complex25 = complex11.tanh();
      Complex complex26 = complex16.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.INF.acos();
      List<Complex> list0 = complex0.ZERO.nthRoot(17);
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf((double) 17, (double) 17);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = Complex.valueOf(4027.8295415118);
      double double0 = complex6.abs();
      Complex complex8 = complex5.add(complex6);
      Complex complex9 = complex6.multiply(complex0);
      Complex complex10 = complex4.multiply(2763.57);
      Complex complex11 = complex0.multiply(17);
      boolean boolean0 = complex3.equals(complex4);
      Complex complex12 = complex4.tan();
      int int0 = complex0.hashCode();
      Complex complex13 = complex12.multiply(complex1);
      Complex complex14 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-9.920197743470107E-8), (-9.920197743470107E-8));
      Complex complex2 = complex0.createComplex((-1060.1), (-1060.1));
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex2.INF.sin();
      List<Complex> list0 = complex3.nthRoot(17);
      Complex complex4 = complex2.I.subtract(complex3);
      Complex complex5 = complex4.NaN.subtract(767.47999669213);
      Complex complex6 = complex5.ONE.pow(complex4);
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex7.ONE.sqrt1z();
      Complex complex10 = complex0.NaN.createComplex((-1060.1), (-2472.38723154));
      Complex complex11 = complex10.I.atan();
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex12.I.createComplex(0.0, 1.5707963267948966);
      ComplexField complexField0 = complex13.getField();
      Complex complex14 = complex0.sqrt();
      ComplexField complexField1 = complex14.ZERO.getField();
      Complex complex15 = complex14.ZERO.createComplex(0.0, (-9.920197743470107E-8));
      Complex complex16 = complex14.sqrt1z();
      double double1 = complex3.getArgument();
      Complex complex17 = complex2.tanh();
      Complex complex18 = complex16.pow(2520.39156804681);
      String string0 = complex14.toString();
      Object object0 = complex17.readResolve();
      Complex complex19 = complex18.reciprocal();
      Complex complex20 = complex0.add(Double.NaN);
      Complex complex21 = complex19.add(complex15);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.divide((-20.0));
      int int0 = complex0.NaN.hashCode();
      Complex complex4 = complex0.pow(891.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.log();
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.INF.tan();
      String string0 = complex3.INF.toString();
      Complex complex5 = complex0.createComplex((-3159.11409701566), (-1283.38790369438));
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.515817703577808E-8);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.subtract(4385.9167);
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = complex2.ZERO.createComplex(1852.538, 1227.9);
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.INF.pow(complex6);
      String string0 = complex7.I.toString();
      Complex complex8 = Complex.valueOf((-980.253852));
      String string1 = complex0.toString();
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex2.sin();
      Object object0 = complex6.readResolve();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex1.add(1065.639827);
      ComplexField complexField0 = complex1.getField();
      Complex complex13 = complex6.subtract(complex8);
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex14 = complex11.conjugate();
      Complex complex15 = complex6.reciprocal();
      Complex complex16 = complex8.conjugate();
      Complex complex17 = complex15.tanh();
      Complex complex18 = Complex.valueOf((-1295.4180320319), (-1295.4180320319));
      Complex complex19 = complex11.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.reciprocal();
      double double0 = complex2.abs();
      Complex complex3 = complex0.cos();
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex0.atan();
      String string0 = complex1.I.toString();
      Complex complex9 = complex8.INF.add(1262.51212);
      String string1 = complex0.toString();
      Complex complex10 = complex2.atan();
      Complex complex11 = Complex.valueOf(0.0);
      String string2 = complex10.NaN.toString();
      Complex complex12 = complex2.tanh();
      Complex complex13 = Complex.valueOf((-20.0), 144.2172892137);
      Complex complex14 = complex8.reciprocal();
      boolean boolean0 = complex1.isNaN();
      Complex complex15 = complex6.pow(complex4);
      Complex complex16 = complex15.acos();
      Complex complex17 = complex9.divide(complex6);
      Object object1 = complex4.readResolve();
      Complex complex18 = complex13.atan();
      Complex complex19 = Complex.valueOf((-654.4307965));
      Complex complex20 = complex16.tan();
      Complex complex21 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex22 = Complex.valueOf((-61.197538), 1262.51212);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.ZERO.sinh();
      int int0 = complex6.ONE.hashCode();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex2.subtract(complex4);
      Complex complex9 = Complex.valueOf(Double.NaN, (-538.43631489));
      Complex complex10 = complex1.sin();
      Complex complex11 = complex4.multiply((-528));
      Complex complex12 = complex11.multiply(complex10);
      Complex complex13 = complex12.I.sin();
      Complex complex14 = complex13.NaN.subtract((double) (-528));
      Complex complex15 = complex4.tanh();
      Complex complex16 = complex2.subtract(0.0);
      Complex complex17 = Complex.valueOf(0.0);
      Complex complex18 = complex11.log();
      Complex complex19 = complex6.acos();
      String string0 = complex0.toString();
      Complex complex20 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(325);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.I.negate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = Complex.valueOf((double) 1, (double) 1);
      Complex complex5 = complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3063.5998625685), (-3063.5998625685));
      Complex complex1 = Complex.valueOf((-3063.5998625685));
      Complex complex2 = complex1.add((-3063.5998625685));
      Complex complex3 = complex0.add((-3063.5998625685));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex1.I.tanh();
      Complex complex7 = complex4.pow((-3063.5998625685));
      boolean boolean0 = complex1.isNaN();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex8.ZERO.cos();
      Complex complex11 = complex3.conjugate();
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = complex0.conjugate();
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(789.2829667928, 789.2829667928);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.createComplex(Double.NaN, 0.0);
      Complex complex7 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1536.24827845368), (-1536.24827845368));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.multiply((-5.095591405025083E-281));
      Complex complex6 = complex2.pow(Double.NaN);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex6.ZERO.pow(complex2);
      Complex complex10 = complex3.sqrt();
      Object object0 = complex6.readResolve();
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex11.ZERO.sqrt();
      Complex complex13 = complex11.ZERO.tanh();
      Object object1 = complex5.readResolve();
      Complex complex14 = complex1.subtract(Double.NaN);
      Complex complex15 = complex1.multiply((-1536.24827845368));
      Complex complex16 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-7.252724942149532E-8));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.multiply((-7.252724942149532E-8));
      Complex complex4 = complex1.pow((-7.252724942149532E-8));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1.2289023836765196E-9, (-1263.441586));
      Complex complex1 = complex0.subtract(950.1788295);
      Complex complex2 = complex1.negate();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.I.createComplex(242.0, 242.0);
      Complex complex4 = complex0.cos();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.ZERO.add(2725.296765);
      Complex complex3 = complex2.NaN.sqrt();
      Object object0 = new Object();
      Complex complex4 = complex2.ZERO.subtract(2725.296765);
      Complex complex5 = complex0.I.multiply((-1));
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex2.hashCode();
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex3.pow(complex2);
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex3.reciprocal();
      String string0 = complex8.toString();
      boolean boolean1 = complex0.isInfinite();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(2.185301053838889E-9, 2.185301053838889E-9);
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.I.cos();
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex4 = complex2.divide(2.185301053838889E-9);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1317.0));
      List<Complex> list0 = complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(2456.43, 2456.43);
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex4.log();
      Complex complex8 = complex7.I.add(606.0);
      Complex complex9 = complex7.add(2456.43);
      Complex complex10 = Complex.valueOf(2456.43, 1.0);
      Complex complex11 = complex9.asin();
      Complex complex12 = complex10.ONE.pow(complex9);
      double double0 = complex7.getReal();
      Complex complex13 = complex9.tan();
      Complex complex14 = Complex.valueOf(1.0, (-1383.34669));
      Complex complex15 = complex14.INF.pow(1.0);
      Complex complex16 = complex6.subtract(Double.NaN);
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(2.179938793182373, 947.018484165852);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.subtract((-1.054736327333046E-8));
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex3.ONE.conjugate();
      Complex complex7 = complex1.NaN.tan();
      Complex complex8 = complex3.NaN.subtract((-2469.77));
      int int0 = complex3.I.hashCode();
      Complex complex9 = complex3.I.cos();
      Complex complex10 = complex0.pow(complex1);
      double double0 = complex9.getReal();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex10.divide(1.5430806348152437);
      Complex complex13 = complex0.reciprocal();
      Complex complex14 = complex13.tan();
      int int1 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex5.I.multiply((-7560));
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex9 = complex8.INF.cos();
      Complex complex10 = complex5.INF.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex6.I.subtract(0.0);
      Complex complex12 = complex0.add(complex3);
      Object object1 = complex12.ONE.readResolve();
      Complex complex13 = complex12.INF.add(complex8);
      Complex complex14 = complex6.NaN.atan();
      Complex complex15 = complex6.reciprocal();
      try { 
        complex3.nthRoot((-7560));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -7,560
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.605251622332555E-8), (-1.605251622332555E-8));
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = Complex.valueOf(4.791582240886607E-8, (-616.0141204));
      Complex complex3 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2522.1687191749), (-2522.1687191749));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(37);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.I.hashCode();
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.sqrt();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.tanh();
      double double0 = complex2.getImaginary();
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex6.ONE.add(Double.NaN);
      boolean boolean1 = complex4.isInfinite();
      String string0 = complex3.NaN.toString();
      boolean boolean2 = complex7.equals(complex6);
      double double1 = complex3.ZERO.abs();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex0.ONE.conjugate();
      double double1 = complex3.ZERO.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.multiply(4250);
      Complex complex7 = complex5.add(6.283185307179586);
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = Complex.valueOf((-20.0), 0.0);
      double double2 = complex5.getImaginary();
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex11.INF.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2648.6);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex4.I.conjugate();
      boolean boolean0 = complex0.equals(complex3);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1858.2656913), (-1858.2656913));
      String string0 = complex0.toString();
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add(2003.0);
      Complex complex2 = complex0.divide((-492.19013833837147));
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.multiply(525.6);
      Complex complex6 = complex4.add(0.0);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex2.createComplex((-492.19013833837147), 0.0);
      boolean boolean0 = complex4.equals(complex5);
      List<Complex> list0 = complex3.nthRoot(2391);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.multiply(Double.NaN);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex7.ONE.log();
      Complex complex10 = complex3.divide(0.0);
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex4.ONE.sqrt();
      Complex complex13 = complex11.pow(0.0);
      Complex complex14 = complex10.NaN.acos();
      Complex complex15 = complex4.createComplex(0.0, (-615.0));
      Complex complex16 = complex15.sqrt();
      Complex complex17 = Complex.valueOf((-615.0));
      int int0 = complex17.NaN.hashCode();
      Complex complex18 = complex17.I.sqrt1z();
      Complex complex19 = complex2.negate();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.NaN.add((-1.0));
      Complex complex2 = complex1.INF.multiply((-3165));
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex1.NaN.conjugate();
      Complex complex5 = complex0.divide((-1.0));
      Complex complex6 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex5.isNaN();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex5.cosh();
      boolean boolean2 = complex6.isNaN();
      Complex complex10 = complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex0.add(complex1);
      double double0 = complex3.getImaginary();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex0.NaN.reciprocal();
      Complex complex10 = complex3.multiply(complex1);
      Complex complex11 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.multiply((-424.7529));
      Complex complex3 = complex2.I.multiply(complex1);
      double double0 = 0.0;
      Complex complex4 = complex1.ONE.createComplex(0.0, 0.0);
      int int0 = (-1);
      try { 
        complex1.ONE.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.add((-2416.3767834992));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.multiply((-1146.44776));
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.NaN.subtract((-2416.3767834992));
      double double0 = complex6.getArgument();
      Complex complex8 = complex6.ZERO.tanh();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex8.I.subtract(complex6);
      Complex complex11 = complex5.ZERO.exp();
      Complex complex12 = complex5.subtract(complex0);
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex1.multiply(3601);
      Complex complex15 = complex11.divide(Double.NaN);
      Complex complex16 = complex2.subtract((-1895.0));
      Complex complex17 = complex8.conjugate();
      Complex complex18 = complex2.log();
      Object object0 = new Object();
      boolean boolean0 = complex10.equals(object0);
      List<Complex> list0 = complex2.nthRoot(2083);
      Complex complex19 = complex11.add(complex2);
      Complex complex20 = complex4.acos();
      Complex complex21 = complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.log();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.ZERO.createComplex(3.9036541111764032E-140, 3.9036541111764032E-140);
      Complex complex4 = complex3.I.createComplex(3.9036541111764032E-140, (-14.75870404062));
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.I.add(3.9036541111764032E-140);
      Complex complex7 = complex5.I.reciprocal();
      Complex complex8 = complex1.ZERO.cos();
      Complex complex9 = complex0.log();
      ComplexField complexField1 = complex1.getField();
      String string0 = complex8.toString();
      Complex complex10 = Complex.valueOf((-14.75870404062));
      Complex complex11 = complex9.add(complex8);
      int int0 = complex3.hashCode();
      Complex complex12 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = Complex.valueOf((-1417.0783255659717));
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.I.pow((-1417.0783255659717));
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.multiply((-1417.0783255659717));
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex8 = complex6.INF.sin();
      String string0 = complex7.ZERO.toString();
      Complex complex9 = complex6.ONE.reciprocal();
      int int0 = complex0.hashCode();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = Complex.valueOf(1202.232569777489, (double) 1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex2.NaN.sinh();
      List<Complex> list0 = complex4.ONE.nthRoot(1);
      try { 
        complex4.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(6.098975200926637E77);
      Complex complex1 = Complex.valueOf(6.098975200926637E77, 0.0);
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.I.pow((-594.0));
      Complex complex5 = complex4.ZERO.subtract((-20.0));
      Complex complex6 = complex0.sqrt();
      int int0 = complex1.ONE.hashCode();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex6.INF.subtract(complex1);
      double double0 = complex1.getArgument();
      Complex complex9 = complex6.atan();
      ComplexField complexField0 = complex6.getField();
      double double1 = complex6.getReal();
      Complex complex10 = Complex.valueOf(1527.3211945, (-932.0742724103));
      Complex complex11 = Complex.valueOf(1527.3211945, 1527.3211945);
      Complex complex12 = complex10.add(complex7);
      Complex complex13 = complex3.acos();
      ComplexField complexField1 = complex12.getField();
      Complex complex14 = complex0.cos();
      boolean boolean0 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-930.96));
      Complex complex1 = new Complex((-930.96));
      Complex complex2 = complex0.INF.divide(complex1);
      String string0 = complex2.NaN.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = complex0.conjugate();
      double double0 = complex4.getArgument();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex1.multiply((-1523));
      Complex complex3 = complex1.add(complex2);
      double double1 = complex0.INF.getArgument();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex5.ZERO.multiply(0.0);
      Complex complex7 = complex1.pow(complex4);
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex3.add(complex7);
      Object object0 = complex9.NaN.readResolve();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex1.cos();
      Complex complex12 = Complex.valueOf((-274.70544952));
      Complex complex13 = complex12.ZERO.cos();
      Complex complex14 = complex0.acos();
      double double2 = complex4.abs();
      Complex complex15 = complex0.atan();
      double double3 = complex4.ZERO.abs();
      Complex complex16 = Complex.valueOf(1.5701397280711324);
      Complex complex17 = complex16.ONE.subtract(0.0);
      boolean boolean1 = complex4.isInfinite();
      boolean boolean2 = complex11.isNaN();
      try { 
        complex10.nthRoot((-1523));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,523
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.NaN.multiply((-250));
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.NaN.toString();
      Complex complex4 = complex0.createComplex(1.1956751346588135, (-995.0));
      Complex complex5 = complex4.I.exp();
      String string1 = complex4.I.toString();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex0.NaN.tanh();
      double double0 = complex6.getArgument();
      double double1 = complex0.getReal();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.INF.cos();
      boolean boolean0 = complex2.equals(complex9);
      boolean boolean1 = complex8.isInfinite();
      Complex complex11 = complex4.log();
      Complex complex12 = complex0.multiply(Double.NaN);
      Complex complex13 = complex1.add(complex4);
      Complex complex14 = complex13.INF.conjugate();
      Complex complex15 = complex0.multiply(Double.NaN);
      double double2 = complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4560.19353921), (-4560.19353921));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.ZERO.pow(1672.348905);
      double double0 = complex4.NaN.abs();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex2.ZERO.subtract(complex0);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex9 = new Complex((-4560.19353921));
      Complex complex10 = complex9.INF.sinh();
      Complex complex11 = complex2.multiply(complex9);
      Complex complex12 = complex11.INF.add(complex9);
      boolean boolean0 = complex6.isNaN();
      Complex complex13 = complex7.exp();
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex14.conjugate();
      String string0 = complex4.toString();
      Complex complex16 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex17 = Complex.INF;
      Complex complex18 = complex12.pow(complex17);
  }
}
