/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:24:45 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.53487894162665);
      Complex complex1 = complex0.I.divide(0.0);
      double double0 = complex0.NaN.abs();
      Complex complex2 = new Complex(1.53487894162665);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.ONE.subtract(complex2);
      Complex complex5 = Complex.valueOf(410.13045788539915, 1181.8);
      double double1 = complex4.I.getArgument();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex3.NaN.acos();
      ComplexField complexField0 = complex3.getField();
      Complex complex8 = complex7.multiply(1241);
      double double2 = complex3.abs();
      Complex complex9 = complex7.sqrt1z();
      double double3 = complex1.getImaginary();
      Complex complex10 = complex2.asin();
      double double4 = complex9.getReal();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex6.multiply(2202);
      Complex complex13 = complex11.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(3.012720614547867E231, 0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.subtract(0.0);
      String string0 = complex2.I.toString();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex6 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2079.92044063), (-2.2146463048385474E8));
      Complex complex1 = complex0.add((-1448.2125889));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1522.368, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex1.multiply(1);
      Complex complex4 = complex1.multiply(1);
      Complex complex5 = complex1.INF.multiply((-4072.29666548809));
      Complex complex6 = complex5.pow(complex3);
      double double1 = complex4.getArgument();
      Complex complex7 = complex4.cosh();
      double double2 = complex4.ONE.abs();
      Complex complex8 = complex7.INF.createComplex(924.7576081503989, 924.7576081503989);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex1.subtract(complex4);
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex9.asin();
      Complex complex13 = complex0.NaN.sqrt1z();
      Complex complex14 = complex1.pow(0.0);
      Complex complex15 = Complex.valueOf(972.1674288352, (-1.0));
      Complex complex16 = complex15.I.divide(complex11);
      int int0 = complex10.hashCode();
      Complex complex17 = complex12.pow((-1.3774122905586201));
      Complex complex18 = complex10.cosh();
      Complex complex19 = complex1.multiply((-134));
      Complex complex20 = complex9.divide((-738.2562689));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-734.495866), (-734.495866));
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.ZERO.sqrt1z();
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex3.subtract(complex2);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex4.NaN.subtract(complex2);
      Object object0 = complex2.INF.readResolve();
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex4.I.add(complex5);
      Complex complex8 = complex6.I.sqrt();
      Complex complex9 = complex8.multiply(0);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex2.createComplex(2.0, (-180.17960599936));
      boolean boolean0 = complex2.isNaN();
      double double0 = complex5.abs();
      boolean boolean1 = complex9.equals(object0);
      Complex complex12 = complex6.add(complex8);
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1033.8049345366264));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = Complex.valueOf((-452.918096), (-2822.98));
      Complex complex5 = complex3.ONE.createComplex((-1033.8049345366264), (-452.918096));
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex0.divide(209.66372481906);
      Complex complex12 = complex8.ONE.acos();
      Complex complex13 = complex12.add((-452.918096));
      Complex complex14 = complex12.ZERO.cosh();
      Complex complex15 = complex0.pow(complex7);
      boolean boolean0 = complex12.isInfinite();
      Complex complex16 = complex3.asin();
      Complex complex17 = complex15.pow(complex11);
      Complex complex18 = complex1.I.sqrt1z();
      Complex complex19 = complex18.I.add(complex13);
      ComplexField complexField0 = complex16.getField();
      Complex complex20 = complex0.tan();
      Complex complex21 = complex20.NaN.sqrt();
      double double0 = complex12.getReal();
      Complex complex22 = complex15.subtract(complex7);
      Complex complex23 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2816.8493995368), (-2816.8493995368));
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1473.114115601972, 1473.114115601972);
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = Complex.valueOf((-2816.8493995368));
      List<Complex> list1 = complex0.nthRoot(3142);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.NaN.subtract(complex4);
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-1179.2997571867);
      Complex complex0 = Complex.valueOf((-1179.2997571867));
      Complex complex1 = complex0.INF.acos();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.add(complex1);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      ComplexField complexField1 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = Complex.valueOf(1400.72798, 0.0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-628.18003919819));
      Complex complex1 = new Complex((-628.18003919819), 0.11256109178066254);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ONE.add(0.0);
      Complex complex4 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex3.INF.sin();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex5.ONE.log();
      Complex complex9 = new Complex(929.4821017453323, Double.NaN);
      Complex complex10 = complex9.ONE.divide(Double.NaN);
      Complex complex11 = complex0.add(complex9);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex12 = complex9.ZERO.cosh();
      Complex complex13 = Complex.valueOf(4626.0, 0.0);
      Complex complex14 = Complex.valueOf((-1283.512572));
      Complex complex15 = complex12.ZERO.reciprocal();
      Complex complex16 = complex0.pow((-628.18003919819));
      Complex complex17 = complex3.pow(complex10);
      Complex complex18 = complex11.INF.conjugate();
      Complex complex19 = complex0.INF.createComplex((-2063.197506), (-20.0));
      Complex complex20 = complex4.multiply(1);
      ComplexField complexField1 = complex0.getField();
      Complex complex21 = complex1.subtract(complex11);
      Complex complex22 = complex16.conjugate();
      Complex complex23 = complex21.pow(complex22);
      Complex complex24 = complex22.subtract(complex20);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(929.4821017453323, Double.NaN);
      Complex complex1 = complex0.ONE.divide(Double.NaN);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = Complex.valueOf(4626.0, 0.0);
      Complex complex4 = Complex.valueOf((-1283.512572));
      Complex complex5 = complex2.ZERO.reciprocal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      List<Complex> list0 = complex1.NaN.nthRoot(193);
      Complex complex2 = complex1.ONE.add((-4262.075251866));
      Complex complex3 = complex0.subtract(1091.38834);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.ONE.createComplex(6.283185307179586, (-4262.075251866));
      Complex complex6 = complex4.I.atan();
      Complex complex7 = complex3.conjugate();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex3.log();
      Complex complex10 = Complex.valueOf((double) 193);
      Complex complex11 = complex5.multiply(complex2);
      ComplexField complexField1 = complex2.getField();
      Complex complex12 = complex2.sqrt();
      Complex complex13 = complex7.sinh();
      Complex complex14 = complex13.subtract(complex7);
      Complex complex15 = complex13.exp();
      Complex complex16 = complex5.multiply(complex9);
      Complex complex17 = complex10.sqrt1z();
      boolean boolean1 = complex11.isInfinite();
      Complex complex18 = complex1.subtract(complex10);
      ComplexField complexField2 = complex12.getField();
      Complex complex19 = complex11.reciprocal();
      Complex complex20 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(9.697418238031897E-8, Double.NaN);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.multiply(474);
      Complex complex3 = complex2.INF.add(complex0);
      double double0 = complex2.INF.getArgument();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex3.NaN.sin();
      Object object0 = complex2.ZERO.readResolve();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex6 = complex2.NaN.subtract(complex0);
      Complex complex7 = Complex.valueOf(Double.NaN, (double) 474);
      Complex complex8 = complex2.exp();
      Complex complex9 = complex0.divide(9.697418238031897E-8);
      Complex complex10 = complex9.ONE.reciprocal();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex11.INF.multiply(complex1);
      Complex complex13 = complex7.log();
      Complex complex14 = Complex.valueOf(5.672812341879918E178, 5.672812341879918E178);
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex5.conjugate();
      Complex complex17 = complex1.atan();
      Complex complex18 = complex15.INF.subtract(complex4);
      boolean boolean0 = complex13.equals(complex5);
      Complex complex19 = complex15.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.negate();
      int int0 = complex1.I.hashCode();
      int int1 = complex1.ZERO.hashCode();
      Complex complex3 = complex2.ZERO.conjugate();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex3.INF.multiply(1794.849485779212);
      Complex complex5 = complex0.NaN.divide(complex2);
      Complex complex6 = complex4.I.multiply(56);
      ComplexField complexField1 = complex3.getField();
      Complex complex7 = complex1.pow(complex0);
      Object object0 = complex1.readResolve();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex8.NaN.divide(complex7);
      double double0 = complex3.getReal();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.I.reciprocal();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex0.multiply(complex7);
      Complex complex14 = Complex.valueOf((double) 56);
      double double1 = complex7.INF.abs();
      double double2 = complex3.getImaginary();
      Complex complex15 = complex7.multiply(complex1);
      Complex complex16 = complex13.log();
      Complex complex17 = complex10.exp();
      double double3 = complex6.abs();
      Complex complex18 = Complex.valueOf((double) 56, (double) 56);
      Complex complex19 = complex10.negate();
      int int2 = complex0.hashCode();
      Complex complex20 = complex12.atan();
      int int3 = complex12.hashCode();
      Complex complex21 = complex11.conjugate();
      Complex complex22 = complex3.add((-2250.93068645666));
      Complex complex23 = complex12.divide(Double.POSITIVE_INFINITY);
      Complex complex24 = complex19.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1299.3556344);
      Complex complex1 = complex0.ONE.createComplex(1299.3556344, 1299.3556344);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.add(Double.NaN);
      Complex complex7 = complex0.ONE.acos();
      Complex complex8 = complex7.I.add((-503.80086434174));
      Complex complex9 = complex7.cos();
      Complex complex10 = complex7.INF.atan();
      Complex complex11 = complex10.NaN.sinh();
      String string0 = complex0.toString();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex12.I.sqrt();
      Complex complex14 = complex11.pow(complex12);
      Complex complex15 = complex14.ONE.log();
      Complex complex16 = complex6.negate();
      Complex complex17 = complex16.pow(complex11);
      Complex complex18 = complex14.add(0.0);
      Complex complex19 = complex10.NaN.log();
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex17.asin();
      Complex complex22 = complex21.ONE.cos();
      boolean boolean0 = complex10.isNaN();
      Complex complex23 = complex14.subtract(complex1);
      Complex complex24 = complex18.subtract(complex15);
      Complex complex25 = complex24.cos();
      double double0 = complex1.abs();
      Complex complex26 = complex15.tanh();
      ComplexField complexField0 = complex11.getField();
      Complex complex27 = complex3.tanh();
      Complex complex28 = complex12.subtract(132.879972424689);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-2842.4923696));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.exp();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.NaN.pow((-1915.0958735));
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex4.NaN.divide(complex5);
      Complex complex7 = complex5.multiply((-1915.0958735));
      Complex complex8 = complex5.INF.sqrt();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex0.pow((-1613.378079789368));
      Complex complex11 = complex3.tan();
      Complex complex12 = Complex.ONE;
      boolean boolean0 = complex4.equals(complex12);
      double double0 = complex10.getArgument();
      boolean boolean1 = complex3.equals(object0);
      double double1 = complex4.getReal();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex6.exp();
      Complex complex15 = complex2.pow(Double.NaN);
      Complex complex16 = complex12.atan();
      Complex complex17 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1299.3556344);
      Complex complex1 = complex0.ONE.createComplex(1299.3556344, 1299.3556344);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.add(Double.NaN);
      Complex complex7 = complex0.ONE.acos();
      Complex complex8 = complex7.I.add(1299.3556344);
      Complex complex9 = complex7.cos();
      Complex complex10 = complex7.INF.atan();
      Complex complex11 = complex10.NaN.sinh();
      String string0 = complex0.toString();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex12.I.sqrt();
      Complex complex14 = complex11.pow(complex12);
      Complex complex15 = complex14.ONE.log();
      Complex complex16 = complex6.negate();
      Complex complex17 = complex16.pow(complex11);
      Complex complex18 = complex14.add(0.0);
      Complex complex19 = complex10.NaN.log();
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex17.asin();
      Complex complex22 = complex21.ONE.cos();
      boolean boolean0 = complex10.isNaN();
      Complex complex23 = complex14.subtract(complex1);
      Complex complex24 = complex18.subtract(complex15);
      Complex complex25 = complex24.cos();
      Complex complex26 = complex15.tanh();
      ComplexField complexField0 = complex11.getField();
      Complex complex27 = complex3.tanh();
      Complex complex28 = complex12.subtract(132.879972424689);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(910.2128656394284);
      Complex complex1 = complex0.ZERO.add(910.2128656394284);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex2.log();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.createComplex(0.0, 2807.7);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex1.pow(complex3);
      boolean boolean0 = complex6.equals(complex3);
      boolean boolean1 = complex8.equals(complex9);
      Complex complex11 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex0.I.pow(complex1);
      Complex complex5 = complex0.pow(complex1);
      double double0 = complex4.NaN.abs();
      Complex complex6 = complex2.INF.multiply((-2712));
      Complex complex7 = complex4.reciprocal();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex8.ZERO.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex4.add(complex1);
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex10.divide(Double.NaN);
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex0.cosh();
      Complex complex15 = complex4.subtract(Double.NaN);
      double double1 = complex8.getReal();
      Complex complex16 = complex4.pow(0.0);
      Complex complex17 = complex13.ONE.subtract(complex8);
      Complex complex18 = Complex.valueOf(Double.NaN, (-1599.9));
      String string0 = complex13.toString();
      boolean boolean0 = complex9.isInfinite();
      Complex complex19 = complex2.sin();
      Complex complex20 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1270.387146891904);
      Complex complex1 = Complex.valueOf(1270.387146891904);
      Complex complex2 = Complex.valueOf(1270.387146891904, 0.0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex2.NaN.divide(0.0);
      Complex complex5 = complex4.INF.divide(0.0);
      Complex complex6 = complex0.INF.pow(complex1);
      Complex complex7 = Complex.valueOf(1270.387146891904);
      Complex complex8 = complex6.I.multiply((-115));
      double double0 = complex0.getArgument();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex6.INF.subtract((-300.5143908));
      Complex complex11 = complex1.ZERO.subtract(complex2);
      Complex complex12 = complex8.I.cos();
      double double1 = complex8.I.getArgument();
      Complex complex13 = complex9.createComplex(4113.54, (-470.3684823787339));
      String string0 = complex1.toString();
      Complex complex14 = complex8.sqrt();
      Complex complex15 = complex13.I.tan();
      Complex complex16 = complex3.sin();
      Complex complex17 = complex8.I.tan();
      Complex complex18 = complex13.sqrt1z();
      Complex complex19 = complex18.I.sqrt1z();
      Complex complex20 = complex11.conjugate();
      Complex complex21 = complex14.multiply((-115));
      double double2 = complex13.getReal();
      Complex complex22 = complex20.cosh();
      Complex complex23 = complex6.asin();
      Complex complex24 = complex15.atan();
      Complex complex25 = complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.conjugate();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex1.NaN.add((-422.9765284));
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex2.I.log();
      Complex complex6 = complex0.INF.add(complex4);
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex7.ONE.divide((-422.9765284));
      Complex complex9 = complex7.ONE.add(complex1);
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.I.log();
      int int0 = complex3.hashCode();
      try { 
        complex6.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.conjugate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.ONE.acos();
      List<Complex> list0 = complex5.INF.nthRoot(300);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.cos();
      double double0 = complex0.getReal();
      Complex complex9 = complex1.NaN.multiply(0.0);
      Complex complex10 = complex1.acos();
      Complex complex11 = complex9.I.subtract(2.100525379180908);
      Complex complex12 = complex3.createComplex(0.0, 0.0);
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex4.sqrt();
      boolean boolean1 = complex13.isNaN();
      String string0 = complex12.toString();
      Complex complex15 = complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(69.3055, 69.3055);
      Complex complex1 = Complex.valueOf((-2511.0), 69.3055);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.ONE.pow((-1499.5));
      Complex complex4 = complex3.ZERO.multiply((-443));
      double double0 = complex0.getImaginary();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex5 = complex0.ZERO.sinh();
      ComplexField complexField1 = complex5.ONE.getField();
      Complex complex6 = complex0.ZERO.multiply(complex4);
      Complex complex7 = complex3.divide((-3767.26916564));
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex7.NaN.sinh();
      List<Complex> list0 = complex9.NaN.nthRoot(677);
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex0.subtract(complex7);
      Complex complex12 = complex3.sinh();
      double double1 = complex6.I.getArgument();
      double double2 = complex12.INF.abs();
      int int0 = complex0.hashCode();
      Complex complex13 = complex3.subtract(complex6);
      Complex complex14 = complex13.negate();
      Complex complex15 = complex7.subtract(complex9);
      Complex complex16 = complex15.I.cosh();
      Complex complex17 = complex4.log();
      Complex complex18 = complex11.negate();
      Complex complex19 = complex7.divide((-3767.26916564));
      Complex complex20 = complex0.log();
      Complex complex21 = complex11.cos();
      Complex complex22 = Complex.valueOf(5.662495731848751E219, 69.3055);
      Complex complex23 = complex14.sinh();
      Complex complex24 = complex0.reciprocal();
      Complex complex25 = complex14.multiply(69.3055);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 20.0);
      Complex complex1 = complex0.INF.subtract((-20.0));
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.I.multiply(5.359568079675375E-212);
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex5.tan();
      Object object0 = complex1.NaN.readResolve();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex0.add(complex1);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex0.multiply((-1144));
      Complex complex4 = complex3.INF.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex2.NaN.add((double) (-1144));
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex3.add(complex4);
      Complex complex9 = complex2.asin();
      Complex complex10 = Complex.valueOf((double) (-1144), (double) (-1144));
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply((-284.271273684));
      Object object0 = complex1.readResolve();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2135.0), (-2135.0));
      Complex complex1 = complex0.createComplex((-2135.0), (-2135.0));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = Complex.valueOf(0.0, (-2300.1464));
      Complex complex8 = Complex.valueOf((-3114.711962), (-2300.1464));
      Complex complex9 = complex4.ONE.asin();
      Object object1 = complex8.readResolve();
      Complex complex10 = complex3.I.add(complex8);
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex2.log();
      Complex complex13 = complex12.I.acos();
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex4.exp();
      Complex complex16 = complex12.sqrt1z();
      Complex complex17 = complex8.atan();
      Complex complex18 = complex16.add(complex3);
      Complex complex19 = complex8.sinh();
      Complex complex20 = complex7.add(complex12);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1.0865453656579032E-8), (-1.0865453656579032E-8));
      Complex complex1 = complex0.I.multiply((-1572));
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex1.ZERO.multiply(complex2);
      Complex complex6 = complex4.INF.log();
      Complex complex7 = complex4.add(complex3);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex1.getImaginary();
      Complex complex8 = complex6.cos();
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.pow(2174.2);
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex4.I.negate();
      String string0 = complex3.toString();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.I.multiply(complex5);
      Complex complex9 = complex8.ZERO.add(2174.2);
      double double0 = complex6.getImaginary();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex0.pow(complex7);
      Complex complex12 = complex6.exp();
      Complex complex13 = complex5.acos();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-197.941345), 1.0657703081219677E51);
      Complex complex1 = complex0.divide((-2745.5));
      Complex complex2 = complex1.subtract(1.0657703081219677E51);
      Complex complex3 = complex0.add((-2745.5));
      double double0 = complex2.getImaginary();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.pow(1.0657703081219677E51);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.I.cos();
      double double1 = complex1.ZERO.getArgument();
      Complex complex7 = complex4.log();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex8.I.acos();
      int int0 = complex2.hashCode();
      Complex complex11 = Complex.valueOf((-3.8818805613621116E47));
      List<Complex> list0 = complex1.nthRoot(2778);
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex1.sqrt();
      Object object1 = complex1.readResolve();
      Complex complex14 = complex1.atan();
      Complex complex15 = complex3.acos();
      Complex complex16 = complex0.multiply(complex15);
      Complex complex17 = complex9.atan();
      Complex complex18 = complex17.conjugate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = Complex.valueOf(1009.53, (-467.5709675241));
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex5.I.subtract(1009.53);
      Complex complex8 = complex7.INF.pow((-467.5709675241));
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex9 = complex0.asin();
      double double0 = complex5.getReal();
      Complex complex10 = complex9.divide((-582.4920856));
      Complex complex11 = Complex.valueOf((-1680.0));
      Complex complex12 = complex9.reciprocal();
      boolean boolean0 = complex9.isNaN();
      List<Complex> list0 = complex0.nthRoot(8);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(720.4840146226, 1676.829399052012);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ONE;
      double double1 = complex0.ONE.getArgument();
      Complex complex2 = complex0.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      double double2 = complex1.getReal();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.NaN.add(1.6889383928999305E13);
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.ONE.divide(complex0);
      int int1 = complex0.INF.hashCode();
      Complex complex5 = complex3.INF.reciprocal();
      Complex complex6 = complex5.reciprocal();
      int int2 = complex2.INF.hashCode();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex0.subtract(complex3);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex7.equals(object0);
      double double0 = complex3.getArgument();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(816);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.cos();
      double double0 = complex2.getReal();
      Complex complex4 = complex0.sqrt1z();
      double double1 = complex4.getArgument();
      Complex complex5 = complex4.multiply(816);
      Complex complex6 = complex2.log();
      Complex complex7 = complex3.acos();
      List<Complex> list0 = complex7.nthRoot(816);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (-274.27879));
      Complex complex9 = complex3.negate();
      Complex complex10 = complex1.asin();
      Object object0 = complex1.readResolve();
      Complex complex11 = Complex.valueOf((-274.27879));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2023.0477877631454), (-2023.0477877631454));
      Complex complex1 = Complex.valueOf((-2023.0477877631454), (-2023.0477877631454));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-2712.890539), 0.0);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.cos();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.multiply(2274);
      Object object1 = complex0.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.pow(0.0);
      double double0 = complex5.abs();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.INF.tan();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex5.I.exp();
      Complex complex11 = complex9.NaN.tanh();
      Complex complex12 = complex9.ZERO.tan();
      ComplexField complexField0 = complex8.getField();
      Complex complex13 = complex11.cos();
      double double2 = complex4.getArgument();
      Complex complex14 = complex6.negate();
      double double3 = complex14.getReal();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex15.sqrt();
      int int0 = complex15.I.hashCode();
      double double4 = complex14.getArgument();
      Complex complex17 = complex12.subtract(Double.NaN);
      boolean boolean0 = complex17.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.542840888268955E-69);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1449.197328227), 0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.NaN.createComplex(0.0, (-1431.01458140057));
      Complex complex3 = complex2.INF.divide(1316.6);
      Complex complex4 = complex0.acos();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex5.ZERO.sinh();
      ComplexField complexField1 = complex4.INF.getField();
      ComplexField complexField2 = complex0.getField();
      Complex complex7 = complex2.negate();
      double double0 = complex1.getReal();
      Complex complex8 = new Complex((-1349.41), 0.0);
      Complex complex9 = complex1.divide(complex8);
      Complex complex10 = complex0.divide(complex3);
      Object object0 = complex9.readResolve();
      String string0 = complex0.toString();
      Complex complex11 = complex2.pow((-983.42019989));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex0.INF.multiply((-2834.8710692404525));
      double double0 = complex0.getImaginary();
      Complex complex4 = Complex.valueOf((-2834.8710692404525), 1337.4990792227602);
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex4.ZERO.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex7.ZERO.reciprocal();
      Complex complex9 = complex7.reciprocal();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex6.toString();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.divide(1284.848861);
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex4.I.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1275.0, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add((-2207.745422843222));
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.multiply(complex2);
      double double1 = complex3.INF.getArgument();
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.NaN.conjugate();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.subtract(complex2);
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex4.ONE.divide(complex2);
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex4.log();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex1.pow((-171.6443015422));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex2.I.divide(complex1);
      double double0 = complex1.ONE.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      String string0 = complex2.NaN.toString();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.multiply(complex3);
      double double2 = complex0.getImaginary();
      double double3 = complex0.getArgument();
      Complex complex6 = complex1.ONE.reciprocal();
      Complex complex7 = Complex.valueOf(1880.60040932, Double.NaN);
      Complex complex8 = Complex.valueOf(Double.NaN, 2.0);
      Complex complex9 = complex5.cos();
      Complex complex10 = complex9.NaN.subtract(complex0);
      double double4 = complex10.INF.getArgument();
      Complex complex11 = complex9.multiply(1880.60040932);
      String string1 = complex6.toString();
      boolean boolean0 = complex10.isNaN();
      Complex complex12 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1883.91503853409, 0.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.multiply(0.0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.I.multiply((-199));
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex2.multiply(complex4);
      try { 
        complex2.nthRoot((-199));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -199
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.createComplex(0.0, (-2448.4335278));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex4.INF.subtract(complex0);
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = complex3.cos();
      Complex complex10 = Complex.valueOf(2.1077440662171152E-207);
      Complex complex11 = complex4.divide(complex5);
      Complex complex12 = complex11.NaN.multiply((-2448.4335278));
      Complex complex13 = complex12.atan();
      Complex complex14 = complex11.I.add(6.283185307179586);
      Complex complex15 = complex3.subtract(complex7);
      Complex complex16 = complex6.add(complex5);
      Complex complex17 = complex16.subtract((-2448.4335278));
      double double0 = complex3.abs();
      Complex complex18 = complex17.sqrt();
      String string0 = complex7.toString();
      Complex complex19 = complex1.tanh();
      Complex complex20 = complex19.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.901467289560222E131);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ZERO.negate();
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex2.I.negate();
      int int1 = complex0.hashCode();
      Complex complex4 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-4015.403), (-4015.403));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ONE.divide(1155.12147);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex2.conjugate();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex1.NaN.pow(681.04);
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex3.I.divide(complex0);
      String string1 = complex1.ZERO.toString();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(2910.0, 2910.0);
      Complex complex1 = complex0.ONE.subtract(5.543727690168612E-237);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf(1.5397815704345703);
      Complex complex5 = complex0.INF.asin();
      Complex complex6 = complex5.ZERO.subtract(0.0);
      Complex complex7 = Complex.valueOf((-64.0), 5.543727690168612E-237);
      Complex complex8 = Complex.valueOf(1.5397815704345703);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex7.I.tanh();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex2.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.INF.atan();
      double double0 = complex0.getImaginary();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(1858.73975345411);
      Complex complex2 = complex0.subtract(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.pow((-2073.01));
      Complex complex5 = Complex.valueOf((-1.1487079818684332E-8), 1243.6);
      Complex complex6 = complex4.I.divide(complex5);
      Complex complex7 = complex2.divide(complex0);
      Complex complex8 = complex1.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-4630.3398360714));
      Complex complex1 = new Complex((-4630.3398360714));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      double double0 = complex0.abs();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex3.divide(complex4);
      Complex complex7 = complex6.multiply((-4030));
      try { 
        complex0.nthRoot((-2937));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,937
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1553.95941), (-1553.95941));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex4.I.conjugate();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex3.pow(4.2634204358490415E-9);
      Complex complex8 = complex0.multiply(1710.89309683);
      Complex complex9 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.tanh();
      double double0 = complex3.abs();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex5.ZERO.subtract(complex4);
      Complex complex8 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(481.1515, (-1160.2643240442383));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.I.subtract(complex2);
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(2.7156286239624023, (-1551.0));
      Complex complex1 = complex0.createComplex(2.7156286239624023, 2.7156286239624023);
      Complex complex2 = complex0.sqrt();
      Object object0 = complex2.readResolve();
      Object object1 = complex2.readResolve();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.createComplex((-1551.0), 2.7156286239624023);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = Complex.valueOf(1.3057724436551892E-9);
      Complex complex7 = complex5.multiply(2352.28728727064);
      Complex complex8 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(396.485414528);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.I.multiply((-453));
      Complex complex4 = complex1.INF.pow(2.016113758087158);
      Complex complex5 = complex0.divide(2.016113758087158);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.INF.pow(2.016113758087158);
      Complex complex8 = Complex.valueOf(6.283185307179586);
      Complex complex9 = complex0.ONE.atan();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex10.INF.negate();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex2.acos();
      String string0 = complex5.toString();
      boolean boolean0 = complex13.equals(complex2);
      Complex complex14 = complex2.add((double) (-453));
      Complex complex15 = complex7.cos();
      Complex complex16 = complex2.cosh();
      Complex complex17 = complex16.createComplex(2.016113758087158, 2.016113758087158);
      double double0 = complex2.abs();
      Complex complex18 = complex6.createComplex(396.485414528, (-453));
      Complex complex19 = complex10.sinh();
      int int0 = complex19.hashCode();
      Complex complex20 = complex18.sqrt1z();
      int int1 = complex0.hashCode();
      Complex complex21 = complex13.pow(complex6);
      Complex complex22 = complex11.multiply((-453));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.ZERO.exp();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.log();
      double double1 = complex1.getArgument();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex4.add((-2.298302779758532E-9));
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex2.pow((-2.356194490192345));
      Complex complex10 = complex7.pow((-2.298302779758532E-9));
      double double2 = complex9.getImaginary();
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.subtract((-3754.38588496284));
      Complex complex2 = complex0.ONE.negate();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-3104));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(698.6304615816842);
      String string0 = complex0.toString();
      Complex complex2 = Complex.I;
      List<Complex> list0 = complex2.NaN.nthRoot(37);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1004.29));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((-1004.29), (-1004.29));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.NaN.subtract(complex6);
      Complex complex8 = complex0.ZERO.sqrt();
      int int0 = complex0.hashCode();
      int int1 = complex0.hashCode();
      int int2 = complex0.hashCode();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex3.subtract((-2627.4135796449));
      boolean boolean0 = complex0.equals(complex10);
      boolean boolean1 = complex10.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(1.0);
      Complex complex2 = complex0.INF.sqrt1z();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      double double1 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1500.64874896286, 9.306541421999056E-216);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf(1500.64874896286, 9.306541421999056E-216);
      Complex complex3 = complex2.NaN.createComplex((-3287.86206397969), 1042.211);
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex1.sqrt();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-405.722073));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.6228630542755127);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.NaN.pow(0.6228630542755127);
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(3.7920054509691455E-261, 0.0);
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2884.0));
      Complex complex1 = complex0.ZERO.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex2.I.divide((-2884.0));
      Complex complex6 = complex5.ZERO.divide((-2884.0));
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.createComplex((-2884.0), (-2884.0));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1797.231);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(1797.231, 0.0);
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex0.pow(1797.231);
      Complex complex6 = complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1455.4008840652);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ONE.multiply(1455.4008840652);
      Complex complex2 = complex0.atan();
      List<Complex> list0 = complex2.NaN.nthRoot(594);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.multiply(594);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(937.76, 937.76);
      Complex complex1 = complex0.tan();
      double double0 = complex1.INF.getArgument();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(10);
      Complex complex2 = complex0.ONE.createComplex((-2044.7987847270408), 510.76619955);
      Complex complex3 = complex0.pow(complex2);
      int int0 = complex3.hashCode();
      String string0 = complex0.NaN.toString();
      Complex complex4 = complex0.acos();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex4.log();
      String string1 = complex2.toString();
      Complex complex6 = complex0.ZERO.sinh();
      Complex complex7 = complex5.ONE.createComplex(0.0, (-9.27398924154364E-153));
      Complex complex8 = complex4.NaN.asin();
      Complex complex9 = complex5.INF.asin();
      Complex complex10 = complex2.INF.multiply(complex7);
      Complex complex11 = Complex.valueOf((-2044.7987847270408), (-1507.50464184648));
      ComplexField complexField1 = complex2.getField();
      Complex complex12 = complex4.pow((-2044.7987847270408));
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(1074.0, 0.0);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.ZERO.add(complex4);
      Complex complex8 = complex6.pow(0.0);
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex0.asin();
      ComplexField complexField1 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow(Double.NaN);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.INF.multiply(828);
      Complex complex4 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex5 = Complex.valueOf((double) 828, (double) 828);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.sqrt1z();
      String string0 = complex2.I.toString();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.subtract(0.0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.multiply((-600));
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex1.createComplex(0.0, (-49.85376667003901));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex(20.0, 20.0);
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.sinh();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.conjugate();
      double double1 = complex3.I.abs();
      Complex complex4 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4034725764547136E-8);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.add((-2667.0));
      boolean boolean0 = complex5.equals(complex2);
      Complex complex6 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.tanh();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sqrt();
      List<Complex> list0 = complex0.nthRoot(1319);
      Complex complex2 = complex0.multiply((double) 1319);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex((-250.58695199452427), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.add(Double.POSITIVE_INFINITY);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex0.pow((-250.58695199452427));
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.divide((-250.58695199452427));
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex2.pow(complex0);
      Complex complex9 = complex8.cosh();
      Complex complex10 = Complex.valueOf((-250.58695199452427));
      Object object1 = complex9.ONE.readResolve();
      Complex complex11 = complex2.I.exp();
      ComplexField complexField0 = complex11.NaN.getField();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex9.subtract(complex3);
      List<Complex> list0 = complex2.NaN.nthRoot(83);
      Complex complex15 = complex4.I.conjugate();
      Complex complex16 = complex2.add((-1238.337));
      Complex complex17 = complex8.pow(Double.POSITIVE_INFINITY);
      Complex complex18 = complex5.multiply(complex1);
      Complex complex19 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(268.5);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = new Complex(0.0);
      boolean boolean0 = complex0.equals(complex5);
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex5.ONE.cosh();
      Complex complex8 = complex5.ZERO.sqrt1z();
      Complex complex9 = complex7.NaN.subtract(1068.1062);
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex5.multiply(0);
      Complex complex11 = complex10.NaN.cos();
      Complex complex12 = Complex.valueOf(3067.016);
      Complex complex13 = complex0.ONE.sqrt();
      double double0 = complex10.ONE.getArgument();
      int int0 = complex5.hashCode();
      String string0 = complex7.toString();
      boolean boolean1 = complex5.isInfinite();
      Complex complex14 = complex5.reciprocal();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(647.7056796920962, 2867.35658);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.NaN.multiply(959);
      ComplexField complexField0 = complex1.ONE.getField();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      Complex complex3 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-253.20453863));
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex1.log();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex1.ONE.reciprocal();
      Complex complex6 = complex0.negate();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex6.ONE.pow(complex3);
      Complex complex8 = complex0.sin();
      double double0 = complex2.getArgument();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.sqrt();
      double double1 = complex3.getImaginary();
      Complex complex11 = complex5.cos();
      Complex complex12 = complex8.negate();
      String string1 = complex5.toString();
      Complex complex13 = complex6.multiply(0);
      Complex complex14 = complex3.tan();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(1909.0, 684.3968378284821);
      Complex complex1 = complex0.NaN.multiply(684.3968378284821);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.pow(684.3968378284821);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex4.I.tanh();
      String string0 = complex1.toString();
      Complex complex6 = complex1.INF.multiply(complex0);
      Complex complex7 = complex3.add(complex1);
      Complex complex8 = complex2.asin();
      Complex complex9 = Complex.valueOf((-551.0966527191), (-551.0966527191));
      List<Complex> list0 = complex9.nthRoot(1725);
      Complex complex10 = complex7.ONE.multiply(0.0);
      Complex complex11 = complex6.atan();
      Complex complex12 = complex11.sinh();
      int int0 = complex7.hashCode();
      Complex complex13 = complex1.reciprocal();
      Complex complex14 = complex0.sinh();
      Complex complex15 = complex14.I.sin();
      Complex complex16 = complex4.I.atan();
      Complex complex17 = complex6.tan();
      Complex complex18 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex18.NaN.getField();
      boolean boolean0 = complex17.isNaN();
      Complex complex19 = complex8.negate();
      Complex complex20 = complex3.subtract(complex17);
      int int1 = complex3.hashCode();
      Complex complex21 = complex17.subtract(complex9);
      Complex complex22 = complex13.cosh();
      Complex complex23 = complex4.cosh();
      Complex complex24 = complex11.cosh();
      Complex complex25 = complex19.pow(complex5);
      Complex complex26 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.multiply(1016);
      int int0 = complex1.hashCode();
      Complex complex2 = Complex.valueOf((-20.0), 0.0);
      int int1 = complex0.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.multiply((-3477));
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex1.INF.acos();
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.I.cos();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex0.multiply(complex2);
      Complex complex9 = complex8.log();
      try { 
        complex7.nthRoot((-3477));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,477
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.INF.tan();
      double double1 = complex0.ZERO.abs();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex4.NaN.exp();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.subtract(2603.01705752293);
      Complex complex7 = complex4.NaN.log();
      Complex complex8 = complex0.divide(2354.9422123);
      Complex complex9 = complex8.ONE.pow(complex1);
      Complex complex10 = complex8.add(complex0);
      Complex complex11 = complex10.negate();
      Complex complex12 = complex1.I.reciprocal();
      Complex complex13 = complex9.multiply(1);
      Complex complex14 = complex9.ONE.multiply(0.0);
      Complex complex15 = complex3.NaN.multiply(1);
      Complex complex16 = complex1.ONE.subtract(0.0);
      Complex complex17 = complex13.ONE.atan();
      Complex complex18 = complex17.ZERO.subtract(complex1);
      Complex complex19 = complex18.NaN.sinh();
      Complex complex20 = complex3.acos();
      double double2 = complex1.getReal();
      Complex complex21 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      String string0 = complex1.ZERO.toString();
      double double0 = complex1.NaN.getArgument();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.ONE.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex5.NaN.sin();
      Complex complex11 = complex5.multiply(complex10);
      Complex complex12 = complex5.NaN.createComplex((-528.0), 0.0);
      Complex complex13 = complex12.NaN.cosh();
      Complex complex14 = complex13.INF.sqrt();
      Complex complex15 = Complex.valueOf(754.367045392, 1.2408792972564697);
      Complex complex16 = complex5.INF.subtract(complex8);
      boolean boolean0 = complex0.isNaN();
      try { 
        complex7.nthRoot((-1055));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,055
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
