/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:21:18 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.ZERO.subtract((-679.8750313187045));
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.905511605694905E-113));
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex1.NaN.add(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex2.NaN.asin();
      int int0 = complex2.INF.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.subtract(complex3);
      Complex complex6 = complex2.NaN.tanh();
      String string0 = complex6.INF.toString();
      double double1 = complex6.NaN.getArgument();
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = complex5.ONE.sqrt1z();
      Complex complex8 = complex4.NaN.pow(0.0);
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex8.divide(complex1);
      Complex complex10 = complex2.pow(complex1);
      Object object1 = complex0.readResolve();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex0.ZERO.atan();
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex5.log();
      Complex complex15 = complex4.pow(complex11);
      double double2 = complex10.getImaginary();
      Complex complex16 = complex0.add(complex11);
      Complex complex17 = complex8.sqrt1z();
      Complex complex18 = complex0.log();
      Complex complex19 = Complex.valueOf(94.39751, Double.NaN);
      Object object2 = complex19.readResolve();
      boolean boolean0 = complex0.equals(object2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.NaN.createComplex((-2216.172), 1477.54916);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex0.NaN.multiply(complex4);
      double double0 = complex6.I.getArgument();
      Object object0 = complex0.readResolve();
      Object object1 = complex4.I.readResolve();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex6.hashCode();
      double double1 = complex6.ZERO.getArgument();
      double double2 = complex6.getReal();
      Complex complex7 = complex4.tan();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex1.I.pow(complex2);
      Complex complex11 = complex8.sinh();
      boolean boolean1 = complex4.isInfinite();
      Complex complex12 = complex4.INF.reciprocal();
      Complex complex13 = complex9.subtract(complex2);
      Complex complex14 = Complex.I;
      Complex complex15 = complex13.INF.multiply(complex14);
      String string0 = complex8.toString();
      Complex complex16 = complex5.log();
      Complex complex17 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.subtract(0.0);
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex1.NaN.asin();
      Complex complex5 = complex0.ZERO.multiply(complex2);
      Complex complex6 = complex0.NaN.atan();
      Complex complex7 = complex1.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex1.ONE.abs();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex0.pow(complex1);
      int int0 = complex8.ONE.hashCode();
      int int1 = complex0.ZERO.hashCode();
      Complex complex10 = complex2.multiply(867.47);
      Complex complex11 = complex10.conjugate();
      int int2 = complex8.hashCode();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex2.sinh();
      double double1 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.createComplex((-1489.12566733), 0.0);
      double double1 = complex4.ONE.abs();
      Complex complex6 = Complex.valueOf((-1489.12566733), (-1489.12566733));
      Complex complex7 = complex0.tan();
      double double2 = complex7.getArgument();
      Complex complex8 = complex7.ONE.sinh();
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex7.negate();
      Object object1 = complex9.readResolve();
      ComplexField complexField0 = complex7.getField();
      Complex complex10 = complex4.negate();
      double double3 = complex4.getReal();
      Complex complex11 = complex1.divide(5.482208065983983E-194);
      Complex complex12 = complex11.asin();
      Complex complex13 = complex11.ONE.sqrt1z();
      Complex complex14 = complex11.negate();
      Complex complex15 = complex1.multiply((-665));
      ComplexField complexField1 = complex11.getField();
      Complex complex16 = complex15.sinh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.exp();
      double double0 = complex0.getReal();
      Complex complex5 = complex1.pow(complex0);
      double double1 = complex5.INF.abs();
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex3.divide(Double.POSITIVE_INFINITY);
      double double2 = complex2.getReal();
      double double3 = complex0.getImaginary();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.createComplex(Double.POSITIVE_INFINITY, (-1304.96813866));
      Object object1 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex0.abs();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(876.478079957, 7036.431957602);
      Complex complex1 = Complex.valueOf(876.478079957, 0.0);
      String string0 = complex1.toString();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = Complex.valueOf(1.5916266807316476E91, 7036.431957602);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.NaN.pow(876.478079957);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex2.isNaN();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex1.NaN.negate();
      Complex complex10 = complex8.cosh();
      Complex complex11 = complex0.pow(1.5916266807316476E91);
      Complex complex12 = complex6.subtract(complex7);
      int int0 = complex12.I.hashCode();
      Complex complex13 = complex4.atan();
      Complex complex14 = complex11.log();
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex7.acos();
      Complex complex17 = complex12.negate();
      ComplexField complexField1 = complex2.getField();
      double double0 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex2.I.acos();
      Complex complex6 = complex4.INF.acos();
      Complex complex7 = complex4.ONE.subtract(0.0);
      Complex complex8 = complex1.ZERO.subtract(complex2);
      Object object0 = complex1.readResolve();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex3.add(complex1);
      Complex complex11 = complex10.I.createComplex(1799.36501340159, 1799.36501340159);
      Complex complex12 = complex3.tan();
      Object object1 = complex8.readResolve();
      Complex complex13 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.divide(complex13);
      Complex complex15 = complex14.INF.cosh();
      Complex complex16 = complex1.ONE.conjugate();
      Complex complex17 = complex13.multiply(1174.842755);
      Complex complex18 = complex17.log();
      Complex complex19 = complex6.add(complex14);
      boolean boolean0 = complex10.isNaN();
      Complex complex20 = complex0.tan();
      Complex complex21 = complex19.atan();
      Complex complex22 = complex7.tanh();
      Complex complex23 = complex16.add(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.ONE.subtract(complex0);
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex2.ONE.multiply(0.0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.acos();
      double double0 = complex4.NaN.getArgument();
      boolean boolean1 = complex0.isInfinite();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.pow(Double.NaN);
      String string0 = complex7.INF.toString();
      Complex complex9 = complex4.divide(complex0);
      boolean boolean2 = complex5.equals(complex4);
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex0.reciprocal();
      int int0 = complex8.hashCode();
      Complex complex13 = complex6.cos();
      Complex complex14 = complex12.asin();
      try { 
        complex9.nthRoot((-4635));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-305.198545177), (-305.198545177));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.conjugate();
      double double0 = complex2.getArgument();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex4.ZERO.reciprocal();
      Complex complex7 = complex3.conjugate();
      double double1 = complex0.getArgument();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.I.pow(complex8);
      Complex complex11 = complex3.subtract(complex9);
      Complex complex12 = complex0.add(Double.NaN);
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex14.NaN.acos();
      Complex complex16 = complex2.cosh();
      Complex complex17 = complex0.ONE.exp();
      Complex complex18 = Complex.valueOf(1.0, 0.0);
      Complex complex19 = Complex.valueOf((-1.570794984814226), 0.0);
      Complex complex20 = complex19.ZERO.negate();
      double double2 = complex4.getReal();
      Complex complex21 = complex16.add(0.0);
      int int0 = complex14.hashCode();
      double double3 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex((-1.145160459652136E283), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      int int0 = complex2.hashCode();
      double double1 = 0.0;
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex1.pow(complex3);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex4.ZERO.multiply(37);
      String string0 = complex1.toString();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1.879528650772233E-12, 1.879528650772233E-12);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1.879528650772233E-12);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex1.INF.exp();
      Complex complex8 = complex5.INF.add(complex1);
      Complex complex9 = complex1.cos();
      double double0 = complex4.getArgument();
      Complex complex10 = complex7.NaN.asin();
      Complex complex11 = complex9.log();
      boolean boolean0 = complex8.isNaN();
      Complex complex12 = complex11.multiply(complex2);
      Complex complex13 = complex7.sin();
      Complex complex14 = complex2.INF.divide((-2.2258513086839407E-9));
      Complex complex15 = complex12.pow(complex9);
      boolean boolean1 = complex15.isInfinite();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1330.14));
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.I.pow((-1953.8085));
      Complex complex2 = complex1.I.divide(complex0);
      double double1 = complex2.NaN.getArgument();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf((-1953.8085), (-1953.8085));
      Complex complex6 = complex5.sin();
      int int0 = complex1.hashCode();
      Complex complex7 = Complex.valueOf((-20.0), 2011.345346675);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(374.5766952, (-2036.13426612071));
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex1.I.sin();
      Complex complex5 = complex3.I.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex6 = complex0.tan();
      Object object1 = complex5.readResolve();
      Complex complex7 = complex5.cosh();
      Object object2 = complex1.readResolve();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-509.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.pow(2.0);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.INF.add((-5088.30356647));
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex5.multiply(0.0);
      Complex complex7 = complex6.ZERO.multiply((-1792));
      Complex complex8 = complex0.createComplex((-509.0), (-2471.14294083949));
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex3.isInfinite();
      Complex complex9 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-443.4326), (-1141.91792));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.valueOf((-2275.93507334506));
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = new Complex(Double.NaN, (-897.873423565984));
      Complex complex1 = complex0.acos();
      double double1 = (-3436.620362648);
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex2.ONE.add((-897.873423565984));
      Complex complex4 = complex2.I.tan();
      Complex complex5 = complex4.INF.subtract(complex1);
      try { 
        complex2.nthRoot((-299));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -299
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-815.1935511977), 0.29473721981048584);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.subtract((-1374.960237304747));
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = Complex.valueOf(0.29473721981048584);
      Complex complex4 = complex1.multiply(1695);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex5.NaN.divide(complex0);
      Complex complex8 = complex0.subtract(9.815805717097634E-9);
      Complex complex9 = complex8.INF.multiply(399);
      Complex complex10 = complex9.NaN.add(complex2);
      Complex complex11 = complex5.ONE.sinh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex12.ZERO.add((-1527.7764977301));
      Complex complex14 = Complex.valueOf(2427.964);
      Complex complex15 = complex12.pow(9.815805717097634E-9);
      Complex complex16 = complex11.ONE.pow(complex9);
      Complex complex17 = complex3.add(2427.964);
      Complex complex18 = complex11.multiply((-784.52616010706));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-263.962245992339));
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.negate();
      List<Complex> list0 = complex2.NaN.nthRoot(1126);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.I.sqrt();
      String string0 = complex3.toString();
      Complex complex6 = complex1.log();
      int int0 = complex0.hashCode();
      Object object1 = complex3.ONE.readResolve();
      Complex complex7 = Complex.valueOf(0.0, (-194.63275161197));
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex8.ONE.multiply(1126);
      Complex complex10 = complex2.ZERO.tanh();
      Object object2 = complex3.NaN.readResolve();
      Object object3 = new Object();
      Complex complex11 = complex1.NaN.pow(complex7);
      Complex complex12 = complex11.INF.negate();
      boolean boolean0 = complex3.equals(object3);
      Complex complex13 = complex1.negate();
      boolean boolean1 = complex0.equals("(0.0, -0.0)");
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex15 = complex14.log();
      Complex complex16 = complex12.pow((double) 1126);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-2.518642767561659E-30));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = new Complex((-1.0), 1709.9511244);
      Complex complex5 = complex3.ZERO.divide(complex4);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex2.I.conjugate();
      boolean boolean0 = complex2.equals(complex6);
      boolean boolean1 = complex1.isNaN();
      Complex complex9 = complex4.ZERO.multiply(2213);
      Object object0 = complex2.readResolve();
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1190.42826276126);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.subtract(1190.42826276126);
      try { 
        complex0.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(4.7976477743232285E-102);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex3.ONE.subtract(complex0);
      Complex complex6 = complex0.createComplex(4.7976477743232285E-102, 4.7976477743232285E-102);
      Complex complex7 = complex6.NaN.exp();
      double double0 = complex7.NaN.abs();
      Complex complex8 = complex6.multiply(complex0);
      Complex complex9 = complex3.ONE.createComplex(4.7976477743232285E-102, 4.7976477743232285E-102);
      Complex complex10 = complex9.NaN.multiply(4.7976477743232285E-102);
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex11.ONE.reciprocal();
      double double1 = complex13.I.getArgument();
      double double2 = complex6.getImaginary();
      String string0 = complex8.toString();
      Complex complex14 = complex7.pow(4.7976477743232285E-102);
      Complex complex15 = complex6.multiply(complex1);
      Complex complex16 = complex12.NaN.reciprocal();
      Complex complex17 = complex5.tan();
      Complex complex18 = complex0.conjugate();
      Object object0 = complex2.readResolve();
      Object object1 = complex14.readResolve();
      Complex complex19 = complex4.subtract(Double.NaN);
      Complex complex20 = complex2.subtract(Double.NaN);
      Complex complex21 = complex19.add(complex14);
      Complex complex22 = complex7.subtract(125.0);
      Complex complex23 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.log();
      Object object0 = complex4.readResolve();
      double double0 = complex1.ZERO.abs();
      Complex complex5 = complex0.log();
      double double1 = complex5.ONE.abs();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex2.exp();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.ONE.tan();
      String string0 = complex9.ZERO.toString();
      Complex complex10 = complex8.ONE.subtract((-4.391824838015402E-9));
      Complex complex11 = complex10.ZERO.pow(complex2);
      Complex complex12 = complex8.I.tanh();
      ComplexField complexField0 = complex12.I.getField();
      Complex complex13 = complex0.subtract(complex7);
      Complex complex14 = complex13.cos();
      boolean boolean0 = complex3.equals(complex5);
      Complex complex15 = complex13.I.tan();
      Complex complex16 = complex3.tanh();
      Complex complex17 = complex14.add(2033.751);
      String string1 = complex1.toString();
      Complex complex18 = complex16.tanh();
      Complex complex19 = complex10.cosh();
      Complex complex20 = complex18.reciprocal();
      Complex complex21 = complex20.sqrt1z();
      Complex complex22 = complex2.sin();
      Complex complex23 = complex21.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-347.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf((-347.0), (-347.0));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex5.add((-347.0));
      Complex complex7 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex1.multiply(156.26903976886092);
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex5.asin();
      boolean boolean0 = complex3.equals(complex2);
      ComplexField complexField1 = complex8.ONE.getField();
      Complex complex9 = complex1.I.asin();
      Complex complex10 = complex0.ZERO.pow((-1984.42813));
      Complex complex11 = complex0.INF.tan();
      String string0 = complex8.ZERO.toString();
      Complex complex12 = complex8.createComplex(439.7534428, 156.26903976886092);
      Complex complex13 = complex0.subtract(1.0);
      double double0 = complex3.abs();
      Complex complex14 = complex8.multiply(1);
      boolean boolean1 = complex13.isInfinite();
      Complex complex15 = complex4.divide(complex7);
      Complex complex16 = complex5.asin();
      Complex complex17 = complex8.tan();
      Complex complex18 = complex0.atan();
      Complex complex19 = complex9.atan();
      String string1 = complex18.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex3.createComplex(2.677136737066629E238, 2.677136737066629E238);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 1281.380438;
      Complex complex0 = Complex.valueOf(1281.380438, 1281.380438);
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2132706360079843E-9), (-2.2132706360079843E-9));
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex2.add(Double.NaN);
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex4.equals(complex1);
      Complex complex5 = Complex.valueOf((-2.2132706360079843E-9));
      Complex complex6 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex3.ONE.atan();
      List<Complex> list1 = complex0.ONE.nthRoot(544);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.NaN.negate();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex6.equals(object0);
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex0.createComplex(3879.334481, (-1907.338515993016));
      Complex complex11 = complex9.createComplex((-1907.338515993016), 3879.334481);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.NaN.multiply(6.283185307179586);
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.I.subtract(complex1);
      double double0 = complex0.INF.abs();
      Complex complex3 = complex0.createComplex(6.283185307179586, 1753.6616);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = complex5.NaN.multiply(0.0);
      Complex complex7 = complex4.sinh();
      double double1 = complex7.abs();
      Complex complex8 = complex7.add(complex5);
      Complex complex9 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1474.3576884091522));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = Complex.valueOf((-1141.4001933295));
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex4.NaN.add(complex3);
      Complex complex6 = complex3.INF.sin();
      Complex complex7 = complex0.multiply(1);
      Complex complex8 = complex7.multiply(1);
      double double0 = complex0.getArgument();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = Complex.valueOf((-863.2141881978878), 0.0);
      Complex complex4 = complex1.I.cos();
      Complex complex5 = complex2.ONE.divide(complex4);
      Complex complex6 = complex4.ONE.cosh();
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex0.INF.subtract(complex1);
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex0.createComplex(0.0, (-2691.463965));
      Complex complex10 = complex0.tan();
      Complex complex11 = Complex.I;
      Complex complex12 = complex9.pow(complex11);
      Complex complex13 = complex12.tanh();
      List<Complex> list0 = complex9.ZERO.nthRoot(1110);
      Complex complex14 = complex4.sinh();
      Complex complex15 = complex14.tanh();
      Object object0 = complex14.readResolve();
      Complex complex16 = complex12.reciprocal();
      Complex complex17 = Complex.valueOf(0.0);
      Complex complex18 = complex12.subtract(1852.9557717628);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex0.pow(1327.22737);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(694.191195, 0.0);
      Complex complex1 = Complex.valueOf(694.191195, 694.191195);
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.INF.pow(694.191195);
      double double0 = complex0.getReal();
      Complex complex4 = complex2.subtract(0.0);
      Complex complex5 = complex4.multiply(complex2);
      int int1 = complex4.hashCode();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex6.pow(complex4);
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3.517594695450786E-279));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-3141));
      Complex complex2 = complex0.pow(2.4621305031382827E-33);
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex1.ONE.createComplex(2.4621305031382827E-33, 0.0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex2.ONE.sqrt();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex0.pow(complex1);
      Complex complex11 = Complex.valueOf((-20.0), 2.4621305031382827E-33);
      Complex complex12 = complex7.subtract(complex11);
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = Complex.I;
      boolean boolean0 = complex11.equals(complex15);
      Complex complex16 = complex0.cos();
      double double0 = complex8.getReal();
      Complex complex17 = complex16.sin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-973);
      Complex complex1 = complex0.ONE.sin();
      try { 
        complex0.nthRoot((-973));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -973
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1076.339836239, 1076.339836239);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2980.9580078125, 2980.9580078125);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ZERO.add(complex2);
      Complex complex6 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.multiply(1);
      Complex complex8 = complex0.multiply(2332);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1.3012807963586057E-8);
      int int0 = 1666;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ZERO.multiply(1666);
      Complex complex4 = Complex.valueOf(1.3012807963586057E-8, (double) 1666);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.ONE.divide(complex5);
      Complex complex7 = complex6.ONE.subtract(3271.38912737);
      double double0 = complex0.abs();
      Complex complex8 = complex0.I.atan();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex8.INF.add(complex4);
      try { 
        complex2.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 742.31);
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(1789.50446);
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex0.I.multiply(complex3);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2146.6681, 2146.6681);
      Complex complex1 = complex0.ONE.add((-342.318432));
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.multiply((-1));
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex5.INF.log();
      Complex complex8 = complex6.I.multiply((double) (-1));
      Complex complex9 = complex5.negate();
      Complex complex10 = complex9.NaN.multiply(0.0);
      double double0 = complex4.getReal();
      String string0 = complex4.toString();
      double double1 = complex6.abs();
      Complex complex11 = complex5.divide(1414.54794278335);
      Complex complex12 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex1.I.pow(1844.4742);
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-741.0), (-741.0));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.I.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex3.multiply(0);
      Complex complex6 = complex1.ZERO.cosh();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex0.subtract(429.846483785004);
      Complex complex10 = complex8.createComplex((-741.0), (-20.0));
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.NaN.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.I.createComplex(0.0, (-834.31411));
      Complex complex5 = complex0.add(0.0);
      double double2 = complex2.abs();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-1894.233857764273));
      Complex complex1 = Complex.valueOf((-1894.233857764273), 352.35925152);
      Complex complex2 = complex0.INF.divide((-1894.233857764273));
      Complex complex3 = Complex.valueOf(352.35925152);
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.add(complex1);
      double double1 = complex1.getImaginary();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1104.7), (-1.0));
      Complex complex1 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(409.070816697, (-1.0));
      Complex complex1 = new Complex((-1.0), 409.070816697);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.negate();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.ZERO.multiply(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = Complex.valueOf(1221.591, Double.POSITIVE_INFINITY);
      double double0 = complex3.getReal();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex5.atan();
      double double1 = complex3.abs();
      Complex complex9 = complex3.multiply(386);
      Complex complex10 = complex8.add(complex9);
      Complex complex11 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.sqrt1z();
      String string0 = complex2.I.toString();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.NaN.createComplex(6.283185307179586, 1647.65455041482);
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.cos();
      int int0 = complex0.hashCode();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.pow((-90.5795));
      double double1 = complex0.abs();
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.multiply(Double.POSITIVE_INFINITY);
      double double2 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1546.898812), 0.0);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.pow(complex2);
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.tanh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.exp();
      double double1 = complex3.getImaginary();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1556.522032147749));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex0.divide((-1556.522032147749));
      Complex complex5 = complex0.pow((-1556.522032147749));
      Complex complex6 = complex4.subtract((-1556.522032147749));
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex5.add(complex1);
      int int0 = complex8.hashCode();
      Complex complex9 = complex7.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-473.9926990758722), 0.0);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-74.14728293));
      String string0 = complex0.toString();
      boolean boolean0 = complex0.equals("(0.0, -74.14728293)");
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.atan();
      double double0 = complex0.abs();
      int int0 = complex2.hashCode();
      Complex complex3 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      String string0 = complex0.toString();
      Complex complex2 = complex0.add(1674.336185);
      Complex complex3 = complex2.pow(1674.336185);
      Complex complex4 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.multiply(1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.NaN.divide((double) 0);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1343.849848585));
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.tan();
      String string0 = complex1.I.toString();
      double double1 = complex0.getImaginary();
      double double2 = complex0.abs();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.valueOf((-1343.849848585));
      Complex complex5 = complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.negate();
      Object object0 = complex2.readResolve();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = complex1.ONE.cosh();
      Complex complex7 = complex0.I.divide(complex1);
      Complex complex8 = Complex.I;
      Complex complex9 = complex0.NaN.add(complex8);
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex0.ZERO.tanh();
      Complex complex12 = complex10.ZERO.sinh();
      String string0 = complex12.toString();
      Complex complex13 = complex7.INF.divide(complex0);
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex15 = complex0.divide(Double.NaN);
      boolean boolean0 = complex14.isNaN();
      Complex complex16 = complex15.divide(Double.NaN);
      Complex complex17 = complex9.createComplex(423.610018063, Double.NaN);
      Complex complex18 = complex5.asin();
      String string1 = complex0.toString();
      double double0 = complex0.abs();
      Complex complex19 = complex18.sqrt();
      Complex complex20 = complex17.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = complex4.I.multiply((double) 0);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.add((double) 0);
      double double0 = complex5.ZERO.abs();
      Complex complex8 = complex6.NaN.negate();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex4.NaN.cos();
      Complex complex11 = complex9.asin();
      Complex complex12 = complex1.I.sqrt1z();
      double double1 = complex3.INF.getArgument();
      Complex complex13 = complex11.ONE.exp();
      Complex complex14 = complex2.subtract((double) 0);
      String string0 = complex14.ONE.toString();
      Complex complex15 = complex13.INF.asin();
      double double2 = complex14.getArgument();
      Complex complex16 = complex11.INF.sqrt1z();
      ComplexField complexField0 = complex3.getField();
      Complex complex17 = complex11.sin();
      double double3 = complex2.getReal();
      try { 
        complex13.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(0.0, 2871.7);
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex3.sin();
      Complex complex6 = Complex.valueOf(0.0);
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = complex6.ZERO.tanh();
      List<Complex> list0 = complex0.nthRoot(3045);
      List<Complex> list1 = complex3.nthRoot(3045);
      Complex complex8 = complex5.ONE.subtract(complex0);
      Complex complex9 = complex8.NaN.log();
      double double0 = complex4.getReal();
      Complex complex10 = complex4.multiply(complex5);
      Complex complex11 = complex10.NaN.cosh();
      double double1 = 3683.6698662697;
      Complex complex12 = complex3.exp();
      Complex complex13 = complex11.add(3683.6698662697);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.INF.pow(20.0);
      Complex complex4 = complex3.ONE.sinh();
      int int0 = complex3.ZERO.hashCode();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.ZERO.divide(20.0);
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex8.multiply(20.0);
      Complex complex12 = complex11.I.cos();
      Complex complex13 = complex9.I.add(complex0);
      Complex complex14 = Complex.valueOf(20.0, 20.0);
      Complex complex15 = complex3.multiply((-716.2233549921768));
      Complex complex16 = complex13.ZERO.cosh();
      Complex complex17 = complex0.NaN.exp();
      double double0 = complex9.abs();
      Complex complex18 = complex14.divide(1764.188916);
      Complex complex19 = complex4.atan();
      Complex complex20 = complex0.INF.pow(1764.188916);
      Complex complex21 = complex0.NaN.multiply(1764.188916);
      Complex complex22 = Complex.INF;
      Complex complex23 = complex14.NaN.pow((-1734.9));
      Complex complex24 = complex19.add(complex22);
      Complex complex25 = complex7.cosh();
      Complex complex26 = complex13.multiply(complex14);
      boolean boolean0 = complex8.isNaN();
      Complex complex27 = complex7.reciprocal();
      List<Complex> list0 = complex27.INF.nthRoot(1202);
      Complex complex28 = complex20.add((-870.173));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex2.I.pow(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.add(complex2);
      Object object0 = complex5.INF.readResolve();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex1.isNaN();
      Complex complex6 = complex2.pow(complex4);
      Complex complex7 = complex5.log();
      Complex complex8 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.NaN.subtract(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.add(complex5);
      double double0 = complex0.ONE.abs();
      double double1 = complex0.abs();
      Complex complex7 = complex5.createComplex(2379.764043557593, 1029.052);
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex0.NaN.multiply(complex5);
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex9.ZERO.divide(complex0);
      Complex complex12 = complex0.subtract(complex6);
      Complex complex13 = complex9.multiply(complex7);
      Complex complex14 = complex13.I.conjugate();
      Complex complex15 = complex13.multiply(complex5);
      double double2 = complex15.getImaginary();
      double double3 = complex10.getImaginary();
      Complex complex16 = complex9.divide(Double.NaN);
      Complex complex17 = complex16.sin();
      Complex complex18 = complex14.asin();
      Complex complex19 = complex17.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ONE.divide(3267.2903);
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.INF.subtract(complex5);
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex1.INF.subtract(complex4);
      Complex complex10 = complex5.sin();
      Object object0 = complex6.readResolve();
      Complex complex11 = complex8.pow(3267.2903);
      Complex complex12 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.subtract(571.621114087);
      Complex complex2 = complex1.acos();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex0.divide(110.9692652950835);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex4.I.asin();
      Complex complex7 = complex4.ONE.sqrt1z();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex3.I.atan();
      Complex complex9 = complex1.NaN.sqrt();
      Complex complex10 = complex2.pow((-2945.5085516));
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex11.INF.tan();
      Complex complex13 = complex0.negate();
      int int0 = complex1.hashCode();
      Complex complex14 = complex13.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex15 = complex14.NaN.divide(60.72078);
      Complex complex16 = complex9.NaN.createComplex(110.9692652950835, 2746.241821666);
      Complex complex17 = complex14.add((-2713.998879362689));
      Complex complex18 = complex0.createComplex(110.9692652950835, 0.0);
      Complex complex19 = complex9.log();
      ComplexField complexField1 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.multiply(complex0);
      double double1 = (-2206.3312507);
      Complex complex5 = complex1.createComplex(0.0, (-2206.3312507));
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = Complex.valueOf((-2206.3312507));
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex9.ONE.subtract((-2206.3312507));
      List<Complex> list0 = complex9.ONE.nthRoot(1929);
      boolean boolean0 = complex1.equals(complex8);
      Object object0 = complex8.readResolve();
      String string0 = complex9.toString();
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex12.multiply(0);
      Object object1 = complex13.I.readResolve();
      Complex complex14 = complex0.add((-2206.3312507));
      Complex complex15 = complex1.subtract((double) 1929);
      double double2 = (-4.9791700939901716E-8);
      Complex complex16 = complex12.multiply((-4.9791700939901716E-8));
      Complex complex17 = complex15.multiply(complex6);
      ComplexField complexField0 = complex13.getField();
      double double3 = complex15.getReal();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
