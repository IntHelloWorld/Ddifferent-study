/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:21:21 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 163.6352);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex1.ZERO.exp();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.NaN.multiply(complex4);
      Complex complex9 = complex1.subtract(2071.0);
      Complex complex10 = complex9.pow(complex5);
      ComplexField complexField0 = complex6.getField();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.I.tanh();
      try { 
        complex5.ONE.nthRoot((-1044));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,044
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.INF.tan();
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex0.multiply(Double.NaN);
      String string1 = complex0.toString();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.INF.sqrt();
      Complex complex7 = complex3.subtract(Double.NaN);
      Complex complex8 = complex3.ONE.acos();
      double double0 = complex7.I.abs();
      Complex complex9 = complex4.add((-2492.01633860505));
      double double1 = complex4.getReal();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex4.multiply(complex10);
      Complex complex13 = Complex.valueOf((-8.880302882034106E-8));
      Complex complex14 = complex1.acos();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-870.956834));
      Complex complex1 = complex0.sin();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = Complex.valueOf((-2119.76086774111));
      String string0 = complex4.I.toString();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex0.subtract(complex4);
      double double0 = complex6.getImaginary();
      List<Complex> list0 = complex3.INF.nthRoot(3775);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf((-2119.76086774111));
      Complex complex11 = complex6.multiply(3775);
      Complex complex12 = Complex.valueOf((-2119.76086774111), 0.0);
      Complex complex13 = complex1.ONE.negate();
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex6.divide(Double.POSITIVE_INFINITY);
      Complex complex16 = complex2.cos();
      List<Complex> list1 = complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.asin();
      double double0 = complex4.ONE.getArgument();
      ComplexField complexField0 = complex4.getField();
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.ZERO.pow(complex2);
      Complex complex8 = complex6.I.acos();
      Complex complex9 = complex1.pow(complex6);
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex0.ONE.subtract(complex2);
      boolean boolean0 = complex3.equals(complex2);
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex11.createComplex(0.0, 0.0);
      Complex complex14 = complex3.sin();
      Complex complex15 = complex6.cosh();
      Complex complex16 = complex3.sinh();
      Complex complex17 = complex16.NaN.negate();
      Complex complex18 = complex2.sin();
      double double1 = complex13.getImaginary();
      Complex complex19 = complex11.log();
      Complex complex20 = complex13.sinh();
      Complex complex21 = complex5.createComplex(3.012720614547867E231, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-3347.45786), (-2571.740806352781));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = new Complex((-2571.740806352781), (-3347.45786));
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.ZERO.pow((-3347.45786));
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex5.exp();
      Object object1 = complex5.readResolve();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex7.multiply((-3881));
      Complex complex10 = complex9.cos();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex11.NaN.pow((-1757.0));
      Complex complex13 = complex11.I.subtract(complex4);
      Complex complex14 = complex1.negate();
      Complex complex15 = complex6.pow((double) (-3881));
      Complex complex16 = complex1.acos();
      Complex complex17 = complex14.add(1693.476559);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(3601.035, 0.0);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex0.conjugate();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex7.pow(complex0);
      Complex complex9 = complex7.ONE.log();
      List<Complex> list0 = complex8.I.nthRoot(371);
      Complex complex10 = complex8.ONE.divide(complex9);
      double double0 = complex9.abs();
      Complex complex11 = complex7.ONE.add(complex10);
      Complex complex12 = complex9.I.sin();
      Complex complex13 = complex7.add(0.0);
      Complex complex14 = complex1.I.acos();
      boolean boolean0 = complex8.isNaN();
      Complex complex15 = complex13.ZERO.exp();
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex10.sqrt();
      Complex complex18 = complex13.sqrt();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide((-2147.5455928));
      Complex complex2 = complex1.NaN.reciprocal();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex2.NaN.multiply(complex0);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex9.INF.sinh();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex12.ONE.sqrt1z();
      Complex complex14 = complex2.sqrt();
      boolean boolean0 = complex6.isInfinite();
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex10.log();
      Complex complex17 = complex13.asin();
      Complex complex18 = complex14.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-3189.15277829));
      double double0 = 0.0;
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.ONE.divide(1609.05616659);
      Complex complex5 = new Complex((-3189.15277829));
      double double1 = complex5.INF.getArgument();
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex6.ZERO.multiply((-1926));
      Complex complex8 = complex6.I.sin();
      Complex complex9 = complex6.ONE.negate();
      double double2 = complex5.abs();
      String string0 = complex0.toString();
      Complex complex10 = complex5.multiply((-3189.15277829));
      Complex complex11 = complex2.multiply(complex4);
      Complex complex12 = complex10.multiply((-3189.15277829));
      Complex complex13 = complex12.exp();
      Complex complex14 = complex13.NaN.multiply(complex2);
      List<Complex> list0 = complex2.nthRoot(1);
      try { 
        complex9.nthRoot((-1926));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,926
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.divide(complex1);
      String string0 = complex2.I.toString();
      Complex complex3 = complex2.INF.pow(3136.3152881);
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex4.NaN.tanh();
      int int0 = complex3.I.hashCode();
      Complex complex6 = complex2.NaN.exp();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = Complex.valueOf((double) 1127);
      List<Complex> list0 = complex0.nthRoot(1127);
      Complex complex9 = complex0.subtract((double) 1127);
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.I.negate();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex12.I.tanh();
      Complex complex14 = complex2.reciprocal();
      Complex complex15 = complex14.ONE.multiply(1988);
      Complex complex16 = complex0.sin();
      Complex complex17 = complex15.INF.negate();
      Complex complex18 = complex3.multiply((-1432));
      double double0 = complex16.getArgument();
      Complex complex19 = complex15.acos();
      Complex complex20 = complex14.cosh();
      double double1 = complex3.getImaginary();
      Complex complex21 = complex19.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-2631.10439));
      Complex complex1 = complex0.add((-1819.2));
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex3.INF.negate();
      Complex complex6 = complex0.I.multiply(complex1);
      Object object0 = complex6.ONE.readResolve();
      Complex complex7 = Complex.NaN;
      String string0 = complex7.NaN.toString();
      double double0 = complex1.getImaginary();
      Complex complex8 = Complex.valueOf(5.203033137154554E-8, (-655.895249));
      Complex complex9 = Complex.valueOf((-1165.2), (-1408.0552947));
      Complex complex10 = Complex.valueOf(1.0, (-386.45187082475));
      Complex complex11 = complex9.conjugate();
      Complex complex12 = Complex.valueOf((-1165.2));
      Complex complex13 = complex11.reciprocal();
      Complex complex14 = complex2.multiply((-12.442612));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = null;
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add(5.491672256552995E-125);
      Complex complex2 = complex1.acos();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.exp();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = Complex.valueOf(0.0, 5.491672256552995E-125);
      Complex complex7 = complex2.add(complex1);
      Complex complex8 = complex6.NaN.tan();
      Complex complex9 = complex6.I.acos();
      Complex complex10 = complex3.INF.reciprocal();
      Complex complex11 = complex10.asin();
      double double1 = complex3.abs();
      Complex complex12 = complex0.NaN.acos();
      Object object0 = complex3.readResolve();
      Complex complex13 = complex0.NaN.reciprocal();
      double double2 = complex2.abs();
      List<Complex> list0 = complex6.nthRoot(779);
      Complex complex14 = complex2.divide(2657.773);
      Complex complex15 = complex1.divide(complex6);
      double double3 = complex1.getArgument();
      Complex complex16 = complex9.cosh();
      double double4 = complex4.abs();
      Complex complex17 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex18 = complex17.ZERO.log();
      Complex complex19 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex20 = complex17.asin();
      Complex complex21 = complex0.tanh();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.ONE.asin();
      boolean boolean0 = complex0.equals("HLS$1xNp? >!}G).7(");
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.tan();
      double double0 = complex0.getReal();
      Complex complex5 = complex1.createComplex(0.0, (-630.72608653738));
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex1.INF.tan();
      Complex complex8 = complex5.add(complex0);
      Object object0 = complex8.readResolve();
      Complex complex9 = complex5.ONE.pow(complex6);
      List<Complex> list0 = complex6.nthRoot(968);
      Complex complex10 = complex0.cos();
      String string0 = complex4.toString();
      Complex complex11 = complex2.cos();
      Complex complex12 = complex5.ZERO.tan();
      double double1 = complex1.abs();
      Complex complex13 = complex6.divide(complex5);
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex1.multiply(complex14);
      String string1 = complex0.toString();
      String string2 = complex2.toString();
      Complex complex16 = complex5.multiply(complex8);
      Complex complex17 = complex13.add((double) 968);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.add(complex2);
      double double0 = complex0.I.abs();
      Complex complex4 = complex0.ONE.add(0.1256551444530487);
      Complex complex5 = complex0.INF.add(complex4);
      String string0 = complex4.toString();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex4.I.atan();
      double double1 = complex4.INF.getArgument();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex5.I.conjugate();
      Complex complex12 = complex11.atan();
      Complex complex13 = complex10.NaN.add(complex8);
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex5.subtract(0.1256551444530487);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex0.I.pow(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.INF.exp();
      String string0 = complex4.toString();
      double double1 = complex0.getImaginary();
      Complex complex7 = Complex.valueOf(192.6219364, Double.POSITIVE_INFINITY);
      Object object0 = complex7.INF.readResolve();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex0.subtract(2.600448597385527E-8);
      Complex complex10 = complex4.INF.subtract(Double.POSITIVE_INFINITY);
      double double2 = complex4.abs();
      Complex complex11 = complex5.add(complex4);
      Complex complex12 = complex10.negate();
      Complex complex13 = complex11.multiply(0);
      Complex complex14 = complex5.INF.add(complex6);
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex16 = complex9.ONE.divide(complex14);
      Complex complex17 = complex14.asin();
      Complex complex18 = complex13.I.tanh();
      Complex complex19 = complex9.sin();
      Complex complex20 = complex13.conjugate();
      Complex complex21 = complex20.ONE.createComplex(3827.4016243, 0);
      Complex complex22 = complex1.sin();
      Complex complex23 = complex20.log();
      double double3 = complex10.getArgument();
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex16.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(689.4);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.ONE.pow((double) (-754));
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex4.I.atan();
      Complex complex8 = complex4.ZERO.multiply((-754));
      Complex complex9 = complex1.I.sin();
      double double0 = complex9.I.getArgument();
      Complex complex10 = complex8.ONE.sin();
      Complex complex11 = complex4.I.cosh();
      Complex complex12 = complex8.ONE.negate();
      Complex complex13 = complex12.NaN.cos();
      String string0 = complex8.I.toString();
      Complex complex14 = complex10.INF.subtract((double) (-754));
      Complex complex15 = complex4.I.acos();
      ComplexField complexField0 = complex1.getField();
      Complex complex16 = complex3.reciprocal();
      Complex complex17 = complex8.INF.pow(complex15);
      int int0 = complex2.hashCode();
      Complex complex18 = complex10.negate();
      Complex complex19 = complex10.ONE.sqrt();
      Complex complex20 = complex7.atan();
      String string1 = complex20.toString();
      double double1 = complex3.abs();
      Complex complex21 = complex14.atan();
      Complex complex22 = complex15.sinh();
      Complex complex23 = complex18.multiply(689.4);
      Complex complex24 = complex21.tan();
      Object object0 = complex9.readResolve();
      Complex complex25 = complex21.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex6.acos();
      List<Complex> list0 = complex6.nthRoot(2700);
      Complex complex8 = complex5.INF.sin();
      Complex complex9 = complex6.NaN.multiply(0);
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex10.NaN.exp();
      Complex complex12 = complex7.conjugate();
      Complex complex13 = complex3.exp();
      Complex complex14 = complex6.INF.divide((double) 2700);
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      Complex complex16 = complex2.multiply(0.0);
      boolean boolean0 = complex9.equals(complex3);
      Complex complex17 = Complex.valueOf((double) 0, 0.0);
      Complex complex18 = complex14.multiply(0.0);
      Complex complex19 = complex7.multiply((double) 0);
      Complex complex20 = complex16.reciprocal();
      Complex complex21 = complex20.NaN.add((double) 0);
      Complex complex22 = complex1.divide(complex15);
      double double0 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.INF.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex3.tan();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex5.multiply(1037.303209942);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ZERO.sqrt();
      List<Complex> list0 = complex1.ONE.nthRoot(1086);
      Complex complex2 = complex0.divide((-1.6411525886171892E248));
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.multiply(0.0);
      String string0 = complex2.NaN.toString();
      Complex complex5 = complex4.ZERO.sinh();
      int int0 = complex4.hashCode();
      Complex complex6 = complex4.INF.multiply(1);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = Complex.valueOf((double) 1);
      Complex complex9 = complex7.add(1285.05321796);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1049.553786993558), 1162.27327847659);
      Complex complex1 = complex0.NaN.add(1162.27327847659);
      Complex complex2 = Complex.valueOf(0.0, 2.893485277253286E-8);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.asin();
      double double0 = complex5.getImaginary();
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex3.ONE.exp();
      Complex complex8 = Complex.valueOf(2274.0);
      double double1 = complex8.abs();
      Complex complex9 = complex5.subtract((-7.724182294653349E62));
      Complex complex10 = complex9.I.multiply(0);
      Complex complex11 = complex5.INF.multiply(487);
      Complex complex12 = complex2.negate();
      double double2 = complex12.I.getArgument();
      Complex complex13 = complex3.subtract(2.893485277253286E-8);
      double double3 = complex5.getImaginary();
      Complex complex14 = complex9.ZERO.add((-7.724182294653349E62));
      Complex complex15 = complex3.sqrt();
      Complex complex16 = complex2.subtract(complex9);
      Complex complex17 = complex15.tanh();
      boolean boolean0 = complex10.equals(complex13);
      Complex complex18 = complex12.sin();
      boolean boolean1 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.asin();
      double double0 = complex1.getImaginary();
      double double1 = complex6.abs();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      try { 
        complex1.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      double double0 = complex0.NaN.abs();
      Object object0 = complex0.ONE.readResolve();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.INF.subtract((-2639.3315649337));
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.multiply(3.42171232580676E-8);
      double double2 = complex6.NaN.abs();
      double double3 = complex1.getImaginary();
      double double4 = complex6.getReal();
      Complex complex7 = complex2.divide(complex6);
      double double5 = complex7.abs();
      Complex complex8 = complex6.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.negate();
      double double0 = complex6.abs();
      Complex complex8 = complex1.add(complex2);
      Complex complex9 = complex1.ZERO.multiply((-1777.6));
      Complex complex10 = Complex.valueOf((-260.67273), Double.NaN);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex1.multiply(complex11);
      Complex complex13 = complex12.INF.multiply(1);
      Complex complex14 = complex0.pow((-275.76));
      Complex complex15 = complex14.reciprocal();
      Complex complex16 = Complex.valueOf(2672.233244068359);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-769.0614));
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.add(2.0);
      Complex complex5 = complex1.asin();
      String string0 = complex2.toString();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.NaN.sin();
      double double0 = complex3.ONE.getArgument();
      double double1 = complex2.getArgument();
      Complex complex4 = complex0.multiply((-2387));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.multiply(468);
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex1.multiply((-2387));
      Complex complex9 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2889.248);
      Complex complex1 = Complex.valueOf(0.2830325961112976, (-1.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex2.ONE.pow(2889.248);
      Complex complex6 = complex2.ONE.exp();
      double double0 = complex2.getArgument();
      Complex complex7 = complex2.ONE.multiply((-589.1881));
      int int0 = complex2.hashCode();
      Complex complex8 = complex2.pow(2889.248);
      double double1 = complex7.getArgument();
      Complex complex9 = complex7.ZERO.asin();
      Complex complex10 = Complex.valueOf(1661.8259420475376, 1.2530649392922358E-242);
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex10.INF.multiply((-2509));
      Complex complex13 = complex8.acos();
      double double2 = complex1.getImaginary();
      Complex complex14 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2004.8890865632795, 1.266589879989624);
      Complex complex1 = Complex.valueOf(2.723009182661306E-8, 2004.8890865632795);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.ZERO.add(1.266589879989624);
      int int0 = complex0.hashCode();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex1.divide((-1978.16138032381));
      Complex complex8 = complex0.cosh();
      boolean boolean0 = complex3.isInfinite();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = Complex.valueOf(20.0, 1787.97978);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.I.multiply(273);
      Complex complex4 = complex0.INF.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.ONE.exp();
      double double1 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.add(1044.76923);
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex0.multiply(0.0);
      String string0 = complex4.toString();
      Complex complex6 = complex0.add((-2693.429786));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4315.731867, 4315.731867);
      Complex complex1 = new Complex(4315.731867, 4315.731867);
      Complex complex2 = Complex.valueOf((-1.3070101381473173E-251), (-416.28665572632));
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex0.ZERO.add(complex2);
      Complex complex6 = complex1.I.cos();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = Complex.valueOf((-1.3070101381473173E-251));
      Complex complex9 = Complex.valueOf((-416.28665572632), 0.0);
      Complex complex10 = complex1.multiply(0);
      Complex complex11 = complex10.NaN.sinh();
      double double0 = complex5.ZERO.abs();
      Complex complex12 = complex5.multiply((-1.3070101381473173E-251));
      String string0 = complex3.toString();
      Complex complex13 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.INF.exp();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.pow(2.0527342305586606E186);
      Complex complex7 = complex0.log();
      Complex complex8 = complex4.multiply(complex5);
      Complex complex9 = Complex.valueOf(2.955364187248884E203);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2069.0));
      Complex complex1 = complex0.add((-2069.0));
      Complex complex2 = complex1.NaN.createComplex(0.0, 1958.9663790673278);
      Complex complex3 = complex0.asin();
      Complex complex4 = new Complex((-2069.0), (-2069.0));
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex0.divide(complex4);
      Complex complex9 = complex8.I.multiply((-2069.0));
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex4.ONE.sin();
      double double0 = complex0.getArgument();
      Complex complex11 = complex0.add(1.27777099609375);
      double double1 = complex8.getReal();
      Complex complex12 = complex6.log();
      Complex complex13 = Complex.valueOf(1958.9663790673278, (-2438.0961499));
      Complex complex14 = complex2.divide(complex13);
      Complex complex15 = complex10.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((double) (-366), (double) (-366));
      Complex complex2 = complex0.multiply((-366));
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.NaN.sinh();
      ComplexField complexField0 = complex3.getField();
      Complex complex7 = complex3.multiply((double) (-366));
      Complex complex8 = Complex.valueOf((double) (-366), 4221.03974032586);
      Complex complex9 = complex7.asin();
      int int0 = complex3.hashCode();
      Complex complex10 = complex8.divide(0.0);
      Complex complex11 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-8.274711842374368E26));
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.negate();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.I.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.multiply(complex0);
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex0.nthRoot(3602);
      int int1 = complex0.NaN.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.multiply(0);
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex2.equals(object0);
      Complex complex5 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0598974227905273);
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.valueOf(1.9636495113372803);
      Complex complex6 = complex2.multiply((-589.5066232566));
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.ONE.sin();
      List<Complex> list0 = complex1.INF.nthRoot(802);
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex0.multiply(complex1);
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(2992.04675276829);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.I.subtract(2992.04675276829);
      Complex complex5 = complex4.ZERO.negate();
      double double0 = complex0.getArgument();
      Complex complex6 = complex2.add(2992.04675276829);
      double double1 = complex3.getImaginary();
      boolean boolean0 = complex3.equals(complex4);
      Complex complex7 = complex1.createComplex((-297.139), (-1116.3562521854));
      Complex complex8 = complex7.INF.pow(0.0);
      Complex complex9 = complex7.INF.sinh();
      Complex complex10 = Complex.valueOf((-3160.0));
      double double2 = complex10.ONE.abs();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex3.pow(complex1);
      Complex complex13 = complex3.cosh();
      Complex complex14 = complex2.createComplex((-1116.3562521854), 2992.04675276829);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      String string0 = complex0.toString();
      Complex complex1 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2584.7344), 0.10379679501056671);
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.divide((double) (-671));
      try { 
        complex0.nthRoot((-671));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -671
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(636.1723, 636.1723);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = new Complex((-1491.55596487593));
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf(3210.236);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.ONE.cos();
      Complex complex8 = complex5.INF.pow(complex6);
      double double0 = complex5.getArgument();
      ComplexField complexField0 = complex5.ZERO.getField();
      double double1 = complex5.getArgument();
      Complex complex9 = complex8.createComplex(0.0, (-1491.55596487593));
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex10.INF.reciprocal();
      Complex complex12 = complex3.createComplex(0.0, Double.POSITIVE_INFINITY);
      Object object0 = complex5.readResolve();
      Complex complex13 = complex6.createComplex(0.0, (-1491.55596487593));
      Complex complex14 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.asin();
      String string0 = complex0.NaN.toString();
      Complex complex5 = Complex.valueOf((-775.7724408829163));
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-329.518), 0.0);
      Complex complex1 = Complex.ONE;
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.ONE.asin();
      double double0 = complex1.INF.abs();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex4.I.pow(complex0);
      Complex complex7 = complex6.I.multiply((-329.518));
      Complex complex8 = complex1.divide(complex3);
      Complex complex9 = complex8.INF.log();
      Complex complex10 = complex0.add((-249.0));
      Complex complex11 = Complex.valueOf((-577.64042), (-3661.978463));
      Complex complex12 = complex5.cos();
      Complex complex13 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.pow(0.0);
      int int0 = complex2.hashCode();
      Complex complex4 = complex0.multiply(1073.0);
      double double0 = complex1.I.abs();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex5 = complex2.cosh();
      double double1 = complex2.getArgument();
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1629.4417776352, 1629.4417776352);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.pow((-1548.67905537));
      boolean boolean0 = complex0.equals("&%");
      Complex complex2 = complex0.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf((-885.8772));
      boolean boolean1 = complex2.isNaN();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.INF.exp();
      String string0 = complex5.INF.toString();
      try { 
        complex4.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.divide(complex1);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tan();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex3 = complex0.ZERO.pow(1369.1);
      Complex complex4 = complex3.I.tanh();
      List<Complex> list1 = complex2.I.nthRoot(17);
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex5.ONE.pow(complex0);
      Complex complex7 = complex2.negate();
      Complex complex8 = Complex.valueOf((double) 17, (double) 17);
      Complex complex9 = complex2.multiply(complex0);
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.I.createComplex(0.0, 0.0);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.I.add(3445.288825663);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex5.multiply(0);
      boolean boolean0 = complex0.equals(complex5);
      Complex complex8 = complex7.multiply(complex5);
      double double0 = complex8.getReal();
      double double1 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1520.4697));
      Complex complex1 = Complex.valueOf(3809.2837);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.multiply((-1520.4697));
      Complex complex4 = complex2.INF.subtract(6.283185307179586);
      double double0 = complex1.getImaginary();
      Complex complex5 = complex3.ONE.add(complex0);
      Complex complex6 = complex3.createComplex((-575.4907), 0.0);
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex2.divide(complex6);
      Complex complex9 = complex0.asin();
      Complex complex10 = complex3.atan();
      String string0 = complex2.toString();
      Complex complex11 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1900.2), 2767.69755810814);
      Complex complex1 = complex0.multiply((-448));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.NaN.pow(complex0);
      double double0 = complex0.getReal();
      Complex complex6 = complex3.createComplex((-1900.2), Double.NaN);
      Complex complex7 = complex6.add(Double.NaN);
      Complex complex8 = complex1.subtract(complex4);
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1850.715, 1850.715);
      Complex complex1 = complex0.NaN.atan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = Complex.valueOf(2419.6, (-1008.997074005166));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.valueOf(1.0);
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.INF.subtract(1.0);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.ZERO.multiply(0.0);
      Object object0 = complex3.NaN.readResolve();
      String string0 = complex0.toString();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ONE.pow(1.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.NaN.multiply(complex1);
      double double0 = Double.NaN;
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.subtract(Double.NaN);
      Complex complex4 = complex0.I.multiply(0.0);
      Complex complex5 = complex1.ONE.pow(complex3);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.sinh();
      Object object0 = new Object();
      Complex complex2 = complex0.I.tan();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.I.multiply(961.5);
      Complex complex4 = Complex.valueOf((-1.0), Double.NaN);
      double double1 = complex4.I.abs();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex0.asin();
      double double2 = complex5.abs();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex5.pow(961.5);
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1666.25304, (-3018.590393));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.multiply(1);
      Complex complex6 = complex4.log();
      Complex complex7 = complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1850.715, 1850.715);
      Complex complex1 = complex0.NaN.atan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2466.531324), (-221.5323762849));
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.subtract((-2466.531324));
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex1.ONE.conjugate();
      double double1 = complex0.NaN.abs();
      Complex complex3 = complex0.divide(4421.7284);
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex0.I.sinh();
      Object object1 = complex3.INF.readResolve();
      Complex complex6 = complex3.INF.multiply(complex0);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex7.ZERO.subtract(Double.NaN);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex1.conjugate();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex12.ZERO.divide(complex6);
      Complex complex14 = complex13.ONE.reciprocal();
      String string0 = complex6.toString();
      Complex complex15 = complex4.exp();
      Complex complex16 = complex6.multiply(complex2);
      Complex complex17 = complex11.conjugate();
      String string1 = complex16.toString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-3097.071), (-3097.071));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.NaN.exp();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.sqrt();
      double double0 = complex0.abs();
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex5.ZERO.tanh();
      Complex complex9 = complex8.ZERO.asin();
      List<Complex> list0 = complex4.nthRoot(7);
      Complex complex10 = complex0.INF.tanh();
      Object object0 = complex5.readResolve();
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex8.multiply((-1666.0248127));
      Complex complex14 = complex9.sqrt();
      Complex complex15 = complex3.subtract(2355.319015);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract((-2140.5469363518805));
      Complex complex2 = Complex.valueOf((-2140.5469363518805));
      double double0 = complex0.ZERO.getArgument();
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.ONE.subtract((-2140.5469363518805));
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex0.subtract((-2140.5469363518805));
      Complex complex9 = complex1.asin();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex3.I.divide(0.0);
      Complex complex11 = complex8.reciprocal();
      double double1 = complex11.I.getArgument();
      boolean boolean0 = complex5.isInfinite();
      Complex complex12 = complex5.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex13 = complex3.multiply(complex8);
      Complex complex14 = complex1.conjugate();
      Complex complex15 = complex2.cos();
      Complex complex16 = complex5.exp();
      Complex complex17 = complex13.createComplex(0.0, 0.0);
      Complex complex18 = complex1.sinh();
      Complex complex19 = complex13.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.I.log();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = Complex.valueOf(1141.945);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex3.asin();
      Object object0 = complex2.I.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex8.INF.atan();
      Complex complex11 = complex2.multiply(complex7);
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex12.I.cos();
      Complex complex14 = complex0.pow(complex11);
      Complex complex15 = complex0.subtract(complex3);
      Complex complex16 = complex15.log();
      Complex complex17 = complex16.ZERO.multiply((-180));
      Complex complex18 = new Complex((-169.703));
      Complex complex19 = complex18.divide(complex1);
      Complex complex20 = complex1.I.asin();
      ComplexField complexField1 = complex18.ONE.getField();
      Complex complex21 = complex16.multiply(complex18);
      try { 
        complex14.nthRoot((-180));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -180
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.multiply(1457.006);
      double double0 = complex1.getReal();
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex4.NaN.subtract(0.0);
      List<Complex> list0 = complex3.I.nthRoot(724);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = Complex.valueOf(1457.006);
      Complex complex8 = complex3.divide(complex2);
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex9.INF.log();
      Complex complex12 = complex11.ONE.pow(complex9);
      Complex complex13 = complex6.exp();
      Complex complex14 = complex8.tanh();
      Complex complex15 = complex1.tanh();
      Complex complex16 = complex7.tanh();
      Object object0 = complex0.readResolve();
      Complex complex17 = complex13.ZERO.pow(complex5);
      Complex complex18 = complex9.pow(605.0);
      Complex complex19 = complex14.subtract(273.69823);
      Complex complex20 = complex14.log();
      String string0 = complex14.toString();
      ComplexField complexField0 = complex8.getField();
      double double1 = complex13.getReal();
      Complex complex21 = complex20.sinh();
      double double2 = complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.ZERO.pow(complex3);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.I.tan();
      Complex complex10 = complex9.NaN.multiply(complex1);
      Complex complex11 = Complex.valueOf(125.12);
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.sqrt1z();
      boolean boolean0 = complex4.equals(complex12);
      Complex complex14 = complex2.INF.tan();
      int int0 = complex12.hashCode();
      Complex complex15 = Complex.valueOf(125.12, 0.0);
      Complex complex16 = complex3.divide(complex15);
      Complex complex17 = complex16.sqrt();
      double double0 = complex5.getReal();
      double double1 = complex11.getImaginary();
      Object object0 = complex6.readResolve();
      Complex complex18 = Complex.valueOf(0.0, 1553.9430985);
      Complex complex19 = complex11.createComplex(0.0, 1159.0);
      Complex complex20 = complex5.tanh();
      boolean boolean1 = complex20.equals(complex14);
      Complex complex21 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.sin();
      int int0 = complex1.ONE.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = Complex.valueOf((-4815.7794));
      Complex complex4 = complex0.ZERO.multiply(complex1);
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.tan();
      int int1 = complex3.hashCode();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.NaN.divide((-4815.7794));
      String string0 = complex6.toString();
      Complex complex8 = complex3.add(2285.3206399271);
      boolean boolean0 = complex8.isInfinite();
      double double2 = complex3.getImaginary();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex6.subtract(complex9);
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.I.subtract(complex0);
      Object object0 = complex0.I.readResolve();
      Complex complex4 = complex0.INF.add(complex1);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.subtract((double) 37);
      Complex complex7 = complex5.NaN.createComplex(4.3136475849391444E-256, 4.3136475849391444E-256);
      Complex complex8 = complex5.NaN.multiply(37);
      Complex complex9 = complex8.ONE.divide(2742.9777029);
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex5.INF.subtract(complex10);
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = Complex.valueOf(0.22704219818115234);
      Complex complex14 = complex12.ONE.subtract(complex13);
      Complex complex15 = complex12.sqrt();
      Complex complex16 = complex15.INF.createComplex(37, 4.3136475849391444E-256);
      Complex complex17 = complex12.sinh();
      Complex complex18 = complex17.ONE.add(complex9);
      double double0 = complex1.getImaginary();
      Complex complex19 = complex1.log();
      Complex complex20 = complex6.atan();
      Object object1 = complex3.readResolve();
      Complex complex21 = complex6.tanh();
      Complex complex22 = complex5.sin();
      Complex complex23 = complex3.negate();
      Complex complex24 = complex7.subtract(9.544642884951585E-145);
      Complex complex25 = complex10.pow((-4490.0));
      String string0 = complex19.toString();
      Complex complex26 = complex8.negate();
      Complex complex27 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex1.sqrt();
      String string0 = complex1.INF.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.INF.add(complex3);
      Complex complex5 = complex4.NaN.divide(complex3);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex0.add(complex3);
      double double0 = complex3.getReal();
      Complex complex8 = complex1.sin();
  }
}
