/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:18:00 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(341.7409709914656, 341.7409709914656);
      Complex complex1 = new Complex(341.7409709914656, 4579.1719121462575);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.multiply(1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 685.99201734087);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.ZERO.cos();
      double double0 = complex4.getArgument();
      Complex complex5 = complex1.sqrt();
      boolean boolean0 = complex3.equals(complex4);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex5.ONE.negate();
      Complex complex8 = complex6.ONE.multiply(685.99201734087);
      Object object0 = complex8.ZERO.readResolve();
      Complex complex9 = complex2.ZERO.divide(0.0);
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex3.conjugate();
      double double1 = complex0.I.abs();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex11.subtract(0.0);
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      double double2 = complex6.getArgument();
      Complex complex15 = complex2.asin();
      Complex complex16 = complex6.createComplex((-3.144331429489291E-10), 0.0);
      Complex complex17 = complex16.divide(0.0);
      double double3 = complex6.getImaginary();
      Complex complex18 = complex0.negate();
      Complex complex19 = complex7.asin();
      double double4 = complex19.getArgument();
      String string0 = complex17.toString();
      Complex complex20 = complex9.atan();
      Complex complex21 = complex6.asin();
      Complex complex22 = complex4.log();
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.divide(Double.NaN);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2539.4631063089323));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = Complex.valueOf((-4175.468907293389), (-4175.468907293389));
      Complex complex5 = complex2.ZERO.tan();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex5.I.reciprocal();
      Complex complex8 = complex1.ZERO.log();
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex0.subtract(complex1);
      Complex complex11 = complex0.ZERO.subtract(0.0);
      Complex complex12 = complex10.NaN.subtract(complex8);
      Complex complex13 = complex8.INF.createComplex((-2539.4631063089323), 1599.624537952108);
      Complex complex14 = complex1.divide((-2539.4631063089323));
      boolean boolean0 = complex8.isInfinite();
      double double0 = complex10.getImaginary();
      Complex complex15 = complex14.reciprocal();
      Complex complex16 = complex15.ZERO.conjugate();
      Complex complex17 = complex12.cos();
      Complex complex18 = complex15.ZERO.negate();
      Complex complex19 = complex14.multiply((-972));
      String string0 = complex15.toString();
      Complex complex20 = complex16.reciprocal();
      Complex complex21 = complex20.add(complex10);
      int int0 = complex0.NaN.hashCode();
      Complex complex22 = complex21.tan();
      Complex complex23 = complex0.log();
      Complex complex24 = complex14.log();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.multiply((-21.33));
      Complex complex2 = complex1.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.add(complex2);
      double double0 = complex1.getArgument();
      String string0 = complex0.toString();
      List<Complex> list0 = complex3.ZERO.nthRoot(1454);
      Complex complex4 = complex1.I.negate();
      Complex complex5 = complex3.multiply(1805);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.multiply(359.67816);
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex0.ZERO.tan();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex3.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.log();
      int int0 = complex3.hashCode();
      String string1 = complex6.toString();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.pow(complex0);
      Complex complex9 = complex6.NaN.add(complex3);
      Complex complex10 = complex7.ZERO.sqrt1z();
      Complex complex11 = complex6.add(359.67816);
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex10.log();
      Complex complex15 = complex14.ONE.add(0.0);
      Complex complex16 = complex14.sin();
      Complex complex17 = complex10.reciprocal();
      Complex complex18 = complex1.tan();
      Complex complex19 = complex17.cos();
      Complex complex20 = complex2.cosh();
      Complex complex21 = complex8.reciprocal();
      Complex complex22 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1.102583646774292);
      double double0 = complex0.ZERO.getArgument();
      int int0 = complex0.hashCode();
      try { 
        complex0.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-46.7145294232));
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3761.57587994256));
      Complex complex1 = complex0.ZERO.multiply((-3761.57587994256));
      Complex complex2 = complex0.NaN.subtract((-3761.57587994256));
      Complex complex3 = complex0.subtract(149.703823941);
      Complex complex4 = complex3.ZERO.multiply(7);
      Complex complex5 = complex3.multiply((-123.512792));
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.I.subtract(0.0);
      Complex complex8 = complex6.INF.divide(complex0);
      Complex complex9 = complex2.log();
      Complex complex10 = complex9.INF.exp();
      double double0 = 20.0;
      Complex complex11 = complex9.I.divide(20.0);
      ComplexField complexField0 = complex9.getField();
      Complex complex12 = complex5.divide(complex6);
      try { 
        complex12.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      double double1 = complex0.abs();
      double double2 = complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex3.NaN.add(4370.0);
      boolean boolean0 = complex0.equals(complex1);
      String string0 = complex1.INF.toString();
      Complex complex7 = complex0.NaN.sinh();
      Complex complex8 = complex1.ONE.reciprocal();
      Complex complex9 = complex7.I.add(complex6);
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex7.NaN.acos();
      Complex complex11 = complex7.exp();
      Complex complex12 = complex3.ZERO.sin();
      Complex complex13 = complex0.sin();
      Complex complex14 = complex13.atan();
      boolean boolean1 = complex0.isNaN();
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex15 = complex6.log();
      Complex complex16 = complex12.multiply(complex8);
      Object object0 = complex16.INF.readResolve();
      boolean boolean2 = complex6.isInfinite();
      boolean boolean3 = complex6.isNaN();
      Complex complex17 = complex16.exp();
      Complex complex18 = complex3.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.divide((double) 17);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.NaN.reciprocal();
      Complex complex5 = complex4.ONE.createComplex((-2637.0), 3547.6853826648);
      Complex complex6 = complex3.I.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.ONE.add(complex1);
      Complex complex9 = complex1.multiply(complex3);
      Complex complex10 = complex1.ONE.reciprocal();
      Complex complex11 = complex3.subtract(complex9);
      Complex complex12 = complex11.ONE.divide((double) 17);
      Complex complex13 = Complex.valueOf(3006.119852, (-2240.878139681818));
      Complex complex14 = complex1.negate();
      Complex complex15 = complex2.multiply(3006.119852);
      Complex complex16 = Complex.I;
      boolean boolean0 = complex1.equals(complex16);
      Complex complex17 = complex3.asin();
      Complex complex18 = complex1.reciprocal();
      boolean boolean1 = complex17.isInfinite();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.I.add(2.0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.subtract(1.0);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex4.I.multiply(1387);
      Complex complex7 = complex2.NaN.sqrt1z();
      int int0 = complex1.hashCode();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex3.add(0.0);
      boolean boolean0 = complex1.equals(complex6);
      Complex complex10 = complex5.sqrt();
      boolean boolean1 = complex9.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1.5652761725518397E69), (-1.5652761725518397E69));
      Complex complex1 = complex0.ZERO.subtract(1554.858);
      Complex complex2 = complex0.I.reciprocal();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.add((-450.0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-7.094204160127543E-8), 904.51);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex1.pow(Double.NaN);
      double double1 = complex1.getReal();
      Complex complex4 = complex0.add((-7.094204160127543E-8));
      Complex complex5 = complex4.ZERO.multiply((-65));
      Complex complex6 = complex4.ONE.cosh();
      int int0 = complex0.hashCode();
      Complex complex7 = complex4.sqrt1z();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex7.reciprocal();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex0.add((-1.735366061128156E-8));
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = Complex.valueOf((-1.735366061128156E-8));
      Complex complex12 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      List<Complex> list0 = complex0.ONE.nthRoot(423);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.I.sinh();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.multiply(2084);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.subtract(436.948);
      Complex complex4 = complex3.INF.asin();
      List<Complex> list0 = complex4.NaN.nthRoot(2084);
      double double1 = complex3.getArgument();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex5.multiply(1047.84);
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex7.ONE.multiply(436.948);
      Complex complex10 = complex5.divide(0.0);
      Complex complex11 = complex0.multiply(2084);
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex0.createComplex(20.0, Double.POSITIVE_INFINITY);
      Complex complex15 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-964.478));
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.INF.subtract(complex1);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.atan();
      String string0 = complex7.I.toString();
      String string1 = complex0.ZERO.toString();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex7.multiply((-964.478));
      Complex complex9 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex10 = complex9.multiply((-1838));
      Object object1 = complex0.readResolve();
      Complex complex11 = complex7.add((-964.478));
      Complex complex12 = complex0.sin();
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex12.ONE.asin();
      Complex complex15 = Complex.valueOf(4922.047801678604, (-450.5087469561109));
      Complex complex16 = complex0.cosh();
      Complex complex17 = complex16.tan();
      double double0 = complex17.I.abs();
      ComplexField complexField0 = complex9.getField();
      Complex complex18 = complex11.tan();
      Complex complex19 = complex0.multiply(2.5243410574836706E106);
      List<Complex> list0 = complex8.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.684319257736206, 2.276357074042286E146);
      Complex complex1 = complex0.NaN.divide(2.276357074042286E146);
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex7.tan();
      Object object0 = complex4.ONE.readResolve();
      Complex complex9 = complex6.NaN.multiply(1756);
      Complex complex10 = complex9.INF.tan();
      Object object1 = complex7.I.readResolve();
      Complex complex11 = complex5.sin();
      double double0 = complex6.ONE.abs();
      Complex complex12 = complex11.INF.sinh();
      Complex complex13 = complex0.pow(complex4);
      double double1 = complex11.getReal();
      Complex complex14 = complex13.sqrt1z();
      Complex complex15 = complex13.reciprocal();
      Complex complex16 = complex13.ONE.divide(complex0);
      double double2 = complex0.abs();
      double double3 = complex15.getArgument();
      Complex complex17 = complex8.exp();
      Complex complex18 = complex0.acos();
      Complex complex19 = complex7.add((-2129.159676749053));
      Complex complex20 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.I.add(1228.13884928);
      Complex complex6 = complex0.reciprocal();
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex1.atan();
      double double0 = complex0.getArgument();
      Complex complex9 = complex0.ZERO.subtract(complex2);
      Complex complex10 = complex8.NaN.sinh();
      Complex complex11 = Complex.valueOf((-6.284125161007433E-8));
      Complex complex12 = complex11.INF.cosh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(218.82571883132, 0.0);
      Complex complex1 = complex0.createComplex(1007.9404952, (-718.97));
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.valueOf(894.175325451424);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1252.78827));
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex2.INF.tan();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex2.ONE.add(complex0);
      Complex complex7 = complex0.multiply(complex1);
      double double1 = complex7.INF.abs();
      Complex complex8 = complex6.multiply(0);
      Complex complex9 = complex8.ONE.multiply(6.187780443461367E146);
      Complex complex10 = complex6.multiply(complex0);
      Complex complex11 = complex0.divide(complex8);
      Complex complex12 = complex11.NaN.asin();
      Complex complex13 = complex6.pow((-1252.78827));
      Complex complex14 = complex1.conjugate();
      Complex complex15 = Complex.valueOf((double) 0);
      Complex complex16 = complex13.ONE.cosh();
      Complex complex17 = complex13.subtract(0.0);
      Complex complex18 = complex15.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1981.6857951, 1981.6857951);
      List<Complex> list0 = complex0.nthRoot(145);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.NaN.sqrt1z();
      ComplexField complexField0 = complex1.I.getField();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      double double0 = 0.0;
      Complex complex2 = complex0.I.createComplex(191.91075, 0.0);
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf(0.041666666666621166, Double.POSITIVE_INFINITY);
      try { 
        complex2.ONE.nthRoot((-1017));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,017
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 979.235);
      Complex complex1 = complex0.ZERO.atan();
      Object object0 = complex1.NaN.readResolve();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.reciprocal();
      double double0 = complex0.ZERO.getArgument();
      Object object1 = complex0.ZERO.readResolve();
      Complex complex4 = complex3.createComplex(0.0, 2097.362);
      Complex complex5 = complex3.ONE.divide(0.0);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.tan();
      int int0 = complex7.INF.hashCode();
      Complex complex8 = complex7.ZERO.subtract(979.235);
      Complex complex9 = complex8.ZERO.multiply((-1709));
      Complex complex10 = complex9.ZERO.pow(complex5);
      Complex complex11 = complex8.INF.log();
      Complex complex12 = complex11.NaN.pow(979.235);
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex2.subtract(complex5);
      Complex complex15 = complex12.atan();
      Complex complex16 = complex9.reciprocal();
      Complex complex17 = complex6.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(133.5770354785);
      Complex complex1 = complex0.add(512.32188162);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex1.I.negate();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex6 = complex1.ZERO.pow(512.32188162);
      Complex complex7 = complex0.divide(0.0);
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex7.I.add(complex0);
      String string0 = complex1.toString();
      ComplexField complexField2 = complex1.ZERO.getField();
      Complex complex9 = complex3.multiply(0.0);
      Complex complex10 = complex9.ZERO.multiply((-2709));
      Complex complex11 = complex0.tan();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex12.INF.multiply(complex6);
      boolean boolean0 = complex3.equals(complex12);
      Object object0 = complex12.readResolve();
      Complex complex14 = complex7.acos();
      Complex complex15 = complex0.negate();
      double double0 = complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      double double0 = 0.0;
      Complex complex2 = complex0.I.createComplex(191.91075, 0.0);
      try { 
        complex2.ONE.nthRoot((-1017));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,017
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(2203.201558960638);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex3.NaN.add(645.22);
      Complex complex5 = complex3.I.add(complex0);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex3.I.add(complex2);
      Complex complex8 = complex1.INF.pow(0.17431432008743286);
      ComplexField complexField0 = complex8.ZERO.getField();
      Complex complex9 = complex2.INF.subtract(0.17431432008743286);
      double double1 = complex6.getArgument();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex3.cosh();
      Complex complex14 = complex1.createComplex(0.17431432008743286, 0.0);
      Complex complex15 = complex14.atan();
      Complex complex16 = complex14.I.negate();
      Object object0 = complex14.readResolve();
      Complex complex17 = complex6.multiply(0);
      Complex complex18 = Complex.valueOf(0.0, 2203.201558960638);
      Complex complex19 = complex3.subtract(complex18);
      Complex complex20 = complex10.asin();
      Complex complex21 = complex5.divide(complex11);
      Complex complex22 = complex14.divide(complex10);
      double double2 = complex17.getImaginary();
      Complex complex23 = complex11.asin();
      Object object1 = complex23.INF.readResolve();
      double double3 = complex15.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-316.9636267655));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.negate();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.divide(4106.141);
      String string1 = complex4.NaN.toString();
      Complex complex5 = complex0.add((-593.72894450242));
      Complex complex6 = complex5.conjugate();
      double double0 = complex0.getArgument();
      Complex complex7 = complex5.ZERO.negate();
      Complex complex8 = complex0.divide(3218.81579514);
      Complex complex9 = complex6.subtract(complex4);
      Complex complex10 = complex1.ZERO.exp();
      Complex complex11 = complex2.ONE.createComplex(3.141592653589793, 4106.141);
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex6.exp();
      Complex complex14 = complex2.pow(complex8);
      Object object0 = complex9.readResolve();
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex7.sqrt();
      Complex complex17 = complex16.asin();
      Complex complex18 = complex14.multiply(complex15);
      Complex complex19 = Complex.valueOf(370.1077, 370.1077);
      Complex complex20 = complex4.subtract(complex19);
      Complex complex21 = Complex.valueOf(3218.81579514, (-4591.987961));
      Complex complex22 = complex19.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-464.36432128105), (-464.36432128105));
      Complex complex1 = complex0.ZERO.conjugate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.INF.add((-464.36432128105));
      Complex complex5 = complex3.I.atan();
      Complex complex6 = complex5.ZERO.createComplex(0.0, 0.0);
      Complex complex7 = complex3.INF.add(complex0);
      Complex complex8 = complex2.I.multiply(complex1);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.pow(complex2);
      Complex complex11 = complex10.add((-464.36432128105));
      Complex complex12 = complex9.I.subtract((-1317.6402481));
      ComplexField complexField0 = complex11.getField();
      double double0 = complex9.getImaginary();
      Complex complex13 = complex9.divide(complex11);
      Complex complex14 = complex0.multiply(complex9);
      boolean boolean0 = complex2.isNaN();
      List<Complex> list1 = complex10.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf((-1383.9841904586765), 0.0);
      Complex complex2 = complex1.ZERO.add(0.0);
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.INF.acos();
      Complex complex5 = complex3.add(0.0);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex2.sin();
      Complex complex9 = complex4.pow(complex1);
      Complex complex10 = complex3.log();
      Complex complex11 = complex1.multiply((-1));
      Complex complex12 = complex3.divide(0.46486347913742065);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1226166967029073E57, 2.1226166967029073E57);
      int int0 = (-1134);
      Complex complex1 = complex0.ONE.multiply((-1134));
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.divide((double) (-1134));
      Complex complex4 = complex0.cos();
      try { 
        complex4.nthRoot((-1134));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,134
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(2.2867766559333004E-7);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.INF.add(complex1);
      String string0 = complex3.ZERO.toString();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.equals("org.apache.commons.math3.complex.Complex");
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-1.0), 0.0);
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.reciprocal();
      double double0 = complex3.getImaginary();
      double double1 = complex3.getReal();
      double double2 = complex2.NaN.abs();
      Complex complex4 = complex3.multiply((-823));
      String string0 = complex2.toString();
      Complex complex5 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex0.ZERO.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.47402387857437134, (-89.761352505294));
      Complex complex1 = new Complex((-89.761352505294));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.ZERO.conjugate();
      String string0 = complex3.INF.toString();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex2.createComplex(0.47402387857437134, 0.47402387857437134);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex7 = complex3.log();
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex5.ZERO.add(1395.109198122);
      Complex complex9 = complex7.I.tan();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex7.NaN.multiply(complex5);
      Complex complex12 = complex3.multiply(complex2);
      Complex complex13 = complex1.acos();
      Complex complex14 = complex7.add(0.0);
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.createComplex(20.0, 3.2081817253680657E168);
      Complex complex3 = complex2.ZERO.pow(20.0);
      Complex complex4 = complex3.I.createComplex(0.0, 3.2081817253680657E168);
      Complex complex5 = Complex.valueOf(3.2081817253680657E168, 20.0);
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex2.ONE.tan();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.INF.subtract(complex8);
      Complex complex10 = complex7.I.sqrt();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex7.ZERO.tanh();
      Complex complex13 = complex0.INF.negate();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex3.hashCode();
      Complex complex14 = Complex.valueOf(20.0, 3.2081817253680657E168);
      Complex complex15 = complex6.multiply((-1338));
      Complex complex16 = complex13.subtract(3.2081817253680657E168);
      Complex complex17 = complex16.ZERO.tan();
      Complex complex18 = complex16.ZERO.subtract(20.0);
      Complex complex19 = complex2.cos();
      Complex complex20 = complex15.atan();
      Complex complex21 = complex13.pow((double) (-1338));
      Complex complex22 = complex17.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1176.516103, 20.0);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.ONE.subtract(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex3 = complex2.I.subtract((double) 1);
      Complex complex4 = complex0.createComplex(2.2513351440429688, 0.0);
      Complex complex5 = complex0.I.subtract(0.0);
      double double0 = complex4.getArgument();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.valueOf(2169.628);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.sin();
      String string0 = complex2.toString();
      Complex complex5 = complex0.conjugate();
      String string1 = complex5.I.toString();
      Complex complex6 = complex5.NaN.multiply(complex4);
      Complex complex7 = complex2.pow(2595.4554318514724);
      Complex complex8 = complex7.multiply(97);
      Complex complex9 = complex2.log();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex0.multiply((-3678));
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = Complex.valueOf(0.0, (-76.201));
      Complex complex14 = complex11.add(complex13);
      Complex complex15 = Complex.valueOf(2595.4554318514724);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2646.3493645);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.tanh();
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.NaN.multiply(2646.3493645);
      String string1 = complex5.ZERO.toString();
      Complex complex6 = complex0.acos();
      double double0 = complex4.INF.getArgument();
      Complex complex7 = complex0.log();
      String string2 = complex0.toString();
      Complex complex8 = complex0.subtract(2646.3493645);
      Complex complex9 = new Complex(2646.3493645, 2646.3493645);
      Complex complex10 = complex1.add(complex9);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.I.pow(1767.93916);
      Complex complex4 = Complex.valueOf(1767.93916);
      double double0 = complex0.getArgument();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.I.pow(complex5);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.I.pow(complex4);
      Complex complex9 = complex1.add(complex7);
      double double1 = complex1.getReal();
      Complex complex10 = Complex.valueOf(1767.93916);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1265.45), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-2485.763753398));
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.sinh();
      String string0 = complex3.ONE.toString();
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex3.ZERO.add(complex4);
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex4.add(complex0);
      Complex complex9 = complex3.cos();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(381.2);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.ONE.multiply(381.2);
      Complex complex4 = complex3.multiply((-294.25160793));
      Complex complex5 = complex0.I.tan();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex5.multiply(complex0);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.log();
      Complex complex11 = complex7.pow(complex8);
      Complex complex12 = complex11.divide((-2108.85524));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-246.866339));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex4.INF.subtract((-2616.0458085861));
      Complex complex6 = complex5.NaN.reciprocal();
      List<Complex> list0 = complex1.INF.nthRoot(1);
      double double0 = complex3.I.getArgument();
      Complex complex7 = complex3.NaN.tan();
      String string0 = complex7.toString();
      Complex complex8 = complex0.atan();
      double double1 = complex8.getReal();
      double double2 = complex8.abs();
      Complex complex9 = complex0.multiply(1097);
      Complex complex10 = complex9.ZERO.divide(complex0);
      Complex complex11 = complex1.add(complex3);
      Complex complex12 = complex11.add(Double.NaN);
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex12.sinh();
      Complex complex15 = complex13.atan();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.INF.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = new Complex(0.0, (-1097.2438245013));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex3.NaN.sin();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex0.ZERO.pow(0.0);
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = Complex.valueOf(1973.02182);
      Complex complex8 = complex6.INF.asin();
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex2.ZERO.sqrt1z();
      Complex complex11 = complex10.ONE.divide((-4.0329811));
      Complex complex12 = complex2.ONE.sinh();
      Complex complex13 = Complex.valueOf(0.0, (-813.889));
      Complex complex14 = complex13.ZERO.sqrt();
      Object object1 = complex9.readResolve();
      Complex complex15 = complex2.subtract((-813.889));
      Complex complex16 = complex1.divide(complex9);
      double double0 = complex1.abs();
      Complex complex17 = complex1.sqrt1z();
      boolean boolean1 = complex8.equals(complex2);
      try { 
        complex5.nthRoot((-640));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -640
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1.8995553996578656E216);
      Complex complex1 = complex0.ONE.createComplex((-2792.7656768), (-2792.7656768));
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.createComplex(1.8995553996578656E216, 1.8995553996578656E216);
      ComplexField complexField0 = complex4.NaN.getField();
      Object object0 = complex4.I.readResolve();
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.multiply(1.8995553996578656E216);
      double double0 = complex5.abs();
      Complex complex6 = complex0.conjugate();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex0.acos();
      double double0 = complex3.getArgument();
      Complex complex4 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(632.895058906654);
      Complex complex2 = complex0.createComplex(632.895058906654, 632.895058906654);
      int int0 = complex2.hashCode();
      List<Complex> list0 = complex1.nthRoot(1945);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex0.INF.asin();
      int int0 = complex7.NaN.hashCode();
      Complex complex8 = complex1.subtract(complex5);
      Complex complex9 = complex0.multiply(1758);
      Complex complex10 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2686.72);
      Complex complex1 = complex0.INF.multiply(203);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.exp();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.toString();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ONE.subtract(complex3);
      Complex complex5 = complex4.INF.multiply(complex3);
      Complex complex6 = complex2.INF.pow(0.0);
      Complex complex7 = complex1.ONE.exp();
      Complex complex8 = complex7.I.multiply(complex1);
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex0.ZERO.sinh();
      Complex complex11 = complex10.I.cosh();
      Complex complex12 = complex0.conjugate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex13 = complex2.reciprocal();
      Complex complex14 = complex13.multiply(complex12);
      double double0 = complex1.getImaginary();
      Complex complex15 = complex14.acos();
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.ZERO.subtract(0.0);
      Complex complex4 = new Complex((-887.71784623));
      Complex complex5 = complex1.I.pow(complex4);
      Complex complex6 = complex0.NaN.log();
      Complex complex7 = complex6.NaN.add((-1254.2956205));
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.I.pow(complex4);
      Complex complex10 = complex8.ONE.divide(complex6);
      Complex complex11 = Complex.valueOf(113.01, (-1254.2956205));
      Complex complex12 = Complex.I;
      Complex complex13 = complex0.divide(complex12);
      Complex complex14 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex14);
      Complex complex15 = complex6.tanh();
      Complex complex16 = complex14.multiply((-322));
      double double0 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.exp();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-3059.3884));
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.divide(1.0);
      Complex complex4 = complex3.ONE.subtract(0.6299605249474366);
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2161.38));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex1.subtract((-280.385));
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex5.NaN.multiply(complex0);
      Complex complex7 = complex3.ONE.tanh();
      Complex complex8 = complex6.INF.sqrt();
      Complex complex9 = complex0.multiply((-3342));
      double double0 = complex9.ONE.getArgument();
      Complex complex10 = complex4.ONE.log();
      Complex complex11 = complex4.add(0.0);
      Complex complex12 = complex11.atan();
      Complex complex13 = complex11.multiply(complex10);
      Complex complex14 = complex9.multiply((-3342));
      boolean boolean0 = complex5.isInfinite();
      ComplexField complexField0 = complex11.getField();
      double double1 = complex11.getArgument();
      double double2 = complex0.getArgument();
      Complex complex15 = complex3.negate();
      Complex complex16 = complex2.multiply((-633.0));
      Complex complex17 = complex16.ONE.tan();
      double double3 = complex4.abs();
      Complex complex18 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(259.966995, 259.966995);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.createComplex(1750.294193520594, Double.NaN);
      Complex complex7 = complex5.I.pow((-3032.3942));
      Complex complex8 = Complex.valueOf(259.966995, 147.0);
      Complex complex9 = complex4.createComplex((-1317.95516739), 147.0);
      Complex complex10 = complex2.atan();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex1.INF.atan();
      Complex complex13 = complex11.NaN.negate();
      Complex complex14 = complex3.add((-1317.95516739));
      Complex complex15 = complex14.multiply(259.966995);
      Complex complex16 = complex8.pow(complex15);
      String string0 = complex0.toString();
      Complex complex17 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1.5218427181243896, 1.5218427181243896);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-515.513424), 1678.53066165);
      Complex complex1 = complex0.I.createComplex(0.0, (-515.513424));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.valueOf(0.32623589038848877, (double) 0);
      Complex complex3 = complex2.add(0.32623589038848877);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.NaN.subtract(complex4);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex0.ONE.sqrt1z();
      Complex complex8 = complex1.I.multiply(0);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex9.ONE.multiply((-486));
      List<Complex> list0 = complex8.NaN.nthRoot(1);
      Object object0 = complex1.NaN.readResolve();
      int int0 = complex0.hashCode();
      int int1 = complex0.hashCode();
      Complex complex11 = complex8.subtract(complex1);
      Complex complex12 = complex1.divide(complex2);
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.divide((-2007.1));
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4922.047801678604);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(1040.11670209, 0.0);
      Complex complex2 = Complex.valueOf(826.5077);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.ONE.cos();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.pow(305.36);
      double double1 = complex6.getArgument();
      Complex complex7 = complex6.ONE.sinh();
      double double2 = complex6.getArgument();
      Complex complex8 = complex1.divide(complex6);
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-1147.060552608857), (-3310.53144269));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.I.exp();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.multiply((-3310.53144269));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(634.9, 634.9);
      Complex complex1 = complex0.add(634.9);
      Complex complex2 = complex0.subtract(0.0);
      String string0 = complex2.INF.toString();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.add(634.9);
      Complex complex5 = complex2.reciprocal();
      int int0 = complex5.INF.hashCode();
      double double0 = complex5.getArgument();
      Complex complex6 = complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.NaN.divide(1197.459955);
      Complex complex2 = complex0.createComplex((-1098.390502), (-1098.390502));
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex2.divide(complex0);
      double double0 = complex6.NaN.abs();
      Complex complex7 = complex2.NaN.cos();
      Complex complex8 = complex6.I.multiply(852);
      String string0 = complex1.toString();
      String string1 = complex6.toString();
      Object object1 = complex1.readResolve();
      Complex complex9 = Complex.valueOf(1197.459955, Double.NaN);
      Complex complex10 = complex7.I.acos();
      Complex complex11 = complex2.subtract(1197.459955);
      Complex complex12 = complex0.tan();
      Complex complex13 = complex7.divide(complex9);
      Complex complex14 = complex7.divide(complex10);
      Complex complex15 = complex12.add(complex9);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.I.cosh();
      double double1 = complex0.getImaginary();
      List<Complex> list0 = complex3.nthRoot(157);
      boolean boolean0 = complex2.isInfinite();
      double double2 = complex0.getArgument();
      Complex complex5 = complex3.divide(4302.571221);
      Complex complex6 = complex1.tan();
      boolean boolean1 = complex0.isNaN();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex1.conjugate();
      double double3 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = 7.48533983136081E-196;
      Complex complex0 = new Complex(7.48533983136081E-196);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.NaN.cosh();
      try { 
        complex2.NaN.nthRoot((-218));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -218
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1837.56668397), (-1837.56668397));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.divide(complex1);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex0.pow(2485.802832163029);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.pow((-1.6471487337453832E-9));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.INF.divide(complex1);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-113.522), (-113.522));
      Complex complex2 = Complex.valueOf((-113.522), 0.0);
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.sqrt1z();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract((-3120.02159436339));
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-2407.17642672));
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.I.pow((-2407.17642672));
      Complex complex7 = complex0.cos();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.ZERO.pow((-2099.2));
      Complex complex10 = complex9.multiply(complex5);
      Complex complex11 = complex6.sin();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex12 = complex5.NaN.conjugate();
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex6.add(complex13);
      Complex complex15 = complex13.pow(1.0);
      Complex complex16 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.tanh();
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex4.pow(2923.518);
      double double0 = complex1.getArgument();
      Complex complex6 = complex0.multiply(0.7853981633974483);
      List<Complex> list0 = complex6.ZERO.nthRoot(252);
      Complex complex7 = complex3.multiply(complex2);
      Complex complex8 = complex7.sqrt1z();
      boolean boolean1 = complex8.isInfinite();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex5.add((-1904.2101167462));
      double double1 = complex6.getImaginary();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex4.add(2473.38995182);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(100.0216332288594);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex0.I.log();
      Complex complex6 = complex5.ONE.multiply(complex0);
      boolean boolean0 = complex3.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.NaN.nthRoot(2742);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex3.multiply((double) 2742);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.multiply(0.0);
      Complex complex8 = complex3.add(complex5);
      Complex complex9 = complex1.divide((-406.6));
      boolean boolean0 = complex2.isInfinite();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = (-3540.7401);
      double double1 = 4140.48055857;
      Complex complex0 = Complex.valueOf((-3540.7401), 4140.48055857);
      Complex complex1 = new Complex(4140.48055857, (-3540.7401));
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = Complex.valueOf((-3540.7401), 4140.48055857);
      double double2 = 4.4422779589171113E-190;
      // Undeclared exception!
      complex7.ONE.nthRoot(753287431);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex3.I.pow(0.0);
      Complex complex5 = complex1.ONE.conjugate();
      int int0 = complex5.hashCode();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex5.add(1083.0);
      Complex complex8 = complex0.INF.sqrt();
      Complex complex9 = Complex.valueOf(1.3055200576782227);
      Complex complex10 = complex0.reciprocal();
      String string0 = complex10.INF.toString();
      Complex complex11 = complex10.ZERO.sin();
      List<Complex> list0 = complex11.ZERO.nthRoot(167);
      Complex complex12 = complex1.add(complex0);
      Complex complex13 = complex12.I.negate();
      Complex complex14 = complex13.I.subtract(complex9);
      Complex complex15 = complex14.pow((double) 167);
      String string1 = complex3.toString();
      try { 
        complex0.nthRoot((-699));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -699
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1000.38477));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex((-1746.0), (-1746.0));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = complex5.INF.subtract(complex2);
      Complex complex8 = complex7.ZERO.sqrt();
      String string0 = complex4.toString();
      Complex complex9 = complex1.multiply(complex5);
      Complex complex10 = complex2.tan();
      Complex complex11 = complex10.INF.acos();
      Complex complex12 = complex10.I.multiply((-1000.38477));
      Complex complex13 = complex12.I.cos();
      Complex complex14 = complex10.I.asin();
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex3.exp();
      Complex complex17 = complex3.multiply(415.031);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.I.divide(0.0);
      ComplexField complexField1 = complex3.I.getField();
      Complex complex4 = complex1.NaN.pow(0.0);
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.pow(0.0);
      Complex complex7 = complex6.INF.cos();
      double double0 = complex6.NaN.getArgument();
      String string0 = complex0.toString();
      Complex complex8 = complex7.divide(complex2);
      Complex complex9 = complex8.ONE.multiply((-1250.621786359));
      Complex complex10 = complex4.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex11 = complex3.sqrt1z();
      Object object0 = complex3.readResolve();
      Complex complex12 = complex0.ZERO.asin();
      Complex complex13 = complex7.exp();
      Complex complex14 = complex1.atan();
      Complex complex15 = complex13.multiply(complex11);
      double double1 = complex2.getReal();
      Complex complex16 = complex10.subtract(199.59);
      Complex complex17 = complex4.divide(0.5403023058681398);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1628.6215), 217.5263363);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(217.5263363);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.multiply((-3109));
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = Complex.valueOf((double) (-3109));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.add((-1.0));
      Complex complex2 = complex0.INF.subtract(5.814040618670345E-62);
      Complex complex3 = complex2.INF.add(complex0);
      ComplexField complexField0 = complex3.getField();
      int int0 = complex2.hashCode();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex0.ONE.exp();
      Complex complex7 = complex2.multiply((-1.0));
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.INF.divide(5.814040618670345E-62);
      Complex complex11 = complex9.I.asin();
      Complex complex12 = complex4.atan();
      Complex complex13 = complex2.I.reciprocal();
      Complex complex14 = complex7.sin();
      Complex complex15 = complex12.INF.multiply(0.0);
      ComplexField complexField1 = complex8.getField();
      double double0 = complex7.getImaginary();
      Complex complex16 = Complex.valueOf(2317.94762031061);
      Complex complex17 = complex8.multiply((-5360));
      Complex complex18 = complex15.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1525.556));
      Complex complex1 = complex0.I.pow((-1525.556));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.INF.add(complex2);
      List<Complex> list0 = complex0.nthRoot(143);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex0.cos();
      double double0 = complex6.getArgument();
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex2.divide(complex6);
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex9.subtract(complex1);
      Complex complex14 = complex10.conjugate();
      Object object0 = new Object();
      boolean boolean1 = complex9.equals(object0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ONE.tan();
      double double1 = complex1.ONE.getArgument();
      Complex complex4 = complex0.multiply((-872));
      double double2 = complex0.getArgument();
      Complex complex5 = Complex.valueOf((double) (-872));
      Complex complex6 = complex5.INF.multiply(complex0);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.NaN.negate();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.NaN.divide(20.0);
      Complex complex3 = complex0.INF.multiply(20.0);
      Complex complex4 = complex0.tanh();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.NaN.acos();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex4.multiply(17);
      Complex complex8 = complex7.multiply(17);
      Complex complex9 = complex0.acos();
      Complex complex10 = complex4.createComplex((-1.0), (-629.563913611021));
      Complex complex11 = complex1.tanh();
  }
}
