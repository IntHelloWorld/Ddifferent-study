/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:18:00 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.log();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.ONE.cos();
      List<Complex> list0 = complex1.nthRoot(1419);
      Complex complex4 = complex1.createComplex(1419, 1587.0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex5.INF.multiply(Double.NaN);
      double double1 = complex7.ONE.abs();
      Complex complex8 = complex0.divide(Double.NaN);
      Complex complex9 = Complex.valueOf(Double.NaN, 0.0);
      int int0 = complex9.INF.hashCode();
      double double2 = complex0.getArgument();
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = complex10.NaN.multiply(complex9);
      Complex complex12 = complex1.add(4.5012079983352374E-164);
      Complex complex13 = complex5.NaN.conjugate();
      Complex complex14 = complex13.INF.pow((-8.009548754642203E231));
      Complex complex15 = complex12.ZERO.subtract((-2369.599144238524));
      Complex complex16 = complex12.INF.sqrt();
      int int1 = complex16.NaN.hashCode();
      Complex complex17 = complex12.NaN.multiply(1419);
      boolean boolean0 = complex10.isNaN();
      Complex complex18 = complex12.negate();
      Complex complex19 = complex8.negate();
      Complex complex20 = complex17.subtract((double) 1419);
      Complex complex21 = complex20.NaN.conjugate();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.asin();
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex4.I.conjugate();
      Complex complex7 = complex5.ONE.subtract((-705.050633985162));
      Complex complex8 = complex6.ZERO.sinh();
      double double0 = complex5.NaN.getArgument();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex0.subtract(Double.NaN);
      Complex complex11 = complex10.multiply((-536));
      Complex complex12 = complex11.log();
      Complex complex13 = complex1.tan();
      boolean boolean0 = complex4.isInfinite();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex11.ONE.atan();
      Complex complex16 = complex1.exp();
      int int0 = complex13.hashCode();
      double double1 = complex1.getImaginary();
      boolean boolean1 = complex11.equals(complex9);
      Complex complex17 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.log();
      double double0 = complex0.getArgument();
      int int0 = 5928;
      // Undeclared exception!
      complex1.nthRoot(5928);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.createComplex(0.0, 3271.1964);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.ZERO.multiply(1);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex1.multiply(complex4);
      String string0 = complex1.I.toString();
      Complex complex9 = Complex.valueOf(3271.1964);
      Complex complex10 = complex9.I.subtract(complex3);
      Complex complex11 = complex7.createComplex(244.2888, 0.0);
      Complex complex12 = complex0.sinh();
      String string1 = complex12.toString();
      Complex complex13 = complex6.divide(0.0);
      Complex complex14 = complex10.add(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex2.ONE.divide(0.0);
      ComplexField complexField0 = complex0.getField();
      String string0 = complex1.toString();
      String string1 = complex0.toString();
      Complex complex4 = complex0.exp();
      List<Complex> list0 = complex4.INF.nthRoot(673);
      Complex complex5 = complex0.atan();
      double double0 = complex5.I.abs();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex6.NaN.cos();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex8.I.sin();
      Complex complex11 = complex8.ONE.atan();
      Complex complex12 = complex6.negate();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex6.reciprocal();
      Complex complex15 = complex1.sinh();
      Complex complex16 = Complex.valueOf(1.0, 0.0);
      Complex complex17 = Complex.valueOf((-4584.886), (-1.0));
      List<Complex> list1 = complex8.nthRoot(7);
      Complex complex18 = complex0.sqrt();
      Complex complex19 = complex3.createComplex(673, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(854);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1800.170949, 1800.170949);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.INF.cos();
      String string0 = complex1.NaN.toString();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.I.subtract(1800.170949);
      Complex complex7 = complex4.I.multiply((-1648));
      double double1 = complex5.ZERO.abs();
      Complex complex8 = complex4.INF.add(complex5);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex11.ONE.log();
      Complex complex13 = complex11.negate();
      Object object0 = complex11.readResolve();
      Complex complex14 = complex10.ONE.pow(complex9);
      Complex complex15 = complex14.ONE.divide(0.0);
      Complex complex16 = complex15.NaN.cosh();
      Complex complex17 = complex9.add(complex0);
      int int0 = complex14.hashCode();
      Complex complex18 = complex17.cos();
      Complex complex19 = complex11.ZERO.acos();
      Complex complex20 = complex14.tanh();
      Complex complex21 = complex11.multiply(complex14);
      Complex complex22 = complex9.multiply(0);
      Complex complex23 = complex12.sinh();
      Complex complex24 = complex20.subtract(0.0);
      Complex complex25 = complex1.reciprocal();
      Complex complex26 = complex15.asin();
      String string1 = complex24.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2192.41728715), (-2192.41728715));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1885.40600761, (-2192.068959));
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex0.ONE.cos();
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex6.ONE.conjugate();
      Complex complex9 = complex2.NaN.multiply(complex1);
      Complex complex10 = complex7.ONE.reciprocal();
      Complex complex11 = complex10.I.add(complex7);
      Complex complex12 = complex1.cos();
      double double0 = complex1.getArgument();
      Complex complex13 = complex2.I.pow(0.0);
      Complex complex14 = complex13.INF.divide(0.0);
      String string0 = complex3.toString();
      Complex complex15 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex16 = complex2.cos();
      Complex complex17 = complex6.ONE.sin();
      Complex complex18 = complex3.createComplex(0.0, (-1.3821169493779352E-8));
      Complex complex19 = complex18.ONE.createComplex((-1.3821169493779352E-8), (-559.0));
      Complex complex20 = complex19.ZERO.reciprocal();
      Object object0 = complex16.readResolve();
      Complex complex21 = complex1.divide(complex6);
      Complex complex22 = complex15.sinh();
      Complex complex23 = complex18.multiply(complex20);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.INF.subtract(complex0);
      double double0 = complex2.getImaginary();
      Complex complex6 = complex1.cos();
      double double1 = complex6.NaN.getArgument();
      Complex complex7 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.NaN.negate();
      Complex complex9 = complex7.divide(3.3058299602856804E-8);
      Complex complex10 = complex7.ONE.exp();
      Complex complex11 = complex9.ZERO.sqrt1z();
      Complex complex12 = complex9.ONE.sinh();
      Complex complex13 = complex3.acos();
      Complex complex14 = complex13.sin();
      Complex complex15 = complex1.tanh();
      Complex complex16 = complex1.ZERO.negate();
      boolean boolean0 = complex6.equals(complex7);
      Complex complex17 = complex14.subtract(complex12);
      Complex complex18 = complex5.reciprocal();
      Complex complex19 = complex9.sqrt1z();
      List<Complex> list0 = complex19.ONE.nthRoot(17);
      Complex complex20 = complex0.createComplex(Double.NaN, 1803.8953448162);
      Complex complex21 = complex19.reciprocal();
      Complex complex22 = complex5.sinh();
      Complex complex23 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(733.0);
      int int0 = complex1.ZERO.hashCode();
      Complex complex4 = complex2.log();
      Complex complex5 = complex1.NaN.sinh();
      Complex complex6 = complex4.ZERO.multiply((-913));
      double double0 = complex1.getReal();
      Complex complex7 = complex0.multiply(Double.NaN);
      try { 
        complex3.nthRoot((-913));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -913
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = Complex.valueOf(1.5574076175689697, (double) (-1581));
      Complex complex5 = complex0.NaN.multiply((-1581));
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex6.NaN.add(complex0);
      int int0 = complex5.INF.hashCode();
      Complex complex8 = complex5.I.sin();
      Complex complex9 = complex1.ZERO.divide(complex0);
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex11.I.divide(0.0);
      double double0 = complex0.getReal();
      Complex complex13 = complex8.I.pow(0.0);
      Complex complex14 = complex10.multiply(17);
      boolean boolean0 = complex10.equals(complex1);
      Complex complex15 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.conjugate();
      List<Complex> list0 = complex3.nthRoot(545);
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.I.add(complex3);
      Complex complex6 = complex4.add(2072.9385);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex2.add(393.9221214);
      double double0 = complex6.abs();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.subtract(0.0);
      Complex complex10 = complex8.ZERO.asin();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex5.createComplex(393.9221214, 393.92339068437695);
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex4.multiply(395);
      Complex complex15 = complex1.log();
      Complex complex16 = complex6.sinh();
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex16.tanh();
      Complex complex19 = complex18.ZERO.tanh();
      Complex complex20 = complex2.conjugate();
      Complex complex21 = complex20.I.log();
      Complex complex22 = complex21.ONE.sin();
      Complex complex23 = complex17.sqrt1z();
      Complex complex24 = complex17.I.conjugate();
      Complex complex25 = complex4.sqrt();
      Complex complex26 = complex25.INF.pow(393.9221214);
      Complex complex27 = complex17.acos();
      Complex complex28 = complex11.multiply(complex17);
      double double1 = complex1.getReal();
      double double2 = complex16.getArgument();
      Complex complex29 = complex17.conjugate();
      Complex complex30 = complex1.subtract(0.9999999999999999);
      Complex complex31 = complex21.createComplex(0.9999999999999999, 393.92339068437695);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.createComplex(3627.588288167609, (-1376.0));
      Complex complex3 = complex0.log();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.INF.add(complex1);
      String string0 = complex5.NaN.toString();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.I.pow(772.6450010327);
      Complex complex9 = complex8.asin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex6.add(3627.588288167609);
      double double0 = complex10.getArgument();
      Complex complex11 = complex7.atan();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex1.subtract(complex12);
      boolean boolean1 = complex5.equals(complex12);
      Complex complex14 = complex11.multiply(2.0);
      Complex complex15 = complex10.tanh();
      Complex complex16 = complex15.ONE.asin();
      Complex complex17 = complex1.exp();
      Complex complex18 = complex0.subtract(complex1);
      int int0 = complex18.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(665.4987726, 665.4987726);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.I.multiply((-575.11));
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex0.pow((-575.11));
      Complex complex6 = complex2.INF.log();
      Object object0 = complex5.readResolve();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex8.ZERO.multiply(complex5);
      Complex complex10 = complex7.I.tanh();
      Complex complex11 = complex8.ZERO.subtract(complex5);
      Complex complex12 = complex8.I.pow((-5931.61771912093));
      Complex complex13 = complex7.add((-575.11));
      Complex complex14 = complex5.sinh();
      Complex complex15 = complex14.ONE.cosh();
      Complex complex16 = complex11.multiply(17);
      Complex complex17 = complex13.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.I.add((-1021.031161931));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.createComplex((-1021.031161931), (-1021.031161931));
      Complex complex7 = complex3.NaN.sqrt1z();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex6.NaN.sqrt1z();
      double double0 = complex0.abs();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex4.multiply(complex0);
      Complex complex13 = complex5.ONE.add(complex12);
      Complex complex14 = complex6.tan();
      Complex complex15 = complex5.reciprocal();
      Complex complex16 = complex4.asin();
      Complex complex17 = complex1.multiply(2777);
      Complex complex18 = complex0.acos();
      boolean boolean0 = complex12.equals(complex4);
      Object object1 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract(1.0);
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.multiply(1.0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1344.01212);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.ZERO.subtract(complex4);
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(Double.NaN);
      double double0 = complex1.getReal();
      Complex complex3 = complex1.multiply(Double.NaN);
      Complex complex4 = complex1.INF.add(complex2);
      String string0 = complex2.toString();
      String string1 = complex3.toString();
      Complex complex5 = complex3.sqrt();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex5.multiply(1444.72);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex(661.0, 661.0);
      Complex complex3 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.I.multiply((-103.935961));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.sqrt();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex5 = Complex.valueOf((-103.935961), 2277.9612);
      Complex complex6 = complex3.NaN.asin();
      double double0 = complex3.getImaginary();
      Complex complex7 = complex0.tan();
      double double1 = complex2.abs();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-5.5299180508885456E281), (-5.5299180508885456E281));
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ZERO.divide((-631.6013));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.ONE.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex1.createComplex((-1102.6802673), (-1102.6802673));
      Complex complex8 = complex5.cos();
      Complex complex9 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3640.04893), (-3640.04893));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.INF.divide(1.8576309291617257E302);
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex4.tan();
      int int0 = complex2.hashCode();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex2.subtract(complex8);
      Complex complex10 = complex4.createComplex((-3640.04893), 830.69);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-897.6191447545077), 0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.asin();
      double double0 = complex3.getArgument();
      Complex complex4 = complex0.ONE.log();
      String string0 = complex0.ONE.toString();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.I.pow((-897.6191447545077));
      Complex complex8 = complex7.ZERO.pow(complex2);
      Complex complex9 = Complex.valueOf(1007.4);
      Complex complex10 = complex5.multiply(complex0);
      Complex complex11 = complex10.sin();
      int int0 = complex0.ONE.hashCode();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex0.multiply(complex4);
      Complex complex15 = complex7.reciprocal();
      Complex complex16 = complex15.pow(Double.NaN);
      Complex complex17 = complex13.conjugate();
      boolean boolean0 = complex4.equals(complex17);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.977364027694834E-19, 1.977364027694834E-19);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.tan();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex1.NaN.pow(complex0);
      Complex complex5 = Complex.valueOf(1.977364027694834E-19);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ONE.createComplex(1.977364027694834E-19, 7007.19325);
      Complex complex8 = complex7.I.add(complex0);
      Complex complex9 = complex0.pow(1.977364027694834E-19);
      Complex complex10 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1700));
      double double0 = complex0.getReal();
      Complex complex2 = complex0.cos();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex1.ZERO.acos();
      Complex complex7 = complex1.pow((double) (-1700));
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.NaN.reciprocal();
      double double1 = complex7.getImaginary();
      try { 
        complex6.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1374.74, 1374.74);
      Complex complex1 = complex0.divide(1374.74);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = Complex.valueOf(1374.74, (-20.0));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.ONE.asin();
      double double0 = complex0.getReal();
      Complex complex6 = complex2.subtract(1374.74);
      double double1 = complex0.abs();
      ComplexField complexField1 = complex1.INF.getField();
      Complex complex7 = complex0.divide(complex6);
      Object object0 = complex2.readResolve();
      int int0 = complex7.hashCode();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.NaN.pow(0.0);
      Complex complex5 = Complex.valueOf(0.0, Double.NaN);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex6.equals(complex1);
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-1363.3879408));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.multiply(422);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex1.ZERO.sinh();
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.valueOf((-1638.52023418));
      Complex complex8 = complex6.I.pow(complex7);
      Complex complex9 = complex1.divide(0.0);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.abs();
      Complex complex10 = Complex.valueOf((double) 422, 746.362950117838);
      Complex complex11 = complex1.tan();
      Complex complex12 = complex11.INF.add(complex2);
      Complex complex13 = complex11.NaN.cosh();
      Complex complex14 = complex13.ONE.sinh();
      Complex complex15 = complex11.createComplex((-1358.57544794), 0.0);
      Complex complex16 = Complex.valueOf((-1363.3879408));
      List<Complex> list0 = complex3.nthRoot(422);
      Complex complex17 = complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.multiply((-1));
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      Complex complex7 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1986.63754));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.I.multiply(complex2);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex4.pow(1.317044973373413);
      Complex complex7 = complex4.negate();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.negate();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.ONE.multiply(complex2);
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex5.INF.sin();
      int int0 = (-1260);
      try { 
        complex4.ONE.nthRoot((-1260));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.createComplex((-1687.156251479017), 0.0);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex2.ONE.add(1.5851251724785243E286);
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex0.I.atan();
      Complex complex8 = complex0.add(0.0);
      Complex complex9 = Complex.valueOf(0.0);
      double double0 = complex8.getArgument();
      Complex complex10 = complex8.multiply(1345.274193074129);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex7.pow(7.358873642076596E195);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.valueOf((-143.779552088), 0.0);
      double double0 = complex2.ONE.abs();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.I.hashCode();
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex(1.5707963267948966, 1.5707963267948966);
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex3.INF.subtract(1.5707963267948966);
      Complex complex5 = complex4.I.atan();
      double double1 = complex0.getReal();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex5.subtract(0.0);
      Complex complex8 = new Complex(157.37);
      Complex complex9 = complex1.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.ONE.subtract(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1281.99), 1680.4698410732);
      Complex complex2 = complex1.NaN.add((-1281.99));
      Complex complex3 = complex0.pow(complex1);
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.ONE.createComplex(0.0, (-4.8465821804075345E-8));
      Complex complex5 = complex0.subtract(complex1);
      String string0 = complex3.toString();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex4.pow(20.0);
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex8.divide(complex4);
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex6.subtract(0.0);
      Complex complex14 = complex8.conjugate();
      Complex complex15 = Complex.valueOf(1.943514969662872E-141);
      Complex complex16 = complex6.sqrt();
      double double1 = complex4.getArgument();
      Complex complex17 = complex10.acos();
      Complex complex18 = complex14.createComplex(0.0, 0.0);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.NaN.cosh();
      String string0 = complex1.ONE.toString();
      String string1 = complex0.toString();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.I.multiply(1466.6143);
      Complex complex4 = complex0.createComplex(0.0, 1322.55509537685);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf(1943.509060858);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.multiply(complex0);
      Complex complex7 = complex5.exp();
      double double0 = complex0.INF.getArgument();
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.subtract(0.7853981633974483);
      Complex complex10 = complex0.asin();
      double double1 = complex3.abs();
      Complex complex11 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.NaN;
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex1.I.cosh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.ONE.sinh();
      try { 
        complex0.nthRoot((-4590));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,590
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.subtract((-2071.008622));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.sqrt();
      double double0 = complex0.getReal();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex2.multiply(1.0);
      Complex complex8 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.divide((-2192.4));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex8.ZERO.log();
      Complex complex11 = complex4.asin();
      Complex complex12 = complex11.NaN.add((-2192.4));
      List<Complex> list0 = complex11.nthRoot(3067);
      Complex complex13 = complex3.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.subtract(2.1367325342138113E-7);
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(911.9842782, 911.9842782);
      Complex complex1 = Complex.valueOf(6.283185307179586, 911.9842782);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-2371.815981));
      Complex complex1 = Complex.I;
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.I.createComplex((-2371.815981), (-2371.815981));
      Complex complex4 = complex3.add((-2371.815981));
      Complex complex5 = complex0.sin();
      Complex complex6 = complex3.atan();
      double double1 = complex3.abs();
      Complex complex7 = complex3.multiply((-4029.873072));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-6.75421764491544E-8), 638.7215);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.NaN.multiply(1415);
      Complex complex3 = complex0.ZERO.divide(1412.0);
      double double0 = complex0.getReal();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.createComplex((-6.75421764491544E-8), 1415);
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7977178878541792E-7, 1.7977178878541792E-7);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.ONE.sin();
      double double0 = complex1.getImaginary();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex6.tanh();
      String string0 = complex5.toString();
      Complex complex9 = complex3.negate();
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2630.878708));
      Complex complex1 = new Complex(2717.5735226071, 3051.983);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(3577.5988172796738, 3577.5988172796738);
      Complex complex1 = complex0.NaN.multiply(3577.5988172796738);
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex2.add(3577.5988172796738);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex8 = complex7.INF.exp();
      double double0 = complex1.getImaginary();
      boolean boolean0 = complex3.equals(complex2);
      Complex complex9 = complex0.cosh();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.I.pow(6.283185307179586);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.I.pow(490.6474603602795);
      Complex complex6 = complex0.add(Double.NaN);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex1.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.0));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.add((-1945.0));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex1.conjugate();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Object object1 = complex1.readResolve();
      Complex complex4 = complex0.multiply(complex1);
      double double1 = complex0.getImaginary();
      Complex complex5 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(1.376213550567627, 1.376213550567627);
      Complex complex1 = complex0.atan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.tanh();
      String string0 = complex2.INF.toString();
      Complex complex3 = Complex.valueOf(235.35672);
      Complex complex4 = complex2.NaN.add(complex1);
      String string1 = complex4.INF.toString();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.valueOf(1.376213550567627);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.atan();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.add(656.8);
      Complex complex6 = complex5.add(2.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.multiply(37);
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.createComplex(355.5059005169748, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.I.divide(2088.0730097);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.createComplex(1.25, 0.6813591718673706);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1929.33137505);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.valueOf(1929.33137505);
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex4.subtract(1929.33137505);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(6.283185307179586, 2735.050277971342);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1235.6225, 1235.6225);
      String string0 = complex0.INF.toString();
      String string1 = complex0.toString();
      Complex complex1 = complex0.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.NaN.multiply(0.0);
      Complex complex5 = complex0.subtract((-616.7806743928369));
      Complex complex6 = complex1.sqrt1z();
      int int0 = (-1814);
      try { 
        complex6.ZERO.nthRoot((-1814));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,814
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1399.9559538612);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.sqrt1z();
      double double0 = complex2.NaN.abs();
      Complex complex5 = complex3.NaN.conjugate();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex3.divide(Double.NaN);
      Complex complex9 = complex2.subtract(complex5);
      Complex complex10 = complex3.subtract(0.898026148451398);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(840.0375);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex4.multiply(0);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex2.divide(complex1);
      Complex complex9 = complex5.multiply(complex7);
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex3.sqrt1z();
      Object object0 = complex5.readResolve();
      boolean boolean1 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.ZERO.subtract(523.58);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.pow((-5.002774317612589E-8));
      boolean boolean0 = complex0.equals(complex5);
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex5.ZERO.acos();
      Complex complex11 = complex9.I.multiply((-2673));
      Complex complex12 = complex5.acos();
      Complex complex13 = complex2.NaN.acos();
      Complex complex14 = complex2.add(0.0);
      double double0 = complex9.getReal();
      Object object0 = complex0.readResolve();
      Complex complex15 = complex12.pow(Double.POSITIVE_INFINITY);
      Complex complex16 = complex6.divide((double) (-2673));
      Complex complex17 = complex0.createComplex(0.0, (-2673));
      Complex complex18 = complex12.tan();
      Complex complex19 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2373.647984799));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.multiply(955);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(3101);
      Complex complex2 = complex1.ZERO.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.NaN.add(0.0);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.pow(complex3);
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.multiply((-1712));
      Complex complex2 = complex1.multiply(1161.74178819046);
      Complex complex3 = complex2.add(0.0);
      double double0 = complex2.abs();
      Complex complex4 = complex2.multiply(0.6244332790374756);
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex5.I.acos();
      Complex complex8 = complex0.multiply(1536);
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex8.NaN.tanh();
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex4.NaN.reciprocal();
      Complex complex13 = complex12.INF.pow(complex2);
      Object object0 = complex13.INF.readResolve();
      Complex complex14 = complex1.ONE.multiply(complex4);
      Complex complex15 = complex14.pow(3.977803882764135E7);
      Complex complex16 = complex1.multiply(1536);
      int int0 = complex16.NaN.hashCode();
      Complex complex17 = complex3.subtract((double) (-1712));
      int int1 = complex3.hashCode();
      Complex complex18 = complex16.reciprocal();
      boolean boolean0 = complex4.isNaN();
      Complex complex19 = complex16.exp();
      Complex complex20 = Complex.valueOf(3.977803882764135E7);
      Complex complex21 = complex16.add(complex20);
      Complex complex22 = complex21.sinh();
      Complex complex23 = complex16.multiply((-1712));
      Complex complex24 = complex14.sqrt1z();
      Complex complex25 = complex24.multiply(1536);
      Complex complex26 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-817.151554199));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.INF.add(complex2);
      Complex complex5 = complex4.ONE.createComplex((-1307.0253), (-817.151554199));
      double double0 = complex0.I.abs();
      ComplexField complexField0 = complex0.I.getField();
      double double1 = complex0.abs();
      Complex complex6 = Complex.valueOf((-2.933016992001806E-10));
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2.933016992001806E-10));
      double double2 = complex1.getArgument();
      Complex complex8 = complex0.sqrt1z();
      boolean boolean0 = complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      double double0 = complex0.I.getArgument();
      double double1 = complex0.getReal();
      Complex complex2 = Complex.ZERO;
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex5.ONE.multiply((-596.9238976427));
      Complex complex8 = complex3.INF.multiply(0.0);
      double double2 = complex3.I.abs();
      String string0 = complex2.NaN.toString();
      Complex complex9 = complex0.subtract(complex2);
      Complex complex10 = complex9.subtract(complex2);
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex11.INF.divide(0.0);
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex13.subtract(complex0);
      Complex complex15 = complex1.subtract(complex8);
      Complex complex16 = complex15.ONE.add((-596.9238976427));
      Complex complex17 = complex15.multiply(1.5707963267948966);
      Complex complex18 = complex1.multiply(0);
      Complex complex19 = complex13.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-1652.405727303678), 8.136316299122392E-192);
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.log();
      double double0 = complex1.abs();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.INF.multiply(complex0);
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = complex2.add(complex4);
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.valueOf(831.14399781, (-1688.0));
      Complex complex10 = complex6.I.pow(complex9);
      Complex complex11 = complex7.INF.multiply((-1652.405727303678));
      double double1 = complex4.getImaginary();
      int int0 = complex5.hashCode();
      Complex complex12 = complex2.sqrt();
      Complex complex13 = complex4.asin();
      Complex complex14 = complex12.tan();
      Complex complex15 = complex14.ONE.tanh();
      Complex complex16 = complex5.log();
      double double2 = complex6.getReal();
      Object object0 = complex16.readResolve();
      Complex complex17 = complex0.subtract(complex13);
      Complex complex18 = complex17.sqrt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2149.795));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.asin();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex1.ZERO.pow((-20.0));
      Complex complex5 = complex0.I.cosh();
      Complex complex6 = complex1.ZERO.acos();
      int int1 = complex1.hashCode();
      Complex complex7 = complex1.NaN.reciprocal();
      Complex complex8 = complex0.multiply((-2149.795));
      Complex complex9 = complex1.I.sinh();
      Complex complex10 = complex8.NaN.conjugate();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.equals(complex0);
      double double0 = complex8.getImaginary();
      Complex complex11 = complex8.add((-20.0));
      Complex complex12 = complex0.pow(0.0);
      List<Complex> list0 = complex12.nthRoot(1431);
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex13.ZERO.log();
      Complex complex15 = complex5.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ZERO.subtract(0.5010119676589966);
      String string0 = complex3.ZERO.toString();
      Complex complex6 = complex3.NaN.multiply(2405);
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.I.asin();
      double double0 = complex1.ZERO.getArgument();
      Complex complex10 = complex1.divide(0.0);
      Complex complex11 = complex0.add(complex10);
      double double1 = complex0.abs();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex12.INF.subtract(0.0);
      Complex complex14 = complex12.ONE.cosh();
      Complex complex15 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-9.7653), (-9.7653));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex((-4169.9953811997375), 0.0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex1.NaN.asin();
      Complex complex6 = complex0.add(complex2);
      boolean boolean0 = complex6.isNaN();
      int int0 = 3519;
      List<Complex> list0 = complex0.nthRoot(3519);
      Complex complex7 = complex2.NaN.acos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.ZERO.atan();
      Complex complex10 = complex8.I.divide((-1311.6656377081965));
      Complex complex11 = complex1.ZERO.tan();
      Complex complex12 = complex8.ONE.sqrt();
      Complex complex13 = complex0.sqrt();
      int int1 = 0;
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
