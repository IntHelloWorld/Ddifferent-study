/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:21:24 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1099.5107));
      Complex complex1 = complex0.add(1.7868741793506103E-14);
      Complex complex2 = Complex.valueOf(1.7868741793506103E-14, (-3162.0));
      Complex complex3 = complex2.ZERO.pow(1.7868741793506103E-14);
      Complex complex4 = complex0.createComplex(1.7868741793506103E-14, 1.7868741793506103E-14);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.multiply(1.4674011002723395);
      Complex complex7 = complex6.INF.multiply(1.4674011002723395);
      double double0 = complex6.ONE.abs();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex8.ZERO.sqrt1z();
      Complex complex11 = complex6.divide((-1099.5107));
      Complex complex12 = complex5.multiply(complex8);
      Complex complex13 = complex0.NaN.pow(complex3);
      try { 
        complex7.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2723.12298754);
      Complex complex1 = complex0.I.add(2723.12298754);
      Complex complex2 = complex1.INF.divide(2723.12298754);
      Complex complex3 = complex1.ONE.tan();
      List<Complex> list0 = complex2.INF.nthRoot(611);
      Complex complex4 = complex2.NaN.divide(2723.12298754);
      ComplexField complexField0 = complex4.ONE.getField();
      String string0 = complex1.ZERO.toString();
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex0.add(2723.12298754);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex0.I.multiply(complex3);
      Complex complex9 = complex7.I.negate();
      Complex complex10 = complex6.I.cosh();
      Complex complex11 = complex7.ONE.pow((-196.5));
      Complex complex12 = complex11.I.add(complex1);
      Complex complex13 = complex12.log();
      ComplexField complexField1 = complex11.NaN.getField();
      boolean boolean0 = complex2.equals(",KDnP.pMu5");
      Complex complex14 = complex6.divide(complex2);
      Complex complex15 = complex3.sqrt1z();
      Complex complex16 = complex15.ZERO.divide(complex1);
      Complex complex17 = complex4.multiply(611);
      Complex complex18 = complex9.reciprocal();
      Complex complex19 = complex18.INF.pow((-196.5));
      Complex complex20 = complex9.exp();
      Complex complex21 = complex9.tanh();
      Complex complex22 = complex0.tanh();
      Complex complex23 = Complex.valueOf(2993.223, 1007.456664);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide(Double.NaN);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = Complex.valueOf((-41.114102));
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = Complex.valueOf(Double.NaN, (-1263.11743778002));
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.divide(0.0);
      Complex complex9 = complex1.pow((-41.114102));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0);
      String string0 = complex1.toString();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.pow(complex1);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex0.I.negate();
      Complex complex6 = complex5.INF.subtract(0.0);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex5.subtract((-1468.9115040741));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1404.717), 1087.5870304);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex5.ZERO.multiply(complex4);
      double double0 = complex7.I.getArgument();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex10.I.reciprocal();
      Complex complex12 = complex10.ZERO.atan();
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = complex13.I.asin();
      Complex complex15 = Complex.INF;
      boolean boolean0 = complex1.equals(complex15);
      boolean boolean1 = complex5.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2959.699538));
      Object object0 = complex0.I.readResolve();
      int int0 = complex0.hashCode();
      int int1 = 0;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex2.multiply((-73.5969));
      Complex complex8 = complex2.asin();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = Complex.valueOf(0.0, (-7.821867597227376E-9));
      int int0 = complex0.hashCode();
      Complex complex11 = complex6.NaN.add(complex4);
      Complex complex12 = complex3.NaN.acos();
      Complex complex13 = complex8.multiply(complex2);
      Complex complex14 = complex8.add(1276.9260511991);
      Complex complex15 = complex6.asin();
      Complex complex16 = complex9.INF.add(complex1);
      boolean boolean0 = complex9.equals(complex2);
      Complex complex17 = complex13.ONE.asin();
      Complex complex18 = complex13.INF.sqrt();
      Complex complex19 = complex8.multiply(complex9);
      Complex complex20 = complex13.cos();
      Complex complex21 = complex6.exp();
      Complex complex22 = Complex.valueOf(2240.695190764, (-1.0));
      Complex complex23 = Complex.valueOf(0.0);
      Complex complex24 = complex23.ZERO.pow(2240.695190764);
      Complex complex25 = complex20.cos();
      Complex complex26 = complex5.sinh();
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.42319904924571894, 15.41054);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.INF.multiply(721);
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex1.ONE.pow(complex0);
      Complex complex6 = complex1.INF.sqrt1z();
      Complex complex7 = complex0.NaN.divide(0.42319904924571894);
      Complex complex8 = complex1.ZERO.pow(complex6);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex9.reciprocal();
      Complex complex12 = Complex.valueOf(1531.05165948);
      String string0 = complex3.toString();
      Complex complex13 = complex12.pow(complex3);
      Complex complex14 = complex1.divide(complex6);
      Complex complex15 = complex14.I.asin();
      Complex complex16 = complex6.reciprocal();
      Complex complex17 = complex0.sin();
      Object object0 = complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.exp();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.INF.asin();
      Complex complex6 = complex4.ONE.cos();
      Complex complex7 = complex4.sinh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex9.INF.atan();
      Complex complex12 = complex11.I.conjugate();
      Complex complex13 = complex1.NaN.sinh();
      Complex complex14 = complex3.atan();
      Complex complex15 = complex14.tan();
      double double1 = complex1.I.getArgument();
      double double2 = complex15.getArgument();
      Complex complex16 = complex8.asin();
      Complex complex17 = complex14.createComplex(0.0, Double.NaN);
      Complex complex18 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 750.700934);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = Complex.NaN;
      boolean boolean0 = complex3.equals(complex6);
      Complex complex7 = complex3.multiply((-1176.65442588469));
      Complex complex8 = complex7.NaN.pow(complex3);
      Complex complex9 = complex0.negate();
      String string0 = complex9.INF.toString();
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = Complex.valueOf(736.0, 736.0);
      Complex complex6 = complex2.divide(complex1);
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      boolean boolean0 = complex0.isNaN();
      List<Complex> list1 = complex6.nthRoot(17);
      Complex complex7 = complex1.negate();
      double double0 = complex7.ONE.abs();
      Complex complex8 = complex5.conjugate();
      double double1 = complex8.ZERO.abs();
      Complex complex9 = complex8.ZERO.pow(complex2);
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.ZERO.multiply(complex0);
      Object object0 = complex1.readResolve();
      List<Complex> list2 = complex1.nthRoot(1);
      Complex complex12 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2838.348221802));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex2.NaN.add(complex1);
      Complex complex5 = complex1.ZERO.asin();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.multiply(1380);
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = Complex.valueOf((-2838.348221802), 615.0);
      List<Complex> list0 = complex9.nthRoot(1);
      Complex complex11 = complex0.multiply(1);
      Complex complex12 = complex10.cos();
      Complex complex13 = complex1.pow(0.0);
      Complex complex14 = complex6.subtract((double) 1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.442600707513088E-36);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = new Complex(1782.255043127);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex0.add(complex2);
      Object object0 = complex2.NaN.readResolve();
      Complex complex5 = complex4.INF.subtract(complex3);
      Complex complex6 = complex1.ONE.sin();
      Complex complex7 = Complex.valueOf(5506.281824103879);
      List<Complex> list0 = complex4.nthRoot(7);
      Complex complex8 = complex2.subtract(complex4);
      Complex complex9 = complex1.conjugate();
      String string0 = complex5.ONE.toString();
      Object object1 = complex3.ONE.readResolve();
      Complex complex10 = complex9.add(0.0);
      int int0 = complex5.hashCode();
      double double0 = complex0.abs();
      Complex complex11 = complex10.createComplex(0.0, 0.2539151906967163);
      Complex complex12 = complex4.cos();
      Complex complex13 = complex10.reciprocal();
      Complex complex14 = complex13.INF.cosh();
      Complex complex15 = complex4.exp();
      List<Complex> list1 = complex4.nthRoot(2538);
      boolean boolean1 = complex9.equals(complex8);
      Complex complex16 = complex6.sqrt1z();
      Complex complex17 = complex16.subtract(complex3);
      Complex complex18 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.NaN.divide(83.35896036269);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ONE.add(complex0);
      Complex complex7 = complex5.I.cos();
      Complex complex8 = complex5.INF.divide(complex2);
      Complex complex9 = complex8.I.atan();
      Complex complex10 = complex0.add(0.0);
      Complex complex11 = complex10.acos();
      boolean boolean0 = complex2.isNaN();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.INF.sin();
      Complex complex14 = new Complex(0.0, 2462.88462105);
      boolean boolean1 = complex1.equals(complex14);
      double double1 = complex1.abs();
      Complex complex15 = complex3.exp();
      Complex complex16 = complex15.INF.add(complex2);
      Complex complex17 = complex14.subtract(complex2);
      String string0 = complex3.toString();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.148747205734253, (-667.89953328157));
      Complex complex1 = Complex.valueOf((-667.89953328157), (-667.89953328157));
      Complex complex2 = complex0.createComplex((-2579.29695183), 1.148747205734253);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.INF.add(8.533262777516794E-94);
      Complex complex6 = complex2.INF.divide(complex1);
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex6.multiply((-2579.29695183));
      double double0 = complex6.INF.getArgument();
      Complex complex8 = complex0.createComplex((-2135.83), 8.533262777516794E-94);
      Complex complex9 = complex1.NaN.reciprocal();
      Complex complex10 = complex1.divide(1594.035007820755);
      Complex complex11 = complex10.divide(1594.035007820755);
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex8.I.asin();
      Complex complex14 = complex4.acos();
      Complex complex15 = complex3.subtract(1199.6098880333);
      Complex complex16 = complex4.log();
      Complex complex17 = complex10.INF.cos();
      List<Complex> list0 = complex14.nthRoot(1);
      Complex complex18 = complex14.multiply((-2579.29695183));
      Complex complex19 = complex5.conjugate();
      Complex complex20 = complex10.ONE.pow(complex8);
      Complex complex21 = complex18.cosh();
      double double1 = complex11.abs();
      Complex complex22 = complex18.reciprocal();
      Complex complex23 = complex5.sqrt1z();
      Complex complex24 = complex10.sinh();
      Complex complex25 = complex24.NaN.subtract(complex0);
      Complex complex26 = complex12.subtract((-667.89953328157));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2181.07205));
      double double0 = complex1.NaN.getArgument();
      double double1 = complex1.getReal();
      Complex complex2 = complex1.divide(complex0);
      double double2 = complex1.abs();
      Complex complex3 = Complex.valueOf(Double.NaN, (-1014.7212594));
      Complex complex4 = complex1.ZERO.sqrt();
      Complex complex5 = complex4.I.multiply(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex0.divide(1.5026445388793945);
      Complex complex7 = complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 1757.1);
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.divide(1757.1);
      List<Complex> list0 = complex1.NaN.nthRoot(1582);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(6.283185307179586);
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.NaN.cos();
      double double1 = complex2.abs();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex3.pow(complex0);
      double double2 = complex6.abs();
      Complex complex10 = complex2.multiply(complex6);
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex8.exp();
      int int1 = complex0.hashCode();
      Complex complex13 = complex10.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.pow(0.0);
      Complex complex5 = complex2.asin();
      double double0 = complex3.abs();
      Complex complex6 = complex0.ONE.pow(complex2);
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex7 = complex0.sqrt();
      double double1 = complex3.getReal();
      double double2 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1048.538, 1048.538);
      Complex complex1 = Complex.valueOf(1048.538, 1048.538);
      List<Complex> list0 = complex0.nthRoot(1584);
      double double0 = complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-311.4));
      int int0 = complex0.ONE.hashCode();
      List<Complex> list1 = complex0.nthRoot(1211);
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1104.4422450764));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3397.6314973674066), (-3729.551333072655));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.multiply(4950.9508538);
      Complex complex3 = complex0.add((-3729.551333072655));
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-745.463596), (-745.463596));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.I.subtract(complex0);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex2.ONE.cosh();
      Complex complex7 = complex6.ONE.cosh();
      double double0 = complex4.NaN.getArgument();
      Complex complex8 = complex2.ZERO.add(0.0);
      Complex complex9 = complex2.NaN.pow(complex4);
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex10.ONE.sin();
      Complex complex13 = complex8.createComplex(831.71601808726, Double.POSITIVE_INFINITY);
      int int0 = complex8.INF.hashCode();
      Complex complex14 = complex2.atan();
      ComplexField complexField0 = complex2.getField();
      Complex complex15 = Complex.valueOf((-1.904714978998808E-72), 0.0);
      Complex complex16 = Complex.valueOf(175.7400710274, Double.NaN);
      ComplexField complexField1 = complex15.getField();
      Complex complex17 = complex12.sqrt();
      boolean boolean0 = complex12.equals(complex3);
      Complex complex18 = complex17.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.NaN.sqrt1z();
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex1.multiply(749);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1908.18, 1908.18);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.multiply((-2505));
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.multiply((-2505));
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex4.I.multiply(complex6);
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex4.createComplex(4485.436263447095, 0.0);
      Complex complex11 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.pow((-2880.714176));
      String string0 = complex1.INF.toString();
      String string1 = complex1.INF.toString();
      Complex complex2 = complex0.divide(1.7430980205535889);
      String string2 = complex1.ZERO.toString();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.exp();
      List<Complex> list0 = complex4.I.nthRoot(1006);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex1.log();
      Complex complex8 = complex5.divide(complex1);
      Complex complex9 = complex6.multiply((double) 1006);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1595.51454846616, 2829.3311111455);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(2829.3311111455);
      Complex complex3 = complex1.NaN.multiply((-731));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.subtract((-3112.7));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1454644909004582E-228, 1679.191550250773);
      Complex complex1 = new Complex(2679.988917576374);
      Complex complex2 = complex0.I.divide(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = new Complex(2.1454644909004582E-228);
      boolean boolean0 = complex3.equals(complex4);
      Complex complex5 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.multiply(1.4055868011423819E-8);
      Complex complex2 = complex1.subtract((-20.0));
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = Complex.valueOf((-1795.6591966615));
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex0.ONE.exp();
      double double0 = complex0.abs();
      Complex complex8 = complex4.INF.negate();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex7.ONE.exp();
      double double1 = complex4.getArgument();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex11.INF.acos();
      Complex complex13 = complex1.multiply(0.0);
      Complex complex14 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex15 = complex7.createComplex(Double.POSITIVE_INFINITY, (-700.1265219));
      Object object0 = complex15.ZERO.readResolve();
      Complex complex16 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object1 = complex13.readResolve();
      String string0 = complex15.toString();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.sinh();
      String string0 = complex0.INF.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2777.9);
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.ONE.createComplex(0.0, (-1332.0));
      Complex complex3 = complex0.multiply((-1617));
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex6 = complex2.NaN.multiply(1744.777960735971);
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex7.add(complex2);
      double double2 = complex8.INF.getArgument();
      String string0 = complex3.NaN.toString();
      String string1 = complex8.ONE.toString();
      Complex complex9 = complex4.divide(0.0);
      Complex complex10 = complex4.cos();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex11.ZERO.multiply((double) (-1617));
      Complex complex13 = complex11.I.divide(Double.POSITIVE_INFINITY);
      boolean boolean1 = complex4.isInfinite();
      Complex complex14 = complex2.INF.divide((double) (-1617));
      Complex complex15 = complex4.sinh();
      boolean boolean2 = complex15.equals("(1.0, 0.0)");
      Complex complex16 = complex3.conjugate();
      Complex complex17 = complex0.sin();
      Complex complex18 = complex10.cosh();
      double double3 = complex18.getArgument();
      Complex complex19 = complex17.tan();
      Complex complex20 = complex19.ZERO.acos();
      int int0 = complex17.hashCode();
      Complex complex21 = complex12.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.divide((-51.0));
      Complex complex4 = complex3.multiply((-51.0));
      double double0 = complex3.ONE.abs();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex0.acos();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.multiply((-2141));
      Complex complex3 = complex0.INF.divide(complex1);
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex0.multiply(0.6233867406845093);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(362.79603);
      int int0 = complex0.hashCode();
      Object object0 = complex0.NaN.readResolve();
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.createComplex(300.0015622, 4460.3717719408);
      Complex complex2 = complex1.ZERO.add((-93.286248499));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.add(362.79603);
      Complex complex5 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(629.516, 629.516);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.valueOf(629.516);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.INF.createComplex(629.516, (-617.3500440703));
      ComplexField complexField0 = complex2.INF.getField();
      double double0 = complex2.NaN.getArgument();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex1.divide(complex7);
      Complex complex10 = Complex.valueOf(0.0, 2.7024011611938477);
      ComplexField complexField1 = complex10.getField();
      Complex complex11 = complex7.divide(complex2);
      Complex complex12 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3779.1566));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex0.ZERO.cosh();
      Complex complex7 = complex5.ONE.sinh();
      double double0 = complex5.abs();
      double double1 = complex4.getImaginary();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex1.log();
      Complex complex11 = complex7.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2555.0179922957795), (-2555.0179922957795));
      Complex complex1 = complex0.ZERO.multiply((-1516));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ONE.multiply(0);
      Complex complex5 = complex4.ZERO.cos();
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex2.pow((-2555.0179922957795));
      double double0 = complex0.getArgument();
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex7.I.subtract(complex0);
      double double1 = complex1.abs();
      Complex complex9 = complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 20.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ONE.multiply((-642));
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex3.ONE.add(2.0);
      Complex complex6 = complex0.ONE.add(0.0);
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = complex0.sin();
      double double0 = complex8.abs();
      Complex complex9 = complex1.pow(complex0);
      Complex complex10 = complex7.INF.log();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex3.divide(complex0);
      Complex complex13 = complex7.sinh();
      boolean boolean0 = complex2.isNaN();
      Complex complex14 = complex1.reciprocal();
      Complex complex15 = complex14.cos();
      Complex complex16 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(265.87669178442945, (-1791.7546));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.atan();
      String string0 = complex1.toString();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex0.tan();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.NaN.multiply((-1705));
      Complex complex8 = complex0.multiply(0.0);
      try { 
        complex0.nthRoot((-1705));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,705
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1567.4835, (-52.84));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ONE.multiply(702);
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex5.INF.divide(2512.57136232);
      double double0 = complex4.ONE.getArgument();
      double double1 = complex1.getReal();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2058.5764, 2058.5764);
      Complex complex1 = Complex.valueOf(2058.5764);
      String string0 = complex1.INF.toString();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.ONE.tanh();
      int int1 = complex3.ONE.hashCode();
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex4.NaN.sinh();
      int int2 = complex5.NaN.hashCode();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex4.cos();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex2.divide(complex0);
      Complex complex10 = Complex.valueOf(2.0, 2.325337720526947E133);
      Complex complex11 = new Complex(0.0);
      boolean boolean0 = complex7.equals(complex11);
      int int3 = complex6.hashCode();
      Complex complex12 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.multiply((-53));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 20.80014872;
      Complex complex0 = Complex.valueOf(20.80014872);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = Complex.valueOf(20.80014872);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.NaN.subtract((double) 1);
      double double1 = complex5.I.abs();
      Complex complex6 = complex3.ZERO.tan();
      Complex complex7 = complex6.ZERO.createComplex(20.80014872, 1);
      double double2 = complex0.getArgument();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex4.multiply(complex2);
      int int0 = complex4.hashCode();
      int int1 = complex1.I.hashCode();
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex3.multiply((double) 1);
      int int2 = complex11.hashCode();
      String string0 = complex2.toString();
      int int3 = (-2258);
      try { 
        complex9.nthRoot((-2258));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,258
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.NaN.multiply(737);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.pow(627.311);
      Complex complex5 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.NaN.subtract(3925.0);
      Complex complex7 = complex5.exp();
      int int0 = complex7.hashCode();
      Complex complex8 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1074.84708773035), (-1074.84708773035));
      Complex complex1 = complex0.ZERO.asin();
      String string0 = complex0.toString();
      Complex complex2 = complex0.I.subtract((-1074.84708773035));
      Complex complex3 = complex2.I.log();
      double double0 = complex3.getArgument();
      Complex complex4 = complex2.NaN.multiply((-562.9075942012212));
      ComplexField complexField0 = complex0.getField();
      String string1 = complex0.toString();
      Complex complex5 = complex2.add((-178.5));
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-343.48987303101245), 0.0);
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex2.INF.cos();
      List<Complex> list0 = complex0.nthRoot(644);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.negate();
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex9.divide(0.0);
      Complex complex11 = complex7.divide(639.6938);
      Complex complex12 = complex9.conjugate();
      ComplexField complexField0 = complex12.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1088.11642903721), (-1088.11642903721));
      Complex complex1 = Complex.valueOf((-1088.11642903721), 0.0);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.ONE.multiply(complex2);
      int int0 = complex0.ZERO.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex4.add(complex1);
      Complex complex11 = complex2.NaN.add((-1088.11642903721));
      Complex complex12 = complex7.acos();
      Complex complex13 = complex8.pow(complex7);
      double double0 = complex12.getArgument();
      Complex complex14 = Complex.valueOf(0.0);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.add(1.0);
      Complex complex2 = complex0.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = new Complex(1);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf((-1.2319346292749103E98));
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex1.ZERO.add((-1.2319346292749103E98));
      Complex complex5 = complex4.atan();
      int int0 = complex2.I.hashCode();
      Complex complex6 = complex0.multiply((-4817));
      Complex complex7 = complex6.I.sqrt1z();
      double double0 = complex0.getImaginary();
      String string1 = complex1.toString();
      Complex complex8 = complex4.INF.add((-1913.0));
      Complex complex9 = complex0.add(complex7);
      String string2 = complex9.toString();
      String string3 = complex1.toString();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex11.acos();
      int int1 = complex11.hashCode();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex13.ZERO.add(0.5313173532485962);
      Complex complex15 = complex3.pow(complex13);
      Complex complex16 = complex2.createComplex((-187.573542), 0.0);
      Complex complex17 = complex16.NaN.subtract(complex10);
      boolean boolean0 = complex5.isInfinite();
      Complex complex18 = complex13.pow(complex0);
      Complex complex19 = complex4.asin();
      Complex complex20 = complex16.pow(complex19);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.INF.add(2228.89208542145);
      double double0 = complex0.getReal();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex3.divide(2228.89208542145);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.ONE.pow(Double.NaN);
      Complex complex4 = complex3.INF.createComplex(Double.NaN, 1.0524719896550007E251);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.ZERO.add(complex5);
      double double0 = complex4.NaN.abs();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex0.multiply(complex7);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(0.7853981633974483, 1365.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-86.8709093), 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.createComplex((-372.7), 1.0);
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.multiply((-1.0));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.asin();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-2277.4867), (-2277.4867));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ZERO.exp();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-984.777794641), (-984.777794641));
      Complex complex1 = complex0.pow((-2769.061191195533));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1.16354361977249E-8, 1.16354361977249E-8);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.sqrt();
      double double1 = complex0.getArgument();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.ZERO.divide(529.1963023753);
      Complex complex6 = complex0.sinh();
      int int0 = complex6.ZERO.hashCode();
      Complex complex7 = complex2.divide(complex0);
      Complex complex8 = complex1.INF.add(complex5);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex0.conjugate();
      ComplexField complexField0 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-3303.080828575333));
      Complex complex1 = complex0.add((-3303.080828575333));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 121.28700297369339);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.ONE.exp();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.INF.multiply(Double.NaN);
      Complex complex5 = complex3.ZERO.add(Double.NaN);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex3.pow(complex7);
      Complex complex10 = complex6.pow(complex1);
      String string0 = complex3.toString();
      Complex complex11 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(626.805454418);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.INF.pow(626.805454418);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1909.2539365571631));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.NaN.subtract(complex1);
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex2.ZERO.multiply((-3774));
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(856.2865524928, 0.0);
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      List<Complex> list1 = complex1.nthRoot(1063);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cosh();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.multiply(0.0);
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.INF.multiply((-1453));
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = Complex.valueOf((double) (-1453), (double) (-1453));
      Object object0 = complex0.readResolve();
      Complex complex8 = complex2.add(0.0);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex9.ZERO.log();
      Complex complex12 = complex4.multiply(complex2);
      Complex complex13 = complex0.cos();
      Complex complex14 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex5.add((-3019.113));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getReal();
      double double1 = complex0.abs();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add(1171.173307391232);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.ZERO.multiply(1171.173307391232);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = Complex.valueOf(1874.0117820279836, 1171.173307391232);
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex0.ZERO.acos();
      List<Complex> list0 = complex6.nthRoot(426);
      Complex complex8 = complex0.divide(Double.NaN);
      Complex complex9 = Complex.valueOf((double) 426, (-1.552830824758035E-8));
      Complex complex10 = complex0.pow(937.0);
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex2.add(1874.0117820279836);
      Complex complex14 = complex13.log();
      Complex complex15 = Complex.valueOf((-20.0));
      double double0 = complex0.getArgument();
      Complex complex16 = complex1.cos();
      Complex complex17 = complex2.tanh();
      Complex complex18 = complex7.sinh();
      Complex complex19 = complex15.add(complex1);
      double double1 = complex6.getReal();
      Complex complex20 = complex9.divide(0.0);
      Complex complex21 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-435.0), (-435.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.ZERO.tan();
      double double0 = complex1.I.abs();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.valueOf((-435.0), (-435.0));
      Complex complex8 = complex5.divide(complex6);
      Complex complex9 = complex0.atan();
      double double1 = complex8.getReal();
      Complex complex10 = complex1.ONE.multiply((-1821));
      Complex complex11 = Complex.ZERO;
      String string0 = complex11.INF.toString();
      Complex complex12 = complex3.multiply(complex11);
      Complex complex13 = complex12.INF.multiply(complex2);
      Complex complex14 = complex4.pow(complex0);
      boolean boolean0 = complex4.isInfinite();
      int int0 = complex8.hashCode();
      Complex complex15 = complex7.subtract(0.0);
      int int1 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.INF.acos();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex0.NaN.reciprocal();
      Complex complex9 = complex3.atan();
      double double0 = complex9.getImaginary();
      boolean boolean0 = complex3.isInfinite();
      Complex complex10 = complex0.multiply(complex2);
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.multiply(1.998050894021586E35);
      Complex complex3 = Complex.valueOf(1.998050894021586E35, (-4300.027100254584));
      List<Complex> list0 = complex3.INF.nthRoot(7);
      Complex complex4 = Complex.valueOf((-2891.485));
      Complex complex5 = complex1.I.exp();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = Complex.valueOf((-2891.485));
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex0.I.pow(complex2);
      Complex complex11 = complex8.sqrt();
      Object object0 = complex11.readResolve();
      boolean boolean0 = complex9.equals(object0);
      boolean boolean1 = complex0.isNaN();
      Complex complex12 = complex8.add(0.0);
      Complex complex13 = complex7.tanh();
      Object object1 = complex3.readResolve();
      Complex complex14 = complex6.negate();
      Object object2 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(1447.0, (-1.0938612624777085E-7));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.I.pow((-1.0938612624777085E-7));
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex1.multiply(4160);
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex1.createComplex(1447.0, (-1.0938612624777085E-7));
      Complex complex12 = complex8.ONE.sqrt();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex13.createComplex(4160, 4160);
      double double0 = complex11.getImaginary();
      Complex complex15 = complex2.tan();
      Complex complex16 = complex14.subtract((-1.0938612624777085E-7));
      Complex complex17 = complex13.INF.reciprocal();
      Complex complex18 = complex12.exp();
      Complex complex19 = complex14.conjugate();
      Complex complex20 = complex16.divide(complex12);
      Complex complex21 = complex0.ONE.sqrt1z();
      double double1 = complex6.abs();
      Complex complex22 = complex5.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-3348.44), (-318.4175309754));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.INF.subtract(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.ONE.log();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.INF.cos();
      Complex complex9 = complex5.ZERO.multiply(1706);
      Complex complex10 = complex5.ONE.cosh();
      Complex complex11 = complex7.I.multiply(0.0);
      String string0 = complex4.ZERO.toString();
      Complex complex12 = complex11.ONE.sinh();
      Complex complex13 = complex8.NaN.subtract(0.0);
      List<Complex> list0 = complex5.nthRoot(601);
      Complex complex14 = complex7.ONE.negate();
      Complex complex15 = complex5.ONE.sqrt();
      int int0 = complex4.hashCode();
      Complex complex16 = complex7.exp();
      Complex complex17 = complex16.ONE.multiply((-1349.3573));
      Complex complex18 = complex8.sinh();
      Complex complex19 = complex2.pow(complex5);
      Complex complex20 = complex15.acos();
      Complex complex21 = complex14.sin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(5309.7);
      try { 
        complex0.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.I.add(complex0);
      Complex complex6 = complex2.NaN.exp();
      Complex complex7 = complex1.I.acos();
      Complex complex8 = complex7.ZERO.divide(complex3);
      Complex complex9 = complex0.ZERO.sqrt1z();
      Complex complex10 = complex0.multiply(0.0);
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex11.NaN.negate();
      double double0 = complex11.abs();
      Complex complex13 = complex10.INF.add(complex11);
      String string0 = complex0.INF.toString();
      Complex complex14 = complex9.tanh();
      int int0 = complex14.NaN.hashCode();
      Complex complex15 = complex14.divide(0.0);
      Complex complex16 = Complex.ONE;
      Complex complex17 = complex14.ZERO.pow(complex16);
      int int1 = complex0.hashCode();
      Complex complex18 = complex9.atan();
      Complex complex19 = complex0.reciprocal();
      String string1 = complex19.I.toString();
      Complex complex20 = complex5.exp();
      Complex complex21 = complex19.conjugate();
      Complex complex22 = complex2.createComplex(0.0, 0.0);
      int int2 = complex22.ONE.hashCode();
      Complex complex23 = Complex.valueOf((-1.0));
      Complex complex24 = complex21.sqrt1z();
      Complex complex25 = complex7.tanh();
      Complex complex26 = complex15.multiply((-1889));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.0);
      int int0 = complex0.hashCode();
  }
}
