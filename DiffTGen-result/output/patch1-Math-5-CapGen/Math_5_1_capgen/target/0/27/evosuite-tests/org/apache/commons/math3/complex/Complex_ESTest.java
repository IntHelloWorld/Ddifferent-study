/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:24:35 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply((-1042));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex5.NaN.negate();
      Complex complex8 = complex6.atan();
      double double0 = complex4.NaN.abs();
      Complex complex9 = complex4.divide((-1371.42863704));
      double double1 = complex9.ONE.abs();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex3.subtract(2150.990450018759);
      Complex complex12 = complex3.multiply(0.0);
      double double2 = complex0.getReal();
      Complex complex13 = complex6.sqrt1z();
      int int0 = complex13.NaN.hashCode();
      double double3 = complex9.abs();
      Complex complex14 = complex5.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex0.sqrt1z();
      double double0 = complex4.getImaginary();
      Complex complex5 = complex4.exp();
      double double1 = complex5.ZERO.getArgument();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.NaN.createComplex(Double.NEGATIVE_INFINITY, 1145.4497);
      Complex complex8 = complex6.divide((-586.743684));
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex4.subtract(0.0);
      Complex complex11 = complex10.I.pow(complex5);
      Complex complex12 = complex11.ONE.sin();
      String string0 = complex12.toString();
      Complex complex13 = complex12.NaN.atan();
      Complex complex14 = complex9.tan();
      double double2 = complex8.getReal();
      Complex complex15 = complex5.asin();
      Complex complex16 = complex15.NaN.atan();
      Complex complex17 = complex0.conjugate();
      Complex complex18 = complex17.ONE.tan();
      Complex complex19 = complex8.subtract(complex4);
      Complex complex20 = complex1.acos();
      Complex complex21 = complex20.sin();
      Complex complex22 = complex10.pow(complex16);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.add((-1160.0398));
      Complex complex3 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(555.3524575442287, 0.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.ONE.sqrt();
      String string0 = complex6.toString();
      Complex complex9 = complex0.pow((-3051.199397));
      Complex complex10 = complex5.atan();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex2.tan();
      Complex complex13 = complex6.subtract(0.0);
      Complex complex14 = complex6.ONE.conjugate();
      Complex complex15 = complex6.multiply((-3752));
      Complex complex16 = complex15.divide(complex6);
      Complex complex17 = complex16.cosh();
      Complex complex18 = complex11.sqrt1z();
      Complex complex19 = complex17.divide(complex1);
      Complex complex20 = Complex.I;
      Complex complex21 = complex4.multiply(complex20);
      Complex complex22 = complex20.exp();
      Complex complex23 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 1212.0;
      Complex complex0 = new Complex(1212.0, 1212.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.I.exp();
      try { 
        complex5.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      int int0 = complex2.NaN.hashCode();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.add(0.0);
      double double1 = complex5.I.getArgument();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.INF.asin();
      Object object0 = complex2.readResolve();
      Complex complex9 = complex0.subtract(0.0);
      Complex complex10 = complex5.multiply(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ZERO.multiply(1587.98645703777);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex0.ONE.multiply(1);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex9.ZERO.add((-575.25));
      double double0 = complex6.getArgument();
      Complex complex11 = complex8.ZERO.cosh();
      double double1 = complex7.getReal();
      boolean boolean0 = complex8.isNaN();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex8.cos();
      Complex complex14 = complex7.sqrt();
      Object object1 = new Object();
      boolean boolean1 = complex6.equals(object1);
      double double2 = complex14.abs();
      boolean boolean2 = complex7.equals(complex14);
      ComplexField complexField0 = complex14.getField();
      Object object2 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-2600.18697744);
      Complex complex0 = Complex.valueOf((-2600.18697744), (-2600.18697744));
      Complex complex1 = complex0.NaN.multiply(Double.NaN);
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.ZERO.sqrt();
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex4 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.NaN.subtract(complex2);
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex3.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.I.log();
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex0.NaN.add((-2600.18697744));
      Complex complex11 = complex10.NaN.atan();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex0.divide(complex12);
      Complex complex14 = complex12.log();
      Complex complex15 = complex12.ONE.conjugate();
      Complex complex16 = Complex.valueOf((-2600.18697744));
      Complex complex17 = complex12.tanh();
      Object object0 = complex13.readResolve();
      Complex complex18 = complex10.tan();
      Complex complex19 = complex18.ZERO.cos();
      int int0 = (-2575);
      try { 
        complex18.nthRoot((-2575));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,575
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.add(0.0);
      List<Complex> list0 = complex3.nthRoot(17);
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex3.subtract((double) 17);
      Complex complex7 = complex6.INF.sin();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex3.pow((-4224.71));
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.NaN.createComplex((-536.4922261), (-3348.714071));
      Complex complex11 = complex0.exp();
      Complex complex12 = complex8.reciprocal();
      double double0 = complex2.getArgument();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex13.log();
      Complex complex15 = complex14.ONE.tan();
      Complex complex16 = complex4.createComplex((-536.4922261), (-4224.71));
      Complex complex17 = complex10.tan();
      Complex complex18 = complex6.sin();
      Complex complex19 = complex13.reciprocal();
      Complex complex20 = complex4.acos();
      double double1 = complex3.abs();
      double double2 = complex11.getReal();
      boolean boolean1 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-566.0864302407));
      Complex complex1 = complex0.ZERO.multiply(2276.129);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.add((-566.0864302407));
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex2.I.sin();
      double double0 = complex1.INF.getArgument();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.INF.subtract(complex4);
      Complex complex9 = complex6.I.cos();
      Complex complex10 = complex9.INF.multiply(4041.0952512);
      Complex complex11 = complex10.INF.multiply(1398);
      Complex complex12 = complex0.multiply(1398);
      Complex complex13 = Complex.valueOf(0.7853981633974483);
      Complex complex14 = complex6.pow(9.517570994930463E-138);
      double double1 = complex13.abs();
      double double2 = complex6.getReal();
      ComplexField complexField1 = complex2.getField();
      Complex complex15 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2415.41, 2415.41);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.ONE.createComplex(593.8, 2415.41);
      int int0 = complex7.ZERO.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = Complex.valueOf((-1741.92));
      double double0 = complex3.getImaginary();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex9.ZERO.add(complex7);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex0.tan();
      double double1 = complex7.getArgument();
      boolean boolean1 = complex1.isNaN();
      Complex complex14 = complex0.log();
      Complex complex15 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-632.233136), 3596.31);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.pow((-632.233136));
      int int0 = complex2.I.hashCode();
      Complex complex3 = Complex.valueOf(0.0);
      int int1 = complex1.ONE.hashCode();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.valueOf((-1120.0));
      Complex complex7 = complex4.pow(complex5);
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex1.multiply(6.283185307179586);
      double double0 = complex0.NaN.abs();
      double double1 = complex9.ONE.getArgument();
      Complex complex10 = complex2.subtract(complex9);
      Complex complex11 = complex9.pow(0.0);
      Complex complex12 = complex7.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = null;
      try { 
        complex2.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(3.098547586845664E-245, 1.1622881889343262);
      Complex complex1 = new Complex(3.098547586845664E-245, 3.098547586845664E-245);
      Complex complex2 = complex0.divide(complex1);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex0.I.multiply(complex5);
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex6.NaN.negate();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex2.I.sqrt1z();
      Complex complex12 = complex11.INF.multiply(242);
      Complex complex13 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.I.conjugate();
      String string0 = complex2.toString();
      Complex complex15 = complex5.ONE.reciprocal();
      String string1 = complex11.INF.toString();
      double double0 = complex1.abs();
      Complex complex16 = complex2.ONE.atan();
      Complex complex17 = complex11.tanh();
      Complex complex18 = complex11.tan();
      double double1 = complex1.getImaginary();
      Complex complex19 = complex14.reciprocal();
      ComplexField complexField1 = complex10.getField();
      double double2 = complex19.getArgument();
      Complex complex20 = complex0.multiply(complex5);
      Complex complex21 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(774.93997332);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = new Complex(774.93997332, 774.93997332);
      Complex complex5 = complex3.I.pow(complex4);
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.ZERO.multiply(0);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex7.NaN.subtract(0.0);
      Complex complex11 = complex9.ONE.divide((double) 0);
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex11.getReal();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex8.add(complex6);
      Complex complex14 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.divide(Double.NaN);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex1.ZERO.sin();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex2.I.subtract((-3099.424009132943));
      Complex complex5 = complex0.I.multiply(0);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = Complex.valueOf((-2.933016992001806E-10), 2.556084632873535);
      Complex complex9 = complex5.atan();
      Complex complex10 = complex9.INF.add(0.0);
      Complex complex11 = complex5.INF.sin();
      String string0 = complex1.INF.toString();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex12.NaN.asin();
      double double0 = complex0.INF.abs();
      double double1 = complex1.getImaginary();
      Complex complex14 = complex5.tanh();
      Complex complex15 = complex6.exp();
      Complex complex16 = complex15.INF.tanh();
      Complex complex17 = complex16.negate();
      int int0 = complex15.ONE.hashCode();
      int int1 = complex15.ONE.hashCode();
      String string1 = complex5.toString();
      int int2 = complex13.hashCode();
      Complex complex18 = complex8.log();
      double double2 = complex5.getImaginary();
      Complex complex19 = complex0.subtract(complex1);
      Object object1 = complex16.readResolve();
      boolean boolean0 = complex18.equals(object1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1851.7974187), (-1851.7974187));
      Complex complex2 = complex1.ONE.subtract(Double.NaN);
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex0.INF.pow((-28.2));
      Complex complex5 = complex0.reciprocal();
      double double0 = complex2.abs();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex3.ZERO.divide(Double.NaN);
      Complex complex8 = complex6.INF.atan();
      Complex complex9 = complex3.divide(2.9621181706527444E172);
      int int0 = complex2.hashCode();
      Complex complex10 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 2.51402968559859E301;
      Complex complex0 = new Complex(2.51402968559859E301, 2.51402968559859E301);
      Complex complex1 = complex0.add(3.175748919314254E172);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = Complex.valueOf(1276.0);
      double double1 = complex2.getImaginary();
      double double2 = complex0.getImaginary();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex1.divide(Double.POSITIVE_INFINITY);
      int int0 = complex6.ONE.hashCode();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-5247.16813));
      Object object0 = complex3.readResolve();
      Complex complex8 = null;
      try { 
        complex1.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(795.26);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex1.conjugate();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex1.divide(795.26);
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex5.subtract(complex1);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex2.divide(complex1);
      Complex complex11 = complex8.atan();
      Complex complex12 = complex0.subtract(complex11);
      boolean boolean0 = complex3.isNaN();
      Complex complex13 = complex11.atan();
      Complex complex14 = complex11.tanh();
      Complex complex15 = complex14.subtract(complex10);
      Complex complex16 = complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2439.0), 2152.48729534);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex1.I.multiply(1);
      Complex complex5 = complex2.multiply((-317));
      double double0 = complex2.INF.abs();
      boolean boolean0 = complex0.equals("EULER_ANGLES_SINGULARITY");
      Complex complex6 = complex0.multiply(955);
      Complex complex7 = complex1.createComplex(2.0, 1291.8);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-625.1314));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.valueOf(427.3903843425392);
      Complex complex6 = complex2.add((-625.1314));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-101.39857430298));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex0.ONE.cos();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.INF.add((-101.39857430298));
      Complex complex8 = complex4.INF.conjugate();
      Complex complex9 = complex8.ZERO.subtract(complex4);
      double double0 = complex0.getReal();
      int int0 = complex5.hashCode();
      Complex complex10 = complex4.log();
      Complex complex11 = complex3.divide(complex7);
      Complex complex12 = complex7.pow(0.0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2049.97594313, 1.013765811920166);
      Complex complex1 = new Complex(2049.97594313, 1.013765811920166);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = Complex.valueOf(2049.97594313);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex3.reciprocal();
      int int0 = complex6.I.hashCode();
      Complex complex7 = complex0.I.tanh();
      Complex complex8 = complex3.INF.acos();
      Complex complex9 = complex3.ONE.subtract(complex4);
      Object object0 = complex0.readResolve();
      Complex complex10 = complex8.ZERO.add((-1550.733));
      int int1 = complex0.hashCode();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex8.conjugate();
      double double0 = complex2.getArgument();
      boolean boolean0 = complex5.isInfinite();
      Complex complex13 = complex7.log();
      int int2 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.NaN.add(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = Complex.valueOf(1.6697361107868944E-8);
      Complex complex6 = complex3.ONE.pow(0.0);
      Complex complex7 = Complex.valueOf(1.6697361107868944E-8);
      Complex complex8 = complex0.subtract(complex3);
      double double0 = complex7.getArgument();
      Complex complex9 = complex5.add(937.92831);
      double double1 = complex4.getReal();
      Complex complex10 = complex0.INF.log();
      int int0 = complex4.hashCode();
      Complex complex11 = Complex.valueOf(Double.NaN);
      Complex complex12 = complex0.divide(complex3);
      Complex complex13 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-158.3250456057));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.I.exp();
      Complex complex8 = complex6.NaN.cosh();
      double double0 = complex3.getArgument();
      boolean boolean0 = complex4.isNaN();
      double double1 = complex0.getArgument();
      int int0 = complex6.hashCode();
      Complex complex9 = Complex.valueOf(1.5628822871880503E-18, 7.012806239173502E291);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.I.divide(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.INF.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex1.add(0.0);
      double double1 = complex5.ONE.getArgument();
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex0.pow(complex3);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex3.reciprocal();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex4.add(complex9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.divide(4.538983468118194E-9);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.NaN.divide(0.0);
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = complex0.ZERO.conjugate();
      double double0 = complex1.abs();
      Complex complex9 = complex1.multiply(4.538983468118194E-9);
      double double1 = complex9.INF.getArgument();
      Complex complex10 = complex4.ONE.divide(0.0);
      Complex complex11 = complex10.ONE.subtract(0.0);
      boolean boolean0 = complex3.isInfinite();
      try { 
        complex0.nthRoot((-1433));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,433
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.ZERO.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex1.divide(complex2);
      Complex complex9 = complex8.INF.add((-2410.69));
      double double1 = complex7.abs();
      Complex complex10 = complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      int int0 = complex0.I.hashCode();
      double double0 = complex1.abs();
      Complex complex2 = complex0.ONE.add(complex1);
      double double1 = complex1.NaN.abs();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sqrt();
      int int1 = complex3.ONE.hashCode();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.atan();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex6 = complex4.asin();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.I.add(6.283185307179586);
      Complex complex9 = complex1.ONE.asin();
      Complex complex10 = complex5.subtract((-1665.7427804402));
      Complex complex11 = complex10.INF.sqrt();
      Complex complex12 = complex11.ZERO.multiply(Double.NaN);
      ComplexField complexField0 = complex12.ONE.getField();
      Complex complex13 = complex0.acos();
      Object object1 = complex8.readResolve();
      Complex complex14 = complex10.asin();
      Complex complex15 = complex14.ONE.pow(complex0);
      double double2 = complex14.getReal();
      int int2 = complex13.hashCode();
      Complex complex16 = complex3.acos();
      Complex complex17 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.add(Double.NaN);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.negate();
      int int0 = complex2.NaN.hashCode();
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.INF.pow(Double.NaN);
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex4.ONE.acos();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex3.pow(0.0);
      Complex complex12 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex4.getField();
      Complex complex13 = complex7.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1798.0286697));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.conjugate();
      double double1 = complex1.getReal();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.cosh();
      double double2 = complex4.INF.getArgument();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex4.subtract(complex2);
      Complex complex8 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.NaN;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(6.283185307179586);
      List<Complex> list0 = complex0.INF.nthRoot(7);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex3.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1032.35615), (-1032.35615));
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ONE.pow((-508.0));
      Complex complex3 = complex2.ONE.createComplex((-508.0), 20.0);
      Complex complex4 = complex0.NaN.tan();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
      Complex complex5 = Complex.valueOf((-2249.7));
      double double0 = complex5.abs();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.ONE.add(0.0);
      Complex complex5 = complex4.INF.divide(0.0);
      Complex complex6 = complex0.subtract(complex1);
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex1.add(0.0);
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex9.exp();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex11.cos();
      Complex complex13 = complex4.conjugate();
      Complex complex14 = complex3.pow(complex0);
      Complex complex15 = complex9.multiply(complex1);
      Complex complex16 = complex4.conjugate();
      Complex complex17 = complex8.reciprocal();
      Complex complex18 = Complex.valueOf(0.0, 2064.371945);
      Complex complex19 = complex10.tan();
      Complex complex20 = complex18.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.pow(complex0);
      double double0 = complex3.getImaginary();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.multiply(136);
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex1.ZERO.cos();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex4.INF.asin();
      double double1 = complex0.ONE.abs();
      Complex complex6 = complex0.tanh();
      double double2 = complex2.getImaginary();
      Complex complex7 = complex3.sin();
      Complex complex8 = Complex.valueOf((double) 136, (-1.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-113.094985207), (-113.094985207));
      Complex complex1 = complex0.pow((-113.094985207));
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex4.cosh();
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex0.tanh();
      Complex complex9 = Complex.INF;
      boolean boolean1 = complex0.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(5214.542335611936, 5214.542335611936);
      Complex complex1 = complex0.NaN.sin();
      Object object0 = complex1.NaN.readResolve();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.INF.add(5214.542335611936);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1032.35615), (-1032.35615));
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ONE.pow((-508.0));
      Complex complex2 = complex1.ONE.createComplex((-508.0), 20.0);
      Complex complex3 = complex0.NaN.tan();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
      Complex complex4 = Complex.valueOf((-2249.7));
      double double0 = complex4.abs();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-7.875434494414498E-9));
      Complex complex1 = complex0.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex2.divide(complex1);
      String string0 = complex3.ONE.toString();
      Complex complex5 = complex3.NaN.reciprocal();
      double double0 = complex5.getArgument();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.INF.multiply((-645));
      Object object1 = complex5.INF.readResolve();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex1.add(0.0);
      double double1 = complex1.getImaginary();
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex0.sqrt1z();
      Complex complex15 = complex14.INF.cos();
      double double2 = complex10.getImaginary();
      Complex complex16 = complex14.conjugate();
      String string1 = complex16.ONE.toString();
      boolean boolean1 = complex1.isInfinite();
      Complex complex17 = complex15.negate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 2697.077);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-80.886282015482));
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.cos();
      String string0 = complex2.I.toString();
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.NaN.pow((-80.886282015482));
      double double0 = complex2.ZERO.abs();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.ONE.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex4.multiply(1.1593703222523284E-8);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.I.add((-80.886282015482));
      Complex complex10 = complex6.pow(complex4);
      Complex complex11 = complex0.ONE.multiply(1568);
      Complex complex12 = complex10.ZERO.asin();
      double double1 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2200.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex3.NaN.reciprocal();
      double double0 = complex2.I.getArgument();
      Complex complex5 = complex2.multiply((-1119));
      String string0 = complex3.toString();
      Complex complex6 = complex1.createComplex((-1119), 1.108938997126179E-40);
      Complex complex7 = complex4.cos();
      Complex complex8 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2.6918654441833496, 0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.multiply(complex1);
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.pow(1508.2280742);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex0.divide(complex3);
      Object object1 = new Object();
      boolean boolean1 = complex3.equals(object1);
      double double0 = complex1.getReal();
      Complex complex7 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.pow(1508.2280742);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.divide(complex2);
      Object object0 = new Object();
      boolean boolean1 = complex2.equals(object0);
      double double0 = complex1.getReal();
      Complex complex6 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1500.0), (-1921.860859343));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.add(5560.357931692101);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.multiply(2341);
      Complex complex4 = complex2.sinh();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex0.createComplex((-1921.860859343), 5560.357931692101);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(1356.915514223);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex3.multiply(2229);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6191893815994263, (-3064.78930667294));
      Complex complex1 = Complex.valueOf((-100.35974), 0.12470348179340363);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.createComplex((-3064.78930667294), 0.12470348179340363);
      Complex complex4 = complex3.ZERO.sqrt();
      double double0 = complex0.getImaginary();
      double double1 = complex0.abs();
      Complex complex5 = complex3.sin();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(2.499312400817871, (-5264.0));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.6176109313964844, 0.6176109313964844);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.atan();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.multiply(0.0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.multiply(2714);
      Object object1 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply(1229);
      Complex complex2 = complex1.ONE.tan();
      List<Complex> list0 = complex0.NaN.nthRoot(1229);
      Complex complex3 = complex0.exp();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2384.9801), 2.757030889767851E-8);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.valueOf((-3785.304628651), (-3785.304628651));
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = Complex.NaN;
      double double0 = complex5.abs();
      Complex complex6 = Complex.valueOf((-2384.9801), Double.NaN);
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex7.NaN.sin();
      double double1 = complex4.getReal();
      Complex complex9 = complex7.log();
      try { 
        complex9.NaN.nthRoot((-101));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -101
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(586.23721);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf(586.23721);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex0.INF.pow((-28.2));
      Complex complex5 = complex0.reciprocal();
      double double0 = complex2.abs();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex3.divide(2.9621181706527444E172);
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.sin();
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex2.INF.nthRoot(1);
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex0.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex2.pow(complex6);
      Complex complex8 = complex4.subtract((double) 1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.8946401383311E-63);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.I.createComplex((-1318.45005559306), 0.0);
      Complex complex2 = complex0.INF.subtract(0.0);
      Complex complex3 = complex0.multiply((-604));
      Complex complex4 = complex3.divide((-1442.0));
      Complex complex5 = Complex.valueOf(0.0, (double) (-604));
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex1.multiply(0);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex8.divide(6.942757623821567E-208);
      Complex complex10 = complex9.sqrt1z();
      int int0 = complex1.hashCode();
      Complex complex11 = complex7.log();
      Complex complex12 = Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex0.multiply((-305.7054798474));
      Complex complex6 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(729.1);
      Complex complex1 = Complex.valueOf((-1089.0));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.sqrt();
      double double0 = complex2.getArgument();
      Complex complex4 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1368.409), (-1368.409));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.pow((-759.815973243795));
      String string0 = complex3.toString();
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.add((-1549.431327));
      Complex complex3 = complex1.add((-1095.0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-1.4154089255217218E-8));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex4.NaN.pow(complex3);
      Complex complex8 = complex7.NaN.conjugate();
      int int0 = complex2.hashCode();
      Complex complex9 = complex2.add((-1.4154089255217218E-8));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(886.3804747175966, 886.3804747175966);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(702);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.pow(886.3804747175966);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-31.96152699734), (-31.96152699734));
      Complex complex1 = complex0.add((-93.23));
      Complex complex2 = complex1.multiply((-469.268897578));
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2891.0451409073), (-2891.0451409073));
      Complex complex1 = new Complex((-2891.0451409073));
      Complex complex2 = Complex.valueOf((-2891.0451409073));
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex1.divide((-2891.0451409073));
      Complex complex5 = complex1.ZERO.multiply(complex0);
      Complex complex6 = complex0.add(complex1);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1837.98942963414));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex3.createComplex((-1837.98942963414), (-1837.98942963414));
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex9 = complex6.ONE.sin();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex10.ONE.multiply(complex3);
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex6.multiply(0.0);
      Complex complex13 = complex12.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      List<Complex> list0 = complex0.nthRoot(511);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(2596.947802);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.sinh();
      double double0 = complex3.getReal();
      double double1 = complex4.getReal();
      double double2 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1933437776279623E-7);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.sin();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex2.log();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.892856346657855E140, 1.892856346657855E140);
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf(1.892856346657855E140, 2303.8);
      Complex complex2 = Complex.valueOf(0.0, 1.892856346657855E140);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(231.1334846300006);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ONE.divide(231.1334846300006);
      Complex complex3 = complex0.I.tan();
      String string0 = complex1.NaN.toString();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.createComplex(1.9050939083099365, 0.0);
      Complex complex6 = complex5.I.cos();
      double double0 = complex0.getArgument();
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex0.createComplex(0.0, 231.1334846300006);
      Complex complex9 = Complex.valueOf(231.1334846300006, 0.0);
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex9.INF.cosh();
      Complex complex12 = complex11.divide(1159.95);
      Complex complex13 = complex6.ZERO.cos();
      Complex complex14 = complex8.divide(complex0);
      Complex complex15 = complex5.ZERO.add(complex10);
      Complex complex16 = complex6.tan();
      Complex complex17 = complex7.divide(1667.840837719);
      Complex complex18 = Complex.valueOf(1.9050939083099365, 1.9050939083099365);
      Complex complex19 = complex0.atan();
      Complex complex20 = complex6.negate();
      Complex complex21 = complex2.tan();
      double double1 = complex19.getReal();
      Complex complex22 = complex2.subtract(complex4);
      Complex complex23 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-594.4941121092892));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex0.INF.log();
      Complex complex4 = Complex.valueOf(0.0, 863.6);
      Complex complex5 = complex0.ZERO.cosh();
      double double0 = complex5.ONE.abs();
      Complex complex6 = complex3.I.reciprocal();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex0.I.sinh();
      Complex complex9 = complex6.divide(complex3);
      Complex complex10 = complex9.sqrt();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.NaN.tanh();
      double double1 = complex0.getArgument();
      Complex complex13 = complex3.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.INF.divide(0.0);
      Complex complex8 = complex4.NaN.negate();
      Complex complex9 = complex4.ONE.add(complex0);
      double double0 = complex1.getArgument();
      double double1 = complex1.ONE.abs();
      Complex complex10 = complex0.ZERO.conjugate();
      try { 
        complex0.nthRoot((-53));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -53
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf((-376.9), (-376.9));
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.valueOf((-1062.25), 0.0);
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex2.INF.negate();
      double double0 = complex8.getArgument();
      double double1 = complex3.I.getArgument();
      Complex complex11 = complex1.INF.add(0.0);
      Complex complex12 = complex8.ONE.multiply(1273);
      double double2 = complex6.getArgument();
      Complex complex13 = complex2.add(1942.0);
      Complex complex14 = complex13.createComplex(2481.28174, 0.0);
      Complex complex15 = complex0.multiply(1273);
      Complex complex16 = complex0.subtract(0.0);
      Complex complex17 = complex3.conjugate();
      Complex complex18 = complex1.subtract(complex15);
      Complex complex19 = complex16.asin();
      Object object0 = new Object();
      boolean boolean0 = complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.divide(0.0);
      Object object0 = complex0.ONE.readResolve();
      List<Complex> list0 = complex0.INF.nthRoot(702);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.sinh();
      double double1 = complex7.abs();
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.INF;
      Complex complex10 = complex2.pow(complex9);
      Complex complex11 = complex10.sin();
      double double2 = complex11.NaN.getArgument();
      Complex complex12 = complex0.pow(complex6);
      Complex complex13 = complex8.cosh();
      Object object1 = new Object();
      boolean boolean1 = complex8.equals(object1);
      Complex complex14 = Complex.valueOf((-1686.8934766505483), 724.706180416);
      Complex complex15 = complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ONE.subtract(0.0);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex0.INF.acos();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex0.INF.asin();
      Complex complex8 = complex0.atan();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex0.divide(complex7);
      boolean boolean0 = complex9.isNaN();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex10.pow(complex0);
      Complex complex13 = complex10.pow(complex11);
      Complex complex14 = complex1.cos();
      String string0 = complex3.toString();
      Complex complex15 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-939.7156331702705));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = Complex.valueOf((-939.7156331702705), (-939.7156331702705));
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.ONE.multiply(complex3);
      Complex complex5 = complex0.ONE.createComplex((-939.7156331702705), 1712.739438040624);
      Complex complex6 = complex0.ONE.negate();
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex0.multiply(2120);
      List<Complex> list0 = complex0.nthRoot(2120);
      Complex complex10 = complex0.subtract((-939.7156331702705));
      Complex complex11 = complex0.ZERO.sqrt1z();
      Complex complex12 = complex7.reciprocal();
      boolean boolean0 = complex3.isNaN();
      double double0 = complex12.getArgument();
      Complex complex13 = complex1.subtract(complex6);
      Complex complex14 = complex13.cos();
      Complex complex15 = complex8.I.sqrt();
      Complex complex16 = complex3.sqrt();
      ComplexField complexField0 = complex8.getField();
      Complex complex17 = complex16.multiply(complex5);
      Complex complex18 = complex17.INF.asin();
      Complex complex19 = complex15.sin();
      Complex complex20 = complex5.tan();
      Complex complex21 = complex16.atan();
      Complex complex22 = complex21.NaN.exp();
      Object object0 = complex21.readResolve();
      Complex complex23 = complex21.add(1209.94445457418);
      Complex complex24 = complex8.createComplex(1209.94445457418, 0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double double0 = (-6881.516);
      Complex complex0 = Complex.valueOf((-6881.516));
      Complex complex1 = complex0.I.subtract((-6881.516));
      Object object0 = complex0.readResolve();
      double double1 = 1534.0;
      Complex complex2 = new Complex(1534.0, 1534.0);
      Complex complex3 = complex2.multiply(1534.0);
      Complex complex4 = complex3.NaN.add(1534.0);
      Complex complex5 = complex2.I.divide(complex0);
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex6.I.divide(complex5);
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 4289.47;
      Complex complex1 = complex0.ONE.subtract(4289.47);
      double double1 = 1.0;
      Complex complex2 = complex0.INF.multiply(1.0);
      Complex complex3 = complex0.exp();
      int int0 = 442;
      Complex complex4 = complex3.ZERO.multiply(442);
      Complex complex5 = complex4.acos();
      int int1 = 0;
      try { 
        complex5.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
