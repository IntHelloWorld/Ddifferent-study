/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:14:26 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.1792661654989742E-7));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.193572619487537E139), (-3185.9372350397257));
      Complex complex1 = new Complex((-3772.729989));
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.I.pow((-2067.86609));
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex0.ZERO.log();
      Complex complex9 = complex7.ONE.pow((-8.193572619487537E139));
      try { 
        complex0.nthRoot((-2474));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,474
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.7979660725865874E274));
      Complex complex1 = complex0.I.asin();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.createComplex((-3.7979660725865874E274), 0.0);
      Complex complex4 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3055.271353917, 3055.271353917);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.multiply((-1875));
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = Complex.valueOf(2278.73);
      Complex complex5 = complex0.ZERO.sinh();
      Object object0 = complex1.ONE.readResolve();
      Complex complex6 = complex0.add(complex1);
      double double0 = complex0.ZERO.abs();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex8 = complex7.ZERO.subtract(complex0);
      Complex complex9 = complex6.NaN.conjugate();
      double double1 = complex8.I.getArgument();
      Complex complex10 = complex0.divide((-339.963909));
      Complex complex11 = complex1.acos();
      Complex complex12 = complex11.add(Double.POSITIVE_INFINITY);
      Complex complex13 = complex3.divide(Double.NaN);
      int int0 = complex12.ONE.hashCode();
      double double2 = complex11.abs();
      Complex complex14 = complex12.add((-339.963909));
      double double3 = complex6.abs();
      Complex complex15 = Complex.valueOf((double) (-1875));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.ONE;
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.I.negate();
      double double0 = complex4.abs();
      Complex complex6 = complex2.add(Double.NaN);
      Object object0 = complex3.readResolve();
      Complex complex7 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.ONE.add(2644.0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex3.NaN.divide(2644.0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex9.NaN.pow(125.01722939508187);
      Complex complex11 = complex6.NaN.tanh();
      Complex complex12 = complex1.multiply((-263));
      Complex complex13 = complex9.sinh();
      Object object0 = complex13.ONE.readResolve();
      Complex complex14 = complex8.multiply(complex12);
      double double0 = complex6.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex15 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.multiply(228);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex2.NaN.subtract(734.315404713);
      try { 
        complex2.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-3848.11114220911);
      double double1 = (-3229.8);
      Complex complex0 = Complex.valueOf((-3848.11114220911), (-3229.8));
      String string0 = complex0.toString();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 1527.596);
      Complex complex2 = complex1.I.createComplex(Double.POSITIVE_INFINITY, 1527.596);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex3.ONE.exp();
      int int0 = complex2.hashCode();
      Complex complex6 = complex1.ONE.sinh();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex7 = complex0.INF.sin();
      Complex complex8 = complex0.divide(4376.32003695);
      Complex complex9 = complex0.ONE.atan();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.tan();
      boolean boolean0 = complex2.isNaN();
      Complex complex12 = complex4.log();
      Complex complex13 = complex12.INF.sin();
      String string0 = complex3.toString();
      String string1 = complex13.toString();
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex14.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1942.0));
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      String string0 = complex1.ZERO.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.divide(complex0);
      double double0 = complex0.INF.getArgument();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex5.ZERO.sinh();
      double double1 = complex1.abs();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex8.ZERO.pow(complex5);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex4.reciprocal();
      boolean boolean1 = complex0.isInfinite();
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex14 = complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1282.691);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.ZERO.subtract((-64.04245));
      Complex complex6 = complex1.negate();
      Complex complex7 = complex1.divide(complex6);
      Object object0 = complex7.readResolve();
      Complex complex8 = complex4.cos();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex3.add(1282.691);
      Complex complex10 = complex4.pow(complex1);
      ComplexField complexField0 = complex6.getField();
      Complex complex11 = complex10.subtract(0.0);
      List<Complex> list0 = complex0.nthRoot(1636);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2433.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(1348);
      Complex complex3 = complex2.ONE.multiply(140);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.multiply(2281.0);
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.I.multiply(1);
      Complex complex9 = complex4.createComplex((-2433.0), (-766.6301013609));
      Complex complex10 = complex9.NaN.cosh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex0.NaN.multiply((-3495.5618));
      Complex complex6 = complex0.NaN.divide(complex2);
      Complex complex7 = complex6.ZERO.pow(complex4);
      Complex complex8 = complex0.cos();
      int int0 = complex8.hashCode();
      String string0 = complex0.toString();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex3.I.divide(complex11);
      Complex complex13 = complex6.INF.pow(complex11);
      Complex complex14 = complex3.pow(complex8);
      Complex complex15 = complex14.ZERO.reciprocal();
      Complex complex16 = complex15.I.multiply(complex7);
      Object object0 = complex0.readResolve();
      Complex complex17 = complex0.sin();
      Complex complex18 = complex4.ZERO.subtract(complex5);
      Object object1 = complex7.readResolve();
      double double1 = complex0.getArgument();
      ComplexField complexField0 = complex1.getField();
      double double2 = complex2.getReal();
      Complex complex19 = complex3.multiply(Double.NaN);
      Complex complex20 = complex19.INF.cos();
      Complex complex21 = complex1.subtract(Double.NaN);
      Complex complex22 = complex11.cos();
      int int1 = complex7.hashCode();
      Complex complex23 = complex7.cos();
      Complex complex24 = complex4.subtract(complex7);
      double double3 = complex20.getArgument();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1802.5419644655), 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.sqrt();
      double double0 = complex1.getArgument();
      Complex complex5 = complex0.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.I.pow(Double.NaN);
      Complex complex7 = complex5.ONE.subtract(complex4);
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex2.isInfinite();
      Complex complex8 = complex3.exp();
      double double0 = complex8.abs();
      boolean boolean2 = complex5.isInfinite();
      Complex complex9 = complex3.I.sqrt();
      Complex complex10 = complex4.I.tan();
      Object object0 = complex5.readResolve();
      Complex complex11 = Complex.valueOf((-1360.5));
      Complex complex12 = complex11.divide(complex8);
      Complex complex13 = complex11.NaN.divide(complex8);
      Complex complex14 = complex4.exp();
      Complex complex15 = complex13.negate();
      Complex complex16 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(2.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.pow(1446.91049821274);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1658.3));
      double double0 = complex0.ONE.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex1 = new Complex(Double.NaN, (-1199.62137));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-289.47922414367), (-289.47922414367));
      Complex complex1 = complex0.I.createComplex((-289.47922414367), 6.283185307179586);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.multiply((-2146994244));
      Complex complex4 = complex0.tan();
      double double0 = complex4.abs();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.NaN.multiply(complex4);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex1.multiply(1.0);
      String string0 = complex4.toString();
      Complex complex10 = complex0.createComplex(1.0, 1.0);
      Complex complex11 = complex4.sin();
      String string1 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2600.19), (-2600.19));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.INF.subtract((-2600.19));
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex3.ZERO.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex3.I.abs();
      Complex complex6 = complex3.NaN.pow(0.450652539730072);
      double double1 = complex0.getArgument();
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.ONE.pow(complex8);
      Complex complex10 = complex0.INF.multiply(complex8);
      Complex complex11 = complex3.add(1.0);
      Complex complex12 = complex3.sinh();
      List<Complex> list0 = complex12.NaN.nthRoot(17);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex13 = complex0.atan();
      Complex complex14 = complex13.reciprocal();
      int int0 = complex13.hashCode();
      boolean boolean1 = complex8.isNaN();
      Complex complex15 = complex1.sinh();
      Complex complex16 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex17 = complex0.atan();
      Complex complex18 = Complex.I;
      boolean boolean2 = complex7.equals(complex18);
      Complex complex19 = complex8.pow(Double.POSITIVE_INFINITY);
      double double2 = complex0.getReal();
      String string0 = complex16.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.multiply((-1));
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1920.997804), (-1920.997804));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = new Complex((-1920.997804), (-807.4797));
      Complex complex5 = complex3.I.multiply(complex4);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex2.multiply((-807.4797));
      Complex complex8 = complex6.multiply(complex5);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex2.exp();
      double double0 = complex1.abs();
      Complex complex11 = complex0.subtract((-1920.997804));
      double double1 = complex1.getReal();
      double double2 = complex11.getImaginary();
      Complex complex12 = complex7.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.NaN.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0, 1806.76141197951);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.ONE.cos();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.NaN.divide(1806.76141197951);
      Complex complex8 = complex6.ONE.tan();
      Object object1 = complex6.readResolve();
      Complex complex9 = complex6.I.multiply((-282.0422121933));
      Complex complex10 = complex4.exp();
      Complex complex11 = Complex.valueOf(3614.06, 1.1207549425651513E188);
      Complex complex12 = complex10.I.sin();
      Complex complex13 = complex3.atan();
      int int0 = complex13.hashCode();
      Complex complex14 = complex2.divide(complex10);
      Complex complex15 = complex0.subtract(1601.3044);
      double double1 = complex0.getArgument();
      Complex complex16 = complex13.multiply(0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex8.ONE.pow(complex5);
      double double0 = complex7.getImaginary();
      Complex complex10 = complex7.divide(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex3.multiply((-2000));
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex5.createComplex(Double.NaN, (-2000));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-285.43193535037267), (-285.43193535037267));
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.divide((-1624.65));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.tanh();
      double double0 = complex5.I.abs();
      double double1 = complex5.INF.getArgument();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex6.INF.cos();
      Complex complex9 = complex0.I.multiply(3084.0);
      Complex complex10 = complex1.NaN.tanh();
      int int0 = complex1.INF.hashCode();
      Complex complex11 = complex1.multiply(complex6);
      double double2 = complex1.getImaginary();
      double double3 = complex0.getArgument();
      Complex complex12 = complex0.multiply(2.3318915367126465);
      Complex complex13 = complex1.add(1.0);
      Complex complex14 = complex11.acos();
      boolean boolean0 = complex4.equals(complex6);
      Object object0 = complex1.readResolve();
      Complex complex15 = complex5.reciprocal();
      Object object1 = complex9.readResolve();
      Complex complex16 = complex6.subtract(complex0);
      boolean boolean1 = complex16.isInfinite();
      Complex complex17 = Complex.valueOf(965.93319747207, (-4301.4879417));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2977.5190443521));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex0.createComplex((-2977.5190443521), (-2977.5190443521));
      String string0 = complex4.INF.toString();
      Complex complex5 = complex1.NaN.sin();
      String string1 = complex0.toString();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.divide(complex6);
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex2.ONE.add(complex0);
      double double0 = complex5.I.getArgument();
      double double1 = complex4.ONE.getArgument();
      List<Complex> list0 = complex2.ZERO.nthRoot(1317);
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex4.multiply(1317);
      Complex complex8 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.268329019570017E70);
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.add(0.0);
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.NaN.divide(complex1);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex5 = complex0.tan();
      double double0 = complex0.getArgument();
      Complex complex6 = complex3.sinh();
      int int0 = complex4.hashCode();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex6.acos();
      int int1 = complex5.hashCode();
      Complex complex9 = complex5.subtract(2.268329019570017E70);
      List<Complex> list0 = complex9.nthRoot(1187);
      Complex complex10 = complex2.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.NaN.sqrt();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex4 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-7.315860999413894E129));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-1710.61933));
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1477.070193387659));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.divide((-1477.070193387659));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.divide((-1477.070193387659));
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.ZERO.cosh();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex5.reciprocal();
      double double0 = complex3.getImaginary();
      Complex complex10 = complex0.sinh();
      boolean boolean0 = complex10.isNaN();
      double double1 = complex0.getImaginary();
      Complex complex11 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4634.194496676862));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(2070.5219564602694, 0.0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.negate();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      Complex complex6 = complex5.pow(0.0);
      double double0 = complex5.getImaginary();
      Complex complex7 = complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 1289.752238695);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.add(1289.752238695);
      String string0 = complex2.toString();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex4.INF.multiply(6.283185307179586);
      Complex complex6 = Complex.valueOf(1462.74255105, 1462.74255105);
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex6.ONE.multiply(complex4);
      String string1 = complex0.toString();
      Complex complex9 = complex2.I.subtract(complex6);
      Complex complex10 = complex7.multiply(0);
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1099.87562008, 1099.87562008);
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.ONE.sinh();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex0.divide(1099.87562008);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex1.I.acos();
      double double0 = complex0.abs();
      String string0 = complex1.toString();
      Complex complex7 = complex4.exp();
      ComplexField complexField1 = complex7.I.getField();
      int int0 = complex2.hashCode();
      Complex complex8 = complex1.add(0.0);
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex2.pow(complex10);
      Complex complex12 = complex9.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(804.629632);
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals((Object) null);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.INF.createComplex(1, 1);
      Complex complex3 = complex2.I.sqrt();
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex4 = complex1.createComplex(4488.0, 4488.0);
      Complex complex5 = complex4.divide(4488.0);
      Complex complex6 = complex0.ZERO.divide(complex1);
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex1.INF.log();
      double double0 = complex0.getReal();
      Complex complex9 = complex4.divide((double) 1);
      Complex complex10 = complex7.sin();
      List<Complex> list1 = complex10.nthRoot(85);
      Complex complex11 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = new Complex((-1033.596536), (-1033.596536));
      Complex complex2 = complex1.ONE.tan();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1707.7);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.negate();
      double double0 = complex2.getReal();
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf(-0.0);
      Complex complex5 = complex1.sin();
      Complex complex6 = Complex.valueOf((-323.47054497240293), -0.0);
      boolean boolean0 = complex6.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.I.subtract(complex2);
      Complex complex4 = complex0.tan();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.NaN.multiply(complex0);
      Complex complex7 = complex5.I.createComplex(0.0, 0.0);
      Complex complex8 = complex4.multiply(complex5);
      String string1 = complex8.toString();
      Complex complex9 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.divide(complex0);
      Complex complex11 = complex9.ONE.multiply((-99.29887));
      Complex complex12 = complex9.multiply(2068);
      Complex complex13 = complex6.atan();
      Complex complex14 = complex12.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3027.882874);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex0.ONE.add(complex1);
      Complex complex5 = complex0.INF.asin();
      Complex complex6 = complex1.ONE.divide(complex2);
      Complex complex7 = complex0.add(3027.882874);
      Complex complex8 = complex7.multiply((-1060));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-149.00066103714), 1732.73415);
      List<Complex> list0 = complex0.nthRoot(567);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.I.divide(complex0);
      Complex complex5 = complex4.INF.add(0.0);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.NaN.multiply(1);
      Complex complex9 = complex7.I.subtract((-149.00066103714));
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex9.negate();
      Complex complex13 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3268.0);
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex1.add(0.0);
      Complex complex7 = complex1.ZERO.divide((-822.696165811));
      Complex complex8 = complex6.ZERO.subtract(0.0);
      Complex complex9 = complex6.pow((-644.145016502));
      double double0 = complex2.getReal();
      boolean boolean0 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(2069.305512638803, (-20.0));
      ComplexField complexField0 = complex0.NaN.getField();
      ComplexField complexField1 = complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.log();
      int int0 = complex0.INF.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.multiply(0.3764009475708008);
      Complex complex4 = complex2.ONE.atan();
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex0.divide((-1822.8260166840719));
      Complex complex6 = complex4.ZERO.divide((-20.0));
      ComplexField complexField2 = complex5.NaN.getField();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex1.cos();
      String string0 = complex8.ONE.toString();
      Complex complex9 = complex1.ONE.tanh();
      Complex complex10 = complex8.I.cosh();
      Complex complex11 = complex2.sqrt1z();
      double double1 = complex1.getReal();
      Complex complex12 = complex3.multiply(1431);
      int int1 = complex7.hashCode();
      Complex complex13 = complex2.atan();
      Complex complex14 = complex13.ONE.subtract(2.0);
      Complex complex15 = complex12.sqrt();
      Complex complex16 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      double double0 = complex0.abs();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.NaN.subtract((-2514.231187));
      double double1 = complex1.ONE.getArgument();
      Complex complex4 = complex0.I.sqrt1z();
      double double2 = complex4.ONE.getArgument();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.multiply(1738);
      Complex complex7 = complex4.ZERO.tan();
      List<Complex> list0 = complex0.ONE.nthRoot(17);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.pow(0.0);
      Complex complex10 = complex9.ZERO.multiply(Double.NaN);
      Complex complex11 = complex9.NaN.pow((-483.8738042));
      Object object1 = complex8.readResolve();
      Complex complex12 = complex5.add(complex4);
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(2682.4, 996.797595715857);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(2682.4, 1.8591458797454834);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.pow(0.0);
      double double0 = complex0.abs();
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1441.798303661, 381.13825716647);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tanh();
      String string0 = complex0.I.toString();
      Complex complex3 = Complex.valueOf(1441.798303661);
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1089.9), (-1089.9));
      Complex complex1 = new Complex((-1089.9), (-2220.934695759043));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(976.051);
      Complex complex1 = complex0.cos();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-111.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-111.0));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex1.INF.pow(Double.NaN);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.log();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-6155.9152135908), (-6155.9152135908));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow((-2881.37183797));
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.INF.subtract(complex0);
      int int0 = complex2.ONE.hashCode();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.createComplex((-2881.37183797), 0.0);
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getReal();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex1.multiply(120);
      boolean boolean0 = complex8.isInfinite();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      List<Complex> list0 = complex1.ZERO.nthRoot(131);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(179.0422517683, 179.0422517683);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(179.0422517683);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex1.NaN.multiply(complex0);
      Complex complex5 = complex4.I.add(complex3);
      String string0 = complex4.NaN.toString();
      Complex complex6 = complex1.subtract(179.0422517683);
      double double0 = complex6.abs();
      double double1 = complex0.getArgument();
      double double2 = complex0.abs();
      Complex complex7 = Complex.valueOf(0.0);
      boolean boolean0 = complex3.equals(complex7);
      String string1 = complex7.toString();
      Complex complex8 = Complex.valueOf(0.7853981633974483);
      Complex complex9 = complex6.I.exp();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ZERO.pow(1184.253);
      Complex complex2 = complex0.multiply(3009.41637);
      double double0 = complex2.getImaginary();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.cos();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(3773.756895185841, 3773.756895185841);
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = Complex.valueOf((double) 1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.multiply((double) 1);
      Complex complex4 = complex3.multiply(2535.0);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1129.34, Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN, 1129.34);
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.divide((-1226.87));
      Complex complex2 = complex1.INF.add(complex0);
      List<Complex> list0 = complex1.nthRoot(537);
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.exp();
      double double0 = complex0.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.I.tan();
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex4.I.exp();
      ComplexField complexField0 = complex2.getField();
      double double1 = complex0.getReal();
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2435.729);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.conjugate();
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.multiply(2.0299429893493652);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex8.asin();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.createComplex((-1.0), 409.339454144);
      Complex complex5 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(2359.1853);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.NaN.add(2359.1853);
      Complex complex5 = complex0.subtract(2359.1853);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-1371.209));
      Complex complex2 = complex0.subtract(940.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(0.0, (-2255.1198842));
      Complex complex2 = complex1.INF.negate();
      boolean boolean0 = complex0.equals("@41-+6AFHX#UwD$");
      Complex complex3 = complex0.tan();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ZERO.createComplex(0.0, 1649.25015812144);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-627.65140854778), (-627.65140854778));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.divide((-627.65140854778));
      Complex complex4 = complex1.I.cosh();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex2.toString();
      int int0 = complex2.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.I.multiply(complex2);
      Complex complex6 = complex0.multiply(1.1760619079592718E92);
      double double0 = complex5.I.abs();
      Complex complex7 = complex0.pow(1.3677729802316034E227);
      int int1 = complex6.hashCode();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex5.pow(complex6);
      int int2 = complex9.hashCode();
      Complex complex11 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex6.ZERO.divide(complex5);
      Complex complex8 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex0.conjugate();
      int int0 = complex1.hashCode();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2114.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.cos();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex4 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.divide((-1999.8295242));
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      double double0 = complex1.abs();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-3627.76785436));
      Complex complex1 = complex0.reciprocal();
      double double0 = complex1.NaN.getArgument();
      boolean boolean0 = complex0.equals("e*dzg<*y@*2e0<q");
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.asin();
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = (-2.281578975407609E-22);
      Complex complex3 = complex0.multiply((-2.281578975407609E-22));
      Complex complex4 = complex2.sinh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.negate();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.divide(734.660361319);
      Complex complex4 = complex3.add(1102.4);
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.INF.sqrt1z();
      double double0 = complex0.INF.abs();
      Complex complex7 = complex1.NaN.tanh();
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex4.multiply((-952));
      Complex complex10 = Complex.valueOf(0.0, 734.660361319);
      Complex complex11 = complex4.divide(complex1);
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Complex complex13 = Complex.valueOf(734.660361319);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex13.equals(object0);
      Complex complex14 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.I.multiply(1);
      Complex complex4 = complex0.NaN.multiply(complex1);
      double double0 = complex0.ZERO.abs();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.sqrt1z();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex1.equals(object0);
      String string0 = complex0.toString();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.ONE.add(8.990862214387203E-308);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Object object0 = complex1.readResolve();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex1.divide(1289.97840947241);
      Complex complex5 = complex0.atan();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex6 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.createComplex(6.283185307179586, 0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow((-844.77208));
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3213.5870833105, 3213.5870833105);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-4227.41), (-4227.41));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ZERO.reciprocal();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex1.INF.pow(complex0);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex2.INF.log();
      Complex complex8 = complex1.NaN.sin();
      Complex complex9 = complex1.pow((-4227.41));
      Complex complex10 = complex6.divide((-4227.41));
      boolean boolean0 = complex9.isNaN();
      Complex complex11 = complex9.ONE.negate();
      Complex complex12 = complex11.I.asin();
      Complex complex13 = complex2.I.sqrt1z();
      Complex complex14 = complex1.ONE.pow(832.7721524198);
      Complex complex15 = complex0.add(832.7721524198);
      String string0 = complex2.toString();
      Complex complex16 = complex9.conjugate();
      Complex complex17 = complex5.atan();
      Complex complex18 = complex16.atan();
      Complex complex19 = complex18.ONE.multiply(832.7721524198);
      Complex complex20 = complex1.add(complex18);
      Complex complex21 = complex20.add(832.7721524198);
      Complex complex22 = complex8.atan();
      Complex complex23 = complex3.divide(complex9);
      Object object0 = complex0.readResolve();
      Complex complex24 = complex13.conjugate();
      Complex complex25 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-152.9));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.pow((-152.9));
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = Complex.valueOf((-3134.04010068258));
      Complex complex6 = complex5.ONE.tanh();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex0.I.getArgument();
      Complex complex7 = complex3.NaN.divide(complex5);
      Complex complex8 = complex3.divide(complex1);
      String string0 = complex5.toString();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex0.sinh();
      String string1 = complex9.toString();
      Complex complex11 = Complex.valueOf((-3134.04010068258));
      double double1 = complex0.getImaginary();
      Complex complex12 = complex9.sqrt();
      Complex complex13 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.multiply(5896);
      Complex complex3 = complex2.ONE.asin();
      double double0 = complex3.INF.abs();
      Complex complex4 = Complex.valueOf(1.2516618713553432E300);
      Complex complex5 = Complex.valueOf((double) 5896);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex2.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      String string1 = complex7.NaN.toString();
      double double1 = complex7.getReal();
      Complex complex8 = complex0.add(complex3);
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex7.ONE.negate();
      Complex complex12 = complex11.ZERO.asin();
      Complex complex13 = complex12.ONE.exp();
      double double2 = complex7.getImaginary();
      Complex complex14 = complex7.log();
      Complex complex15 = complex4.add(2.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, (-3676.11032));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.add((-3676.11032));
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex5.I.subtract(complex0);
      Complex complex7 = complex5.NaN.divide(complex4);
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex4.ONE.atan();
      Complex complex9 = complex8.ONE.divide(complex5);
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex7.NaN.atan();
      Complex complex12 = complex0.NaN.multiply(0);
      Complex complex13 = complex5.sin();
      Complex complex14 = complex0.createComplex((-3676.11032), (-20.0));
      double double0 = complex14.NaN.abs();
      Complex complex15 = complex4.subtract(complex13);
      Complex complex16 = complex7.ONE.pow(complex4);
      Complex complex17 = complex16.NaN.sqrt();
      Complex complex18 = complex16.NaN.sinh();
      Complex complex19 = complex7.divide(644.080262037428);
      List<Complex> list0 = complex13.nthRoot(1);
      Complex complex20 = complex5.multiply(0.0);
      Complex complex21 = complex6.sin();
      double double1 = complex18.getReal();
      Complex complex22 = complex20.multiply(complex21);
      Complex complex23 = complex10.divide(complex1);
      Complex complex24 = complex0.pow((-20.0));
      boolean boolean1 = complex0.equals(complex23);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      List<Complex> list0 = complex0.nthRoot(1309);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex3.multiply(1309);
      Complex complex5 = complex2.ONE.pow((-578.213729901867));
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex6.INF.acos();
      try { 
        complex6.ZERO.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.ONE.divide(3068.675209770161);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.multiply(512);
      Complex complex6 = complex4.ONE.pow((-1.0));
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex5.I.exp();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.NaN.divide(1.0);
      ComplexField complexField0 = complex10.getField();
      double double1 = complex0.getArgument();
      Complex complex12 = complex5.ONE.tanh();
      Complex complex13 = complex10.tan();
      Complex complex14 = Complex.valueOf(20.0, (-107.45));
      Complex complex15 = complex7.subtract((double) 512);
      double double2 = complex15.ONE.abs();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex16 = complex5.log();
      Complex complex17 = complex16.I.exp();
      Complex complex18 = complex0.sinh();
      Complex complex19 = complex12.pow(1.0);
      Complex complex20 = complex19.INF.divide(1.0);
      double double3 = complex10.abs();
      List<Complex> list0 = complex14.nthRoot(512);
      Complex complex21 = complex11.tanh();
      Complex complex22 = complex0.add(1.0);
      Complex complex23 = complex14.reciprocal();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex0.ONE.cos();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.sqrt();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.createComplex((-2570.04478057), 0.0);
      double double0 = complex0.NaN.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex3.INF.multiply(704);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.INF.tan();
      Object object0 = complex5.ONE.readResolve();
      int int0 = complex0.hashCode();
      double double1 = complex0.abs();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.tan();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex1.log();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex7.cos();
  }
}
