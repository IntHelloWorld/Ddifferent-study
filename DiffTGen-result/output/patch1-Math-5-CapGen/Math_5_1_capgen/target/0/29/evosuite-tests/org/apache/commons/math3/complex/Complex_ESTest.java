/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 03:24:48 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(complex0);
      double double0 = complex0.abs();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(430.34, 430.34);
      Complex complex1 = complex0.ONE.subtract((-1.0));
      Complex complex2 = complex0.subtract(1789.2281635);
      Complex complex3 = complex2.subtract((-1358.3181562));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.pow(complex2);
      List<Complex> list0 = complex3.ZERO.nthRoot(2790);
      Complex complex6 = complex4.log();
      Complex complex7 = new Complex(0.0, 1789.2281635);
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex8.ZERO.subtract((-1358.3181562));
      Complex complex10 = complex7.ZERO.negate();
      Complex complex11 = Complex.valueOf(207.4136113, 177.0);
      Complex complex12 = complex2.NaN.acos();
      Complex complex13 = complex4.ZERO.sin();
      Complex complex14 = complex2.add(complex7);
      Complex complex15 = complex4.sinh();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex14.equals(complex6);
      Complex complex16 = complex2.exp();
      Complex complex17 = complex4.sqrt();
      Complex complex18 = complex11.tanh();
      boolean boolean2 = complex12.isNaN();
      Complex complex19 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      double double0 = complex0.abs();
      Complex complex2 = complex1.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.NaN.multiply(complex2);
      Complex complex5 = Complex.valueOf((-474.58), 1.929433822631836);
      Complex complex6 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.NaN.multiply(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex8 = complex6.ONE.atan();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex6.INF.multiply(complex8);
      Complex complex11 = complex10.NaN.createComplex((-474.58), 1.929433822631836);
      Complex complex12 = complex8.ZERO.log();
      String string0 = complex6.INF.toString();
      Complex complex13 = complex6.add(complex0);
      Complex complex14 = complex13.ZERO.multiply(complex2);
      boolean boolean0 = complex0.equals(complex8);
      Complex complex15 = complex1.I.add(complex9);
      Complex complex16 = complex8.add(Double.POSITIVE_INFINITY);
      Complex complex17 = complex9.multiply(complex10);
      Complex complex18 = complex8.atan();
      Complex complex19 = complex1.multiply(complex8);
      Complex complex20 = complex19.I.acos();
      Complex complex21 = complex12.multiply(Double.POSITIVE_INFINITY);
      Complex complex22 = complex6.cos();
      Complex complex23 = complex18.asin();
      double double1 = complex17.getImaginary();
      Complex complex24 = complex22.cosh();
      Complex complex25 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex26 = complex23.createComplex((-1235.28706749), 1.929433822631836);
      ComplexField complexField1 = complex25.getField();
      Complex complex27 = complex7.pow((-2.5676078228301587E-8));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex3.NaN.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex6.ONE.divide(Double.NaN);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex8.NaN.cos();
      double double1 = complex10.ONE.getArgument();
      Complex complex11 = complex1.conjugate();
      Complex complex12 = complex11.NaN.tanh();
      Complex complex13 = complex6.add(complex3);
      try { 
        complex13.NaN.nthRoot((-470));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -470
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, (-1935.6481048807195));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = Complex.valueOf(5.3366470162689076E-8);
      Complex complex6 = complex4.ONE.pow(complex5);
      Complex complex7 = complex3.ZERO.divide(0.0);
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex1.ZERO.pow((-717.818397092));
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex2.equals(object0);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex10.createComplex((-824.58), (-1706.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-409.721), (-409.721));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.multiply(1384);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.ZERO.log();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex2.subtract(complex3);
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex1.add((-451.61685783244));
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex10 = complex0.add(complex8);
      List<Complex> list1 = complex2.nthRoot(1384);
      Complex complex11 = Complex.valueOf(1922.89869, (-409.721));
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(781.19, (-2667.7));
      Complex complex1 = complex0.subtract(781.19);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex0.tan();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex1.multiply(complex4);
      String string0 = complex1.I.toString();
      Complex complex6 = complex5.NaN.divide(complex3);
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex6.ONE.sqrt1z();
      Complex complex9 = complex5.add(complex3);
      Complex complex10 = complex9.NaN.reciprocal();
      Complex complex11 = complex10.I.sinh();
      Complex complex12 = complex9.add(complex1);
      Complex complex13 = complex12.NaN.subtract(complex5);
      Complex complex14 = complex4.cos();
      Complex complex15 = complex14.INF.multiply(Double.NaN);
      Complex complex16 = complex3.conjugate();
      Complex complex17 = complex4.cosh();
      Complex complex18 = complex1.add(complex8);
      Complex complex19 = complex17.createComplex((-2.7527887552743672E-8), (-1859.1986));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-265.0));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = new Complex((-265.0), 1.0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.divide(1346.611562);
      int int0 = complex2.hashCode();
      Complex complex5 = complex2.NaN.subtract(1.0);
      Complex complex6 = complex3.pow(complex2);
      String string0 = complex6.INF.toString();
      Complex complex7 = complex3.ONE.sqrt1z();
      double double0 = complex0.abs();
      Complex complex8 = new Complex(1346.611562);
      boolean boolean0 = complex3.equals(complex8);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.pow(complex0);
      List<Complex> list0 = complex0.ZERO.nthRoot(423);
      Complex complex3 = complex1.I.pow(0.0);
      Complex complex4 = complex2.INF.createComplex((-328.8578763), (-83.5));
      Complex complex5 = complex0.I.log();
      Complex complex6 = complex0.ONE.multiply(complex1);
      Complex complex7 = complex6.ONE.subtract(complex5);
      double double0 = complex0.getArgument();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex5.sqrt1z();
      Complex complex12 = Complex.valueOf((-328.8578763));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-3031.853516834704), (-1.0));
      Complex complex1 = complex0.ZERO.subtract((-1487.6));
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex1.INF.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.add(0.5039018405998233);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.I.sin();
      String string0 = complex5.ZERO.toString();
      Complex complex8 = complex7.ZERO.divide(complex3);
      Complex complex9 = complex5.cos();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.I.subtract(complex2);
      Complex complex8 = complex6.ONE.sin();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex9 = complex0.log();
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex10.tan();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex12.ONE.acos();
      Complex complex14 = complex1.subtract(873.1250286680415);
      Complex complex15 = complex14.NaN.asin();
      Complex complex16 = complex12.ONE.sqrt();
      Complex complex17 = complex15.INF.sqrt();
      double double0 = complex13.getImaginary();
      Complex complex18 = complex1.multiply(1);
      Complex complex19 = Complex.valueOf(181.367521);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      String string0 = complex0.toString();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.pow((-554.31));
      Complex complex3 = complex2.I.subtract(0.0);
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.I.subtract((-554.31));
      Complex complex7 = complex6.INF.subtract(complex1);
      Complex complex8 = complex1.ONE.negate();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex0.INF.divide(complex5);
      Complex complex11 = Complex.valueOf(1.6385396676990034E-7);
      Complex complex12 = complex11.exp();
      Complex complex13 = complex5.add(complex1);
      double double0 = complex13.I.abs();
      Complex complex14 = complex0.log();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex13.divide(1.6385396676990034E-7);
      Complex complex17 = complex12.conjugate();
      double double1 = complex5.getImaginary();
      Complex complex18 = complex6.cos();
      Complex complex19 = complex1.pow(complex18);
      Complex complex20 = complex6.add(complex15);
      try { 
        complex15.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(379.987, 379.987);
      Complex complex1 = Complex.valueOf(379.987);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.I.acos();
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = Complex.valueOf(379.987, 379.987);
      Complex complex5 = complex0.INF.sinh();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.multiply(complex4);
      Object object0 = complex4.NaN.readResolve();
      Complex complex8 = complex4.NaN.divide(379.987);
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex0.multiply(complex4);
      Complex complex12 = complex11.ONE.subtract(359.74130018992);
      double double1 = complex11.I.getArgument();
      Complex complex13 = complex11.NaN.cosh();
      Complex complex14 = complex0.subtract(complex4);
      Complex complex15 = complex14.INF.tan();
      Complex complex16 = complex4.atan();
      Complex complex17 = complex0.exp();
      double double2 = complex8.getArgument();
      Complex complex18 = complex14.asin();
      Complex complex19 = complex1.cos();
      ComplexField complexField0 = complex15.getField();
      boolean boolean0 = complex3.isInfinite();
      Complex complex20 = complex2.divide(0.0);
      List<Complex> list0 = complex4.nthRoot(870);
      Complex complex21 = complex14.sin();
      double double3 = complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(639.648463, (-1808.607));
      Complex complex1 = Complex.valueOf(639.648463);
      Complex complex2 = complex0.I.exp();
      String string0 = complex2.I.toString();
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.valueOf(573.700283544, (-1808.607));
      Complex complex7 = complex3.ZERO.cosh();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex0.ZERO.asin();
      Complex complex10 = complex2.NaN.add(complex0);
      Complex complex11 = complex10.I.negate();
      Complex complex12 = complex11.ZERO.multiply(complex2);
      Complex complex13 = complex0.ONE.multiply(1);
      double double0 = complex0.getReal();
      Complex complex14 = complex1.multiply(complex13);
      Complex complex15 = complex14.ZERO.multiply((-340.9525765054));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex13.equals(object0);
      Complex complex16 = Complex.valueOf(4.908843759498681E-306);
      Complex complex17 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      double double1 = complex13.getImaginary();
      Complex complex18 = complex1.tan();
      Complex complex19 = complex0.sinh();
      Complex complex20 = complex0.tanh();
      Complex complex21 = complex13.pow(989.7521987);
      Complex complex22 = complex20.multiply(complex2);
      Complex complex23 = complex18.negate();
      Complex complex24 = complex17.multiply(complex15);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = null;
      Complex complex3 = complex0.ONE.log();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.INF.sin();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.ONE.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.I.tan();
      String string0 = complex0.NaN.toString();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.NaN.tanh();
      Complex complex6 = complex1.INF.sinh();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.I.log();
      Complex complex9 = Complex.valueOf((-1.0));
      Complex complex10 = complex1.subtract(complex0);
      Complex complex11 = complex3.divide(complex9);
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1.2219361033150988E-8, 1219.18489);
      Complex complex1 = complex0.add(1.2219361033150988E-8);
      Complex complex2 = Complex.valueOf(1.2219361033150988E-8);
      Complex complex3 = complex0.INF.tanh();
      Object object0 = complex1.ONE.readResolve();
      Complex complex4 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3343.5767370942));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.valueOf((-3343.5767370942), (-3343.5767370942));
      Complex complex4 = Complex.valueOf((-3343.5767370942));
      Complex complex5 = complex3.I.tan();
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex4.ZERO.negate();
      Complex complex8 = complex0.I.pow(complex4);
      Complex complex9 = complex8.INF.subtract(complex5);
      Complex complex10 = complex8.I.pow(complex3);
      Complex complex11 = complex8.ZERO.asin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex12 = complex0.INF.multiply((-1199.3932499016));
      Complex complex13 = Complex.valueOf(765.4157, 0.0);
      Complex complex14 = complex13.I.tan();
      Complex complex15 = complex0.subtract(0.0);
      Complex complex16 = complex15.log();
      Object object0 = complex16.ONE.readResolve();
      boolean boolean0 = complex16.isInfinite();
      Complex complex17 = complex4.tanh();
      Complex complex18 = complex15.multiply(complex11);
      boolean boolean1 = complex8.isNaN();
      String string0 = complex12.toString();
      Complex complex19 = complex7.createComplex(0.0, 2811.0172);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-629.2995078), 0.0);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.log();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = Complex.valueOf(1675.0);
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex5.I.divide(complex2);
      Complex complex8 = complex5.I.add(0.0);
      Object object1 = complex5.I.readResolve();
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex0.I.acos();
      Complex complex14 = complex2.multiply(0.0);
      Complex complex15 = complex1.divide(complex14);
      Complex complex16 = Complex.INF;
      Complex complex17 = complex16.ZERO.acos();
      boolean boolean0 = complex1.equals(complex16);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex18 = complex12.acos();
      Complex complex19 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2891.9741552965183));
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ONE.sqrt();
      int int0 = complex5.INF.hashCode();
      int int1 = 0;
      try { 
        complex4.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1.1992295328636466E289);
      Complex complex1 = Complex.valueOf(1.1992295328636466E289, 1.1992295328636466E289);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.NaN.multiply(complex2);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex4.ONE.tanh();
      Complex complex8 = complex2.NaN.log();
      Complex complex9 = complex8.multiply(complex4);
      Object object0 = complex1.readResolve();
      Complex complex10 = complex1.pow(20.0);
      Complex complex11 = complex10.ZERO.multiply(657);
      Complex complex12 = complex1.add(complex10);
      Complex complex13 = complex10.ZERO.atan();
      Complex complex14 = complex12.I.multiply(20.0);
      Complex complex15 = complex14.NaN.tan();
      Complex complex16 = complex15.I.asin();
      Complex complex17 = complex0.acos();
      Complex complex18 = complex1.NaN.reciprocal();
      Complex complex19 = Complex.I;
      Complex complex20 = complex3.ONE.asin();
      Complex complex21 = Complex.valueOf((double) 657);
      Complex complex22 = complex21.I.sqrt1z();
      boolean boolean0 = complex10.equals(complex19);
      Complex complex23 = complex3.tan();
      Complex complex24 = complex1.conjugate();
      double double0 = complex24.INF.getArgument();
      Complex complex25 = complex11.createComplex(1.1992295328636466E289, 1.1992295328636466E289);
      Complex complex26 = complex0.negate();
      Complex complex27 = complex26.multiply(1.1992295328636466E289);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-173.811));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.atan();
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex2.NaN.multiply((-173.811));
      Complex complex6 = complex2.exp();
      List<Complex> list0 = complex3.I.nthRoot(4969);
      Complex complex7 = complex3.createComplex((-173.811), 20.0);
      Complex complex8 = complex0.pow(complex6);
      List<Complex> list1 = complex8.I.nthRoot(37);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex5.pow(complex8);
      Complex complex11 = complex10.add(complex4);
      Complex complex12 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-743.64896968014), (-743.64896968014));
      Complex complex2 = complex0.ZERO.cos();
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.reciprocal();
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(39.0);
      String string0 = complex4.NaN.toString();
      double double0 = complex3.NaN.abs();
      double double1 = complex2.getImaginary();
      Complex complex5 = complex2.pow(complex0);
      try { 
        complex5.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex0.ONE.tan();
      Complex complex6 = complex0.ONE.divide(0.0);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.equals(complex6);
      Complex complex7 = complex6.asin();
      double double0 = complex4.getImaginary();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.divide(complex2);
      Object object0 = complex2.ZERO.readResolve();
      double double0 = complex2.ONE.getArgument();
      boolean boolean0 = complex4.equals(complexField0);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.sqrt1z();
      List<Complex> list0 = complex6.I.nthRoot(3897);
      Complex complex7 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-45.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex2.I.exp();
      double double0 = complex1.INF.abs();
      Complex complex7 = complex0.I.add(complex1);
      Complex complex8 = complex0.INF.sinh();
      Complex complex9 = complex0.negate();
      double double1 = complex9.getArgument();
      Complex complex10 = complex2.subtract(complex1);
      double double2 = complex8.abs();
      Complex complex11 = complex5.NaN.sqrt();
      Complex complex12 = complex11.INF.sin();
      Complex complex13 = complex7.add(complex5);
      Complex complex14 = complex8.ZERO.subtract(Double.POSITIVE_INFINITY);
      double double3 = complex8.abs();
      Complex complex15 = complex1.I.pow(complex5);
      Complex complex16 = complex10.asin();
      Complex complex17 = complex13.createComplex(Double.NaN, 0.0);
      double double4 = complex9.getArgument();
      double double5 = complex9.INF.getArgument();
      Complex complex18 = complex4.divide((-290.9974607874675));
      boolean boolean0 = complex4.isInfinite();
      Complex complex19 = Complex.valueOf(-0.0, Double.POSITIVE_INFINITY);
      Complex complex20 = complex13.conjugate();
      Complex complex21 = complex16.subtract(complex1);
      Complex complex22 = complex18.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1887.8));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf((-1887.8), 765.22040986425);
      int int0 = complex3.ZERO.hashCode();
      double double0 = complex0.getReal();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.I.add(0.0);
      Complex complex7 = complex5.ZERO.cos();
      Complex complex8 = complex7.INF.add(complex3);
      Complex complex9 = complex7.INF.log();
      Complex complex10 = Complex.valueOf(765.22040986425);
      boolean boolean0 = complex4.isInfinite();
      Complex complex11 = complex3.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(724.91568499, 724.91568499);
      Complex complex2 = complex0.ONE.add(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex3.sqrt1z();
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex5.I.sin();
      double double1 = complex0.abs();
      Complex complex8 = complex0.cosh();
      Complex complex9 = Complex.valueOf(0.0);
      double double2 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = new Complex(Double.NaN, (-2388.42759));
      Complex complex6 = complex0.ONE.add(complex5);
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.valueOf((-2388.42759), (-2388.42759));
      Complex complex9 = complex4.acos();
      Complex complex10 = Complex.valueOf((-2388.42759), Double.NaN);
      Complex complex11 = complex6.log();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex11.INF.createComplex(0.0, Double.NaN);
      Complex complex14 = complex10.conjugate();
      ComplexField complexField0 = complex14.ONE.getField();
      Complex complex15 = complex11.NaN.sqrt1z();
      Complex complex16 = complex11.divide(0.0);
      Complex complex17 = complex16.I.createComplex((-2388.42759), 0.0);
      Complex complex18 = complex7.sin();
      Complex complex19 = complex18.ZERO.sinh();
      double double0 = complex2.getReal();
      double double1 = complex1.getImaginary();
      Complex complex20 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.I.reciprocal();
      double double1 = complex2.INF.getArgument();
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex3.ONE.divide(0.7853981633974483);
      Complex complex5 = complex3.NaN.sinh();
      Complex complex6 = Complex.valueOf(0.7853981633974483, Double.NaN);
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = Complex.valueOf((-850.42082695541));
      Complex complex10 = complex4.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1588.0);
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.INF.acos();
      Object object0 = complex2.NaN.readResolve();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.valueOf(2.309229850769043, 0.0);
      Complex complex6 = complex3.subtract(complex5);
      Complex complex7 = complex5.add(2.309229850769043);
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = Complex.valueOf((-20.0));
      Complex complex10 = complex1.multiply(1.5707963267948966);
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex4.sin();
      Complex complex12 = complex7.I.divide((-1159.2497574315));
      Complex complex13 = Complex.INF;
      Complex complex14 = complex7.divide(complex13);
      Complex complex15 = Complex.valueOf(1588.0);
      Complex complex16 = complex11.createComplex(1.5707963267948966, 834.31);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.0640692434639215E-8));
      Complex complex1 = complex0.conjugate();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.add((-888.446354));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6714.53409795334));
      Complex complex1 = complex0.I.pow((-6714.53409795334));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.subtract(1680.0404657654854);
      Complex complex4 = complex0.subtract((-1093.2));
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf((-1694.524278168), 1924.922187191);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.pow((-1358.8881635));
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1936.3478, 2890.2);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.multiply((-994));
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex0.add(complex4);
      ComplexField complexField0 = complex3.getField();
      double double1 = complex5.abs();
      Complex complex7 = complex2.negate();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1985.60561676);
      Complex complex1 = complex0.cosh();
      int int0 = complex1.hashCode();
      double double0 = complex1.abs();
      Complex complex2 = complex1.multiply(0);
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(924.336138, 924.336138);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.pow(0.0);
      Complex complex3 = complex0.I.sqrt();
      Object object0 = complex1.INF.readResolve();
      Complex complex4 = complex1.I.atan();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex4.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.multiply(1);
      Complex complex8 = complex4.NaN.multiply(complex1);
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex0.conjugate();
      ComplexField complexField1 = complex9.NaN.getField();
      Complex complex10 = complex0.sin();
      double double0 = complex9.getArgument();
      Complex complex11 = complex9.createComplex(1456.969662137, (-0.7853981633974483));
      Complex complex12 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3.1968677404735245E92, 3.1968677404735245E92);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex3.multiply(17);
      Complex complex8 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex8.cosh();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex7.getField();
      boolean boolean0 = complex9.isNaN();
      Complex complex11 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.INF.tanh();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-2149.27598791), (-2149.27598791));
      Complex complex2 = complex1.ONE.subtract((-2149.27598791));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex1.I.multiply((-2149.27598791));
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.890268325805664);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex1.ONE.multiply(0);
      Complex complex5 = complex4.INF.subtract(complex2);
      Complex complex6 = complex0.add(complex1);
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex3.INF.subtract((-878.663615082));
      Complex complex8 = complex3.INF.sinh();
      Complex complex9 = complex6.I.add(1.890268325805664);
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex8.I.conjugate();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex12.createComplex(0, 0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex14 = complex1.multiply(0);
      double double0 = complex6.abs();
      Complex complex15 = complex3.sqrt();
      Complex complex16 = complex7.multiply(0.0);
      double double1 = complex16.getReal();
      Complex complex17 = complex11.conjugate();
      Complex complex18 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ZERO.pow(0.0);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.NaN.exp();
      Complex complex6 = complex0.subtract((-1.0));
      Complex complex7 = complex4.multiply(0.0);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex7.cos();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-763.75044458), (-5.525009099476396E155));
      Complex complex1 = new Complex((-763.75044458), 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      List<Complex> list0 = complex3.ONE.nthRoot(1671);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.divide(0.0);
      Complex complex6 = complex5.NaN.multiply(1);
      Complex complex7 = complex5.multiply(589);
      Complex complex8 = complex2.cosh();
      double double0 = complex1.getReal();
      Complex complex9 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-3516.55294));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex4.ONE.multiply(3.0357834799588566E112);
      Complex complex6 = complex0.I.subtract(complex1);
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex6.reciprocal();
      double double0 = complex0.NaN.getArgument();
      Complex complex9 = complex0.log();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex3.sinh();
      int int0 = complex7.hashCode();
      Complex complex12 = complex1.multiply(2.0310928323153876E-42);
      Complex complex13 = Complex.valueOf(2631.3764282726447, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1166.847934434476));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.add(complex0);
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex1.INF.multiply(2304);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex1.reciprocal();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex4.getReal();
      Complex complex6 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.log();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex4.INF.sqrt1z();
      Complex complex7 = complex6.ZERO.cosh();
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.asin();
      double double0 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.multiply((-848));
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex3.add(1.0);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.469119869891027E-8));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.I.multiply(0.0);
      double double0 = complex3.NaN.getArgument();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex3.ZERO.getField();
      double double1 = complex0.getReal();
      Complex complex5 = complex3.reciprocal();
      ComplexField complexField1 = complex1.getField();
      boolean boolean0 = complex1.isNaN();
      double double2 = complex3.abs();
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = Complex.valueOf(1166.8578692656);
      Complex complex9 = complex8.multiply((-3106.413));
      Complex complex10 = Complex.valueOf((-3199.702018598), 0.0);
      Complex complex11 = complex7.subtract((-2808.890708));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-466.388471752), (-466.388471752));
      Complex complex1 = complex0.subtract((-466.388471752));
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1067.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ONE.multiply(complex0);
      String string0 = complex3.I.toString();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex3.divide(complex0);
      boolean boolean1 = complex3.isNaN();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(722.8443809464426);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.NaN.add(3178.036334048724);
      Complex complex5 = complex0.I.createComplex(722.8443809464426, 722.8443809464426);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex0.ZERO.atan();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex6.ONE.tanh();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex6.getField();
      int int0 = complex9.hashCode();
      boolean boolean1 = complex6.equals(complex0);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex0.NaN.sqrt1z();
      double double0 = complex1.getImaginary();
      Complex complex12 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex4.pow(complex8);
      Complex complex10 = complex0.multiply(complex1);
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1101.35));
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex0.conjugate();
      boolean boolean0 = complex4.equals(complex0);
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.subtract((-5377.486154427626));
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex6.log();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1747.13978235798), 0.0);
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.NaN.multiply(0.0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3277.78948);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-976.04));
      Complex complex2 = complex1.ONE.createComplex(1938.205, 1938.205);
      Complex complex3 = complex0.acos();
      double double0 = complex3.getArgument();
      Complex complex4 = complex1.INF.pow(complex3);
      Complex complex5 = complex0.reciprocal();
      double double1 = complex5.abs();
      Complex complex6 = complex5.divide((-976.04));
      ComplexField complexField0 = complex3.getField();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex8.cos();
      try { 
        complex8.nthRoot((-303));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -303
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2193.729441808));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ONE.add(0.0);
      List<Complex> list0 = complex0.nthRoot(567);
      Complex complex2 = complex0.ZERO.sqrt1z();
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.sinh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1525.625719374758, 1525.625719374758);
      Complex complex1 = complex0.ZERO.exp();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.I.pow(2183.5);
      Complex complex4 = complex0.add(1162.3686029);
      double double0 = complex0.abs();
      Complex complex5 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-2227.31648358));
      Complex complex1 = complex0.pow((-2227.31648358));
      Complex complex2 = complex1.ONE.divide((-2227.31648358));
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex2.I.pow(871.011371358);
      Complex complex5 = complex1.INF.tan();
      Complex complex6 = complex0.pow((-2227.31648358));
      Complex complex7 = complex6.ONE.pow(complex0);
      Complex complex8 = complex6.ZERO.add((-2227.31648358));
      Complex complex9 = complex6.asin();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex0.createComplex((-2227.31648358), 871.011371358);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.ONE.createComplex(1742.8021311593627, 1742.8021311593627);
      double double1 = complex0.getReal();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tan();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex1.ONE.asin();
      int int0 = complex1.hashCode();
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.valueOf((-585.2933));
      Complex complex6 = complex0.divide((-585.2933));
      Complex complex7 = complex6.add(complex3);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(193.07);
      Complex complex2 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.8494343291160577E254), 194.8401975320682);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(497.1051636253625, 497.1051636253625);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.divide(497.1051636253625);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 5.059959203156465E-8);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex2.ZERO.getField();
      double double1 = complex0.INF.abs();
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.I.add(0.0);
      Complex complex6 = complex5.ZERO.multiply(complex1);
      try { 
        complex0.nthRoot((-2271));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,271
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1167.0293818401733, 1167.0293818401733);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(1167.0293818401733, 1167.0293818401733);
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex4.ONE.multiply(77);
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex2.INF.reciprocal();
      Complex complex8 = complex2.I.cosh();
      Complex complex9 = complex1.INF.reciprocal();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex8.I.divide(complex1);
      Complex complex12 = complex10.acos();
      Complex complex13 = complex8.divide(complex12);
      Complex complex14 = complex1.NaN.log();
      String string0 = complex1.ONE.toString();
      Complex complex15 = complex13.ZERO.conjugate();
      Complex complex16 = Complex.valueOf(1167.0293818401733, 1167.0293818401733);
      Complex complex17 = complex7.reciprocal();
      Complex complex18 = complex17.add(1167.0293818401733);
      Complex complex19 = complex7.add(complex17);
      int int0 = complex19.NaN.hashCode();
      Complex complex20 = complex4.subtract(complex5);
      List<Complex> list0 = complex20.ONE.nthRoot(77);
      Complex complex21 = complex19.multiply((double) 77);
      Complex complex22 = complex14.divide(complex6);
      Complex complex23 = complex6.subtract(20.0);
      Complex complex24 = complex23.INF.atan();
      double double0 = complex15.abs();
      Complex complex25 = complex14.divide(6.283185307179586);
      Complex complex26 = complex7.add(1097.9369057);
      Complex complex27 = complex24.pow(complex23);
      Complex complex28 = complex18.add(complex5);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.ONE.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.ZERO.createComplex(409.837625562406, 409.837625562406);
      double double0 = complex4.I.abs();
      Complex complex5 = complex2.INF.asin();
      List<Complex> list0 = complex1.INF.nthRoot(53);
      double double1 = complex0.ONE.getArgument();
      String string0 = complex0.toString();
      Complex complex6 = complex1.divide((-1102.8));
      Complex complex7 = complex1.multiply((-1102.8));
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex3.subtract(complex2);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex6.NaN.log();
      Complex complex11 = complex10.ONE.subtract((-1880.3146));
      int int0 = complex11.INF.hashCode();
      Complex complex12 = complex1.createComplex(53, 0.0);
      Complex complex13 = complex3.subtract(0.0);
      boolean boolean1 = complex1.isNaN();
      Complex complex14 = complex6.multiply(complex7);
      Complex complex15 = complex3.divide(complex7);
      Complex complex16 = complex7.tan();
      Complex complex17 = complex14.multiply(complex3);
      Complex complex18 = complex12.sinh();
      Object object1 = complex12.readResolve();
      Complex complex19 = complex14.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double double0 = (-2035.0219702);
      Complex complex0 = Complex.valueOf((-2035.0219702), (-2035.0219702));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = Complex.valueOf((-2035.0219702));
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex1.ZERO.acos();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.valueOf((-1973.0), 0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex1.asin();
      int int0 = 0;
      try { 
        complex5.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-1470.76));
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.ZERO.negate();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.INF.add(complex3);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.sqrt();
      double double1 = complex2.abs();
      boolean boolean0 = complex6.isNaN();
      Complex complex7 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.ONE.divide(complex0);
      Complex complex5 = complex1.NaN.subtract(0.0);
      ComplexField complexField0 = complex0.INF.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.I.sin();
      Complex complex8 = complex7.I.add(complex6);
      Complex complex9 = complex8.NaN.multiply(complex6);
      Complex complex10 = Complex.valueOf(0.0, (-1.0));
      int int0 = complex3.hashCode();
      Complex complex11 = complex1.divide(complex4);
      ComplexField complexField1 = complex11.ZERO.getField();
      Complex complex12 = complex11.divide(1739.507295273195);
      Complex complex13 = complex7.multiply(complex10);
      Complex complex14 = complex13.sin();
      Complex complex15 = complex14.INF.asin();
      ComplexField complexField2 = complex11.getField();
      Complex complex16 = complex0.asin();
      Complex complex17 = Complex.valueOf((double) 1);
      boolean boolean0 = complex16.isNaN();
      Complex complex18 = complex11.negate();
      Complex complex19 = complex7.log();
      Complex complex20 = Complex.ONE;
      Complex complex21 = complex11.multiply(complex20);
      Complex complex22 = complex19.divide(0.0);
      try { 
        complex17.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(705.8545903238025, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.log();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.ZERO.subtract(638.8599024874588);
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf(1.0407926842436056E294);
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex5.ONE.sinh();
      Complex complex9 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ONE.subtract(919.5693155684771);
      Complex complex11 = complex1.I.multiply(complex0);
      Complex complex12 = complex8.ZERO.sqrt();
      Complex complex13 = complex8.I.multiply(complex5);
      int int0 = complex8.ZERO.hashCode();
      Complex complex14 = complex5.ZERO.negate();
      Complex complex15 = complex6.reciprocal();
      Complex complex16 = Complex.valueOf(705.8545903238025);
      Complex complex17 = complex15.ZERO.multiply(complex11);
      List<Complex> list0 = complex2.nthRoot(125);
      String string0 = complex0.NaN.toString();
      Complex complex18 = complex5.divide(complex6);
      Complex complex19 = complex18.I.multiply(6.283185307179586);
      Complex complex20 = complex7.exp();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex4.equals(complex1);
      int int1 = complex14.hashCode();
      int int2 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.I.reciprocal();
      String string0 = complex3.ONE.toString();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.divide(1533.784306690309);
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex0.I.tanh();
      List<Complex> list0 = complex4.nthRoot(1457);
      boolean boolean1 = complex5.isNaN();
      ComplexField complexField1 = complex1.getField();
      Complex complex8 = complex1.multiply(complex4);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex9.INF.cos();
      Complex complex12 = complex8.tan();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex0.multiply(complex13);
      Complex complex15 = complex13.multiply((-651));
      Complex complex16 = complex6.pow(complex1);
      Complex complex17 = complex1.sqrt1z();
      Complex complex18 = complex13.createComplex(0.0, 2429.41);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-31.0644), (-414.0));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-2227.31648358));
      Complex complex1 = new Complex((-2227.31648358));
      Complex complex2 = complex1.ONE.divide((-2227.31648358));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.I.pow(871.011371358);
      Complex complex5 = complex1.INF.tan();
      Complex complex6 = complex0.pow((-2227.31648358));
      Complex complex7 = complex6.ONE.pow(complex0);
      Complex complex8 = complex6.ZERO.add((-2227.31648358));
      Complex complex9 = complex6.asin();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex0.createComplex((-2227.31648358), 871.011371358);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.079585475491198E-54), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex3.ZERO.sinh();
      Complex complex6 = complex3.NaN.atan();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex1.NaN.exp();
      Complex complex8 = complex1.I.divide((double) (-2852));
      Complex complex9 = complex7.multiply((-2852));
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.NaN.add(complex7);
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex10.ZERO.sqrt();
      Complex complex14 = complex10.log();
      Complex complex15 = complex5.NaN.sinh();
      int int0 = complex15.ONE.hashCode();
      Complex complex16 = complex14.ZERO.sinh();
      Complex complex17 = complex3.I.pow(1784.0075934567);
      Complex complex18 = complex0.sinh();
      Complex complex19 = complex10.INF.cos();
      Complex complex20 = Complex.valueOf(2.345594882965088);
      int int1 = complex5.hashCode();
      Complex complex21 = complex1.ONE.atan();
      Object object0 = complex18.readResolve();
      boolean boolean0 = complex16.isInfinite();
      Complex complex22 = complex14.add(complex9);
      Complex complex23 = complex7.acos();
  }
}
