/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:41:02 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2493910789489746, 1.2493910789489746);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.INF.pow((-1076.8106603740375));
      Complex complex6 = complex2.INF.multiply((-1076.8106603740375));
      Complex complex7 = complex4.ZERO.divide((-1076.8106603740375));
      Complex complex8 = complex7.ZERO.sinh();
      ComplexField complexField0 = complex7.getField();
      ComplexField complexField1 = complex7.getField();
      Complex complex9 = complex4.conjugate();
      Complex complex10 = complex3.ONE.cosh();
      boolean boolean0 = complex4.isInfinite();
      Complex complex11 = complex1.cos();
      int int0 = complex0.hashCode();
      Complex complex12 = complex0.multiply(2307);
      Complex complex13 = complex3.reciprocal();
      Complex complex14 = complex3.multiply(0.0);
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex15.NaN.exp();
      Complex complex17 = complex15.ONE.multiply(complex1);
      Complex complex18 = complex3.multiply(1.2493910789489746);
      Complex complex19 = complex18.I.acos();
      Object object0 = complex19.NaN.readResolve();
      int int1 = complex18.hashCode();
      Complex complex20 = complex14.cos();
      Complex complex21 = complex2.sinh();
      Complex complex22 = complex9.sqrt1z();
      Complex complex23 = Complex.ZERO;
      Complex complex24 = complex22.divide(complex23);
      int int2 = complex1.hashCode();
      Complex complex25 = complex16.cos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.multiply(complex1);
      Complex complex7 = complex6.ZERO.multiply(complex5);
      double double1 = complex0.getArgument();
      Complex complex8 = Complex.valueOf(1609.9143788677643, Double.NaN);
      Complex complex9 = complex4.sinh();
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex8.INF.multiply(complex2);
      Complex complex11 = complex0.log();
      String string0 = complex6.I.toString();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex8.subtract(Double.NaN);
      Complex complex14 = complex11.NaN.conjugate();
      Complex complex15 = complex6.NaN.atan();
      Complex complex16 = Complex.valueOf(2.2056355476379395);
      Object object0 = complex13.readResolve();
      Complex complex17 = complex11.I.tanh();
      Complex complex18 = complex1.pow(complex6);
      Complex complex19 = complex9.pow(complex11);
      double double2 = complex7.getReal();
      boolean boolean0 = complex17.isInfinite();
      Complex complex20 = complex18.multiply(0.0);
      int int0 = complex16.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(732.1819, (-1368.8054175));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.pow(732.1819);
      Complex complex3 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex0.ONE.subtract(complex2);
      Complex complex6 = complex5.I.conjugate();
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
      Complex complex7 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.ONE.add(complex1);
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.ZERO.pow(complex1);
      Complex complex12 = complex1.ONE.negate();
      ComplexField complexField0 = complex10.ONE.getField();
      Complex complex13 = complex1.NaN.conjugate();
      Complex complex14 = complex10.ONE.atan();
      Complex complex15 = complex1.asin();
      Complex complex16 = complex0.add(3.7072473866919033E-183);
      Complex complex17 = complex15.add(complex5);
      Complex complex18 = complex16.I.tanh();
      Complex complex19 = complex18.ZERO.add(complex10);
      String string0 = complex15.toString();
      Complex complex20 = complex1.acos();
      Complex complex21 = complex2.tan();
      String string1 = complex21.toString();
      Complex complex22 = complex9.conjugate();
      Complex complex23 = complex16.cosh();
      Complex complex24 = complex9.divide(Double.POSITIVE_INFINITY);
      Complex complex25 = complex20.pow(complex18);
      Complex complex26 = complex15.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(1.6284313912612293E-9, 64.045083729);
      Complex complex3 = Complex.valueOf(1.6284313912612293E-9, 1.6284313912612293E-9);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.NaN.add((-571.0757245));
      Complex complex6 = complex3.pow((double) 1989);
      Complex complex7 = complex3.multiply(1989);
      Complex complex8 = complex7.add(complex3);
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex8.INF.pow((-571.0757245));
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex7.pow(complex1);
      double double0 = complex8.getImaginary();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex12.INF.tanh();
      Complex complex14 = complex8.acos();
      Complex complex15 = Complex.valueOf(3.240578468609846E-6, (-571.0757245));
      Complex complex16 = complex9.divide(0.0);
      Complex complex17 = complex16.I.sqrt();
      Complex complex18 = complex16.ZERO.log();
      Complex complex19 = complex9.INF.multiply(70);
      boolean boolean1 = complex14.isInfinite();
      Complex complex20 = complex15.multiply(7.225974166887662E86);
      boolean boolean2 = complex9.isInfinite();
      int int0 = complex8.hashCode();
      boolean boolean3 = complex9.isNaN();
      Complex complex21 = complex14.multiply(1989);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.abs();
      Complex complex2 = complex0.INF.multiply(1);
      double double2 = 161.42793423;
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 161.42793423);
      Complex complex4 = complex3.INF.divide(161.42793423);
      try { 
        complex3.INF.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = null;
      Complex complex6 = complex0.ZERO.multiply(0.15693697333335876);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex1.ZERO.subtract(0.5080875158309937);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.NaN.pow(complex3);
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex0.conjugate();
      String string0 = complex9.INF.toString();
      Complex complex10 = complex1.multiply((-2066));
      double double0 = complex9.getReal();
      Complex complex11 = complex0.cosh();
      double double1 = complex11.getReal();
      Complex complex12 = complex1.cos();
      Complex complex13 = Complex.I;
      Complex complex14 = complex13.ZERO.divide(complex4);
      boolean boolean0 = complex4.equals(complex13);
      Complex complex15 = complex13.sqrt();
      Object object0 = complex6.readResolve();
      boolean boolean1 = complex15.equals(object0);
      Complex complex16 = complex4.add(complex0);
      double double2 = complex2.getImaginary();
      Complex complex17 = complex13.atan();
      Complex complex18 = Complex.valueOf(537.2, 2143.37968161119);
      double double3 = complex16.getArgument();
      Complex complex19 = complex1.multiply(1154);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-480.912), (-480.912));
      Complex complex1 = complex0.NaN.createComplex((-480.912), 0.0);
      Complex complex2 = complex1.NaN.multiply((-1831));
      Complex complex3 = complex1.I.tanh();
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex3.INF.pow(8.5029538631631E-93);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex0.log();
      int int0 = complex7.INF.hashCode();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.pow(complex1);
      Complex complex10 = new Complex(8.5029538631631E-93, 1.0087056692827474E-7);
      Complex complex11 = complex1.multiply(complex10);
      boolean boolean0 = complex8.isInfinite();
      Complex complex12 = complex11.cosh();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex0.cos();
      Object object0 = complex14.NaN.readResolve();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = complex10.reciprocal();
      Complex complex17 = complex16.conjugate();
      Complex complex18 = complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-3496.1429848335);
      Complex complex0 = new Complex((-3496.1429848335), (-3496.1429848335));
      int int0 = 573;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      boolean boolean0 = complex0.ONE.equals(object0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.sqrt();
      double double0 = complex1.getArgument();
      Complex complex8 = complex4.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.259099728747365E-8, 5.259099728747365E-8);
      Complex complex1 = complex0.INF.sinh();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex0.cos();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1552.648316057215);
      Complex complex1 = complex0.sqrt();
      String string0 = complex0.I.toString();
      List<Complex> list0 = complex0.nthRoot(427);
      Complex complex2 = complex0.createComplex((-133.974), 0.0);
      Complex complex3 = complex0.ZERO.add(complex2);
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = complex6.NaN.multiply(complex1);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.NaN.sqrt1z();
      String string1 = complex8.I.toString();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      Complex complex10 = complex2.subtract(0.0);
      Complex complex11 = new Complex((-133.974), 561.0);
      Complex complex12 = complex2.multiply(complex11);
      Complex complex13 = complex8.atan();
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex14.NaN.divide(complex11);
      Complex complex16 = complex1.pow(complex8);
      Complex complex17 = complex14.add(1714.8);
      Complex complex18 = complex8.divide(complex17);
      Complex complex19 = complex17.multiply(427);
      Complex complex20 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-98.7), (-98.7));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.ONE.add((-98.7));
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.ONE.cos();
      Object object0 = new Object();
      Complex complex6 = complex0.divide((-98.7));
      boolean boolean0 = complex3.NaN.equals(object0);
      String string0 = complex0.toString();
      Complex complex7 = complex3.add(1701.5063678);
      boolean boolean1 = complex0.isInfinite();
      Complex complex8 = complex3.atan();
      Complex complex9 = Complex.valueOf(Double.NaN, (-98.7));
      Complex complex10 = complex8.multiply(complex9);
      Complex complex11 = complex6.pow(complex5);
      Complex complex12 = Complex.valueOf((-98.7));
      Complex complex13 = complex1.tan();
      Complex complex14 = complex5.multiply(Double.NaN);
      Complex complex15 = complex8.sin();
      Complex complex16 = complex12.subtract(Double.NaN);
      double double0 = complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.0307641004671077E-233));
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf((-3.0307641004671077E-233));
      Complex complex6 = complex5.INF.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.subtract((-3.0307641004671077E-233));
      Complex complex8 = complex1.tan();
      Complex complex9 = complex4.NaN.sqrt();
      double double1 = complex8.ONE.abs();
      Complex complex10 = complex8.createComplex(9.221072639606492E-10, 121.282276546);
      Complex complex11 = complex4.sqrt();
      Complex complex12 = complex1.add(complex7);
      Complex complex13 = complex9.multiply(460);
      Complex complex14 = complex10.reciprocal();
      Complex complex15 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      boolean boolean0 = complex0.INF.equals((Object) null);
      Complex complex2 = complex0.multiply((-232.9740335581428));
      boolean boolean1 = complex2.isNaN();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.I.createComplex(Double.NaN, 2791.8472097162894);
      ComplexField complexField0 = complex1.ZERO.getField();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.sqrt1z();
      boolean boolean0 = complex3.ONE.equals(complex0);
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ONE.createComplex(0.0, 20.0);
      Complex complex3 = complex0.I.divide(0.0);
      Complex complex4 = complex0.acos();
      int int0 = complex4.ZERO.hashCode();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex3.abs();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.INF.atan();
      double double1 = complex5.abs();
      double double2 = complex4.getReal();
      Complex complex7 = complex4.subtract(377.51256);
      Complex complex8 = complex3.add(Double.NaN);
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex0.pow(complex1);
      boolean boolean0 = complex0.I.equals(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex4.cos();
      double double0 = complex4.getArgument();
      Complex complex8 = complex0.I.cos();
      Complex complex9 = complex1.sinh();
      Object object1 = complex0.readResolve();
      Complex complex10 = Complex.valueOf(711.848250119413, 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.subtract(Double.NaN);
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex3.conjugate();
      boolean boolean0 = complex5.isNaN();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex2.I.multiply(complex1);
      List<Complex> list0 = complex1.nthRoot(785);
      Complex complex5 = complex1.pow(complex2);
      boolean boolean1 = complex2.isNaN();
      Complex complex6 = complex1.ONE.log();
      Complex complex7 = complex1.NaN.sqrt1z();
      Complex complex8 = complex5.INF.tanh();
      Complex complex9 = complex1.divide(complex5);
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex3.add(complex1);
      Complex complex13 = complex9.pow(complex1);
      Complex complex14 = complex10.acos();
      Complex complex15 = complex13.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-5102.520551), (-1324.0));
      Complex complex1 = Complex.valueOf((-1324.0));
      Object object0 = new Object();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex1.equals(object0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex2.INF.pow(953.509);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.NaN.exp();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.ZERO.pow((-1324.0));
      Object object1 = complex3.readResolve();
      Complex complex9 = complex7.subtract(complex3);
      ComplexField complexField1 = complex1.getField();
      Complex complex10 = complex1.INF.conjugate();
      Complex complex11 = Complex.valueOf(953.509, 0.0);
      Complex complex12 = complex6.multiply(0.3381449580192566);
      Complex complex13 = new Complex((-1324.0));
      Complex complex14 = complex12.I.multiply(complex13);
      Complex complex15 = complex12.multiply(1.4672790944499144E-8);
      Complex complex16 = complex2.divide(1.4672790944499144E-8);
      Complex complex17 = complex7.divide(complex1);
      Complex complex18 = complex17.conjugate();
      Object object2 = complex15.I.readResolve();
      double double0 = complex16.abs();
      Complex complex19 = complex15.createComplex(953.509, 2.0);
      Complex complex20 = complex4.add(953.509);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9442210982008953E191);
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex(1.9442210982008953E191, (-462.218239170169));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1583.68900912854), (-3559.36041306587));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex0.ONE.tanh();
      Complex complex8 = complex6.NaN.log();
      Complex complex9 = complex8.ZERO.sqrt1z();
      Complex complex10 = complex9.NaN.sqrt();
      double double0 = complex7.INF.getArgument();
      Complex complex11 = complex2.NaN.sin();
      Complex complex12 = complex11.ZERO.exp();
      Complex complex13 = Complex.valueOf((-3559.36041306587));
      Complex complex14 = complex6.I.tanh();
      Complex complex15 = complex2.ONE.tan();
      double double1 = complex6.getArgument();
      Complex complex16 = complex2.cosh();
      Complex complex17 = complex3.sinh();
      Complex complex18 = complex17.I.log();
      Complex complex19 = complex3.sin();
      Complex complex20 = complex19.ZERO.acos();
      Complex complex21 = complex20.ZERO.multiply(2239);
      Complex complex22 = complex20.NaN.conjugate();
      Complex complex23 = complex0.conjugate();
      Complex complex24 = complex17.add(0.7853981633974483);
      int int0 = complex19.hashCode();
      Complex complex25 = complex16.sin();
      String string0 = complex25.NaN.toString();
      Complex complex26 = complex2.tanh();
      Complex complex27 = complex17.divide(0.7853981633974483);
      Complex complex28 = complex3.sinh();
      Complex complex29 = complex17.add(893.401);
      String string1 = complex15.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.I.sqrt();
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex4.NaN.divide(0.0);
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex1.NaN.pow(complex2);
      int int0 = complex8.INF.hashCode();
      Complex complex10 = Complex.valueOf(1944.07085892543);
      double double0 = complex8.getReal();
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex1.getReal();
      Complex complex11 = complex3.createComplex(1944.07085892543, 2171.44781);
      Complex complex12 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.NaN.negate();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex12.conjugate();
      Complex complex16 = complex15.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.asin();
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.divide(complex3);
      double double0 = complex4.I.abs();
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.valueOf((-8.160628910742724E110), Double.POSITIVE_INFINITY);
      boolean boolean0 = complex6.isNaN();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex7.I.reciprocal();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex7.add(complex2);
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, (-8.160628910742724E110));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      int int0 = complex0.hashCode();
      double double1 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-774.5021653807803), (-774.5021653807803));
      Complex complex1 = complex0.subtract((-774.5021653807803));
      Complex complex2 = complex0.I.subtract((-774.5021653807803));
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex0.acos();
      String string0 = complex2.I.toString();
      Complex complex5 = Complex.valueOf((-774.5021653807803));
      Complex complex6 = complex4.createComplex((-774.5021653807803), (-774.5021653807803));
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex6.exp();
      int int0 = complex6.ZERO.hashCode();
      Complex complex9 = complex3.ONE.cos();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.I.add((-774.5021653807803));
      Complex complex12 = complex11.NaN.cos();
      Complex complex13 = complex10.INF.divide(complex5);
      Complex complex14 = complex13.I.pow(complex3);
      Complex complex15 = Complex.valueOf((-774.5021653807803));
      Complex complex16 = complex15.INF.tan();
      double double0 = complex3.abs();
      Complex complex17 = complex2.conjugate();
      Complex complex18 = complex17.acos();
      Complex complex19 = complex11.ONE.pow(0.0);
      Complex complex20 = complex10.subtract((-1353.948513108059));
      Complex complex21 = complex11.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.isNaN();
      List<Complex> list0 = complex0.nthRoot(1577);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex4.I.tan();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex4.ONE.conjugate();
      boolean boolean1 = complex6.INF.equals(complex0);
      Complex complex7 = complex0.ONE.divide(complex4);
      Complex complex8 = complex7.ZERO.divide(20.0);
      Complex complex9 = Complex.valueOf(1371.395584388);
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex7.cosh();
      Complex complex12 = complex3.conjugate();
      Complex complex13 = complex1.cos();
      Complex complex14 = complex13.ONE.tan();
      double double0 = complex12.I.getArgument();
      int int0 = complex12.NaN.hashCode();
      boolean boolean2 = complex12.isNaN();
      Complex complex15 = complex12.cosh();
      Complex complex16 = complex15.add(complex0);
      Complex complex17 = complex15.atan();
      Complex complex18 = complex17.I.log();
      String string0 = complex17.toString();
      Complex complex19 = complex2.negate();
      Complex complex20 = complex19.I.divide(20.0);
      Complex complex21 = complex0.I.divide(1.5707963267948966);
      Complex complex22 = complex3.multiply(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex23 = complex14.divide(complex16);
      boolean boolean3 = complex5.isInfinite();
      ComplexField complexField1 = complex7.getField();
      Complex complex24 = Complex.valueOf(1371.395584388, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-400.92530774));
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex3.NaN.add(0.0);
      Complex complex5 = complex1.INF.asin();
      double double0 = complex0.NaN.abs();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex6 = complex3.INF.cos();
      Complex complex7 = complex0.add((-4388.745527));
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex7.divide(complex4);
      Complex complex11 = complex3.INF.atan();
      Complex complex12 = complex10.I.acos();
      Complex complex13 = complex10.I.conjugate();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex10.asin();
      Complex complex16 = complex10.INF.add(complex4);
      Complex complex17 = complex3.atan();
      boolean boolean1 = complex17.INF.equals("mutation rate ({0})");
      double double1 = complex10.abs();
      Complex complex18 = complex11.INF.subtract(complex5);
      Complex complex19 = complex1.negate();
      Complex complex20 = complex1.exp();
      String string1 = complex7.toString();
      Complex complex21 = complex11.sqrt();
      Complex complex22 = complex21.multiply(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      double double0 = complex1.ONE.getArgument();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.ZERO.equals(object0);
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.INF.pow(0.0);
      String string0 = complex0.toString();
      int int0 = complex3.hashCode();
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide((-2736.7843167229));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex1.divide((-1.0));
      Complex complex6 = complex5.createComplex(0.0, 0.0);
      Complex complex7 = complex3.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.I.multiply(1585);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.negate();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex8 = complex3.NaN.subtract(complex5);
      Complex complex9 = complex5.add(complex2);
      int int0 = complex5.I.hashCode();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex2.acos();
      Complex complex12 = complex11.I.pow((double) 1585);
      ComplexField complexField1 = complex9.getField();
      Complex complex13 = complex6.NaN.multiply((double) 1585);
      Complex complex14 = complex2.add(1916.3878498878);
      Complex complex15 = complex4.atan();
      Complex complex16 = complex6.asin();
      Complex complex17 = complex6.negate();
      Complex complex18 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex1.add(0.0);
      Complex complex6 = complex0.ZERO.add(0.0);
      String string0 = complex3.ONE.toString();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.NaN.add(0.0);
      Complex complex10 = complex9.NaN.sin();
      Complex complex11 = complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(6.283185307179586);
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = Complex.valueOf(3319.210222);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex4.ONE.pow(complex6);
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex4.multiply(2489);
      Complex complex12 = complex11.sin();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.subtract(6.283185307179586);
      Complex complex2 = complex0.reciprocal();
      double double0 = complex0.abs();
      double double1 = complex1.getArgument();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(3723.295644249);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.cos();
      double double0 = complex0.getReal();
      Complex complex5 = complex3.I.add(complex2);
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-589.7325531133016), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex1.conjugate();
      boolean boolean0 = complex2.equals("INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS");
      Complex complex8 = complex4.createComplex(0.0, (-589.7325531133016));
      Complex complex9 = complex0.subtract(complex2);
      Complex complex10 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.NaN.log();
      double double0 = complex0.INF.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex5.I.reciprocal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex2.multiply((-781));
      Complex complex9 = complex6.divide(complex1);
      Complex complex10 = complex0.multiply(0.7853981633974483);
      Complex complex11 = Complex.valueOf((double) (-781), 0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.sqrt1z();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex1.ZERO.multiply(complex0);
      Complex complex5 = Complex.valueOf((-1176.42), (-2646.073));
      Complex complex6 = complex5.I.sqrt();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex8.INF.subtract(complex1);
      Complex complex10 = complex9.multiply((-2646.073));
      double double0 = complex8.I.abs();
      double double1 = complex4.abs();
      Complex complex11 = new Complex((-1176.42), (-1939.1361688497755));
      Complex complex12 = complex4.multiply(complex11);
      Complex complex13 = complex11.sqrt();
      Complex complex14 = complex13.add((-1176.42));
      Complex complex15 = complex3.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1494.614566));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.pow((-1494.614566));
      double double0 = complex1.ZERO.abs();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2.7143806069290897E-8), (-1758.309648653));
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.add((-2.7143806069290897E-8));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.conjugate();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.createComplex((-1484.381856265417), (-1556.855825572558));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex((-2583.70525274), 6.380177790989479E207);
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-530.7589123927798));
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.subtract(2356.5696724725713);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex0.tanh();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.divide((-737.32809552));
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = Complex.valueOf((-737.32809552));
      ComplexField complexField1 = complex0.getField();
      Object object0 = complex0.readResolve();
      int int0 = complex4.hashCode();
      Complex complex6 = complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.1847060206155E21, 5.1847060206155E21);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.INF.multiply(1);
      Complex complex3 = complex0.INF.pow(complex0);
      Complex complex4 = complex0.subtract(5.1847060206155E21);
      Complex complex5 = complex4.ONE.atan();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.NaN.divide(1034.78989939);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex7 = complex5.I.conjugate();
      double double0 = complex7.abs();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.INF.add(5.1847060206155E21);
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex10.subtract(complex1);
      Complex complex14 = complex0.sinh();
      Complex complex15 = complex14.subtract(1819.63172833);
      ComplexField complexField1 = complex15.INF.getField();
      Complex complex16 = complex13.pow(2.0);
      double double1 = complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-894.73));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.cos();
      double double0 = complex0.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex2.INF.subtract((-2042.0));
      Complex complex4 = Complex.valueOf((-1.5707963267948966));
      Complex complex5 = complex0.subtract((-7.81295459930537E-72));
      List<Complex> list0 = complex0.nthRoot(1437);
      Complex complex6 = complex0.I.exp();
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex3.I.cosh();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex9.subtract(complex3);
      double double2 = complex9.getReal();
      Complex complex12 = complex9.tanh();
      Complex complex13 = complex12.cos();
      Complex complex14 = complex6.sin();
      boolean boolean0 = complex14.equals("l_E-y-\"y%:f=3cwx]");
      Complex complex15 = complex9.log();
      Complex complex16 = complex12.pow((-7.81295459930537E-72));
      double double3 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-3843.4));
      Complex complex1 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(2.192160831263035E-8);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex3.cos();
      double double0 = complex5.getImaginary();
      Complex complex7 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex0.divide((-1.0));
      double double0 = complex0.abs();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex4.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1996.9420303337);
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.I.multiply(complex0);
      double double0 = complex2.I.getArgument();
      Complex complex4 = complex1.ONE.pow(0.0);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex6 = complex5.ZERO.add(0.0);
      Complex complex7 = complex6.I.multiply(complex0);
      Complex complex8 = complex6.NaN.add(complex4);
      Complex complex9 = complex0.log();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex5.ONE.atan();
      int int0 = 0;
      Complex complex12 = complex1.I.createComplex(0.0, 6.283185307179586);
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(2658.995173626706);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3105.36897868));
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex5.INF.sinh();
      boolean boolean0 = complex1.I.equals(complex5);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex7.multiply(2008.31148345251);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.pow(2624.5557381752);
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.multiply(3454);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex4.multiply((-1939.4020197));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex0.multiply(322);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.exp();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex3.multiply((-24));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.tan();
      List<Complex> list0 = complex2.nthRoot(1712);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2220.0, (-78.06491501224252));
      Complex complex1 = complex0.INF.multiply((-168));
      Complex complex2 = complex1.INF.divide(2220.0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex0.tan();
      Object object0 = complex5.readResolve();
      boolean boolean0 = complex5.equals(object0);
      Complex complex6 = complex5.I.createComplex((-168), 0.0);
      Complex complex7 = complex5.multiply(complex1);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex3.subtract(complex2);
      Complex complex11 = complex8.atan();
      Complex complex12 = Complex.NaN;
      boolean boolean1 = complex11.ONE.equals(complex12);
      Complex complex13 = complex8.log();
      ComplexField complexField0 = complex0.getField();
      boolean boolean2 = complex7.equals("_{J3");
      Complex complex14 = complex4.add(complex6);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1175.2), (-1175.2));
      Complex complex1 = complex0.NaN.tanh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.atan();
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.cos();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.INF.sinh();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.pow((-20.0));
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex2.ONE.sqrt();
      Complex complex6 = complex2.NaN.reciprocal();
      Complex complex7 = complex6.sinh();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex8 = complex4.NaN.atan();
      Complex complex9 = complex2.ONE.pow((-3375.0));
      Complex complex10 = complex4.pow(766.108987697);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex3.tan();
      Object object0 = new Object();
      double double0 = complex2.INF.abs();
      boolean boolean0 = complex7.equals(object0);
      Complex complex8 = complex0.INF.atan();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = Complex.valueOf(249.7757805, 0.0);
      double double1 = complex9.NaN.getArgument();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex6.multiply(complex2);
      Complex complex12 = complex2.add(Double.POSITIVE_INFINITY);
      try { 
        complex11.NaN.nthRoot((-4715));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,715
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3055.85979944);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.ONE.sqrt1z();
      String string0 = complex1.ONE.toString();
      Complex complex4 = Complex.valueOf(2502.46505, 3055.85979944);
      Complex complex5 = complex3.NaN.reciprocal();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex1.I.tan();
      Complex complex8 = Complex.valueOf((-3330.2257279977716));
      boolean boolean0 = complex8.ZERO.equals("");
      Complex complex9 = complex6.createComplex(3055.85979944, (-105.5934));
      Complex complex10 = complex5.ONE.sin();
      ComplexField complexField0 = complex9.INF.getField();
      Complex complex11 = complex5.ONE.subtract(complex9);
      Complex complex12 = complex1.reciprocal();
      ComplexField complexField1 = complex1.INF.getField();
      Complex complex13 = complex1.subtract(complex12);
      Complex complex14 = complex13.ONE.sqrt();
      Complex complex15 = complex1.log();
      Complex complex16 = complex5.multiply(complex1);
      Complex complex17 = complex15.sinh();
      Complex complex18 = complex12.sqrt1z();
      Complex complex19 = complex5.pow(8.849812639395597E201);
      Complex complex20 = complex15.asin();
      Complex complex21 = Complex.valueOf(3055.85979944);
      Complex complex22 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(2494.0);
      Complex complex1 = complex0.INF.acos();
      Object object0 = complex1.ZERO.readResolve();
      Object object1 = new Object();
      boolean boolean0 = complex0.I.equals(object1);
      List<Complex> list0 = complex0.nthRoot(1);
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.NaN.atan();
      int int1 = complex0.hashCode();
      Complex complex3 = complex1.subtract(1431.423349986);
      Complex complex4 = Complex.valueOf((double) 1);
      boolean boolean1 = complex1.equals(complex4);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex6.I.sqrt1z();
      int int2 = complex6.INF.hashCode();
      boolean boolean2 = complex5.NaN.equals(complex3);
      Complex complex8 = complex5.tan();
      double double0 = complex8.INF.getArgument();
      Complex complex9 = complex0.divide(0.0);
      Complex complex10 = complex0.sqrt1z();
      int int3 = complex9.hashCode();
      Complex complex11 = complex4.divide(2399.766607055);
      Complex complex12 = complex11.ZERO.createComplex((-1246.498410958), (-3884.0));
      Complex complex13 = complex0.asin();
      boolean boolean3 = complex13.equals(complex11);
      Complex complex14 = complex3.divide(1.2827720642089844);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex7 = Complex.valueOf((-1.246635423141374E-7), (-1.246635423141374E-7));
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.pow(0.0);
      Complex complex10 = complex7.I.createComplex(6.283185307179586, 993.57216413135);
      Complex complex11 = complex9.cos();
      List<Complex> list0 = complex7.nthRoot(1079);
      Complex complex12 = complex7.reciprocal();
      List<Complex> list1 = complex11.INF.nthRoot(17);
      Complex complex13 = complex9.pow(0.0);
      Complex complex14 = complex11.sin();
      Complex complex15 = complex8.I.divide(complex7);
      Complex complex16 = complex5.subtract(993.57216413135);
      Complex complex17 = complex11.pow(6.283185307179586);
      Complex complex18 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-3934.1));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.multiply(1);
      Complex complex6 = complex3.createComplex((-3934.1), 0.0);
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = complex0.divide(7.952287052787358E165);
      double double0 = complex5.INF.abs();
      boolean boolean0 = complex5.equals(complex0);
      Complex complex6 = complex3.createComplex(1.734665280502264E-8, 1828.33);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.divide(0.0);
      double double0 = complex0.ONE.getArgument();
      Complex complex4 = complex2.multiply((-1516));
      boolean boolean0 = complex1.NaN.equals(complex0);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex5 = complex4.subtract(complex2);
      ComplexField complexField1 = complex1.getField();
      Complex complex6 = complex2.reciprocal();
      int int0 = complex4.ZERO.hashCode();
      Complex complex7 = complex5.ZERO.multiply(0.0);
      double double1 = complex7.ONE.abs();
      int int1 = complex4.hashCode();
      double double2 = complex5.ONE.abs();
      int int2 = complex5.hashCode();
      Complex complex8 = complex6.ONE.log();
      Complex complex9 = complex0.add(0.0);
      double double3 = complex6.getReal();
      Complex complex10 = complex0.multiply(complex2);
      Complex complex11 = complex1.acos();
      Object object0 = complex11.ONE.readResolve();
      Complex complex12 = complex11.INF.sqrt();
      double double4 = complex2.NaN.getArgument();
      int int3 = complex4.hashCode();
      Complex complex13 = complex10.negate();
      Complex complex14 = complex6.multiply((-1516));
      Object object1 = complex14.INF.readResolve();
      Complex complex15 = complex14.INF.tan();
      double double5 = complex0.getArgument();
      Complex complex16 = complex13.multiply(complex7);
      List<Complex> list0 = complex0.nthRoot(921);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sqrt();
      double double1 = complex1.getArgument();
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex0.isNaN();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.multiply((-2300.982732));
      boolean boolean2 = complex1.isInfinite();
      double double2 = complex3.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = Complex.valueOf(0.0, 1.5707963267948966);
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex1.acos();
  }
}
