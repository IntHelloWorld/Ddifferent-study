/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:44:40 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(98.472118);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.NaN.divide((-2590.319274531));
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.tan();
      List<Complex> list0 = complex6.I.nthRoot(920);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex0.pow((-20.2582916697));
      double double0 = 3989.97864136;
      Complex complex9 = complex8.ZERO.add(3989.97864136);
      Complex complex10 = complex3.INF.add(complex1);
      Complex complex11 = complex2.NaN.exp();
      Complex complex12 = complex1.multiply(0.0);
      double double1 = complex12.ONE.abs();
      Complex complex13 = complex2.cos();
      Object object0 = complex1.readResolve();
      // Undeclared exception!
      complex3.nthRoot(4886);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(945);
      Complex complex2 = complex1.I.cosh();
      boolean boolean0 = complex2.NaN.equals(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex3.I.multiply((-826.613531111));
      List<Complex> list0 = complex4.ZERO.nthRoot(367);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.multiply(945);
      Complex complex8 = complex6.ZERO.conjugate();
      Complex complex9 = complex8.pow(complex0);
      Object object0 = complex7.ONE.readResolve();
      Complex complex10 = complex4.multiply(945);
      Complex complex11 = complex10.I.sinh();
      List<Complex> list1 = complex10.I.nthRoot(945);
      double double0 = complex1.getImaginary();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex5.NaN.sqrt1z();
      int int0 = complex6.hashCode();
      Complex complex15 = complex1.pow(complex5);
      Complex complex16 = complex15.sinh();
      ComplexField complexField0 = complex16.ONE.getField();
      int int1 = complex16.ZERO.hashCode();
      Complex complex17 = complex16.add(Double.POSITIVE_INFINITY);
      boolean boolean1 = complex15.isNaN();
      Complex complex18 = complex4.INF.sqrt1z();
      double double1 = complex15.abs();
      Complex complex19 = complex11.sqrt1z();
      Complex complex20 = complex0.sinh();
      Complex complex21 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1124.6, 3989.97864136);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex3.ZERO.createComplex((-4708869.834000785), 0.0010901978184553272);
      Complex complex5 = complex0.ONE.exp();
      double double0 = complex4.abs();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.NaN.multiply(0);
      Complex complex8 = complex3.NaN.acos();
      Complex complex9 = complex3.sin();
      Complex complex10 = complex0.sinh();
      String string0 = complex6.toString();
      Complex complex11 = Complex.valueOf(3989.97864136);
      Complex complex12 = complex7.multiply(complex10);
      Complex complex13 = complex12.I.subtract(complex4);
      Complex complex14 = complex7.subtract(complex4);
      Complex complex15 = complex9.pow((double) 0);
      double double1 = complex4.abs();
      Complex complex16 = complex0.exp();
      Complex complex17 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract((-859.4023798));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = Complex.valueOf((-4382.532254), (-2807.807));
      boolean boolean0 = complex5.ONE.equals(complex3);
      Complex complex6 = Complex.valueOf(2669.13696921, 2669.13696921);
      Complex complex7 = complex5.I.pow(complex6);
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.I.add(0.0);
      Complex complex5 = complex4.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.add((-1237.91941));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2391.8), (-2391.8));
      Complex complex1 = complex0.subtract((-2391.8));
      Complex complex2 = complex0.multiply((-2391.8));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.NaN.sinh();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex1.ZERO.cosh();
      Complex complex6 = complex4.ONE.subtract(complex3);
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex7 = complex1.NaN.tan();
      boolean boolean0 = complex6.NaN.equals(object0);
      Complex complex8 = complex3.I.multiply(0.0);
      Complex complex9 = complex0.ZERO.asin();
      Complex complex10 = complex8.cosh();
      String string1 = complex2.toString();
      Complex complex11 = complex3.ONE.asin();
      Complex complex12 = complex0.cosh();
      Object object1 = complex12.readResolve();
      Object object2 = complex0.readResolve();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex2.I.cosh();
      Complex complex15 = complex12.ONE.divide(0.0);
      Complex complex16 = complex12.subtract(complex2);
      Complex complex17 = complex16.tan();
      Complex complex18 = complex17.cosh();
      double double0 = complex10.getArgument();
      Complex complex19 = complex18.exp();
      Complex complex20 = complex19.INF.conjugate();
      Complex complex21 = complex10.acos();
      Complex complex22 = complex21.ZERO.multiply(complex12);
      double double1 = complex21.ONE.getArgument();
      ComplexField complexField1 = complex1.getField();
      Complex complex23 = complex13.exp();
      double double2 = complex0.getArgument();
      boolean boolean1 = complex1.equals(complex8);
      double double3 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex3 = complex1.NaN.cos();
      double double0 = complex1.NaN.abs();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex4.ZERO.divide(Double.NaN);
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      double double1 = complex0.getReal();
      double double2 = complex4.getReal();
      Complex complex7 = complex3.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.divide(complex1);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.ONE.log();
      Complex complex12 = complex1.sqrt1z();
      ComplexField complexField1 = complex9.getField();
      Complex complex13 = complex7.multiply((-896.82299189));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex0.ZERO.add(complex1);
      double double0 = complex0.getReal();
      Complex complex7 = complex6.INF.createComplex(Double.NaN, 2822.630222625637);
      Complex complex8 = complex3.I.cosh();
      int int0 = complex6.hashCode();
      Complex complex9 = complex0.pow(complex3);
      Complex complex10 = complex9.add(complex1);
      Complex complex11 = complex3.pow(complex0);
      Complex complex12 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.atan();
      double double0 = 0.0;
      Complex complex4 = complex2.INF.subtract(0.0);
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex0.ONE.divide(0.0);
      Complex complex7 = complex2.I.tan();
      Complex complex8 = complex2.I.tanh();
      Complex complex9 = complex0.tanh();
      try { 
        complex5.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3415.138941));
      Complex complex1 = new Complex((-3415.138941), Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex1.ONE.add((-3415.138941));
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = complex4.ONE.atan();
      String string0 = complex5.toString();
      Complex complex6 = complex2.ONE.multiply(176);
      Complex complex7 = complex1.ONE.pow(0.0);
      Complex complex8 = complex4.ONE.add(2745.0689403);
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex9.I.sinh();
      Complex complex11 = complex0.multiply(1.1168024085164686E112);
      Complex complex12 = complex3.subtract(0.0);
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex3.pow(complex0);
      Complex complex15 = complex14.I.sinh();
      Object object0 = complex2.readResolve();
      Complex complex16 = complex14.multiply((-1));
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex1.divide(complex17);
      Complex complex19 = complex0.add(0.0);
      double double0 = complex12.getImaginary();
      Complex complex20 = complex13.atan();
      Complex complex21 = complex5.subtract(Double.POSITIVE_INFINITY);
      String string1 = complex21.toString();
      Complex complex22 = complex9.subtract((double) 176);
      try { 
        complex22.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tanh();
      int int0 = complex0.ZERO.hashCode();
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.INF.createComplex(2142.11053882, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.NaN.subtract(2142.11053882);
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex3.ZERO.reciprocal();
      double double1 = complex7.INF.getArgument();
      Complex complex8 = complex7.log();
      Complex complex9 = Complex.valueOf(2.3396028616528764E-239, (double) 1);
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex0.pow(2142.11053882);
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex11.ONE.sqrt1z();
      Complex complex13 = complex10.ZERO.pow(3513.22975742);
      Complex complex14 = complex10.acos();
      Complex complex15 = complex3.tan();
      Complex complex16 = complex15.pow(Double.POSITIVE_INFINITY);
      int int1 = complex1.hashCode();
      Complex complex17 = complex9.divide(complex2);
      Complex complex18 = Complex.valueOf(1.3106298446655273);
      Complex complex19 = Complex.valueOf(2.626941680908203);
      double double2 = complex0.getImaginary();
      double double3 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex8.INF.log();
      Complex complex10 = complex4.log();
      boolean boolean1 = complex0.NaN.equals(complex1);
      Complex complex11 = Complex.valueOf(0.0, 1846.599093);
      int int0 = complex11.INF.hashCode();
      double double0 = complex0.getImaginary();
      Object object0 = complex2.readResolve();
      Complex complex12 = complex2.I.pow(complex8);
      Complex complex13 = complex12.INF.divide(0.0);
      Complex complex14 = complex5.cos();
      Complex complex15 = complex2.divide(complex9);
      Complex complex16 = complex6.sqrt1z();
      Complex complex17 = complex16.INF.divide(complex4);
      Complex complex18 = complex16.ONE.subtract(complex5);
      boolean boolean2 = complex8.equals(complex6);
      double double1 = complex17.getArgument();
      Complex complex19 = complex8.atan();
      Complex complex20 = complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.ONE.pow(1.6042497158050537);
      Complex complex5 = complex4.ONE.add(1.1128638067747114E36);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex3.pow(complex1);
      Complex complex8 = Complex.valueOf(1.6042497158050537);
      Complex complex9 = complex6.ONE.pow(complex1);
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex10.I.sinh();
      int int0 = complex10.ONE.hashCode();
      Complex complex12 = complex6.cosh();
      Complex complex13 = Complex.valueOf(1.6042497158050537, 0.0);
      boolean boolean0 = complex2.isNaN();
      Complex complex14 = complex13.pow((-4311.784022085264));
      Complex complex15 = complex5.add(complex3);
      Complex complex16 = complex2.add(complex12);
      Complex complex17 = complex3.divide(1.1128638067747114E36);
      Complex complex18 = complex15.INF.negate();
      Object object0 = complex16.readResolve();
      boolean boolean1 = complex16.I.equals(object0);
      Complex complex19 = complex14.I.subtract(complex5);
      Complex complex20 = complex14.NaN.createComplex(2169.340022795775, 1.1128638067747114E36);
      int int1 = complex15.hashCode();
      String string0 = complex14.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3178.16655147823), (-3598.33037323794));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex1.createComplex((-3598.33037323794), (-3178.16655147823));
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex5.ZERO.tan();
      ComplexField complexField1 = complex5.ONE.getField();
      Complex complex7 = Complex.valueOf((-3178.16655147823), 940.3);
      Complex complex8 = complex7.conjugate();
      double double0 = complex7.ONE.abs();
      double double1 = complex7.ONE.getArgument();
      int int0 = complex1.ZERO.hashCode();
      Complex complex9 = complex7.ZERO.multiply(complex4);
      Complex complex10 = complex5.divide(505.4971);
      double double2 = complex10.getImaginary();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex8.reciprocal();
      try { 
        complex8.nthRoot((-383));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -383
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      Complex complex1 = complex0.I.add((-2703.6053315));
      Complex complex2 = Complex.valueOf((-2703.6053315), (-2703.6053315));
      boolean boolean0 = complex0.INF.equals(object0);
      Complex complex3 = complex0.INF.subtract(2228.075456037347);
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.INF.acos();
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex5.ZERO.atan();
      Complex complex8 = complex4.INF.add(complex5);
      double double0 = complex8.NaN.getArgument();
      double double1 = complex2.abs();
      double double2 = complex0.getArgument();
      Complex complex9 = complex4.ONE.pow(complex0);
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex7.pow(complex4);
      Complex complex12 = complex3.exp();
      Complex complex13 = complex12.I.reciprocal();
      double double3 = complex8.abs();
      Complex complex14 = complex2.multiply(2228.075456037347);
      Complex complex15 = complex10.negate();
      boolean boolean1 = complex15.isInfinite();
      Complex complex16 = complex3.createComplex((-3131.4745121656115), (-3131.4745121656115));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2239.0);
      Complex complex2 = complex1.I.pow((-20.0));
      Complex complex3 = complex1.INF.cosh();
      double double0 = complex1.getReal();
      Complex complex4 = complex1.multiply(0);
      Complex complex5 = complex1.sinh();
      double double1 = complex1.ONE.getArgument();
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = complex1.I.add(complex3);
      int int0 = complex0.hashCode();
      String string0 = complex6.toString();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex4.add(2239.0);
      String string1 = complex5.toString();
      double double2 = complex1.getImaginary();
      Complex complex11 = complex1.tan();
      int int1 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex3.subtract((-3322.160239370593));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.asin();
      int int0 = complex5.INF.hashCode();
      Complex complex7 = complex5.ONE.divide((double) 1);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.add(complex4);
      Complex complex11 = complex9.NaN.createComplex(0.0, (-3322.160239370593));
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex9.ONE.equals(object0);
      int int1 = complex3.hashCode();
      Complex complex12 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-315.80717123288), (-315.80717123288));
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex2.NaN.abs();
      Complex complex3 = Complex.valueOf(0.0);
      double double1 = complex0.NaN.getArgument();
      Complex complex4 = complex0.sin();
      double double2 = complex0.getImaginary();
      String string0 = complex3.toString();
      Complex complex5 = complex3.I.sqrt();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex5.createComplex(0.0, Double.NaN);
      Complex complex9 = complex1.multiply(200);
      Complex complex10 = complex6.I.asin();
      Complex complex11 = complex7.divide(complex6);
      Complex complex12 = complex11.I.add(complex8);
      Complex complex13 = complex6.exp();
      Complex complex14 = Complex.valueOf(0.0, (-1060.0841275173375));
      Complex complex15 = complex9.asin();
      Complex complex16 = complex14.add((double) 200);
      Complex complex17 = complex8.atan();
      Complex complex18 = complex4.sinh();
      boolean boolean1 = complex3.isNaN();
      Complex complex19 = complex9.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.INF.log();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.createComplex((-2667.30029655444), (-2667.30029655444));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.166799420361101E-7), (-1924.22));
      Complex complex1 = new Complex((-1.166799420361101E-7));
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex0.sqrt1z();
      double double0 = complex4.getArgument();
      Complex complex5 = complex2.subtract(complex0);
      Object object0 = complex4.readResolve();
      Complex complex6 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2590.7377566));
      List<Complex> list0 = complex0.I.nthRoot(15);
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-308.4715874690465), (-20.0));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.divide((-1677.17));
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex0.multiply(1.0);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex5.ZERO.pow(complex2);
      Complex complex7 = complex4.sqrt1z();
      double double1 = complex3.abs();
      Complex complex8 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(2192.712383718, 2192.712383718);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.ONE.cos();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex6.NaN.cosh();
      Object object0 = new Object();
      boolean boolean0 = complex7.NaN.equals(object0);
      Complex complex8 = complex3.add(complex4);
      Complex complex9 = complex3.subtract(215.4114232861257);
      Complex complex10 = complex7.atan();
      Complex complex11 = complex6.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.I.subtract(945.07612829387);
      Complex complex4 = Complex.valueOf(945.07612829387, 945.07612829387);
      Complex complex5 = Complex.valueOf(8.18942426109357E231);
      Complex complex6 = complex2.createComplex(8.18942426109357E231, 8.18942426109357E231);
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex2.ZERO.negate();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex7.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex12 = complex6.ONE.cos();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex11.acos();
      ComplexField complexField1 = complex7.INF.getField();
      Complex complex14 = complex13.pow((-7.177274244758699E-91));
      int int0 = complex9.hashCode();
      Complex complex15 = Complex.valueOf(8.18942426109357E231, 8.18942426109357E231);
      double double0 = complex6.getArgument();
      String string0 = complex10.toString();
      Complex complex16 = complex5.asin();
      Complex complex17 = complex9.sqrt();
      Complex complex18 = complex17.NaN.divide((-2308.5745));
      Complex complex19 = complex6.sqrt1z();
      Complex complex20 = Complex.valueOf((-7.177274244758699E-91), 0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(2.0);
      int int0 = complex1.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.NaN.equals(object0);
      Complex complex4 = complex1.I.multiply(2.0);
      Complex complex5 = complex1.sinh();
      String string0 = complex3.toString();
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(2196.69870966739);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex3.conjugate();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex1.createComplex(1.0, 1727.6);
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.ZERO.createComplex(20.0, 1727.6);
      Complex complex9 = complex4.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-2435.315141));
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.NaN.multiply(821);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.divide(6.283185307179586);
      double double0 = complex3.abs();
      Complex complex4 = complex3.NaN.multiply(821);
      double double1 = complex0.getReal();
      Complex complex5 = Complex.valueOf(0.0, (-2435.315141));
      Complex complex6 = complex3.pow(387.5925733824937);
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.260420322418213, (-3950.6551));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.valueOf((-3950.6551));
      Complex complex4 = Complex.valueOf(1.260420322418213, 1.260420322418213);
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex4.ZERO.sin();
      boolean boolean0 = complex0.equals(complex4);
      boolean boolean1 = complex4.isNaN();
      Complex complex7 = complex4.multiply(1.260420322418213);
      Complex complex8 = complex5.INF.add((-3950.6551));
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex7.INF.divide(1.260420322418213);
      ComplexField complexField0 = complex5.getField();
      Complex complex11 = complex7.pow((-3950.6551));
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex4.ZERO.atan();
      Complex complex14 = complex11.NaN.multiply((-2563.5875671));
      String string0 = complex7.toString();
      double double0 = complex9.abs();
      Complex complex15 = complex3.divide(complex11);
      Complex complex16 = complex3.multiply(complex7);
      Complex complex17 = Complex.valueOf((-2563.5875671));
      Complex complex18 = complex12.add(4340.557309123074);
      String string1 = complex12.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-899.6849302926), 0.0);
      Complex complex1 = complex0.ZERO.multiply((-20.0));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex1.I.add(2.1186736024949195E-289);
      Complex complex4 = complex1.I.exp();
      double double0 = complex3.INF.abs();
      Complex complex5 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-2004.405834237777));
      Complex complex2 = complex0.ONE.add(1106.602991);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = complex4.INF.subtract((-2004.405834237777));
      Complex complex6 = complex2.exp();
      Complex complex7 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1294.5);
      Complex complex1 = new Complex(1294.5, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.add(complex0);
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex2.multiply(complex3);
      double double0 = complex4.getArgument();
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex2.log();
      Complex complex10 = complex2.add(0.0);
      Complex complex11 = complex6.tan();
      Complex complex12 = complex2.INF.atan();
      Complex complex13 = complex9.pow(0.0);
      Complex complex14 = complex10.negate();
      Complex complex15 = complex14.createComplex(985.8545712522017, 0.0);
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex11.log();
      Complex complex18 = complex17.ONE.add((-1.0));
      Complex complex19 = complex17.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-2196.69870966739));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.multiply((-2196.69870966739));
      Complex complex3 = complex0.multiply(complex1);
      double double0 = complex3.abs();
      Complex complex4 = complex0.NaN.multiply(749);
      Complex complex5 = complex3.INF.multiply(749);
      Complex complex6 = complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.subtract(4.0281104210095145E-223);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.multiply(complex0);
      double double0 = complex0.getArgument();
      Complex complex4 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(347.0);
      Complex complex1 = new Complex((-1922.0559232));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.add(347.0);
      double double0 = complex1.getReal();
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.valueOf((-1922.0559232));
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex3.pow(0.0);
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex1.ZERO.sqrt1z();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.multiply(complex1);
      Complex complex10 = complex8.cosh();
      double double0 = complex10.INF.getArgument();
      Complex complex11 = complex10.NaN.atan();
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex8.subtract(complex4);
      Complex complex14 = complex13.negate();
      Complex complex15 = complex2.tanh();
      boolean boolean0 = complex6.equals(complex9);
      double double1 = complex5.getImaginary();
      Complex complex16 = Complex.I;
      Complex complex17 = complex1.INF.divide(0.7853981633974483);
      Complex complex18 = complex16.ZERO.acos();
      Complex complex19 = complex13.add(complex16);
      Complex complex20 = complex19.ZERO.divide(complex7);
      Complex complex21 = complex19.add(0.0);
      Complex complex22 = complex15.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.INF.createComplex(215.8958615464437, 215.8958615464437);
      Complex complex5 = complex1.ZERO.cos();
      Complex complex6 = complex1.INF.negate();
      double double0 = complex1.I.getArgument();
      boolean boolean1 = complex4.ONE.equals(complex1);
      double double1 = complex0.getReal();
      Complex complex7 = complex3.sinh();
      Complex complex8 = Complex.valueOf(0.0);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4205.681));
      Complex complex1 = Complex.valueOf(5.168837625865596, 5.168837625865596);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.pow(2.0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.exp();
      double double0 = complex3.abs();
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex2.ZERO.cosh();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf((-1892.257));
      Complex complex8 = complex2.I.add((-1892.257));
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.ZERO.pow(complex4);
      Complex complex11 = complex0.ONE.createComplex(0.0, 1327.04);
      double double0 = complex10.abs();
      Complex complex12 = complex7.sin();
      Complex complex13 = complex9.cos();
      Complex complex14 = complex13.tanh();
      Object object0 = complex4.readResolve();
      Complex complex15 = complex1.tan();
      Complex complex16 = complex13.ONE.pow(0.0);
      Complex complex17 = complex7.conjugate();
      Complex complex18 = complex1.asin();
      boolean boolean0 = complex12.isInfinite();
      Complex complex19 = complex0.multiply(complex14);
      Complex complex20 = complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2042.81480063846), (-1832.05039));
      Complex complex1 = complex0.ZERO.add((-630.3165969039));
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.NaN.add((-1157.4658));
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex0.INF.asin();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex2.log();
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = complex4.acos();
      Object object1 = complex6.readResolve();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.NaN.pow(complex5);
      Complex complex9 = complex7.pow(complex0);
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex8.atan();
      double double2 = complex2.abs();
      Complex complex12 = complex6.multiply((-1832.05039));
      Complex complex13 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.add((-2923.694986));
      Complex complex4 = complex1.acos();
      boolean boolean0 = complex4.equals(complex3);
      int int1 = complex1.ZERO.hashCode();
      Complex complex5 = complex3.NaN.tan();
      boolean boolean1 = complex3.isNaN();
      Complex complex6 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add(3159.45372681692);
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(728.93);
      Complex complex1 = Complex.valueOf(728.93);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.subtract((-569.67657));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.3027053475379944);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.ONE.atan();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 120.98596);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.pow(1.2579610347747803);
      double double0 = complex0.NaN.abs();
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex4.multiply((-2956));
      Complex complex9 = complex5.ZERO.sqrt1z();
      Complex complex10 = complex8.I.acos();
      Complex complex11 = complex8.ONE.tanh();
      Complex complex12 = complex11.INF.atan();
      Complex complex13 = complex4.divide(complex5);
      Complex complex14 = complex13.ZERO.subtract(complex0);
      Complex complex15 = complex14.ONE.pow((double) (-2956));
      Complex complex16 = complex13.ONE.multiply(753.2840646208);
      Complex complex17 = complex0.multiply(Double.NaN);
      double double1 = complex5.abs();
      double double2 = complex1.getArgument();
      double double3 = complex16.abs();
      boolean boolean0 = complex2.equals(complex17);
      Complex complex18 = complex13.tan();
      Complex complex19 = complex18.pow(complex3);
      Complex complex20 = complex16.acos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.valueOf(0.0, 3193.53629);
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex3.multiply(338);
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex5.I.acos();
      Complex complex8 = complex5.ONE.atan();
      List<Complex> list0 = complex2.nthRoot(338);
      Complex complex9 = complex2.atan();
      boolean boolean0 = complex9.INF.equals(complex5);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex8.subtract(complex10);
      Complex complex13 = complex2.atan();
      Complex complex14 = complex9.negate();
      Complex complex15 = complex8.add(complex5);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(2176.1905907904, 2176.1905907904);
      Complex complex1 = complex0.INF.log();
      List<Complex> list0 = complex0.nthRoot(3103);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.valueOf((-4861.505719802));
      Complex complex7 = complex5.INF.log();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex4.tanh();
      Complex complex10 = Complex.valueOf(2176.1905907904);
      Complex complex11 = complex0.multiply(complex4);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex7.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex3.INF.createComplex(2.0299429893493652, 0.0);
      Complex complex5 = Complex.valueOf((-1486.17), (-1486.17));
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex1.multiply((-1486.17));
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex8.ZERO.multiply(complex1);
      double double0 = complex7.getImaginary();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2061.433, 2061.433);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex1.NaN.add(168.2559);
      Complex complex6 = Complex.valueOf(2061.433, 3.5829049382293792E280);
      Complex complex7 = complex0.divide(complex6);
      boolean boolean0 = complex7.isNaN();
      String string0 = complex2.toString();
      Complex complex8 = complex6.atan();
      double double0 = complex0.getImaginary();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.createComplex(781.982114783084, 3598.906472671631);
      Complex complex2 = complex0.multiply(1629);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2928330898284912, (-4895.338759097));
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = new Complex(2.5066452026367188);
      Complex complex2 = complex0.subtract(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.ONE.cosh();
      double double0 = complex2.NaN.getArgument();
      boolean boolean1 = complex0.equals(complex1);
      double double1 = complex2.getArgument();
      Complex complex4 = complex2.negate();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(5173.02330641205, 5173.02330641205);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.INF.subtract(complex2);
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double double0 = 817.9931;
      Complex complex0 = Complex.valueOf(817.9931);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.conjugate();
      try { 
        complex2.I.nthRoot((-685));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -685
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.negate();
      boolean boolean0 = complex2.I.equals(complex1);
      Complex complex3 = complex2.subtract(1450.55891147);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-927.1233232564567), 4.0962906236847E-236);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.acos();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf((-20.0));
      try { 
        complex5.I.nthRoot((-1606));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,606
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.divide(0.0);
      String string0 = complex1.I.toString();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.tanh();
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = complex6.tanh();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.6496705953229645E-9, 6.6496705953229645E-9);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1382.81568, 1382.81568);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.pow(0.0);
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.sin();
      Object object0 = complex3.readResolve();
      Object object1 = complex1.readResolve();
      Complex complex4 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-59.98279180607395), 0.0);
      Complex complex1 = complex0.multiply(888);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-99.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.INF.sqrt();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex1.divide((-99.0));
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex2.INF.sinh();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1108.9213), (-1108.9213));
      double double0 = complex0.ZERO.getArgument();
      List<Complex> list0 = complex0.I.nthRoot(1);
      double double1 = complex0.getReal();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.INF.cosh();
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex8.createComplex((-3163.765398425), (-1108.9213));
      Complex complex10 = complex3.ONE.subtract(complex0);
      Complex complex11 = complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.sin();
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.sqrt();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.INF.multiply((-1607.765586049815));
      Complex complex6 = complex1.tanh();
      double double0 = complex1.getImaginary();
      Complex complex7 = complex0.tan();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex1.asin();
      double double1 = complex3.getReal();
      String string0 = complex2.toString();
      Complex complex9 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.ZERO.divide((-1969.954298949));
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.pow((-3750.2414341785));
      Complex complex6 = complex5.INF.log();
      boolean boolean0 = complex0.equals(complex5);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = Complex.valueOf((-634.05716873));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(927);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.createComplex(0.0, (-862.2506577644016));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.valueOf(0.686779260635376, Double.NaN);
      Complex complex3 = complex0.ONE.reciprocal();
      Object object0 = complex0.INF.readResolve();
      String string0 = complex3.INF.toString();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(837.519298951);
      Complex complex1 = complex0.NaN.tan();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = Complex.valueOf(1693.0638391166312, 1693.0638391166312);
      double double0 = complex2.abs();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex5.ONE.multiply(complex4);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex6.INF.atan();
      Complex complex10 = complex9.INF.sinh();
      Complex complex11 = complex6.multiply(939.748148);
      int int0 = complex4.hashCode();
      Complex complex12 = complex10.cosh();
      String string0 = complex5.toString();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex5.pow(complex13);
      Complex complex15 = Complex.valueOf(837.519298951, 1156.43);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1121.8483, 1121.8483);
      Complex complex1 = complex0.multiply((-4697));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf(1121.8483, 1121.8483);
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex4.ZERO.cosh();
      Complex complex7 = complex6.sqrt();
      int int0 = complex3.hashCode();
      Complex complex8 = complex0.multiply(complex4);
      Complex complex9 = complex8.INF.multiply(complex6);
      Complex complex10 = complex3.multiply(0);
      String string0 = complex4.toString();
      boolean boolean0 = complex10.isNaN();
      String string1 = complex3.toString();
      boolean boolean1 = complex10.isNaN();
      boolean boolean2 = complex3.isInfinite();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(2.6015626820520968E-9, 2.6015626820520968E-9);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.I.conjugate();
      double double0 = complex3.ZERO.getArgument();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.add(2.6015626820520968E-9);
      Complex complex11 = complex3.sinh();
      Complex complex12 = Complex.I;
      double double1 = complex7.NaN.getArgument();
      Complex complex13 = complex8.pow(complex12);
      Complex complex14 = complex8.tanh();
      Complex complex15 = complex14.NaN.log();
      boolean boolean0 = complex2.isNaN();
      Complex complex16 = complex3.subtract(2.6015626820520968E-9);
      List<Complex> list0 = complex1.nthRoot(404);
      Complex complex17 = complex10.subtract(complex15);
      Complex complex18 = complex17.ZERO.subtract(Double.NaN);
      Complex complex19 = complex18.subtract(complex14);
      double double2 = complex14.getImaginary();
      Complex complex20 = complex16.cos();
      Complex complex21 = complex16.tan();
      Complex complex22 = complex12.acos();
      Complex complex23 = complex2.add(complex7);
      Complex complex24 = complex7.divide((-146.537));
      Complex complex25 = complex7.sinh();
      Complex complex26 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.negate();
      String string0 = complex3.ONE.toString();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.I.add(0.0);
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex5.I.reciprocal();
      Complex complex9 = complex5.add(complex2);
      Complex complex10 = complex9.INF.asin();
      Complex complex11 = complex9.divide(complex0);
      Complex complex12 = complex0.NaN.sqrt();
      Complex complex13 = complex5.negate();
      Complex complex14 = complex2.add(2.0);
      Complex complex15 = complex14.asin();
      Complex complex16 = Complex.valueOf(0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-4161.025706), (-4161.025706));
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.INF.divide(0.0);
      try { 
        complex1.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(98.472118);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.INF.createComplex((-4077.0), (-3451.5298298));
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex1.NaN.divide((-2590.319274531));
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex0.pow((-20.2582916697));
      Complex complex10 = complex9.ZERO.add(3989.97864136);
      Complex complex11 = complex4.INF.add(complex1);
      Complex complex12 = complex2.NaN.exp();
      Complex complex13 = complex1.multiply(0.0);
      Complex complex14 = complex13.cosh();
      double double0 = complex13.ONE.abs();
      Complex complex15 = complex2.cos();
      Object object0 = complex1.readResolve();
      List<Complex> list0 = complex4.nthRoot(4886);
      Complex complex16 = complex4.log();
      Complex complex17 = complex3.asin();
      double double1 = complex0.getImaginary();
      Complex complex18 = complex10.asin();
      List<Complex> list1 = complex4.nthRoot(1);
      Complex complex19 = complex4.divide(3989.97864136);
      Complex complex20 = complex17.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-3521.0760558425));
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex1.ZERO.divide(complex0);
      boolean boolean0 = complex1.ZERO.equals(complex0);
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex0.sinh();
      Complex complex6 = new Complex((-3521.0760558425));
      Complex complex7 = complex6.INF.sqrt1z();
      boolean boolean1 = complex5.NaN.equals(complex6);
      String string0 = complex5.INF.toString();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex3.I.log();
      boolean boolean2 = complex2.isInfinite();
      Complex complex10 = complex0.cosh();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex11 = complex6.I.log();
      String string1 = complex2.toString();
      Complex complex12 = complex4.conjugate();
      Complex complex13 = complex3.sqrt();
      ComplexField complexField1 = complex5.getField();
      Complex complex14 = complex5.createComplex(2.0, 0.0);
      double double0 = complex5.getImaginary();
      Complex complex15 = complex12.exp();
      boolean boolean3 = complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(2669.13696921);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.negate();
      double double0 = complex0.abs();
      Complex complex3 = complex0.subtract(2669.13696921);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.multiply(2669.13696921);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.INF.sqrt();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex3.pow(0.0);
      Complex complex11 = complex10.I.multiply(0.0);
      Complex complex12 = complex4.subtract(complex1);
      Complex complex13 = complex2.reciprocal();
      Complex complex14 = complex4.tanh();
      Complex complex15 = complex1.divide(complex13);
      Object object0 = new Object();
      boolean boolean1 = complex1.equals(object0);
      Complex complex16 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(945);
      Complex complex2 = complex1.I.cosh();
      boolean boolean0 = complex2.NaN.equals(complex1);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex3.I.multiply((-826.613531111));
      List<Complex> list0 = complex4.ZERO.nthRoot(367);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.multiply(945);
      Complex complex8 = complex6.ZERO.conjugate();
      Complex complex9 = complex8.pow(complex0);
      Object object0 = complex7.ONE.readResolve();
      Complex complex10 = complex4.multiply(945);
      Complex complex11 = complex10.I.sinh();
      List<Complex> list1 = complex10.I.nthRoot(945);
      double double0 = complex1.getImaginary();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex5.NaN.sqrt1z();
      int int0 = complex6.hashCode();
      Complex complex15 = complex1.pow(complex5);
      Complex complex16 = complex6.sinh();
      ComplexField complexField0 = complex16.ONE.getField();
      int int1 = complex16.ZERO.hashCode();
      Complex complex17 = complex16.add(Double.POSITIVE_INFINITY);
      boolean boolean1 = complex15.isNaN();
      double double1 = complex15.abs();
      Complex complex18 = complex11.sqrt1z();
      Complex complex19 = complex0.sinh();
  }
}
