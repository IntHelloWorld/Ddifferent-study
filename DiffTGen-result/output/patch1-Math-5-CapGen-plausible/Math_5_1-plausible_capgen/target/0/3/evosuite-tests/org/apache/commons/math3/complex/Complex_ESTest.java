/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:34:19 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.77);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.divide(256.77);
      Complex complex4 = complex3.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.NaN.divide(complex1);
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 256.77);
      Complex complex8 = complex6.ZERO.pow(complex7);
      double double0 = complex2.INF.abs();
      Complex complex9 = complex0.ONE.sin();
      Complex complex10 = complex2.NaN.cosh();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex11.subtract(complex0);
      String string0 = complex12.NaN.toString();
      Complex complex13 = complex9.multiply((-2647.9231685230584));
      Object object0 = complex13.I.readResolve();
      Complex complex14 = complex1.reciprocal();
      Complex complex15 = complex9.asin();
      Complex complex16 = complex2.acos();
      Complex complex17 = complex1.tanh();
      Complex complex18 = complex13.cos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-255.77), (-255.77));
      Complex complex1 = complex0.subtract(20.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = complex3.INF.divide(2161.0);
      Complex complex5 = Complex.valueOf((-255.77), 1615.644917275099);
      int int0 = complex3.hashCode();
      Complex complex6 = complex0.ZERO.log();
      Complex complex7 = complex0.ONE.createComplex(20.0, 2.0);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex7.I.pow(complex8);
      Complex complex10 = complex8.ONE.exp();
      Complex complex11 = complex8.add(2.0);
      Complex complex12 = complex7.createComplex(2.0, 1.5167767828844167E187);
      Complex complex13 = Complex.valueOf(1910.58);
      double double0 = complex8.ZERO.getArgument();
      Complex complex14 = complex12.ZERO.asin();
      Complex complex15 = complex12.multiply(1.5167767828844167E187);
      Complex complex16 = complex15.subtract(20.0);
      int int1 = complex16.ZERO.hashCode();
      String string0 = complex12.I.toString();
      int int2 = complex0.hashCode();
      double double1 = complex7.getImaginary();
      Complex complex17 = complex7.ZERO.log();
      Complex complex18 = complex17.ONE.cosh();
      Complex complex19 = complex11.pow(complex8);
      Complex complex20 = complex10.add(complex12);
      double double2 = complex6.getReal();
      Complex complex21 = complex20.subtract(0.0);
      Complex complex22 = complex15.multiply(complex20);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-2191.099312087967), (-2191.099312087967));
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = Complex.valueOf((-1524.2084514341));
      Complex complex5 = complex4.ONE.createComplex((-2191.099312087967), (-1524.2084514341));
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex8.I.subtract(complex7);
      boolean boolean0 = complex5.ZERO.equals(complex8);
      ComplexField complexField0 = complex5.getField();
      Complex complex10 = complex0.pow(complex4);
      Complex complex11 = complex10.ONE.tan();
      Complex complex12 = complex10.INF.atan();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex13.NaN.sin();
      Complex complex15 = complex14.I.sinh();
      Complex complex16 = complex4.ONE.tan();
      Complex complex17 = complex15.asin();
      Object object0 = complex11.readResolve();
      boolean boolean1 = complex17.I.equals(object0);
      Object object1 = complex1.readResolve();
      Complex complex18 = complex12.tanh();
      Complex complex19 = complex14.cosh();
      Complex complex20 = complex18.tan();
      Complex complex21 = complex20.I.multiply((-122.302057472724));
      double double0 = complex18.abs();
      Complex complex22 = complex12.multiply(complex0);
      int int0 = complex10.hashCode();
      Complex complex23 = complex15.tan();
      ComplexField complexField1 = complex1.getField();
      Complex complex24 = complex8.log();
      Complex complex25 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 7.196457718729758E281;
      Complex complex0 = new Complex(7.196457718729758E281, 7.196457718729758E281);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex1.I.cos();
      double double1 = complex1.ONE.getArgument();
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex0.INF.pow(complex1);
      Complex complex7 = complex6.ZERO.sqrt();
      String string0 = complex6.ZERO.toString();
      Complex complex8 = complex5.I.conjugate();
      Complex complex9 = complex1.ONE.divide(complex0);
      int int0 = complex8.INF.hashCode();
      try { 
        complex9.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-734.4739785112862));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex4.ONE.atan();
      double double0 = complex6.abs();
      Complex complex7 = complex6.ZERO.divide(0.0);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex8.NaN.add(1.0);
      Complex complex11 = complex8.ZERO.subtract(complex5);
      Complex complex12 = complex1.sin();
      boolean boolean0 = complex8.isNaN();
      Complex complex13 = complex3.multiply(complex0);
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex12.multiply(0);
      ComplexField complexField0 = complex13.I.getField();
      Complex complex16 = complex5.sqrt1z();
      Complex complex17 = complex13.add(complex12);
      Complex complex18 = complex9.log();
      Complex complex19 = complex3.divide((double) 0);
      try { 
        complex12.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.ZERO.divide(Double.NaN);
      Complex complex5 = Complex.ONE;
      boolean boolean0 = complex2.I.equals(complex5);
      Complex complex6 = complex0.ZERO.sqrt1z();
      Object object0 = new Object();
      boolean boolean1 = complex6.ONE.equals(object0);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex6.pow(Double.NaN);
      int int0 = complex1.ONE.hashCode();
      Complex complex10 = complex7.I.cosh();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex5.INF.cosh();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex13 = complex5.add(complex11);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex14 = complex1.divide(0.0);
      Complex complex15 = complex1.multiply(1);
      Complex complex16 = complex1.tanh();
      Complex complex17 = Complex.valueOf(772.81);
      double double0 = complex6.abs();
      Complex complex18 = complex11.multiply(complex5);
      Complex complex19 = complex15.sinh();
      Complex complex20 = complex9.divide(complex16);
      Complex complex21 = complex10.cosh();
      List<Complex> list1 = complex21.ONE.nthRoot(1);
      Complex complex22 = complex21.sqrt();
      Complex complex23 = complex15.multiply(1.0);
      Complex complex24 = complex11.cosh();
      double double1 = complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(373.07412069, 373.07412069);
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.INF.divide(complex4);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex3.cos();
      boolean boolean0 = complex0.equals(complex1);
      double double1 = complex2.getReal();
      boolean boolean1 = complex3.isInfinite();
      double double2 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, (-1320.81168894));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.2983669638633728);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      int int0 = complex1.ZERO.hashCode();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.add(complex0);
      List<Complex> list0 = complex1.nthRoot(1);
      List<Complex> list1 = complex4.nthRoot(1);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.ONE.tan();
      Complex complex7 = complex0.multiply(Double.NaN);
      Complex complex8 = complex5.I.tan();
      double double0 = complex5.NaN.getArgument();
      Complex complex9 = complex5.INF.subtract(Double.NaN);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex5.INF.pow((double) 1);
      Complex complex12 = complex5.add(complex0);
      Complex complex13 = complex3.tan();
      Complex complex14 = complex5.divide(20.0);
      Complex complex15 = complex13.sin();
      Complex complex16 = complex13.atan();
      Object object0 = complex16.ZERO.readResolve();
      Complex complex17 = complex2.createComplex(0.0, 0.2983669638633728);
      Complex complex18 = complex8.sin();
      Complex complex19 = complex4.sqrt1z();
      Complex complex20 = complex5.pow(Double.NaN);
      double double1 = complex20.ONE.getArgument();
      Complex complex21 = complex11.conjugate();
      Complex complex22 = complex18.divide(0.2983669638633728);
      Complex complex23 = complex5.add(0.2983669638633728);
      Complex complex24 = complex23.INF.sin();
      Complex complex25 = complex11.subtract(0.2983669638633728);
      boolean boolean0 = complex12.equals(complex18);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.15442964434623718;
      Complex complex0 = Complex.valueOf(0.15442964434623718);
      Complex complex1 = null;
      double double1 = complex0.I.getArgument();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(602.781079354526);
      Complex complex1 = complex0.add(602.781079354526);
      Complex complex2 = Complex.valueOf(602.781079354526, 602.781079354526);
      Complex complex3 = complex2.NaN.subtract(602.781079354526);
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.valueOf(602.781079354526);
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex3.ONE.sqrt1z();
      Complex complex7 = complex1.multiply(602.781079354526);
      Complex complex8 = complex1.ONE.asin();
      Complex complex9 = complex7.subtract(complex2);
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.6280876398086548, (-1.0));
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.multiply((-1084));
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.createComplex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex4.add(81.0);
      Complex complex7 = complex1.multiply((-209));
      String string0 = complex7.ONE.toString();
      Complex complex8 = complex3.createComplex(Double.NaN, 0.0);
      List<Complex> list0 = complex0.nthRoot(1176);
      Complex complex9 = complex1.NaN.multiply((-209));
      Complex complex10 = complex1.ZERO.tan();
      Complex complex11 = complex0.add(complex4);
      Complex complex12 = complex4.INF.atan();
      boolean boolean0 = complex5.isInfinite();
      Complex complex13 = complex4.negate();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex10.subtract(complex4);
      Complex complex16 = complex15.NaN.sinh();
      Complex complex17 = complex8.multiply((-209));
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1818.5384), (-1818.5384));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.multiply(complex0);
      String string0 = complex3.toString();
      double double0 = complex2.getImaginary();
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ZERO.divide(0.0);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex5.sqrt();
      double double0 = complex0.I.getArgument();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.log();
      double double1 = complex0.getArgument();
      double double2 = complex8.getReal();
      Complex complex9 = complex3.NaN.divide(1.5707963267948966);
      Complex complex10 = complex7.I.add(Double.NaN);
      ComplexField complexField0 = complex10.I.getField();
      double double3 = complex7.getReal();
      double double4 = complex7.getReal();
      boolean boolean0 = complex3.equals(complex4);
      boolean boolean1 = complex7.isNaN();
      Complex complex11 = complex7.add(complex4);
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = Complex.valueOf(0.24740394949913025);
      Complex complex14 = complex11.I.add(0.24740394949913025);
      Complex complex15 = complex7.negate();
      boolean boolean2 = complex12.isNaN();
      Complex complex16 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-5.5957016861703E-8));
      Complex complex1 = complex0.ONE.subtract(2.0);
      Complex complex2 = complex0.INF.multiply((-5.5957016861703E-8));
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex2.I.conjugate();
      Object object0 = complex2.I.readResolve();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.ZERO.divide(complex2);
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.NaN.sqrt1z();
      Object object1 = new Object();
      boolean boolean0 = complex8.equals(object1);
      Complex complex10 = complex1.multiply((-5.5957016861703E-8));
      Complex complex11 = complex10.multiply(25);
      Complex complex12 = complex11.INF.subtract((double) 25);
      Complex complex13 = complex2.add((-1.0));
      Complex complex14 = complex13.pow(complex2);
      double double0 = complex2.abs();
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex16 = complex2.cosh();
      Complex complex17 = complex13.add(complex16);
      double double1 = complex15.getArgument();
      Complex complex18 = complex11.add(2132.435393145217);
      int int0 = complex14.hashCode();
      Complex complex19 = complex18.divide(412.82753455);
      Complex complex20 = complex3.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2826.4544), (-2826.4544));
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.asin();
      double double0 = complex0.getReal();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.conjugate();
      List<Complex> list0 = complex0.nthRoot(1331);
      List<Complex> list1 = complex3.nthRoot(1331);
      String string0 = complex5.toString();
      Complex complex9 = complex5.conjugate();
      ComplexField complexField0 = complex3.getField();
      String string1 = complex2.toString();
      Complex complex10 = complex0.createComplex(1331, 2506.0741042);
      Complex complex11 = Complex.valueOf((-2.7501042008405925E-8));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex3.add(complex5);
      Complex complex9 = complex1.ZERO.createComplex(6.283185307179586, 6.283185307179586);
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex4.multiply(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex9.sqrt1z();
      Complex complex13 = complex12.multiply(0.0);
      double double0 = complex12.getArgument();
      int int0 = complex12.I.hashCode();
      Complex complex14 = complex3.multiply(1319);
      Complex complex15 = complex14.multiply(complex11);
      Complex complex16 = complex2.pow((double) 1319);
      Complex complex17 = complex5.tanh();
      Complex complex18 = complex16.pow(0.0);
      Complex complex19 = complex14.multiply(complex2);
      Complex complex20 = complex10.divide((double) 1319);
      Complex complex21 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.log();
      String string0 = complex3.INF.toString();
      Complex complex4 = complex3.multiply(39);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3.557678449715009E128);
      Complex complex1 = complex0.I.multiply((-1161.27));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.createComplex(714.5, 714.5);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.divide(1146.969);
      Complex complex5 = complex1.add((-3627.4786730707));
      Complex complex6 = complex1.ONE.log();
      Complex complex7 = Complex.ZERO;
      boolean boolean1 = complex6.ZERO.equals(complex7);
      Complex complex8 = complex6.INF.tan();
      Complex complex9 = complex5.INF.reciprocal();
      Complex complex10 = complex5.tan();
      Complex complex11 = Complex.valueOf(3.557678449715009E128, 0.0);
      Complex complex12 = complex5.divide(complex1);
      ComplexField complexField0 = complex5.getField();
      Object object0 = complex0.readResolve();
      Complex complex13 = complex5.exp();
      Complex complex14 = complex5.log();
      double double0 = complex14.ONE.abs();
      Complex complex15 = complex9.createComplex(3.557678449715009E128, 676.332);
      Object object1 = complex4.readResolve();
      Complex complex16 = complex1.reciprocal();
      Complex complex17 = Complex.valueOf(714.5, (-887.12937799));
      Complex complex18 = complex8.exp();
      Complex complex19 = complex1.asin();
      Complex complex20 = complex4.cos();
      double double1 = complex6.abs();
      double double2 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.valueOf((-1188.5725), 0.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ZERO.multiply((-1188.5725));
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex6.NaN.multiply(1);
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex7.ZERO.reciprocal();
      Complex complex10 = complex6.I.sqrt1z();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex11.NaN.acos();
      Complex complex13 = complex6.pow((-1188.5725));
      Complex complex14 = complex10.I.asin();
      Complex complex15 = complex10.I.reciprocal();
      Complex complex16 = Complex.valueOf(Double.NaN, (-2244.7258));
      Complex complex17 = complex10.sin();
      Complex complex18 = complex8.cos();
      Complex complex19 = complex7.negate();
      double double1 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1.6105287075042725);
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex0.multiply(1);
      Complex complex7 = complex6.ONE.multiply(complex1);
      Complex complex8 = complex2.subtract((double) 1);
      Complex complex9 = Complex.valueOf((double) 1);
      Complex complex10 = complex8.multiply(complex9);
      Complex complex11 = complex8.createComplex(1, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.NaN.pow(0.0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex2.add(complex4);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex2.pow(complex8);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex4.add(complex0);
      List<Complex> list0 = complex11.ZERO.nthRoot(2900);
      Complex complex12 = complex11.NaN.acos();
      Complex complex13 = complex0.multiply(489);
      double double1 = complex7.getImaginary();
      Complex complex14 = complex8.log();
      Complex complex15 = complex5.cos();
      Complex complex16 = complex15.INF.log();
      Complex complex17 = complex7.asin();
      Complex complex18 = complex17.acos();
      Complex complex19 = complex15.ONE.cos();
      Complex complex20 = complex17.sin();
      double double2 = complex6.getArgument();
      Complex complex21 = complex15.sinh();
      Complex complex22 = complex17.divide(complex14);
      Complex complex23 = complex7.log();
      Object object0 = complex15.readResolve();
      boolean boolean0 = complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-724.79746513177), (-724.79746513177));
      Complex complex1 = complex0.sqrt();
      Object object0 = new Object();
      List<Complex> list0 = complex0.I.nthRoot(958);
      Complex complex2 = Complex.valueOf(9.835827818608177E-9, (-724.79746513177));
      boolean boolean0 = complex0.equals(object0);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2255.615734, 2255.615734);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.INF.reciprocal();
      double double1 = complex0.getImaginary();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.cosh();
      boolean boolean1 = complex0.isInfinite();
      Complex complex7 = complex0.NaN.reciprocal();
      Complex complex8 = complex6.add(0.0);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.ONE.sqrt1z();
      boolean boolean2 = complex8.equals(complex9);
      Complex complex11 = complex2.INF.multiply(0);
      Complex complex12 = complex1.ZERO.add(complex0);
      Complex complex13 = complex12.I.multiply(0);
      Complex complex14 = complex5.log();
      Complex complex15 = complex1.I.conjugate();
      Complex complex16 = complex8.subtract(complex2);
      ComplexField complexField0 = complex14.getField();
      Complex complex17 = complex16.conjugate();
      Object object0 = complex5.readResolve();
      boolean boolean3 = complex14.equals(complex8);
      Object object1 = complex3.readResolve();
      Complex complex18 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(2.0, 2.0);
      Complex complex2 = complex0.subtract(0.0);
      double double0 = complex2.abs();
      Complex complex3 = complex1.subtract(0.0);
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = complex3.ZERO.sinh();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.INF.multiply((-473));
      Complex complex8 = Complex.valueOf(6.283185307179586);
      Complex complex9 = complex3.ONE.reciprocal();
      double double1 = complex3.abs();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex3.multiply(2.8284271247461903);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1.6747356805175311E193, 1.6747356805175311E193);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(9.45732984079136E214, 9.45732984079136E214);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.pow(9.45732984079136E214);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex4.ONE.createComplex((-2439.19851), 9.45732984079136E214);
      int int0 = complex4.hashCode();
      Complex complex8 = complex4.subtract(9.45732984079136E214);
      Complex complex9 = complex4.cos();
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex1.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.ZERO.equals((Object) null);
      Complex complex2 = Complex.valueOf(0.601686954498291, 0.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ZERO.add(0.0);
      Complex complex5 = complex2.ONE.pow(1010.154022);
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex2.I.add(complex1);
      Complex complex8 = complex2.NaN.add(complex1);
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex1.NaN.atan();
      Complex complex10 = complex0.divide(complex1);
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex1.NaN.sqrt();
      boolean boolean1 = complex10.isNaN();
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = complex7.pow(complex9);
      Complex complex15 = complex14.INF.atan();
      Complex complex16 = complex2.negate();
      Complex complex17 = complex13.multiply(0.601686954498291);
      Object object1 = complex2.readResolve();
      boolean boolean2 = complex7.equals(object1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      boolean boolean0 = complex1.ZERO.equals((Object) null);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.sqrt();
      ComplexField complexField1 = complex2.getField();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.ZERO.divide(0.0);
      Complex complex5 = complex1.ZERO.createComplex(0.0, 417.642342);
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.ONE.conjugate();
      String string0 = complex6.INF.toString();
      Complex complex8 = complex6.createComplex(0.0, 417.642342);
      Complex complex9 = complex2.createComplex((-5.86517231340979E-71), 1434.56459);
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex3.ONE.exp();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex13.I.acos();
      Complex complex15 = complex13.exp();
      Complex complex16 = complex2.exp();
      String string1 = complex3.toString();
      boolean boolean1 = complex12.isNaN();
      Complex complex17 = complex2.tan();
      String string2 = complex0.toString();
      Complex complex18 = complex17.acos();
      double double0 = complex1.getImaginary();
      Complex complex19 = complex3.sinh();
      Complex complex20 = complex19.add(complex0);
      Complex complex21 = complex1.pow(0.0);
      Complex complex22 = complex4.cosh();
      Complex complex23 = complex20.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex5.ONE.cos();
      Complex complex11 = complex9.I.multiply(0.0);
      Complex complex12 = complex11.INF.multiply(1);
      Complex complex13 = complex10.sqrt();
      String string0 = complex5.toString();
      Complex complex14 = complex6.sin();
      Complex complex15 = complex5.divide(complex1);
      Complex complex16 = complex6.acos();
      String string1 = complex9.toString();
      ComplexField complexField0 = complex10.ZERO.getField();
      Complex complex17 = complex14.multiply(1);
      Complex complex18 = complex16.divide(complex6);
      Complex complex19 = complex18.NaN.add((double) 1);
      Complex complex20 = complex13.sinh();
      Complex complex21 = complex5.acos();
      Complex complex22 = complex16.conjugate();
      Complex complex23 = Complex.valueOf((double) 1);
      Complex complex24 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1926.000057746), 948.192313128);
      Complex complex1 = complex0.ZERO.add((-1926.000057746));
      Complex complex2 = complex1.divide(6.283185307179586);
      Complex complex3 = complex0.multiply(2.0);
      double double0 = complex3.I.getArgument();
      double double1 = complex3.getReal();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.I.multiply((-125));
      Complex complex6 = complex4.divide(0.0);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex6.ONE.add(3314.62192120325);
      Complex complex9 = complex5.I.divide(complex8);
      double double2 = complex3.abs();
      int int0 = complex5.hashCode();
      Complex complex10 = Complex.valueOf((-1926.000057746));
      Complex complex11 = complex8.add(complex4);
      Complex complex12 = complex11.multiply(complex7);
      Complex complex13 = complex2.divide((-235.5307263821398));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-31.7914));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex1.INF.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.sin();
      boolean boolean1 = complex2.ZERO.equals(complex4);
      Complex complex6 = complex5.I.add(complex0);
      double double1 = complex0.getImaginary();
      double double2 = (-1.132504393233074E-7);
      Complex complex7 = complex0.ZERO.pow((-1.132504393233074E-7));
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.INF.readResolve();
      String string0 = complex0.NaN.toString();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.atan();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.subtract(Double.NaN);
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex1.INF.conjugate();
      List<Complex> list0 = complex4.ONE.nthRoot(588);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.INF.divide(complex3);
      double double0 = complex7.getReal();
      Complex complex9 = complex4.negate();
      boolean boolean0 = complex9.equals(complex3);
      List<Complex> list1 = complex7.nthRoot(1);
      Complex complex10 = Complex.valueOf(0.46608972549438477);
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex10.divide(0.46608972549438477);
      Complex complex14 = complex7.subtract(3127.1328037);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(880.1879358);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ONE.acos();
      try { 
        complex0.NaN.nthRoot((-2186));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,186
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.multiply(1);
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex2.I.multiply((-1029.92674));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex0.divide((-1029.92674));
      Complex complex10 = complex9.multiply((-5198));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sin();
      String string0 = complex0.toString();
      List<Complex> list0 = complex0.nthRoot(580);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1326.645, 1326.645);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.ONE.add(1326.645);
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex0.ZERO.sin();
      Complex complex8 = complex0.NaN.reciprocal();
      Complex complex9 = complex8.I.multiply(complex1);
      double double0 = complex5.I.getArgument();
      Complex complex10 = complex7.atan();
      Complex complex11 = complex10.NaN.add(1326.645);
      int int0 = complex11.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex12 = complex0.multiply(0.0);
      Complex complex13 = complex5.pow(complex7);
      ComplexField complexField0 = complex5.getField();
      Complex complex14 = complex9.tanh();
      double double1 = complex1.getArgument();
      Complex complex15 = complex6.sinh();
      Complex complex16 = complex14.cosh();
      Complex complex17 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.INF.subtract(complex3);
      List<Complex> list0 = complex4.nthRoot(1135);
      Complex complex5 = complex4.INF.add(complex0);
      Complex complex6 = complex5.divide((double) 1135);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.ZERO.add(20.0);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1267.52420861176, (-3346.934169161));
      Object object0 = new Object();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex1 = complex0.cos();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.sinh();
      double double0 = complex2.abs();
      String string0 = complex0.toString();
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(5.399227989109673E44);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.acos();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.ZERO.add(complex3);
      Complex complex6 = complex1.log();
      Complex complex7 = complex4.ONE.atan();
      Complex complex8 = complex1.sinh();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex2.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex5.cos();
      Complex complex12 = complex8.createComplex(5.399227989109673E44, 1215.194353);
      String string1 = complex9.toString();
      Complex complex13 = complex0.multiply(5.399227989109673E44);
      String string2 = complex5.toString();
      Complex complex14 = complex10.createComplex(1215.194353, (-802.47823));
      double double0 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex2.INF.multiply((-128.8878945));
      Complex complex5 = complex4.ZERO.pow(complex1);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex6 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(5418.24981741233, 3094.6103881693975);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ZERO.add(3094.6103881693975);
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex2.NaN.multiply(complex4);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.ZERO.reciprocal();
      List<Complex> list0 = complex1.nthRoot(255);
      Complex complex9 = complex0.sqrt1z();
      String string0 = complex0.toString();
      Complex complex10 = complex2.ZERO.sqrt();
      List<Complex> list1 = complex10.ZERO.nthRoot(255);
      double double0 = complex3.abs();
      Complex complex11 = complex2.add(1.0);
      String string1 = complex11.INF.toString();
      Complex complex12 = complex9.reciprocal();
      Complex complex13 = complex5.reciprocal();
      Complex complex14 = complex13.ZERO.add(complex0);
      double double1 = complex9.getReal();
      Complex complex15 = complex13.conjugate();
      List<Complex> list2 = complex13.nthRoot(255);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-3642.0178));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.sinh();
      double double0 = complex2.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = Complex.valueOf((-3642.0178));
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = Complex.valueOf((-3642.0178));
      Complex complex9 = complex4.sqrt1z();
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1729.84151751), (-1729.84151751));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract((-1729.84151751));
      Complex complex3 = complex2.INF.sqrt1z();
      int int0 = complex2.hashCode();
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = complex2.INF.add((-1729.84151751));
      Complex complex6 = Complex.valueOf(607.4143040770806);
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = complex4.ONE.multiply(2304);
      Complex complex9 = complex1.NaN.tan();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex11.I.reciprocal();
      Complex complex13 = complex0.atan();
      Complex complex14 = complex3.add(complex10);
      Complex complex15 = complex1.tan();
      Complex complex16 = complex0.sin();
      Complex complex17 = complex15.cosh();
      Complex complex18 = complex14.add((-1729.84151751));
      Complex complex19 = Complex.valueOf(0.0, 0.0);
      Complex complex20 = complex19.NaN.tanh();
      double double0 = complex1.getArgument();
      Complex complex21 = complex10.cosh();
      Complex complex22 = complex21.ZERO.cos();
      Complex complex23 = complex16.subtract(607.4143040770806);
      Complex complex24 = complex1.multiply((double) 2304);
      Complex complex25 = complex16.divide(complex20);
      Complex complex26 = complex0.tan();
      Complex complex27 = complex2.subtract(7.174547784678893E-8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(4046.289);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(4046.289);
      Complex complex3 = complex1.add((-303.7));
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-567.308), (-2058.007899395927));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ZERO.asin();
      Object object0 = new Object();
      boolean boolean0 = complex2.I.equals(object0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.divide(1113.369895511);
      Complex complex5 = Complex.valueOf((double) 1);
      Object object1 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.divide((-993.09));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-445.6865));
      Object object0 = new Object();
      Object object1 = complex0.NaN.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.sinh();
      String string0 = complex0.ZERO.toString();
      Object object2 = complex1.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-806.3143896), (-3398.07922867399));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-687.4894278780392), 764.0635);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.ONE.pow((-687.4894278780392));
      double double0 = complex3.abs();
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.I.add((-1.0));
      Complex complex7 = complex0.createComplex(0.0, 764.0635);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.ONE.sinh();
      Complex complex10 = complex9.ZERO.add(0.0);
      Complex complex11 = complex0.multiply(2209.899348658341);
      Complex complex12 = complex11.ZERO.add(2209.899348658341);
      Object object0 = complex11.readResolve();
      Complex complex13 = Complex.valueOf((-687.4894278780392));
      Complex complex14 = Complex.valueOf(673.018205, (-687.4894278780392));
      Complex complex15 = complex7.log();
      Complex complex16 = complex0.asin();
      Complex complex17 = complex16.NaN.multiply(complex7);
      int int0 = complex12.hashCode();
      Complex complex18 = Complex.valueOf(281.61546028708);
      double double1 = complex10.getImaginary();
      Complex complex19 = complex16.INF.subtract(complex12);
      boolean boolean0 = complex12.isInfinite();
      Complex complex20 = complex17.asin();
      Complex complex21 = complex5.log();
      Complex complex22 = complex18.exp();
      Complex complex23 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-702.4));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.valueOf((-702.4), 0.0);
      Complex complex3 = complex0.multiply((-702.4));
      Complex complex4 = complex0.pow(complex3);
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.I.readResolve();
      double double0 = complex1.INF.getArgument();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex7 = complex6.INF.add(complex0);
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex4.ZERO.divide(complex6);
      double double0 = complex6.abs();
      Complex complex11 = complex4.multiply(complex0);
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex11.cos();
      Complex complex14 = complex13.INF.asin();
      Complex complex15 = complex14.I.negate();
      Complex complex16 = complex13.INF.sqrt();
      Complex complex17 = complex10.exp();
      Complex complex18 = complex6.asin();
      Complex complex19 = complex0.add(complex1);
      Complex complex20 = complex11.sqrt1z();
      Complex complex21 = complex18.multiply((-2116.9));
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2373.2647313, 2373.2647313);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.subtract((-4752.184987));
      Complex complex5 = complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.multiply(complex3);
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      int int0 = (-3853);
      try { 
        complex0.nthRoot((-3853));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,853
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(863.314493701, 863.314493701);
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.sqrt();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(1544.152691500143);
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      boolean boolean0 = complex1.ONE.equals(complex2);
      Complex complex3 = complex0.pow(0.687761664390564);
      Complex complex4 = complex1.sqrt1z();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex1.I.exp();
      Complex complex7 = complex1.pow(0.687761664390564);
      double double0 = complex7.getImaginary();
      double double1 = complex2.abs();
      double double2 = complex3.getReal();
      boolean boolean1 = complex1.equals(complex5);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex5.multiply(677);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.983191803254889E-7);
      double double0 = complex0.I.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = Complex.valueOf(1495.2173497, (-808.214902));
      Complex complex5 = complex1.ONE.add(1495.2173497);
      Complex complex6 = Complex.valueOf(4.983191803254889E-7, 0.0);
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex4.I.sqrt1z();
      Complex complex11 = complex2.pow(4.983191803254889E-7);
      int int0 = complex11.ONE.hashCode();
      Complex complex12 = Complex.valueOf(1.0);
      double double2 = complex12.abs();
      Complex complex13 = complex12.INF.sin();
      Complex complex14 = Complex.valueOf(1030.8, (-3565.298957));
      Complex complex15 = complex4.pow((-3565.298957));
      Complex complex16 = complex15.ONE.add(complex7);
      Object object0 = complex14.NaN.readResolve();
      Complex complex17 = complex1.divide(complex14);
      Complex complex18 = complex13.sinh();
      boolean boolean0 = complex14.equals((Object) null);
      String string0 = complex5.toString();
      Complex complex19 = complex12.add(1124.25701749939);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1572.118));
      Complex complex2 = complex0.add((-2977.565260378733));
      Object object0 = complex2.readResolve();
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1512.8);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = 1343.64052;
      Complex complex0 = Complex.valueOf(1343.64052, 1343.64052);
      int int0 = 0;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex0.add((double) 0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.asin();
      String string0 = complex3.INF.toString();
      Complex complex5 = complex3.add((-168.48817));
      int int1 = complex5.INF.hashCode();
      Complex complex6 = Complex.valueOf((double) 0);
      double double1 = (-1062.5);
      Complex complex7 = complex6.add((-1062.5));
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex6.asin();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex10.NaN.atan();
      try { 
        complex4.nthRoot((-2529));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,529
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6551742553710938, (-1771.638836495));
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.multiply(1);
      Complex complex2 = complex1.INF.createComplex(0.0, (-2057.6973888853));
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-2789.0));
      Complex complex2 = new Complex((-2789.0), 0.0);
      Complex complex3 = complex1.INF.divide(complex2);
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex0.I.createComplex(64.3968243, 64.3968243);
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex8.add(0.0);
      String string0 = complex5.toString();
      String string1 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex((-2780.231776154584), 8.455684903712996E-8);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.ZERO.multiply(complex3);
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex0.sqrt();
      double double0 = complex5.getImaginary();
      Complex complex8 = complex2.pow(1.5787194498912167E-8);
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex2.ZERO.subtract(2240.030976706);
      Complex complex6 = complex3.divide(0.0);
      double double0 = complex3.getReal();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow((-347.74657622511));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex4.I.divide((-347.74657622511));
      Complex complex6 = complex3.multiply((-3475.338913999));
      double double0 = complex6.getReal();
      boolean boolean0 = complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(94.1179695);
      Complex complex1 = complex0.ZERO.divide(94.1179695);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.valueOf(0.0);
      String string0 = complex0.toString();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.tan();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.NaN.acos();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 622.4);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.cosh();
      String string0 = complex0.toString();
      Complex complex3 = complex1.createComplex(622.4, 622.4);
      String string1 = complex1.NaN.toString();
      Complex complex4 = complex1.I.conjugate();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.ZERO.subtract(complex1);
      Complex complex7 = complex5.divide(0.0);
      Complex complex8 = complex0.multiply(complex1);
      double double1 = complex8.ONE.getArgument();
      Complex complex9 = complex1.log();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.ONE.exp();
      int int0 = complex1.hashCode();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex10.INF.subtract(complex12);
      ComplexField complexField0 = complex1.INF.getField();
      double double2 = complex8.getArgument();
      Complex complex14 = complex1.I.reciprocal();
      double double3 = complex9.getArgument();
      Complex complex15 = complex1.multiply(4630);
      Complex complex16 = complex14.cosh();
      Complex complex17 = complex7.reciprocal();
      Complex complex18 = complex7.atan();
      Complex complex19 = complex10.ZERO.add(3074.3);
      Complex complex20 = complex10.negate();
      Complex complex21 = complex2.cos();
      Complex complex22 = complex11.createComplex((-2472.4), (-366.76654));
      boolean boolean0 = complex0.equals(complex10);
      Complex complex23 = complex21.sqrt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.INF.sinh();
      Complex complex6 = complex4.I.add((-1.0));
      boolean boolean0 = complex0.equals(complex2);
      Complex complex7 = complex4.INF.divide(complex3);
      Complex complex8 = complex1.ONE.atan();
      Complex complex9 = complex4.pow((-2654.9221));
      ComplexField complexField0 = complex9.I.getField();
      Complex complex10 = complex8.NaN.divide(complex6);
      Complex complex11 = complex2.ONE.pow((-486.7925968));
      Complex complex12 = complex9.NaN.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex13 = complex6.tanh();
      int int0 = complex13.ONE.hashCode();
      Complex complex14 = complex4.pow((-2654.9221));
      Object object0 = complex3.readResolve();
      Complex complex15 = complex6.pow((-486.7925968));
      double double1 = complex0.getReal();
      Complex complex16 = complex4.exp();
      Complex complex17 = complex15.cos();
      double double2 = complex2.getImaginary();
      Complex complex18 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.conjugate();
      double double0 = complex3.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      Complex complex4 = Complex.valueOf(592.79, 592.79);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex6.INF.multiply(2192);
      Complex complex8 = Complex.valueOf(592.79);
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = Complex.I;
      Complex complex11 = complex2.ZERO.multiply(2325);
      Complex complex12 = complex11.I.cos();
      Object object1 = complex10.NaN.readResolve();
      Complex complex13 = complex5.I.conjugate();
      Complex complex14 = complex13.INF.exp();
      Complex complex15 = complex3.multiply(complex10);
      Object object2 = complex0.NaN.readResolve();
      Complex complex16 = complex6.tanh();
      Complex complex17 = complex10.sinh();
      Complex complex18 = complex2.subtract((double) 2192);
      Complex complex19 = complex18.NaN.pow(complex8);
      Complex complex20 = complex18.tanh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.cos();
      boolean boolean0 = complex2.equals(object0);
      Complex complex4 = complex1.log();
      List<Complex> list0 = complex3.nthRoot(2472);
      Complex complex5 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      double double0 = 1109.03224819791;
      Complex complex1 = Complex.valueOf(1109.03224819791);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ONE.subtract(1109.03224819791);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.I.add((-805.6146518));
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.INF.equals(object0);
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = Complex.valueOf((-805.6146518));
      String string0 = complex3.NaN.toString();
      Complex complex5 = complex0.I.cosh();
      String string1 = complex3.ONE.toString();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex4.sqrt1z();
      double double0 = complex0.abs();
      Complex complex9 = complex4.ONE.add(complex7);
      String string2 = complex3.ZERO.toString();
      Complex complex10 = Complex.valueOf((-805.6146518));
      Complex complex11 = complex3.cosh();
      double double1 = complex9.NaN.abs();
      Object object1 = complex11.readResolve();
      Complex complex12 = complex4.exp();
      boolean boolean1 = complex9.equals(complex4);
      Complex complex13 = complex6.NaN.pow(0.0);
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex12.acos();
      int int0 = complex4.hashCode();
      int int1 = complex9.hashCode();
      int int2 = complex14.hashCode();
      Complex complex16 = complex13.conjugate();
      Complex complex17 = complex3.sin();
      Complex complex18 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.ZERO.add(1.0);
      Complex complex5 = complex0.add(complex1);
      String string0 = complex0.toString();
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = complex1.tan();
      Complex complex8 = complex1.createComplex(0.0, 2.5411510467529297);
      List<Complex> list0 = complex5.nthRoot(1340);
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1.6105287075042725);
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex0.multiply(1);
      Complex complex7 = complex6.ONE.multiply(complex1);
      Complex complex8 = complex2.subtract((double) 1);
      Complex complex9 = Complex.valueOf((double) 1);
      Complex complex10 = complex8.multiply(complex9);
      Complex complex11 = complex8.createComplex(1, 0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract(complex0);
      double double0 = complex2.INF.getArgument();
      boolean boolean0 = complex2.ZERO.equals((Object) null);
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex0.pow(complex1);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex5.ZERO.atan();
      Complex complex8 = complex6.I.exp();
      Complex complex9 = complex5.NaN.conjugate();
      boolean boolean1 = complex4.NaN.equals(complex9);
      List<Complex> list0 = complex6.ZERO.nthRoot(115);
      Complex complex10 = complex5.exp();
      Complex complex11 = complex10.ONE.atan();
      Complex complex12 = complex8.ONE.add(0.0);
      Complex complex13 = complex5.divide(0.0);
      Complex complex14 = complex1.sqrt1z();
      double double1 = complex1.getArgument();
      Complex complex15 = complex5.subtract(complex1);
      Complex complex16 = complex14.subtract(1771.2616);
      double double2 = complex4.getArgument();
      Complex complex17 = complex8.add(complex1);
      Complex complex18 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.ZERO.subtract(complex3);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex5.ONE.acos();
      Complex complex9 = complex3.ONE.log();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex5.acos();
      boolean boolean0 = complex10.isNaN();
      Object object0 = complex4.readResolve();
      Complex complex12 = complex11.tan();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex3.add(1.0);
      Complex complex15 = complex4.reciprocal();
      Complex complex16 = complex12.log();
      Complex complex17 = complex16.pow(1.0);
      Complex complex18 = Complex.valueOf(1.0, 952.322);
      Complex complex19 = complex8.add(3.5638391501880846E-10);
      Complex complex20 = complex10.negate();
      Complex complex21 = complex16.exp();
      boolean boolean1 = complex16.isNaN();
      Complex complex22 = Complex.valueOf(3.5638391501880846E-10, 0.0);
      Complex complex23 = complex18.divide(0.0);
      Complex complex24 = complex23.atan();
      Complex complex25 = complex24.NaN.multiply(0.0);
      boolean boolean2 = complex17.isInfinite();
      Complex complex26 = complex8.cos();
      Complex complex27 = complex25.conjugate();
      Complex complex28 = complex5.sin();
  }
}
