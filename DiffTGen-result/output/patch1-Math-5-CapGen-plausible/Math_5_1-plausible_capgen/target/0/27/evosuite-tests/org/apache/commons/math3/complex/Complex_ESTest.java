/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:44:30 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3195229636950566E-16);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.divide(2.3195229636950566E-16);
      Complex complex4 = Complex.valueOf(2.3195229636950566E-16, 1.3810978455418157);
      Complex complex5 = Complex.valueOf((-2.9275804461593914E217), (-2.9275804461593914E217));
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.cos();
      ComplexField complexField0 = complex3.getField();
      String string0 = complex0.toString();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.multiply(173);
      Complex complex10 = complex9.I.pow(complex0);
      Complex complex11 = Complex.valueOf((-3071.4), Double.POSITIVE_INFINITY);
      Complex complex12 = complex8.divide(complex6);
      Complex complex13 = complex0.reciprocal();
      Complex complex14 = Complex.valueOf((-3071.4), 2172.407504743);
      Complex complex15 = complex14.pow(complex5);
      String string1 = complex1.toString();
      Complex complex16 = complex11.multiply(173);
      Complex complex17 = complex16.ONE.atan();
      Complex complex18 = complex5.conjugate();
      Object object0 = complex9.readResolve();
      Complex complex19 = Complex.valueOf((double) 173);
      Complex complex20 = complex15.multiply((-2.9275804461593914E217));
      Object object1 = complex7.readResolve();
      Complex complex21 = complex2.add((-2.9275804461593914E217));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ONE.multiply(1986.40597);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex0.ZERO.cos();
      Complex complex6 = complex5.NaN.pow(2229.8646444465);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.NaN.subtract((-5429.724428599));
      Complex complex9 = complex8.multiply(0);
      boolean boolean0 = complex0.I.equals(complex7);
      Complex complex10 = Complex.valueOf(1986.40597, 941.5);
      Complex complex11 = complex0.subtract(complex10);
      Complex complex12 = complex10.sinh();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex12.ZERO.divide(complex13);
      Complex complex15 = Complex.valueOf((double) 0);
      Complex complex16 = complex14.cos();
      Complex complex17 = complex6.cosh();
      Complex complex18 = complex17.pow(Double.NaN);
      Complex complex19 = Complex.I;
      Complex complex20 = Complex.ZERO;
      Complex complex21 = complex11.divide(complex20);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = Complex.valueOf((-2210.9347), (-2210.9347));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex2.ZERO.divide(complex3);
      Complex complex6 = complex2.I.acos();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex7.subtract(complex6);
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = complex0.atan();
      try { 
        complex2.NaN.nthRoot((-1917));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,917
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(517);
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.ONE.negate();
      boolean boolean0 = complex1.equals("k^");
      double double1 = complex0.getArgument();
      double double2 = complex0.abs();
      ComplexField complexField2 = complex2.NaN.getField();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.ONE.divide(1.5707963267948966);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex1.add(complex5);
      Complex complex9 = complex8.NaN.pow(complex0);
      Complex complex10 = complex9.INF.asin();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex8.acos();
      Complex complex13 = complex1.sin();
      Complex complex14 = complex13.INF.log();
      Object object0 = complex3.INF.readResolve();
      Object object1 = complex9.readResolve();
      Complex complex15 = complex3.multiply(517);
      Complex complex16 = complex2.divide(40.19140625);
      Complex complex17 = complex1.sin();
      Complex complex18 = complex17.sqrt1z();
      Complex complex19 = complex3.exp();
      boolean boolean1 = complex15.isInfinite();
      Complex complex20 = complex1.pow(1.0);
      Complex complex21 = complex1.multiply(6.283185307179586);
      Complex complex22 = complex15.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(383.487089953, Double.NaN);
      Complex complex1 = Complex.valueOf(383.487089953, (-621.89520424));
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1.7321703934464356E213);
      Complex complex1 = Complex.valueOf(1.7321703934464356E213, 2.509050608571019E-106);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.NaN.subtract(1.7321703934464356E213);
      Complex complex4 = complex0.tan();
      String string0 = complex4.I.toString();
      Complex complex5 = complex0.multiply(330.33);
      Complex complex6 = complex0.multiply(1.7321703934464356E213);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex2.log();
      double double0 = complex6.abs();
      Complex complex9 = complex5.createComplex(3.7734658676841284E20, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(126.0, (-1817.57872158));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.NaN.reciprocal();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ONE.tanh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.I.add(94.04616752);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex1.NaN.sinh();
      Complex complex8 = complex6.I.pow(complex1);
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex1.subtract((-1.5015840610262927));
      Complex complex11 = Complex.valueOf((-1817.57872158));
      Complex complex12 = complex11.NaN.sin();
      Complex complex13 = complex11.INF.multiply((-1817.57872158));
      Complex complex14 = complex6.acos();
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex0.createComplex(94.04616752, 3.0250770246136387E36);
      Complex complex17 = complex1.divide(94.04616752);
      Complex complex18 = complex5.log();
      Complex complex19 = complex12.multiply((-1817.57872158));
      Complex complex20 = complex10.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = Complex.valueOf(1.5707963267948966, 2707.8466976858);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      double double1 = complex0.getReal();
      Complex complex6 = complex0.ONE.log();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.ZERO.equals(complex3);
      boolean boolean1 = complex0.equals(object0);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.pow(complex7);
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex7.pow(complex2);
      Object object1 = complex8.readResolve();
      Complex complex12 = Complex.valueOf((-2343.1179499));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex5.multiply(complex1);
      Complex complex8 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex8.ZERO.sqrt1z();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex11.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex13 = complex0.pow(complex7);
      Complex complex14 = complex6.atan();
      Object object0 = complex14.readResolve();
      Complex complex15 = complex12.pow(complex1);
      Object object1 = complex6.readResolve();
      Complex complex16 = complex12.reciprocal();
      Complex complex17 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(798.4366164004, 1.467662348860426E45);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex6.ONE.conjugate();
      boolean boolean0 = complex7.equals("number of samples ({0})");
      Complex complex9 = complex6.negate();
      Complex complex10 = Complex.valueOf(798.4366164004, 1.467662348860426E45);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex9.ONE.divide(complex11);
      Complex complex13 = complex9.subtract(Double.NaN);
      Complex complex14 = complex7.subtract(0.0);
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1135.5240861976663, 1135.5240861976663);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.negate();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex3.NaN.divide(1166.3106781895729);
      Complex complex7 = complex0.tanh();
      int int0 = complex6.NaN.hashCode();
      Complex complex8 = complex3.ZERO.createComplex(523.017782, (-391.54007165));
      Complex complex9 = complex7.log();
      double double0 = complex9.getArgument();
      Complex complex10 = complex6.add(complex1);
      Complex complex11 = complex1.log();
      String string0 = complex11.toString();
      Complex complex12 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1034.0, (-1465.93));
      Complex complex1 = complex0.ONE.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      double double0 = complex3.getArgument();
      Complex complex6 = complex4.multiply((-711.7298003317));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.createComplex((-424.07198418), 5410.0);
      ComplexField complexField0 = complex3.getField();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex4.add((-424.07198418));
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex1.multiply(complex4);
      double double0 = complex8.ZERO.abs();
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex8.ZERO.reciprocal();
      Complex complex11 = complex0.subtract((-424.07198418));
      Complex complex12 = complex8.cosh();
      double double1 = complex7.getReal();
      Complex complex13 = complex7.divide((-424.07198418));
      Complex complex14 = complex6.conjugate();
      Object object1 = complex9.readResolve();
      Complex complex15 = complex12.divide(0.0);
      Complex complex16 = complex1.tan();
      String string0 = complex1.toString();
      ComplexField complexField1 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.add(Double.NaN);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex4.ZERO.cos();
      Object object0 = complex0.INF.readResolve();
      Complex complex6 = complex2.I.negate();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ZERO.createComplex(Double.NaN, Double.NaN);
      Object object1 = complex7.readResolve();
      boolean boolean0 = complex0.ZERO.equals(object1);
      Complex complex9 = complex7.conjugate();
      double double1 = complex9.ONE.getArgument();
      double double2 = complex0.abs();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex11 = complex4.I.add(complex2);
      Complex complex12 = complex9.NaN.tan();
      Complex complex13 = complex9.I.multiply(complex3);
      double double3 = complex1.abs();
      Complex complex14 = complex7.exp();
      int int0 = complex4.ONE.hashCode();
      List<Complex> list0 = complex9.nthRoot(387);
      String string0 = complex4.toString();
      Complex complex15 = complex2.ZERO.multiply(1098);
      Complex complex16 = complex4.asin();
      Complex complex17 = complex3.add(Double.POSITIVE_INFINITY);
      Complex complex18 = complex17.pow(0.0);
      Complex complex19 = complex7.acos();
      Complex complex20 = complex18.acos();
      Complex complex21 = complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      double double0 = complex0.abs();
      Complex complex2 = complex1.I.sqrt();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.I.divide((-200.391));
      Complex complex5 = complex4.multiply(2211);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.INF.atan();
      Complex complex9 = complex3.cosh();
      double double2 = complex4.getImaginary();
      String string0 = complex1.toString();
      Complex complex10 = complex5.subtract(complex2);
      boolean boolean0 = complex3.isInfinite();
      Complex complex11 = complex1.createComplex((-839.666), (-839.666));
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 839.69);
      Complex complex13 = complex8.sqrt();
      Complex complex14 = complex3.subtract(207.730329853);
      Complex complex15 = complex4.conjugate();
      Complex complex16 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(399.84201938266, 399.84201938266);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(500.0758557553943);
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = Complex.valueOf(1626.353139);
      Complex complex5 = complex2.INF.add(complex1);
      Complex complex6 = complex5.ONE.add(complex1);
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex3.multiply(1626.353139);
      Complex complex11 = complex10.subtract(complex0);
      Complex complex12 = complex4.sin();
      Complex complex13 = complex5.atan();
      Complex complex14 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1341.45158808271);
      Complex complex1 = complex0.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.log();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2854.93270951), (-2854.93270951));
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex2.ZERO.negate();
      double double1 = complex1.ZERO.abs();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex1.NaN.reciprocal();
      int int0 = complex0.hashCode();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.ONE.equals(complex0);
      Complex complex2 = complex1.createComplex(0.0, Double.NaN);
      Complex complex3 = complex0.exp();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1643.6584), 0.0);
      Complex complex1 = complex0.ONE.sin();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Complex complex2 = complex1.subtract(1.5640419864850202E-145);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = Complex.valueOf(472.097969966251, 0.0);
      Complex complex5 = complex1.NaN.add(720.4897317323562);
      Complex complex6 = Complex.NaN;
      boolean boolean0 = complex5.ONE.equals(complex6);
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.ZERO.createComplex(0.0, 472.097969966251);
      Complex complex10 = complex1.cos();
      Complex complex11 = complex10.ONE.pow(complex1);
      ComplexField complexField0 = complex11.ONE.getField();
      String string0 = complex10.INF.toString();
      List<Complex> list1 = complex0.nthRoot(17);
      Object object0 = complex0.readResolve();
      Complex complex12 = complex4.createComplex(720.4897317323562, (-20.0));
      Complex complex13 = complex10.exp();
      Complex complex14 = complex4.add(2.46537446975708);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex1.hashCode();
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2367.0), (-2367.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.pow((-3909.568026289));
      Complex complex5 = complex3.NaN.multiply(850);
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex0.ONE.reciprocal();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex0.log();
      String string0 = complex3.toString();
      Complex complex11 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-4.033));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.INF.exp();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex1.pow((-1099.59952));
      Complex complex5 = null;
      Complex complex6 = complex1.INF.exp();
      Complex complex7 = complex1.ZERO.reciprocal();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.conjugate();
      boolean boolean0 = complex0.equals("org.apache.commons.math3.complex.Complex");
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      String string0 = complex3.toString();
      Complex complex5 = complex3.add(0.0);
      Complex complex6 = complex5.I.cos();
      List<Complex> list0 = complex3.nthRoot(3040);
      int int0 = complex3.hashCode();
      Complex complex7 = complex6.multiply(0.0);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex3.multiply(0.0);
      Complex complex10 = complex6.createComplex(3040, 7.01199184127881E-8);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = (-1352.4455741772);
      Complex complex0 = new Complex((-1352.4455741772));
      Complex complex1 = complex0.pow((-1352.4455741772));
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ZERO.tanh();
      // Undeclared exception!
      complex3.I.nthRoot(5421);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Object object1 = complex0.INF.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.acos();
      Object object2 = complex2.NaN.readResolve();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.multiply(1711.34885);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4963.4494334);
      Complex complex1 = Complex.valueOf(4963.4494334, 3.530656968851287E-8);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex1.reciprocal();
      boolean boolean0 = complex3.I.equals(complex1);
      boolean boolean1 = complex0.isNaN();
      double double0 = complex2.getImaginary();
      Complex complex5 = complex0.multiply(4963.4494334);
      Object object0 = complex1.readResolve();
      boolean boolean2 = complex1.I.equals(object0);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex5.createComplex(4963.4494334, (-7.113313062268393E-12));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.subtract(complex2);
      boolean boolean0 = complex2.INF.equals(complex4);
      Complex complex5 = complex4.ZERO.negate();
      String string0 = complex4.INF.toString();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1444.2, 1678.1806236359191);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.multiply(1469);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex0.multiply(1469);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-59.0), (-59.0));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = complex4.ZERO.multiply((-59.0));
      List<Complex> list0 = complex3.NaN.nthRoot(37);
      Complex complex6 = Complex.valueOf(3189.200944345433);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = complex6.NaN.cos();
      Complex complex10 = complex6.exp();
      Complex complex11 = complex10.NaN.tan();
      Complex complex12 = complex11.log();
      double double0 = complex6.getArgument();
      Complex complex13 = complex9.createComplex((-1.4313002926259948E-8), (-1.0));
      Complex complex14 = complex13.NaN.conjugate();
      Complex complex15 = complex14.ONE.divide(1521.96526268849);
      ComplexField complexField0 = complex13.getField();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex8.equals(object0);
      Complex complex16 = complex10.add(complex4);
      Complex complex17 = complex8.pow(complex16);
      Complex complex18 = complex6.cosh();
      Complex complex19 = complex2.asin();
      int int0 = (-2223);
      try { 
        complex5.nthRoot((-2223));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,223
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1526.7982874414574), (-1526.7982874414574));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6259920998287064E77), (-2326.30563276));
      Complex complex1 = complex0.I.multiply((-1.6259920998287064E77));
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.subtract(0.0);
      Complex complex6 = complex0.INF.conjugate();
      Complex complex7 = complex2.divide(complex0);
      double double0 = complex7.ONE.getArgument();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex4.ZERO.divide(1578.363624);
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex0.I.asin();
      Complex complex13 = complex1.multiply(0.0);
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex6.subtract(0.0);
      Complex complex16 = complex15.add(complex7);
      Complex complex17 = complex0.add(complex5);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(1.0, 0.0);
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.reciprocal();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex0.add(1.0);
      boolean boolean0 = complex6.ZERO.equals(complex0);
      Complex complex10 = complex9.subtract(complex6);
      Complex complex11 = complex6.sqrt();
      Complex complex12 = Complex.valueOf((-518.41691));
      Complex complex13 = complex11.negate();
      Complex complex14 = Complex.valueOf(1.0, 1.0);
      Complex complex15 = complex0.pow(1367.652);
      Complex complex16 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex((-212.6185072956058), (-212.6185072956058));
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex2.createComplex(0.0, 4957.84802825257);
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex6.NaN.atan();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex0.multiply(complex2);
      Complex complex11 = complex2.I.pow(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex7.NaN.pow(0.0);
      Complex complex13 = complex6.tan();
      Complex complex14 = complex6.negate();
      Complex complex15 = complex7.sin();
      Complex complex16 = complex14.sqrt();
      Complex complex17 = complex7.sqrt();
      boolean boolean1 = complex1.isNaN();
      boolean boolean2 = complex4.isNaN();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = Complex.valueOf((-20.0));
      ComplexField complexField0 = complex1.I.getField();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex1.INF.exp();
      Complex complex9 = complex1.NaN.multiply((-20.0));
      Complex complex10 = Complex.valueOf((-20.0), (-20.0));
      Complex complex11 = complex5.ZERO.pow(0.0);
      double double0 = complex5.abs();
      Complex complex12 = complex0.add(27.58622844826744);
      Complex complex13 = complex12.cos();
      double double1 = complex5.getReal();
      Complex complex14 = complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.INF.nthRoot(7);
      Complex complex1 = complex0.ZERO.subtract((double) 7);
      Complex complex2 = complex1.NaN.pow((double) 7);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.INF.multiply(complex0);
      int int0 = complex4.hashCode();
      Complex complex6 = complex4.ONE.createComplex(1650.61356092, 294.8);
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex7.INF.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex1.readResolve();
      Complex complex9 = ((Complex) object0).INF.subtract(294.8);
      Complex complex10 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.I.divide(20.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.15359249711036682, (-1604.4289174536));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.valueOf(0.15359249711036682);
      Complex complex5 = complex3.INF.sinh();
      double double0 = complex5.NaN.getArgument();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.I.createComplex(0.0, 0.15359249711036682);
      Complex complex8 = complex7.NaN.createComplex(0.0, 0.0);
      Complex complex9 = Complex.valueOf(70.864987115002);
      Complex complex10 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      String string0 = complex0.NaN.toString();
      boolean boolean0 = complex1.ONE.equals("");
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.NaN.multiply(2033);
      double double0 = complex3.abs();
      Complex complex4 = complex0.NaN.multiply(complex1);
      Object object0 = complex1.NaN.readResolve();
      double double1 = complex0.INF.abs();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex0.multiply(complex1);
      List<Complex> list0 = complex4.nthRoot(2033);
      Complex complex10 = complex5.reciprocal();
      double double2 = complex10.INF.getArgument();
      Complex complex11 = complex5.INF.multiply(2033);
      String string1 = complex4.toString();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex12.I.cos();
      double double3 = complex9.getArgument();
      Complex complex14 = complex10.I.pow(complex7);
      Complex complex15 = complex0.add((-1646.084158984));
      Complex complex16 = complex9.reciprocal();
      double double4 = complex2.getReal();
      Complex complex17 = complex6.sqrt1z();
      double double5 = complex17.I.abs();
      Complex complex18 = complex12.INF.divide(Double.NaN);
      ComplexField complexField0 = complex12.getField();
      Complex complex19 = complex10.acos();
      Complex complex20 = complex12.divide(complex19);
      Complex complex21 = Complex.valueOf(301.713947946912);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-4268.7925580845), (-4268.7925580845));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.acos();
      double double0 = complex2.NaN.getArgument();
      Object object0 = complex1.ZERO.readResolve();
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.add((-4268.7925580845));
      Complex complex4 = complex0.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex4.ZERO.sqrt1z();
      Complex complex8 = complex1.exp();
      double double2 = complex4.getArgument();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      double double0 = complex0.getReal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2050.21149);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.NaN;
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.valueOf(20.366, 0.1353352963924408);
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex3.acos();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.multiply((-2578));
      Complex complex10 = complex8.atan();
      Complex complex11 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex(0.0, 3222.46224);
      double double0 = complex1.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.multiply(complex0);
      String string0 = complex4.toString();
      try { 
        complex3.nthRoot((-505));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(2715);
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sqrt1z();
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex4.subtract(3510.41);
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex0.subtract(complex5);
      double double1 = complex2.ONE.abs();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex0.ONE.log();
      Complex complex9 = complex1.pow(Double.NaN);
      Complex complex10 = complex7.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex0.tanh();
      Object object0 = complex12.ZERO.readResolve();
      double double2 = complex6.getImaginary();
      Complex complex13 = complex8.atan();
      Complex complex14 = complex9.multiply(complex7);
      boolean boolean1 = complex14.NaN.equals(complex3);
      Complex complex15 = Complex.valueOf((double) 2715);
      Complex complex16 = complex13.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-594.1982), Double.POSITIVE_INFINITY);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex3.INF.pow((-594.1982));
      Complex complex11 = complex8.ZERO.divide(complex0);
      Complex complex12 = complex1.sqrt();
      int int1 = complex3.hashCode();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex2.isNaN();
      Complex complex13 = complex3.ZERO.exp();
      double double0 = complex1.getReal();
      Complex complex14 = complex9.acos();
      double double1 = complex11.getArgument();
      Complex complex15 = Complex.valueOf(0.0, (-3628.7187));
      Complex complex16 = complex5.subtract(0.0);
      Complex complex17 = complex0.divide((-3628.7187));
      double double2 = complex17.abs();
      Complex complex18 = complex10.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.cos();
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.0, 1588.452218);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.I.conjugate();
      int int0 = complex1.INF.hashCode();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex3.ZERO.cosh();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.INF.acos();
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex9 = complex2.NaN.divide(9.250422086873268E-8);
      double double0 = complex9.NaN.abs();
      Complex complex10 = complex3.pow(354.253587);
      Complex complex11 = complex2.asin();
      boolean boolean0 = complex11.equals(complex2);
      Complex complex12 = complex0.I.cos();
      double double1 = complex11.getReal();
      double double2 = complex4.getImaginary();
      Complex complex13 = complex11.reciprocal();
      Complex complex14 = complex13.INF.cos();
      Complex complex15 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = Complex.valueOf(1.0, 0.0);
      Complex complex2 = Complex.valueOf(1.0, 0.0);
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.reciprocal();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex0.add(1.0);
      boolean boolean0 = complex6.ZERO.equals(complex0);
      Complex complex10 = complex9.subtract(complex6);
      Complex complex11 = complex6.sqrt();
      Complex complex12 = Complex.valueOf((-518.41691));
      Complex complex13 = complex11.negate();
      Complex complex14 = complex0.pow(1367.652);
      Complex complex15 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.createComplex((-3457.22), 0.0);
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex5.sin();
      double double0 = complex5.getReal();
      Complex complex7 = complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(2915.0);
      Complex complex3 = complex0.INF.pow(Double.POSITIVE_INFINITY);
      double double0 = complex1.getReal();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-114.589968));
      Complex complex1 = Complex.valueOf((-114.589968), 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = complex0.I.reciprocal();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex7.I.reciprocal();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex10 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-93.35996242140047));
      Complex complex1 = complex0.pow((-93.35996242140047));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.NaN.log();
      List<Complex> list0 = complex0.nthRoot(1860);
      Complex complex2 = complex0.add(0.0);
      double double0 = complex2.getReal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1790.8837, 1790.8837);
      Complex complex1 = new Complex(1790.8837, 1790.8837);
      Complex complex2 = complex1.INF.subtract(1790.8837);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.sqrt();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1238.579), (-1238.579));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.pow((-1238.579));
      Complex complex3 = complex2.ZERO.createComplex(1073.61793421422, 0.0);
      Complex complex4 = complex1.asin();
      ComplexField complexField0 = complex1.getField();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ONE.subtract((-2301.2));
      Complex complex4 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-187.300923), (-187.300923));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.ONE.subtract((-187.300923));
      Complex complex4 = complex3.I.exp();
      double double0 = complex0.I.getArgument();
      Complex complex5 = complex0.INF.multiply((-1097));
      Complex complex6 = complex5.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.pow(1924.6866402249645);
      Complex complex8 = complex2.ZERO.asin();
      boolean boolean1 = complex7.isInfinite();
      boolean boolean2 = complex1.equals(complex2);
      Complex complex9 = complex8.multiply(1924.6866402249645);
      Complex complex10 = complex1.multiply((-187.300923));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(158.47156752);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.add(158.47156752);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3746.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex2.ZERO.add((-1702.80017));
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex3.add((-3746.0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      ComplexField complexField0 = complex0.NaN.getField();
      String string0 = complex0.toString();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex3.ONE.pow(complex1);
      double double0 = complex2.abs();
      boolean boolean0 = complex2.isNaN();
      double double1 = complex0.abs();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.multiply(279.5);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-282.4), (-282.4));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.multiply((-1639));
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.I.acos();
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.INF.multiply(520.894324694292);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex0.subtract(complex6);
      Complex complex10 = complex9.I.divide(complex8);
      Complex complex11 = complex5.sqrt1z();
      Complex complex12 = Complex.valueOf(520.894324694292);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex4.conjugate();
      double double0 = complex4.getReal();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex4.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.negate();
      double double0 = complex1.getArgument();
      Complex complex3 = Complex.valueOf(Double.NaN);
      double double1 = complex0.abs();
      String string1 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.exp();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1286.1394573003147), (-1286.1394573003147));
      Complex complex2 = Complex.valueOf((-1015.0));
      boolean boolean0 = complex0.equals("");
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.NaN.add(complex2);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex3.NaN.multiply(0);
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex6.I.pow((double) 0);
      List<Complex> list0 = complex5.nthRoot(840);
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex5.reciprocal();
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex4.createComplex((-1286.1394573003147), 2024.15720241081);
      try { 
        complex14.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.add(complex2);
      boolean boolean0 = complex3.ONE.equals(complex0);
      Complex complex4 = Complex.valueOf(0.0, 699.00568);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex5.ONE.multiply(37);
      Complex complex7 = complex0.ONE.sqrt();
      Complex complex8 = complex7.INF.multiply(complex0);
      double double0 = complex2.NaN.getArgument();
      Complex complex9 = complex2.ZERO.cos();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.add(complex3);
      ComplexField complexField0 = complex1.getField();
      ComplexField complexField1 = complex2.getField();
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      Complex complex13 = complex0.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(3.2850043261803593E68);
      boolean boolean0 = complex1.ZERO.equals(complex0);
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex0.divide(complex1);
      String string0 = complex1.toString();
      boolean boolean1 = complex0.equals(complex1);
      double double0 = complex2.getReal();
      Complex complex4 = complex1.divide(0.0);
      Object object0 = complex1.readResolve();
      boolean boolean2 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-2.5309316441333305E-8));
      Complex complex1 = complex0.NaN.sinh();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = new Complex(2321.205469746613);
      Complex complex3 = complex0.pow(complex2);
      double double0 = complex3.INF.abs();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ONE.sin();
      List<Complex> list0 = complex5.NaN.nthRoot(1640);
      Complex complex7 = complex4.multiply(complex2);
      Complex complex8 = complex7.ONE.reciprocal();
      Complex complex9 = complex1.tan();
      double double1 = complex0.abs();
      Complex complex10 = complex9.pow((-1.0));
      int int1 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-1209.2880136946537));
      Complex complex1 = complex0.ZERO.add(2.414213562373095);
      Complex complex2 = complex0.add(480.685);
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.INF.sqrt();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.INF.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex6.multiply((-2602.03932993));
      Complex complex9 = complex0.conjugate();
      Object object1 = complex9.readResolve();
      Complex complex10 = complex9.multiply(271);
      Complex complex11 = complex7.divide((-3009.9819082596823));
      Complex complex12 = complex7.conjugate();
      Complex complex13 = complex1.multiply(271);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(5.8015881615938497E-8);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.divide(5.8015881615938497E-8);
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.add(5.8015881615938497E-8);
      List<Complex> list0 = complex4.nthRoot(1);
      boolean boolean1 = complex2.isInfinite();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.sqrt1z();
      double double1 = complex6.getArgument();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex4.sinh();
      Complex complex9 = Complex.valueOf(0.0);
      double double2 = complex9.NaN.abs();
      Complex complex10 = complex7.pow(complex4);
      Complex complex11 = complex10.I.subtract(complex5);
      Object object1 = complex11.readResolve();
      int int0 = complex11.INF.hashCode();
      Complex complex12 = complex7.subtract(0.0);
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex12.atan();
      boolean boolean2 = complex0.isInfinite();
      Complex complex15 = complex4.tan();
      Complex complex16 = complex14.acos();
      Complex complex17 = complex1.add(0.7853981633974483);
      Complex complex18 = complex3.reciprocal();
      try { 
        complex16.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex0.INF.pow(0.0);
      Complex complex5 = complex4.INF.atan();
      double double0 = complex0.getReal();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex0.createComplex(0.0, 1954.6026869533353);
      Complex complex8 = Complex.valueOf(1954.6026869533353, 0.0);
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex4.asin();
      double double1 = complex7.getReal();
      Complex complex11 = complex5.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex0.add((-89.7373795223918));
      Complex complex4 = complex3.acos();
      double double0 = complex4.ZERO.getArgument();
      boolean boolean0 = complex4.equals(complex0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.pow((-20.0));
      double double1 = complex2.abs();
      Complex complex3 = complex0.INF.exp();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex4 = complex1.I.createComplex(1.0, 1709.937467118);
      Complex complex5 = Complex.valueOf(87.0);
      Complex complex6 = complex5.ZERO.pow(complex2);
      Complex complex7 = Complex.valueOf(0.0, 1.0);
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex1.ZERO.sin();
      Complex complex10 = complex8.NaN.log();
      Complex complex11 = complex10.INF.createComplex(0.0, (-1593.31546545358));
      Complex complex12 = complex1.cosh();
      double double2 = complex12.ONE.abs();
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = complex10.I.exp();
      Complex complex15 = complex14.sqrt();
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex10.divide(complex1);
      Complex complex18 = complex7.tan();
      Complex complex19 = complex0.ZERO.add(complex3);
      Complex complex20 = complex6.sinh();
      List<Complex> list0 = complex16.nthRoot(17);
      Complex complex21 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(8.738625278484571E-8);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex1.I.atan();
      boolean boolean0 = complex6.equals((Object) null);
      Complex complex8 = complex5.ONE.reciprocal();
      Complex complex9 = Complex.valueOf((-987.67), (-987.67));
      boolean boolean1 = complex3.equals(complex9);
      double double0 = complex6.getImaginary();
      Complex complex10 = complex8.sinh();
      Complex complex11 = Complex.valueOf((-987.67), 8.738625278484571E-8);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1641.6639885180457);
      Complex complex1 = complex0.NaN.multiply((-1959));
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.subtract(1641.6639885180457);
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex5.pow(0.0);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex5.pow(complex9);
      Complex complex11 = complex9.I.sinh();
      Complex complex12 = complex10.NaN.conjugate();
      Complex complex13 = complex7.INF.negate();
      Complex complex14 = complex12.INF.tan();
      Complex complex15 = complex2.sin();
      Complex complex16 = complex0.NaN.divide(complex10);
      Complex complex17 = complex12.ONE.subtract(complex0);
      Complex complex18 = complex17.ONE.add(3652.0);
      Complex complex19 = complex12.createComplex(237.05381527644, (-5046.8953));
      Complex complex20 = complex9.log();
      int int0 = complex20.ONE.hashCode();
      Complex complex21 = complex17.tan();
      Complex complex22 = complex5.negate();
      double double0 = complex9.getReal();
      Complex complex23 = complex11.divide(complex13);
      Complex complex24 = complex20.asin();
      Complex complex25 = complex22.sinh();
      double double1 = complex7.abs();
      Complex complex26 = complex19.sqrt1z();
      int int1 = complex23.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4293.372064164666);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(4293.372064164666);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.multiply(complex2);
      double double0 = complex3.INF.abs();
      double double1 = complex4.NaN.abs();
      Complex complex5 = complex0.ONE.add(1627.0);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex1.ONE.multiply(complex3);
      Complex complex8 = complex2.multiply(complex1);
      Complex complex9 = complex6.ONE.add((-2473.4716259));
      Complex complex10 = complex2.subtract(4293.372064164666);
      boolean boolean0 = complex6.isNaN();
      double double2 = complex4.abs();
      Complex complex11 = Complex.valueOf(4293.372064164666);
      Complex complex12 = complex11.ONE.sin();
      double double3 = complex11.ZERO.getArgument();
      boolean boolean1 = complex11.isInfinite();
      Complex complex13 = complex5.conjugate();
      Complex complex14 = complex9.pow(0.23402166366577148);
      int int0 = complex1.hashCode();
      Complex complex15 = complex14.reciprocal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(1134.794);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.sin();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex5.NaN.reciprocal();
      String string0 = complex0.INF.toString();
      Complex complex8 = complex7.I.createComplex(845.7, 845.7);
      Complex complex9 = complex8.ONE.multiply(7.630546413718035E-10);
      boolean boolean0 = complex5.isInfinite();
      double double0 = complex0.abs();
      Complex complex10 = complex0.add(5.637945686485334E-229);
      double double1 = complex10.NaN.abs();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex7.conjugate();
      int int0 = complex0.hashCode();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex2.sinh();
      Complex complex15 = complex14.INF.add(845.7);
      Complex complex16 = complex15.ZERO.cosh();
      Complex complex17 = complex16.I.sqrt1z();
      Complex complex18 = complex12.divide(845.7);
      Complex complex19 = complex18.INF.asin();
      Complex complex20 = complex14.divide(complex5);
      Complex complex21 = complex12.sin();
      boolean boolean1 = complex19.isNaN();
      Complex complex22 = complex19.acos();
      Complex complex23 = complex16.multiply(complex11);
      Complex complex24 = complex23.cos();
      Complex complex25 = complex24.NaN.sinh();
      Complex complex26 = complex10.reciprocal();
      Complex complex27 = complex22.multiply(1);
  }
}
