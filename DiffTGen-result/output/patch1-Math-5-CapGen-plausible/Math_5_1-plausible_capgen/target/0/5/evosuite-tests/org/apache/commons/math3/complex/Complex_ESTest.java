/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:34:18 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-711.95136);
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.I.subtract(1457.4748769021);
      Complex complex5 = complex2.ZERO.tan();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex6.INF.tanh();
      String string0 = complex0.toString();
      Object object0 = complex1.INF.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex8.INF.add(Double.NaN);
      Complex complex11 = complex10.NaN.atan();
      int int0 = complex10.ONE.hashCode();
      Complex complex12 = complex8.acos();
      Complex complex13 = complex1.INF.subtract(complex5);
      Complex complex14 = complex1.cosh();
      Complex complex15 = Complex.valueOf(Double.NaN);
      Complex complex16 = complex15.I.sqrt();
      boolean boolean0 = complex14.ONE.equals(complex15);
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex17 = complex4.NaN.multiply(complex7);
      Complex complex18 = Complex.valueOf(Double.NaN);
      Complex complex19 = complex18.conjugate();
      Complex complex20 = complex4.acos();
      Complex complex21 = complex20.atan();
      Complex complex22 = complex20.log();
      Complex complex23 = complex6.multiply(complex15);
      int int1 = complex4.hashCode();
      Complex complex24 = complex15.add(2471.521922);
      Complex complex25 = complex12.add(Double.NaN);
      Complex complex26 = complex19.createComplex((-2304.0), 0.0);
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1282.03788479, 1194.94544706);
      Complex complex1 = complex0.ONE.subtract(1194.94544706);
      Complex complex2 = complex1.pow(1194.94544706);
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.atan();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.I.multiply((-1456.0));
      Object object0 = new Object();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.createComplex(1.5707963267948966, 563.829905285);
      Complex complex6 = complex4.INF.conjugate();
      double double1 = complex4.getReal();
      Complex complex7 = complex4.divide(complex2);
      Complex complex8 = complex3.ZERO.log();
      Complex complex9 = complex3.INF.tanh();
      Complex complex10 = complex4.sinh();
      // Undeclared exception!
      complex2.ZERO.nthRoot(5439);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(372.1232);
      Complex complex1 = complex0.negate();
      double double0 = complex1.ONE.getArgument();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.INF.multiply(complex0);
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex1.subtract(0.0);
      Complex complex7 = complex6.NaN.divide(0.0);
      Complex complex8 = complex0.ZERO.add(0.0);
      Complex complex9 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex4.log();
      Complex complex12 = complex4.pow(0.0);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ONE.readResolve();
      Object object1 = complex0.ONE.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      int int0 = complex2.ONE.hashCode();
      boolean boolean0 = complex0.isNaN();
      int int1 = complex0.INF.hashCode();
      Complex complex3 = complex2.createComplex(3.0099905634916516E236, 0.0);
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex1.multiply(745);
      Complex complex6 = complex5.ONE.pow(complex0);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.INF.add(0.0);
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex7.multiply(0.0);
      Complex complex11 = Complex.valueOf(3.0099905634916516E236, (double) 745);
      Complex complex12 = complex7.negate();
      Complex complex13 = Complex.valueOf(3.0099905634916516E236);
      Complex complex14 = complex9.cosh();
      Complex complex15 = complex14.ZERO.atan();
      Complex complex16 = complex6.sqrt1z();
      Complex complex17 = complex11.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-959.715462648);
      Complex complex1 = new Complex(20.0, (-959.715462648));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.tan();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.reciprocal();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getArgument();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-3552.81736));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.divide((-3552.81736));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.INF.reciprocal();
      Complex complex6 = complex5.INF.sin();
      int int0 = complex4.hashCode();
      double double0 = complex3.getImaginary();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex0.ONE.multiply(1);
      Complex complex9 = Complex.valueOf(313.60047694039);
      Complex complex10 = Complex.valueOf(2351.1960872, 1290.95961978);
      Complex complex11 = complex4.I.sqrt1z();
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex12 = complex11.I.sqrt();
      Complex complex13 = complex9.ONE.pow(complex1);
      Complex complex14 = complex9.ONE.divide(complex5);
      Complex complex15 = complex9.divide(313.60047694039);
      Complex complex16 = complex15.tan();
      Complex complex17 = complex4.tanh();
      Complex complex18 = complex17.INF.log();
      double double1 = complex17.getReal();
      double double2 = complex18.getImaginary();
      Complex complex19 = complex18.I.divide(Double.NaN);
      Complex complex20 = complex17.NaN.log();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex21 = complex13.pow(313.60047694039);
      Complex complex22 = complex0.subtract(0.7853981633974483);
      String string0 = complex18.toString();
      Complex complex23 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.multiply(342.3536);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.cosh();
      Object object0 = complex3.INF.readResolve();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex5 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.createComplex((-20.0), (-20.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.add((-20.0));
      Complex complex4 = complex2.INF.multiply(7.82494078472695E-9);
      Object object0 = complex2.ONE.readResolve();
      Complex complex5 = Complex.valueOf(939.37, 20.0);
      Object object1 = new Object();
      Complex complex6 = complex3.NaN.reciprocal();
      boolean boolean0 = complex2.equals(object1);
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex2.ONE.cos();
      boolean boolean1 = complex0.equals(complex3);
      Complex complex9 = complex5.NaN.cosh();
      Object object2 = complex6.readResolve();
      Object object3 = complex7.readResolve();
      double double0 = complex0.INF.getArgument();
      ComplexField complexField1 = complex6.getField();
      Complex complex10 = complex6.pow(2928.21470465279);
      Complex complex11 = complex10.I.sqrt();
      Complex complex12 = complex0.divide(complex5);
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex13.sin();
      Complex complex15 = complex3.createComplex(1.9502718448638916, (-1.0));
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1831.315187);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.NaN.log();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex2.ZERO.pow(1831.315187);
      Complex complex4 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex3.INF.add(complex0);
      double double1 = complex6.I.getArgument();
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex3.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex9 = complex3.pow(0.0);
      Complex complex10 = complex0.add(0.0);
      Complex complex11 = complex9.tan();
      String string0 = complex0.toString();
      Complex complex12 = complex3.add(complex5);
      Complex complex13 = complex10.log();
      double double2 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.665820371396835E-77);
      Complex complex1 = new Complex(1.0);
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.NaN.add(Double.NaN);
      Complex complex5 = complex3.I.log();
      Complex complex6 = complex0.I.multiply(complex3);
      String string0 = complex6.ZERO.toString();
      Complex complex7 = complex6.I.divide(3.665820371396835E-77);
      Complex complex8 = complex5.ONE.exp();
      Complex complex9 = complex8.INF.add(6.283185307179586);
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = complex10.sqrt();
      String string1 = complex10.I.toString();
      Object object0 = complex10.ZERO.readResolve();
      Complex complex12 = complex0.tan();
      Complex complex13 = new Complex(0.0, Double.NaN);
      boolean boolean0 = complex12.ONE.equals(complex13);
      Complex complex14 = Complex.valueOf(1.734665280502264E-8, Double.NaN);
      String string2 = complex4.toString();
      Complex complex15 = complex4.subtract(3.665820371396835E-77);
      double double1 = complex6.abs();
      Complex complex16 = complex15.ZERO.conjugate();
      Complex complex17 = complex6.tanh();
      ComplexField complexField0 = complex14.getField();
      double double2 = complex14.getArgument();
      boolean boolean1 = complex6.equals(complex14);
      double double3 = complex5.abs();
      Complex complex18 = complex2.negate();
      double double4 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0984749794006348, 2.0984749794006348);
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex0.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.NaN.subtract(20.0);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.sqrt1z();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex0.negate();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = Complex.valueOf(2.1482391357421875, 20.0);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ZERO.multiply(1363.93413869);
      Complex complex8 = complex4.add(20.0);
      String string0 = complex8.toString();
      Complex complex9 = complex8.pow(2.1482391357421875);
      Complex complex10 = complex0.pow(complex2);
      Complex complex11 = complex2.asin();
      Complex complex12 = complex3.conjugate();
      Complex complex13 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.createComplex(4545.2, (-3261.777147552384));
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.ONE.subtract(0.0);
      Complex complex5 = complex1.ONE.subtract(complex0);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1405.26650456604, 1405.26650456604);
      Complex complex1 = complex0.ONE.sinh();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = Complex.valueOf(1405.26650456604);
      Complex complex4 = complex0.divide(1405.26650456604);
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.ONE.sqrt1z();
      double double0 = complex1.getReal();
      Complex complex7 = complex5.log();
      String string0 = complex7.ONE.toString();
      Complex complex8 = complex5.divide(complex3);
      double double1 = complex5.abs();
      List<Complex> list0 = complex3.nthRoot(143);
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex3.cosh();
      int int0 = complex0.hashCode();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(850.7129320947835);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1296.1205045453787), 0.0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.NaN.subtract(complex0);
      Complex complex5 = complex0.ONE.subtract((-1296.1205045453787));
      int int0 = complex0.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-129.17562615));
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex1.NaN.multiply(882);
      Complex complex8 = complex2.NaN.subtract((double) 1);
      Complex complex9 = complex6.ZERO.reciprocal();
      boolean boolean0 = complex4.INF.equals(list0);
      Complex complex10 = complex3.log();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.conjugate();
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.I.subtract(complex2);
      Object object0 = complex2.readResolve();
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex5.I.asin();
      Complex complex9 = complex7.multiply(20.0);
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex10.acos();
      Complex complex12 = Complex.I;
      boolean boolean0 = complex0.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1173.628509);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.reciprocal();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.INF.multiply(1);
      Complex complex6 = complex3.ZERO.subtract(0.0);
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.multiply((-301.21750911));
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1421.66211415));
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.multiply(2586);
      Complex complex3 = complex0.add(complex1);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 2228.5);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.I.subtract((-1548.040958315));
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex1.exp();
      double double0 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add((-2028.2));
      Complex complex2 = complex1.I.subtract(2.0);
      Complex complex3 = complex1.INF.add((-2028.2));
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex4.ONE.asin();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex4.toString();
      Complex complex6 = complex0.multiply((-2028.2));
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2.5445477450140954E103));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(1.066575527191162, 0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      Complex complex5 = complex1.asin();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex5.INF.equals(object0);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.075769060297565E143);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.NaN.divide(complex2);
      double double0 = complex1.ONE.abs();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex2.NaN.sin();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.I.cosh();
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex5.getImaginary();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex1.NaN.negate();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex11.I.negate();
      Object object0 = complex8.readResolve();
      boolean boolean1 = complex1.isNaN();
      double double2 = complex8.getArgument();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex4.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0521983802642893E-8);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.INF.subtract(complex1);
      Complex complex7 = complex1.ONE.sin();
      Complex complex8 = Complex.valueOf(1.0521983802642893E-8, 0.0);
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex4.INF.exp();
      Complex complex11 = complex9.INF.reciprocal();
      Complex complex12 = complex1.subtract(0.0);
      int int0 = complex2.INF.hashCode();
      Complex complex13 = complex8.cosh();
      String string0 = complex0.ONE.toString();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex7.NaN.reciprocal();
      Complex complex16 = complex1.log();
      Complex complex17 = complex7.ZERO.divide(0.0);
      Complex complex18 = complex2.multiply((-3064.1316));
      Complex complex19 = complex7.add(complex13);
      int int1 = complex7.hashCode();
      Complex complex20 = complex11.add(0.0);
      Complex complex21 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(695.48895924);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.multiply(1);
      double double1 = complex2.ONE.getArgument();
      Complex complex5 = complex4.add((-530.486830602));
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex6.INF.subtract(760.88);
      double double2 = complex5.getArgument();
      Complex complex8 = complex0.divide(700.307456086498);
      Complex complex9 = complex1.negate();
      Complex complex10 = complex8.multiply(695.48895924);
      Complex complex11 = complex10.add(0.0);
      Complex complex12 = complex9.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-356.774), (-356.774));
      Complex complex1 = complex0.NaN.reciprocal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.NaN.add(20.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex2.add(206.5401);
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex1.pow(complex2);
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1497.9503281419));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex0.subtract(3944.9);
      Complex complex6 = complex1.ONE.subtract(complex0);
      Complex complex7 = complex6.ZERO.divide(complex2);
      double double0 = complex0.getReal();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex5.add(complex0);
      double double1 = complex8.abs();
      Complex complex10 = complex5.sqrt1z();
      double double2 = complex5.abs();
      Complex complex11 = complex4.ONE.sin();
      Complex complex12 = complex4.add(complex5);
      try { 
        complex12.nthRoot((-1140));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,140
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-270.1076392884887));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.subtract(0.0);
      try { 
        complex0.NaN.nthRoot((-4678));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,678
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(139.746668706);
      Complex complex1 = complex0.ONE.tanh();
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex2.sqrt();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex6 = complex2.sqrt();
      int int0 = complex4.hashCode();
      Complex complex7 = complex5.multiply(1.0);
      Complex complex8 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1940.81731639);
      Complex complex1 = new Complex((-1805.6));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ZERO.createComplex(1734.0, (-2649.29));
      String string0 = complex0.toString();
      boolean boolean0 = complex1.I.equals(complex2);
      Complex complex4 = Complex.valueOf(1.0);
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply((-1097));
      Complex complex2 = complex1.pow(1781.1617);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.subtract(Double.NaN);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.I.pow(complex4);
      Complex complex7 = complex6.I.multiply(Double.NaN);
      Complex complex8 = complex4.tan();
      Complex complex9 = complex4.negate();
      double double0 = 1058.88;
      Complex complex10 = complex6.multiply(1058.88);
      try { 
        complex10.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex4.add(Double.NaN);
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex8.ONE.log();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex1.NaN.equals(object0);
      Complex complex10 = complex8.ONE.sinh();
      Complex complex11 = complex4.INF.divide(complex1);
      Complex complex12 = complex0.add(complex1);
      Complex complex13 = complex12.ZERO.acos();
      boolean boolean1 = complex12.equals(complex4);
      Complex complex14 = complex1.sinh();
      double double0 = complex0.abs();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex7.add(complex0);
      Complex complex17 = complex3.multiply(17);
      Complex complex18 = complex1.log();
      boolean boolean2 = complex16.isInfinite();
      Complex complex19 = complex13.log();
      Complex complex20 = complex15.asin();
      double double1 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ZERO.subtract(564.688420145);
      Complex complex2 = complex1.multiply(180);
      Complex complex3 = complex0.ZERO.pow(564.688420145);
      Complex complex4 = complex0.ONE.negate();
      Complex complex5 = Complex.valueOf(564.688420145);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = Complex.valueOf(564.688420145);
      boolean boolean1 = complex6.equals(complex3);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.ONE.tanh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-1834.7095));
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.createComplex(Double.NaN, (-151.1));
      List<Complex> list0 = complex2.ONE.nthRoot(1401);
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex1.subtract((-1834.7095));
      Complex complex7 = Complex.valueOf((double) 1401, (-1834.7095));
      boolean boolean0 = complex5.equals(complex7);
      Complex complex8 = complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0299429893493652, 2.0299429893493652);
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(0.0, 1.0);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex1.NaN.multiply(complex2);
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex1.NaN.cosh();
      double double0 = complex0.getReal();
      Complex complex8 = complex6.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.pow(20.0);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Object object0 = complex1.INF.readResolve();
      double double0 = complex0.abs();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex3.ONE.conjugate();
      Complex complex6 = complex4.INF.pow(0.0);
      try { 
        complex6.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2528.9824845088), (-2528.9824845088));
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.pow((-243.05198155));
      Complex complex3 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-515.667430011546), (-515.667430011546));
      Complex complex1 = complex0.I.divide((-515.667430011546));
      Complex complex2 = complex0.multiply((-515.667430011546));
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex3 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.reciprocal();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex3.NaN.exp();
      double double0 = complex0.getImaginary();
      int int0 = complex3.hashCode();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(3.685169705587367E268);
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = complex2.add(407.221);
      double double0 = complex2.getImaginary();
      Complex complex5 = complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-968.6662584372));
      Complex complex1 = Complex.INF;
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(1263.658777);
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.subtract(1263.658777);
      Complex complex7 = complex0.add((-2005.0));
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.multiply((-2825));
      Complex complex10 = complex5.negate();
      Complex complex11 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.createComplex((-1333.339125411127), (-1333.339125411127));
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.multiply((-3969));
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.createComplex(1442.9, (-3969));
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex1.add((-755.0));
      Complex complex6 = complex1.add((-258.0));
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.pow(complex0);
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-4736.0), (-4736.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.multiply((-4736.0));
      Complex complex3 = complex0.acos();
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.divide((-4736.0));
      double double1 = complex0.getImaginary();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.createComplex(Double.NaN, (-4736.0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(2.337279322276433E-135);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex4.INF.add(2.337279322276433E-135);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.atan();
      double double0 = complex7.INF.abs();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 806.96066);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.INF.reciprocal();
      int int0 = complex2.hashCode();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex3.multiply(0.0);
      Complex complex8 = complex7.atan();
      double double0 = complex8.ZERO.abs();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.INF.sqrt1z();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(20.0);
      Complex complex2 = complex1.INF.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.log();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.negate();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1709));
      String string0 = complex1.NaN.toString();
      boolean boolean0 = complex0.INF.equals(complex1);
      Complex complex2 = complex1.createComplex(1843.6, 1843.6);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.negate();
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-810.4408));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.createComplex(2518.7058101487, (-810.4408));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(3513.024292388212);
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.subtract(3513.024292388212);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.ONE.sqrt();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(2.9257892371894816E-17);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.multiply(2.9257892371894816E-17);
      boolean boolean0 = complex0.equals(complex1);
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.5941681861877441, 0.5941681861877441);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      double double0 = complex1.ZERO.getArgument();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.negate();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.sinh();
      int int0 = complex3.hashCode();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-891.884), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.acos();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex0.createComplex((-1606.91648), (-1606.91648));
      Complex complex6 = complex5.sinh();
      boolean boolean1 = complex4.isInfinite();
      Complex complex7 = complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1978.8158187);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex0.ZERO.multiply(complex1);
      Complex complex5 = Complex.valueOf(1978.8158187, 0.0);
      Complex complex6 = complex0.pow(complex5);
      double double0 = complex5.getArgument();
      Complex complex7 = complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.subtract((-1359.0));
      Complex complex4 = complex0.INF.multiply(1489);
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.multiply(1489);
      Complex complex7 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(1.8958141803741455);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.divide(20.0);
      Complex complex3 = complex1.ZERO.divide(1.8958141803741455);
      double double0 = complex1.abs();
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.sinh();
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.divide(0.33605360984802246);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 343.60591);
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-943.229));
      Complex complex1 = complex0.ZERO.atan();
      Object object0 = new Object();
      Complex complex2 = complex0.INF.multiply(1434.2443817815165);
      boolean boolean0 = complex0.I.equals(object0);
      String string0 = complex0.toString();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1981.8);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.multiply(0);
      Complex complex4 = complex3.INF.add((double) 0);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.add((-776.33989));
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex6.I.atan();
      double double0 = complex5.getReal();
      Complex complex8 = complex0.atan();
      Object object1 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-3073.441350312338));
      Complex complex2 = complex0.multiply((-3073.441350312338));
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = Complex.valueOf(2489.4654487715, 2489.4654487715);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.log();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex2.NaN.add((-7.048932272279454E-8));
      Complex complex5 = complex2.NaN.acos();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.I.asin();
      double double0 = complex1.getArgument();
      Complex complex8 = complex0.ZERO.log();
      Complex complex9 = complex0.add(0.0);
      Complex complex10 = complex2.tan();
      Complex complex11 = complex10.ONE.tan();
      Complex complex12 = complex1.log();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.35128939151763916);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.createComplex(0.0, (-897.866501794));
      Complex complex3 = complex0.I.reciprocal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ONE.cos();
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = complex5.I.log();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex2.multiply(complex0);
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex5.cosh();
      double double1 = complex7.ONE.getArgument();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex13 = Complex.valueOf((-897.866501794), 815.0);
      List<Complex> list0 = complex0.ONE.nthRoot(37);
      int int0 = (-1878);
      try { 
        complex13.ONE.nthRoot((-1878));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,878
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-351.96), 2060.539964);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.acos();
      boolean boolean0 = complex0.I.equals(complex1);
      Complex complex3 = complex0.cos();
      int int0 = complex0.NaN.hashCode();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex0.divide((-351.96));
      Complex complex5 = Complex.valueOf(0.0);
      Object object1 = complex4.readResolve();
      Complex complex6 = complex4.ZERO.exp();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.add(complex5);
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex7.divide((-351.96));
      Complex complex11 = complex7.sinh();
      ComplexField complexField0 = complex11.getField();
      double double0 = complex4.INF.abs();
      Complex complex12 = complex7.atan();
      Object object2 = complex4.I.readResolve();
      Complex complex13 = complex3.add(complex4);
      String string1 = complex13.ONE.toString();
      Complex complex14 = complex13.subtract(complex4);
      Complex complex15 = complex0.multiply(complex12);
      Complex complex16 = complex13.NaN.negate();
      Complex complex17 = complex14.sqrt1z();
      Complex complex18 = complex17.INF.acos();
      boolean boolean1 = complex3.isInfinite();
      double double1 = complex13.abs();
      double double2 = complex4.abs();
      Complex complex19 = complex0.pow((-1184.36438542401));
      Complex complex20 = complex18.cosh();
      Complex complex21 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex1.add(0.0);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.INF.atan();
      double double0 = complex0.abs();
      Complex complex10 = complex6.pow((-3835.842));
      List<Complex> list0 = complex5.nthRoot(1408);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(98.0, (-1223.6));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.INF.add(complex1);
      Complex complex5 = complex3.NaN.multiply((-2021.843));
      double double0 = complex0.getReal();
      Complex complex6 = complex1.cosh();
      List<Complex> list0 = complex1.nthRoot(1631);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = Complex.valueOf((-1223.6), 98.0);
      Complex complex9 = complex1.sqrt1z();
      Object object0 = complex8.readResolve();
      boolean boolean0 = complex9.ONE.equals(object0);
      Complex complex10 = complex8.reciprocal();
      try { 
        complex6.nthRoot((-4491));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,491
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.ONE.cos();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex0.ONE.equals(object0);
      Complex complex5 = complex2.tanh();
      String string1 = complex5.I.toString();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex6.NaN.tan();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex9.INF.cosh();
      Complex complex11 = complex9.ONE.asin();
      Complex complex12 = complex0.multiply(complex6);
      Complex complex13 = complex12.divide(2.0);
      double double0 = complex1.abs();
      Complex complex14 = complex8.asin();
      boolean boolean1 = complex12.isNaN();
      Complex complex15 = complex1.subtract((-1811.0));
      Complex complex16 = complex8.cosh();
      Complex complex17 = complex8.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.ZERO.divide((-2.602850370608209E-8));
      Complex complex4 = Complex.valueOf(2025.421212249, 1733.50729);
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex1.pow(complex5);
      Complex complex8 = complex1.add(complex0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.negate();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex0.tan();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex1.INF.acos();
      Complex complex6 = complex4.NaN.subtract(1.7911398904871E84);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = Complex.valueOf(0.0, (-1845.474));
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex8.ZERO.multiply(complex11);
      double double0 = complex1.getArgument();
      Complex complex13 = complex7.NaN.tan();
      Complex complex14 = complex0.cos();
      Complex complex15 = complex6.pow(0.0);
      Complex complex16 = complex1.INF.divide(356.296782267984);
      Complex complex17 = complex4.sinh();
      Complex complex18 = complex17.ONE.sin();
      Complex complex19 = complex18.NaN.divide(complex17);
      Complex complex20 = complex3.cos();
      Complex complex21 = complex5.multiply(781);
      double double1 = complex0.getReal();
      double double2 = complex0.getReal();
      Complex complex22 = complex7.divide(complex2);
      Complex complex23 = complex3.sqrt1z();
      Complex complex24 = complex4.cosh();
      boolean boolean0 = complex6.equals(complex5);
      Complex complex25 = Complex.valueOf(Double.NaN, 1606.0);
  }
}
