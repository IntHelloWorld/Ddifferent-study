/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:37:43 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(375.98, 498.24945876197);
      Complex complex1 = complex0.INF.add(498.24945876197);
      Complex complex2 = complex1.pow(498.24945876197);
      Complex complex3 = complex0.createComplex((-493.8121887467), 1423.3);
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex0.add(498.24945876197);
      Complex complex10 = complex8.pow(375.98);
      Complex complex11 = complex10.NaN.tan();
      Complex complex12 = complex5.ONE.sinh();
      Complex complex13 = complex2.sqrt();
      List<Complex> list0 = complex9.ZERO.nthRoot(3914);
      Complex complex14 = complex9.add(complex2);
      Complex complex15 = complex8.divide(1423.3);
      double double0 = complex2.ZERO.getArgument();
      Complex complex16 = complex6.sinh();
      // Undeclared exception!
      complex9.nthRoot(2112);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex1.INF.atan();
      boolean boolean0 = complex2.ONE.equals("G");
      Complex complex5 = complex2.NaN.cos();
      Complex complex6 = complex5.I.atan();
      int int0 = complex6.I.hashCode();
      Complex complex7 = complex6.ONE.add((-1072.082171));
      Complex complex8 = complex0.sqrt1z();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex5.divide(9.496119530068797E19);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.I.subtract(0.0);
      double double0 = complex0.abs();
      Complex complex2 = complex0.divide((-2982.1059265130834));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.divide(complex0);
      List<Complex> list0 = complex4.ONE.nthRoot(1643);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.pow(1613.47469310595);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex6.INF.conjugate();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex5.divide(complex4);
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex0.pow((-2982.1059265130834));
      double double1 = complex10.getImaginary();
      Complex complex13 = complex11.sqrt1z();
      double double2 = complex8.getImaginary();
      Complex complex14 = complex4.add(complex7);
      String string0 = complex3.toString();
      Complex complex15 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(558.390214954829, 558.390214954829);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex5.negate();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3305.445743276);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = Complex.valueOf(3305.445743276, 0.13755163550376892);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.INF.add((-940.0));
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex3.NaN.sqrt1z();
      Complex complex8 = complex4.INF.add((-940.0));
      int int0 = complex4.hashCode();
      List<Complex> list0 = complex0.nthRoot(3209);
      boolean boolean0 = complex4.equals(complex0);
      double double0 = complex6.getReal();
      Complex complex9 = complex5.log();
      Complex complex10 = complex9.pow(complex8);
      Complex complex11 = complex9.sqrt();
      double double1 = complex11.I.getArgument();
      String string0 = complex6.toString();
      Complex complex12 = complex6.pow((-940.0));
      Complex complex13 = complex0.divide(complex6);
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex5.sin();
      Complex complex16 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2218.70613628727));
      Complex complex1 = complex0.NaN.log();
      double double0 = complex1.abs();
      Complex complex2 = complex1.I.multiply(complex0);
      boolean boolean0 = complex2.INF.equals("");
      double double1 = complex0.abs();
      int int0 = complex1.hashCode();
      Complex complex3 = complex1.multiply(2218.70613628727);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.NaN.divide(989.33352972025);
      Complex complex9 = complex6.NaN.acos();
      Complex complex10 = complex9.pow(complex4);
      Complex complex11 = complex0.sinh();
      int int1 = complex11.hashCode();
      Complex complex12 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.tanh();
      Complex complex14 = complex13.log();
      Complex complex15 = complex13.INF.divide(complex4);
      Complex complex16 = complex3.INF.reciprocal();
      Complex complex17 = complex4.createComplex(2693.260809615073, 313.991782235783);
      Complex complex18 = complex11.divide(313.991782235783);
      Complex complex19 = complex0.divide(complex17);
      Complex complex20 = complex19.INF.acos();
      String string0 = complex5.toString();
      int int2 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.valueOf(1159.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Object object0 = complex5.readResolve();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.multiply(complex1);
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex3.I.multiply(complex2);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex7 = complex2.NaN.divide(0.0);
      Complex complex8 = complex2.I.add(0.0);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex9.I.acos();
      Object object0 = complex8.I.readResolve();
      Complex complex11 = Complex.valueOf((double) 1, 0.0);
      Complex complex12 = complex2.NaN.multiply(1);
      Complex complex13 = complex12.ONE.acos();
      double double0 = complex1.getArgument();
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex14.NaN.sin();
      int int0 = complex2.hashCode();
      Complex complex16 = complex12.ONE.add(Double.NaN);
      Complex complex17 = complex16.I.tanh();
      Complex complex18 = complex8.reciprocal();
      Complex complex19 = complex1.subtract(complex12);
      Complex complex20 = complex2.divide((double) 1);
      String string0 = complex19.I.toString();
      ComplexField complexField1 = complex5.getField();
      Complex complex21 = complex19.add(0.0);
      Complex complex22 = Complex.valueOf(Double.NaN);
      Complex complex23 = complex9.multiply(1);
      Complex complex24 = complex10.sqrt1z();
      Complex complex25 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-506.475451332434));
      Complex complex1 = Complex.valueOf((-506.475451332434));
      Complex complex2 = complex1.ONE.multiply(complex0);
      int int0 = complex1.I.hashCode();
      Complex complex3 = Complex.valueOf((-1464.65));
      Complex complex4 = complex0.INF.pow((-506.475451332434));
      Complex complex5 = Complex.valueOf((-1464.65), (-506.475451332434));
      int int1 = complex0.ONE.hashCode();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.I.subtract((-1464.65));
      Complex complex8 = complex6.ONE.add(0.0);
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.INF.tanh();
      Complex complex11 = Complex.valueOf(0.595784068107605);
      double double0 = complex11.ZERO.abs();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex7.divide(1994.086511439811);
      Complex complex14 = complex7.I.conjugate();
      Complex complex15 = complex4.sin();
      Complex complex16 = complex0.atan();
      Complex complex17 = complex1.exp();
      int int2 = complex16.hashCode();
      boolean boolean0 = complex1.equals(complex13);
      Complex complex18 = complex8.acos();
      try { 
        complex18.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = new Complex((-2652.162162), (-379.13195344259));
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = Complex.valueOf(357.8829373194741);
      int int0 = complex4.hashCode();
      double double0 = complex0.INF.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex0.sqrt1z();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex0.NaN.pow(complex3);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = Complex.valueOf(3.280586734644871E82);
      Complex complex9 = complex8.ONE.subtract(3845.101298021);
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex10.pow(complex3);
      Object object0 = complex7.I.readResolve();
      Complex complex12 = complex10.subtract(0.0);
      Complex complex13 = complex10.ZERO.cosh();
      Complex complex14 = complex13.NaN.conjugate();
      ComplexField complexField0 = complex13.getField();
      Complex complex15 = complex3.add(3.280586734644871E82);
      Complex complex16 = complex7.subtract(2.0);
      Complex complex17 = complex3.ONE.sinh();
      Complex complex18 = complex7.createComplex(2.0, 0.0);
      Complex complex19 = complex1.asin();
      Complex complex20 = complex0.I.atan();
      String string0 = complex2.toString();
      Complex complex21 = complex0.sqrt();
      Complex complex22 = complex21.NaN.tan();
      double double0 = complex15.getReal();
      Complex complex23 = complex0.divide(complex16);
      Complex complex24 = complex0.add(0.0);
      Complex complex25 = complex22.negate();
      double double1 = complex18.getReal();
      Complex complex26 = complex22.multiply(3845.101298021);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2386.57649, 2386.57649);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = Complex.valueOf(2386.57649);
      double double0 = complex6.getReal();
      int int0 = complex2.hashCode();
      Complex complex10 = complex0.sinh();
      Object object0 = complex9.readResolve();
      Complex complex11 = complex0.sqrt();
      String string0 = complex7.toString();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.ONE.divide(0.0);
      Complex complex4 = complex3.INF.add(0.0);
      Complex complex5 = complex0.ZERO.divide(0.0);
      double double0 = complex2.I.abs();
      Complex complex6 = complex3.ZERO.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex3.INF.conjugate();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = Complex.valueOf(3097.831867738);
      Complex complex11 = Complex.valueOf(1.0);
      List<Complex> list0 = complex10.ZERO.nthRoot(1733);
      Complex complex12 = complex3.add(complex0);
      Complex complex13 = complex6.sqrt1z();
      Complex complex14 = complex13.ZERO.add(0.0);
      Complex complex15 = complex2.sqrt();
      boolean boolean0 = complex7.isInfinite();
      Complex complex16 = Complex.valueOf(0.0);
      int int0 = complex16.ZERO.hashCode();
      double double1 = complex2.getArgument();
      Complex complex17 = complex1.asin();
      Complex complex18 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1324.18970129209, (-2128.988223303));
      Complex complex1 = complex0.pow(1324.18970129209);
      Complex complex2 = complex0.INF.sqrt();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.equals(complex0);
      Complex complex3 = complex0.NaN.subtract((-4.734813904255994E-8));
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.ONE.createComplex(0.0, 3.204135737993823E-8);
      Complex complex6 = complex0.INF.divide(4171.87328);
      Complex complex7 = complex6.multiply(4171.87328);
      Complex complex8 = complex0.multiply(Double.NaN);
      Complex complex9 = Complex.valueOf((-4.734813904255994E-8));
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex8.subtract(complex0);
      Complex complex12 = complex11.INF.pow(complex2);
      Complex complex13 = complex3.log();
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(315.5671, 315.5671);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.pow(315.5671);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.createComplex(315.5671, 315.5671);
      Complex complex4 = complex0.I.multiply(0);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.ZERO.multiply(complex0);
      Complex complex8 = complex5.ZERO.divide(5.302803981406403E-8);
      Complex complex9 = complex2.pow((-109.0));
      Complex complex10 = complex1.pow(complex5);
      Complex complex11 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2678.0), (-2678.0));
      Complex complex1 = complex0.divide(1910.69850514758);
      Complex complex2 = Complex.valueOf(1910.69850514758);
      Complex complex3 = complex1.NaN.divide((-2678.0));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex4.pow(1.1857289715706991E-298);
      Complex complex8 = complex0.add((-2678.0));
      Complex complex9 = complex2.add(759.803170504);
      double double0 = complex9.INF.getArgument();
      String string0 = complex8.toString();
      Complex complex10 = complex0.subtract(1910.69850514758);
      Complex complex11 = complex10.ONE.exp();
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex6.reciprocal();
      Complex complex14 = complex5.multiply((-587));
      Complex complex15 = complex0.add((double) (-587));
      Complex complex16 = complex4.NaN.conjugate();
      Complex complex17 = complex13.divide(759.803170504);
      boolean boolean0 = complex1.isNaN();
      Complex complex18 = Complex.valueOf((-1383.24337268043), (-2045.0));
      ComplexField complexField0 = complex12.getField();
      Complex complex19 = complex13.divide(0.0);
      double double1 = complex2.getArgument();
      try { 
        complex14.nthRoot((-587));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -587
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = new Complex((-1639.2013), (-1639.2013));
      Complex complex5 = complex0.I.subtract(complex4);
      Complex complex6 = Complex.valueOf(0.0, 1.4366366863250732);
      Object object0 = complex5.I.readResolve();
      Complex complex7 = complex5.ONE.multiply((-7.461209161105275E-9));
      Object object1 = complex2.I.readResolve();
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex6.I.pow(complex2);
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = complex10.NaN.multiply(0.0);
      Complex complex12 = complex6.divide(1.4366366863250732);
      int int0 = complex12.I.hashCode();
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex0.divide(complex1);
      Complex complex15 = complex14.NaN.acos();
      Complex complex16 = Complex.valueOf(2.0);
      Complex complex17 = complex4.reciprocal();
      Complex complex18 = complex13.sqrt();
      Complex complex19 = complex9.tanh();
      Complex complex20 = Complex.ZERO;
      Complex complex21 = complex2.add(complex20);
      Complex complex22 = complex15.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 1688.1222867);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.multiply((-180.83842006796934));
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex3.NaN.cos();
      int int0 = complex4.ZERO.hashCode();
      String string0 = complex3.NaN.toString();
      Complex complex6 = complex0.subtract((-9.438168176533759E-290));
      Complex complex7 = complex6.NaN.divide((-3036.573));
      Complex complex8 = complex3.pow(complex6);
      Complex complex9 = complex6.acos();
      Complex complex10 = complex0.NaN.multiply(complex7);
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex9.I.sin();
      Complex complex13 = complex10.ZERO.exp();
      Complex complex14 = complex8.I.exp();
      Complex complex15 = complex8.pow(2.7050414085388184);
      Complex complex16 = complex15.ZERO.acos();
      Complex complex17 = complex2.pow(complex7);
      Complex complex18 = complex0.pow(1688.1222867);
      Complex complex19 = complex18.NaN.pow(1.8178469851136E-8);
      double double0 = complex11.getArgument();
      Complex complex20 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf((-2666.3));
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = complex1.log();
      Complex complex7 = Complex.valueOf(0.0, (-1.0));
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex0.pow(complex5);
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex3.subtract(0.0);
      Complex complex11 = complex3.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1979.453360797552));
      Complex complex1 = new Complex((-20.0), (-4332.1741823518));
      Complex complex2 = complex1.ZERO.createComplex((-20.0), (-1979.453360797552));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.INF.multiply(2344);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.INF.subtract(complex1);
      Complex complex7 = complex0.NaN.sin();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.I.asin();
      Object object0 = complex7.ZERO.readResolve();
      Complex complex10 = complex6.I.divide((-1979.453360797552));
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex6.getField();
      Complex complex11 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.533717155456543);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.INF.pow(2.533717155456543);
      Complex complex4 = complex1.I.exp();
      Complex complex5 = complex0.I.cos();
      Complex complex6 = new Complex((-2983.1885462));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex7 = complex6.NaN.multiply(complex1);
      Complex complex8 = complex6.I.createComplex(2.533717155456543, 0.0);
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex1.ONE.subtract(complex10);
      Complex complex12 = complex7.ZERO.pow(complex11);
      Complex complex13 = complex1.ONE.sin();
      Complex complex14 = complex13.ONE.atan();
      Complex complex15 = complex13.I.multiply((-2983.1885462));
      Complex complex16 = complex0.pow(complex6);
      List<Complex> list0 = complex16.INF.nthRoot(12);
      String string0 = complex6.toString();
      double double0 = complex7.getArgument();
      boolean boolean0 = complex16.isNaN();
      Complex complex17 = Complex.valueOf((-2319.8426781599), Double.NaN);
      Complex complex18 = complex5.tan();
      Complex complex19 = complex1.cosh();
      Complex complex20 = complex11.add(2.533717155456543);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1.8143062591552734, 1.8143062591552734);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex1.pow(1.8143062591552734);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex6.ONE.multiply((-1866));
      Complex complex9 = complex6.ZERO.conjugate();
      Complex complex10 = complex5.multiply((-88));
      Complex complex11 = complex2.acos();
      Complex complex12 = complex11.ZERO.cos();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex5.asin();
      Complex complex14 = complex13.ONE.acos();
      double double0 = complex8.getImaginary();
      Complex complex15 = complex11.reciprocal();
      ComplexField complexField0 = complex13.getField();
      Complex complex16 = complex7.pow(complex12);
      try { 
        complex5.nthRoot((-1866));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,866
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.multiply((-1650.5));
      Complex complex4 = complex3.INF.asin();
      double double0 = (-3717.8928);
      Complex complex5 = complex1.ZERO.add((-3717.8928));
      Complex complex6 = complex4.I.subtract(complex1);
      Complex complex7 = complex5.INF.divide((-3717.8928));
      int int0 = complex0.hashCode();
      double double1 = complex0.ONE.abs();
      Complex complex8 = complex1.I.divide(2.6115946769714355);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = Complex.NaN;
      boolean boolean0 = complex7.equals(complex10);
      Complex complex11 = complex3.acos();
      Complex complex12 = complex0.subtract(complex11);
      Complex complex13 = complex4.cos();
      Complex complex14 = complex5.conjugate();
      Complex complex15 = complex3.I.tan();
      try { 
        complex2.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-672.8));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.multiply((-672.8));
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.INF.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.INF.subtract(complex1);
      double double0 = complex4.ONE.getArgument();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex0.I.divide((-20.0));
      Complex complex6 = complex5.INF.log();
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = Complex.valueOf(2949.51250353112);
      Complex complex8 = complex0.createComplex((-20.0), Double.NaN);
      Complex complex9 = complex8.createComplex(2.0, 0.0);
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex1.NaN.multiply(complex3);
      Complex complex12 = complex8.NaN.divide(complex3);
      Complex complex13 = Complex.valueOf(0.0, (-94.655392745347));
      Complex complex14 = complex13.INF.atan();
      Complex complex15 = complex1.acos();
      Complex complex16 = complex9.cos();
      List<Complex> list0 = complex8.nthRoot(38);
      Complex complex17 = complex1.sin();
      double double1 = complex2.getArgument();
      Complex complex18 = complex8.acos();
      Complex complex19 = complex8.log();
      Complex complex20 = complex17.pow(complex8);
      Complex complex21 = complex13.subtract(Double.NaN);
      double double2 = complex18.abs();
      Complex complex22 = complex10.negate();
      boolean boolean0 = complex21.isInfinite();
      Complex complex23 = complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.pow(complex0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.ZERO.reciprocal();
      String string0 = complex0.ONE.toString();
      double double0 = complex3.getArgument();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ONE.subtract(complex0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = Complex.valueOf((-2541.675945));
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex0.ONE.multiply(complex2);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.tan();
      boolean boolean1 = complex2.isInfinite();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(699.4765561168067);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.pow((-2001.24482985739));
      double double0 = complex0.getImaginary();
      Complex complex4 = Complex.valueOf(239.74283097, 617.1095472373);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(990.80084537461, (-113.44046));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.ONE.sqrt();
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex1.INF.divide((-1211.59237029));
      Complex complex5 = complex3.INF.createComplex(Double.POSITIVE_INFINITY, 990.80084537461);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.INF.add(complex2);
      String string0 = complex2.ZERO.toString();
      Complex complex8 = complex7.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.NaN.cosh();
      Complex complex10 = complex6.atan();
      List<Complex> list0 = complex6.INF.nthRoot(871);
      String string1 = complex0.toString();
      boolean boolean0 = complex9.equals(complex5);
      double double0 = complex2.getImaginary();
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex1.acos();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex0.cosh();
      Complex complex14 = complex12.multiply((-113.44046));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-3399.5087));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.add((-2646.4));
      Complex complex3 = complex1.I.add((-2646.4));
      Complex complex4 = complex1.ZERO.sin();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.I.multiply(complex6);
      Complex complex8 = complex1.add((-7.814146377574201E-75));
      Complex complex9 = complex6.NaN.negate();
      Complex complex10 = complex7.multiply(508);
      Complex complex11 = complex10.INF.sqrt1z();
      Complex complex12 = complex10.createComplex((-3399.5087), 508);
      boolean boolean1 = complex10.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-570.0103395485), 2701.94451);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.add((-570.0103395485));
      try { 
        complex1.NaN.nthRoot((-929));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -929
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1572.573, 1572.573);
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.I.asin();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.ONE.divide(1572.573);
      Complex complex8 = complex7.multiply(2344.075694960777);
      boolean boolean1 = complex6.isNaN();
      Complex complex9 = complex1.NaN.subtract(complex4);
      Complex complex10 = Complex.valueOf(694.10958, 2897.45073289);
      Complex complex11 = complex4.atan();
      Complex complex12 = complex6.sqrt1z();
      boolean boolean2 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ZERO.pow((-1744.1523860963189));
      String string0 = complex2.toString();
      boolean boolean0 = complex1.equals(complex0);
      List<Complex> list0 = complex0.nthRoot(5387);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.ONE.cos();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex3.reciprocal();
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.302351152358085E-9));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide((-3452.3));
      Complex complex3 = complex2.NaN.tan();
      String string0 = complex2.INF.toString();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex1.divide((-2.302351152358085E-9));
      Complex complex8 = complex7.cos();
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(1.876076001514746E-8);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Object object0 = complex2.INF.readResolve();
      Complex complex5 = complex2.NaN.pow(981.547653);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex0.I.reciprocal();
      double double0 = complex2.ZERO.abs();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.pow(981.547653);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7249995199969751);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.negate();
      List<Complex> list0 = complex3.nthRoot(570);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex3.INF.pow(complex0);
      String string0 = complex5.INF.toString();
      Complex complex6 = complex5.NaN.negate();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex2.sqrt();
      boolean boolean1 = complex5.equals(complex0);
      Complex complex8 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      List<Complex> list0 = complex0.INF.nthRoot(769);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex2.asin();
      double double1 = complex0.abs();
      Complex complex6 = complex2.cos();
      double double2 = complex1.I.getArgument();
      Complex complex7 = complex1.multiply(2011);
      Complex complex8 = complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ZERO.multiply((-1025));
      boolean boolean0 = complex2.I.equals(complex1);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex0.createComplex(0.0, 6.283185307179586);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-2490.0), (-2490.0));
      Complex complex1 = Complex.valueOf((-1.3208450062862734E76), 794.3344835463681);
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.I.divide(Double.NaN);
      Complex complex4 = complex2.NaN.log();
      String string0 = complex2.INF.toString();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.add(0.0);
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex7.divide(complex5);
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex9.ZERO.sqrt1z();
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex0.multiply(1);
      Complex complex14 = complex13.ZERO.reciprocal();
      int int0 = complex1.hashCode();
      Complex complex15 = complex1.conjugate();
      Complex complex16 = complex1.pow(complex8);
      Complex complex17 = complex15.INF.pow(complex12);
      Complex complex18 = complex1.multiply((-2198));
      ComplexField complexField0 = complex15.getField();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(906.33909, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1.830335419852293E-147));
      Complex complex1 = complex0.ONE.multiply((-1.830335419852293E-147));
      Complex complex2 = Complex.valueOf((-1.830335419852293E-147), (-1.830335419852293E-147));
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.INF.subtract((-3274.59318361));
      Complex complex6 = complex4.ZERO.asin();
      Complex complex7 = complex4.tanh();
      List<Complex> list0 = complex7.NaN.nthRoot(7);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex5.multiply(complex3);
      int int0 = complex5.hashCode();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.createComplex(0.0, 2.0);
      Complex complex4 = complex0.NaN.createComplex((-2010.159025975), (-2010.159025975));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex5.pow((-2010.159025975));
      Complex complex9 = complex4.multiply(156);
      int int0 = complex3.hashCode();
      double double0 = complex3.abs();
      Complex complex10 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(210.018119, 210.018119);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf(210.018119);
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.INF.multiply(complex4);
      int int0 = complex0.hashCode();
      try { 
        complex6.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(442413.375, 442413.375);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.NaN.createComplex((-469.5089424612885), 0.0);
      Complex complex3 = complex1.ZERO.divide((-4.443798187035849E125));
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex3.ZERO.reciprocal();
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex1.subtract(complex4);
      Complex complex10 = complex2.createComplex(1053.5108, (-469.5089424612885));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.subtract(complex0);
      double double1 = complex4.NaN.abs();
      Complex complex5 = complex4.multiply(276);
      Complex complex6 = complex3.createComplex(1087.18, 4153.8192);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      boolean boolean0 = complex0.equals(")");
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.7106814809424793E-8, 962.56);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex2.add(4175.922653257965);
      Complex complex6 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1.638756156057952E79), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex1.multiply((-3103.1851080731));
      Complex complex6 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-244.0084681461951), (-244.0084681461951));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = Complex.valueOf((-244.0084681461951), (-976.8557));
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.I.negate();
      double double0 = complex0.getArgument();
      Complex complex7 = complex0.NaN.cosh();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex0.multiply(1901);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex2.multiply((-976.8557));
      Complex complex13 = complex0.sin();
      Complex complex14 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.divide(6.283185307179586);
      try { 
        complex0.nthRoot((-1396));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,396
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.ZERO.equals("DIMENSIONS_MISMATCH");
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.multiply(358);
      Complex complex3 = complex1.ZERO.multiply(2080);
      Object object0 = complex1.readResolve();
      String string0 = complex0.toString();
      Complex complex4 = complex1.sqrt();
      int int0 = complex4.I.hashCode();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex4.pow(complex0);
      int int1 = complex4.hashCode();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = complex7.ONE.sinh();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      double double0 = complex1.abs();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex4.divide(complex0);
      double double1 = complex4.getImaginary();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex7.I.createComplex(0.0, 0.0);
      Complex complex9 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex10.tanh();
      Complex complex12 = Complex.valueOf(Double.NaN);
      Complex complex13 = complex2.divide(complex12);
      Complex complex14 = complex6.conjugate();
      double double2 = complex0.getArgument();
      Complex complex15 = complex0.subtract(complex10);
      Complex complex16 = complex9.reciprocal();
      Complex complex17 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.subtract((-1.5140150088220166E-8));
      Complex complex4 = complex0.add(2122.8003);
      Complex complex5 = new Complex(2230.2, (-2492.24));
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex6.subtract(2087.471);
      double double0 = complex7.ZERO.getArgument();
      Complex complex8 = Complex.valueOf(0.0, (-1.5140150088220166E-8));
      Complex complex9 = complex7.NaN.pow(complex4);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex6.divide(complex10);
      boolean boolean0 = complex6.equals(complex11);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2569.160968148));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.NaN.createComplex((-2847.6436515), 1278.4966620212895);
      Complex complex4 = complex2.NaN.add(734.93);
      Complex complex5 = complex3.NaN.subtract((-2569.160968148));
      Complex complex6 = complex4.acos();
      Complex complex7 = complex0.INF.multiply(1278.4966620212895);
      Complex complex8 = complex1.subtract((-2847.6436515));
      Complex complex9 = complex7.INF.atan();
      double double0 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex10 = complex7.tanh();
      double double1 = complex10.NaN.abs();
      Complex complex11 = complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-2294.806325992));
      ComplexField complexField0 = complex0.NaN.getField();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex0.log();
      ComplexField complexField1 = complex2.getField();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex1 = complex0.ONE.pow((-1568.3));
      Complex complex2 = complex0.negate();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = new Complex((-1639.2013), (-1639.2013));
      Complex complex5 = complex0.I.subtract(complex4);
      Complex complex6 = Complex.valueOf(0.0, 1.4366366863250732);
      Object object0 = complex5.I.readResolve();
      Complex complex7 = complex5.ONE.multiply((-7.461209161105275E-9));
      Object object1 = complex2.I.readResolve();
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex6.I.pow(complex2);
      Complex complex10 = complex0.NaN.multiply(0.0);
      Complex complex11 = complex6.divide(1.4366366863250732);
      int int0 = complex11.I.hashCode();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex0.divide(complex1);
      Complex complex14 = complex13.NaN.acos();
      Complex complex15 = Complex.valueOf(2.0);
      Complex complex16 = complex4.reciprocal();
      Complex complex17 = complex12.sqrt();
      Complex complex18 = complex9.tanh();
      Complex complex19 = Complex.ZERO;
      Complex complex20 = complex2.add(complex19);
      Complex complex21 = complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1488);
      Complex complex2 = Complex.valueOf((double) 1488, 0.0);
      Complex complex3 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.subtract((-1816.344));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.NaN.subtract(3.669404761339415E-165);
      Complex complex5 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1349.17355267, 1349.17355267);
      Complex complex1 = complex0.ONE.multiply((-438));
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.INF.pow((double) (-438));
      Complex complex5 = complex2.createComplex(77.6571922, 1.3328680266667662E237);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-563.0), (-563.0));
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.acos();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex4 = complex1.ZERO.exp();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.exp();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.NaN.add(2.0);
      Complex complex3 = complex0.pow((-4836.2089453129));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = Complex.valueOf(2.0);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex5.equals(object0);
      Complex complex8 = complex1.tan();
      Complex complex9 = complex3.multiply(complex4);
      Complex complex10 = complex4.tan();
      Complex complex11 = complex10.divide(complex3);
      Complex complex12 = complex10.createComplex((-4836.2089453129), (-4836.2089453129));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      boolean boolean0 = complex0.equals("org.apache.commons.math3.complex.Complex");
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.acos();
      ComplexField complexField0 = complex2.I.getField();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex1.INF.cos();
      Object object0 = complex4.INF.readResolve();
      Object object1 = complex4.readResolve();
      Complex complex5 = complex3.I.reciprocal();
      Complex complex6 = complex0.add(complex1);
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.INF.add((-163.898555));
      int int0 = complex6.ZERO.hashCode();
      Complex complex9 = complex3.INF.divide(complex7);
      Complex complex10 = complex3.NaN.createComplex(0.0, 0.0);
      boolean boolean1 = complex10.NaN.equals(complex6);
      Complex complex11 = complex1.subtract(Double.POSITIVE_INFINITY);
      double double1 = complex1.getReal();
      Complex complex12 = complex3.log();
      String string0 = complex1.toString();
      Complex complex13 = complex0.exp();
      double double2 = complex5.getReal();
      Complex complex14 = complex1.cos();
      boolean boolean2 = complex5.isInfinite();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = Complex.I;
      boolean boolean3 = complex5.equals(complex16);
      Object object2 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex1.NaN.divide((-758.370791));
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex1.tanh();
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex1.ZERO.divide(complex0);
      double double0 = complex1.abs();
      Complex complex7 = complex4.createComplex(2.0, 1637.7387987356865);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex8.ONE.sin();
      double double1 = complex4.INF.abs();
      double double2 = complex2.abs();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex4.multiply(0.0);
      Complex complex14 = complex6.divide(complex7);
      Complex complex15 = complex14.pow(Double.NaN);
      Complex complex16 = Complex.valueOf(Double.NaN);
      Complex complex17 = complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf((-1178.611093158), 6.493134033643613E50);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = Complex.valueOf((-195.56), 0.0);
      double double0 = complex5.getArgument();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex5.isNaN();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1783.81, 1744.6213);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.divide(1744.6213);
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex0.ZERO.tan();
      int int0 = complex2.ZERO.hashCode();
      double double0 = complex0.abs();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex1.multiply((-1220));
      Complex complex8 = complex1.pow(0.0);
      Complex complex9 = complex6.NaN.divide(complex1);
      Complex complex10 = complex8.sin();
      String string0 = complex0.toString();
      Complex complex11 = complex10.I.divide(complex9);
      Complex complex12 = complex8.subtract(complex2);
      Complex complex13 = complex6.sinh();
      Complex complex14 = complex13.ONE.conjugate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex15 = complex14.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.add(428.69);
      Complex complex5 = complex4.ONE.tanh();
      double double0 = complex4.getImaginary();
      Complex complex6 = complex4.I.negate();
      Complex complex7 = Complex.valueOf(1.7077150344848633, 0.0);
      Complex complex8 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.I.sinh();
      double double1 = (-762.9645718494297);
      Complex complex2 = complex1.ZERO.subtract((-762.9645718494297));
      Complex complex3 = complex2.ONE.pow(3.1184473002226595E-10);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.tanh();
      double double2 = complex5.getImaginary();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex0.ONE.negate();
      Complex complex10 = complex8.multiply(Double.NaN);
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex7.atan();
      Complex complex12 = complex0.pow(complex4);
      Complex complex13 = complex5.negate();
      Complex complex14 = complex13.divide(2001.3542);
      Complex complex15 = complex1.cos();
      Complex complex16 = complex15.INF.conjugate();
      Complex complex17 = complex14.divide(complex12);
      Complex complex18 = complex17.I.tan();
      Complex complex19 = complex18.sqrt();
      Complex complex20 = complex14.ZERO.subtract(3.1184473002226595E-10);
      Complex complex21 = complex9.multiply(0);
      Complex complex22 = complex7.divide(complex11);
      Complex complex23 = complex14.subtract(complex9);
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex6.isInfinite();
      Complex complex24 = Complex.valueOf((double) 0);
      Complex complex25 = complex16.add(complex4);
      try { 
        complex23.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.add(1.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = Complex.valueOf(1.0);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex3 = Complex.valueOf((-307.320584138403));
      List<Complex> list0 = complex3.nthRoot(150);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex6.NaN.tan();
      double double0 = complex4.getArgument();
      Complex complex8 = complex0.asin();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.subtract(complex4);
      Complex complex11 = complex8.divide(complex9);
      double double1 = complex5.getReal();
      Complex complex12 = complex5.createComplex((-850.7), 1.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1533.0651078, 1533.0651078);
      Complex complex1 = complex0.INF.createComplex(1533.0651078, 0.0);
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.sqrt();
      Object object2 = complex1.INF.readResolve();
      Complex complex3 = complex0.add(complex1);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.ZERO.atan();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex3.ZERO.sqrt1z();
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex3.divide(1533.0651078);
      Complex complex8 = complex7.INF.multiply((-81));
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.ZERO.sin();
      Complex complex11 = complex9.multiply(complex4);
      Complex complex12 = complex3.tan();
      Complex complex13 = complex2.asin();
      boolean boolean1 = complex7.isInfinite();
      Complex complex14 = complex13.INF.pow(complex9);
      Complex complex15 = complex1.ONE.subtract(complex9);
      int int1 = complex15.hashCode();
      Complex complex16 = complex2.divide(complex13);
      Complex complex17 = complex7.pow(1533.0651078);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3698.4123), 5012.766889372426);
      List<Complex> list0 = complex1.NaN.nthRoot(997);
      Complex complex2 = Complex.valueOf(2.0, 0.0);
      boolean boolean0 = complex0.ONE.equals(complex1);
      Complex complex3 = complex0.sinh();
  }
}
