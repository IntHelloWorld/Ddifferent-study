/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:34:12 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.NaN.pow((-1579.2165848982577));
      Complex complex3 = complex1.I.divide(0.6471850872039795);
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex1.INF.exp();
      Complex complex6 = complex0.sin();
      double double0 = complex6.abs();
      Complex complex7 = Complex.valueOf(1.1752011936438014);
      Complex complex8 = complex0.conjugate();
      boolean boolean0 = complex8.INF.equals(complex6);
      double double1 = complex0.getReal();
      Complex complex9 = complex0.ONE.multiply(complex8);
      Complex complex10 = Complex.valueOf(2243.81671935917);
      Complex complex11 = complex10.subtract(0.0);
      Complex complex12 = complex1.log();
      Complex complex13 = complex9.reciprocal();
      Complex complex14 = complex12.pow(complex9);
      Complex complex15 = complex10.divide(complex0);
      Complex complex16 = complex1.asin();
      Complex complex17 = complex1.pow(1.0);
      Complex complex18 = complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.divide(Double.NaN);
      Complex complex3 = complex2.INF.divide(0.0);
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex2.NaN.add(1850.0031);
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.tanh();
      int int0 = complex0.hashCode();
      Complex complex9 = complex7.add(complex0);
      Complex complex10 = complex2.cos();
      double double0 = complex8.abs();
      Complex complex11 = complex7.exp();
      Complex complex12 = complex10.add(1850.0031);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-3255.0272518), (-2029.207080437));
      Object object0 = new Object();
      boolean boolean0 = complex0.I.equals(object0);
      Complex complex1 = Complex.valueOf((-2029.207080437));
      Complex complex2 = Complex.I;
      Object object1 = new Object();
      Complex complex3 = complex2.INF.sinh();
      boolean boolean1 = complex2.ZERO.equals(object1);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.tan();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex2.pow(complex3);
      Complex complex7 = Complex.valueOf(1.5442993640899658, (-3255.0272518));
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex4.tan();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.reciprocal();
      List<Complex> list0 = complex6.ZERO.nthRoot(17);
      Complex complex7 = complex5.ZERO.divide(5.8015881615938497E-8);
      Complex complex8 = complex2.sqrt();
      int int0 = complex5.ZERO.hashCode();
      Complex complex9 = complex8.I.divide(complex2);
      ComplexField complexField0 = complex9.ZERO.getField();
      List<Complex> list1 = complex8.nthRoot(494);
      Complex complex10 = complex0.ZERO.exp();
      Complex complex11 = complex10.I.add((double) 17);
      Complex complex12 = complex1.ZERO.divide(complex8);
      double double0 = complex6.getImaginary();
      ComplexField complexField1 = complex5.getField();
      Complex complex13 = complex9.negate();
      Complex complex14 = complex13.I.atan();
      Complex complex15 = complex0.cosh();
      Complex complex16 = complex8.createComplex(0.0, 1227.317683703);
      Complex complex17 = complex16.I.cos();
      int int1 = complex0.NaN.hashCode();
      double double1 = complex17.ONE.getArgument();
      Complex complex18 = complex17.NaN.multiply(0.0);
      Complex complex19 = complex2.exp();
      Complex complex20 = complex19.cos();
      double double2 = complex5.getImaginary();
      Complex complex21 = complex7.sqrt1z();
      Complex complex22 = complex17.add(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex3.INF.pow((-8.124251825289188E-11));
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.log();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex7.subtract((-8.124251825289188E-11));
      Complex complex10 = complex0.ZERO.createComplex(0.0, (-8.124251825289188E-11));
      Complex complex11 = complex10.INF.reciprocal();
      double double0 = complex8.getReal();
      int int0 = complex4.hashCode();
      Complex complex12 = complex0.divide(complex10);
      double double1 = complex0.ONE.abs();
      boolean boolean0 = complex7.equals((Object) null);
      List<Complex> list0 = complex7.nthRoot(2528);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Object object1 = complex0.ONE.readResolve();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      boolean boolean0 = complex0.equals(object0);
      Object object2 = complex0.readResolve();
      Complex complex1 = Complex.valueOf(504.3124449244, Double.NaN);
      Complex complex2 = complex1.INF.add(52.00356);
      Complex complex3 = complex2.acos();
      double double0 = complex2.getArgument();
      boolean boolean1 = complex0.equals(object2);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.NaN.sin();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ONE.subtract(complex4);
      double double1 = complex0.abs();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.multiply(52.00356);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex7.add(complex3);
      Complex complex12 = complex3.subtract(1.0368403169781264E257);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6038.3066), (-236.4960242567262));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.multiply(7);
      Complex complex4 = complex0.I.asin();
      String string0 = complex0.toString();
      Complex complex5 = complex0.NaN.exp();
      Complex complex6 = Complex.valueOf(0.0, 750.48);
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex1.divide(complex0);
      Complex complex10 = complex9.I.add(complex2);
      double double0 = complex2.getReal();
      Complex complex11 = complex7.ZERO.sin();
      Complex complex12 = complex8.ZERO.acos();
      Complex complex13 = complex9.sqrt1z();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex14 = complex1.cos();
      double double1 = complex8.getReal();
      Complex complex15 = complex13.createComplex((-1371.0753158), (-20.0));
      Complex complex16 = Complex.valueOf(1.5573703263204683E-94);
      Complex complex17 = complex15.divide(0.0);
      Complex complex18 = complex0.subtract(complex15);
      Complex complex19 = complex18.cosh();
      Complex complex20 = complex3.pow(0.0);
      Complex complex21 = complex5.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.createComplex((-546.321024886784), (-546.321024886784));
      Complex complex3 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.multiply((-2394));
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex1.createComplex(Double.POSITIVE_INFINITY, 3299.641255965);
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex5.NaN.pow((-546.321024886784));
      double double0 = complex7.I.abs();
      Complex complex8 = complex2.INF.sqrt1z();
      Complex complex9 = complex0.NaN.createComplex((-20.0), (-546.321024886784));
      Complex complex10 = complex9.I.sinh();
      Complex complex11 = complex10.I.add(complex8);
      boolean boolean0 = complex2.isInfinite();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex8.pow(complex2);
      Complex complex14 = complex11.divide(0.0);
      ComplexField complexField1 = complex6.getField();
      Complex complex15 = complex9.divide(4598.86);
      Complex complex16 = complex6.sqrt();
      Complex complex17 = complex16.sinh();
      double double1 = complex7.getImaginary();
      double double2 = complex17.getImaginary();
      Complex complex18 = complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.add(0.0);
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex2.equals(object1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.subtract((-521.0));
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex5.multiply(complex3);
      Complex complex9 = complex3.log();
      Complex complex10 = complex0.multiply(complex4);
      Complex complex11 = complex10.I.createComplex((-1514.2162), (-1514.2162));
      Complex complex12 = complex11.ONE.conjugate();
      Complex complex13 = complex9.pow(2280.482679501768);
      Complex complex14 = complex13.NaN.sin();
      Object object2 = complex0.readResolve();
      Complex complex15 = complex3.ZERO.acos();
      Complex complex16 = complex11.cosh();
      Complex complex17 = Complex.valueOf(0.0);
      Complex complex18 = complex9.sqrt1z();
      Complex complex19 = complex0.subtract(0.0);
      Complex complex20 = complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(460.0, (-165.8));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.exp();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(460.0, (-4108.6573449634));
      Complex complex5 = complex3.NaN.pow(460.0);
      Object object0 = complex3.readResolve();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = Complex.valueOf(0.0, 8.131762373533769E79);
      String string0 = complex3.INF.toString();
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex0.cosh();
      Object object0 = complex6.ONE.readResolve();
      Complex complex9 = complex6.NaN.sin();
      Complex complex10 = Complex.valueOf(0.0, 2616.506138192067);
      Complex complex11 = complex10.pow(complex3);
      Complex complex12 = Complex.valueOf(8.131762373533769E79);
      Complex complex13 = complex12.ZERO.tan();
      boolean boolean0 = complex7.equals(complex6);
      Complex complex14 = complex7.subtract(8.131762373533769E79);
      Complex complex15 = complex1.acos();
      Complex complex16 = complex15.ZERO.pow(complex12);
      Complex complex17 = complex14.atan();
      boolean boolean1 = complex14.equals("(Infinity, Infinity)");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1882454749452428E-7, 1.1882454749452428E-7);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.I.divide(complex0);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.ZERO.pow(complex3);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.ZERO.negate();
      Complex complex7 = complex5.ONE.multiply(0);
      boolean boolean0 = complex0.equals(object0);
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex9.multiply((double) 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2640);
      Complex complex2 = complex0.NaN.log();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex3.sqrt();
      boolean boolean0 = complex4.INF.equals(complex1);
      boolean boolean1 = complex0.isInfinite();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.29255300760269165, 0.29255300760269165);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = Complex.valueOf(2719.25614054964);
      boolean boolean0 = complex1.INF.equals(complex5);
      Complex complex6 = Complex.valueOf((-2762.14), (-656.0));
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.divide(complex2);
      Complex complex9 = Complex.valueOf(0.29255300760269165, 0.0);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.I.atan();
      int int0 = complex7.hashCode();
      Complex complex12 = complex8.divide(complex5);
      Complex complex13 = complex12.ZERO.sin();
      Complex complex14 = complex2.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(295.2, 295.2);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = new Complex(Double.NaN, Double.NaN);
      Complex complex5 = complex3.I.pow(complex4);
      Complex complex6 = new Complex(0.0, (-1141.333505118));
      Complex complex7 = complex5.ZERO.multiply(complex6);
      String string0 = complex0.toString();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex0.divide(295.2);
      Complex complex10 = new Complex(1903.2, (-297.216163));
      Complex complex11 = complex8.pow(complex10);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1579.65), (-1579.65));
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.abs();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.subtract((-1124.0628662725735));
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.multiply((-1522));
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex2.multiply((double) (-1522));
      String string1 = complex0.toString();
      Complex complex4 = complex0.multiply((-1522));
      ComplexField complexField1 = complex4.ONE.getField();
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex0.add((-4174.42214));
      Complex complex7 = complex6.NaN.pow(1532.9958469466262);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex3.multiply((-1522));
      Complex complex10 = complex7.tan();
      Complex complex11 = complex10.ONE.divide(complex5);
      Complex complex12 = complex2.createComplex(2233.96245380266, 0.0);
      double double1 = complex3.getImaginary();
      Complex complex13 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      int int0 = complex2.ONE.hashCode();
      int int1 = complex2.INF.hashCode();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = Complex.valueOf(3343.5372619, (-1.0));
      Complex complex6 = complex5.NaN.multiply(complex1);
      Object object0 = complex6.INF.readResolve();
      int int2 = complex0.NaN.hashCode();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex0.subtract(3343.5372619);
      Complex complex9 = complex8.I.pow(complex5);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex11.I.atan();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex13.ZERO.tanh();
      Complex complex16 = complex14.I.add(complex1);
      Complex complex17 = complex10.negate();
      Complex complex18 = complex0.ZERO.subtract(complex4);
      double double0 = complex10.ONE.abs();
      Complex complex19 = complex0.cosh();
      Complex complex20 = complex10.sin();
      Complex complex21 = complex14.conjugate();
      Complex complex22 = complex4.asin();
      double double1 = complex2.getReal();
      double double2 = complex11.getArgument();
      Complex complex23 = complex14.tan();
      Complex complex24 = complex7.add((-1.0));
      String string0 = complex20.toString();
      Complex complex25 = complex5.exp();
      Complex complex26 = complex25.cosh();
      Complex complex27 = complex16.reciprocal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.createComplex((-312.7956436056448), 1525.2);
      Complex complex2 = complex1.NaN.multiply(20.0);
      Complex complex3 = complex0.sqrt();
      String string0 = complex2.INF.toString();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex4.NaN.cosh();
      double double0 = complex2.INF.getArgument();
      Complex complex6 = complex4.NaN.acos();
      Complex complex7 = complex6.INF.pow((-312.7956436056448));
      Complex complex8 = Complex.valueOf(0.0, (-1.0));
      Complex complex9 = complex0.exp();
      Complex complex10 = complex8.INF.cosh();
      Complex complex11 = complex8.multiply(complex2);
      boolean boolean0 = complex11.isInfinite();
      Complex complex12 = complex9.INF.tan();
      String string1 = complex4.toString();
      Complex complex13 = complex9.INF.sin();
      Complex complex14 = complex9.multiply(0.0);
      Complex complex15 = complex14.subtract(complex8);
      List<Complex> list0 = complex4.nthRoot(2509);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-198.1149355));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf((-198.1149355), (-198.1149355));
      Complex complex5 = complex2.ONE.cosh();
      Complex complex6 = complex0.I.subtract(complex5);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.tan();
      double double0 = complex1.getArgument();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      List<Complex> list0 = complex0.INF.nthRoot(17);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex0.createComplex(784.6623603066537, 784.6623603066537);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.createComplex(Double.NaN, 784.6623603066537);
      boolean boolean0 = complex6.equals(")");
      Complex complex7 = complex1.pow(complex5);
      try { 
        complex6.nthRoot((-3115));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,115
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1342.6);
      Complex complex1 = complex0.ZERO.pow(1342.6);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.NaN.pow(1342.6);
      double double0 = complex0.NaN.abs();
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex2.NaN.negate();
      Complex complex7 = complex6.ONE.multiply(0);
      Complex complex8 = complex1.NaN.cosh();
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex8.INF.cos();
      Complex complex11 = complex3.ONE.sinh();
      Complex complex12 = complex2.add(1342.6);
      String string0 = complex1.toString();
      Object object0 = complex8.readResolve();
      Complex complex13 = complex3.tan();
      Complex complex14 = complex8.ZERO.createComplex(1.2773080633674971E271, (-2723.571968254629));
      boolean boolean0 = complex12.isInfinite();
      Complex complex15 = complex0.ZERO.multiply((-2606));
      Complex complex16 = complex12.tan();
      Complex complex17 = complex10.sin();
      Complex complex18 = complex8.pow(Double.POSITIVE_INFINITY);
      Complex complex19 = complex12.multiply((-7.490757191850264E-8));
      Complex complex20 = complex14.asin();
      Complex complex21 = complex13.sin();
      Complex complex22 = complex21.negate();
      Complex complex23 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(2006.18961242);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.INF.subtract((-885.0425321458385));
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.subtract(813.6618495027);
      Complex complex6 = complex5.ONE.pow(2006.18961242);
      int int0 = complex6.ZERO.hashCode();
      boolean boolean0 = complex5.equals(complex0);
      Complex complex7 = complex0.NaN.negate();
      double double0 = complex0.INF.abs();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.I.subtract(complex4);
      Complex complex10 = complex0.I.negate();
      Complex complex11 = complex0.multiply(complex1);
      Complex complex12 = complex5.acos();
      Complex complex13 = complex11.ONE.cos();
      Complex complex14 = complex0.add(complex1);
      Complex complex15 = complex11.reciprocal();
      Complex complex16 = complex15.I.divide((-401.3701647085));
      double double1 = complex10.getArgument();
      Complex complex17 = complex14.subtract(0.0);
      double double2 = complex16.getImaginary();
      Complex complex18 = complex16.negate();
      double double3 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 2774.228663;
      Complex complex0 = Complex.valueOf(2774.228663);
      Complex complex1 = complex0.NaN.negate();
      try { 
        complex1.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.subtract((-311.22));
      Complex complex2 = complex0.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.ZERO.acos();
      double double1 = complex0.getReal();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ONE.multiply(962);
      Complex complex3 = complex1.I.pow(1158.00761);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.sinh();
      Object object0 = new Object();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex5.equals(object0);
      ComplexField complexField1 = complex0.getField();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = complex7.I.multiply(complex5);
      Complex complex9 = complex6.ZERO.exp();
      Complex complex10 = complex6.atan();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.cosh();
      List<Complex> list0 = complex12.NaN.nthRoot(908);
      Complex complex13 = complex11.pow((-1883.740883861));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(6.283185307179586);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.NaN.multiply((-3253));
      double double0 = complex2.INF.abs();
      Complex complex4 = Complex.valueOf((double) (-3253), 0.3106105327606201);
      Complex complex5 = complex3.I.tan();
      double double1 = complex1.ZERO.abs();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex2.I.log();
      Complex complex7 = complex6.NaN.add(complex5);
      Complex complex8 = complex0.tan();
      Object object1 = complex8.I.readResolve();
      double double2 = complex0.getArgument();
      Complex complex9 = complex0.sin();
      Complex complex10 = new Complex(5.119220484478292E-11);
      Complex complex11 = complex9.INF.multiply(complex10);
      Complex complex12 = complex0.cosh();
      boolean boolean1 = complex2.isInfinite();
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex13.INF.conjugate();
      Complex complex15 = complex2.sqrt();
      ComplexField complexField0 = complex3.getField();
      Complex complex16 = complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(806.8515908117287, (-557.0));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.multiply(806.8515908117287);
      Complex complex3 = complex2.sinh();
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex5.ONE.tanh();
      int int0 = complex6.ZERO.hashCode();
      Object object0 = complex6.readResolve();
      List<Complex> list0 = complex1.nthRoot(177);
      Complex complex7 = complex1.tan();
      int int1 = complex7.NaN.hashCode();
      Complex complex8 = complex7.reciprocal();
      double double1 = complex8.getImaginary();
      Complex complex9 = complex0.acos();
      try { 
        complex1.nthRoot((-2836));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,836
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-20.0));
      Complex complex2 = complex1.negate();
      int int0 = complex1.I.hashCode();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.NaN.asin();
      Complex complex5 = complex4.I.conjugate();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex4.INF.asin();
      Complex complex7 = complex2.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex6.I.pow(complex8);
      Complex complex10 = complex1.sin();
      boolean boolean0 = complex10.equals(complex0);
      Complex complex11 = complex1.sin();
      Complex complex12 = complex6.sqrt1z();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex13 = complex7.atan();
      Complex complex14 = complex10.tanh();
      Complex complex15 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2787.7440971292613);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.createComplex(1143.32, 1143.32);
      Complex complex4 = complex0.divide(1.1551692104697154E-8);
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex4.reciprocal();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-806.4), 1651.0693657116367);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.ZERO.asin();
      int int0 = complex3.ZERO.hashCode();
      List<Complex> list0 = complex3.I.nthRoot(1);
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.multiply((-450));
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.NaN.divide(complex3);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex9.INF.multiply(Double.NaN);
      double double0 = complex5.abs();
      Complex complex11 = complex5.subtract(1651.0693657116367);
      double double1 = complex8.getArgument();
      Complex complex12 = complex8.log();
      Complex complex13 = complex0.multiply(826863.3379248736);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1739.22264, 1739.22264);
      int int0 = (-908);
      List<Complex> list0 = complex0.ZERO.nthRoot(836);
      Complex complex1 = complex0.multiply((-908));
      try { 
        complex1.INF.nthRoot((-908));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -908
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-3291.2781129299374));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex2.ZERO.reciprocal();
      String string0 = complex0.toString();
      Complex complex5 = complex2.add(complex0);
      Object object0 = new Object();
      boolean boolean0 = complex5.INF.equals(object0);
      Complex complex6 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(2.3621834216830225E93);
      Complex complex1 = complex0.ZERO.conjugate();
      double double0 = complex0.I.abs();
      Complex complex2 = complex0.createComplex(2.3621834216830225E93, 2.3621834216830225E93);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.I.pow(complex1);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex3.I.reciprocal();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex2.sin();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = Complex.valueOf(1.0, 1.0);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex2.add(2845.5856);
      Complex complex11 = complex10.multiply(complex9);
      boolean boolean1 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.divide(1711.4007000656413);
      double double1 = complex2.NaN.getArgument();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex5.multiply(Double.NaN);
      Complex complex8 = complex5.asin();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex6.tanh();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = Complex.valueOf(1.0, 1548.719);
      Complex complex5 = complex0.ZERO.divide((-1.1570594692045927E-9));
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex1.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex2.subtract(1095.153);
      Complex complex9 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.INF.nthRoot(1);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.INF.multiply((-3298));
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex0.I.negate();
      Object object0 = complex0.readResolve();
      Object object1 = complex4.readResolve();
      int int0 = complex1.hashCode();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.I.subtract(complex4);
      Complex complex7 = complex0.reciprocal();
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = Complex.I;
      boolean boolean1 = complex5.I.equals(complex8);
      Object object2 = complex1.readResolve();
      Complex complex9 = complex4.multiply(1211.09);
      Complex complex10 = complex6.pow(0.0);
      Complex complex11 = complex6.subtract(0.0);
      Complex complex12 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.INF.multiply(0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.I.exp();
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex4.multiply(complex1);
      Complex complex8 = complex4.subtract(5440.7);
      Complex complex9 = complex8.ONE.divide(5440.7);
      double double0 = complex8.abs();
      Complex complex10 = complex8.divide(5440.7);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1988.4132759));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.NaN.negate();
      double double0 = complex2.ZERO.getArgument();
      List<Complex> list0 = complex0.nthRoot(636);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf((-1018.749998), 963.8134791139);
      int int0 = complex3.I.hashCode();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1322.76125344);
      Complex complex1 = Complex.valueOf(1.523329496383667, 1.0);
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = Complex.valueOf(1322.76125344);
      Complex complex4 = complex0.ZERO.subtract(complex1);
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.multiply(24);
      Complex complex8 = complex5.createComplex(3151.690309294, 680.091016412407);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-616.99226), (-616.99226));
      Complex complex1 = complex0.subtract((-186.254));
      Complex complex2 = complex1.ONE.multiply((-2183.06763564));
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(611);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.log();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.ZERO.add(0.0);
      Complex complex3 = complex2.ONE.multiply((-3360));
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.divide((-881.34));
      double double0 = complex4.abs();
      Complex complex7 = complex0.add(complex5);
      double double1 = complex1.getReal();
      Complex complex8 = complex5.multiply((-3360));
      Complex complex9 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.ONE.add(complex9);
      Complex complex11 = complex2.createComplex((-3360), (-881.34));
      Complex complex12 = complex5.subtract(complex8);
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex8.isNaN();
      Complex complex13 = complex9.pow(298.5275);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.multiply(2.0);
      Complex complex3 = complex2.sinh();
      double double0 = 0.0;
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex3.equals(complex0);
      int int0 = (-2113);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.pow(complex8);
      try { 
        complex3.nthRoot((-2113));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,113
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.sqrt1z();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.multiply(240);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.INF.divide(complex3);
      Complex complex5 = complex2.NaN.createComplex((-1160.370245), (-1160.370245));
      Complex complex6 = complex0.add((double) 240);
      Complex complex7 = complex6.NaN.pow(complex5);
      Complex complex8 = complex7.multiply(complex6);
      double double0 = complex3.getArgument();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex4.acos();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex10.divide((double) 240);
      List<Complex> list0 = complex3.nthRoot(240);
      Object object1 = complex10.readResolve();
      boolean boolean0 = complex3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.ZERO.asin();
      Complex complex6 = complex5.INF.subtract(3088.8306376111823);
      double double0 = complex1.abs();
      Object object0 = complex1.readResolve();
      String string0 = complex4.toString();
      Complex complex7 = complex0.tan();
      double double1 = complex6.abs();
      Complex complex8 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-291.9312968));
      Complex complex1 = complex0.subtract((-291.9312968));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5325.5));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.INF.add((-1.0));
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex5.createComplex((-5325.5), (-5325.5));
      Complex complex7 = complex6.NaN.subtract(0.0);
      double double0 = complex6.getReal();
      Complex complex8 = complex3.createComplex(0.0, 0.0);
      Complex complex9 = complex8.multiply((-650));
      Complex complex10 = complex6.pow((-1726.2559418873));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.add(521.32211298);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-463.9));
      Complex complex1 = new Complex(0.0, 0.0);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.ONE.equals(complex0);
      boolean boolean1 = complex0.INF.equals(object0);
      Complex complex2 = complex1.INF.subtract((-452.6239502967567));
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(930.60316863914);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.pow(1.071796178817749);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6005.1782708));
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1947.1320014753371, 4.125337057189083E-84);
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.divide((-152.265437195));
      Complex complex2 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.347954541376715E-8, 3.347954541376715E-8);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.divide(3.347954541376715E-8);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(2406.237322, (-2293.9409608706587));
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.multiply(0.0);
      Complex complex5 = complex3.I.reciprocal();
      int int0 = complex5.hashCode();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(3776.38837197846);
      Complex complex2 = complex0.NaN.multiply(1455.04099);
      double double0 = complex0.abs();
      Complex complex3 = complex2.multiply(219);
      Complex complex4 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.NaN.subtract(1415.444391958);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.divide(0.0);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.add((-1382.4));
      Complex complex6 = complex0.ONE.atan();
      Complex complex7 = complex1.ONE.sqrt();
      Complex complex8 = complex2.INF.subtract(0.0);
      Complex complex9 = complex1.INF.pow((-630.7));
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex12.INF.sinh();
      Complex complex14 = complex5.ZERO.createComplex(1375.082401386882, Double.POSITIVE_INFINITY);
      Complex complex15 = complex5.exp();
      Complex complex16 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex17 = complex0.sqrt1z();
      boolean boolean0 = complex2.isNaN();
      Complex complex18 = complex1.reciprocal();
      Complex complex19 = complex1.sin();
      int int0 = complex18.hashCode();
      Complex complex20 = complex14.multiply(complex7);
      Complex complex21 = complex14.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex5.multiply(6);
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex0.pow(complex3);
      Complex complex9 = complex1.INF.sin();
      Complex complex10 = complex1.subtract(1.0);
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex11.ZERO.cosh();
      String string0 = complex3.toString();
      Complex complex13 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.divide(2606.2040218266);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.ZERO.sqrt();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex1.createComplex((-4379.443), 2606.2040218266);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex0.I.multiply(0.0);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex0.pow((-3263.0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.multiply((-807));
      Complex complex4 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.101130773265179E-192);
      Complex complex1 = complex0.I.subtract(508.5635567);
      Complex complex2 = complex0.pow((-1089.8295679));
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-1397.973433704817));
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      String string0 = complex0.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.multiply(1717.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-625.37), (-625.37));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.valueOf((-625.37), (-4037.91293400435));
      Object object0 = new Object();
      Complex complex3 = complex2.ZERO.add(complex0);
      boolean boolean0 = complex2.ONE.equals(object0);
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex2.I.sin();
      Complex complex6 = complex0.asin();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.ONE.multiply(complex1);
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.ZERO.asin();
      boolean boolean1 = complex1.isNaN();
      Complex complex11 = complex1.divide((-4037.91293400435));
      Complex complex12 = complex11.I.add(2.335970335559215E136);
      Object object1 = complex12.ONE.readResolve();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex2.createComplex(0.0, 2175.7356);
      boolean boolean2 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1137.38));
      Complex complex1 = complex0.multiply(0);
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-349.399529));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.add(2.4289282101002168E7);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1212.9));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.NaN.tan();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1142.932), (-1142.932));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.divide((-1142.932));
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sin();
      double double0 = complex0.I.getArgument();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.NaN.reciprocal();
      ComplexField complexField0 = complex2.getField();
      double double1 = complex2.getArgument();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.I.atan();
      double double2 = complex0.getReal();
      double double3 = complex6.ZERO.abs();
      double double4 = (-20.0);
      double double5 = (-2.6832941696716294E-8);
      Complex complex8 = complex7.INF.createComplex(1.5707963267948966, (-2.6832941696716294E-8));
      Complex complex9 = complex0.multiply((-20.0));
      Complex complex10 = complex0.multiply(complex7);
      int int1 = (-1969);
      Complex complex11 = complex6.NaN.subtract(complex2);
      try { 
        complex9.nthRoot((-1969));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,969
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-618.09229), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.cos();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = complex0.pow((-145.219));
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.ONE.multiply((-2863));
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex0.ZERO.add(complex1);
      Complex complex7 = complex6.NaN.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.add(complex3);
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex6.ONE.multiply(422);
      double double1 = complex1.getArgument();
      Complex complex9 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex10 = complex0.I.createComplex(0.0, 0.0);
      Complex complex11 = complex9.add((-4706.5548016594));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2152.49, 2152.49);
      Complex complex2 = complex0.tanh();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex2.subtract(complex0);
      ComplexField complexField0 = complex1.getField();
      Object object0 = new Object();
      boolean boolean1 = complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-3732.129736994098));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sqrt1z();
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.pow(complex1);
      double double0 = complex2.abs();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.createComplex(208.968787429, 0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.negate();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.multiply(847.550386);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = Complex.valueOf(1132.3, 0.08692999184131622);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-616.99226), (-616.99226));
      Complex complex1 = complex0.subtract((-186.254));
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      String string1 = complex1.INF.toString();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.divide(1589.62);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.I.add((-2.8477710945673134E65));
      Complex complex7 = complex6.ONE.createComplex((-1194.66639909262), (-1194.66639909262));
      Complex complex8 = complex7.asin();
      Complex complex9 = complex5.INF.multiply(0);
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = Complex.valueOf(6.283185307179586, 1589.62);
      double double0 = complex3.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      Complex complex12 = complex4.atan();
      Complex complex13 = complex12.INF.add(1442.233922531683);
      Complex complex14 = complex1.exp();
      Complex complex15 = complex14.I.atan();
      Object object1 = complex3.readResolve();
      Complex complex16 = complex13.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1071.61391777));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex3.asin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex5 = complex3.ZERO.atan();
      Complex complex6 = Complex.valueOf(0.0, (-1071.61391777));
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.NaN.multiply(6.283185307179586);
      double double0 = complex7.I.abs();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex1.I.cosh();
      Complex complex10 = complex0.exp();
      int int0 = complex3.hashCode();
      Complex complex11 = complex2.NaN.divide(complex1);
      Complex complex12 = complex10.multiply(complex0);
      Complex complex13 = complex2.INF.sin();
      Complex complex14 = Complex.valueOf((-3841.48493874562));
      boolean boolean1 = complex2.isNaN();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex15.ZERO.exp();
      Complex complex17 = complex6.tanh();
      Complex complex18 = complex17.ONE.divide(1.0160071259930585E-7);
      String string0 = complex3.toString();
      Complex complex19 = complex16.add(6.283185307179586);
      Complex complex20 = complex9.sinh();
      Complex complex21 = complex4.add(complex16);
      Complex complex22 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      int int0 = complex0.NaN.hashCode();
      int int1 = complex0.hashCode();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.multiply(0.0);
      ComplexField complexField1 = complex3.INF.getField();
      Complex complex4 = complex2.pow((-1.2513218445781325E-8));
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex1.I.divide(complex3);
      Complex complex7 = complex5.ZERO.subtract(complex4);
      Complex complex8 = complex7.ONE.add(complex2);
      Complex complex9 = complex5.ONE.subtract(1.6692346202615142E266);
      Object object0 = complex9.ONE.readResolve();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex0.multiply(0.0);
      Complex complex12 = complex11.I.multiply((-1.2513218445781325E-8));
      double double0 = complex11.abs();
      Complex complex13 = complex11.log();
      Complex complex14 = complex13.I.cosh();
      Complex complex15 = complex14.INF.exp();
      Complex complex16 = complex10.negate();
      double double1 = complex5.getImaginary();
      boolean boolean0 = complex3.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1587600174449919E-8), (-1.1587600174449919E-8));
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex0.pow((double) 0);
      Complex complex3 = complex2.multiply(1792.681452312668);
      Complex complex4 = complex3.I.createComplex(0.0, 0.0);
      Complex complex5 = complex1.I.log();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex0.negate();
      double double0 = complex2.getImaginary();
      Complex complex7 = complex6.add(complex0);
      Complex complex8 = complex6.ZERO.pow(0.0);
      Complex complex9 = complex7.ZERO.asin();
      Complex complex10 = complex9.NaN.subtract(1792.681452312668);
      Complex complex11 = complex8.ZERO.cosh();
      Complex complex12 = complex7.ONE.sinh();
      Complex complex13 = complex7.INF.log();
      Complex complex14 = (Complex)complex13.I.readResolve();
      Complex complex15 = complex1.sqrt1z();
      boolean boolean0 = complex7.isInfinite();
      List<Complex> list0 = complex15.nthRoot(224);
      double double1 = complex4.abs();
      Complex complex16 = complex0.cosh();
      Complex complex17 = Complex.valueOf((-694.0));
      Complex complex18 = complex15.sin();
      Complex complex19 = complex3.add(complex14);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.valueOf(1554.9893780238, 1554.9893780238);
      Complex complex3 = complex0.divide(1.5640296936035156);
      Complex complex4 = complex0.ZERO.cosh();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.INF.createComplex(1554.9893780238, 1.5640296936035156);
      String string0 = complex3.toString();
      Complex complex9 = complex6.add(complex8);
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex9.NaN.multiply(complex0);
      double double0 = complex9.abs();
      Complex complex12 = complex5.reciprocal();
      Complex complex13 = complex12.NaN.sinh();
      Complex complex14 = complex13.INF.tan();
      Complex complex15 = complex13.ONE.subtract(1557.708445040754);
      boolean boolean0 = complex5.equals(complex2);
      Complex complex16 = complex15.pow(1554.9893780238);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex2.INF.exp();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.ONE.divide(complex4);
      int int0 = complex0.I.hashCode();
      Complex complex9 = complex0.INF.pow(complex6);
      Object object0 = complex6.NaN.readResolve();
      double double0 = complex0.getArgument();
      Complex complex10 = complex0.sin();
      double double1 = complex5.abs();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.NaN.pow(complex1);
      Object object1 = complex4.readResolve();
      Complex complex13 = complex2.reciprocal();
      Complex complex14 = complex6.INF.cos();
      Complex complex15 = complex14.I.asin();
      Complex complex16 = complex4.cosh();
      Complex complex17 = complex16.ONE.divide((-1505.323));
      int int1 = complex0.hashCode();
      Complex complex18 = complex5.tan();
      Complex complex19 = complex18.subtract(0.0);
      Object object2 = complex9.readResolve();
      Complex complex20 = complex0.multiply(complex5);
      Complex complex21 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-410.16898));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cosh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex0.add((-410.16898));
      Complex complex5 = complex4.ONE.createComplex(0, 0);
      Complex complex6 = complex4.INF.subtract(complex1);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ONE.multiply(complex1);
      int int1 = complex2.hashCode();
      boolean boolean0 = complex4.isInfinite();
      Object object1 = complex0.readResolve();
      Complex complex9 = complex0.divide((-473.81));
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex6.multiply(complex0);
      Complex complex12 = complex11.NaN.sinh();
      Complex complex13 = complex11.INF.subtract(complex0);
      Complex complex14 = complex1.log();
      Complex complex15 = complex14.divide(complex10);
      ComplexField complexField0 = complex15.getField();
      Complex complex16 = complex9.reciprocal();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.0521614818695524E99);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.conjugate();
      double double0 = complex1.getArgument();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex4.subtract((-529.0));
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-1522.7), (-1522.7));
      Complex complex1 = complex0.INF.atan();
      List<Complex> list0 = complex0.ZERO.nthRoot(7);
      Complex complex2 = complex0.ZERO.tanh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex1.ZERO.subtract((-5541.96219960749));
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.NaN.add(complex5);
      Complex complex7 = complex6.ZERO.atan();
      boolean boolean0 = complex5.equals(complex1);
      Complex complex8 = complex5.ONE.conjugate();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex0.multiply(complex5);
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex0.createComplex(0.0, 1173.46969);
      ComplexField complexField1 = complex12.INF.getField();
      Complex complex13 = complex12.tan();
      int int0 = complex10.INF.hashCode();
      Complex complex14 = complex0.log();
      Complex complex15 = complex14.ONE.acos();
      ComplexField complexField2 = complex15.ZERO.getField();
      Complex complex16 = complex3.multiply(complex10);
      Complex complex17 = Complex.valueOf((-789.9158217), 0.0);
      boolean boolean1 = complex16.isInfinite();
      Complex complex18 = complex4.sin();
      Complex complex19 = complex18.INF.sin();
      Complex complex20 = complex14.sin();
      Object object0 = new Object();
      boolean boolean2 = complex15.equals(object0);
      Complex complex21 = complex5.conjugate();
      Complex complex22 = complex14.log();
  }
}
