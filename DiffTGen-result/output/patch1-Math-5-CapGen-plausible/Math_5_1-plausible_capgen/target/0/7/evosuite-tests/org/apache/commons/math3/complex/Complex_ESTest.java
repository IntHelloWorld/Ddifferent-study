/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:34:13 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1619.8979);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex0.sin();
      Complex complex6 = Complex.valueOf((-1386.993196366), 424.96118);
      Object object0 = complex5.readResolve();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex9.NaN.pow(0.0);
      double double0 = complex10.getArgument();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex1.divide(complex6);
      Complex complex14 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1565.0));
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.I.tanh();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex4.NaN.multiply((-2694));
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex1.INF.acos();
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex9.NaN.pow(complex2);
      double double1 = complex10.I.abs();
      Complex complex11 = complex2.add(complex3);
      boolean boolean1 = complex11.isNaN();
      Complex complex12 = complex11.NaN.atan();
      Object object1 = complex3.ZERO.readResolve();
      String string0 = complex11.I.toString();
      Complex complex13 = complex3.NaN.sqrt();
      Complex complex14 = complex11.multiply(1);
      Complex complex15 = complex13.INF.reciprocal();
      Object object2 = complex11.ONE.readResolve();
      Complex complex16 = complex13.add((-91.7646698711745));
      Complex complex17 = Complex.valueOf(0.0);
      Complex complex18 = complex2.add(complex9);
      Complex complex19 = complex11.log();
      String string1 = complex17.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.NaN.pow(1241.9282);
      String string0 = complex3.I.toString();
      Complex complex4 = complex0.ZERO.reciprocal();
      ComplexField complexField0 = complex4.I.getField();
      double double0 = complex1.I.abs();
      ComplexField complexField1 = complex0.getField();
      double double1 = complex4.getArgument();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex2.pow(2.0500353979930155E-8);
      Complex complex8 = complex1.I.divide(Double.NaN);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex6.atan();
      ComplexField complexField2 = complex10.I.getField();
      Complex complex11 = complex6.cos();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex1.negate();
      Complex complex14 = complex13.ONE.cos();
      Complex complex15 = complex12.I.subtract(complex5);
      Complex complex16 = complex12.divide(complex3);
      int int0 = complex16.ONE.hashCode();
      Complex complex17 = complex1.multiply(2.0500353979930155E-8);
      List<Complex> list0 = complex0.nthRoot(412);
      Complex complex18 = Complex.valueOf(2.0500353979930155E-8);
      double double2 = complex4.getArgument();
      Complex complex19 = complex13.divide(complex10);
      boolean boolean0 = complex3.isNaN();
      Complex complex20 = complex10.I.tanh();
      List<Complex> list1 = complex7.nthRoot(258);
      String string1 = complex13.toString();
      boolean boolean1 = complex16.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(9.602293320384794E-8, (-1148.0));
      Complex complex2 = complex0.ZERO.divide(complex1);
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex2.ONE.reciprocal();
      double double0 = complex2.NaN.abs();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.divide((-1148.0));
      Complex complex7 = complex6.ZERO.add((-1148.0));
      Complex complex8 = complex2.atan();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex8.NaN.readResolve();
      ComplexField complexField1 = complex8.ONE.getField();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex11.ONE.divide(complex2);
      Complex complex13 = complex9.negate();
      Complex complex14 = complex5.pow(4552.23856538);
      Complex complex15 = complex3.cos();
      Complex complex16 = complex8.sqrt1z();
      Complex complex17 = complex9.cos();
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = complex2.pow(complex0);
      Complex complex20 = complex1.sin();
      Complex complex21 = complex14.multiply(1);
      double double1 = complex21.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.divide((-5305.693));
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex3.ONE.tanh();
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      String string1 = complex0.ONE.toString();
      Complex complex5 = complex1.I.exp();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex2.ONE.sqrt1z();
      double double0 = complex0.abs();
      Complex complex8 = Complex.valueOf((-3299.4242442), 0.4481603503227234);
      Complex complex9 = complex2.tan();
      String string2 = complex1.ONE.toString();
      Complex complex10 = complex9.I.multiply(Double.NaN);
      Complex complex11 = Complex.valueOf((-404.0082200981), (-5305.693));
      int int0 = complex2.INF.hashCode();
      Complex complex12 = complex1.multiply(1413.94);
      Complex complex13 = complex2.sqrt();
      Complex complex14 = complex13.NaN.multiply((-2294));
      ComplexField complexField0 = complex13.ZERO.getField();
      boolean boolean1 = complex12.equals(complex13);
      Complex complex15 = complex12.multiply(0.21135559678077698);
      Complex complex16 = complex4.negate();
      Complex complex17 = complex4.tan();
      Complex complex18 = complex15.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.ZERO.exp();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = Complex.I;
      boolean boolean0 = complex0.I.equals(complex3);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.createComplex(0.0, 2171.7518119474116);
      Complex complex6 = complex4.INF.multiply(complex1);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2106.2611122);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.multiply((-3012.97489389391));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.cos();
      int int1 = complex4.I.hashCode();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex0.add(Double.NaN);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex7.divide(complex1);
      boolean boolean0 = complex7.isInfinite();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex0.createComplex(2106.2611122, 0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.add((-304.1953));
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = Complex.valueOf((-7.222791579580787E-8), 1416.6938);
      Complex complex6 = complex3.ZERO.sqrt1z();
      Complex complex7 = complex4.NaN.tan();
      double double0 = complex3.I.getArgument();
      int int0 = complex0.INF.hashCode();
      Complex complex8 = complex1.INF.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = complex9.log();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.NaN.subtract(52.69219165229);
      Complex complex13 = complex9.add(1.4201378353978042E-97);
      Complex complex14 = complex13.INF.createComplex(1.5707963267948966, 3826.4);
      Complex complex15 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2061.45561395));
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex0.ZERO.log();
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.NaN.sinh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex1.INF.acos();
      Complex complex11 = complex6.subtract(complex7);
      Complex complex12 = complex5.divide((-2061.45561395));
      Complex complex13 = complex0.multiply(0.0);
      double double1 = complex10.I.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex14 = complex12.add((double) 1);
      Complex complex15 = complex3.I.log();
      double double2 = complex0.getImaginary();
      Complex complex16 = complex3.subtract(0.0);
      Complex complex17 = complex5.divide((-2061.45561395));
      Complex complex18 = complex7.asin();
      double double3 = complex10.getImaginary();
      Complex complex19 = complex5.multiply(0.0);
      boolean boolean1 = complex6.isInfinite();
      Complex complex20 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.NaN.tanh();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex4 = complex1.add(1.8396930096213817E290);
      Complex complex5 = complex0.NaN.cosh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = Complex.valueOf(0.0, (-1279.9452));
      Complex complex9 = complex8.sqrt();
      Complex complex10 = Complex.valueOf((-1279.9452), 1.8396930096213817E290);
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex11.ONE.pow(1.8396930096213817E290);
      List<Complex> list0 = complex8.nthRoot(631);
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = complex0.exp();
      Complex complex15 = complex3.subtract(0.0);
      Complex complex16 = complex2.add((-3244.2219839815943));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 683.57396859643);
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.multiply((-136.3));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.sin();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex0.I.log();
      Complex complex7 = complex5.negate();
      int int0 = complex6.hashCode();
      Complex complex8 = complex3.ZERO.divide(complex2);
      Complex complex9 = complex5.I.subtract(1421.777908892344);
      Complex complex10 = complex5.INF.tanh();
      Complex complex11 = complex10.ONE.subtract(complex0);
      Complex complex12 = complex3.divide(complex5);
      Complex complex13 = complex10.divide(complex0);
      Complex complex14 = complex4.subtract(complex5);
      double double0 = complex9.getArgument();
      Complex complex15 = Complex.valueOf(0.0, 683.57396859643);
      Complex complex16 = complex4.acos();
      Complex complex17 = Complex.valueOf(0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(994.0474287, 3082.902);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.I.add((-4.1975650319859075E-8));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex0.INF.divide(3082.902);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.INF.multiply((-2527.17561634513));
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex3.multiply((-750.2955432));
      Complex complex10 = complex9.ONE.sqrt();
      double double0 = complex7.NaN.abs();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex5.divide(complex3);
      boolean boolean1 = complex7.isNaN();
      Complex complex13 = complex4.tan();
      Complex complex14 = complex13.ONE.multiply(complex0);
      double double1 = complex8.getArgument();
      double double2 = complex13.getArgument();
      Complex complex15 = complex7.divide((-4.1975650319859075E-8));
      String string0 = complex8.toString();
      Object object0 = complex8.readResolve();
      Complex complex16 = complex14.add(complex15);
      Complex complex17 = complex11.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.multiply(62.96);
      Complex complex2 = complex1.ONE.divide(complex0);
      ComplexField complexField1 = complex1.getField();
      Complex complex3 = complex0.createComplex(1.0, 410.2317878425);
      Complex complex4 = complex3.multiply((-3.982538093450217E86));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.createComplex(236.045529200433, (-4503.5545));
      Complex complex4 = complex0.cosh();
      int int0 = complex0.hashCode();
      Complex complex5 = complex4.multiply((-847));
      Complex complex6 = complex5.ONE.divide((-1.0));
      Complex complex7 = complex1.I.multiply(2169);
      Complex complex8 = complex5.cosh();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.I.multiply(complex8);
      Complex complex11 = complex6.ZERO.exp();
      double double0 = complex0.abs();
      double double1 = complex2.getReal();
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex11.multiply((-3855));
      Complex complex14 = complex10.reciprocal();
      Complex complex15 = complex9.sinh();
      double double2 = complex6.getArgument();
      double double3 = complex3.getImaginary();
      Complex complex16 = complex0.acos();
      Complex complex17 = complex0.tan();
      Complex complex18 = complex10.pow(0.0);
      ComplexField complexField0 = complex10.getField();
      Complex complex19 = complex17.log();
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-382.608624), 0.0);
      Complex complex1 = complex0.reciprocal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.I.sinh();
      boolean boolean1 = complex1.isInfinite();
      boolean boolean2 = complex1.isNaN();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-2846.0), (-2846.0));
      Complex complex1 = Complex.valueOf((-2846.0), (-672.12140042805));
      Complex complex2 = complex0.divide(complex1);
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex2.INF.createComplex((-820.9427818883094), (-672.12140042805));
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex1.subtract(17.633);
      List<Complex> list0 = complex1.nthRoot(9);
      Complex complex6 = complex1.add((double) 9);
      Complex complex7 = complex2.acos();
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex8 = complex0.multiply((-672.12140042805));
      Complex complex9 = complex8.subtract(581.20891861968);
      Complex complex10 = complex2.cos();
      Complex complex11 = complex6.tan();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.exp();
      boolean boolean0 = complex3.equals(complex1);
      Complex complex4 = complex3.INF.subtract((-1867.764));
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex0.exp();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.INF.add(complex7);
      Complex complex9 = complex1.sin();
      boolean boolean1 = complex4.equals("ELITISM_RATE");
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex2.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8127576600610336E-8, 1.8127576600610336E-8);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.NaN.divide(1.8127576600610336E-8);
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex2.NaN.atan();
      Complex complex12 = complex2.NaN.add(0.0);
      Complex complex13 = complex9.I.multiply((-2725));
      Complex complex14 = complex7.sqrt1z();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object0);
      double double0 = complex9.getImaginary();
      Complex complex15 = Complex.valueOf((double) (-2725));
      Complex complex16 = complex2.sin();
      double double1 = complex1.getArgument();
      Complex complex17 = complex12.ZERO.exp();
      Complex complex18 = complex13.add(3827.7);
      Complex complex19 = complex7.add(complex10);
      try { 
        complex12.nthRoot((-2725));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,725
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(1436);
      double double0 = complex0.ZERO.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.multiply((-2344.693654654851));
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.asin();
      boolean boolean1 = complex2.isNaN();
      Complex complex7 = complex0.subtract(complex3);
      double double1 = complex7.getArgument();
      Complex complex8 = complex3.divide((double) 1436);
      Complex complex9 = complex4.subtract(complex2);
      Complex complex10 = complex6.divide((-2344.693654654851));
      double double2 = complex8.abs();
      Object object0 = complex9.readResolve();
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex8.createComplex(1436, 1436);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      String string0 = complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.subtract(complex1);
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.I.divide(complex3);
      Complex complex6 = complex4.I.subtract(complex1);
      Complex complex7 = complex6.ONE.sin();
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Object object0 = complex3.ZERO.readResolve();
      Object object1 = complex3.I.readResolve();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.ZERO.add(0.0);
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex0.ZERO.divide(0.0);
      Complex complex9 = complex7.divide(complex2);
      Complex complex10 = new Complex(Double.NaN, (-1800.844958049507));
      Complex complex11 = complex7.ONE.sqrt1z();
      Complex complex12 = complex9.INF.divide(complex10);
      Complex complex13 = complex12.I.exp();
      Complex complex14 = complex7.I.divide(0.0);
      Complex complex15 = complex7.I.acos();
      Complex complex16 = complex12.INF.multiply(17);
      Complex complex17 = Complex.valueOf(0.0, Double.NaN);
      boolean boolean1 = complex1.equals(complex7);
      Complex complex18 = complex0.INF.conjugate();
      Complex complex19 = complex18.INF.multiply((-1882.2));
      ComplexField complexField0 = complex0.getField();
      Complex complex20 = complex2.tan();
      Complex complex21 = complex0.asin();
      Complex complex22 = complex6.sin();
      Complex complex23 = complex0.reciprocal();
      Complex complex24 = complex2.acos();
      Complex complex25 = complex18.pow(0.0);
      ComplexField complexField1 = complex25.getField();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1141.83215564), 4121.82422879);
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 603.4493589;
      Complex complex0 = Complex.valueOf(603.4493589);
      String string0 = complex0.toString();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.multiply(998);
      String string0 = complex1.toString();
      Complex complex3 = complex2.ZERO.subtract(Double.NaN);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.NaN.subtract(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      double double0 = complex1.getReal();
      double double1 = complex0.getReal();
      Complex complex7 = complex0.subtract(0.0);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add(258.12746134432047);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex1.NaN.multiply(723.8120742);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex4.ZERO.exp();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex7 = complex6.multiply(258.12746134432047);
      Complex complex8 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(9.253781621373885E29, 1864.2906);
      Complex complex1 = complex0.INF.reciprocal();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.createComplex(9.253781621373885E29, 1864.2906);
      Complex complex6 = Complex.valueOf(9.253781621373885E29);
      Complex complex7 = Complex.valueOf(585.00457005);
      Complex complex8 = complex7.INF.acos();
      double double0 = complex0.getReal();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.ZERO.sin();
      Complex complex15 = complex13.ONE.multiply((-1200));
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex6.isInfinite();
      Complex complex16 = complex11.sqrt();
      Complex complex17 = Complex.valueOf((-941.35983288256), (-941.35983288256));
      Complex complex18 = Complex.valueOf(65.1483357711, 0.0);
      Complex complex19 = complex18.negate();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(4105.4293157, 4105.4293157);
      Object object0 = complex0.readResolve();
      Object object1 = complex2.readResolve();
      Complex complex3 = complex2.ONE.exp();
      Object object2 = new Object();
      boolean boolean0 = complex0.equals(object2);
      boolean boolean1 = complex3.equals((Object) null);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex2.ZERO.sqrt1z();
      Complex complex8 = complex7.INF.pow(complex0);
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex0.NaN.divide(4105.4293157);
      Complex complex11 = complex3.multiply(4105.4293157);
      Object object3 = complex4.readResolve();
      Complex complex12 = complex3.multiply(complex4);
      Complex complex13 = complex0.exp();
      Complex complex14 = complex2.asin();
      Complex complex15 = complex1.cosh();
      ComplexField complexField0 = complex2.getField();
      Complex complex16 = complex14.conjugate();
      Complex complex17 = complex0.ONE.pow(4105.4293157);
      Complex complex18 = complex13.sinh();
      boolean boolean2 = complex2.isNaN();
      Complex complex19 = complex18.sinh();
      Complex complex20 = complex0.conjugate();
      ComplexField complexField1 = complex11.getField();
      Complex complex21 = complex2.reciprocal();
      Complex complex22 = complex13.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1946.7922519);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.INF.log();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.valueOf(87.0, 1946.7922519);
      Complex complex6 = complex3.NaN.asin();
      Complex complex7 = complex3.INF.negate();
      Object object0 = complex7.ZERO.readResolve();
      List<Complex> list0 = complex2.ONE.nthRoot(37);
      Complex complex8 = complex7.ZERO.log();
      double double0 = complex2.abs();
      Complex complex9 = complex1.pow(complex3);
      boolean boolean0 = complex4.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2735.73));
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ZERO.sinh();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-9.340259278913173E-8));
      Complex complex2 = complex0.ONE.pow((-9.340259278913173E-8));
      Complex complex3 = complex0.pow((-9.340259278913173E-8));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.I.exp();
      double double0 = complex4.INF.getArgument();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex2.multiply(complex3);
      Complex complex8 = complex7.NaN.multiply((-1306));
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex2.sinh();
      boolean boolean0 = complex3.equals("P*(aPn~");
      Complex complex10 = complex0.multiply(complex3);
      Complex complex11 = complex10.log();
      Complex complex12 = complex10.subtract(complex2);
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1.7430980205535889);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1.2384658100355657E72, (-644.51));
      Complex complex1 = complex0.add((-2211.357628));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex1.ZERO.hashCode();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.NaN.subtract(0.0);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex2.ZERO.tan();
      Object object0 = complex6.INF.readResolve();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.pow(Double.NaN);
      Complex complex9 = complex7.INF.cos();
      double double0 = complex9.NaN.getArgument();
      Complex complex10 = complex8.NaN.cos();
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex8.INF.negate();
      Complex complex13 = complex7.sin();
      Complex complex14 = Complex.valueOf(Double.NaN);
      Complex complex15 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex16 = complex13.multiply(775.5);
      Complex complex17 = complex13.multiply(complex11);
      Complex complex18 = complex17.I.reciprocal();
      Complex complex19 = complex17.subtract(Double.NaN);
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex11.createComplex(3689.0, Double.NaN);
      Complex complex22 = complex12.log();
      Complex complex23 = complex0.pow(775.5);
      Complex complex24 = complex2.sinh();
      Complex complex25 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.920972420778763E47);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.conjugate();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex2.divide(0.0);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = Complex.valueOf(5.920972420778763E47, Double.NaN);
      String string0 = complex3.toString();
      Complex complex7 = complex6.ONE.subtract(complex5);
      Complex complex8 = complex6.multiply(861);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.46914875507354736);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex0.pow(0.0);
      String string0 = complex3.toString();
      Complex complex7 = complex6.multiply(0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0454950851007314E110);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.ONE.pow(complex1);
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.add((-7.595453077213505E-8));
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = new Complex(5.016820182185716E-121, 2.0454950851007314E110);
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex7 = complex4.createComplex((-7.595453077213505E-8), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(658);
      Complex complex2 = complex1.ONE.cos();
      Object object0 = new Object();
      Complex complex3 = complex1.INF.divide((double) 658);
      Complex complex4 = complex0.INF.atan();
      boolean boolean0 = complex0.equals(object0);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(121.73847535);
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex0.I.getField();
      ComplexField complexField1 = complex0.INF.getField();
      double double0 = complex1.getArgument();
      ComplexField complexField2 = complex1.getField();
      Complex complex2 = complex0.subtract(121.73847535);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-694.388274), (-694.388274));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.ONE.tanh();
      Complex complex6 = complex4.ONE.cos();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex7.ONE.createComplex((-694.388274), (-694.388274));
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex0.subtract(complex4);
      Complex complex11 = complex10.INF.add(complex0);
      Complex complex12 = complex10.I.createComplex((-694.388274), (-694.388274));
      double double0 = complex2.getReal();
      Complex complex13 = complex2.divide((-20.0));
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex9.subtract(complex0);
      Complex complex16 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1165.970296);
      Complex complex1 = complex0.I.subtract(4473.410601823);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = new Complex(4473.410601823);
      Complex complex5 = complex0.ZERO.add(complex4);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.ZERO.subtract(complex4);
      String string0 = complex1.INF.toString();
      Complex complex8 = new Complex(0.0, 0.0);
      Complex complex9 = complex6.INF.add(complex8);
      int int0 = complex0.hashCode();
      double double0 = complex4.getReal();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex7.multiply((-1));
      boolean boolean0 = complex1.isInfinite();
      Object object0 = complex6.readResolve();
      Complex complex13 = complex10.tan();
      Complex complex14 = complex12.tanh();
      double double1 = complex0.getImaginary();
      double double2 = complex13.getReal();
      Complex complex15 = complex13.add(complex5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(0.0, 4.817491674217065E-144);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.createComplex((-3389.04), 617.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = null;
      try { 
        complex1.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-1492);
      try { 
        complex0.nthRoot((-1492));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,492
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1410.0884180336682, 1410.0884180336682);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.ONE.log();
      double double0 = complex0.abs();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex1.NaN.multiply(944);
      Complex complex5 = complex4.ONE.sin();
      double double1 = complex1.getReal();
      Complex complex6 = Complex.valueOf(1994.166164928436);
      double double2 = complex2.getImaginary();
      double double3 = complex2.getReal();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex8.ONE.tanh();
      double double4 = complex2.abs();
      Complex complex11 = complex7.divide(1.32472428796441E-9);
      double double5 = complex11.I.abs();
      Complex complex12 = complex11.I.exp();
      Complex complex13 = Complex.valueOf(1319.575);
      Complex complex14 = complex4.subtract(complex0);
      List<Complex> list0 = complex11.nthRoot(944);
      Complex complex15 = complex14.negate();
      double double6 = complex4.getReal();
      int int0 = complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1339.293993), (-1565.92037049035));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.divide(4034.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.ZERO.cosh();
      double double1 = complex2.NaN.abs();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex1.NaN.add(complex0);
      Complex complex6 = complex2.I.cosh();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex6.INF.divide(1901.3062417450399);
      Complex complex10 = complex8.ZERO.subtract(complex1);
      Complex complex11 = complex10.sin();
      double double2 = complex0.abs();
      List<Complex> list0 = complex3.INF.nthRoot(1265);
      Complex complex12 = complex1.conjugate();
      int int0 = complex11.hashCode();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex8.reciprocal();
      Complex complex15 = complex13.INF.tan();
      Complex complex16 = complex13.divide(complex11);
      Complex complex17 = complex10.multiply(complex11);
      Complex complex18 = complex16.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex19 = complex17.INF.multiply(Double.NaN);
      Complex complex20 = complex13.NaN.tanh();
      Complex complex21 = complex20.ZERO.reciprocal();
      double double3 = complex4.getReal();
      boolean boolean0 = complex16.isInfinite();
      Complex complex22 = complex13.atan();
      Complex complex23 = complex15.conjugate();
      boolean boolean1 = complex2.equals(complex19);
      Complex complex24 = complex6.conjugate();
      Complex complex25 = complex3.asin();
      Complex complex26 = complex25.negate();
      double double4 = complex7.abs();
      Complex complex27 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.pow((-1120.0));
      Complex complex7 = complex0.INF.multiply(complex5);
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = Complex.valueOf((-1120.0), Double.POSITIVE_INFINITY);
      double double0 = complex7.NaN.getArgument();
      Complex complex10 = complex6.multiply(Double.NaN);
      Complex complex11 = complex7.ZERO.multiply(50.46468355745);
      Complex complex12 = complex0.negate();
      double double1 = complex6.getArgument();
      String string0 = complex1.NaN.toString();
      Complex complex13 = complex4.createComplex(0.0, 0.0);
      Complex complex14 = complex10.cosh();
      Complex complex15 = complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.cos();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.ZERO.divide(complex6);
      double double0 = complex2.abs();
      Complex complex8 = Complex.valueOf(1246.079557);
      Complex complex9 = complex8.INF.tanh();
      double double1 = complex8.abs();
      Complex complex10 = complex4.pow(complex5);
      Complex complex11 = complex1.cosh();
      String string0 = complex11.INF.toString();
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex4.multiply(complex7);
      Complex complex14 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      double double0 = complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      String string0 = complex2.toString();
      Complex complex3 = complex2.NaN.acos();
      List<Complex> list0 = complex2.nthRoot(17);
      double double1 = complex0.I.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.I.add(complex4);
      String string1 = complex5.ONE.toString();
      Complex complex6 = complex2.I.acos();
      Complex complex7 = complex0.I.sqrt();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex3.getImaginary();
      Object object0 = new Object();
      boolean boolean0 = complex7.equals(object0);
      Complex complex8 = complex0.NaN.log();
      Complex complex9 = complex2.multiply(1);
      double double3 = complex6.abs();
      Complex complex10 = complex6.tanh();
      double double4 = complex10.NaN.getArgument();
      double double5 = complex7.abs();
      Complex complex11 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(2093.6116854495, 2911.0);
      Complex complex2 = complex0.createComplex(0.0, 0.2622140049934387);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex1.createComplex(2.0, 0.2622140049934387);
      boolean boolean0 = complex7.INF.equals(complex6);
      boolean boolean1 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.INF.add(0.0);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.subtract((-347.0136388870425));
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(310.884);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex1.NaN.multiply(complex2);
      Complex complex5 = complex0.I.pow(complex1);
      double double0 = complex5.I.abs();
      double double1 = complex0.INF.getArgument();
      double double2 = complex0.ONE.getArgument();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Object object1 = complex5.readResolve();
      boolean boolean1 = complex5.equals(object0);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract(0.0);
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.ONE.divide(0.0);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.divide(0.4494072198867798);
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.valueOf((-2496.9803863001));
      Complex complex8 = complex3.tan();
      Complex complex9 = complex3.add(complex6);
      Complex complex10 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.ZERO.tan();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.INF.negate();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1905.17923304));
      double double0 = complex0.I.abs();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double1 = complex0.abs();
      Complex complex1 = Complex.valueOf(1.0, 1905.17923304);
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.I.pow(0.0);
      Complex complex5 = complex3.NaN.tan();
      Complex complex6 = complex0.subtract(complex3);
      double double0 = complex6.getImaginary();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-1.0));
      Complex complex2 = Complex.valueOf(1109.0085, 1.2574995962791943E-166);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.divide(complex2);
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex2.sinh();
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex0.divide(1109.0085);
      Complex complex7 = complex6.pow((-1.0));
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex1.tanh();
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex1.I.createComplex((-20.0), (-20.0));
      Complex complex5 = complex4.INF.tan();
      double double0 = complex1.ZERO.getArgument();
      double double1 = complex0.INF.getArgument();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex0.getArgument();
      Complex complex6 = complex1.sqrt();
      double double3 = complex1.NaN.getArgument();
      Complex complex7 = Complex.valueOf((-20.0), 1.0);
      Complex complex8 = complex6.ZERO.pow((-585.318));
      Complex complex9 = complex6.sin();
      Complex complex10 = complex6.ZERO.sqrt1z();
      Complex complex11 = complex8.asin();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex11.negate();
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.log();
      double double0 = complex0.ZERO.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex1.pow(4.171630237420918E-127);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2141545430054);
      Complex complex1 = complex0.multiply(2082.86917954);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.subtract(3436.2141545430054);
      Complex complex4 = complex0.divide((-989.2290943017764));
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(2713.57165, (-216.849));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2396.50332131734));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.I.add(790.0);
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.atan();
      double double1 = complex5.INF.abs();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.add((-2992.34838));
      Complex complex8 = Complex.valueOf((-2213.6343206), (-2992.34838));
      Complex complex9 = complex0.divide(complex6);
      Complex complex10 = complex9.add(complex7);
      Complex complex11 = complex7.sin();
      Complex complex12 = complex7.tanh();
      Complex complex13 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4203280806541443, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.acos();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1587));
      Complex complex2 = complex1.divide((double) (-1587));
      Complex complex3 = complex2.INF.multiply((double) (-1587));
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.ONE.subtract(complex6);
      Complex complex8 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3054.2481);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.I.multiply(0.0);
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex0.I.createComplex(0.0, 0.0);
      double double0 = complex4.ZERO.abs();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.add(9.754659138599756E-213);
      Complex complex8 = complex6.asin();
      String string0 = complex8.toString();
      Complex complex9 = complex6.cos();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex0.multiply((-2286));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.ZERO.multiply(0.0);
      boolean boolean0 = complex0.I.equals(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1311.5552932845142, 2.7211316452521414E287);
      Complex complex1 = complex0.subtract(0.4267219305038452);
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.NaN.conjugate();
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.sinh();
      String string0 = complex2.toString();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex6.I.createComplex(0.0, 2.0);
      Complex complex8 = complex2.INF.add(2.0);
      double double0 = complex2.abs();
      Complex complex9 = complex4.log();
      Complex complex10 = complex4.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.add(1.7591819833844019E252);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.multiply((-2835.529044988));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.5364705324172974);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.exp();
      boolean boolean0 = complex1.NaN.equals(complex0);
      Complex complex3 = complex1.NaN.multiply(37);
      Complex complex4 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-30.0));
      double double0 = complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.negate();
      Object object0 = new Object();
      boolean boolean0 = complex4.INF.equals(object0);
      Object object1 = complex3.I.readResolve();
      Complex complex5 = complex3.ONE.reciprocal();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex5.I.add(complex2);
      Complex complex8 = complex7.NaN.acos();
      boolean boolean1 = complex3.isNaN();
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex5.subtract(complex8);
      String string0 = complex2.toString();
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex1.NaN.subtract(complex10);
      double double1 = complex2.abs();
      Complex complex14 = Complex.valueOf(0.0, 654.23);
      Complex complex15 = Complex.INF;
      Complex complex16 = complex15.ZERO.sqrt();
      boolean boolean2 = complex8.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      String string0 = complex1.toString();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex3.cos();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.INF.acos();
      double double0 = complex3.getImaginary();
      Complex complex8 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.ONE.divide(0.0);
      Complex complex4 = new Complex(2.0466404088178596E-161);
      Complex complex5 = complex4.ZERO.cos();
      int int0 = complex5.hashCode();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex4.pow(1.1574222007764044E-7);
      Complex complex8 = complex5.I.add(0.0);
      Complex complex9 = complex0.multiply(1);
      Complex complex10 = complex7.pow(complex5);
      boolean boolean0 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf(5075.18130221457);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex3.divide(3034.591661655956);
      Complex complex8 = complex1.I.tan();
      Complex complex9 = complex8.multiply(1.3575263023376465);
      Complex complex10 = complex9.log();
      List<Complex> list0 = complex8.nthRoot(2385);
      String string0 = complex0.toString();
      String string1 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex1.pow((double) 2385);
      Complex complex12 = complex2.ZERO.multiply(complex11);
      Complex complex13 = complex11.I.multiply(253.33809);
      Complex complex14 = complex0.createComplex(0.0, 0.0);
      Complex complex15 = complex2.asin();
      Complex complex16 = complex15.NaN.log();
      Complex complex17 = complex2.sqrt1z();
      ComplexField complexField1 = complex9.getField();
      Complex complex18 = complex13.ZERO.sqrt1z();
      Complex complex19 = complex13.multiply(1.3575263023376465);
      Complex complex20 = complex15.exp();
      Complex complex21 = complex19.divide(complex7);
      ComplexField complexField2 = complex9.getField();
      double double0 = complex15.getImaginary();
      Complex complex22 = complex4.pow(3034.591661655956);
      Complex complex23 = complex3.sinh();
      Complex complex24 = complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(165.27226726425502, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      double double1 = complex2.INF.getArgument();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.ZERO.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = Complex.valueOf(0.0, 0.7853981633974483);
      Complex complex8 = complex2.sqrt1z();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.atan();
      String string0 = complex7.ONE.toString();
      Complex complex8 = complex2.I.tan();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex8.ONE.add(complex3);
      int int0 = (-829);
      try { 
        complex1.nthRoot((-829));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -829
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex2.ZERO.negate();
      Complex complex6 = complex3.ZERO.add(complex0);
      int int0 = complex1.hashCode();
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex2.acos();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex6.createComplex(0.0, 0.0);
      Complex complex10 = complex9.I.sin();
      double double0 = complex9.getImaginary();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.conjugate();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.add((-2606.6026));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.NaN.pow(20.0);
      List<Complex> list0 = complex1.ONE.nthRoot(172);
      Complex complex5 = complex4.pow((-835.54776));
      Complex complex6 = complex1.add(complex0);
  }
}
