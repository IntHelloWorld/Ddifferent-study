/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:37:45 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.ZERO.subtract(1410.3209771176);
      Complex complex4 = Complex.valueOf(1410.3209771176);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.multiply(complex4);
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex6.NaN.tan();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex10.NaN.negate();
      Complex complex12 = complex0.multiply(complex0);
      Complex complex13 = complex9.sin();
      Complex complex14 = complex12.sqrt1z();
      Complex complex15 = complex12.cos();
      Complex complex16 = Complex.valueOf(2988.12954994);
      Complex complex17 = complex15.divide(complex5);
      Complex complex18 = complex7.multiply(0.0);
      Complex complex19 = complex4.tan();
      boolean boolean0 = complex7.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-149.02366), (-1594.5493055251));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.I.divide(complex0);
      boolean boolean0 = complex1.NaN.equals(complex0);
      List<Complex> list0 = complex1.nthRoot(2056363651);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.pow((-149.02366));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.multiply(1.5640419864850202E-145);
      Object object0 = complex0.readResolve();
      Object object1 = complex3.ZERO.readResolve();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex0.cos();
      Complex complex10 = Complex.valueOf((double) 2056363651, Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.NaN.divide(complex10);
      Complex complex12 = complex3.exp();
      Complex complex13 = complex3.add(complex12);
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex6.multiply(120.87129129978258);
      Complex complex16 = Complex.valueOf(2306.560302172, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      complex14.nthRoot(2056363651);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(2.0, 2781.9711821402);
      Complex complex3 = complex1.pow(2781.9711821402);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.INF.divide(complex4);
      Complex complex6 = complex1.acos();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.pow(complex6);
      Complex complex9 = complex8.I.multiply(0.0);
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex10.exp();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.NaN.tan();
      Complex complex14 = complex13.I.conjugate();
      Complex complex15 = complex14.INF.asin();
      Complex complex16 = complex11.sinh();
      Complex complex17 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex18 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.multiply(0);
      Complex complex5 = Complex.valueOf(Double.NaN, (double) 0);
      Complex complex6 = complex3.reciprocal();
      boolean boolean0 = complex4.isNaN();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = new Complex(Double.NaN, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex2.pow(complex4);
      double double0 = complex4.abs();
      Complex complex6 = complex4.ZERO.cos();
      double double1 = complex6.ONE.abs();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex2.INF.subtract(Double.NaN);
      boolean boolean0 = complex3.ZERO.equals(complex7);
      Complex complex9 = complex5.I.pow(complex3);
      Complex complex10 = Complex.valueOf(0.0);
      boolean boolean1 = complex2.isInfinite();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex11.ZERO.exp();
      boolean boolean2 = complex11.INF.equals(complex1);
      Object object0 = complex2.readResolve();
      Complex complex13 = complex9.sqrt();
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex14.ONE.atan();
      double double2 = complex13.getArgument();
      Complex complex16 = complex8.multiply(0.0);
      Complex complex17 = complex9.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2652.7166690107));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.tan();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex4.ONE.createComplex((-5.25944796506485), (-1616.230567123));
      Complex complex6 = complex1.cos();
      Complex complex7 = complex1.add(complex6);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex0.pow((-2652.7166690107));
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex9.log();
      String string0 = complex11.NaN.toString();
      Complex complex12 = complex9.ONE.tanh();
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex7.tan();
      Complex complex16 = complex2.pow(0.0);
      boolean boolean0 = complex11.isNaN();
      Complex complex17 = complex15.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4093.127725778128));
      Complex complex1 = new Complex((-4093.127725778128));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.I.add(1.7295331954956055);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.multiply((-4093.127725778128));
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex7.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.ZERO.add((-956.4422288));
      Complex complex10 = complex5.NaN.acos();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex0.multiply((-4093.127725778128));
      Complex complex13 = complex11.ZERO.conjugate();
      Complex complex14 = complex11.exp();
      Complex complex15 = complex7.ZERO.negate();
      Complex complex16 = complex15.NaN.sinh();
      Complex complex17 = complex14.sin();
      Complex complex18 = complex2.reciprocal();
      Complex complex19 = complex18.tan();
      Complex complex20 = complex14.conjugate();
      double double0 = complex20.abs();
      Complex complex21 = complex7.negate();
      Complex complex22 = complex12.cosh();
      double double1 = complex13.getArgument();
      Complex complex23 = Complex.valueOf(2831.354481378939, 0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(67.498499);
      Complex complex3 = complex2.divide(67.498499);
      Complex complex4 = complex3.ONE.sinh();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex3.I.asin();
      ComplexField complexField1 = complex0.getField();
      Complex complex6 = complex3.INF.pow(complex4);
      Complex complex7 = complex4.NaN.createComplex(67.498499, 0.0);
      double double0 = complex7.INF.abs();
      Complex complex8 = complex0.ZERO.subtract(complex2);
      Complex complex9 = complex8.ONE.subtract(complex5);
      Complex complex10 = complex2.ONE.negate();
      double double1 = complex0.abs();
      List<Complex> list0 = complex2.nthRoot(1);
      Object object0 = complex3.readResolve();
      Complex complex11 = complex4.sin();
      Complex complex12 = Complex.valueOf((-592.248188645));
      Complex complex13 = complex11.NaN.pow(complex12);
      Complex complex14 = complex9.sin();
      Complex complex15 = complex14.NaN.sqrt();
      Complex complex16 = complex10.pow(complex11);
      Complex complex17 = complex1.add((-6.525851105645959E-9));
      Complex complex18 = complex16.tanh();
      double double2 = complex4.abs();
      Complex complex19 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.cos();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex5.ZERO.multiply(complex1);
      Complex complex7 = complex6.ZERO.subtract(complex4);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.ONE.multiply((-130));
      int int0 = complex10.INF.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex0.INF.acos();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Object object0 = complex12.readResolve();
      try { 
        complex12.nthRoot((-130));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -130
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      String string1 = complex0.INF.toString();
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.multiply(17);
      Complex complex2 = complex1.INF.divide((double) 17);
      boolean boolean0 = complex2.equals(complex1);
      Complex complex3 = Complex.valueOf((double) 17);
      List<Complex> list0 = complex3.nthRoot(1123);
      boolean boolean1 = complex0.isNaN();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.INF.pow((-6.736873974532501E-8));
      Complex complex10 = complex8.I.asin();
      Complex complex11 = complex5.INF.conjugate();
      boolean boolean2 = complex8.isNaN();
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex3.acos();
      Complex complex14 = complex13.INF.subtract(complex4);
      boolean boolean3 = complex8.isNaN();
      Complex complex15 = complex6.sqrt();
      Complex complex16 = complex10.negate();
      int int1 = complex10.hashCode();
      double double0 = complex14.abs();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.380266370880709E-26, 1057.2695134);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.tan();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex1.INF.subtract(2.380266370880709E-26);
      Complex complex8 = complex3.NaN.reciprocal();
      double double0 = complex0.abs();
      double double1 = complex3.getReal();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.ONE.tan();
      Complex complex12 = complex3.createComplex(0.0, 1057.2695134);
      Complex complex13 = Complex.valueOf((-3345.4837186572), 1865.43);
      Complex complex14 = complex13.NaN.atan();
      Complex complex15 = complex5.add(2.380266370880709E-26);
      List<Complex> list0 = complex12.nthRoot(347);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2535.338211));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.INF.divide(complex2);
      Complex complex6 = complex3.INF.subtract((-20.0));
      Complex complex7 = complex6.I.subtract(complex1);
      Complex complex8 = complex2.NaN.add(complex0);
      Complex complex9 = complex1.NaN.conjugate();
      Complex complex10 = complex8.ZERO.cosh();
      Complex complex11 = complex8.INF.conjugate();
      int int0 = complex10.ONE.hashCode();
      Complex complex12 = complex10.ZERO.sqrt();
      Complex complex13 = complex12.tanh();
      List<Complex> list0 = complex0.nthRoot(2661);
      int int1 = complex0.hashCode();
      Complex complex14 = complex9.NaN.cosh();
      Object object0 = complex3.readResolve();
      double double0 = complex9.getArgument();
      Complex complex15 = complex9.createComplex((-2535.338211), (-20.0));
      Complex complex16 = complex15.INF.subtract(0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex17 = complex13.reciprocal();
      List<Complex> list1 = complex9.nthRoot(1);
      double double1 = complex2.getImaginary();
      Complex complex18 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.exp();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex6.ONE.exp();
      double double1 = complex1.getArgument();
      Complex complex9 = complex1.pow(complex5);
      double double2 = complex6.abs();
      int int0 = complex6.hashCode();
      Complex complex10 = complex8.multiply((-943));
      Complex complex11 = complex1.ZERO.pow(0.0);
      Complex complex12 = complex11.NaN.sqrt();
      Complex complex13 = complex6.NaN.subtract(0.0);
      Complex complex14 = complex13.I.subtract(complex7);
      Complex complex15 = complex8.reciprocal();
      Object object0 = complex11.INF.readResolve();
      Complex complex16 = complex3.atan();
      boolean boolean1 = complex9.equals(complex11);
      Complex complex17 = complex1.exp();
      Complex complex18 = complex8.exp();
      Complex complex19 = complex15.sqrt();
      double double3 = complex9.abs();
      boolean boolean2 = complex2.equals("/a~Z+&IO)EL\"p*\f5");
      Complex complex20 = complex9.divide(0.0);
      double double4 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex4.ONE.abs();
      double double1 = complex2.INF.abs();
      Complex complex5 = complex4.add(complex2);
      boolean boolean0 = complex5.equals(complex1);
      Complex complex6 = complex0.log();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex4.NaN.createComplex(Double.POSITIVE_INFINITY, 4.6097680405580995E-243);
      Complex complex10 = complex8.NaN.pow(0.0);
      Complex complex11 = complex10.ONE.multiply(1118);
      Complex complex12 = complex7.tanh();
      Complex complex13 = complex6.pow(complex8);
      Complex complex14 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.ONE.subtract(20.0);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.NaN.multiply(complex0);
      Complex complex6 = Complex.valueOf(20.0, 5.5996586041611455E262);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex0.createComplex(0.0, 20.0);
      double double0 = complex8.INF.getArgument();
      Complex complex9 = complex0.createComplex((-2178.080188), 0.0);
      Complex complex10 = complex9.multiply((-2610));
      Complex complex11 = complex10.NaN.acos();
      ComplexField complexField1 = complex11.getField();
      Complex complex12 = complex6.exp();
      Complex complex13 = complex9.log();
      Complex complex14 = Complex.valueOf((-2178.080188), 0.0);
      Complex complex15 = complex8.log();
      Complex complex16 = complex11.ONE.add(complex5);
      Complex complex17 = complex15.NaN.subtract(complex12);
      Complex complex18 = complex9.negate();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex19 = complex11.log();
      double double1 = complex2.getArgument();
      Complex complex20 = complex6.pow(complex13);
      String string0 = complex13.toString();
      Complex complex21 = complex3.add(complex9);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.NaN.conjugate();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.ZERO.subtract(complex6);
      Complex complex10 = complex8.INF.atan();
      Complex complex11 = complex4.INF.tanh();
      Complex complex12 = complex10.ONE.acos();
      int int0 = complex5.hashCode();
      Complex complex13 = complex5.sinh();
      Complex complex14 = complex5.I.acos();
      Complex complex15 = complex14.sinh();
      Complex complex16 = complex14.tanh();
      double double1 = complex7.getImaginary();
      Complex complex17 = complex0.acos();
      Complex complex18 = complex5.INF.multiply(complex1);
      Complex complex19 = complex7.multiply(complex2);
      Complex complex20 = complex19.INF.exp();
      Complex complex21 = complex20.ZERO.tan();
      Complex complex22 = complex17.add(complex6);
      Complex complex23 = complex1.reciprocal();
      Complex complex24 = complex17.multiply(complex4);
      Complex complex25 = complex19.multiply(1.2641184329986572);
      Complex complex26 = complex19.atan();
      String string0 = complex8.toString();
      Complex complex27 = complex16.add(1.2641184329986572);
      Complex complex28 = complex12.reciprocal();
      Complex complex29 = Complex.valueOf((-491.41726285940564), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(Double.NaN);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = Complex.valueOf(20.0, Double.NaN);
      Complex complex7 = complex6.ZERO.acos();
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex7.NaN.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex7.divide(20.0);
      double double1 = complex7.getImaginary();
      Complex complex9 = Complex.ZERO;
      boolean boolean1 = complex8.equals(complex9);
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex1.ZERO.asin();
      try { 
        complex8.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide(1.4408516883850098);
      boolean boolean0 = complex2.ONE.equals("_@5N#[!2-TQR5pcPe");
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.I.multiply(38);
      Complex complex8 = complex1.reciprocal();
      try { 
        complex8.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1.8494343291160577E254), (-1.8494343291160577E254));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.add(2.3414841777613345E-218);
      Complex complex3 = complex2.ZERO.divide(2.3414841777613345E-218);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = Complex.valueOf(2.3414841777613345E-218, 0.0);
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex6.NaN.cosh();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex3.atan();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = Complex.valueOf(2.3414841777613345E-218, 0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.ONE.multiply(642);
      Complex complex4 = complex0.ZERO.multiply(0.0);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = Complex.valueOf(1.4692699909210205);
      Complex complex7 = complex0.multiply(4004);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex8 = complex0.subtract(complex7);
      Complex complex9 = Complex.valueOf(0.0, 1451.0);
      List<Complex> list0 = complex7.nthRoot(642);
      Complex complex10 = complex1.subtract(complex9);
      Complex complex11 = complex9.pow(1679.4791);
      Complex complex12 = complex8.negate();
      Complex complex13 = complex1.acos();
      Complex complex14 = complex13.ZERO.cosh();
      Complex complex15 = complex6.add(1451.0);
      Complex complex16 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3238.921716), (-3238.921716));
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.valueOf(929.64106, 2423.082312);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex3.I.tanh();
      Complex complex8 = complex0.divide(complex3);
      Complex complex9 = complex4.I.asin();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex3.atan();
      Complex complex13 = complex11.cosh();
      boolean boolean0 = complex12.isNaN();
      Complex complex14 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-3212.59016), (-3212.59016));
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.I.acos();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex1.ZERO.createComplex((-3212.59016), 0.0);
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.I.reciprocal();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex6.acos();
      double double0 = complex4.getImaginary();
      double double1 = complex2.getReal();
      Complex complex12 = complex3.pow(902.05387158);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.ONE.add(complex0);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex1.conjugate();
      double double0 = complex7.abs();
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2501.0, (-9.598330731102836E-8));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.subtract((-9.598330731102836E-8));
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex0.multiply((-9.598330731102836E-8));
      Complex complex5 = complex1.INF.subtract(complex4);
      Complex complex6 = complex4.NaN.createComplex((-9.598330731102836E-8), (-20.0));
      Complex complex7 = complex6.divide(0.0);
      Complex complex8 = complex7.INF.sqrt();
      double double0 = complex4.ONE.getArgument();
      Complex complex9 = complex4.pow(complex0);
      Complex complex10 = complex0.multiply(0.0);
      double double1 = complex10.INF.getArgument();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.createComplex((-20.0), 1.0);
      ComplexField complexField0 = complex0.getField();
      double double2 = complex3.getArgument();
      Complex complex13 = complex12.add(complex1);
      String string0 = complex6.toString();
      Complex complex14 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.pow((-1140.15210154));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.INF.add(complex3);
      Object object0 = new Object();
      double double0 = complex1.ONE.getArgument();
      boolean boolean0 = complex2.ZERO.equals(object0);
      Complex complex5 = complex1.ONE.negate();
      Complex complex6 = complex1.createComplex((-1140.15210154), Double.NaN);
      Complex complex7 = complex5.multiply(1.0112214979786464E-43);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.divide(7.586808748646825E-281);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex2.INF.divide(Double.NaN);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = Complex.valueOf(1290.0306);
      double double1 = complex1.abs();
      double double2 = complex2.getReal();
      Complex complex10 = complex0.multiply((-919));
      Complex complex11 = complex8.cosh();
      Object object0 = complex11.NaN.readResolve();
      List<Complex> list0 = complex10.nthRoot(37);
      Complex complex12 = complex8.sqrt();
      Complex complex13 = complex12.NaN.conjugate();
      double double3 = complex9.getArgument();
      Object object1 = complex13.readResolve();
      Complex complex14 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4166.5);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.tanh();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.ZERO.createComplex(4166.5, 4166.5);
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.negate();
      String string1 = complex0.ONE.toString();
      List<Complex> list0 = complex5.INF.nthRoot(1295);
      Object object1 = complex5.ONE.readResolve();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.ZERO.multiply(complex2);
      Complex complex8 = complex6.add(complex5);
      boolean boolean0 = complex3.equals(complex6);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.subtract(complex9);
      Complex complex11 = complex10.cos();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex3.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2365.431354325), (-2365.431354325));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.INF.subtract((-2365.431354325));
      Complex complex4 = complex0.divide((-2365.431354325));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.reciprocal();
      int int0 = complex6.NaN.hashCode();
      double double0 = complex1.NaN.abs();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex2.conjugate();
      String string0 = complex1.toString();
      Object object1 = complex5.readResolve();
      Complex complex8 = complex3.multiply(1148);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex3.tan();
      String string1 = complex5.toString();
      Complex complex11 = complex5.add(complex2);
      Complex complex12 = complex11.NaN.reciprocal();
      Complex complex13 = complex10.acos();
      double double1 = complex5.getImaginary();
      Complex complex14 = complex4.cos();
      Complex complex15 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(Double.NaN);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex6.ZERO.acos();
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex7.NaN.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex7.divide(Double.NaN);
      double double1 = complex7.getImaginary();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex1.ZERO.asin();
      try { 
        complex8.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.subtract(0.6634125709533691);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.divide(Double.NaN);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.subtract(Double.NaN);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex8.I.subtract(1.5548923015594482);
      Complex complex13 = Complex.valueOf(Double.NaN);
      double double1 = complex13.I.abs();
      Complex complex14 = complex8.sqrt1z();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(889);
      Complex complex2 = complex0.createComplex(1264.8006, 1264.8006);
      Complex complex3 = complex0.I.acos();
      double double0 = complex0.getReal();
      double double1 = complex3.getArgument();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.pow((double) 889);
      Complex complex7 = complex4.divide((-0.5113252103366475));
      Complex complex8 = complex7.exp();
      Complex complex9 = complex4.add(3341.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1424.5020444482), (-1424.5020444482));
      double double0 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.INF.divide(complex0);
      Complex complex6 = complex2.ONE.conjugate();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.tanh();
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex2.I.exp();
      Complex complex10 = Complex.valueOf((-1.0440854056870505E-160), (-2.356194490192345));
      double double1 = complex5.getArgument();
      double double2 = complex2.getArgument();
      double double3 = complex0.abs();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1971.429748), 4419.387577);
      Complex complex1 = complex0.cosh();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex((-1971.429748));
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex0.ZERO.pow(complex3);
      Complex complex6 = complex5.NaN.multiply(37);
      Complex complex7 = complex0.createComplex((-1971.429748), (-1971.429748));
      Complex complex8 = complex0.negate();
      Complex complex9 = complex7.pow(8.869266069401045E-8);
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex9.isInfinite();
      Complex complex10 = complex7.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2640.62046), (-2640.62046));
      Complex complex1 = complex0.ZERO.pow((-2640.62046));
      Complex complex2 = complex0.NaN.multiply(797.0533252672565);
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex3.ONE.pow(complex2);
      double double0 = complex0.getReal();
      Complex complex5 = Complex.valueOf((-2640.62046), (-2640.62046));
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex1.asin();
      Complex complex9 = Complex.valueOf(797.0533252672565, (-2640.62046));
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex3.multiply(complex1);
      Complex complex13 = complex10.pow((-2640.62046));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-3125.4840241043594));
      Complex complex1 = complex0.I.add((-3125.4840241043594));
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.sqrt();
      String string0 = complex3.NaN.toString();
      double double0 = complex0.I.getArgument();
      String string1 = complex0.toString();
      double double1 = complex0.getReal();
      Complex complex4 = Complex.valueOf(1.5707963267948966);
      ComplexField complexField0 = complex1.getField();
      String string2 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1946.740581707431);
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = Complex.ONE;
      boolean boolean0 = complex0.ONE.equals(complex2);
      boolean boolean1 = complex0.equals(complex2);
      Complex complex3 = complex0.divide(complex2);
      double double0 = complex3.abs();
      Complex complex4 = complex0.multiply((-972));
      String string0 = complex2.toString();
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.divide(994.12462615294);
      int int1 = complex2.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(2171.0345452);
      Complex complex3 = Complex.valueOf(2171.0345452);
      boolean boolean0 = complex3.INF.equals("TH-[tJ|b");
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(2171.0345452, 6.283185307179586);
      Complex complex7 = complex0.asin();
      Complex complex8 = Complex.valueOf((-97.577));
      Complex complex9 = complex8.I.acos();
      List<Complex> list0 = complex8.I.nthRoot(619);
      double double0 = complex8.NaN.getArgument();
      double double1 = complex7.getArgument();
      Complex complex10 = new Complex(0.0, (-97.577));
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex10.add(complex6);
      Complex complex13 = complex8.ONE.divide(complex12);
      Complex complex14 = complex0.subtract(complex10);
      Complex complex15 = complex0.exp();
      ComplexField complexField0 = complex3.getField();
      Complex complex16 = complex3.conjugate();
      Complex complex17 = complex15.multiply(1562);
      Complex complex18 = complex9.cosh();
      Complex complex19 = complex12.exp();
      Complex complex20 = complex19.INF.cosh();
      Complex complex21 = Complex.valueOf(2171.0345452);
      Complex complex22 = complex3.subtract(complex21);
      Complex complex23 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.sqrt1z();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex0.add(Double.NaN);
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.atan();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex3.multiply(2.0);
      Complex complex8 = Complex.valueOf(721.0698884512677);
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex5.pow(complex7);
      Complex complex10 = complex3.ZERO.log();
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex9.NaN.conjugate();
      Complex complex13 = complex8.reciprocal();
      Complex complex14 = complex8.NaN.cos();
      Complex complex15 = complex9.sqrt1z();
      boolean boolean0 = complex9.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3126.32), 3025.24183637);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex3.add((-2.5711014608334873E-9));
      Complex complex7 = complex3.multiply((-2580.887667750428));
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex8.ONE.subtract(complex1);
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.log();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex12.NaN.createComplex(0.0, 0.0);
      Complex complex14 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.NaN.divide(complex3);
      Complex complex5 = complex0.ONE.pow(complex1);
      Complex complex6 = complex5.I.sin();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex7 = Complex.valueOf(4553.890469, 0.0);
      Complex complex8 = complex3.pow(2489.56439);
      boolean boolean0 = complex7.isInfinite();
      double double0 = complex2.getImaginary();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(1.0479910373687744, (-2839.0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.createComplex(1800.46, 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.multiply(complex2);
      Complex complex6 = Complex.I;
      boolean boolean0 = complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = 13.412950138599;
      double double1 = 200.072521266447;
      Complex complex0 = Complex.valueOf(13.412950138599, 200.072521266447);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.valueOf(0.0, 3583.8);
      Complex complex3 = complex1.ONE.pow((-850.7287206329564));
      Complex complex4 = complex0.ZERO.subtract(complex1);
      Complex complex5 = complex1.I.divide(0.0);
      Object object0 = complex0.INF.readResolve();
      Complex complex6 = complex0.INF.add(complex5);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex2.sqrt1z();
      try { 
        complex1.INF.nthRoot((-1722));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,722
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.INF.sqrt1z();
      double double1 = complex1.abs();
      Complex complex6 = complex0.I.atan();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      List<Complex> list0 = complex0.I.nthRoot(50);
      Complex complex1 = complex0.NaN.asin();
      List<Complex> list1 = complex0.nthRoot(7);
      Complex complex2 = Complex.valueOf(1168.6312241, (-5.238488022920792E-9));
      Complex complex3 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3702.6);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.NaN.add(3702.6);
      Complex complex6 = complex3.NaN.multiply(complex0);
      Complex complex7 = complex2.NaN.reciprocal();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex7.ONE.sqrt();
      Complex complex10 = complex0.subtract(1414.9379876);
      Complex complex11 = complex10.ZERO.divide(complex8);
      Complex complex12 = complex8.createComplex(2199.683568, 998.0);
      int int0 = complex1.hashCode();
      Complex complex13 = complex2.NaN.subtract(complex1);
      double double0 = complex1.getReal();
      Complex complex14 = complex0.add(complex7);
      boolean boolean0 = complex12.isInfinite();
      double double1 = complex11.abs();
      Complex complex15 = Complex.ONE;
      boolean boolean1 = complex2.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.I.pow((-1788.385));
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex4.ZERO.tanh();
      try { 
        complex5.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2306.560302172));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex3.multiply((-2923));
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Complex complex6 = complex0.INF.acos();
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex5.tan();
      Complex complex9 = complex5.add((-2306.560302172));
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex10.subtract(0.0);
      String string0 = complex2.toString();
      Complex complex12 = complex2.tan();
      Complex complex13 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(1573.48008589184);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.valueOf((-164.77));
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.multiply(5.5685313670430624E-8);
      Complex complex6 = complex3.I.cosh();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex4.ONE.sqrt();
      Complex complex9 = complex7.sqrt1z();
      double double0 = complex7.ZERO.abs();
      Complex complex10 = complex0.tan();
      boolean boolean0 = complex6.isNaN();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-736.9909));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4205.916), (-4205.916));
      Complex complex1 = complex0.cosh();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.I.multiply((-4205.916));
      boolean boolean0 = complex1.equals(object0);
      Complex complex3 = complex0.createComplex((-4205.916), 1907.972990966077);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.createComplex(924.5745389172, 924.5745389172);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.pow(1907.972990966077);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.conjugate();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.INF.pow(complex0);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1727.2, 1727.2);
      Complex complex2 = complex1.I.multiply(complex0);
      double double0 = complex1.getImaginary();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex1.getReal();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1837.867144667));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      String string0 = complex2.toString();
      Complex complex4 = complex2.NaN.multiply(0);
      Complex complex5 = complex0.I.reciprocal();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.NaN.cosh();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex2.ZERO.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex0.add(complex2);
      Complex complex11 = complex4.negate();
      double double0 = complex3.abs();
      Complex complex12 = complex9.divide(complex3);
      Complex complex13 = complex12.INF.cos();
      Complex complex14 = complex3.tan();
      Complex complex15 = complex4.subtract((-1837.867144667));
      ComplexField complexField1 = complex15.getField();
      double double1 = complex0.getArgument();
      String string1 = complex2.toString();
      Complex complex16 = complex10.add(complex7);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2400.0558208), (-2400.0558208));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.NaN.add((-2166.39108));
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.ONE.multiply(0.0);
      Complex complex5 = complex1.ZERO.sqrt();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex6.ZERO.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex0.I.reciprocal();
      Complex complex9 = complex0.negate();
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex9.subtract(complex7);
      Complex complex11 = Complex.valueOf(0.0, 4.041399585161321E-8);
      Complex complex12 = complex11.ZERO.exp();
      Complex complex13 = complex9.log();
      Complex complex14 = complex8.sqrt1z();
      double double0 = complex13.getImaginary();
      Complex complex15 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.log();
      Complex complex8 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex2.INF.divide(4.620570188811826E-8);
      Complex complex5 = complex1.ZERO.subtract(complex0);
      Complex complex6 = complex2.NaN.createComplex((-83.87474417918753), 676.949397821579);
      Complex complex7 = complex2.cos();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex2.asin();
      Complex complex12 = complex6.exp();
      Complex complex13 = Complex.valueOf((-132.0), 676.949397821579);
      Complex complex14 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-159.7379322361));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.ONE.subtract(1364.78);
      Complex complex4 = complex2.I.tan();
      double double0 = complex2.INF.getArgument();
      Complex complex5 = complex3.ZERO.createComplex((-2685.45018631), (-2685.45018631));
      String string0 = complex0.toString();
      Complex complex6 = complex1.pow((-1594.5493055251));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.multiply(0);
      double double0 = complex1.getArgument();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.1899520225809197E-7));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = complex2.NaN.atan();
      Complex complex6 = complex0.sinh();
      int int0 = complex6.hashCode();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex6.I.sin();
      Complex complex11 = complex10.ONE.negate();
      double double0 = complex6.I.abs();
      Complex complex12 = complex7.multiply(complex6);
      String string0 = complex7.toString();
      ComplexField complexField0 = complex6.getField();
      Complex complex13 = complex3.sin();
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex4.exp();
      Complex complex16 = complex0.sin();
      Complex complex17 = complex1.pow(complex12);
      String string1 = complex15.toString();
      Complex complex18 = complex16.reciprocal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2335.23746231, 2335.23746231);
      List<Complex> list0 = complex0.nthRoot(1124);
      double double0 = complex0.getImaginary();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Object object0 = complex0.readResolve();
      double double0 = complex0.abs();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(1.4394452571868896);
      double double1 = complex3.getArgument();
      String string0 = complex0.toString();
      double double2 = complex3.getReal();
      int int0 = 594;
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex0.multiply(594);
      Complex complex6 = complex3.NaN.subtract(1.4394452571868896);
      String string1 = complex5.ONE.toString();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.NaN.sqrt1z();
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.multiply(6.283185307179586);
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex0.multiply((-4460));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.add((-7.796557225750673E-258));
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((double) 1);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex0.multiply(2.0);
      Complex complex3 = complex0.NaN.multiply(2.0);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex0.divide(complex5);
      double double0 = complex7.abs();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex1.sin();
      double double1 = complex4.getArgument();
      Complex complex9 = complex1.sqrt();
      double double2 = complex0.abs();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex1.negate();
      List<Complex> list1 = complex10.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Object object0 = new Object();
      boolean boolean0 = complex0.I.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-905.9116));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.ONE.reciprocal();
      List<Complex> list0 = complex3.nthRoot(6);
      Complex complex5 = complex2.pow((double) 6);
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1832.19438942));
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(356.16659871018, 0.0);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-1213.8939736948291));
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.subtract(2116.833017);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(574.28495, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex1 = complex0.subtract((-5.04128025464686E71));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.multiply((-879));
      String string0 = complex0.toString();
      Complex complex4 = new Complex((-5.04128025464686E71), 6.283185307179586);
      Complex complex5 = complex1.NaN.divide(complex4);
      Complex complex6 = complex3.subtract(complex2);
      int int0 = complex6.hashCode();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex6.add(0.0);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex6.createComplex(2194.9, 1.3004305362701416);
      Complex complex11 = complex9.add(complex1);
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex12 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ONE.reciprocal();
      List<Complex> list0 = complex3.I.nthRoot(1996);
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.ZERO.log();
      Complex complex7 = complex0.ZERO.tan();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex6.I.tanh();
      Complex complex10 = complex9.conjugate();
      boolean boolean0 = complex6.equals(complex5);
      Complex complex11 = complex5.tan();
      Object object0 = complex6.readResolve();
      double double0 = complex4.getArgument();
      Complex complex12 = complex1.INF.exp();
      Complex complex13 = Complex.valueOf((-391.4978508424));
      ComplexField complexField0 = complex1.getField();
      Complex complex14 = complex5.multiply(1);
      Complex complex15 = Complex.valueOf((-391.4978508424), (double) 1);
      Complex complex16 = Complex.valueOf((-5617.63280405361), 0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-1097));
      double double0 = complex1.I.getArgument();
      Complex complex2 = new Complex((-0.1666666567325592), 3961.948862173);
      Complex complex3 = complex0.INF.add(complex2);
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex6.I.multiply(1371.188);
      boolean boolean0 = complex4.isInfinite();
      int int1 = complex5.hashCode();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex4.pow(2.0);
      Object object0 = complex1.readResolve();
      Complex complex9 = complex3.subtract(3961.948862173);
      Complex complex10 = complex2.multiply((-1097));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.ZERO.reciprocal();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.I.sinh();
      Complex complex8 = complex5.NaN.sqrt();
      Complex complex9 = complex7.I.sqrt1z();
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex4.divide(complex1);
      Complex complex12 = complex3.sin();
      Complex complex13 = complex12.ONE.cosh();
      Complex complex14 = complex0.INF.add(complex5);
      Complex complex15 = complex10.I.log();
      try { 
        complex2.nthRoot((-5154));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,154
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(3257.248759381, (-4169.3875));
      String string0 = complex0.toString();
      Complex complex1 = complex0.add((-4169.3875));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.ZERO.divide(complex2);
      Object object0 = complex2.INF.readResolve();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = Complex.valueOf(3257.248759381);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.INF.negate();
      double double0 = complex0.getArgument();
      Complex complex8 = complex1.pow(complex4);
      double double1 = complex4.ONE.abs();
      Complex complex9 = complex8.NaN.pow((-0.9076060274993568));
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex10 = complex5.sqrt1z();
      ComplexField complexField1 = complex5.getField();
      Object object1 = complex1.readResolve();
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex12.INF.log();
      Complex complex14 = complex12.multiply(1.866422414779663);
      Complex complex15 = complex10.ONE.tanh();
      Complex complex16 = complex15.NaN.cosh();
      Complex complex17 = complex12.sqrt1z();
      Complex complex18 = complex4.INF.sqrt1z();
      Complex complex19 = complex18.ZERO.cosh();
      Complex complex20 = complex17.I.add(complex8);
      Complex complex21 = complex20.I.tanh();
      Complex complex22 = complex8.INF.sqrt();
      int int0 = complex3.hashCode();
      Complex complex23 = complex8.exp();
      ComplexField complexField2 = complex10.getField();
      boolean boolean0 = complex16.isInfinite();
      Complex complex24 = Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.divide(complex0);
      double double0 = complex0.abs();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex1.NaN.readResolve();
      Complex complex4 = complex3.INF.divide(complex0);
      Complex complex5 = complex2.multiply(complex3);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(1344.349368);
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.INF.sin();
      boolean boolean0 = complex5.ZERO.equals(complex2);
      Complex complex6 = complex4.ZERO.asin();
      Complex complex7 = complex0.add(1344.349368);
      Complex complex8 = complex4.add(1344.349368);
      List<Complex> list0 = complex6.nthRoot(657);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = Complex.valueOf((-20.0));
      Complex complex13 = complex3.acos();
      double double0 = complex13.getArgument();
      double double1 = complex4.abs();
      Complex complex14 = complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.I.sqrt();
      String string0 = complex3.NaN.toString();
      double double0 = complex3.NaN.getArgument();
      Complex complex5 = complex2.createComplex(3184.5789939, (-3410.7261));
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex5.I.multiply(1);
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex8.divide((-3410.7261));
      Complex complex11 = complex5.subtract(3184.5789939);
      double double1 = complex2.getReal();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex0.atan();
      Complex complex14 = complex13.INF.pow(complex12);
      Complex complex15 = complex0.log();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex14.isNaN();
      String string1 = complex0.ONE.toString();
      Complex complex16 = Complex.ONE;
      boolean boolean1 = complex14.equals(complex16);
      double double2 = complex11.getArgument();
      Complex complex17 = complex11.pow(complex13);
      double double3 = complex1.abs();
      Complex complex18 = complex12.tanh();
      Complex complex19 = complex18.I.reciprocal();
      Complex complex20 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.multiply((-3978));
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex2.multiply((double) (-3978));
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ONE.negate();
      String string0 = complex5.ONE.toString();
      Object object1 = complex3.readResolve();
      Complex complex7 = complex2.tan();
      Complex complex8 = Complex.valueOf((-3201.771377));
      String string1 = complex2.toString();
      Complex complex9 = Complex.valueOf((double) (-3978), 2284.50699709);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex4.ONE.multiply(complex9);
      Complex complex12 = complex10.divide((-1403.078));
      Complex complex13 = complex10.ZERO.log();
      Complex complex14 = complex13.NaN.reciprocal();
      Complex complex15 = complex10.ZERO.pow(2284.50699709);
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex10.tanh();
      Complex complex18 = complex17.INF.multiply((-3978));
      Complex complex19 = complex18.INF.cosh();
      Complex complex20 = complex4.add((-1403.078));
      Complex complex21 = complex6.sqrt();
      String string2 = complex6.toString();
      Complex complex22 = complex13.reciprocal();
      Complex complex23 = complex22.divide((-1403.078));
      Complex complex24 = complex5.asin();
      Complex complex25 = complex3.exp();
      boolean boolean0 = complex14.isNaN();
      Complex complex26 = complex6.atan();
  }
}
