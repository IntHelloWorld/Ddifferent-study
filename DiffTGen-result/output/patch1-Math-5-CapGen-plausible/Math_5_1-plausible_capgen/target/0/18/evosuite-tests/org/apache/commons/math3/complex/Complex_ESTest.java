/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:40:59 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 0.5403023058681398;
      Complex complex0 = Complex.valueOf(0.5403023058681398);
      double double1 = 0.0;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.NaN.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.multiply((-2887));
      Complex complex4 = Complex.valueOf(0.5403023058681398);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex2.INF.tan();
      Complex complex8 = complex7.ONE.multiply(0.0);
      Object object0 = complex3.readResolve();
      try { 
        complex2.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-1992991052));
      Complex complex2 = complex1.ZERO.createComplex(67.7, (-1992991052));
      ComplexField complexField0 = complex2.NaN.getField();
      String string0 = complex0.toString();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex1.tanh();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.INF.add(complex2);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex4.ZERO.tan();
      ComplexField complexField1 = complex8.getField();
      Complex complex10 = complex2.multiply((-1992991052));
      Complex complex11 = complex8.divide(complex4);
      double double0 = complex8.abs();
      Complex complex12 = complex7.atan();
      try { 
        complex8.nthRoot((-1992991052));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,992,991,052
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(1);
      Complex complex3 = complex1.ONE.acos();
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex0.INF.divide((-254.7));
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.INF.divide(complex1);
      int int0 = complex5.hashCode();
      Complex complex7 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex1.acos();
      Complex complex11 = Complex.I;
      Complex complex12 = complex1.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.multiply((-20.0));
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex0.ZERO.pow(complex2);
      String string1 = complex4.INF.toString();
      Complex complex5 = complex3.ONE.divide(complex2);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex7.multiply(complex9);
      Complex complex11 = complex7.exp();
      ComplexField complexField0 = complex11.ONE.getField();
      Complex complex12 = complex11.INF.createComplex(0.0, (-20.0));
      Complex complex13 = complex6.cosh();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1.5144298076629639);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = Complex.ONE;
      double double0 = complex7.NaN.getArgument();
      Complex complex8 = complex7.I.add(complex4);
      Complex complex9 = complex4.INF.exp();
      Complex complex10 = complex9.I.tan();
      Complex complex11 = Complex.valueOf(1.5144298076629639, Double.NaN);
      Complex complex12 = complex1.pow(complex7);
      Complex complex13 = complex4.log();
      Complex complex14 = complex7.NaN.subtract(1840.6667);
      Object object0 = complex2.readResolve();
      Complex complex15 = complex4.tanh();
      Complex complex16 = complex15.ZERO.sinh();
      boolean boolean0 = complex13.equals(object0);
      Object object1 = complex1.readResolve();
      Complex complex17 = complex0.subtract(1.5144298076629639);
      Complex complex18 = complex2.subtract(1448.617);
      int int0 = complex4.hashCode();
      Complex complex19 = complex8.subtract(1.7295331954956055);
      Complex complex20 = complex8.cosh();
      double double1 = complex17.abs();
      try { 
        complex8.nthRoot((-240));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -240
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-836.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      double double0 = complex2.getReal();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex4.INF.add(complex0);
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex7 = complex2.NaN.acos();
      Complex complex8 = complex5.INF.multiply(888);
      Complex complex9 = complex8.NaN.conjugate();
      int int0 = complex8.ONE.hashCode();
      Complex complex10 = complex1.add(complex0);
      Complex complex11 = complex2.cos();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex14.INF.asin();
      Complex complex16 = complex4.add(complex3);
      Complex complex17 = complex4.sin();
      Complex complex18 = complex17.multiply((double) 888);
      Object object0 = complex16.readResolve();
      Complex complex19 = complex1.cos();
      Complex complex20 = Complex.valueOf(407.368);
      Complex complex21 = Complex.valueOf(6.728628613084702);
      Complex complex22 = complex21.INF.divide(0.0);
      double double1 = complex13.getArgument();
      Complex complex23 = complex15.negate();
      Complex complex24 = complex0.divide((-836.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2.0319266319274902, (-3741.75));
      Complex complex1 = new Complex(1.378904104232788, 0.0);
      Complex complex2 = Complex.valueOf(2.0319266319274902, (-2674.0619149));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.I.multiply(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.valueOf((-1.8613847754677912E-9));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.I.sqrt();
      Complex complex6 = complex2.INF.multiply((-1.8613847754677912E-9));
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex6.pow(0.0);
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.createComplex(1263.85911870862, 1263.85911870862);
      double double0 = complex1.getImaginary();
      Complex complex4 = complex1.pow(1263.85911870862);
      Complex complex5 = complex4.INF.add((-310.7111658313));
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex8.add(Double.NaN);
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-904.405291));
      Complex complex1 = complex0.INF.createComplex((-904.405291), 1.6311051845550537);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.ONE.add(complex1);
      double double0 = complex1.ONE.abs();
      Complex complex6 = Complex.valueOf((-1944.3628617974975), 1.0);
      Complex complex7 = complex2.ONE.divide(complex1);
      Complex complex8 = complex3.sin();
      Complex complex9 = complex0.I.multiply(0.0);
      Complex complex10 = Complex.valueOf((-904.405291), (-904.405291));
      double double1 = complex10.ONE.getArgument();
      Complex complex11 = complex10.I.divide(complex0);
      Complex complex12 = complex11.ONE.add(complex8);
      Complex complex13 = complex11.I.exp();
      Complex complex14 = complex1.reciprocal();
      Complex complex15 = complex3.asin();
      Complex complex16 = complex1.multiply(577);
      Complex complex17 = complex16.INF.tanh();
      Object object0 = complex14.readResolve();
      Complex complex18 = Complex.valueOf(0.0, (-3728.401952772));
      Complex complex19 = complex15.ZERO.createComplex(577, 0.0);
      Complex complex20 = complex15.INF.reciprocal();
      double double2 = complex14.getImaginary();
      boolean boolean0 = complex15.isInfinite();
      Complex complex21 = complex20.sinh();
      Complex complex22 = complex19.sqrt();
      Complex complex23 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1587.343650350245, (-956.75974));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.multiply(1.1532102163380318E-7);
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex4.ONE.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      List<Complex> list0 = complex6.INF.nthRoot(1);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex2.add(complex3);
      Complex complex10 = complex6.multiply(0.0);
      double double0 = complex1.getReal();
      Complex complex11 = complex0.divide(1.1532102163380318E-7);
      Complex complex12 = complex2.add((-1373.976));
      Complex complex13 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.I.multiply((-3043));
      Object object0 = complex1.ONE.readResolve();
      double double1 = complex0.INF.getArgument();
      Complex complex2 = complex0.INF.multiply(547);
      double double2 = complex0.getArgument();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = new Complex(Double.NaN, Double.NaN);
      Complex complex6 = complex3.NaN.pow(complex5);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex4.INF.cos();
      Complex complex9 = Complex.valueOf(1342.4175594);
      Complex complex10 = complex9.ONE.atan();
      ComplexField complexField0 = complex9.INF.getField();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex11.ZERO.cosh();
      Complex complex13 = complex4.I.sinh();
      Complex complex14 = complex2.conjugate();
      double double3 = complex14.getReal();
      Complex complex15 = complex4.acos();
      double double4 = complex10.getImaginary();
      try { 
        complex8.nthRoot((-3043));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,043
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(2840.2395023293657, 2840.2395023293657);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tan();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.NaN.pow(0.0);
      Complex complex5 = complex2.INF.multiply(complex0);
      Complex complex6 = complex2.add(2840.2395023293657);
      Complex complex7 = complex6.I.multiply(397.4);
      double double0 = complex2.getReal();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex5.cos();
      double double1 = complex9.getArgument();
      double double2 = complex0.getImaginary();
      Complex complex10 = Complex.valueOf((-3360.786743977));
      Complex complex11 = complex4.multiply(0.0);
      Complex complex12 = complex1.subtract(0.0);
      Complex complex13 = complex11.divide(complex3);
      Complex complex14 = Complex.valueOf(0.0);
      double double3 = complex4.abs();
      Complex complex15 = complex14.log();
      double double4 = complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.ZERO.createComplex(768.878387787434, 0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.createComplex((-2552.3442353262158), (-2552.3442353262158));
      Complex complex6 = complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 6.283185307179586);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex0.I.pow(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex4.NaN.createComplex(0.0, 1.2264227867126465);
      Complex complex7 = complex5.ZERO.sqrt1z();
      boolean boolean0 = complex5.NaN.equals(complex2);
      boolean boolean1 = complex2.isNaN();
      Complex complex8 = complex3.add(0.0);
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex4.tanh();
      double double0 = complex10.ONE.abs();
      Complex complex11 = complex1.negate();
      ComplexField complexField1 = complex2.getField();
      Complex complex12 = complex3.add(complex1);
      Complex complex13 = complex7.add(complex10);
      double double1 = complex13.getArgument();
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex13.NaN.sqrt();
      Object object0 = complex15.INF.readResolve();
      Complex complex16 = complex1.negate();
      Complex complex17 = complex0.divide(0.0);
      Complex complex18 = complex6.multiply(1.2264227867126465);
      double double2 = complex13.getImaginary();
      Complex complex19 = complex0.negate();
      String string0 = complex17.toString();
      int int0 = complex7.hashCode();
      Complex complex20 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(958.5);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.cos();
      String string0 = complex1.toString();
      double double0 = complex0.getArgument();
      String string1 = complex1.INF.toString();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.ONE.cos();
      String string2 = complex2.I.toString();
      Complex complex4 = complex1.multiply(1);
      Complex complex5 = complex4.multiply(958.5);
      ComplexField complexField0 = complex4.getField();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.subtract((double) 1);
      double double1 = complex1.getImaginary();
      double double2 = complex6.I.abs();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex2.sin();
      double double3 = complex6.abs();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex7.log();
      Complex complex10 = complex6.add(complex9);
      Complex complex11 = complex5.tanh();
      double double4 = complex11.abs();
      boolean boolean1 = complex11.isNaN();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex0.INF.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex3.divide(8.472965161251656E-169);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = Complex.valueOf(388.5327);
      String string0 = complex2.ONE.toString();
      Complex complex7 = complex6.NaN.createComplex(0.0, 0.0);
      Complex complex8 = complex3.I.add(complex5);
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex6.INF.divide(8.472965161251656E-169);
      Complex complex11 = complex10.ONE.pow(8.472965161251656E-169);
      boolean boolean0 = complex2.equals(complex0);
      double double0 = complex4.abs();
      Complex complex12 = complex3.add(complex6);
      Complex complex13 = complex12.I.sinh();
      Complex complex14 = complex13.INF.add((-1.0));
      boolean boolean1 = complex9.isInfinite();
      int int0 = complex7.hashCode();
      String string1 = complex13.toString();
      Complex complex15 = complex0.tanh();
      Complex complex16 = Complex.valueOf(8.472965161251656E-169);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = Complex.valueOf((-1474.61));
      Complex complex5 = complex4.ONE.negate();
      List<Complex> list0 = complex0.I.nthRoot(1326);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex1.ZERO.exp();
      Complex complex9 = complex6.asin();
      boolean boolean0 = complex7.equals(complex6);
      Complex complex10 = complex3.cosh();
      Complex complex11 = Complex.valueOf(302.7014227);
      Complex complex12 = complex11.NaN.createComplex((-647.00347652), 1379.2742647055768);
      Complex complex13 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-333.81));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.subtract((-333.81));
      List<Complex> list0 = complex3.nthRoot(1253);
      Complex complex4 = complex3.ONE.createComplex(363.9658, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex0.ONE.multiply((-198.050348417));
      Complex complex8 = complex0.add(complex2);
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex3.ONE.divide(complex6);
      Complex complex8 = complex5.ZERO.pow(0.0);
      Complex complex9 = complex8.ZERO.add(complex4);
      double double0 = complex5.NaN.getArgument();
      Complex complex10 = complex5.log();
      Complex complex11 = complex2.exp();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      ComplexField complexField0 = complex0.getField();
      double double1 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1335.31819746078);
      double double0 = complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(973.096107371692);
      Complex complex3 = Complex.valueOf(1335.31819746078, 0.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.sqrt1z();
      String string0 = complex0.toString();
      Complex complex6 = complex0.negate();
      Complex complex7 = Complex.valueOf((-87.3), (-632.0));
      Complex complex8 = complex4.reciprocal();
      boolean boolean0 = complex0.equals("dp~%pwB2hbL.=yS");
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex0.multiply(1721);
      boolean boolean1 = complex11.equals("");
      Complex complex12 = complex5.pow(complex9);
      double double1 = complex5.abs();
      Complex complex13 = complex6.cos();
      Complex complex14 = complex7.sin();
      Complex complex15 = complex8.tan();
      Complex complex16 = complex14.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.ZERO.multiply(1497);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.atan();
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex1.sinh();
      Complex complex7 = Complex.valueOf((double) 1497, (double) 1497);
      Complex complex8 = Complex.valueOf(2293.140812568);
      Complex complex9 = complex6.subtract((-417.84253078434));
      Complex complex10 = complex6.negate();
      Complex complex11 = complex9.I.add(complex4);
      double double0 = complex1.getReal();
      Complex complex12 = complex10.conjugate();
      Complex complex13 = complex12.ONE.cosh();
      Complex complex14 = complex12.ONE.conjugate();
      Complex complex15 = complex6.add(complex9);
      Complex complex16 = complex4.cos();
      Complex complex17 = complex9.I.divide(complex10);
      Complex complex18 = complex15.sqrt();
      Complex complex19 = complex15.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex0.I.createComplex(0.0, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.I.reciprocal();
      Complex complex7 = complex1.subtract(complex3);
      double double0 = complex0.abs();
      Complex complex8 = complex1.subtract(0.0);
      double double1 = complex4.getArgument();
      Complex complex9 = Complex.valueOf(Double.NaN, 586.71187933);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.INF.tanh();
      List<Complex> list0 = complex0.nthRoot(533);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.1524391174316406);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.I.multiply(complex0);
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.ONE.tanh();
      Complex complex6 = complex2.INF.createComplex(Double.NaN, 2.0);
      Complex complex7 = complex2.NaN.sqrt1z();
      Complex complex8 = complex1.createComplex(Double.NaN, 0.0);
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex9.ONE.log();
      int int1 = complex0.hashCode();
      Complex complex11 = complex3.acos();
      Object object0 = complex4.readResolve();
      Complex complex12 = complex10.multiply(1123);
      Complex complex13 = complex8.subtract(complex10);
      Complex complex14 = complex10.atan();
      List<Complex> list0 = complex4.nthRoot(525);
      Complex complex15 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2.602850370608209E-8));
      boolean boolean0 = complex0.ZERO.equals("");
      Complex complex1 = complex0.I.subtract((-2.602850370608209E-8));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex6.ONE.sqrt1z();
      double double0 = complex7.INF.getArgument();
      double double1 = complex6.getImaginary();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex0.asin();
      double double2 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3325.33704691421), (-3325.33704691421));
      Complex complex1 = complex0.I.subtract((-4186.307796957));
      Complex complex2 = complex1.NaN.multiply(0);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.INF.pow(0.0);
      Complex complex6 = complex4.NaN.pow((-4186.307796957));
      Complex complex7 = complex6.ZERO.sinh();
      double double0 = complex0.getReal();
      Complex complex8 = complex1.multiply((-3325.33704691421));
      Complex complex9 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-2814.930141935), (-2814.930141935));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.add((-2814.930141935));
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-682.41010677066));
      Complex complex5 = Complex.valueOf((-2814.930141935), (-2814.930141935));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(312.51);
      Complex complex2 = complex1.ZERO.tan();
      Object object0 = complex2.ONE.readResolve();
      boolean boolean0 = complex1.INF.equals(complex0);
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-609.34322366));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1030.0), (-1030.0));
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.sqrt();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex0.isNaN();
      Complex complex3 = complex0.sinh();
      boolean boolean2 = complex1.isInfinite();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.add(complex4);
      double double0 = complex4.ZERO.abs();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex5.tan();
      Complex complex10 = Complex.valueOf(0.0, (-1030.0));
      boolean boolean3 = complex4.isNaN();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex9.multiply(2.022795961737854E153);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.ZERO.exp();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = complex2.multiply(0.0);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 3469.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.tanh();
      int int0 = complex2.ONE.hashCode();
      Complex complex4 = complex2.NaN.add(complex0);
      Complex complex5 = complex0.multiply(2286);
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex5.add(1.9299691540987203E36);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = Complex.valueOf(0.0, (double) 2286);
      Complex complex9 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-646.31265150084);
      Complex complex0 = new Complex((-646.31265150084));
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-2305.488), (-2305.488));
      Complex complex1 = complex0.NaN.createComplex((-753.75712126), 1872.60704);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.createComplex(1, (-1412.366268));
      String string0 = complex4.I.toString();
      Object object0 = complex1.readResolve();
      Complex complex5 = Complex.valueOf((double) 1, (-2305.488));
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.I.equals(complex1);
      Complex complex2 = complex0.ZERO.divide(2126.705);
      Complex complex3 = complex0.asin();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.315860999413894E129), (-7.315860999413894E129));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.ONE.asin();
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = complex3.INF.add((-7.315860999413894E129));
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.I.sqrt1z();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.pow((-7.315860999413894E129));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-563.3366607247689), 1550.0628788091);
      Complex complex1 = complex0.reciprocal();
      int int0 = complex0.hashCode();
      Complex complex2 = Complex.valueOf((-737.1802508), (-563.3366607247689));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1635.501401078);
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1315.2995);
      Complex complex1 = complex0.NaN.log();
      ComplexField complexField0 = complex1.I.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2923.7294791205045, 2.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.conjugate();
      boolean boolean0 = complex0.equals("");
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 5.622626080395226E67;
      Complex complex0 = Complex.valueOf(5.622626080395226E67);
      double double1 = 0.0;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.NaN.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.multiply((-2887));
      Complex complex4 = null;
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex1.I.pow((-9.374695893307895E158));
      Complex complex6 = complex3.ONE.multiply(0.0);
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex1.ONE.atan();
      int int1 = complex3.hashCode();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.equals(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex2.add(complex3);
      String string0 = complex9.ONE.toString();
      Complex complex10 = complex8.log();
      Complex complex11 = complex9.exp();
      Complex complex12 = complex8.pow(complex2);
      boolean boolean1 = complex4.equals(")`VSLOL]hIHz_aX8ZX%");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.I.sin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex1.pow((-1235.7619388918));
      String string0 = complex0.ONE.toString();
      String string1 = complex0.toString();
      Complex complex5 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(9.014612241310916E-9, 9.014612241310916E-9);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.NaN.asin();
      Complex complex6 = complex3.INF.multiply((-621.17065425));
      Complex complex7 = Complex.valueOf(9.014612241310916E-9, (-2.0961068531216087E-7));
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex0.INF.pow(9.014612241310916E-9);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = Complex.valueOf((-2.0961068531216087E-7), 1438.0);
      Complex complex11 = complex10.ZERO.multiply((-4.41909071122557E-8));
      Complex complex12 = Complex.valueOf(918.7438413, 1107.2658709373557);
      Complex complex13 = complex9.divide(complex7);
      Complex complex14 = complex13.NaN.cosh();
      boolean boolean0 = complex7.isNaN();
      Complex complex15 = complex7.divide(1438.0);
      boolean boolean1 = complex7.isNaN();
      Complex complex16 = complex7.atan();
      Complex complex17 = complex2.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex18 = Complex.valueOf(6.283185307179586, (-4.41909071122557E-8));
      Complex complex19 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(2717.21037782525, 2717.21037782525);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      double double1 = complex0.abs();
      Complex complex3 = complex0.ZERO.multiply(0.7853981633974483);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1390.4448144602));
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.createComplex((-4.949331199790077E-8), (-4.949331199790077E-8));
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = complex6.ZERO.subtract(complex3);
      Complex complex8 = complex1.tan();
      double double0 = complex5.abs();
      String string0 = complex6.toString();
      ComplexField complexField1 = complex4.INF.getField();
      Complex complex9 = complex8.multiply(1);
      Complex complex10 = complex8.add(complex4);
      Complex complex11 = complex10.pow(0.0);
      Complex complex12 = complex3.pow(0.0);
      Complex complex13 = complex11.divide(complex10);
      boolean boolean0 = complex12.isInfinite();
      double double1 = complex0.getImaginary();
      Complex complex14 = Complex.valueOf(1.557407724654902, 0.0);
      List<Complex> list0 = complex9.nthRoot(1);
      ComplexField complexField2 = complex11.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.subtract(531.5417601);
      Complex complex3 = Complex.valueOf(531.5417601);
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.I.toString();
      Complex complex1 = null;
      Complex complex2 = complex0.ONE.multiply((-310));
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.I.subtract(0.0);
      Complex complex5 = complex4.I.multiply(complex0);
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.pow(0.0);
      double double0 = complex0.getImaginary();
      Complex complex4 = Complex.valueOf((-2590.41101545), 0.0);
      Complex complex5 = complex1.ZERO.divide(0.0);
      Complex complex6 = complex2.divide(0.0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.I.add(133.1988725138744);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex5.ONE.multiply(complex2);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex8 = complex6.INF.tan();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.I.multiply(complex6);
      Complex complex11 = complex1.conjugate();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.pow(Double.NaN);
      Complex complex5 = complex1.ONE.multiply(Double.NaN);
      Complex complex6 = complex1.INF.divide(1.1532102163380318E-7);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex1.log();
      Complex complex9 = complex1.cos();
      boolean boolean0 = complex3.isNaN();
      int int0 = complex8.hashCode();
      boolean boolean1 = complex8.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(432.1866527572, 432.1866527572);
      Complex complex1 = complex0.ZERO.cosh();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.NaN.sin();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.acos();
      List<Complex> list0 = complex3.INF.nthRoot(1378);
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex4.createComplex(432.1866527572, 432.1866527572);
      boolean boolean1 = complex5.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(205.48, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.add((-2900.398534116519));
      boolean boolean0 = complex2.ZERO.equals(complex0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.sin();
      double double0 = complex2.abs();
      Complex complex5 = complex4.divide((-2900.398534116519));
      Complex complex6 = complex5.I.multiply(0.0);
      Complex complex7 = complex6.ZERO.add(complex2);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.pow((-291.921818));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(5.86440876259637E-309, (-1.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.divide(complex1);
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex3.add((-1.0));
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex0.divide((-101.25));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2664);
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.NaN.createComplex(0.0, (-70.438727));
      String string0 = complex2.ONE.toString();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.NaN.exp();
      double double0 = complex8.getArgument();
      Object object0 = complex2.ZERO.readResolve();
      double double1 = 20.0;
      Complex complex9 = complex2.createComplex(20.0, 2664);
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex9.subtract(complex1);
      Complex complex14 = complex9.multiply(2664);
      double double2 = complex2.getReal();
      Complex complex15 = complex13.INF.asin();
      String string1 = complex10.toString();
      try { 
        complex3.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2481.69819021);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.divide(complex0);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-2025.0206596680375), 0.0);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.NaN.sqrt1z();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex1.multiply((-2025.0206596680375));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(5.6550495386976275E-9, 5.6550495386976275E-9);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(5.6550495386976275E-9);
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.acos();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = Complex.valueOf(0.0);
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.conjugate();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ONE.exp();
      List<Complex> list0 = complex4.NaN.nthRoot(1192);
      Complex complex5 = complex3.cosh();
      double double0 = complex5.getArgument();
      Complex complex6 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(231.66, 231.66);
      Complex complex1 = complex0.INF.add(231.66);
      Complex complex2 = complex0.I.divide(231.66);
      Complex complex3 = complex2.ONE.multiply((-635));
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      Object object0 = complex3.NaN.readResolve();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.ONE.sqrt1z();
      String string0 = complex0.toString();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = Complex.valueOf(231.66, 2523.041169438951);
      Complex complex12 = complex0.multiply((-635));
      double double0 = complex8.getArgument();
      boolean boolean0 = complex1.equals("(231.66, 231.66)");
      Complex complex13 = complex1.negate();
      Complex complex14 = complex13.reciprocal();
      Complex complex15 = complex0.createComplex(0.0, 1336.02);
      Complex complex16 = complex15.NaN.pow(1.4721424579620361);
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex17.multiply(0.0);
      Complex complex19 = complex14.divide(complex17);
      Complex complex20 = complex19.I.divide((-7.752519943329177E-294));
      Complex complex21 = complex19.reciprocal();
      Complex complex22 = complex10.exp();
      Complex complex23 = complex18.tan();
      try { 
        complex14.nthRoot((-635));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2838.073634201759));
      Complex complex1 = complex0.pow(Double.NaN);
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.I.divide((-2838.073634201759));
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex2.sqrt();
      Object object0 = new Object();
      boolean boolean1 = complex3.equals(object0);
      Complex complex7 = Complex.valueOf((-655.300936), (-2838.073634201759));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2339.43887976, 2339.43887976);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.log();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = Complex.valueOf(2339.43887976);
      Complex complex9 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.atan();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.NaN.add(0.0);
      Complex complex5 = complex2.add(complex0);
      double double0 = complex4.getReal();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.createComplex(0.0, 2.0);
      Complex complex3 = complex0.reciprocal();
      List<Complex> list0 = complex3.nthRoot(1362);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(2325.6316, 2325.6316);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex3.ZERO.pow(complex5);
      Complex complex7 = complex1.NaN.tanh();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.multiply(0);
      Complex complex10 = complex8.ONE.pow(complex4);
      List<Complex> list0 = complex8.nthRoot(1559);
      Object object0 = complex6.readResolve();
      Complex complex11 = Complex.valueOf((double) 1559, 2325.6316);
      double double0 = complex3.getArgument();
      Complex complex12 = complex2.add(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex7.cos();
      int int0 = complex11.hashCode();
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.637945686485334E-229);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(5.637945686485334E-229, 0.0);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex2.ZERO.sqrt();
      double double0 = complex4.ZERO.getArgument();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex6 = complex4.divide(complex1);
      Complex complex7 = complex6.ONE.divide(complex3);
      Complex complex8 = complex2.ONE.cos();
      double double1 = complex6.I.getArgument();
      double double2 = complex2.getImaginary();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.createComplex(1995.388405356, 1995.388405356);
      Complex complex2 = complex1.INF.divide(1995.388405356);
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex3.divide(complex1);
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex3.I.sqrt();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex13.I.acos();
      Complex complex15 = complex14.I.exp();
      Complex complex16 = complex12.sqrt1z();
      Complex complex17 = complex4.acos();
      Complex complex18 = complex16.sin();
      Complex complex19 = complex1.add(1995.388405356);
      Complex complex20 = complex18.INF.createComplex(0.0, 0.0);
      Complex complex21 = complex19.multiply(0.0);
      Complex complex22 = complex18.sin();
      Complex complex23 = complex18.add(complex9);
      Complex complex24 = complex4.pow(complex3);
      Complex complex25 = complex17.sin();
      Complex complex26 = complex25.INF.reciprocal();
      Complex complex27 = complex7.multiply(1995.388405356);
      Complex complex28 = complex19.reciprocal();
      Complex complex29 = complex12.divide(complex7);
      Complex complex30 = complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(2912.822956621694);
      Complex complex3 = complex2.I.divide(complex1);
      boolean boolean0 = complex1.ZERO.equals(complex2);
      double double0 = 532.66999546;
      Complex complex4 = Complex.valueOf(5.9994277301267294E175, 532.66999546);
      double double1 = complex4.getArgument();
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex4.I.createComplex((-243.67872554366613), 5.9994277301267294E175);
      boolean boolean1 = complex0.equals("<D&");
      Complex complex7 = complex0.divide(0.0);
      double double2 = complex7.getArgument();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex0.subtract(Double.NaN);
      Complex complex10 = complex9.I.subtract(Double.NaN);
      Complex complex11 = complex8.ONE.tan();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      int int0 = complex12.hashCode();
      ComplexField complexField0 = complex10.getField();
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex13.reciprocal();
      try { 
        complex8.NaN.nthRoot((-465));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -465
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.I.divide(complex2);
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex1.multiply(complex6);
      Complex complex8 = complex5.acos();
      Complex complex9 = complex5.ZERO.subtract(complex2);
      Object object0 = complex1.readResolve();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex8.sinh();
      boolean boolean0 = complex8.isNaN();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex13.ZERO.subtract(0.0);
      Complex complex15 = complex13.ZERO.log();
      Complex complex16 = complex15.ONE.conjugate();
      Complex complex17 = complex1.multiply(complex3);
      Complex complex18 = complex9.createComplex(285.4856, 285.4856);
      Complex complex19 = complex9.tan();
      boolean boolean1 = complex9.isInfinite();
      Complex complex20 = complex10.divide(0.0);
      Complex complex21 = complex5.pow(1196.5043);
      Complex complex22 = Complex.valueOf(0.32199859619140625);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-397.278483379804));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.pow(0.0);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.ONE.equals(object0);
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex4.ONE.sqrt();
      int int1 = complex1.INF.hashCode();
      String string0 = complex1.I.toString();
      double double0 = complex1.getReal();
      Complex complex6 = Complex.valueOf(0.0);
      String string1 = complex2.toString();
      boolean boolean1 = complex1.isNaN();
      Complex complex7 = complex2.multiply(0.0);
      boolean boolean2 = complex0.equals(complex1);
      Complex complex8 = complex5.asin();
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex8.INF.negate();
      Complex complex11 = complex2.conjugate();
      boolean boolean3 = complex11.ONE.equals(complex6);
      Object object1 = complex6.readResolve();
      ComplexField complexField0 = complex7.getField();
      Complex complex12 = complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex4.INF.divide(0.0);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ONE.divide(0.0);
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = complex2.NaN.negate();
      double double0 = complex10.ONE.abs();
      double double1 = complex2.abs();
      Complex complex12 = complex4.divide(0.0);
      Complex complex13 = complex2.I.add(complex6);
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex1.acos();
      double double2 = complex3.getArgument();
      boolean boolean0 = complex7.isNaN();
      Complex complex16 = complex6.add(complex0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.NaN.log();
      double double0 = complex3.INF.abs();
      Complex complex5 = complex2.NaN.atan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex6 = Complex.valueOf(511.3073520435845, (-20.0));
      Complex complex7 = complex1.log();
      Complex complex8 = complex1.I.add(complex6);
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex2.pow((-20.0));
      Complex complex11 = complex10.ONE.add(511.3073520435845);
      double double1 = complex1.getReal();
      Complex complex12 = complex8.sqrt();
      Complex complex13 = complex9.INF.sqrt1z();
      Complex complex14 = complex13.multiply(346);
      Object object1 = complex12.ZERO.readResolve();
      Complex complex15 = complex9.sqrt();
      Complex complex16 = complex15.INF.multiply(1.0);
      double double2 = complex5.abs();
      Complex complex17 = complex7.multiply(complex5);
      Complex complex18 = complex17.acos();
      Complex complex19 = complex18.NaN.sqrt1z();
      int int0 = complex1.hashCode();
      Complex complex20 = complex4.multiply(43);
      Complex complex21 = Complex.valueOf(511.3073520435845, (-20.0));
      double double3 = complex3.getArgument();
      Complex complex22 = complex8.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex0.isNaN();
  }
}
