/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:37:38 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2100.0, 1057.2471187618626);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.NaN.subtract(complex1);
      Complex complex6 = new Complex(0.2018241584300995, (-20.0));
      Complex complex7 = complex6.pow((-20.0));
      ComplexField complexField0 = complex0.ONE.getField();
      boolean boolean0 = complex7.equals(complex0);
      Complex complex8 = complex1.ZERO.acos();
      Complex complex9 = complex0.divide(complex6);
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(271.2);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.INF.add(complex2);
      Complex complex4 = complex2.INF.reciprocal();
      Complex complex5 = complex2.pow(271.2);
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex1.I.sqrt1z();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(1.7465059757232666);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = Complex.NaN;
      boolean boolean0 = complex0.ONE.equals(complex5);
      Complex complex6 = complex3.I.conjugate();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = new Complex(1.7465059757232666);
      Complex complex9 = complex0.I.divide(3.3888561478632076E-8);
      Complex complex10 = complex8.INF.conjugate();
      Complex complex11 = complex4.INF.exp();
      boolean boolean1 = complex7.I.equals(complex8);
      Complex complex12 = complex3.ZERO.cos();
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex1.INF.sqrt();
      Complex complex15 = complex0.asin();
      Complex complex16 = Complex.valueOf(0.0);
      boolean boolean2 = complex0.isNaN();
      double double0 = complex14.getImaginary();
      Complex complex17 = complex4.log();
      Complex complex18 = complex3.divide((-523.1603997));
      Complex complex19 = complex1.I.add(Double.NaN);
      Complex complex20 = complex16.sin();
      double double1 = complex20.NaN.abs();
      Complex complex21 = complex6.sqrt();
      String string0 = complex5.toString();
      Complex complex22 = complex18.exp();
      Complex complex23 = complex2.atan();
      Complex complex24 = complex2.asin();
      Complex complex25 = complex24.divide(0.0);
      Complex complex26 = complex21.conjugate();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex0.INF.add((-3282.3528679458));
      Complex complex6 = Complex.ONE;
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex7.multiply((-3738));
      Complex complex9 = complex0.multiply(185);
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex10.pow((-3282.3528679458));
      Complex complex12 = complex2.divide(complex9);
      Complex complex13 = complex11.ZERO.acos();
      double double0 = complex2.getImaginary();
      Complex complex14 = complex9.NaN.tan();
      double double1 = complex5.getReal();
      Complex complex15 = Complex.valueOf((double) (-3738), (-1.0));
      double double2 = complex12.getReal();
      ComplexField complexField1 = complex2.getField();
      double double3 = complex10.getArgument();
      Complex complex16 = complex1.reciprocal();
      Complex complex17 = complex11.divide((-1.0));
      Complex complex18 = Complex.valueOf(Double.NEGATIVE_INFINITY, Double.NaN);
      Complex complex19 = complex18.INF.subtract(0.0);
      Complex complex20 = complex2.sinh();
      Complex complex21 = complex2.cosh();
      ComplexField complexField2 = complex21.NaN.getField();
      Complex complex22 = complex4.tanh();
      Object object0 = complex22.ONE.readResolve();
      Complex complex23 = complex0.negate();
      Complex complex24 = complex23.NaN.acos();
      Complex complex25 = complex19.exp();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1359.0), (-1359.0));
      Complex complex1 = complex0.ZERO.multiply(31);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.createComplex((-1359.0), (-1359.0));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.multiply((double) 31);
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex1.NaN.atan();
      Complex complex6 = complex0.log();
      boolean boolean0 = complex6.equals(complex3);
      boolean boolean1 = complex0.equals(complex3);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.getReal();
      int int0 = complex1.hashCode();
      double double1 = complex0.ONE.getArgument();
      Complex complex2 = Complex.valueOf(759.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.NaN.divide((-4956.6182));
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.atan();
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex1.reciprocal();
      List<Complex> list0 = complex5.ZERO.nthRoot(1);
      Complex complex9 = complex5.pow(2580.1022639321095);
      Complex complex10 = Complex.valueOf(759.0, 5746.078146785536);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 1;
      List<Complex> list0 = complex0.I.nthRoot(1);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.INF.toString();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-933.05684));
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.cos();
      double double0 = complex1.ONE.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex1.readResolve();
      Complex complex2 = Complex.valueOf((-3748.16121));
      double double1 = complex0.abs();
      Complex complex3 = complex1.ONE.multiply(1);
      Complex complex4 = complex1.subtract(5.3331719086630523E-8);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.NaN.sqrt1z();
      String string0 = complex3.toString();
      Complex complex7 = complex5.I.sqrt();
      double double2 = complex5.ONE.abs();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex5.negate();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 1);
      double double3 = complex3.abs();
      double double4 = complex10.abs();
      Complex complex12 = complex5.divide(complex0);
      String string1 = complex12.toString();
      boolean boolean0 = complex12.isNaN();
      Complex complex13 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1162.9348405713, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.conjugate();
      String string0 = complex1.ONE.toString();
      double double0 = complex1.abs();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex4.INF.negate();
      double double1 = complex5.I.getArgument();
      Complex complex6 = complex3.ZERO.multiply(2376.2);
      Complex complex7 = complex0.subtract(1162.9348405713);
      Complex complex8 = complex7.NaN.sqrt1z();
      Object object0 = new Object();
      boolean boolean0 = complex4.ONE.equals(object0);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex9.I.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex1.NaN.reciprocal();
      boolean boolean1 = complex3.isInfinite();
      double double2 = complex1.abs();
      Complex complex12 = complex0.cos();
      double double3 = complex3.abs();
      int int0 = complex12.hashCode();
      boolean boolean2 = complex3.isInfinite();
      Complex complex13 = complex7.multiply(2095.797554);
      Complex complex14 = complex0.I.multiply(2376.2);
      Complex complex15 = complex14.INF.cos();
      Complex complex16 = complex13.ONE.divide((-2129.6013761831928));
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = complex13.negate();
      boolean boolean3 = complex3.isInfinite();
      Object object1 = complex4.readResolve();
      Complex complex18 = complex6.add(complex17);
      double double4 = complex9.getReal();
      String string1 = complex6.toString();
      Complex complex19 = complex18.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.divide(326.9352826847116);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex1.I.sinh();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex0.ONE.createComplex((-951.2), (-951.2));
      Complex complex8 = Complex.I;
      Complex complex9 = complex1.I.pow(complex7);
      Complex complex10 = complex0.divide(complex8);
      Complex complex11 = complex10.I.divide(complex0);
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.INF.cos();
      Complex complex15 = complex1.I.conjugate();
      Complex complex16 = complex11.negate();
      String string0 = complex13.toString();
      Complex complex17 = complex5.divide(complex10);
      Complex complex18 = complex1.tanh();
      double double0 = complex18.getArgument();
      Complex complex19 = complex9.tanh();
      Complex complex20 = complex19.negate();
      boolean boolean0 = complex8.isNaN();
      Complex complex21 = complex14.cos();
      Complex complex22 = complex4.tanh();
      List<Complex> list0 = complex12.nthRoot(1);
      double double1 = complex21.getArgument();
      Complex complex23 = complex16.divide(2.0);
      Complex complex24 = complex23.multiply(3142);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(Double.NaN, Double.NaN);
      List<Complex> list0 = complex1.INF.nthRoot(1321);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.multiply(1.5851251724785243E286);
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = complex2.ONE.negate();
      Complex complex8 = complex1.createComplex(Double.NaN, 1321);
      Complex complex9 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(2.0156621983963848E77, 2.0156621983963848E77);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-379.7), 0.3540347218513489);
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.I.subtract(2.0156621983963848E77);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.pow(complex5);
      String string0 = complex0.toString();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex10.NaN.divide(complex5);
      double double0 = complex8.getArgument();
      Complex complex12 = complex11.I.conjugate();
      Complex complex13 = complex12.ONE.createComplex((-618.6934916068918), 1.5707963267948966);
      Complex complex14 = complex10.negate();
      Complex complex15 = complex8.ZERO.cosh();
      Complex complex16 = complex9.conjugate();
      Complex complex17 = complex16.INF.log();
      double double1 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1199.08));
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.ZERO.subtract(20.0);
      Complex complex5 = complex4.INF.multiply(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex4.sinh();
      double double0 = complex4.ONE.abs();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex8.ONE.multiply(20.0);
      Complex complex11 = complex3.multiply(Double.NaN);
      double double1 = complex0.getArgument();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex12.ONE.pow(complex2);
      Complex complex14 = complex12.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-332.9694194));
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex2 = complex1.ZERO.pow(1634.3);
      Complex complex3 = complex2.divide(1634.3);
      Complex complex4 = complex0.createComplex(20.0, (-332.9694194));
      Complex complex5 = complex0.createComplex(360.74, (-332.9694194));
      Complex complex6 = complex5.ZERO.pow(0.2749055027961731);
      String string0 = complex6.I.toString();
      Complex complex7 = complex5.INF.multiply(complex3);
      Complex complex8 = complex5.subtract(complex3);
      Complex complex9 = complex8.I.subtract(20.0);
      Complex complex10 = complex3.atan();
      Complex complex11 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex1.divide((double) 1);
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex2.ONE.multiply((double) 1);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex6.INF.log();
      boolean boolean0 = complex6.equals(complex1);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.divide(complex2);
      Complex complex10 = complex0.pow(complex1);
      ComplexField complexField0 = complex9.INF.getField();
      Complex complex11 = complex10.ONE.asin();
      Complex complex12 = complex10.INF.conjugate();
      Complex complex13 = Complex.valueOf(0.0);
      double double1 = complex2.abs();
      Complex complex14 = complex5.negate();
      Complex complex15 = complex9.negate();
      Complex complex16 = complex15.INF.tanh();
      Complex complex17 = complex0.negate();
      boolean boolean1 = complex5.equals(complex15);
      ComplexField complexField1 = complex5.getField();
      Complex complex18 = complex15.log();
      Complex complex19 = complex18.I.negate();
      String string0 = complex9.toString();
      Complex complex20 = complex2.subtract(0.0);
      Complex complex21 = complex4.multiply(complex14);
      Complex complex22 = complex1.add(0.0);
      Complex complex23 = complex18.createComplex(2411.2789886, 1.7329144477844238);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(1.1815196363705356E-8);
      Complex complex2 = complex1.INF.tan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-655.855288767), (-4284.344897367247));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.add((-4284.344897367247));
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = new Complex((-655.855288767), (-4284.344897367247));
      Complex complex6 = complex0.ZERO.add(complex5);
      Complex complex7 = complex0.sin();
      double double0 = complex1.getReal();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex7.add(761.45589138367);
      try { 
        complex9.nthRoot((-1794));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,794
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(1397.6414049862942);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex0.ONE.createComplex((-4.335116707228395E-8), 1450.0);
      Complex complex6 = complex0.I.createComplex(1397.6414049862942, (-4.335116707228395E-8));
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex1.cos();
      Complex complex8 = Complex.valueOf((-5874.8815));
      double double0 = complex4.getReal();
      Complex complex9 = complex3.add(1397.6414049862942);
      Complex complex10 = complex0.log();
      double double1 = complex10.NaN.abs();
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex0.equals(complex6);
      boolean boolean2 = complex10.isNaN();
      Complex complex11 = complex3.add(0.0);
      Complex complex12 = complex1.multiply((-449));
      Complex complex13 = complex7.divide(complex11);
      Complex complex14 = complex12.tan();
      double double2 = complex6.abs();
      Object object1 = complex5.readResolve();
      Complex complex15 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.add((-228.688501634681));
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex1.sqrt();
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex3.divide((-228.688501634681));
      boolean boolean0 = complex6.I.equals(complex4);
      Complex complex7 = complex5.reciprocal();
      double double0 = complex2.I.abs();
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex8.I.atan();
      Complex complex10 = complex2.multiply(complex3);
      Complex complex11 = complex1.I.reciprocal();
      Complex complex12 = complex0.pow(0.0);
      Complex complex13 = complex12.ZERO.multiply(complex5);
      Complex complex14 = complex12.negate();
      String string1 = complex0.toString();
      Complex complex15 = complex7.subtract(61.4036853);
      Complex complex16 = Complex.valueOf((-228.688501634681), 0.0);
      Complex complex17 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex0.NaN.subtract(Double.NaN);
      Complex complex5 = complex0.sqrt1z();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex5.divide(0.0);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex5.subtract(complex4);
      Complex complex10 = complex4.sqrt();
      Complex complex11 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex12 = complex3.multiply(complex11);
      double double0 = complex5.getArgument();
      Complex complex13 = complex10.log();
      Complex complex14 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = (-1424.469154019604);
      Complex complex0 = new Complex((-1424.469154019604));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.tanh();
      int int0 = complex1.I.hashCode();
      try { 
        complex1.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-598.1), 0.0);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2597.892), (-2597.892));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.sqrt();
      String string0 = complex0.toString();
      Complex complex4 = complex0.add((-2597.892));
      double double0 = complex3.getReal();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.add(23.195711887982277);
      Complex complex8 = complex4.ONE.negate();
      double double1 = complex4.abs();
      Complex complex9 = complex5.add(complex4);
      double double2 = complex5.getImaginary();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex3.equals(complex10);
      ComplexField complexField0 = complex9.I.getField();
      Complex complex11 = complex3.pow(Double.POSITIVE_INFINITY);
      boolean boolean1 = complex9.equals(complex11);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex9.sinh();
      Complex complex14 = complex9.cosh();
      Complex complex15 = complex3.sin();
      Complex complex16 = complex14.divide(0.0);
      Complex complex17 = complex16.NaN.divide(5809.063110202884);
      Complex complex18 = complex12.add(complex5);
      Complex complex19 = complex16.tanh();
      Complex complex20 = complex4.negate();
      boolean boolean2 = complex3.equals(complex20);
      boolean boolean3 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1.4561530066010593E152));
      Complex complex1 = Complex.valueOf((-1.4561530066010593E152));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = new Complex((-1.4561530066010593E152));
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex0.ZERO.multiply(0.0);
      Complex complex7 = complex6.subtract(complex4);
      Complex complex8 = complex7.ONE.pow(0.0);
      Complex complex9 = complex0.ONE.divide(0.0);
      Complex complex10 = complex5.ZERO.add(Double.NaN);
      List<Complex> list0 = complex0.nthRoot(1100);
      Complex complex11 = complex3.tan();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex11.ZERO.tanh();
      String string0 = complex3.toString();
      Complex complex14 = Complex.valueOf(Double.NaN);
      Complex complex15 = complex14.INF.atan();
      Complex complex16 = complex7.log();
      Complex complex17 = complex7.divide(complex14);
      boolean boolean0 = complex9.isInfinite();
      Object object0 = complex12.readResolve();
      boolean boolean1 = complex12.equals(object0);
      double double0 = complex12.getArgument();
      Complex complex18 = complex7.subtract(2010.624705214);
      Complex complex19 = complex8.multiply(1100);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.cos();
      double double0 = complex1.I.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex2.ONE.createComplex(0.0, 0.0);
      Complex complex6 = complex2.I.atan();
      Complex complex7 = complex5.subtract(complex3);
      Complex complex8 = complex7.INF.subtract(complex5);
      double double1 = complex7.I.getArgument();
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ONE.sqrt1z();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex3.atan();
      try { 
        complex5.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-2500.0));
      Complex complex2 = complex1.subtract((-2500.0));
      Complex complex3 = complex2.INF.sin();
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex1.getImaginary();
      Complex complex4 = Complex.valueOf(Double.NaN, (-2500.0));
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.add(Double.NaN);
      double double1 = complex5.getArgument();
      Complex complex7 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-6.930491127388755E-8));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2.260047972865202E-8));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.divide((-2.260047972865202E-8));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-431.1));
      Complex complex1 = Complex.ZERO;
      int int0 = (-198);
      Complex complex2 = complex0.I.multiply((-198));
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex0.pow(complex1);
      double double0 = (-3865.7843914188466);
      Complex complex5 = complex1.INF.divide((-3865.7843914188466));
      Complex complex6 = Complex.valueOf((double) (-198), 6.283185307179586);
      double double1 = 443.00422794485445;
      Complex complex7 = complex4.divide(443.00422794485445);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.acos();
      boolean boolean0 = complex5.NaN.equals(complex8);
      try { 
        complex4.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-3034.8584424740616));
      Complex complex1 = complex0.NaN.add((-3034.8584424740616));
      Complex complex2 = complex1.NaN.tanh();
      double double0 = complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.ONE.negate();
      Complex complex5 = complex0.atan();
      Object object0 = complex5.INF.readResolve();
      int int0 = complex1.hashCode();
      double double1 = complex0.getArgument();
      Complex complex6 = Complex.valueOf(1.0, (-702.0));
      double double2 = complex0.getImaginary();
      Complex complex7 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      double double0 = complex1.getArgument();
      Complex complex2 = Complex.valueOf(0.0, (-2364.0365902469));
      Complex complex3 = complex2.INF.subtract(Double.NaN);
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = Complex.valueOf((-2.7527887552743672E-8));
      double double1 = complex4.ZERO.abs();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex6.INF.multiply(complex1);
      Complex complex9 = complex2.sin();
      Complex complex10 = complex6.sinh();
      Object object0 = complex3.readResolve();
      Complex complex11 = complex2.createComplex((-2364.0365902469), (-2364.0365902469));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.ZERO.tan();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex5.NaN.cos();
      Object object0 = complex6.INF.readResolve();
      Complex complex10 = complex5.acos();
      double double1 = complex10.getArgument();
      Complex complex11 = complex10.log();
      Complex complex12 = complex11.I.divide(Double.NaN);
      Complex complex13 = complex4.divide((-1797.1313798143024));
      Complex complex14 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(Double.NaN);
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1203.7521587881));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ONE.createComplex(1174, (-815.3));
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex2.I.sinh();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex0.INF.sinh();
      Complex complex8 = complex7.NaN.subtract(complex2);
      List<Complex> list0 = complex0.nthRoot(1174);
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex1.abs();
      Complex complex9 = complex6.add((double) 1174);
      Complex complex10 = complex0.atan();
      Complex complex11 = complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.subtract(2.049863815307617);
      Complex complex3 = complex2.ZERO.subtract(2.049863815307617);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.multiply(0);
      Complex complex7 = complex0.ONE.acos();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(573.9276659569);
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.INF.divide(1152.5628);
      Complex complex4 = complex3.INF.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex5 = Complex.valueOf((-6.977226702440138E-9));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.NaN.createComplex(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex5 = complex3.I.pow((-1720.79955172));
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex0.ZERO.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex9 = complex1.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex1.ONE.cos();
      double double0 = complex10.I.abs();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      String string0 = complex10.ONE.toString();
      Complex complex13 = Complex.valueOf(0.0, (-2622.0));
      Object object0 = new Object();
      boolean boolean0 = complex10.equals(object0);
      Complex complex14 = complex1.asin();
      Complex complex15 = complex8.asin();
      Complex complex16 = complex14.divide((-1720.79955172));
      Complex complex17 = complex12.sinh();
      Complex complex18 = complex11.atan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(9.865115839786888E-9, 9.865115839786888E-9);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.exp();
      double double0 = complex3.abs();
      Complex complex4 = complex3.pow(9.865115839786888E-9);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex3.INF.negate();
      Complex complex7 = complex3.subtract(1.0);
      Complex complex8 = complex4.createComplex(1.0, 1.0000000098651158);
      double double1 = complex3.getArgument();
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex0.I.createComplex(1357.29303, 3782.0);
      Complex complex6 = complex0.I.add(3214.757);
      Complex complex7 = complex6.ONE.divide((-20.0));
      Complex complex8 = complex6.INF.pow(0.0);
      Complex complex9 = complex0.divide(1.0);
      Complex complex10 = complex9.asin();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      Complex complex11 = complex7.cos();
      Complex complex12 = Complex.I;
      boolean boolean1 = complex10.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(463.26590002818, 463.26590002818);
      String string0 = complex0.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(463.26590002818);
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf(463.26590002818);
      Complex complex5 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2104.22353);
      Complex complex1 = new Complex(2104.22353);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.72220314694275E58, 1.2384581565856934);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = new Complex(1.2384581565856934);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = Complex.valueOf(1.2384581565856934, 8.72220314694275E58);
      Complex complex5 = complex3.cosh();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex5.ONE.equals(object1);
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex1.subtract(complex3);
      Complex complex9 = Complex.valueOf((-1950.4568796365172));
      Complex complex10 = complex4.cosh();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex11.sqrt();
      Complex complex13 = Complex.valueOf(6.751460509863465E-258, (-1950.4568796365172));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3382.745506157);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.0, 3382.745506157);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 70.450746);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.pow(6.283185307179586);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = null;
      Complex complex2 = complex0.ONE.exp();
      try { 
        complex2.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1454.971748441234), (-1454.971748441234));
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex0.NaN.negate();
      int int0 = complex0.ONE.hashCode();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(3673.1328339, 3673.1328339);
      Complex complex1 = complex0.I.sin();
      boolean boolean0 = complex1.NaN.equals(complex0);
      Complex complex2 = complex1.ZERO.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex3.subtract(775.99);
      int int0 = complex1.hashCode();
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.acos();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.subtract(0.0);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-353.0048438901), 0.0);
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.I.multiply((-353.0048438901));
      double double0 = complex0.getArgument();
      boolean boolean0 = complex2.isNaN();
      double double1 = complex1.abs();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex3.divide(0.0);
      Complex complex8 = complex6.divide(0.0);
      boolean boolean1 = complex3.isInfinite();
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex7.createComplex((-2647.1052711), 1778.9878702269473);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-262.6921666700074));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.tanh();
      Object object0 = new Object();
      boolean boolean0 = complex2.I.equals(object0);
      Complex complex3 = complex0.add((-741.2274073));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex1.multiply((-741.2274073));
      Complex complex7 = new Complex((-1039.6906751303));
      Complex complex8 = complex0.divide(complex7);
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex0.divide((-837.822));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2539.956));
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ONE.subtract(788.0551125036);
      double double0 = complex0.abs();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.multiply(2539.956);
      double double1 = complex4.ZERO.getArgument();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-193.2047541));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex1.multiply(156);
      Complex complex6 = complex0.INF.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex3.multiply(156);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-428.46912733623));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.divide(1.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.I.createComplex(1.0, 1.0);
      ComplexField complexField0 = complex3.getField();
      Object object0 = complex1.readResolve();
      double double0 = complex0.INF.abs();
      ComplexField complexField1 = complex0.ZERO.getField();
      Complex complex6 = complex0.NaN.divide(complex3);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6507574319839478);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.multiply(1864);
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.INF.pow(0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex5.NaN.multiply(complex2);
      Complex complex9 = complex2.createComplex(0.0, 1750.5095256823);
      Complex complex10 = complex7.ONE.sin();
      Complex complex11 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-406.0));
      List<Complex> list0 = complex0.ZERO.nthRoot(93);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3259.09617, 3259.09617);
      Object object0 = complex0.INF.readResolve();
      Object object1 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.NaN.atan();
      double double0 = complex1.getArgument();
      double double1 = complex0.abs();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex3.log();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3.479042513414447E-9), (-1054.16));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 0;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ZERO.cosh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ZERO.pow(complex1);
      boolean boolean1 = complex0.equals(object0);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.043280094115832E-8);
      Complex complex1 = complex0.INF.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.NaN.toString();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1262.06986374);
      Complex complex1 = complex0.I.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.divide(2.757030889767851E-8);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1906.2987135));
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = Complex.ONE;
      String string0 = complex5.I.toString();
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-3384.0334));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.subtract((-1889.924336448664));
      Complex complex5 = complex2.divide((-4.370104767451421E-10));
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex2.log();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-454.5691109277885), (-454.5691109277885));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-320.924406));
      Complex complex1 = Complex.ONE;
      List<Complex> list0 = complex1.NaN.nthRoot(2034);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.add((-2505.9584811714876));
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex3.I.cosh();
      List<Complex> list1 = complex5.ZERO.nthRoot(1);
      double double0 = complex0.getReal();
      Complex complex6 = complex1.multiply(complex0);
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1262.06986374);
      Complex complex1 = complex0.divide(2.757030889767851E-8);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.ZERO.equals(object0);
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.ZERO.sinh();
      double double1 = complex4.getReal();
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.subtract(4014.335397475542);
      Complex complex3 = complex1.log();
      List<Complex> list0 = complex0.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-326.007884));
      Complex complex2 = Complex.valueOf(140.387845362905);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.NaN.conjugate();
      Complex complex6 = complex4.I.sin();
      double double0 = complex2.getReal();
      Complex complex7 = complex5.NaN.subtract(0.0);
      boolean boolean0 = complex1.equals(complex0);
      double double1 = complex6.abs();
      Complex complex8 = complex5.divide(complex6);
      Complex complex9 = complex5.subtract(1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ONE.hashCode();
      int int1 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(347.6, 5.05239404378821E31);
      Complex complex1 = complex0.NaN.reciprocal();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.cosh();
      Object object0 = new Object();
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex2.INF.sinh();
      boolean boolean0 = complex5.INF.equals(object0);
      Complex complex7 = complex5.pow(complex4);
      Complex complex8 = complex3.createComplex(0.0, 5.05239404378821E31);
      Complex complex9 = complex8.sqrt();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 449.9146501946);
      Complex complex1 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ZERO.log();
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex2.INF.createComplex(0.0, (-2.0183663375378704E-8));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.ZERO.multiply(complex4);
      Complex complex6 = complex1.NaN.add((-2446.486724));
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.ONE.equals(object0);
      Complex complex7 = complex6.I.multiply((-98));
      Complex complex8 = complex2.pow(complex0);
      Complex complex9 = complex0.ONE.add(complex1);
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex10.INF.cos();
      boolean boolean1 = complex0.isNaN();
      Complex complex12 = complex11.pow(complex1);
      Complex complex13 = complex9.add(complex0);
      Complex complex14 = complex2.divide(Double.POSITIVE_INFINITY);
      Object object1 = complex2.readResolve();
      Complex complex15 = complex11.pow(1.0);
      Complex complex16 = complex9.negate();
      Complex complex17 = Complex.valueOf(0.0, (-2446.486724));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.ONE.multiply(1.4226751327514648);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.valueOf((-2298.25288771), (-2298.25288771));
      Complex complex3 = complex0.tanh();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3360.0622355), (-3360.0622355));
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(982.0, (-3360.0622355));
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex0.divide(complex1);
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex0.ONE.pow((-7.187922490287331E-8));
      double double0 = complex4.ONE.getArgument();
      Complex complex5 = complex0.INF.pow(complex1);
      Complex complex6 = complex2.ONE.sinh();
      double double1 = complex0.abs();
      Complex complex7 = complex4.INF.tanh();
      Complex complex8 = complex6.I.multiply((-1384));
      boolean boolean0 = complex1.ONE.equals(complex5);
      Complex complex9 = Complex.valueOf((-30.796730289), 0.0);
      int int0 = complex2.hashCode();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex0.INF.sinh();
      Complex complex12 = complex5.exp();
      double double2 = complex3.abs();
      Complex complex13 = complex0.I.add(0.0);
      Complex complex14 = Complex.valueOf(0.0);
      int int1 = complex2.hashCode();
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex1.tanh();
      List<Complex> list0 = complex16.nthRoot(7);
      Complex complex17 = complex6.log();
      Complex complex18 = Complex.valueOf(0.7615941559557649, 0.0);
      Complex complex19 = complex2.conjugate();
      Complex complex20 = Complex.valueOf((-7.187922490287331E-8), 300.0868);
      Complex complex21 = complex5.atan();
      int int2 = complex11.hashCode();
      Complex complex22 = complex17.log();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1521.512448754));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = Complex.valueOf(1943.8536360353537, (-1521.512448754));
      Complex complex5 = complex0.divide(1878.62934535599);
      Complex complex6 = complex2.I.multiply((-6359));
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.INF.divide(complex1);
      String string0 = complex7.INF.toString();
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(2.092571258544922, Double.POSITIVE_INFINITY);
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex3.INF.pow(1.142035961151123);
      Complex complex5 = complex4.INF.divide(2201.5);
      Complex complex6 = complex0.I.reciprocal();
      Complex complex7 = complex6.tanh();
      String string0 = complex7.I.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex2.divide(complex3);
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex8.I.sqrt();
      boolean boolean0 = complex8.isNaN();
      Complex complex11 = complex4.exp();
      Complex complex12 = complex11.ZERO.tan();
      Object object0 = complex11.ZERO.readResolve();
      Complex complex13 = complex6.NaN.sin();
      Complex complex14 = Complex.valueOf(5.883385169571802E-83, 5.883385169571802E-83);
      Complex complex15 = complex2.add(0.0);
      Complex complex16 = complex6.sqrt1z();
      Complex complex17 = complex3.sin();
      Complex complex18 = complex5.multiply(complex9);
      double double1 = complex0.abs();
      Object object1 = complex14.readResolve();
      Complex complex19 = complex18.NaN.add((-2117.98483263858));
      Complex complex20 = complex18.sqrt();
      Complex complex21 = complex20.exp();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.INF.sinh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.atan();
      double double0 = complex0.getReal();
      Complex complex4 = complex2.multiply(1);
      double double1 = complex1.getReal();
      Complex complex5 = complex1.tan();
      List<Complex> list0 = complex0.nthRoot(187);
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      boolean boolean0 = complex1.I.equals(complex0);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.I.add((-1049.42731568));
      ComplexField complexField0 = complex5.INF.getField();
      boolean boolean1 = complex0.equals("(RVmi!0 ");
      Complex complex6 = complex5.atan();
      int int0 = complex5.I.hashCode();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex1.exp();
      boolean boolean2 = complex5.isNaN();
      Complex complex9 = complex8.ZERO.reciprocal();
      Complex complex10 = complex8.ONE.add(complex2);
      Complex complex11 = complex3.createComplex((-1049.42731568), (-639.3776462));
      Complex complex12 = complex3.pow(complex8);
      Complex complex13 = complex12.ZERO.cosh();
      Complex complex14 = complex11.ZERO.sin();
      Complex complex15 = complex11.multiply(17);
      Complex complex16 = complex15.NaN.log();
      Complex complex17 = complex4.pow(complex5);
      Complex complex18 = complex17.ONE.tan();
      boolean boolean3 = complex15.equals(complex16);
      boolean boolean4 = complex2.isInfinite();
      double double0 = complex2.getImaginary();
      double double1 = complex12.getImaginary();
      Complex complex19 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.ZERO.equals((Object) null);
      Complex complex1 = complex0.ZERO.createComplex((-1361.6108), 2782.1);
      List<Complex> list0 = complex1.NaN.nthRoot(713);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.ONE.sqrt();
      double double0 = complex4.ZERO.abs();
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex6.NaN.pow(875.4568);
      boolean boolean1 = complex0.isInfinite();
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex3.add((double) 713);
      List<Complex> list1 = complex4.nthRoot(713);
      Complex complex10 = complex1.asin();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex12.ZERO.pow(0.0);
      Complex complex14 = Complex.valueOf(875.4568, 3287.46);
      Complex complex15 = complex14.ZERO.multiply(713);
      Complex complex16 = complex15.NaN.asin();
      Complex complex17 = complex8.reciprocal();
      Complex complex18 = complex17.multiply(713);
      Complex complex19 = complex7.log();
      Complex complex20 = complex17.negate();
      double double1 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex1 = complex0.sinh();
      double double2 = complex1.getArgument();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.INF.multiply(complex1);
      ComplexField complexField0 = complex2.ZERO.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex1.divide((-20.0));
      Complex complex5 = complex4.ZERO.multiply(complex3);
      Complex complex6 = complex0.multiply((-2.356194490192345));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-209.335176065), 0.0);
      Complex complex1 = complex0.ONE.createComplex(7.164663249266942E-88, (-1759.9006511182683));
      int int0 = (-2170);
      Complex complex2 = complex1.I.multiply((-2170));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex6.INF.add((-209.335176065));
      Complex complex8 = complex1.ONE.createComplex((-1759.9006511182683), (-2170));
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex5.ZERO.tan();
      Complex complex11 = complex2.add(complex3);
      Complex complex12 = complex11.INF.pow(complex3);
      try { 
        complex2.NaN.nthRoot((-2170));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,170
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-2426.26874458811);
      Complex complex0 = Complex.valueOf(330.7512501, (-2426.26874458811));
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex4.I.asin();
      Complex complex7 = complex0.atan();
      double double0 = complex0.NaN.getArgument();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex4.log();
      int int0 = complex7.hashCode();
      Complex complex10 = complex1.divide(complex2);
  }
}
