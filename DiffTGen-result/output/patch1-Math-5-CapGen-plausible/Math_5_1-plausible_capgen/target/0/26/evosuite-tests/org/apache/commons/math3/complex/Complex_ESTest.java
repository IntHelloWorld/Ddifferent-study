/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:44:40 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.multiply(37);
      Complex complex3 = complex1.log();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf((double) 37, Double.NaN);
      Complex complex6 = complex5.sqrt();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex2.pow((double) 37);
      Complex complex10 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex2.ZERO.sqrt1z();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.ZERO.asin();
      Object object0 = complex0.I.readResolve();
      Complex complex8 = Complex.ZERO;
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex0.ONE.sin();
      Complex complex10 = complex7.ZERO.subtract(20.0);
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex9.ONE.cosh();
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex13.ONE.tan();
      Complex complex15 = complex9.acos();
      Complex complex16 = complex3.divide((-30.258250257273197));
      Complex complex17 = complex16.INF.multiply(20.0);
      String string1 = complex3.toString();
      Complex complex18 = complex7.negate();
      Complex complex19 = complex12.sqrt1z();
      Complex complex20 = complex19.ONE.log();
      List<Complex> list0 = complex15.nthRoot(2782);
      Complex complex21 = complex4.tan();
      int int0 = complex19.hashCode();
      Complex complex22 = complex19.pow((-30.258250257273197));
      Complex complex23 = complex0.multiply(2782);
      Complex complex24 = complex5.subtract(complex9);
      String string2 = complex20.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2394.0), (-2394.0));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.ZERO.acos();
      double double0 = complex1.getArgument();
      List<Complex> list0 = complex1.nthRoot(1036);
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ONE.subtract(complex1);
      double double1 = complex4.I.getArgument();
      List<Complex> list1 = complex1.nthRoot(1036);
      Complex complex5 = complex0.subtract((-765.5674));
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex4.ONE.reciprocal();
      Complex complex8 = complex1.divide(complex3);
      Complex complex9 = Complex.valueOf((-1.5707963267948966), (-1.5707963267948966));
      Complex complex10 = complex9.INF.add(complex3);
      Object object1 = complex6.I.readResolve();
      List<Complex> list2 = complex6.nthRoot(1036);
      Complex complex11 = complex0.createComplex((-1.5707963267948966), (-20.0));
      Complex complex12 = complex11.tan();
      Complex complex13 = complex6.subtract((-2394.0));
      Complex complex14 = complex2.log();
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex14.subtract((-1.5707963267948966));
      Complex complex17 = complex16.tan();
      boolean boolean1 = complex0.equals(list0);
      Complex complex18 = complex4.negate();
      Complex complex19 = complex16.sinh();
      Complex complex20 = complex18.I.negate();
      Complex complex21 = complex8.add(complex12);
      Complex complex22 = complex18.atan();
      Complex complex23 = complex1.pow((-776.4599967229));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-2831.974115051);
      Complex complex0 = Complex.valueOf((-2831.974115051), (-2831.974115051));
      Complex complex1 = complex0.NaN.asin();
      Object object0 = complex1.ZERO.readResolve();
      double double1 = complex0.abs();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.add(complex1);
      double double2 = (-1206.618599161749);
      Complex complex4 = Complex.valueOf((-1206.618599161749));
      Complex complex5 = complex4.INF.divide(4005.016201794668);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.I.add(305.69021);
      Complex complex9 = complex8.I.acos();
      int int0 = complex8.ZERO.hashCode();
      try { 
        complex7.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3208450062862734E76));
      Complex complex1 = complex0.INF.createComplex((-1.3208450062862734E76), (-752.0));
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex2.NaN.multiply(1189);
      String string0 = complex4.toString();
      String string1 = complex4.toString();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.negate();
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.I.subtract(complex4);
      Complex complex9 = complex3.reciprocal();
      double double1 = complex3.getImaginary();
      Complex complex10 = Complex.valueOf(20.0);
      Complex complex11 = complex9.pow(complex10);
      Complex complex12 = complex5.createComplex(3608.976919644198, (-752.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex4.INF.reciprocal();
      Complex complex7 = complex0.log();
      Complex complex8 = complex2.subtract(complex7);
      Complex complex9 = complex7.negate();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex9.INF.add(complex6);
      Complex complex12 = Complex.INF;
      Complex complex13 = complex4.INF.divide(complex12);
      Complex complex14 = complex10.add(4816.0);
      double double0 = complex4.abs();
      Complex complex15 = complex0.negate();
      Complex complex16 = complex14.multiply(3011);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex4.sinh();
      Complex complex6 = null;
      double double0 = 0.0;
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = Complex.valueOf(0.0);
      double double1 = complex7.NaN.abs();
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      complex0.nthRoot(5431);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2288.30882, 2288.30882);
      Complex complex1 = complex0.I.createComplex(2288.30882, 0.0);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex0.I.acos();
      Complex complex6 = complex5.ONE.multiply((-2269));
      Complex complex7 = complex0.ONE.createComplex((-1614.33710232), (-1614.33710232));
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.INF.negate();
      boolean boolean0 = complex8.isNaN();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex10.asin();
      double double0 = complex10.ZERO.getArgument();
      Complex complex12 = complex11.ZERO.divide(0.0);
      Complex complex13 = complex7.acos();
      boolean boolean1 = complex11.isInfinite();
      Complex complex14 = complex12.cosh();
      Complex complex15 = complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(8.70017386744679E-9, 8.70017386744679E-9);
      Complex complex2 = complex1.I.sin();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex4.NaN.pow(8.70017386744679E-9);
      Complex complex6 = complex1.INF.cos();
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex1.multiply(2874);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex3.subtract(8.70017386744679E-9);
      Complex complex10 = complex9.INF.tanh();
      String string1 = complex0.toString();
      Complex complex11 = complex7.multiply(8.70017386744679E-9);
      Complex complex12 = complex0.NaN.asin();
      double double0 = complex1.getReal();
      Complex complex13 = complex10.conjugate();
      Complex complex14 = complex13.ONE.divide(0.0);
      Complex complex15 = complex3.multiply((-1143.02695175513));
      Complex complex16 = complex15.add(complex6);
      Complex complex17 = complex12.sin();
      double double1 = complex17.INF.abs();
      Complex complex18 = complex11.divide(0.0);
      try { 
        complex13.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      String string0 = complex1.INF.toString();
      double double0 = 0.0;
      Complex complex2 = complex0.I.createComplex(0.0, (-942.18765919311));
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex0.divide((-632.282));
      Complex complex4 = complex1.createComplex((-632.282), (-632.282));
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex4.tanh();
      String string1 = complex0.toString();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex3.ZERO.subtract(complex0);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex8 = complex7.ZERO.createComplex(Double.POSITIVE_INFINITY, (-942.18765919311));
      Complex complex9 = complex6.INF.cos();
      Complex complex10 = complex9.INF.cosh();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex3.atan();
      Object object1 = new Object();
      boolean boolean0 = complex3.equals(object1);
      Complex complex13 = complex3.tan();
      Complex complex14 = complex5.ONE.acos();
      int int1 = complex5.hashCode();
      int int2 = complex14.ZERO.hashCode();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.acos();
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex3.INF.sqrt();
      Complex complex6 = complex3.multiply(complex2);
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex8.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.I.sin();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex8.multiply(17);
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex2.log();
      ComplexField complexField0 = complex8.getField();
      Complex complex16 = complex15.acos();
      Complex complex17 = complex1.sqrt1z();
      Complex complex18 = complex17.asin();
      Complex complex19 = complex11.multiply((-1823));
      Complex complex20 = complex8.asin();
      Complex complex21 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.createComplex((-270.69), 0.0);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex0.NaN.divide((-270.69));
      double double0 = complex4.abs();
      Complex complex6 = complex0.ONE.exp();
      double double1 = complex4.ONE.abs();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = Complex.valueOf((-270.69), 0.0);
      Complex complex9 = complex0.multiply(0.0);
      boolean boolean0 = complex8.equals(complex4);
      Complex complex10 = complex3.subtract(complex7);
      String string0 = complex1.toString();
      Complex complex11 = complex8.add(Double.NaN);
      Complex complex12 = complex5.NaN.subtract(0.0);
      Complex complex13 = complex3.reciprocal();
      Complex complex14 = complex0.add(0.0);
      Complex complex15 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(2522.7804872876);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.add(3321.7);
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex0.I.divide(complex2);
      String string0 = complex5.toString();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.ZERO.add(3321.7);
      Object object0 = complex6.readResolve();
      ComplexField complexField0 = complex2.getField();
      double double0 = complex6.getReal();
      Object object1 = complex3.ZERO.readResolve();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex8.NaN.pow(0.0);
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex10.ZERO.sqrt();
      Complex complex12 = complex7.divide(complex0);
      boolean boolean0 = complex9.isInfinite();
      double double1 = complex12.getReal();
      Complex complex13 = complex10.multiply(complex3);
      Complex complex14 = Complex.valueOf(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1554977893829346, (-2090.3486));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex1.ZERO.pow(177.8769);
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex3.divide(1.1554977893829346);
      Complex complex6 = Complex.valueOf((-2090.3486), 177.8769);
      Complex complex7 = Complex.valueOf(0.0, 501.787278721);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex9.I.multiply(complex4);
      double double0 = complex0.getArgument();
      double double1 = complex1.getReal();
      double double2 = complex0.getImaginary();
      Complex complex11 = complex7.divide(2323.219522);
      boolean boolean0 = complex11.isInfinite();
      Complex complex12 = complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(5.054202073556894E-211);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex4.I.add(1.5518584251403809);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex3.ZERO.sinh();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex3.ONE.equals(object0);
      Complex complex8 = complex3.INF.tanh();
      Complex complex9 = new Complex(5.054202073556894E-211, 1.544882070711032E-8);
      Complex complex10 = complex1.ZERO.divide(complex9);
      String string0 = complex3.NaN.toString();
      Complex complex11 = complex2.ONE.pow(5.054202073556894E-211);
      List<Complex> list0 = complex2.nthRoot(870);
      Complex complex12 = complex1.negate();
      Object object1 = complex1.readResolve();
      ComplexField complexField0 = complex2.getField();
      double double2 = complex2.getArgument();
      double double3 = complex12.getImaginary();
      int int0 = complex1.NaN.hashCode();
      Complex complex13 = complex2.conjugate();
      double double4 = complex13.ZERO.getArgument();
      Complex complex14 = complex2.add(complex12);
      boolean boolean2 = complex14.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.NaN.acos();
      List<Complex> list0 = complex2.ONE.nthRoot(607);
      Complex complex3 = complex1.NaN.pow(3.3058299602856804E-8);
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex0.INF.sin();
      Complex complex6 = complex5.NaN.subtract(2242.861562778444);
      double double0 = complex2.ONE.abs();
      double double1 = complex1.INF.getArgument();
      Complex complex7 = complex0.sqrt();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex8 = complex7.ONE.pow(1.0);
      Complex complex9 = Complex.valueOf(2242.861562778444, 3.3058299602856804E-8);
      boolean boolean0 = complex7.isInfinite();
      Complex complex10 = complex0.asin();
      double double2 = complex10.abs();
      Complex complex11 = complex1.divide(3.3058299602856804E-8);
      double double3 = complex0.abs();
      ComplexField complexField1 = complex2.getField();
      String string0 = complex11.toString();
      boolean boolean1 = complex6.isNaN();
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex8.divide(complex0);
      Complex complex14 = complex7.pow(3.3058299602856804E-8);
      Complex complex15 = complex10.add((double) 607);
      Complex complex16 = complex8.reciprocal();
      Complex complex17 = complex16.ONE.multiply(complex2);
      Complex complex18 = complex16.divide(complex7);
      Complex complex19 = complex18.ZERO.divide(Double.NaN);
      Complex complex20 = complex9.subtract(6085.730238458832);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex2.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.atan();
      int int0 = complex4.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.cosh();
      int int1 = complex8.NaN.hashCode();
      Complex complex9 = complex2.ONE.conjugate();
      Complex complex10 = new Complex(Double.NaN, 4022.685);
      Complex complex11 = complex4.NaN.multiply(complex10);
      boolean boolean1 = complex6.isInfinite();
      boolean boolean2 = complex4.isNaN();
      Complex complex12 = complex6.atan();
      Complex complex13 = complex4.multiply(complex10);
      Complex complex14 = Complex.valueOf((-1842.1));
      Complex complex15 = complex5.pow(complex14);
      Complex complex16 = complex7.pow(1312.364938985671);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(182.121288599, 1005.45748);
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.ZERO.equals(object0);
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex0.conjugate();
      int int0 = complex0.hashCode();
      double double0 = complex5.abs();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex4.multiply(166);
      Complex complex9 = complex8.ONE.divide(complex5);
      Complex complex10 = complex8.conjugate();
      double double1 = complex4.getArgument();
      Complex complex11 = complex4.negate();
      Complex complex12 = Complex.valueOf(1005.45748);
      Complex complex13 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-4008.6264180684707), (-4008.6264180684707));
      Complex complex1 = Complex.valueOf((-4008.6264180684707));
      Complex complex2 = complex0.acos();
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.subtract((-4008.6264180684707));
      Complex complex6 = Complex.valueOf((-4008.6264180684707));
      Complex complex7 = complex5.ZERO.acos();
      Complex complex8 = complex3.INF.exp();
      boolean boolean0 = complex5.equals(complex3);
      boolean boolean1 = complex5.isNaN();
      Complex complex9 = Complex.I;
      Complex complex10 = complex2.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex4.INF.divide(complex0);
      int int0 = (-2429);
      try { 
        complex0.nthRoot((-2429));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,429
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      try { 
        complex1.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.atan();
      Object object0 = complex2.readResolve();
      String string0 = complex1.toString();
      Complex complex3 = complex1.I.multiply(3004);
      Complex complex4 = complex1.multiply((-1));
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = Complex.valueOf((-63.11542784871), (double) 3004);
      Complex complex10 = complex3.add(complex9);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex0.add((-63.11542784871));
      Complex complex13 = complex11.multiply(3004);
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex0.add(complex14);
      double double0 = complex13.abs();
      Complex complex16 = complex1.atan();
      Complex complex17 = complex5.pow(complex14);
      Complex complex18 = Complex.valueOf((-1892.0779528703));
      Complex complex19 = complex17.asin();
      Complex complex20 = complex14.sqrt1z();
      Complex complex21 = complex5.conjugate();
      Complex complex22 = complex0.ONE.conjugate();
      boolean boolean0 = complex21.isNaN();
      Complex complex23 = complex3.pow(complex13);
      Complex complex24 = complex4.cos();
      Complex complex25 = complex21.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex((-1574.46), 0.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex6.NaN.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(3.5037536832675478E-217, (-3873.3904570688));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1288.36511));
      Complex complex1 = Complex.valueOf(-0.0);
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.NaN.cos();
      Object object0 = new Object();
      boolean boolean0 = complex3.I.equals(object0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.ZERO.atan();
      String string0 = complex0.toString();
      Complex complex8 = complex5.NaN.reciprocal();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex2.atan();
      boolean boolean1 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-650.4));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = Complex.valueOf((-938.8108824), 0.0);
      Complex complex5 = complex0.NaN.divide((-2692.838075176526));
      int int0 = complex0.hashCode();
      double double0 = complex1.ONE.getArgument();
      List<Complex> list0 = complex1.nthRoot(1339);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex3.cosh();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex8 = complex3.ZERO.sqrt();
      boolean boolean0 = complex5.equals(complex0);
      boolean boolean1 = complex3.isNaN();
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2569.922165));
      Complex complex1 = complex0.I.pow((-2569.922165));
      Complex complex2 = complex1.cosh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.cosh();
      ComplexField complexField0 = complex1.getField();
      ComplexField complexField1 = complex2.getField();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex3.ONE.pow(complex2);
      Complex complex8 = complex5.add(complex0);
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = Complex.valueOf((-2569.922165), 0.0);
      Complex complex12 = complex11.I.atan();
      int int0 = complex6.hashCode();
      Complex complex13 = complex3.sinh();
      Complex complex14 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.add(1877.3237934781885);
      Complex complex4 = complex3.INF.cos();
      double double0 = complex1.getReal();
      Complex complex5 = complex2.multiply(complex1);
      double double1 = complex4.abs();
      Object object0 = new Object();
      boolean boolean0 = complex0.I.equals(object0);
      Complex complex6 = complex4.ONE.pow(2332.622609254025);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex3.ONE.atan();
      boolean boolean1 = complex2.equals(complex4);
      Complex complex10 = complex7.subtract(complex1);
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex7.subtract(1877.3237934781885);
      double double2 = complex8.getArgument();
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex8.exp();
      Complex complex15 = complex4.conjugate();
      Complex complex16 = complex15.INF.createComplex(0.0, 0.0);
      Complex complex17 = complex15.NaN.tan();
      Complex complex18 = complex6.divide(complex10);
      Complex complex19 = complex4.pow(2332.622609254025);
      List<Complex> list0 = complex3.nthRoot(7);
      Complex complex20 = complex14.log();
      Complex complex21 = complex13.multiply(2072.83650865557);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-1260.230950442);
      Complex complex0 = new Complex(0.0, (-1260.230950442));
      Complex complex1 = complex0.ONE.asin();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.cosh();
      try { 
        complex2.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex0.NaN.conjugate();
      Complex complex6 = complex4.INF.pow(0.0);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex3.NaN.sqrt1z();
      Complex complex10 = complex4.NaN.tanh();
      Complex complex11 = complex8.I.multiply(3.1367659571899855E-9);
      boolean boolean0 = complex8.isInfinite();
      Complex complex12 = complex6.multiply(0.0);
      Complex complex13 = complex5.sqrt1z();
      double double0 = complex10.abs();
      Complex complex14 = Complex.I;
      Complex complex15 = complex11.pow(complex14);
      Complex complex16 = complex14.add(0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.2902019831221148E-269, 1925.0);
      String string0 = complex1.toString();
      Complex complex2 = Complex.valueOf((-1862.4682368654046), (-1862.4682368654046));
      boolean boolean0 = complex0.NaN.equals((Object) null);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.createComplex((-1862.4682368654046), (-2148.3167723));
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex5.I.add((-2148.3167723));
      Complex complex8 = complex4.ONE.asin();
      double double0 = complex0.getArgument();
      Complex complex9 = complex0.divide(complex6);
      Complex complex10 = complex5.createComplex(0.0, 0.0);
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex5.multiply(complex4);
      Complex complex14 = complex11.exp();
      Complex complex15 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2193.7655004608955, 2193.7655004608955);
      Complex complex1 = Complex.valueOf(141.80427, 141.80427);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.I.log();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex1.ONE.conjugate();
      ComplexField complexField1 = complex3.NaN.getField();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.NaN.multiply(892);
      Complex complex7 = Complex.valueOf(2193.7655004608955, 2193.7655004608955);
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex0.pow(141.80427);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-930.5), (-930.5));
      Complex complex1 = complex0.ONE.reciprocal();
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-64.2342676344), (-64.2342676344));
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex2.INF.multiply(complex1);
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf(64.53);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex5.tanh();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(20.0, Double.NaN);
      Complex complex1 = complex0.multiply(185);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(2621.69326601494);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.valueOf(1.601222826656464E-7);
      Complex complex6 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(3.2441826014060764E125);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 3006.56327179;
      Complex complex1 = complex0.createComplex(3006.56327179, 6.236550279936637E-5);
      Complex complex2 = complex0.add(complex1);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = Complex.valueOf(6.236550279936637E-5, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sin();
      Object object0 = complex2.I.readResolve();
      Complex complex5 = complex4.INF.divide(6.236550279936637E-5);
      double double1 = complex5.ZERO.getArgument();
      Complex complex6 = complex4.log();
      try { 
        complex6.nthRoot((-3782));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,782
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-2419.51612), (-2419.51612));
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.I.acos();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = Complex.NaN;
      boolean boolean0 = complex2.INF.equals(complex5);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex4.createComplex((-2419.51612), (-2419.51612));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-172.080578904), (-172.080578904));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex2.multiply(747);
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex2.multiply(complex7);
      Complex complex9 = complex3.tan();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex8.NaN.divide(complex4);
      Complex complex12 = complex10.I.exp();
      Complex complex13 = complex12.I.sin();
      Complex complex14 = complex6.ONE.reciprocal();
      Complex complex15 = complex9.atan();
      Complex complex16 = complex15.ZERO.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex17 = complex6.multiply(complex13);
      Complex complex18 = complex10.multiply(747);
      Complex complex19 = complex13.cosh();
      Complex complex20 = complex8.atan();
      Complex complex21 = complex9.sqrt();
      Complex complex22 = complex10.acos();
      Complex complex23 = complex17.acos();
      Complex complex24 = complex8.tanh();
      Complex complex25 = complex21.asin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-3953.8131343), (-3953.8131343));
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(3059.4370233, 3059.4370233);
      Complex complex1 = complex0.INF.subtract(complex0);
      String string0 = complex0.toString();
      Complex complex2 = complex0.acos();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(422.52518196811);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.multiply((-1451.97762));
      Complex complex4 = complex0.multiply(422.52518196811);
      Complex complex5 = complex1.subtract(1588.0091284870693);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3217.245469086, (-1953.8813097752));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.INF.equals(object0);
      Complex complex1 = Complex.valueOf(3217.245469086);
      Complex complex2 = complex0.divide((-1953.8813097752));
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex1.divide(3217.245469086);
      Complex complex5 = complex4.ONE.subtract((-1953.8813097752));
      Complex complex6 = complex2.acos();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(64.53);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex1.tanh();
      double double0 = complex4.I.getArgument();
      double double1 = complex0.getArgument();
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex3.divide(1862.5797974979564);
      Object object0 = complex5.ZERO.readResolve();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(1.0, 2949.1);
      Complex complex3 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1088.084089848));
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.subtract(complex4);
      double double0 = complex4.getArgument();
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.I.multiply(Double.NaN);
      Complex complex10 = complex1.sin();
      double double1 = complex10.abs();
      Complex complex11 = complex7.sinh();
      Complex complex12 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(77);
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.reciprocal();
      double double0 = complex4.getReal();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.ONE.multiply(Double.POSITIVE_INFINITY);
      int int1 = complex0.hashCode();
      Complex complex8 = complex0.multiply(complex4);
      Complex complex9 = complex6.add(complex2);
      Complex complex10 = complex9.createComplex(77, Double.NaN);
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = Complex.valueOf((-3122.43), (-3122.43));
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.I.divide(complex2);
      Complex complex6 = complex5.NaN.multiply(0.0);
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex2.acos();
      Complex complex9 = Complex.valueOf(2185.9886071924);
      Complex complex10 = complex7.tanh();
      Complex complex11 = Complex.valueOf(0.0, (-3122.43));
      Complex complex12 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2193.7655004608955, 2193.7655004608955);
      Complex complex1 = Complex.valueOf(141.80427, 141.80427);
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex1.I.log();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex1.ONE.conjugate();
      ComplexField complexField1 = complex4.NaN.getField();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.NaN.multiply(892);
      Complex complex8 = Complex.valueOf(2193.7655004608955, 2193.7655004608955);
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex2.pow(141.80427);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex0.createComplex((-1.0), (-1.0));
      Complex complex5 = complex4.sin();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(3.610333312791256E161);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.add(complex2);
      double double0 = complex2.NaN.abs();
      Complex complex5 = complex2.multiply(1);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex6.ONE.cos();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex2.exp();
      double double1 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex2.ONE.tan();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex0.createComplex(2766.9572726, 0.4568560719490051);
      Complex complex7 = complex6.INF.divide(2766.9572726);
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(37.0, 37.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.createComplex(2.0, 37.0);
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.divide((-158.1));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.conjugate();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex3.tan();
      double double0 = complex7.getArgument();
      Complex complex8 = complex4.multiply(37);
      Complex complex9 = complex4.tan();
      boolean boolean1 = complex1.isNaN();
      Complex complex10 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.ONE.negate();
      Object object0 = complex0.readResolve();
      Object object1 = complex1.readResolve();
      Complex complex5 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1211.9));
      Complex complex1 = complex0.pow((-1211.9));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.ONE.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.multiply((-1211.9));
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex1.add(complex4);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex1.log();
      Complex complex9 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-184.0049), (-184.0049));
      String string0 = complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-184.0049));
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1236.5547344787506));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.I.pow(0.0);
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-4040.494));
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.cosh();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.multiply((-1075));
      Complex complex3 = complex0.multiply((double) (-1075));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2454.77);
      Complex complex2 = complex1.add(3666.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4.4181618172507453E-8);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.I.equals(object0);
      Complex complex2 = complex0.createComplex(4.4181618172507453E-8, 1630.0);
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex3.add(complex1);
      int int0 = complex0.ONE.hashCode();
      int int1 = complex3.INF.hashCode();
      Complex complex5 = complex0.createComplex((-757.0224), 2.1782039447564253E47);
      String string0 = complex5.toString();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex6.ZERO.cos();
      Complex complex9 = complex3.sinh();
      Complex complex10 = Complex.valueOf(2161.699241536657, (-5.4826958838142734E144));
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex3.negate();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.negate();
      int int0 = complex3.I.hashCode();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = complex1.pow(1.6471118927001953);
      double double0 = complex4.ONE.abs();
      double double1 = complex4.INF.getArgument();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex2.INF.pow(Double.NaN);
      Complex complex5 = complex2.ONE.subtract((-4973.91));
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = Complex.valueOf(1271.3054687692381);
      Complex complex9 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(3355.5689119288, 3355.5689119288);
      Complex complex1 = complex0.tan();
      String string0 = complex0.toString();
      Complex complex2 = complex1.pow(3355.5689119288);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.ONE.multiply(0);
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex4.I.add(3355.5689119288);
      boolean boolean1 = complex1.equals("(3355.5689119288, 3355.5689119288)");
      Complex complex7 = Complex.valueOf((double) 0, 4.110787043867721E-160);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex5.createComplex(0, 3355.5689119288);
      Complex complex11 = Complex.valueOf(3355.5689119288);
      double double0 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(41.8);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.I.sqrt();
      List<Complex> list0 = complex2.NaN.nthRoot(815);
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(263.8371672);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = Complex.valueOf(2.2086994756104319E-75, 0.0);
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex2.cosh();
      double double1 = complex2.getImaginary();
      Complex complex5 = complex2.divide(-0.0);
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex5.ZERO.sin();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex2.add(complex8);
      Complex complex10 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1882.159710199072);
      Complex complex2 = complex1.ZERO.subtract(6.283185307179586);
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex5 = complex4.ZERO.divide((-976.85043));
      Complex complex6 = complex3.ONE.atan();
      Complex complex7 = complex1.NaN.atan();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = Complex.valueOf(1882.159710199072, 1882.159710199072);
      Complex complex10 = complex9.INF.log();
      Object object0 = complex8.INF.readResolve();
      int int0 = complex10.INF.hashCode();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex10.ONE.multiply(complex2);
      Complex complex13 = complex8.cos();
      double double0 = complex13.I.abs();
      Complex complex14 = complex8.multiply(90.1764747666636);
      Complex complex15 = complex14.ZERO.add(complex2);
      Complex complex16 = complex7.negate();
      Complex complex17 = complex16.pow(complex2);
      Complex complex18 = complex17.ZERO.negate();
      Complex complex19 = complex2.asin();
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex2.pow(2882.63778664881);
      int int1 = complex21.INF.hashCode();
      Complex complex22 = complex8.divide(1.0);
      Complex complex23 = complex18.sqrt();
      Object object1 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-1.0));
      Complex complex4 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.sinh();
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex1.subtract(Double.NaN);
      int int1 = complex3.hashCode();
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 0.0);
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.equals("");
      Complex complex2 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1756.4);
      Complex complex1 = complex0.subtract((-289.82391845726));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.077077172525637E-5), 3977.776404);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-7.861419797923639E-8));
      Complex complex2 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-2450);
      try { 
        complex0.nthRoot((-2450));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,450
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.NaN.tan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex3.ONE.pow(complex1);
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.atan();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = complex5.ZERO.add(complex6);
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex7.multiply(0);
      Complex complex10 = complex0.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex1.ZERO.subtract(complex3);
      Complex complex12 = complex10.multiply(complex2);
      Complex complex13 = complex1.pow(complex10);
      Complex complex14 = complex13.exp();
      Complex complex15 = complex3.pow((-3448.03820558));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-1209.1335240878598), (-31.78401));
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.ONE.multiply(complex0);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = complex6.NaN.subtract(444.62338522);
      try { 
        complex2.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex2.ONE.atan();
      Complex complex6 = complex0.pow((-2047.3370158149776));
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex6.subtract(complex4);
      Complex complex9 = complex6.add(complex0);
      double double0 = complex0.getArgument();
      Complex complex10 = complex0.pow((-2047.3370158149776));
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.sqrt1z();
      double double1 = complex9.abs();
      Complex complex13 = complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.I.divide(complex0);
      Complex complex5 = complex1.I.pow(5.289988151341401E130);
      Complex complex6 = complex2.INF.multiply(0);
      Complex complex7 = complex4.ZERO.createComplex(5.289988151341401E130, 2818.0);
      Complex complex8 = complex3.INF.pow(3450.2141996699675);
      double double0 = complex8.ONE.getArgument();
      String string0 = complex0.toString();
      double double1 = complex2.getArgument();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex3.divide(3450.2141996699675);
      double double2 = complex2.getReal();
      boolean boolean0 = complex6.isInfinite();
      Complex complex11 = complex2.pow(complex4);
      Complex complex12 = complex11.ONE.cos();
      Complex complex13 = complex2.I.sqrt();
      double double3 = complex3.abs();
      Complex complex14 = complex3.add(0.7853981633974483);
      double double4 = complex14.getImaginary();
      Complex complex15 = complex8.sin();
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.exp();
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.multiply(398);
      Object object1 = complex1.readResolve();
      String string0 = complex1.toString();
      Complex complex9 = complex2.add(complex0);
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex0.sqrt1z();
      Object object2 = complex11.INF.readResolve();
      Complex complex12 = complex3.subtract(Double.NaN);
      Complex complex13 = complex8.exp();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex8.add(complex6);
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex15.ZERO.subtract(0.0);
      Complex complex18 = complex11.sin();
      Complex complex19 = complex15.multiply(complex11);
      Complex complex20 = complex19.acos();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(2161.53549, 2161.53549);
      Complex complex1 = complex0.subtract(2161.53549);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.I.createComplex(2161.53549, 2161.53549);
      boolean boolean0 = complex0.ONE.equals(complex4);
      Complex complex5 = complex0.NaN.add(2161.53549);
      double double0 = complex1.ZERO.abs();
      Complex complex6 = complex5.INF.sinh();
      List<Complex> list0 = complex0.nthRoot(1254);
      double double1 = complex4.getArgument();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex9.ZERO.multiply(complex6);
      Complex complex11 = complex9.INF.divide(complex1);
      Complex complex12 = complex11.divide((double) 1254);
      Complex complex13 = complex4.add(complex8);
      Complex complex14 = complex8.ONE.sqrt();
      Complex complex15 = complex7.negate();
      Complex complex16 = complex2.asin();
      double double2 = complex16.abs();
      Complex complex17 = complex5.pow(9.313225746154785E-10);
      Complex complex18 = complex13.sin();
      ComplexField complexField0 = complex6.getField();
      boolean boolean1 = complex1.isInfinite();
      Complex complex19 = complex0.sinh();
      Complex complex20 = complex2.cosh();
      Complex complex21 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(607.17, 2.0);
      Complex complex1 = Complex.valueOf(2.0, 2.306975841522217);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex4.I.add(complex0);
      Complex complex6 = complex4.ZERO.cos();
      Object object0 = complex5.ONE.readResolve();
      Complex complex7 = complex1.log();
      Complex complex8 = Complex.INF;
      boolean boolean0 = complex3.ZERO.equals(complex8);
      Complex complex9 = complex8.ZERO.subtract(complex4);
      Complex complex10 = complex8.INF.negate();
      double double0 = complex10.ONE.getArgument();
      Complex complex11 = new Complex(0.0);
      Complex complex12 = complex3.add(complex11);
      String string0 = complex8.toString();
      Complex complex13 = complex11.multiply(607.17);
      double double1 = complex2.abs();
      int int0 = complex3.hashCode();
      Complex complex14 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3809.103732956975));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = new Complex(0.0, 69.51942286);
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex0.NaN.pow(complex4);
      Complex complex8 = complex0.sin();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex8.multiply(20.0);
      double double0 = complex1.ONE.getArgument();
      Complex complex11 = complex10.I.subtract(complex4);
      Complex complex12 = Complex.valueOf((-737.81), 0.0);
      int int0 = complex1.hashCode();
      Complex complex13 = complex0.subtract(4.2999935789083046E-8);
      double double1 = complex13.NaN.abs();
      Complex complex14 = complex13.NaN.acos();
      double double2 = complex3.getReal();
      Object object0 = complex8.readResolve();
      Complex complex15 = complex12.exp();
      Complex complex16 = complex13.reciprocal();
      Complex complex17 = complex15.cos();
      Complex complex18 = complex17.cosh();
      double double3 = complex1.getArgument();
      Complex complex19 = complex4.exp();
      Complex complex20 = complex19.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(8.178019529487065E-8, (-127.767));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex3.sinh();
      int int1 = complex2.NaN.hashCode();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.INF.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex2.log();
      Complex complex11 = complex2.createComplex(66.123765707, 66.123765707);
      Complex complex12 = complex7.conjugate();
  }
}
