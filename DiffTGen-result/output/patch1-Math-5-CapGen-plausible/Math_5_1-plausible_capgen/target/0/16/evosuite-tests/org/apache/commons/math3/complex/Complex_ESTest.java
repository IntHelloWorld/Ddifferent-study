/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:41:12 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-1321.8490460397156);
      Complex complex0 = Complex.valueOf((-1321.8490460397156));
      double double1 = 2.139863967895508;
      Complex complex1 = complex0.pow(2.139863967895508);
      Complex complex2 = complex0.ONE.createComplex((-1321.8490460397156), 2.139863967895508);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex1.ONE.tan();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex0.conjugate();
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 481.2180666;
      Complex complex0 = Complex.valueOf(481.2180666, (-49.8489207));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.ONE.acos();
      int int0 = complex0.ZERO.hashCode();
      Complex complex4 = complex0.pow((-49.8489207));
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.NaN.atan();
      List<Complex> list0 = complex4.ZERO.nthRoot(2668);
      Complex complex7 = complex4.divide((-49.8489207));
      double double1 = complex1.abs();
      Complex complex8 = complex4.multiply(complex2);
      // Undeclared exception!
      complex7.nthRoot(3182);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-211.96724185963));
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex complex3 = Complex.valueOf((-2224.72925639464));
      Object object0 = complex1.NaN.readResolve();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = complex2.multiply(complex0);
      double double1 = complex4.getArgument();
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex4.ONE.add(complex5);
      Complex complex9 = complex8.log();
      Complex complex10 = complex6.ONE.atan();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex10.ONE.cos();
      Complex complex13 = complex10.INF.createComplex((-703.939610619208), 8.468796109710134E-4);
      Complex complex14 = Complex.valueOf((-422.0));
      Complex complex15 = complex6.reciprocal();
      Complex complex16 = complex4.negate();
      Complex complex17 = complex2.cosh();
      Complex complex18 = complex14.tanh();
      boolean boolean0 = complex18.NaN.equals(complex12);
      Complex complex19 = complex4.asin();
      Complex complex20 = complex7.reciprocal();
      Object object1 = complex16.readResolve();
      String string0 = complex0.toString();
      Complex complex21 = complex2.sin();
      Complex complex22 = complex17.sin();
      boolean boolean1 = complex1.isInfinite();
      Complex complex23 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = Complex.valueOf((-1516.086));
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex2.tan();
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex0.ZERO.multiply(complex1);
      Complex complex7 = complex6.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.I.atan();
      int int0 = complex9.ONE.hashCode();
      Complex complex11 = complex8.I.cosh();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex8.reciprocal();
      Complex complex14 = complex13.INF.sinh();
      Complex complex15 = complex0.log();
      Complex complex16 = complex2.atan();
      Complex complex17 = complex10.add(Double.POSITIVE_INFINITY);
      Complex complex18 = complex9.sqrt();
      Complex complex19 = complex18.ZERO.cosh();
      Complex complex20 = complex18.exp();
      String string0 = complex2.toString();
      Complex complex21 = complex7.tanh();
      Complex complex22 = complex20.sqrt1z();
      Complex complex23 = complex9.reciprocal();
      Complex complex24 = complex4.atan();
      Complex complex25 = complex10.negate();
      Complex complex26 = complex12.multiply(complex21);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.valueOf(110.007117);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.NaN.multiply(7);
      Complex complex6 = complex4.I.pow(complex0);
      Complex complex7 = complex6.I.tan();
      Complex complex8 = Complex.valueOf(0.0, (-3238.4650684));
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex9.ZERO.add(110.007117);
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex1.subtract(complex2);
      Object object1 = complex11.INF.readResolve();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex3.INF.reciprocal();
      Complex complex14 = complex12.ONE.exp();
      Complex complex15 = complex1.ONE.divide(complex2);
      double double0 = complex15.ONE.getArgument();
      ComplexField complexField0 = complex3.getField();
      Complex complex16 = complex9.pow(0.0);
      Complex complex17 = Complex.ONE;
      boolean boolean1 = complex16.ZERO.equals(complex17);
      double double1 = complex2.getImaginary();
      Complex complex18 = complex2.add(1.65748157925005E114);
      Complex complex19 = complex11.createComplex((-51.539), 0.554580807685852);
      Complex complex20 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1.368893262241355E-7);
      Complex complex1 = new Complex(0.0, Double.NaN);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.subtract(1.368893262241355E-7);
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = complex2.NaN.subtract(complex1);
      Complex complex7 = complex6.ZERO.tanh();
      int int0 = complex0.hashCode();
      double double0 = complex1.getReal();
      Complex complex8 = complex1.divide(5358.7517946);
      Complex complex9 = complex8.ONE.add(complex0);
      boolean boolean0 = complex8.equals(complex1);
      Complex complex10 = complex1.multiply(390.5037696184);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(203.3566, (-1009.85840732717));
      Complex complex1 = new Complex(203.3566);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.I.divide(complex0);
      Complex complex6 = complex3.atan();
      Complex complex7 = complex1.NaN.subtract(complex2);
      Complex complex8 = Complex.valueOf(0.0, (-1009.85840732717));
      Complex complex9 = complex8.I.multiply(0.0);
      List<Complex> list0 = complex9.NaN.nthRoot(2537);
      Complex complex10 = complex6.multiply(842.215405917586);
      Complex complex11 = complex2.add((-1009.85840732717));
      int int0 = complex2.hashCode();
      Complex complex12 = complex4.ONE.createComplex((-3833.25441), 4188.03857);
      Complex complex13 = complex0.INF.createComplex(103.54002749148, 2537);
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex14.NaN.exp();
      Complex complex16 = complex15.ONE.multiply(0.0);
      int int1 = complex7.NaN.hashCode();
      Complex complex17 = complex7.add(261.0);
      Complex complex18 = Complex.INF;
      Complex complex19 = complex17.ONE.multiply(complex18);
      Complex complex20 = complex17.pow(complex7);
      double double0 = complex8.abs();
      Complex complex21 = complex0.sin();
      List<Complex> list1 = complex8.nthRoot(2537);
      double double1 = complex16.getReal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.NaN.sqrt();
      int int0 = complex0.hashCode();
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = complex5.NaN.acos();
      Complex complex8 = complex7.subtract(complex5);
      double double1 = complex1.getReal();
      Complex complex9 = complex5.ONE.pow(complex3);
      Complex complex10 = complex9.ZERO.createComplex(Double.NaN, 0.0);
      Object object0 = new Object();
      boolean boolean0 = complex3.NaN.equals(object0);
      Complex complex11 = complex10.ZERO.divide(complex1);
      Complex complex12 = Complex.valueOf(Double.NaN);
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex13.ZERO.sqrt1z();
      Complex complex15 = Complex.valueOf(Double.NaN);
      ComplexField complexField0 = complex5.getField();
      int int1 = complex5.hashCode();
      Complex complex16 = complex0.acos();
      Complex complex17 = complex16.NaN.divide(complex10);
      Complex complex18 = complex4.tanh();
      Complex complex19 = complex18.NaN.multiply(0.0);
      List<Complex> list0 = complex13.nthRoot(56);
      Complex complex20 = complex6.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.INF.cosh();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex1.pow(7.694785471490595E23);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1303.172), 20.0);
      Complex complex1 = complex0.subtract((-1303.172));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.INF.atan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex4.NaN.negate();
      Complex complex7 = complex4.INF.sqrt();
      Complex complex8 = complex6.INF.reciprocal();
      Complex complex9 = Complex.valueOf(3.35657712457243E-9);
      Complex complex10 = complex8.NaN.pow(complex9);
      Complex complex11 = complex6.asin();
      Complex complex12 = complex11.NaN.cosh();
      Complex complex13 = complex4.log();
      Complex complex14 = complex0.I.pow(complex13);
      Complex complex15 = complex0.divide(complex4);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex16 = complex14.ONE.reciprocal();
      Complex complex17 = complex13.cos();
      Complex complex18 = complex17.sinh();
      Complex complex19 = complex15.conjugate();
      Complex complex20 = Complex.valueOf((double) 1, 364.2491584448);
      Complex complex21 = complex11.tan();
      double double0 = complex14.getReal();
      Complex complex22 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.ONE.subtract(Double.NaN);
      Complex complex3 = complex1.NaN.add(complex2);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.pow(Double.NaN);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex7.ZERO.tanh();
      Complex complex11 = complex4.log();
      double double1 = complex8.getArgument();
      Complex complex12 = complex7.pow(Double.NaN);
      Complex complex13 = complex7.pow(complex0);
      Complex complex14 = complex6.divide(complex0);
      Complex complex15 = Complex.valueOf((-1639.0), (-1639.0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.INF.exp();
      List<Complex> list0 = complex0.nthRoot(286);
      Complex complex6 = complex2.ZERO.sqrt();
      Complex complex7 = complex3.divide(complex0);
      boolean boolean0 = complex2.equals(complex1);
      Complex complex8 = complex0.divide(complex7);
      boolean boolean1 = complex2.equals("");
      Complex complex9 = complex1.multiply(complex5);
      Object object0 = complex0.readResolve();
      Object object1 = complex4.readResolve();
      Complex complex10 = complex7.createComplex(286, (-2214.13));
      String string0 = complex8.I.toString();
      Complex complex11 = complex10.ONE.tan();
      Complex complex12 = complex8.pow(6215.434728713476);
      Complex complex13 = complex6.exp();
      Complex complex14 = complex9.sinh();
      double double0 = complex3.abs();
      Complex complex15 = complex12.sqrt1z();
      Complex complex16 = complex4.multiply(complex3);
      Complex complex17 = complex2.divide(1.0);
      Object object2 = new Object();
      boolean boolean2 = complex17.equals(object2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 457.5);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.add(0.0);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex0.INF.divide((-959.04251));
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.ZERO.pow(0.0);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex1.INF.createComplex(698.5367668, 0.0);
      Complex complex8 = complex0.sinh();
      List<Complex> list0 = complex8.NaN.nthRoot(1);
      Complex complex9 = complex2.ONE.reciprocal();
      Complex complex10 = complex7.I.divide((-231.0));
      Complex complex11 = complex2.subtract(complex1);
      Complex complex12 = complex1.conjugate();
      List<Complex> list1 = complex7.nthRoot(73);
      Complex complex13 = new Complex((-440.0));
      Complex complex14 = complex13.ONE.cosh();
      Object object0 = complex13.readResolve();
      boolean boolean0 = complex8.equals(object0);
      Complex complex15 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1924.0), (-1924.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.ZERO.createComplex(662.32, 1777.0);
      Complex complex5 = complex3.INF.sqrt1z();
      double double0 = complex1.abs();
      boolean boolean0 = complex1.equals(complex0);
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(1938.6);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex0.createComplex(1938.6, 1938.6);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex4.divide((-12.44201));
      Complex complex8 = complex7.ONE.conjugate();
      Complex complex9 = complex3.multiply(1489.88765157664);
      Complex complex10 = complex4.ONE.subtract(complex2);
      Complex complex11 = Complex.valueOf((-3238.941328));
      Complex complex12 = complex3.acos();
      Complex complex13 = complex3.subtract(complex4);
      Complex complex14 = complex13.INF.reciprocal();
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-143.91596702636), (-143.91596702636));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.add((-143.91596702636));
      String string0 = complex4.toString();
      Complex complex5 = complex3.INF.atan();
      String string1 = complex3.toString();
      Complex complex6 = complex2.sin();
      boolean boolean0 = complex2.isNaN();
      double double0 = complex3.getImaginary();
      double double1 = complex3.getArgument();
      double double2 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.NaN.pow(complex2);
      Complex complex5 = complex0.sqrt();
      double double0 = complex4.INF.abs();
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex6.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex8 = complex5.subtract(complex4);
      Complex complex9 = complex0.add((-2375.0211617229));
      Complex complex10 = complex0.ONE.cosh();
      Complex complex11 = complex0.NaN.createComplex((-2763.171961619244), (-995.8083244226599));
      Complex complex12 = Complex.valueOf((-1937.711806531286), Double.NaN);
      Complex complex13 = complex5.pow(222.0356159);
      Complex complex14 = complex11.I.multiply(complex13);
      Complex complex15 = complex13.NaN.add(complex1);
      boolean boolean0 = complex12.equals(complex5);
      double double1 = complex11.getArgument();
      Complex complex16 = complex11.tanh();
      Complex complex17 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.NaN.pow(complex2);
      Complex complex5 = complex0.sqrt();
      double double0 = complex4.INF.abs();
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex6.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex8 = complex5.subtract(complex4);
      Complex complex9 = complex0.add((-2375.0211617229));
      Complex complex10 = complex0.ONE.cosh();
      Complex complex11 = complex0.NaN.createComplex((-2763.171961619244), (-995.8083244226599));
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      Complex complex13 = complex5.pow(222.0356159);
      Complex complex14 = complex11.I.multiply(complex13);
      Complex complex15 = complex13.NaN.add(complex1);
      boolean boolean0 = complex12.equals(complex5);
      double double1 = complex11.getArgument();
      Complex complex16 = complex11.tanh();
      Complex complex17 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.createComplex(0.0, 1.8828988075256348);
      Complex complex3 = complex1.log();
      int int0 = complex1.hashCode();
      Complex complex4 = complex1.ZERO.pow(0.0);
      Complex complex5 = complex0.NaN.cosh();
      int int1 = complex0.hashCode();
      Complex complex6 = complex1.asin();
      double double0 = complex6.abs();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.add(Double.NaN);
      Object object0 = complex6.NaN.readResolve();
      Complex complex9 = Complex.valueOf(0.0, 1.1221363544464111);
      boolean boolean0 = complex6.equals("NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS");
      Complex complex10 = complex7.acos();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.sinh();
      List<Complex> list0 = complex0.nthRoot(1087);
      double double0 = complex1.getReal();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = Complex.valueOf((double) 1087);
      Complex complex5 = complex3.I.multiply(856.8805487);
      boolean boolean0 = complex3.equals(complex4);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex6.subtract(complex1);
      double double1 = complex4.getImaginary();
      Complex complex8 = complex1.divide(complex6);
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ZERO.asin();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.sinh();
      try { 
        complex3.INF.nthRoot((-205));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -205
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2116.9988680646425);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.divide(2116.9988680646425);
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex1.tan();
      double double0 = complex8.abs();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex8.cosh();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-307.380744559662), (-307.380744559662));
      Complex complex1 = complex0.multiply((-2132));
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex2.ONE.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.asin();
      boolean boolean1 = complex0.isInfinite();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex3.multiply(complex0);
      String string0 = complex4.toString();
      String string1 = complex1.toString();
      Complex complex7 = complex0.NaN.add((-307.380744559662));
      double double0 = complex2.abs();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex3.add((double) (-2132));
      Complex complex11 = complex2.asin();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(1.364171028137207);
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.multiply((-3147.80981));
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex0.sinh();
      double double0 = (-2491.256);
      Complex complex6 = complex0.pow((-2491.256));
      Complex complex7 = complex4.reciprocal();
      try { 
        complex4.nthRoot((-174));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -174
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-84.8777339604));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.ZERO.sin();
      String string0 = complex0.INF.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.asin();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.ZERO.cos();
      Complex complex6 = complex3.sinh();
      Complex complex7 = Complex.ZERO;
      boolean boolean1 = complex7.I.equals(complex2);
      Complex complex8 = complex5.INF.pow(0.0);
      Complex complex9 = complex6.ONE.divide(complex7);
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex6.NaN.subtract(0.0);
      ComplexField complexField0 = complex4.getField();
      Complex complex12 = complex2.NaN.multiply(complex5);
      Complex complex13 = complex4.INF.asin();
      Complex complex14 = complex1.sin();
      boolean boolean2 = complex3.equals((Object) null);
      Complex complex15 = complex4.log();
      Object object0 = complex14.INF.readResolve();
      Complex complex16 = complex14.multiply(1);
      Complex complex17 = complex6.subtract((double) 1);
      ComplexField complexField1 = complex4.getField();
      Complex complex18 = complex14.log();
      Complex complex19 = complex2.sqrt();
      Complex complex20 = complex9.add(complex7);
      Complex complex21 = Complex.valueOf(0.0);
      Complex complex22 = complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.I.reciprocal();
      int int0 = 0;
      try { 
        complex2.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      double double1 = 6.283185307179586;
      Complex complex1 = null;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1822.597861), 678.93492117238);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.INF.divide(complex0);
      Complex complex5 = complex0.multiply(0.0);
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex6 = complex2.ZERO.cosh();
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex3.sqrt();
      int int0 = complex0.hashCode();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex7.add(complex9);
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(6.65688196961235E66);
      Object object0 = complex0.readResolve();
      Object object1 = new Object();
      int int0 = complex0.INF.hashCode();
      boolean boolean0 = complex0.equals(object1);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.multiply(6.283185307179586);
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 4119.50855);
      Complex complex1 = Complex.valueOf((-2932.5399));
      Complex complex2 = Complex.valueOf(4119.50855, 4119.50855);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.sin();
      double double0 = complex4.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.INF.subtract(complex3);
      Complex complex5 = complex2.NaN.tan();
      Complex complex6 = complex2.NaN.conjugate();
      Complex complex7 = complex0.subtract(3.5869215528816054E-262);
      Complex complex8 = complex7.multiply(complex5);
      Complex complex9 = complex8.createComplex(0.0, 0.0);
      Complex complex10 = complex5.divide(complex0);
      Complex complex11 = complex2.cosh();
      Complex complex12 = Complex.valueOf(0.0, (-1369.94893820176));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-5.591880480212007E119));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.ZERO.pow(complex1);
      double double0 = complex0.I.abs();
      Complex complex4 = complex0.createComplex((-5.591880480212007E119), 0.0);
      double double1 = complex4.abs();
      Complex complex5 = complex4.divide(6.283185307179586);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.INF.add((-5.688639355498786E-10));
      Complex complex8 = Complex.valueOf((-5.591880480212007E119));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex8.ONE.equals(object0);
      Complex complex9 = Complex.valueOf((-5.591880480212007E119));
      Complex complex10 = complex0.asin();
      int int0 = complex10.NaN.hashCode();
      Complex complex11 = complex9.atan();
      Complex complex12 = complex11.sinh();
      double double2 = complex0.getImaginary();
      double double3 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-2.9485356677301627E-8));
      Complex complex1 = complex0.ONE.tanh();
      Object object0 = complex1.INF.readResolve();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.acos();
      int int0 = complex2.hashCode();
      double double1 = complex1.getImaginary();
      Complex complex4 = complex3.subtract(complex0);
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex4.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2246.5), (-2246.5));
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.divide(5.72924572981599E-95);
      int int0 = complex1.I.hashCode();
      boolean boolean1 = complex1.isNaN();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.cos();
      boolean boolean2 = complex0.isInfinite();
      Complex complex5 = complex1.divide(5.72924572981599E-95);
      List<Complex> list0 = complex4.nthRoot(1);
      boolean boolean3 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1348.155));
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.hashCode();
      Complex complex2 = Complex.valueOf((-1348.155));
      Complex complex3 = complex2.I.add((-1348.155));
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex2.I.sin();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex0.sin();
      String string1 = complex8.toString();
      Complex complex10 = complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.ZERO.log();
      String string0 = complex2.INF.toString();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.I.multiply((-978));
      Complex complex7 = complex6.INF.pow(0.0);
      Complex complex8 = complex5.add(complex1);
      int int0 = complex1.hashCode();
      Complex complex9 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(3305.64557132, 2877.6116547153733);
      Complex complex1 = complex0.NaN.pow(0.0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.createComplex(2877.6116547153733, 2877.6116547153733);
      Complex complex3 = complex1.subtract(2.300227165222168);
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.sinh();
      String string0 = complex4.I.toString();
      Complex complex6 = complex3.cos();
      double double1 = complex5.INF.getArgument();
      double double2 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1604.78573292);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      double double0 = complex2.abs();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.pow(1604.78573292);
      Complex complex6 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex4.subtract(6.283185307179586);
      Complex complex9 = complex3.negate();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = Complex.valueOf(1604.78573292, 4036.814780923871);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex0.tan();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.sqrt();
      String string0 = complex0.NaN.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.createComplex(6.240235720677117E-8, 0.0);
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.add(0.0);
      Object object0 = complex3.ONE.readResolve();
      Complex complex5 = complex3.ZERO.add(complex1);
      Complex complex6 = complex1.INF.add(0.0);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex8.pow(0.0);
      Complex complex10 = complex9.I.add(0.0);
      boolean boolean0 = complex1.equals(complex8);
      boolean boolean1 = complex2.isInfinite();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-2466.038), (-2466.038));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sin();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.I.negate();
      double double1 = complex1.getReal();
      Complex complex4 = complex1.divide(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.subtract((-0.09088450866185192));
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 5.4445606140746644E-8;
      Complex complex0 = Complex.valueOf(5.4445606140746644E-8, 5.4445606140746644E-8);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.log();
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = Complex.valueOf((-1275.95), (-1.0000000000000004));
      Complex complex6 = complex4.tan();
      try { 
        complex5.ONE.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.multiply(2279.864);
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.pow(complex0);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.NaN.multiply(201);
      Complex complex6 = complex4.pow(complex3);
      ComplexField complexField1 = complex6.INF.getField();
      Complex complex7 = complex3.asin();
      double double0 = complex7.getArgument();
      Complex complex8 = complex5.INF.multiply(complex3);
      Complex complex9 = Complex.valueOf((-1.0), (-1.0));
      Complex complex10 = complex9.asin();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex3.pow(complex5);
      boolean boolean0 = complex2.equals((Object) null);
      Complex complex13 = complex4.subtract((-780.428299379905));
      ComplexField complexField2 = complex13.ONE.getField();
      Complex complex14 = complex10.ZERO.sinh();
      double double1 = complex9.getArgument();
      Complex complex15 = complex10.multiply(complex0);
      Complex complex16 = complex9.divide(complex7);
      Complex complex17 = complex15.atan();
      double double2 = complex15.getImaginary();
      try { 
        complex11.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.ONE.pow(complex0);
      boolean boolean0 = complex2.ONE.equals(complex1);
      Complex complex4 = complex2.multiply(1334);
      double double0 = complex4.abs();
      Complex complex5 = Complex.valueOf(1029.68458608);
      double double1 = complex0.getReal();
      Complex complex6 = complex1.acos();
      Object object0 = complex2.ONE.readResolve();
      Complex complex7 = complex2.multiply(complex0);
      Complex complex8 = complex7.asin();
      ComplexField complexField0 = complex2.getField();
      Complex complex9 = complex0.multiply(1.0);
      Complex complex10 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex1.subtract(221.95667288533);
      Complex complex3 = complex1.pow(1879.10620377);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.pow((-1040.1427659690867));
      Complex complex4 = complex0.pow(6.283185307179586);
      Complex complex5 = Complex.valueOf(1.0, 6.283185307179586);
      Object object0 = complex4.readResolve();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4159.94);
      Complex complex1 = new Complex(2048.23241, 1266.114433823);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex6.multiply(400);
      Complex complex9 = complex1.tan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex7.divide(complex9);
      Complex complex11 = complex7.add(complex10);
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2652.751);
      Complex complex2 = complex1.INF.sqrt();
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.add(6.283185307179586);
      Complex complex5 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex3.add(4.0281104210095145E-223);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(7.602385197610123E-8);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.INF.createComplex(7.602385197610123E-8, (-1613.254185));
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex4.add((-1613.254185));
      Object object0 = complex0.readResolve();
      Complex complex6 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-885.8), (-885.8));
      Complex complex1 = complex0.asin();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.createComplex(439.053, (-390.1));
      Complex complex5 = complex2.acos();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.NaN.add((-2.4767709454727603E-235));
      Complex complex4 = complex3.ZERO.pow(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex1.ZERO.cos();
      Complex complex8 = complex2.ONE.subtract(complex5);
      Complex complex9 = complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.multiply(complex2);
      List<Complex> list0 = complex2.nthRoot(262);
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1219.8021));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.createComplex((-1219.8021), 2325.91184);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.divide((-1219.8021));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6054253578186035);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.pow((-1640.43389999643));
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex5.NaN.tanh();
      double double0 = complex0.getReal();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex3.sinh();
      Complex complex8 = Complex.valueOf(0.6054253578186035);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.NaN.sqrt1z();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(6.562319473965767E278, 6.562319473965767E278);
      Complex complex1 = complex0.pow(6.562319473965767E278);
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex3.NaN.cosh();
      String string0 = complex3.toString();
      Complex complex5 = complex1.multiply(6.562319473965767E278);
      Complex complex6 = complex3.NaN.multiply(6.562319473965767E278);
      ComplexField complexField0 = complex5.ZERO.getField();
      int int0 = 482;
      Complex complex7 = complex0.multiply(482);
      int int1 = (-1513);
      try { 
        complex4.nthRoot((-1513));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,513
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2932.0);
      Complex complex1 = complex0.NaN.subtract(2932.0);
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = new Complex(2932.0);
      Complex complex5 = complex0.subtract(complex4);
      boolean boolean0 = complex2.equals(complex4);
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-2363.589));
      Complex complex1 = complex0.I.divide(0.0);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 148.15131);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex2.INF.cos();
      boolean boolean0 = complex0.I.equals(complex1);
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2010.1217);
      Complex complex2 = complex1.ZERO.acos();
      List<Complex> list0 = complex1.nthRoot(271);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.pow((-1438.852766121));
      Complex complex2 = complex0.ZERO.negate();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.createComplex(599.833289, 0.0);
      double double1 = complex3.NaN.getArgument();
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.valueOf((-1438.852766121));
      Complex complex7 = complex5.ZERO.subtract(1.0);
      Complex complex8 = complex5.I.negate();
      Complex complex9 = complex8.sqrt();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2420);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1138.5217614711196));
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(3526);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(406.75610015140734, (-837.0));
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.ONE.log();
      double double0 = complex2.I.getArgument();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.I.pow(1.5707963267948966);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex5.exp();
      Complex complex8 = Complex.valueOf(406.75610015140734);
      Complex complex9 = complex5.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 2632.14;
      Complex complex1 = complex0.divide(2632.14);
      Complex complex2 = complex1.ONE.add(2632.14);
      Complex complex3 = complex1.I.subtract(complex2);
      int int0 = complex3.ZERO.hashCode();
      double double1 = complex2.NaN.abs();
      Complex complex4 = complex0.createComplex((-1269), 41.84);
      Complex complex5 = complex4.NaN.multiply((-1269));
      try { 
        complex1.NaN.nthRoot((-1269));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,269
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2390.92886436229, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.reciprocal();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cos();
      try { 
        complex0.nthRoot((-2861));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,861
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex0.add(complex2);
      double double0 = complex4.abs();
      String string0 = complex4.toString();
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex4.cosh();
      double double1 = complex1.abs();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex6.multiply((-3844));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.conjugate();
      double double1 = complex0.I.abs();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.NaN.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.ZERO.reciprocal();
      int int1 = complex3.ZERO.hashCode();
      Complex complex6 = complex5.ZERO.multiply((-1844.17002627));
      Complex complex7 = complex3.atan();
      Complex complex8 = complex3.subtract(0.0);
      Complex complex9 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.INF.readResolve();
      Object object1 = complex0.readResolve();
      double double0 = complex0.abs();
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.subtract((-2133.445929));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      ComplexField complexField0 = complex0.NaN.getField();
      List<Complex> list0 = complex0.NaN.nthRoot(500);
      Complex complex2 = complex0.NaN.exp();
      List<Complex> list1 = complex0.nthRoot(1087);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.NaN.divide((double) 500);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex0.multiply((double) 500);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-700.9791115279615));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-2258.3436), (-2258.3436));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex1.ZERO.pow(0.0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.INF.cosh();
      double double0 = complex6.getArgument();
      double double1 = complex4.getReal();
      Complex complex7 = complex4.add(Double.NaN);
      double double2 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      boolean boolean0 = complex1.equals(complex2);
      String string0 = complex0.toString();
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex1.tan();
      double double0 = complex1.getImaginary();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.multiply(1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3185.35296);
      Complex complex2 = complex0.divide(2322.52);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.I.multiply((-1077));
      double double0 = complex1.getImaginary();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.0);
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.pow(293.1223012694531);
      double double0 = complex0.getImaginary();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-69.0), (-69.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.I.multiply(251);
      Complex complex4 = complex3.ZERO.multiply((-3143));
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex5 = complex1.NaN.multiply((-69.0));
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex5.I.add((double) (-3143));
      int int0 = complex7.NaN.hashCode();
      Complex complex8 = complex1.I.atan();
      Complex complex9 = complex8.INF.add(659.533327064523);
      String string0 = complex1.toString();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex1.ZERO.log();
      Complex complex12 = complex8.multiply(0.0);
      Complex complex13 = complex11.ZERO.subtract(0.0);
      List<Complex> list0 = complex11.nthRoot(222);
      String string1 = complex11.toString();
      Complex complex14 = complex2.createComplex((-69.0), 0.0);
      Complex complex15 = complex9.NaN.tan();
      Complex complex16 = complex8.add((double) 251);
      Complex complex17 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-2260.920955921242));
      Complex complex2 = complex1.divide((-2260.920955921242));
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.ONE.multiply(complex5);
      Complex complex7 = complex5.I.pow((-2260.920955921242));
      Complex complex8 = complex6.NaN.cosh();
      Complex complex9 = complex3.NaN.sin();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex4.multiply((-2260.920955921242));
      double double0 = complex0.getArgument();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex1.reciprocal();
      Complex complex14 = complex10.sqrt1z();
      Complex complex15 = complex12.reciprocal();
      double double1 = complex14.abs();
      Complex complex16 = complex3.NaN.cosh();
      Complex complex17 = complex3.pow((-2260.920955921242));
      double double2 = complex3.getArgument();
      Complex complex18 = complex1.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex19 = complex13.sinh();
      ComplexField complexField1 = complex8.getField();
      Complex complex20 = complex1.conjugate();
      Complex complex21 = Complex.valueOf(1527.179922422);
      Complex complex22 = complex4.add(complex21);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply((-2103));
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex4.NaN.atan();
      String string0 = complex0.NaN.toString();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex1.I.add((-1.0));
      Complex complex10 = new Complex((-2103), (-2103));
      Complex complex11 = complex0.cos();
      Complex complex12 = complex0.INF.conjugate();
      Complex complex13 = Complex.valueOf(0.0, 3967.6891297883176);
      Complex complex14 = complex5.multiply(complex1);
      try { 
        complex1.nthRoot((-2103));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,103
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-2411.537957));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.INF.createComplex((-2411.537957), (-2411.537957));
      Complex complex3 = complex2.multiply((-2411.537957));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.multiply(complex4);
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex2.cosh();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex6.multiply(0.0);
      Complex complex9 = complex0.multiply(0.0);
      Complex complex10 = complex4.ONE.sqrt1z();
      Complex complex11 = complex9.ZERO.sin();
      Complex complex12 = complex10.ZERO.asin();
      double double0 = complex10.INF.abs();
      Complex complex13 = complex5.log();
      boolean boolean1 = complex9.isInfinite();
      String string0 = complex13.toString();
      Complex complex14 = complex12.ONE.atan();
      Complex complex15 = complex3.tanh();
      Complex complex16 = complex6.exp();
      Object object0 = complex12.INF.readResolve();
      Complex complex17 = complex12.subtract(complex16);
      Complex complex18 = complex12.tan();
      Complex complex19 = complex12.subtract(complex0);
      Complex complex20 = complex1.createComplex((-3.538563171970534E-268), (-4407.08));
      Complex complex21 = complex6.log();
      double double1 = complex21.getImaginary();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex2.multiply((-5.004237248003625E181));
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.I.divide(complex7);
      List<Complex> list0 = complex1.nthRoot(913);
      Complex complex11 = complex2.cos();
      double double0 = complex4.abs();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex2.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.I.equals(object0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = Complex.valueOf(0.0, 1.0);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex3.NaN.subtract(0.0);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.add(1244.1834501167);
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex3.sqrt();
      double double0 = complex1.abs();
      Complex complex10 = Complex.valueOf(20.0, 4093.67063);
      Complex complex11 = complex2.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.ZERO.createComplex(0.0, (-1109.407760918));
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex2.ZERO.divide(0.2386477291584015);
      double double0 = complex0.getImaginary();
      Complex complex8 = complex0.ZERO.subtract(0.0);
      Complex complex9 = complex2.multiply(0.0);
      Complex complex10 = complex9.ONE.pow(306.941084449);
      Complex complex11 = complex7.sin();
      Complex complex12 = complex6.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.subtract(complex0);
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf(77.6693193964, 77.6693193964);
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = Complex.valueOf(0.0, (-3566.083115772351));
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex3.I.tanh();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex0.ONE.divide(complex10);
      Complex complex12 = Complex.valueOf(1133.8);
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex14 = complex5.sin();
      Complex complex15 = complex7.atan();
      Complex complex16 = complex8.asin();
      Complex complex17 = complex16.sin();
      Complex complex18 = complex17.ZERO.cos();
      Complex complex19 = complex2.sqrt1z();
      Complex complex20 = complex19.ONE.sqrt1z();
      double double1 = complex17.getReal();
      Complex complex21 = complex13.divide(complex16);
      Complex complex22 = complex1.subtract(1133.8);
      Complex complex23 = complex16.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.multiply((-1001));
      Complex complex6 = complex4.INF.multiply((-1));
      Complex complex7 = complex4.subtract(complex2);
      Complex complex8 = complex7.INF.subtract((double) (-1));
      Complex complex9 = complex7.INF.cosh();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex4.divide(complex10);
      Complex complex12 = complex7.divide(complex6);
      Complex complex13 = complex7.sqrt();
      String string0 = complex0.toString();
  }
}
