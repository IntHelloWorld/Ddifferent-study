/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:28:15 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ZERO.cos();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1884.480108940762, 1884.480108940762);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = new Complex(1884.480108940762, 1884.480108940762);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.I.add(complex1);
      Complex complex6 = complex4.I.negate();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex1.I.cos();
      Complex complex12 = complex11.I.multiply(1884.480108940762);
      List<Complex> list0 = complex9.nthRoot(97);
      Complex complex13 = complex1.subtract(complex9);
      Complex complex14 = complex9.createComplex(1884.480108940762, 1884.480108940762);
      Complex complex15 = complex2.sin();
      Complex complex16 = complex15.ONE.multiply(0.0);
      Complex complex17 = complex15.I.cosh();
      Complex complex18 = complex14.sqrt();
      Complex complex19 = complex4.log();
      Complex complex20 = complex14.divide(complex10);
      Complex complex21 = complex11.cos();
      Object object0 = complex5.readResolve();
      double double0 = complex7.getImaginary();
      List<Complex> list1 = complex7.nthRoot(97);
      double double1 = complex16.getArgument();
      double double2 = complex19.abs();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-52.21818), (-2265.387));
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.acos();
      int int0 = complex1.hashCode();
      Complex complex3 = complex1.sinh();
      ComplexField complexField0 = complex3.NaN.getField();
      double double0 = complex3.getArgument();
      Complex complex4 = complex0.I.multiply((-2265.387));
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex8.I.add(complex7);
      Complex complex10 = complex8.ONE.exp();
      Complex complex11 = complex7.I.conjugate();
      String string0 = complex6.NaN.toString();
      Complex complex12 = complex6.tan();
      ComplexField complexField1 = complex7.getField();
      Complex complex13 = complex6.ZERO.multiply(complex4);
      Complex complex14 = complex6.sin();
      Complex complex15 = complex5.multiply(complex14);
      Complex complex16 = complex15.ONE.tanh();
      Complex complex17 = complex15.NaN.tanh();
      Complex complex18 = complex15.asin();
      Complex complex19 = complex1.acos();
      double double1 = complex0.getImaginary();
      Complex complex20 = complex6.sinh();
      Complex complex21 = complex20.NaN.multiply((-52.21818));
      Complex complex22 = complex5.subtract(complex19);
      Complex complex23 = complex0.acos();
      Complex complex24 = complex23.sin();
      Complex complex25 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-132.84496142744), (-2022.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1490.762), (-1490.762));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.multiply(0.0952233225107193);
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex1.INF.negate();
      double double0 = complex3.abs();
      Complex complex5 = complex1.ONE.multiply((-5132.1458));
      Complex complex6 = complex3.I.acos();
      String string0 = complex3.ONE.toString();
      Complex complex7 = complex3.add(complex2);
      Complex complex8 = complex7.INF.pow(complex0);
      Complex complex9 = complex6.ZERO.negate();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex9.INF.multiply(complex6);
      Complex complex11 = complex10.INF.add(complex1);
      Complex complex12 = complex9.INF.sqrt();
      Complex complex13 = complex5.multiply(complex3);
      Complex complex14 = complex12.ONE.log();
      boolean boolean0 = complex6.isInfinite();
      Complex complex15 = complex5.NaN.asin();
      Complex complex16 = complex9.ONE.sqrt();
      Complex complex17 = complex16.ZERO.add(complex1);
      Complex complex18 = complex5.cosh();
      double double1 = complex9.getImaginary();
      boolean boolean1 = complex7.isNaN();
      double double2 = complex3.getArgument();
      Complex complex19 = complex9.sqrt1z();
      Complex complex20 = complex14.add(complex4);
      Complex complex21 = complex17.asin();
      Complex complex22 = complex19.cosh();
      double double3 = complex19.getReal();
      Complex complex23 = complex13.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.subtract(complex0);
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.ONE.subtract(complex0);
      String string1 = complex6.I.toString();
      Complex complex7 = complex6.I.multiply(1704.6279649491);
      Complex complex8 = complex4.pow(complex5);
      double double0 = complex0.ONE.getArgument();
      String string2 = complex5.toString();
      Complex complex9 = complex1.sin();
      Complex complex10 = new Complex(5.0, 5.0);
      Complex complex11 = complex0.add(complex10);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.multiply((-255.716626553));
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.2);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.ONE.multiply(complex0);
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex3.INF.cosh();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.I.sqrt1z();
      double double1 = complex1.getImaginary();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-111.268407050262), (-111.268407050262));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.I.subtract(complex5);
      Complex complex7 = complex1.cosh();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex8 = complex7.ZERO.add(complex0);
      Complex complex9 = complex0.cosh();
      Object object0 = complex9.ONE.readResolve();
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex10 = complex7.exp();
      int int0 = complex10.NaN.hashCode();
      Complex complex11 = complex1.exp();
      double double2 = complex0.abs();
      Complex complex12 = complex1.createComplex(0.0, (-1.0));
      Object object1 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.097, 0.097);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.atan();
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex0.ZERO.tan();
      String string0 = complex1.toString();
      double double1 = complex1.getReal();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex7);
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex7.asin();
      boolean boolean1 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex2.cosh();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex8 = complex6.INF.sinh();
      Complex complex9 = complex6.ZERO.asin();
      Complex complex10 = complex3.ZERO.negate();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex0.ONE.cosh();
      ComplexField complexField0 = complex11.ONE.getField();
      Complex complex13 = complex6.NaN.createComplex(2922.6896458, 2922.6896458);
      Complex complex14 = complex2.asin();
      Complex complex15 = complex14.NaN.cos();
      double double1 = complex4.getArgument();
      Complex complex16 = complex3.acos();
      Complex complex17 = complex4.divide(complex3);
      Complex complex18 = complex4.sin();
      List<Complex> list1 = complex6.nthRoot(511);
      boolean boolean0 = complex18.isNaN();
      Complex complex19 = complex14.createComplex(2922.6896458, 0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex2.cosh();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex8 = complex6.INF.sinh();
      Complex complex9 = complex6.ZERO.asin();
      Complex complex10 = complex3.ZERO.negate();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex0.ONE.cosh();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex2.asin();
      Complex complex15 = complex14.NaN.cos();
      double double1 = complex4.getArgument();
      Complex complex16 = complex3.acos();
      Complex complex17 = complex4.divide(complex3);
      Complex complex18 = complex4.sin();
      List<Complex> list1 = complex6.nthRoot(511);
      boolean boolean0 = complex18.isNaN();
      Complex complex19 = complex14.createComplex(2922.6896458, 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.tanh();
      List<Complex> list0 = complex2.I.nthRoot(174);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.ZERO.createComplex((-2899.6453628072545), 2369.707718);
      Object object0 = complex0.readResolve();
      double double0 = complex4.getReal();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-2239.6059), 0.0);
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.NaN.tan();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex6.ONE.negate();
      double double0 = complex6.INF.getArgument();
      Complex complex8 = complex2.ONE.exp();
      Complex complex9 = complex8.sqrt1z();
      int int0 = complex4.ZERO.hashCode();
      Complex complex10 = complex6.log();
      Complex complex11 = complex5.I.createComplex((-1.0), 498.5537211);
      Complex complex12 = complex2.asin();
      int int1 = complex12.ONE.hashCode();
      Complex complex13 = complex12.I.multiply(complex2);
      Complex complex14 = complex13.NaN.exp();
      Complex complex15 = complex10.conjugate();
      Complex complex16 = complex5.log();
      Complex complex17 = complex4.add(complex10);
      Complex complex18 = complex9.multiply(1508.6);
      Complex complex19 = complex0.log();
      Complex complex20 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(422.468, (-467.0));
      Complex complex1 = complex0.exp();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.multiply(2632.02266894954);
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.multiply(complex3);
      Object object0 = complex4.I.readResolve();
      Complex complex6 = complex3.ONE.sinh();
      Complex complex7 = complex1.log();
      Complex complex8 = complex1.I.sqrt();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex9.I.divide(complex1);
      Complex complex11 = complex1.multiply(0.0);
      Complex complex12 = complex11.add(complex2);
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex13.asin();
      int int0 = complex11.ZERO.hashCode();
      Complex complex15 = complex2.sin();
      Complex complex16 = complex15.atan();
      int int1 = complex2.hashCode();
      Complex complex17 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ONE.createComplex(0.08371849358081818, 1085.75);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex5.NaN.pow(complex3);
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3600.3917500587227));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex0.NaN.multiply(complex1);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.acos();
      Object object0 = complex6.I.readResolve();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex9.NaN.tan();
      Complex complex12 = complex8.add(complex9);
      int int0 = (-326);
      try { 
        complex9.ONE.nthRoot((-326));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -326
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.acos();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 496.098371);
      double double0 = complex0.abs();
      Complex complex1 = complex0.INF.createComplex((-2109.8129173405932), 1.2675934823758863E-8);
      Complex complex2 = null;
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex0.INF.divide(complex1);
      Object object0 = complex2.readResolve();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ZERO.divide(complex5);
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex8.INF.tan();
      ComplexField complexField0 = complex8.getField();
      Complex complex11 = complex6.I.tanh();
      boolean boolean0 = complex8.isNaN();
      String string0 = complex6.toString();
      Complex complex12 = complex6.createComplex(Double.POSITIVE_INFINITY, 3447.358);
      double double0 = complex11.abs();
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex6.negate();
      Complex complex15 = complex3.divide(complex5);
      double double1 = complex2.getArgument();
      double double2 = complex0.getImaginary();
      Complex complex16 = complex15.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.negate();
      String string0 = complex2.ZERO.toString();
      String string1 = complex3.INF.toString();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex2.multiply(complex1);
      double double0 = complex6.NaN.abs();
      Complex complex7 = complex6.ZERO.add(complex2);
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1.2958646899018938E-9, 1.2958646899018938E-9);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.sin();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-6403.8772135524), 0.0);
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1328.8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = new Complex(1619, (-1328.8));
      Complex complex5 = complex1.NaN.subtract(complex4);
      List<Complex> list0 = complex3.nthRoot(1619);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex2.negate();
      String string0 = complex1.toString();
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.INF.divide(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.ONE.acos();
      Complex complex6 = complex5.NaN.createComplex((-609.08328403173), 6.283185307179586);
      Complex complex7 = complex4.ZERO.asin();
      Complex complex8 = complex4.INF.exp();
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex8.NaN.add(complex2);
      int int1 = complex10.NaN.hashCode();
      String string1 = complex4.I.toString();
      Complex complex11 = complex7.INF.pow(complex4);
      double double0 = complex1.getArgument();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex4.ZERO.divide(complex12);
      double double1 = complex7.getImaginary();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex14 = complex7.tan();
      Complex complex15 = complex12.exp();
      Complex complex16 = complex0.conjugate();
      boolean boolean1 = complex3.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply((-1319.0));
      Complex complex2 = complex1.I.multiply(0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.createComplex(2502.12008134, 2502.12008134);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex0.atan();
      int int0 = complex0.hashCode();
      Complex complex6 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.ZERO.multiply(0.0);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.NaN.multiply(complex0);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex6.ONE.createComplex((-1952.499711141), 0.0);
      ComplexField complexField0 = complex6.getField();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex3.isInfinite();
      double double0 = complex5.getArgument();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-500.797525));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((Complex) null);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.INF.tan();
      Object object0 = complex0.ZERO.readResolve();
      // Undeclared exception!
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.multiply(1.5874010519681994);
      Complex complex4 = complex0.atan();
      ComplexField complexField0 = complex4.INF.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex6.I.tan();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex1.ZERO.acos();
      double double0 = complex5.getReal();
      Complex complex12 = complex1.asin();
      Object object0 = complex2.readResolve();
      Complex complex13 = complex3.createComplex(1.0, 3914.17599);
      Complex complex14 = complex2.conjugate();
      Complex complex15 = complex10.NaN.createComplex(926.66368242892, 1.0399887655788103);
      Complex complex16 = complex11.atan();
      Complex complex17 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.ONE.createComplex((-1040.613), (-1040.613));
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex6.pow(complex2);
      Complex complex9 = Complex.I;
      Complex complex10 = complex8.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      try { 
        complex0.nthRoot((-204));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -204
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-1155.0));
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.subtract(complex0);
      double double0 = complex1.getReal();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(469.648, (-3389.0539093514913));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ONE.pow(complex2);
      Complex complex7 = complex5.NaN.tan();
      Complex complex8 = complex6.NaN.multiply(461.24);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.ONE.sqrt();
      String string0 = complex2.I.toString();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex1.pow(complex5);
      Complex complex10 = complex7.pow(complex2);
      String string1 = complex9.toString();
      Complex complex11 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      String string0 = complex1.INF.toString();
      String string1 = complex0.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex6.INF.sinh();
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex7.cos();
      List<Complex> list0 = complex8.nthRoot(176);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-1.0));
      Complex complex4 = complex2.I.add(complex0);
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex6.multiply(complex2);
      List<Complex> list0 = complex0.nthRoot(1);
      boolean boolean0 = complex6.isNaN();
      Complex complex9 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.ZERO.pow(complex8);
      Complex complex10 = complex2.subtract(complex7);
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex11.tan();
      Complex complex13 = complex0.tanh();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1127.11169), (-1495.071350378));
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.INF.tanh();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = new Complex((-4.27413886266167), 2812.82350003);
      Complex complex8 = complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2845.7105114303376);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.tan();
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.1428571343421936, 0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1538.906894), (-1538.906894));
      Complex complex1 = complex0.INF.multiply((-1538.906894));
      Complex complex2 = complex1.I.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.INF.negate();
      int int0 = complex3.INF.hashCode();
      Complex complex5 = complex0.divide(complex3);
      double double0 = complex4.ZERO.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex4.sqrt1z();
      int int1 = complex0.hashCode();
      Complex complex7 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ONE.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.cos();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex3.multiply(complex0);
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex3.multiply((-475.15));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex3.ONE.sqrt();
      List<Complex> list0 = complex3.nthRoot(37);
      Complex complex5 = complex1.ZERO.tanh();
      Complex complex6 = complex0.I.add(complex2);
      Complex complex7 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      double double0 = complex2.abs();
      try { 
        complex1.nthRoot((-2119));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,119
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex1.multiply((-3325.2949234));
      Complex complex5 = complex4.NaN.createComplex((-3325.2949234), (-3325.2949234));
      Complex complex6 = complex0.sinh();
      double double0 = complex0.abs();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex0.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.createComplex((-391.7542582174), 2904.2638);
      Complex complex3 = complex0.ZERO.divide(complex1);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1250.6262966916186), 2039.1145761657);
      Complex complex1 = complex0.sinh();
      double double0 = complex1.getImaginary();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.INF.exp();
      Object object0 = complex0.readResolve();
      double double1 = complex2.ONE.abs();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex1.sinh();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.tan();
      Object object0 = complex0.ZERO.readResolve();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.acos();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.multiply(complex2);
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.sqrt();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex2.ONE.asin();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.ZERO.multiply(complex4);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(2.0, 2.0);
      Complex complex2 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex1.NaN.asin();
      Complex complex5 = complex2.divide(complex0);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex1.INF.acos();
      Complex complex8 = complex7.ZERO.multiply(complex4);
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex10.INF.atan();
      ComplexField complexField1 = complex9.getField();
      double double0 = complex1.abs();
      boolean boolean1 = complex1.isInfinite();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-126.3926265417328), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-126.3926265417328), (-126.3926265417328));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex2.multiply(0.0875862700108075);
      List<Complex> list0 = complex4.ONE.nthRoot(1);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex1.acos();
      double double0 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ONE.divide(complex0);
      Complex complex6 = complex4.multiply(complex1);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex7 = complex1.I.pow(complex2);
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.multiply(2124.561733412706);
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.pow(complex1);
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.divide(complex3);
      boolean boolean0 = complex4.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = new Complex(0.0, 1086.388281082123);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      Complex complex7 = complex3.subtract(complex2);
      Complex complex8 = complex7.ZERO.tanh();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex1.log();
      Complex complex10 = complex7.INF.cosh();
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex0.divide(complex3);
      double double0 = complex12.I.getArgument();
      double double1 = complex12.ONE.abs();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex6.subtract(complex12);
      Complex complex15 = complex2.subtract(complex0);
      Complex complex16 = complex15.ONE.subtract(complex1);
      double double2 = complex1.INF.getArgument();
      boolean boolean0 = complex14.equals(complex7);
      Complex complex17 = complex4.tanh();
      Complex complex18 = complex7.negate();
      Complex complex19 = complex14.add(complex3);
      Complex complex20 = complex8.cos();
      Complex complex21 = complex7.acos();
      Complex complex22 = complex6.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      double double0 = complex1.INF.abs();
      Object object0 = complex1.ONE.readResolve();
      double double1 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex3.ONE.add(complex1);
      Complex complex6 = complex3.log();
      try { 
        complex2.nthRoot((-3837));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,837
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.multiply(0.0);
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.tanh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.add(complex8);
      Complex complex10 = complex4.sin();
      try { 
        complex10.INF.nthRoot((-1559));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,559
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.ZERO.sinh();
      double double0 = complex1.ZERO.abs();
      Object object0 = complex0.I.readResolve();
      Complex complex4 = ((Complex) object0).NaN.atan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex5.ONE.tanh();
      Complex complex9 = complex5.sqrt1z();
      double double1 = complex1.getArgument();
      Complex complex10 = complex0.INF.subtract(complex3);
      Complex complex11 = complex1.subtract(complex2);
      int int0 = complex5.NaN.hashCode();
      Complex complex12 = complex9.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex3.isInfinite();
      Complex complex13 = complex12.cosh();
      Complex complex14 = complex13.INF.pow(complex9);
      Complex complex15 = complex13.asin();
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex5.sqrt1z();
      Complex complex18 = complex17.add(complex7);
      Complex complex19 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.createComplex((-1846.4321), (-1846.4321));
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex1.NaN.multiply((-1541.02111915819));
      Complex complex6 = complex0.I.subtract(complex1);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.INF.divide(complex1);
      Complex complex10 = complex5.pow(complex0);
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex10.add(complex6);
      double double0 = complex10.getArgument();
      Complex complex13 = complex0.cosh();
      Object object0 = complex13.ONE.readResolve();
      Complex complex14 = complex13.createComplex(3205.330909, 0.0);
      Complex complex15 = complex14.sqrt();
      boolean boolean0 = complex3.isNaN();
      Complex complex16 = complex11.tan();
      double double1 = complex16.ONE.abs();
      Complex complex17 = complex14.ZERO.atan();
      double double2 = complex11.NaN.abs();
      int int0 = complex13.hashCode();
      Object object1 = complex11.readResolve();
      Complex complex18 = complex0.tanh();
      Complex complex19 = complex9.asin();
      Complex complex20 = complex3.divide(complex14);
      boolean boolean1 = complex6.equals(complex13);
      Complex complex21 = complex7.tan();
      Complex complex22 = complex5.subtract(complex7);
      Complex complex23 = complex2.acos();
      Complex complex24 = complex6.acos();
      Complex complex25 = complex15.sinh();
      Complex complex26 = complex19.tanh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex1.NaN.pow(complex7);
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex11.ONE.negate();
      Complex complex13 = complex1.tan();
      Complex complex14 = complex11.sin();
      Complex complex15 = complex0.pow(complex10);
      double double0 = complex15.I.getArgument();
      Complex complex16 = complex15.ONE.tan();
      double double1 = complex12.abs();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(526.799303988, Double.NaN);
      Complex complex1 = new Complex(0.0, (-25.4));
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.multiply((-1832.2));
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex0.ONE.sqrt1z();
      Complex complex7 = complex2.ONE.tanh();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = new Complex(948.24382932141, 0.0);
      Complex complex11 = complex9.ZERO.pow(complex10);
      Complex complex12 = complex2.ONE.multiply(526.799303988);
      Complex complex13 = complex2.NaN.cos();
      Complex complex14 = complex13.ONE.tanh();
      Complex complex15 = complex14.NaN.pow(complex6);
      Complex complex16 = complex14.negate();
      List<Complex> list0 = complex2.nthRoot(112);
      double double0 = complex2.getReal();
      Complex complex17 = complex6.sin();
      Complex complex18 = complex17.ONE.conjugate();
      Complex complex19 = complex18.I.createComplex(Double.NaN, 0.0);
      try { 
        complex7.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex0.sinh();
      double double0 = complex5.getImaginary();
      Complex complex6 = complex1.INF.multiply(complex0);
      String string0 = complex3.NaN.toString();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex9.ONE.multiply(0.0);
      Complex complex11 = complex9.INF.createComplex(0.8414709848078965, 0.8414709848078965);
      Complex complex12 = complex9.NaN.cos();
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex0.INF.acos();
      double double1 = complex3.abs();
      Complex complex15 = complex7.exp();
      Complex complex16 = complex5.cosh();
      Complex complex17 = complex15.subtract(complex5);
      Complex complex18 = complex17.I.tanh();
      Complex complex19 = complex17.NaN.sqrt();
      Complex complex20 = complex16.add(complex2);
      boolean boolean0 = complex16.equals("(NaN, NaN)");
      double double2 = complex2.getArgument();
      Complex complex21 = complex11.multiply(0.0);
  }
}
