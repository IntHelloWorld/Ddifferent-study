/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:28:18 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(149.64595818, 149.64595818);
      Complex complex2 = complex1.INF.multiply((-1096.1686312752));
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.ONE.negate();
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex0.ONE.subtract(complex1);
      Complex complex7 = complex0.atan();
      boolean boolean0 = complex7.isInfinite();
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.INF.pow(complex6);
      Complex complex10 = complex1.acos();
      double double0 = complex8.ZERO.abs();
      String string0 = complex7.toString();
      Complex complex11 = complex3.sqrt();
      double double1 = complex1.getArgument();
      Complex complex12 = complex6.tanh();
      ComplexField complexField0 = complex5.getField();
      Complex complex13 = complex8.atan();
      ComplexField complexField1 = complex0.getField();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex14.ZERO.sqrt();
      Complex complex16 = complex14.NaN.log();
      double double2 = complex12.getArgument();
      Complex complex17 = complex6.cosh();
      Complex complex18 = complex10.sqrt();
      double double3 = complex6.getImaginary();
      Complex complex19 = complex14.log();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(9.220590270857665E-9, 9.220590270857665E-9);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.ONE.subtract(complex2);
      Complex complex5 = complex0.ONE.log();
      Complex complex6 = complex5.I.divide(complex1);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.ZERO.pow(complex7);
      Complex complex9 = complex3.pow(complex2);
      Object object0 = complex2.readResolve();
      int int0 = complex0.ONE.hashCode();
      Complex complex10 = complex3.NaN.log();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex11.NaN.acos();
      String string0 = complex12.toString();
      double double0 = complex11.NaN.getArgument();
      Complex complex13 = complex9.atan();
      boolean boolean0 = complex3.isNaN();
      Complex complex14 = complex1.I.asin();
      Complex complex15 = complex1.divide(complex13);
      Complex complex16 = new Complex((-1.0), (-1158.30462));
      boolean boolean1 = complex15.equals(complex16);
      Complex complex17 = complex4.negate();
      Complex complex18 = complex17.INF.sin();
      boolean boolean2 = complex11.isInfinite();
      Complex complex19 = complex8.pow(complex0);
      Complex complex20 = complex3.acos();
      Complex complex21 = complex5.cosh();
      Complex complex22 = complex10.exp();
      ComplexField complexField0 = complex2.getField();
      Complex complex23 = complex15.tanh();
      int int1 = complex20.hashCode();
      Complex complex24 = complex17.multiply(complex18);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex8.I.pow(complex0);
      Complex complex11 = complex6.multiply(complex8);
      double double0 = complex3.getReal();
      Complex complex12 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.INF.multiply(2.0);
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex2.INF.asin();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex4 = complex2.NaN.sinh();
      double double0 = complex0.getReal();
      double double1 = complex1.getReal();
      Complex complex5 = complex3.sinh();
      List<Complex> list0 = complex2.nthRoot(5487);
      Complex complex6 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.ONE.createComplex((-189.797839933831), (-189.797839933831));
      Complex complex5 = complex1.INF.exp();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex1.asin();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex8.pow(complex6);
      Complex complex10 = complex0.subtract(complex9);
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex11.INF.sin();
      Complex complex13 = complex12.ONE.add(complex10);
      Complex complex14 = complex5.divide(complex1);
      Complex complex15 = complex9.conjugate();
      Complex complex16 = complex1.pow(complex8);
      Complex complex17 = complex2.conjugate();
      ComplexField complexField0 = complex8.ONE.getField();
      String string0 = complex9.I.toString();
      Complex complex18 = complex2.multiply(0.0);
      Complex complex19 = complex7.sinh();
      ComplexField complexField1 = complex19.ZERO.getField();
      boolean boolean0 = complex10.isInfinite();
      double double0 = complex19.getArgument();
      boolean boolean1 = complex3.isNaN();
      Complex complex20 = complex12.add(complex6);
      boolean boolean2 = complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex4.log();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex1.INF.createComplex(1473.0, 749.0);
      Complex complex9 = complex7.I.negate();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = new Complex(1.0, (-1874.34131553911));
      Complex complex12 = complex6.ZERO.pow(complex4);
      Complex complex13 = complex0.INF.add(complex5);
      Complex complex14 = complex4.ONE.exp();
      Complex complex15 = complex11.I.exp();
      Complex complex16 = complex11.INF.sqrt1z();
      Complex complex17 = complex6.pow(complex11);
      String string0 = complex17.I.toString();
      Complex complex18 = complex17.ONE.multiply(complex4);
      Complex complex19 = complex5.exp();
      Complex complex20 = complex4.tanh();
      Complex complex21 = complex19.atan();
      Complex complex22 = complex11.ZERO.atan();
      double double1 = complex7.abs();
      Complex complex23 = complex5.sin();
      Complex complex24 = complex7.sin();
      ComplexField complexField0 = complex21.getField();
      Complex complex25 = complex1.multiply(complex6);
      boolean boolean0 = complex15.equals(complex24);
      Complex complex26 = complex8.atan();
      Complex complex27 = complex19.divide(complex3);
      Complex complex28 = complex14.sqrt();
      Complex complex29 = complex24.negate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.negate();
      double double0 = complex4.abs();
      double double1 = complex0.ONE.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.I.add(complex2);
      Complex complex7 = complex1.INF.pow(complex0);
      Complex complex8 = complex6.ONE.add(complex5);
      boolean boolean0 = complex0.equals(complex5);
      Complex complex9 = complex2.acos();
      Complex complex10 = complex0.sinh();
      int int0 = complex4.ZERO.hashCode();
      Complex complex11 = complex10.ZERO.asin();
      List<Complex> list0 = complex11.ONE.nthRoot(517);
      Complex complex12 = new Complex((-3068.764), (-3068.764));
      Complex complex13 = complex4.divide(complex12);
      Complex complex14 = complex2.acos();
      Complex complex15 = complex14.ZERO.asin();
      Complex complex16 = complex14.cos();
      double double2 = complex10.abs();
      Complex complex17 = complex1.multiply(complex10);
      Complex complex18 = complex17.tan();
      Complex complex19 = complex18.atan();
      Complex complex20 = complex4.subtract(complex2);
      Complex complex21 = complex20.INF.multiply((-3068.764));
      Complex complex22 = complex12.sinh();
      Complex complex23 = complex12.createComplex(1.0, 2022.6303851);
      Complex complex24 = complex4.cos();
      double double3 = complex19.getImaginary();
      Complex complex25 = complex5.negate();
      double double4 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-652.18), (-652.18));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.createComplex((-652.18), 6.0);
      ComplexField complexField0 = complex2.INF.getField();
      String string0 = complex0.INF.toString();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex2.INF.sqrt();
      Complex complex7 = complex6.INF.atan();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex10.ZERO.sqrt1z();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex6.sqrt();
      int int1 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2190.117025017499);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.NaN.sqrt();
      Object object0 = complex3.I.readResolve();
      Object object1 = complex1.ONE.readResolve();
      Complex complex4 = complex2.sin();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.cos();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex7.tan();
      String string1 = complex10.toString();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex3.acos();
      Complex complex13 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-417.0), (-417.0));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.I.tan();
      Complex complex6 = complex5.subtract(complex3);
      int int0 = complex0.hashCode();
      Complex complex7 = complex1.NaN.add(complex4);
      Object object0 = complex2.readResolve();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex3.sinh();
      double double0 = complex0.getReal();
      Complex complex10 = complex2.sqrt1z();
      boolean boolean0 = complex8.equals((Object) null);
      Complex complex11 = complex4.negate();
      Complex complex12 = complex11.add(complex10);
      ComplexField complexField0 = complex11.ONE.getField();
      List<Complex> list0 = complex12.nthRoot(248);
      Complex complex13 = complex12.I.cos();
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex2.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-3961.524029362), (-3961.524029362));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.pow(complex1);
      double double0 = complex4.I.abs();
      Complex complex5 = complex0.INF.pow(complex3);
      Complex complex6 = complex4.INF.cos();
      Complex complex7 = complex6.NaN.divide(complex1);
      Object object0 = complex6.NaN.readResolve();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex0.atan();
      try { 
        complex8.nthRoot((-1401));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,401
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex2.ZERO.add(complex1);
      double double0 = complex0.INF.abs();
      Complex complex6 = complex2.I.asin();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex0.INF.multiply(complex2);
      Complex complex9 = complex7.ONE.tanh();
      Complex complex10 = complex0.INF.negate();
      Complex complex11 = complex1.add(complex7);
      List<Complex> list0 = complex11.nthRoot(2053);
      int int0 = complex2.hashCode();
      double double1 = complex6.abs();
      double double2 = complex9.getReal();
      double double3 = complex7.getImaginary();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex0.asin();
      Complex complex14 = complex13.ZERO.sin();
      List<Complex> list1 = complex2.nthRoot(4236);
      Complex complex15 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2.718281828459045, 2.718281828459045);
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex1.ZERO.createComplex(998.27, 998.27);
      Complex complex5 = complex0.NaN.divide(complex1);
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.ZERO.tan();
      boolean boolean0 = complex0.equals(complex7);
      Complex complex9 = complex0.ONE.subtract(complex7);
      Complex complex10 = complex0.acos();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex9.conjugate();
      String string0 = complex7.toString();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex11.getImaginary();
      Complex complex14 = complex9.acos();
      Complex complex15 = complex9.add(complex7);
      Complex complex16 = complex11.add(complex4);
      Complex complex17 = complex9.sqrt();
      Complex complex18 = complex4.sin();
      Complex complex19 = complex14.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(213.81);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.ONE.pow(complex2);
      Complex complex4 = complex2.sinh();
      String string0 = complex2.ZERO.toString();
      Complex complex5 = complex0.ZERO.multiply(213.81);
      Complex complex6 = complex1.INF.log();
      double double0 = complex6.INF.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, (-3982.018047349));
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.INF.add(complex1);
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex1.createComplex(0.14982303977012634, 0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-364.160582), (-971.7));
      Complex complex1 = complex0.NaN.tan();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.I.log();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.I.multiply((-2.356194490192345));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex4.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.negate();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.ONE.toString();
      Complex complex2 = Complex.ZERO;
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-6.663542893624021E-14), (-20.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex3.INF.acos();
      Complex complex8 = complex7.I.sqrt1z();
      int int0 = complex7.I.hashCode();
      String string0 = complex8.I.toString();
      ComplexField complexField0 = complex8.INF.getField();
      double double0 = complex0.getImaginary();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex10.add(complex1);
      Complex complex12 = complex9.I.cos();
      List<Complex> list0 = complex11.nthRoot(1);
      Complex complex13 = complex9.multiply((-20.0));
      String string1 = complex10.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-491.9), (-491.9));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.asin();
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex5.I.atan();
      Complex complex9 = complex4.multiply(2012.3164);
      Complex complex10 = complex5.tan();
      Complex complex11 = complex9.negate();
      boolean boolean1 = complex1.equals(complex0);
      Complex complex12 = complex9.cosh();
      String string0 = complex8.toString();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex1.multiply(complex13);
      boolean boolean2 = complex2.equals(complex9);
      double double0 = complex0.abs();
      List<Complex> list1 = complex2.nthRoot(1723);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.INF.cosh();
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.I.cosh();
      String string0 = complex0.ZERO.toString();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex1.ZERO.pow(complex3);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex0.cos();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex5.divide(complex3);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.log();
      Complex complex11 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-714.5), 2.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.sin();
      double double0 = complex0.abs();
      Complex complex3 = Complex.I;
      int int0 = complex2.NaN.hashCode();
      Complex complex4 = complex3.INF.multiply(0.0);
      Complex complex5 = complex4.atan();
      double double1 = complex4.ONE.getArgument();
      Complex complex6 = complex3.I.sqrt();
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex2.ZERO.sin();
      double double2 = complex7.abs();
      int int1 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Object object0 = complex1.ZERO.readResolve();
      try { 
        complex1.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex1.INF.multiply(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.multiply(0.0);
      boolean boolean0 = complex0.equals(complex4);
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex4.ZERO.acos();
      Object object0 = complex4.NaN.readResolve();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object1);
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.conjugate();
      double double2 = complex6.ZERO.abs();
      boolean boolean1 = complex0.isInfinite();
      double double3 = complex4.getReal();
      Complex complex7 = complex6.subtract(complex1);
      double double4 = complex0.abs();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex3.createComplex(1.0, 0.0);
      Complex complex10 = complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.I.multiply(6.283185307179586);
      double double0 = complex1.abs();
      Complex complex4 = complex2.ONE.exp();
      ComplexField complexField0 = complex2.ONE.getField();
      boolean boolean0 = complex1.equals((Object) null);
      boolean boolean1 = complex2.equals((Object) null);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.sinh();
      boolean boolean2 = complex1.isInfinite();
      Complex complex7 = complex6.add(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.log();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex3.INF.add(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ZERO.divide(complex2);
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = complex2.log();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex8.ZERO.subtract(complex2);
      Complex complex10 = complex9.ZERO.tanh();
      Complex complex11 = complex10.INF.cosh();
      int int0 = complex5.hashCode();
      Complex complex12 = complex0.sin();
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-390.507), 6.283185307179586);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.exp();
      try { 
        complex2.nthRoot((-1603));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,603
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.ZERO.divide(complex1);
      Object object0 = complex4.readResolve();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.INF.acos();
      Complex complex7 = complex0.createComplex(0.7853981633974483, 0.1538461446762085);
      Complex complex8 = complex7.I.exp();
      double double1 = complex8.I.getArgument();
      Object object1 = complex4.ZERO.readResolve();
      Complex complex9 = complex4.log();
      Complex complex10 = complex2.NaN.multiply(0.0);
      String string0 = complex7.toString();
      Complex complex11 = complex4.conjugate();
      boolean boolean0 = complex2.isInfinite();
      int int0 = complex2.hashCode();
      Complex complex12 = complex4.sin();
      boolean boolean1 = complex5.equals(complex3);
      Complex complex13 = complex11.log();
      Complex complex14 = complex13.NaN.asin();
      Complex complex15 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex2.getArgument();
      Complex complex4 = complex0.ZERO.acos();
      double double1 = complex4.NaN.getArgument();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.ZERO.pow(complex5);
      Complex complex7 = complex0.log();
      Complex complex8 = complex3.exp();
      try { 
        complex4.nthRoot((-174));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -174
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.createComplex((-889), 1817.0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      try { 
        complex0.nthRoot((-889));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -889
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex3.ONE.add(complex0);
      double double0 = complex0.abs();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.subtract(complex0);
      Complex complex7 = complex0.tan();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.multiply((-2304.9197131028104));
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = complex4.ONE.sin();
      List<Complex> list0 = complex0.nthRoot(269);
      double double0 = complex0.abs();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-409.306378));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.INF.tanh();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.asin();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.multiply(complex1);
      int int0 = complex4.I.hashCode();
      Object object0 = complex4.readResolve();
      int int1 = complex1.hashCode();
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.asin();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.NaN.pow(complex5);
      Complex complex8 = complex6.I.sqrt();
      int int0 = complex2.hashCode();
      Complex complex9 = complex5.subtract(complex0);
      Complex complex10 = complex1.INF.add(complex2);
      try { 
        complex4.nthRoot((-255));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -255
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.I.multiply(Double.NaN);
      Complex complex7 = complex4.sqrt();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex2.I.atan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.INF.multiply(0.1666666505023083);
      Complex complex6 = complex0.sin();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0875862700108075);
      Complex complex1 = complex0.ZERO.multiply(0.0875862700108075);
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.add(complex0);
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex1.NaN.add(complex0);
      Complex complex6 = complex0.NaN.acos();
      double double0 = complex1.getReal();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex5.sqrt();
      Object object0 = complex8.readResolve();
      boolean boolean0 = complex6.equals(object0);
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = complex9.NaN.multiply(complex0);
      ComplexField complexField0 = complex8.getField();
      Object object1 = complex9.readResolve();
      double double1 = complex9.getImaginary();
      Complex complex12 = complex6.tanh();
      Complex complex13 = new Complex(0.0, Double.NaN);
      Object object2 = complex13.ONE.readResolve();
      boolean boolean1 = complex6.equals(complex13);
      Complex complex14 = complex2.NaN.tanh();
      int int0 = complex1.hashCode();
      Complex complex15 = complex3.negate();
      Complex complex16 = complex15.INF.exp();
      Complex complex17 = complex16.NaN.cos();
      Complex complex18 = complex16.ONE.negate();
      Complex complex19 = complex8.conjugate();
      Complex complex20 = complex15.subtract(complex8);
      double double2 = complex3.getReal();
      Complex complex21 = complex10.multiply(complex2);
      Complex complex22 = complex7.tan();
      Complex complex23 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex2.exp();
      double double1 = complex6.INF.getArgument();
      Complex complex7 = complex3.ONE.createComplex(Double.NaN, 0.6299605249474366);
      Complex complex8 = complex1.multiply(complex3);
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex2.ONE.conjugate();
      Complex complex10 = complex4.ONE.sqrt();
      Complex complex11 = complex5.createComplex(6.283185307179586, 0.7853981633974483);
      Complex complex12 = complex5.multiply(5.0);
      Complex complex13 = Complex.I;
      double double2 = complex13.abs();
      Complex complex14 = complex2.NaN.divide(complex13);
      double double3 = complex5.getArgument();
      Complex complex15 = complex4.exp();
      Complex complex16 = complex2.multiply(6.283185307179586);
      Complex complex17 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.NaN.pow(complex3);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex0.acos();
      boolean boolean0 = complex7.equals(complex0);
      Complex complex8 = complex2.ONE.log();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex0.ONE.sqrt();
      boolean boolean1 = complex2.equals(complex1);
      Complex complex11 = complex7.multiply(complex1);
      int int0 = 4;
      List<Complex> list0 = complex11.nthRoot(4);
      Complex complex12 = complex11.NaN.pow(complex2);
      int int1 = complex12.NaN.hashCode();
      try { 
        complex11.nthRoot((-913));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -913
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.INF.cosh();
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex1.ONE.cosh();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex0.ZERO.divide(complex1);
      Complex complex6 = complex0.INF.atan();
      Complex complex7 = complex4.INF.add(complex1);
      Complex complex8 = complex6.NaN.multiply(381.61453);
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex0.INF.conjugate();
      List<Complex> list1 = complex1.nthRoot(1);
      Complex complex10 = complex1.ONE.atan();
      Complex complex11 = complex4.ZERO.sqrt1z();
      Complex complex12 = complex1.cosh();
      String string0 = complex4.toString();
      Complex complex13 = complex1.log();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex14.ZERO.negate();
      Complex complex16 = complex14.NaN.tanh();
      Complex complex17 = complex4.divide(complex14);
      Complex complex18 = complex5.acos();
      boolean boolean1 = complex1.isNaN();
      Object object0 = complex14.readResolve();
      Complex complex19 = complex0.sqrt1z();
      Complex complex20 = complex19.ZERO.atan();
      Complex complex21 = complex1.createComplex(1, 1);
      Complex complex22 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.NaN.conjugate();
      Object object1 = complex1.I.readResolve();
      Complex complex7 = complex3.ONE.sqrt();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.multiply(1.0);
      Complex complex11 = complex9.subtract(complex2);
      Complex complex12 = complex9.multiply(complex2);
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex13.multiply((-1773.282027591156));
      Complex complex15 = complex13.NaN.multiply(1.0);
      Complex complex16 = complex10.createComplex(1.0, (-1773.282027591156));
      Complex complex17 = complex0.NaN.multiply(1.0);
      Complex complex18 = complex13.atan();
      Complex complex19 = complex13.multiply(1.0);
      Complex complex20 = complex2.multiply((-1773.282027591156));
      Complex complex21 = complex7.sin();
      Complex complex22 = complex6.sinh();
      Complex complex23 = complex22.divide(complex15);
      Complex complex24 = complex6.sqrt();
      int int0 = complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = new Complex((-1977.092383), 215.3919994181495);
      Complex complex3 = complex0.subtract(complex2);
      try { 
        complex3.ZERO.nthRoot((-2064));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,064
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      try { 
        complex0.nthRoot((-127));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -127
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ONE.multiply(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.NaN.sqrt1z();
      double double0 = complex1.getArgument();
      String string0 = complex5.toString();
      Complex complex8 = complex4.tan();
      String string1 = complex8.NaN.toString();
      List<Complex> list0 = complex6.nthRoot(957);
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex5.log();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex12.INF.sinh();
      Complex complex14 = complex13.INF.sinh();
      int int0 = complex8.hashCode();
      Complex complex15 = complex12.conjugate();
      Complex complex16 = complex8.log();
      Complex complex17 = complex9.cos();
      Object object0 = complex17.readResolve();
      Complex complex18 = complex1.acos();
      Complex complex19 = complex9.pow(complex15);
      Complex complex20 = complex15.conjugate();
      Complex complex21 = complex6.asin();
      Complex complex22 = complex3.acos();
      Complex complex23 = complex6.divide(complex1);
  }
}
