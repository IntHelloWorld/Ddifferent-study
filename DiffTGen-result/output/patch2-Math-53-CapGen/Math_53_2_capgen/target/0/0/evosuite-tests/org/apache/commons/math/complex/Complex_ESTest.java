/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:24:43 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.divide(complex0);
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.NaN.multiply((-1.5707963267948966));
      double double1 = complex2.getReal();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex9.INF.subtract(complex0);
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex9.cosh();
      boolean boolean0 = complex8.isNaN();
      int int0 = complex8.hashCode();
      boolean boolean1 = complex3.isNaN();
      boolean boolean2 = complex0.isInfinite();
      Complex complex14 = complex4.exp();
      Complex complex15 = complex14.INF.sinh();
      double double2 = complex2.getArgument();
      Complex complex16 = complex3.negate();
      Complex complex17 = complex8.multiply(complex1);
      Complex complex18 = complex17.ONE.sqrt();
      Complex complex19 = complex18.multiply(Double.NaN);
      Complex complex20 = complex16.sin();
      Object object1 = complex2.readResolve();
      Complex complex21 = complex15.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply((-1186.8818620001));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex5.INF.sin();
      Complex complex8 = complex7.ZERO.cosh();
      double double0 = complex5.getReal();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex5.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1972.7802942129895, 1563.8377761);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.ONE.multiply((-3220.2));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex7.NaN.subtract(complex8);
      Complex complex10 = complex1.multiply(2274.667698);
      Complex complex11 = complex6.exp();
      Complex complex12 = complex11.INF.negate();
      int int0 = complex4.hashCode();
      ComplexField complexField0 = complex8.getField();
      Complex complex13 = complex0.sin();
      List<Complex> list0 = complex4.nthRoot(1095);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = null;
      int int0 = complex0.NaN.hashCode();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1808.8391383), (-4153.32604815));
      Complex complex1 = complex0.ZERO.createComplex((-144.614), 1.176342548272881E-8);
      ComplexField complexField0 = complex0.ZERO.getField();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex2.asin();
      double double0 = complex3.NaN.abs();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex1.NaN.log();
      Complex complex8 = complex4.INF.sinh();
      Complex complex9 = complex2.pow(complex0);
      Complex complex10 = complex9.NaN.divide(complex1);
      Complex complex11 = complex3.INF.createComplex((-1808.8391383), (-4153.32604815));
      Complex complex12 = complex3.cos();
      Complex complex13 = complex12.asin();
      int int1 = complex13.hashCode();
      double double1 = complex12.getImaginary();
      Object object0 = complex8.readResolve();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex10.add(complex14);
      Complex complex16 = complex10.atan();
      List<Complex> list0 = complex13.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2853.13662));
      Complex complex1 = complex0.I.createComplex((-2853.13662), (-1907.022));
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.log();
      double double0 = complex5.NaN.abs();
      List<Complex> list0 = complex6.ZERO.nthRoot(1912);
      Complex complex7 = complex0.negate();
      double double1 = complex0.I.abs();
      ComplexField complexField1 = complex1.getField();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex1.asin();
      double double2 = complex0.getArgument();
      double double3 = complex9.abs();
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex9.multiply(complex3);
      Complex complex11 = complex10.NaN.cos();
      Complex complex12 = complex8.sinh();
      Complex complex13 = complex6.acos();
      double double4 = complex2.getReal();
      boolean boolean1 = complex9.isNaN();
      Complex complex14 = complex2.asin();
      Complex complex15 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex0.add(complex1);
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex6.ZERO.pow(complex5);
      ComplexField complexField1 = complex3.getField();
      Complex complex8 = complex5.ZERO.cosh();
      String string0 = complex0.toString();
      Complex complex9 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.createComplex(0.0, 9.219544613762692E-9);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex2.INF.negate();
      double double0 = complex1.abs();
      double double1 = complex1.getReal();
      double double2 = complex4.getReal();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.asin();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex0.NaN.pow(complex4);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex0.multiply((-2908.588408367606));
      Complex complex8 = complex1.createComplex((-2908.588408367606), (-233.579939909));
      Complex complex9 = complex0.createComplex((-9.423496414895), (-233.579939909));
      Complex complex10 = complex6.log();
      int int0 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-2202.978890568785), (-2202.978890568785));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.exp();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex4.ONE.add(complex1);
      double double0 = complex2.ZERO.getArgument();
      double double1 = complex0.getArgument();
      String string0 = complex2.toString();
      Complex complex6 = complex1.cosh();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.sqrt1z();
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.INF.cos();
      try { 
        complex4.ONE.nthRoot((-2758));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,758
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.ZERO.sin();
      double double0 = complex2.INF.abs();
      Complex complex5 = complex2.pow(complex0);
      List<Complex> list0 = complex5.INF.nthRoot(42);
      double double1 = complex5.NaN.abs();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ZERO.cosh();
      Object object0 = complex6.readResolve();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex8.I.sin();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex11.INF.divide(complex10);
      Complex complex13 = complex2.sqrt1z();
      int int0 = complex2.hashCode();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex3.isNaN();
      Complex complex14 = complex1.negate();
      double double2 = complex4.getArgument();
      String string0 = complex8.toString();
      double double3 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex1.NaN.createComplex(1.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.negate();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex0.ZERO.add(complex1);
      Complex complex6 = complex1.ZERO.createComplex(0.0, (-8.0E298));
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex3.INF.tanh();
      try { 
        complex6.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-2308.725), (-2308.725));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-762.636470719797));
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.ONE.cosh();
      int int1 = complex1.INF.hashCode();
      String string0 = complex0.toString();
      Complex complex4 = complex0.sqrt();
      double double0 = complex1.getArgument();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex4.equals("(Infinity, -762.636470719797)");
      Complex complex5 = complex3.conjugate();
      boolean boolean2 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.divide(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex1.multiply(1937.139133);
      int int0 = complex0.hashCode();
      Complex complex10 = complex6.cos();
      Complex complex11 = complex9.pow(complex8);
      Complex complex12 = complex11.ZERO.sqrt();
      boolean boolean0 = complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.INF.hashCode();
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.NaN.createComplex(Double.POSITIVE_INFINITY, 2916.603021);
      Complex complex3 = complex2.ONE.sinh();
      String string0 = complex0.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      double double0 = complex2.abs();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.multiply(Double.NaN);
      Complex complex9 = complex5.multiply(1.986821492305628E-8);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(318.81251, 318.81251);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = new Complex(318.81251, 318.81251);
      Complex complex6 = complex5.I.sqrt1z();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex2.divide(complex5);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.I.multiply(318.81251);
      Complex complex12 = complex1.createComplex(0.0, 6.283185307179586);
      Complex complex13 = complex5.multiply(0.0);
      Complex complex14 = complex4.sin();
      Complex complex15 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.log();
      List<Complex> list0 = complex1.nthRoot(17);
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex2.divide(complex4);
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex7.atan();
      List<Complex> list0 = complex0.nthRoot(2055);
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex1.I.createComplex((-1346.38643453), (-1232.6047728));
      double double0 = complex4.I.abs();
      Complex complex5 = complex1.I.add(complex0);
      Complex complex6 = complex1.cosh();
      List<Complex> list0 = complex6.INF.nthRoot(37);
      int int0 = complex0.hashCode();
      Complex complex7 = complex0.NaN.tanh();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex5.add(complex3);
      Complex complex11 = complex1.ZERO.asin();
      Complex complex12 = complex10.negate();
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex13.INF.pow(complex9);
      Complex complex15 = complex14.ONE.negate();
      Complex complex16 = complex5.add(complex3);
      Complex complex17 = complex0.exp();
      Complex complex18 = complex16.asin();
      Complex complex19 = complex7.multiply(2.0);
      Complex complex20 = complex1.cosh();
      Complex complex21 = complex17.sin();
      Complex complex22 = complex21.tan();
      Complex complex23 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.createComplex(0.0, 3180.955099);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ZERO.multiply(complex0);
      Complex complex8 = complex6.subtract(complex4);
      double double0 = complex5.ZERO.getArgument();
      int int0 = complex6.NaN.hashCode();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex10.ONE.log();
      Complex complex12 = complex9.ONE.asin();
      Complex complex13 = complex5.multiply(complex9);
      double double1 = complex4.getImaginary();
      Complex complex14 = complex4.sin();
      Complex complex15 = complex6.exp();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex16 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2821.22022853));
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex5.conjugate();
      try { 
        complex6.nthRoot((-2470));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,470
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-84.60613063));
      String string0 = complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex1.multiply(6.283185307179586);
      double double0 = complex4.getReal();
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.exp();
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex2.ONE.log();
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.cosh();
      double double1 = complex2.abs();
      String string0 = complex2.toString();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex2.divide(complex3);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex6.INF.asin();
      Complex complex12 = complex10.ZERO.createComplex((-3197.72188981438), 296.7793049478911);
      Complex complex13 = complex9.ZERO.tan();
      Complex complex14 = complex6.createComplex(1.0, (-849.7631939416));
      ComplexField complexField0 = complex6.getField();
      Complex complex15 = complex12.pow(complex9);
      double double2 = complex10.getReal();
      double double3 = complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex0.ONE.log();
      Complex complex9 = complex1.createComplex(0.0036, 1860.6240625915);
      Complex complex10 = complex9.cos();
      Object object1 = complex9.readResolve();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex11.ZERO.add(complex1);
      Complex complex13 = complex11.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.log();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.NaN.sqrt();
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.exp();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.INF.subtract(complex3);
      Complex complex6 = complex4.INF.multiply(3815.89);
      String string0 = complex4.ZERO.toString();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex2.I.add(complex0);
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex2.ZERO.cosh();
      double double0 = complex0.getReal();
      Complex complex11 = complex3.sin();
      String string1 = complex11.I.toString();
      Complex complex12 = complex2.tanh();
      Complex complex13 = complex3.createComplex((-1015.456), (-1015.456));
      Complex complex14 = complex8.add(complex5);
      Complex complex15 = complex2.negate();
      try { 
        complex0.nthRoot((-4147));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,147
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2.0);
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      double double0 = complex0.abs();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.multiply((-1594.28));
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = new Complex(0.0, (-84.341094829015));
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.NaN.divide(complex4);
      List<Complex> list0 = complex0.NaN.nthRoot(37);
      Complex complex7 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.cosh();
      List<Complex> list0 = complex4.I.nthRoot(446);
      double double0 = complex2.getReal();
      Complex complex5 = complex2.divide(complex3);
      double double1 = complex4.getImaginary();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.cos();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex6.ONE.add(complex1);
      Complex complex8 = complex5.subtract(complex0);
      Complex complex9 = complex3.ZERO.sin();
      try { 
        complex6.nthRoot((-4237));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,237
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex0.NaN.abs();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.divide(complex1);
      ComplexField complexField1 = complex2.ONE.getField();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex2.NaN.divide(complex3);
      Complex complex6 = complex5.I.subtract(complex3);
      boolean boolean0 = complex2.isInfinite();
      double double2 = complex1.getArgument();
      double double3 = complex2.getImaginary();
      Complex complex7 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.createComplex((-208.02552625144), (-208.02552625144));
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex1.I.negate();
      String string0 = complex1.toString();
      Complex complex7 = complex1.cos();
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex1.multiply((-208.02552625144));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex3.createComplex(0.0, 0.0);
      Complex complex7 = complex3.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.I.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.createComplex((-535.0), (-535.0));
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex0.ONE.sinh();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex5.ONE.multiply((-535.0));
      Object object1 = complex7.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = new Complex(0.7853981633974483, (-535.0));
      Complex complex9 = complex4.I.pow(complex8);
      List<Complex> list0 = complex5.nthRoot(3754);
      Complex complex10 = complex4.multiply(complex5);
      Complex complex11 = complex0.createComplex((-535.0), (-535.0));
      Complex complex12 = complex11.ZERO.createComplex(3754, (-535.0));
      Object object2 = complex11.I.readResolve();
      Complex complex13 = complex10.exp();
      boolean boolean0 = complex5.isInfinite();
      ComplexField complexField1 = complex5.getField();
      Complex complex14 = complex4.add(complex10);
      Complex complex15 = complex14.subtract(complex6);
      boolean boolean1 = complex15.equals(":=to)1p4QVLfTI");
      Complex complex16 = complex4.exp();
      Object object3 = complex7.readResolve();
      Complex complex17 = complex11.tanh();
      Complex complex18 = complex17.acos();
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(261.0, 3522.6);
      Complex complex1 = complex0.INF.cos();
      int int0 = complex1.ZERO.hashCode();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.createComplex(261.0, 261.0);
      Complex complex5 = complex4.add(complex3);
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex3.subtract(complex4);
      double double1 = complex3.abs();
      Complex complex7 = complex5.ONE.sinh();
      Complex complex8 = complex0.I.createComplex(3522.6, 261.0);
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex8.INF.sinh();
      double double2 = complex2.getImaginary();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex3.sqrt();
      Complex complex13 = complex2.sin();
      Complex complex14 = complex3.divide(complex0);
      String string0 = complex14.ONE.toString();
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex14.atan();
      Complex complex17 = complex14.tanh();
      Object object1 = complex14.readResolve();
      Complex complex18 = complex2.multiply(261.0);
      double double3 = complex13.abs();
      Complex complex19 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.sinh();
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.ONE.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      Complex complex3 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(1314.2802098134339, (-981.6601821));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(2447.070391402, 2447.070391402);
      Complex complex1 = complex0.INF.cosh();
      int int0 = complex1.ONE.hashCode();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.acos();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex0.sqrt1z();
      String string0 = complex3.I.toString();
      double double0 = complex3.abs();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.ZERO.negate();
      String string1 = complex6.NaN.toString();
      Complex complex8 = complex0.tan();
      int int1 = complex0.INF.hashCode();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.ONE.cosh();
      double double1 = complex5.getImaginary();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex11.log();
      double double2 = complex1.abs();
      Complex complex13 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-37.28327), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex2.ONE.sinh();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.ZERO.sin();
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex5.cosh();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2071.643), (-2071.643));
      Complex complex2 = complex1.atan();
      double double0 = complex0.abs();
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = complex0.ZERO.sinh();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.ZERO.sqrt1z();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = new Complex(801.1833208, 801.1833208);
      Complex complex5 = complex3.I.divide(complex4);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.tanh();
      int int0 = complex1.hashCode();
      double double0 = complex3.I.abs();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex0.subtract(complex3);
      double double1 = complex3.getArgument();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.cos();
      double double0 = complex0.INF.abs();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex2.log();
      Complex complex8 = complex3.ZERO.createComplex(Double.POSITIVE_INFINITY, 2340.49);
      Complex complex9 = complex8.divide(complex6);
      Complex complex10 = Complex.I;
      Complex complex11 = complex8.ZERO.add(complex10);
      Complex complex12 = complex2.cos();
      Complex complex13 = complex7.sin();
      Complex complex14 = complex13.I.pow(complex7);
      Complex complex15 = complex14.I.cosh();
      Complex complex16 = complex14.ZERO.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex17 = complex3.negate();
      Complex complex18 = complex17.INF.conjugate();
      Complex complex19 = complex2.tanh();
      Complex complex20 = complex0.ZERO.multiply(complex4);
      Object object1 = complex4.readResolve();
      boolean boolean0 = complex4.equals(object1);
      Complex complex21 = complex12.INF.divide(complex13);
      Complex complex22 = complex21.INF.subtract(complex14);
      Complex complex23 = complex21.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      Complex complex24 = complex0.pow(complex12);
      Complex complex25 = complex4.pow(complex6);
      Complex complex26 = complex3.pow(complex9);
      Complex complex27 = complex9.multiply(complex7);
      int int0 = complex6.hashCode();
      Complex complex28 = complex27.multiply(complex2);
      double double1 = complex26.getArgument();
      ComplexField complexField1 = complex24.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.asin();
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.atan();
      List<Complex> list0 = complex4.ZERO.nthRoot(1);
      String string0 = complex4.INF.toString();
      Complex complex5 = complex0.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex3.NaN.sqrt();
      Complex complex9 = complex3.ONE.multiply((-1276.07820926328));
      Complex complex10 = complex3.I.conjugate();
      boolean boolean0 = complex5.isInfinite();
      double double0 = complex4.getReal();
      Complex complex11 = complex8.sqrt();
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex12.ZERO.atan();
      Complex complex14 = complex6.sin();
      Complex complex15 = complex0.divide(complex12);
      double double1 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1.9868161777724352E-8, 1.9868161777724352E-8);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex2.NaN.negate();
      double double0 = complex2.getImaginary();
      double double1 = complex6.getImaginary();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex3.ZERO.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ONE.pow(complex1);
      Complex complex7 = complex2.I.multiply(complex3);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex10.INF.multiply(complex5);
      ComplexField complexField0 = complex2.getField();
      List<Complex> list0 = complex2.ZERO.nthRoot(195);
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex12.INF.log();
      Object object0 = complex13.NaN.readResolve();
      int int0 = complex2.hashCode();
      Complex complex14 = complex13.NaN.atan();
      Complex complex15 = complex13.ZERO.tan();
      Complex complex16 = complex14.exp();
      Complex complex17 = complex2.tanh();
      Complex complex18 = complex17.INF.negate();
      Complex complex19 = complex12.sinh();
      Complex complex20 = complex17.ZERO.sqrt();
      Complex complex21 = complex12.INF.subtract(complex4);
      Complex complex22 = complex13.createComplex((-1.0E-6), 0.0);
      Complex complex23 = complex0.cosh();
      Complex complex24 = complex9.divide(complex6);
      Complex complex25 = complex24.ZERO.tanh();
      Complex complex26 = complex1.multiply((-1.0E-6));
      Complex complex27 = complex17.sqrt1z();
      Complex complex28 = complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex0.conjugate();
      List<Complex> list0 = complex4.nthRoot(315);
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex7.exp();
      Object object1 = complex6.readResolve();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.ONE.divide(complex8);
      Complex complex13 = complex11.sinh();
      double double0 = complex3.abs();
      Complex complex14 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex2.NaN.exp();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex2.I.sqrt1z();
      int int0 = complex6.hashCode();
      Complex complex10 = complex2.conjugate();
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.NaN.abs();
      double double1 = complex0.INF.abs();
      Complex complex1 = complex0.tan();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex3.INF.sin();
      boolean boolean0 = complex0.equals(complex1);
      double double2 = complex1.abs();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.INF.subtract(complex5);
      boolean boolean1 = complex6.isInfinite();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex5.NaN.cos();
      Complex complex10 = complex8.pow(complex0);
      Complex complex11 = complex5.multiply(0.0);
      Complex complex12 = complex3.subtract(complex5);
      Complex complex13 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.abs();
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.log();
      String string1 = complex1.I.toString();
      Complex complex2 = complex1.NaN.multiply(0.0);
      String string2 = complex1.NaN.toString();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.INF.asin();
      Object object1 = complex3.readResolve();
      Complex complex8 = complex0.log();
  }
}
