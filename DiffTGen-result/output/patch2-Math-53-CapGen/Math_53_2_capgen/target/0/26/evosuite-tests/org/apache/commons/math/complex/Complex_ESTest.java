/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:35:25 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-456.542), (-1.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex4.tan();
      int int0 = complex3.hashCode();
      Complex complex6 = complex3.I.sqrt();
      Complex complex7 = complex6.NaN.cosh();
      Object object0 = complex3.readResolve();
      Complex complex8 = Complex.I;
      double double0 = complex8.I.abs();
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex0.ONE.pow(complex8);
      Complex complex11 = complex10.NaN.subtract(complex1);
      Complex complex12 = complex1.ONE.atan();
      Complex complex13 = complex3.sinh();
      String string0 = complex3.toString();
      double double1 = complex2.getArgument();
      Complex complex14 = complex2.cos();
      boolean boolean0 = complex0.isNaN();
      int int1 = complex4.hashCode();
      ComplexField complexField0 = complex3.getField();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = complex13.createComplex((-1.0), 736.2942705);
      Complex complex17 = complex1.divide(complex7);
      Complex complex18 = complex15.cos();
      Complex complex19 = complex8.multiply(complex18);
      boolean boolean1 = complex16.isInfinite();
      double double2 = complex10.getImaginary();
      Complex complex20 = complex11.conjugate();
      int int2 = complex7.hashCode();
      Complex complex21 = complex15.conjugate();
      Complex complex22 = complex13.exp();
      Complex complex23 = complex9.pow(complex20);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(119.2963678385, 119.2963678385);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex0.I.createComplex(119.2963678385, 119.2963678385);
      Complex complex6 = complex0.ONE.sin();
      Object object0 = complex6.readResolve();
      double double0 = complex0.abs();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex6.subtract(complex5);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.ZERO.subtract(complex10);
      Complex complex12 = complex9.ZERO.tan();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex13.INF.cosh();
      Complex complex15 = complex4.NaN.conjugate();
      Complex complex16 = complex7.sinh();
      Complex complex17 = complex10.ZERO.asin();
      Complex complex18 = complex16.exp();
      boolean boolean0 = complex2.equals(complex6);
      Complex complex19 = complex10.sin();
      Complex complex20 = complex19.INF.sinh();
      Complex complex21 = complex5.multiply(194.4606);
      Complex complex22 = complex6.pow(complex7);
      Complex complex23 = complex2.multiply(complex12);
      Complex complex24 = complex13.NaN.add(complex4);
      Complex complex25 = complex4.createComplex(168.71054133905622, 168.71054133905622);
      Complex complex26 = complex0.tanh();
      Complex complex27 = complex9.ONE.log();
      Complex complex28 = complex14.multiply(935.3060759407517);
      Complex complex29 = complex28.ZERO.conjugate();
      Complex complex30 = complex29.multiply(119.2963678385);
      Complex complex31 = complex23.tan();
      Complex complex32 = complex28.sinh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1829.62, 1829.62);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.INF.subtract(complex2);
      Complex complex6 = complex3.ONE.cos();
      Complex complex7 = complex6.ZERO.subtract(complex2);
      Complex complex8 = complex7.INF.sqrt();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex2.ZERO.acos();
      ComplexField complexField0 = complex11.getField();
      Complex complex12 = complex2.ZERO.atan();
      Complex complex13 = complex12.NaN.tanh();
      Complex complex14 = complex0.acos();
      Complex complex15 = complex11.INF.subtract(complex1);
      Complex complex16 = complex15.ZERO.negate();
      Complex complex17 = complex0.I.atan();
      Complex complex18 = complex2.cos();
      String string0 = complex18.toString();
      Complex complex19 = complex0.sin();
      Complex complex20 = complex19.I.sqrt();
      Complex complex21 = complex20.INF.acos();
      double double0 = complex10.getReal();
      List<Complex> list0 = complex7.nthRoot(156);
      boolean boolean0 = complex10.isInfinite();
      double double1 = complex18.getArgument();
      Complex complex22 = complex0.asin();
      Complex complex23 = complex14.exp();
      Complex complex24 = complex1.conjugate();
      Complex complex25 = complex22.negate();
      List<Complex> list1 = complex19.nthRoot(156);
      Complex complex26 = complex7.log();
      Complex complex27 = complex23.acos();
      Complex complex28 = complex23.divide(complex15);
      String string1 = complex15.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 57.2957763671875);
      Complex complex1 = complex0.I.sqrt1z();
      ComplexField complexField0 = complex0.ZERO.getField();
      String string0 = complex0.toString();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.ONE.multiply(complex2);
      ComplexField complexField1 = complex4.INF.getField();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex1.ONE.cos();
      Complex complex7 = complex4.INF.createComplex(0.0, 57.2957763671875);
      String string1 = complex2.toString();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex2.ZERO.atan();
      Complex complex11 = complex10.tanh();
      double double0 = complex8.getArgument();
      double double1 = complex2.abs();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex9.asin();
      boolean boolean0 = complex4.equals(complex1);
      List<Complex> list0 = complex1.nthRoot(37);
      Complex complex14 = complex3.sqrt();
      Complex complex15 = complex12.pow(complex14);
      Complex complex16 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex3.NaN.multiply(1.5707963267948966);
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex1.ZERO.sin();
      int int0 = complex6.I.hashCode();
      double double0 = complex2.NaN.getArgument();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.ZERO.pow(complex2);
      Complex complex11 = complex9.subtract(complex0);
      int int1 = complex9.I.hashCode();
      boolean boolean0 = complex1.equals("O");
      Complex complex12 = complex0.I.conjugate();
      Complex complex13 = complex2.cosh();
      double double1 = complex13.getArgument();
      int int2 = complex1.hashCode();
      Complex complex14 = complex13.tan();
      Object object0 = complex10.readResolve();
      Complex complex15 = complex10.acos();
      Complex complex16 = complex5.conjugate();
      Complex complex17 = complex10.negate();
      Complex complex18 = complex17.ONE.sin();
      Complex complex19 = complex5.tan();
      Complex complex20 = complex19.sin();
      Complex complex21 = Complex.I;
      boolean boolean1 = complex8.equals(complex21);
      Complex complex22 = complex17.ONE.multiply(complex10);
      Complex complex23 = complex2.negate();
      List<Complex> list0 = complex7.nthRoot(125);
      Complex complex24 = complex2.cosh();
      boolean boolean2 = complex18.isInfinite();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.ZERO.multiply(3.814697265625E-6);
      int int0 = complex1.ZERO.hashCode();
      double double0 = complex1.INF.getArgument();
      Complex complex6 = complex0.INF.negate();
      Complex complex7 = complex5.I.log();
      Complex complex8 = complex7.ONE.exp();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.ZERO.sqrt();
      double double1 = complex9.INF.abs();
      Complex complex11 = complex9.INF.exp();
      List<Complex> list0 = complex11.INF.nthRoot(1064);
      double double2 = complex9.ZERO.abs();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex1.NaN.sinh();
      Complex complex14 = complex9.tanh();
      Complex complex15 = complex14.ONE.createComplex(Double.POSITIVE_INFINITY, 1064);
      Complex complex16 = complex15.I.tan();
      Complex complex17 = complex12.tanh();
      Complex complex18 = complex5.add(complex1);
      Complex complex19 = complex9.exp();
      double double3 = complex19.ONE.abs();
      Object object0 = complex0.readResolve();
      int int1 = complex11.hashCode();
      Complex complex20 = complex6.sin();
      Complex complex21 = complex12.subtract(complex10);
      Object object1 = complex7.readResolve();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ZERO.cosh();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex3 = complex0.ZERO.log();
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.abs();
      Complex complex4 = complex0.add(complex3);
      Object object1 = complex4.INF.readResolve();
      Complex complex5 = complex0.NaN.tanh();
      Object object2 = complex0.readResolve();
      Object object3 = complex0.readResolve();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex6.I.multiply(complex0);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex0.add(complex9);
      Complex complex13 = complex12.ZERO.cos();
      Complex complex14 = complex9.createComplex(0.0, 3761.392552032);
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(16.0);
      Complex complex2 = complex0.I.negate();
      double double0 = complex2.NaN.abs();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex3 = new Complex(0.6931470632553101, 2.0);
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex3.log();
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex7.createComplex(0.6931470632553101, 0.6931470632553101);
      String string0 = complex10.I.toString();
      List<Complex> list0 = complex0.nthRoot(1397);
      double double1 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.multiply((-1453.3683650228786));
      Complex complex2 = complex0.ONE.multiply((-1453.3683650228786));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.createComplex(0.0, (-1453.3683650228786));
      Complex complex7 = complex0.cos();
      double double0 = complex6.I.abs();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.NaN.createComplex(0.0, 0.0);
      String string0 = complex6.ZERO.toString();
      Complex complex10 = complex8.divide(complex6);
      ComplexField complexField0 = complex6.INF.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      double double1 = complex6.getImaginary();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex10.ONE.cosh();
      String string1 = complex0.toString();
      Complex complex13 = complex2.divide(complex4);
      Complex complex14 = complex3.createComplex(0.0, (-1453.3683650228786));
      Complex complex15 = complex6.INF.sqrt();
      Complex complex16 = complex1.multiply(1.0);
      double double2 = complex13.getReal();
      Complex complex17 = complex10.exp();
      Complex complex18 = complex16.multiply((-1453.3683650228786));
      Complex complex19 = complex5.createComplex(1.0, (-1453.3683650228786));
      Complex complex20 = complex16.sqrt();
      Complex complex21 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = complex2.NaN.createComplex((-2365.64), (-2365.64));
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.NaN.divide(complex4);
      Complex complex9 = complex8.ZERO.exp();
      Complex complex10 = complex1.INF.sqrt1z();
      Complex complex11 = complex2.NaN.tanh();
      Complex complex12 = complex11.ONE.log();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex13.log();
      Complex complex15 = complex2.cosh();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex16 = complex9.sqrt1z();
      boolean boolean0 = complex3.isNaN();
      Complex complex17 = complex14.exp();
      double double0 = complex8.abs();
      Complex complex18 = complex14.tanh();
      String string0 = complex14.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      String string1 = complex0.toString();
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex5.divide(complex2);
      ComplexField complexField0 = complex7.I.getField();
      boolean boolean0 = complex6.equals(complex1);
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex2.multiply(Double.NaN);
      String string2 = complex8.toString();
      ComplexField complexField1 = complex9.getField();
      Complex complex12 = complex10.createComplex(1759.73858694926, 1759.73858694926);
      Complex complex13 = complex9.divide(complex5);
      Complex complex14 = complex6.add(complex5);
      Complex complex15 = complex14.add(complex3);
      Complex complex16 = complex11.tan();
      Complex complex17 = complex16.createComplex(Double.NaN, Double.NaN);
      double double1 = complex14.getImaginary();
      Complex complex18 = complex8.acos();
      int int0 = complex11.hashCode();
      ComplexField complexField2 = complex15.getField();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.multiply(Double.NEGATIVE_INFINITY);
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex1.log();
      Complex complex6 = complex3.INF.atan();
      Complex complex7 = complex6.INF.createComplex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.log();
      ComplexField complexField0 = complex10.ONE.getField();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.acos();
      Complex complex13 = complex8.NaN.divide(complex11);
      String string0 = complex9.toString();
      Complex complex14 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.I.acos();
      Object object1 = complex1.ONE.readResolve();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.INF.createComplex(1.0, 802.103207157636);
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex6.multiply(802.103207157636);
      Complex complex8 = complex3.multiply(802.103207157636);
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex4.tan();
      boolean boolean0 = complex3.equals("C^fpPlT\")LIY");
      Complex complex11 = complex8.cosh();
      String string0 = complex11.toString();
      String string1 = complex7.toString();
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex4.asin();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex11.multiply(complex14);
      ComplexField complexField0 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.asin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = complex2.ONE.atan();
      List<Complex> list0 = complex2.ONE.nthRoot(26);
      int int0 = complex2.NaN.hashCode();
      Complex complex6 = complex2.ONE.cosh();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex7.asin();
      int int1 = complex0.hashCode();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex1.ZERO.createComplex(0.0, 0.087);
      Complex complex11 = complex1.exp();
      Complex complex12 = complex11.log();
      String string0 = complex11.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.log();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex4.ZERO.multiply(complex7);
      // Undeclared exception!
      try { 
        complex7.ZERO.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.I.nthRoot(1472);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.NaN.divide(complex1);
      Complex complex7 = complex6.INF.divide(complex3);
      Complex complex8 = complex1.I.pow(complex5);
      Complex complex9 = complex2.I.pow(complex3);
      Complex complex10 = complex0.divide(complex1);
      double double0 = complex10.abs();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex2.createComplex(1472, 1088.1186);
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1216.2064, 1216.2064);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.ZERO.exp();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.INF.log();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.add(complex1);
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.NaN.sqrt1z();
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = complex0.I.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex4.log();
      boolean boolean1 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply((-642.7231009));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex1.ZERO.divide(complex5);
      Complex complex7 = complex3.ONE.tan();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex4.NaN.multiply(1089.36843894);
      Complex complex10 = complex0.cos();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.cos();
      double double0 = complex2.abs();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = new Complex((-1297.834058), (-1297.834058));
      Complex complex6 = complex0.I.multiply(complex5);
      Complex complex7 = complex5.INF.cosh();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex0.log();
      Complex complex11 = complex5.tan();
      Complex complex12 = complex0.pow(complex8);
      Complex complex13 = complex9.sinh();
      double double1 = complex2.I.getArgument();
      Complex complex14 = complex5.sinh();
      boolean boolean0 = complex13.isNaN();
      Complex complex15 = complex8.cos();
      Complex complex16 = complex3.divide(complex10);
      Complex complex17 = complex1.cos();
      String string0 = complex5.toString();
      Complex complex18 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.ONE.log();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex0.INF.createComplex(569.40178, 0.0);
      Complex complex7 = complex0.ONE.conjugate();
      List<Complex> list0 = complex2.I.nthRoot(1);
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex0.subtract(complex8);
      Complex complex10 = complex2.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sinh();
      int int1 = complex0.I.hashCode();
      Complex complex2 = complex0.ONE.atan();
      double double0 = complex0.abs();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.INF.pow(complex2);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex0.tan();
      ComplexField complexField0 = complex11.ONE.getField();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex12.multiply(2320.228893);
      Complex complex15 = complex9.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Object object0 = complex0.ZERO.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(533.572835533, 3630.942246817636);
      Complex complex1 = complex0.I.atan();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(2245.848, 1481.69);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-2568.762289706678));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.NaN.asin();
      double double0 = complex1.NaN.abs();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex4 = complex0.INF.tan();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex3.I.pow(complex2);
      Complex complex6 = complex3.createComplex((-2568.762289706678), 3121.0672534592973);
      double double1 = complex6.abs();
      Complex complex7 = complex6.sinh();
      String string0 = complex1.I.toString();
      Complex complex8 = complex7.NaN.conjugate();
      double double2 = complex5.ZERO.abs();
      boolean boolean1 = complex0.isNaN();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex1.log();
      Complex complex11 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1184.6452119), (-1184.6452119));
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex3.INF.divide(complex1);
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex0.ONE.multiply(complex1);
      Complex complex8 = complex7.INF.createComplex((-391.762), (-1184.6452119));
      Complex complex9 = complex7.ZERO.multiply(complex5);
      double double0 = complex0.getReal();
      List<Complex> list0 = complex1.nthRoot(1);
      int int0 = complex7.NaN.hashCode();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex6.pow(complex1);
      double double1 = complex9.getReal();
      Complex complex12 = complex8.multiply(1.2246467991473532E-16);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2047.3165366076), (-2047.3165366076));
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.divide(complex0);
      int int0 = complex1.ONE.hashCode();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ONE.pow(complex0);
      Complex complex8 = complex6.log();
      Complex complex9 = complex1.tan();
      double double0 = complex6.abs();
      Complex complex10 = complex8.pow(complex0);
      Complex complex11 = complex6.I.sqrt1z();
      List<Complex> list0 = complex10.nthRoot(107);
      double double1 = complex8.abs();
      double double2 = complex7.getImaginary();
      Complex complex12 = complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1246.0, 2.7553817452272217E-6);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.ZERO.conjugate();
      double double0 = complex1.I.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.INF.subtract(complex4);
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex4.negate();
      Complex complex9 = new Complex(2.7553817452272217E-6, 0.0);
      Complex complex10 = complex1.subtract(complex9);
      Complex complex11 = complex4.sin();
      Complex complex12 = complex4.multiply(complex0);
      Complex complex13 = complex4.sqrt1z();
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.log();
      double double1 = complex4.ONE.abs();
      Complex complex5 = complex3.I.asin();
      double double2 = complex0.NaN.abs();
      Complex complex6 = complex3.INF.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex0.sinh();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex7.atan();
      Complex complex11 = complex3.NaN.add(complex10);
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex12 = complex2.sin();
      double double3 = complex12.getArgument();
      String string0 = complex9.toString();
      double double4 = complex12.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.INF.sin();
      boolean boolean0 = complex0.equals(")");
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.add(complex0);
      Complex complex9 = complex0.tanh();
      Complex complex10 = Complex.ZERO;
      boolean boolean1 = complex0.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      Complex complex5 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex0.ZERO.nthRoot(137);
      Complex complex1 = complex0.I.multiply((-1864.8882366371079));
      Complex complex2 = complex0.ZERO.cos();
      int int0 = complex1.ONE.hashCode();
      ComplexField complexField0 = complex0.INF.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = complex1.sin();
      double double0 = complex1.abs();
      Complex complex4 = complex0.createComplex((-1864.8882366371079), 1.7976931348623157E308);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex5.ZERO.tanh();
      int int0 = complex1.hashCode();
      Complex complex7 = complex3.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.INF.createComplex(63.5666779425, 0.0);
      Complex complex9 = complex8.NaN.pow(complex4);
      String string0 = complex3.toString();
      Complex complex10 = complex0.sin();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex1.pow(complex11);
      Complex complex13 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex0.INF.cos();
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex1.INF.pow(complex0);
      double double0 = complex0.abs();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex1.log();
      ComplexField complexField0 = complex9.I.getField();
      Complex complex10 = complex2.acos();
      String string0 = complex8.toString();
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex11.ZERO.createComplex((-832.787402960616), Double.NaN);
      Complex complex13 = complex4.asin();
      Object object1 = complex13.readResolve();
      Complex complex14 = complex10.cos();
      double double1 = complex14.abs();
      Complex complex15 = complex4.atan();
      Complex complex16 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex((-2338.863951854443), (-2338.863951854443));
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1279.73339, 1279.73339);
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.log();
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.sinh();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.createComplex(1279.73339, 1279.73339);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1868.0, 1868.0);
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(76.496, 0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.tanh();
      List<Complex> list0 = complex2.ZERO.nthRoot(1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex4.ONE.multiply(0.0);
      String string0 = complex5.ZERO.toString();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex6.multiply(complex4);
      Complex complex10 = complex5.multiply(1725.50390404069);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.acos();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.atan();
      double double0 = complex4.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.I.cos();
      int int0 = complex6.ONE.hashCode();
      Complex complex7 = complex4.subtract(complex5);
      Complex complex8 = complex0.ZERO.multiply(complex4);
      Object object0 = complex7.I.readResolve();
      Complex complex9 = complex0.divide(complex5);
      ComplexField complexField1 = complex2.getField();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex0.I.log();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.ZERO.sinh();
      Complex complex7 = complex0.cos();
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      double double0 = complex0.abs();
      Complex complex2 = complex1.negate();
      double double1 = complex2.getArgument();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.INF.createComplex(451.459662282, (-3663.0));
      Complex complex6 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      try { 
        complex1.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.multiply((-2214.3197575989543));
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex0.pow(complex2);
      boolean boolean0 = complex0.equals(complex5);
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = complex0.NaN.asin();
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-3422.3915), 13.07);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply((-823.844333));
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.ONE.multiply((-823.844333));
      Complex complex5 = complex0.createComplex(4662.6, 4662.6);
      Complex complex6 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.createComplex(1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.ONE.tanh();
      double double0 = complex4.ZERO.getArgument();
      int int1 = complex1.I.hashCode();
      double double1 = complex0.getReal();
      int int2 = complex0.I.hashCode();
      Complex complex5 = complex4.sqrt1z();
      double double2 = complex1.abs();
      Complex complex6 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex0.INF.nthRoot(1471);
      Complex complex2 = complex1.createComplex(1.0, 1.0);
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex0.sin();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.ONE.tan();
      String string0 = complex0.toString();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ONE.createComplex(0.0, (-39.8));
      Complex complex3 = complex0.I.asin();
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.NaN.pow(complex0);
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex7.INF.multiply(0.0);
      String string0 = complex2.NaN.toString();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex9.INF.multiply(complex2);
      Complex complex12 = complex11.INF.tan();
      List<Complex> list0 = complex6.ONE.nthRoot(1);
      List<Complex> list1 = complex9.NaN.nthRoot(1);
      Complex complex13 = complex3.multiply(complex6);
      Complex complex14 = complex13.I.conjugate();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex6.ONE.multiply(Double.NaN);
      double double0 = complex3.getArgument();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.ONE.add(complex2);
      double double1 = complex0.I.abs();
      Complex complex11 = complex2.multiply(complex3);
      Object object0 = complex11.NaN.readResolve();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3251.4466389565, 3251.4466389565);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.negate();
      List<Complex> list0 = complex0.nthRoot(252);
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.ZERO.sin();
      List<Complex> list0 = complex0.nthRoot(36);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex((-510.3225806), (-510.3225806));
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.I.tan();
      ComplexField complexField0 = complex3.NaN.getField();
      double double0 = complex0.abs();
      Complex complex4 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-958.15), (-958.15));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.pow(complex3);
      ComplexField complexField0 = complex6.INF.getField();
      double double0 = complex4.getReal();
      Complex complex7 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-958.15), (-958.15));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.pow(complex3);
      ComplexField complexField0 = complex6.INF.getField();
      double double0 = complex4.getReal();
      Complex complex7 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.exp();
      Object object1 = complex1.ZERO.readResolve();
      Object object2 = complex0.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.multiply((-1453.3683650228786));
      Complex complex2 = complex0.ONE.multiply((-1453.3683650228786));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.createComplex(0.0, (-1453.3683650228786));
      Complex complex7 = complex0.cos();
      double double0 = complex6.I.abs();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.NaN.createComplex(0.0, 0.0);
      String string0 = complex6.ZERO.toString();
      Complex complex10 = complex8.divide(complex6);
      ComplexField complexField0 = complex6.INF.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      double double1 = complex6.getImaginary();
      Complex complex11 = complex4.tan();
      String string1 = complex0.toString();
      Complex complex12 = complex2.divide(complex4);
      Complex complex13 = complex3.createComplex(0.0, (-1453.3683650228786));
      Complex complex14 = complex6.INF.sqrt();
      Complex complex15 = complex1.multiply(1.0);
      double double2 = complex12.getReal();
      Complex complex16 = complex10.exp();
      Complex complex17 = complex15.multiply((-1453.3683650228786));
      Complex complex18 = complex5.createComplex(1.0, (-1453.3683650228786));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.log();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex4.ONE.sin();
      double double1 = complex5.NaN.abs();
      Complex complex7 = complex1.I.negate();
      Complex complex8 = complex1.multiply(complex0);
      Complex complex9 = complex8.ZERO.divide(complex5);
      Complex complex10 = complex0.I.add(complex2);
      Complex complex11 = complex1.NaN.negate();
      boolean boolean1 = complex1.isInfinite();
      String string0 = complex0.toString();
      String string1 = complex1.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex4.multiply(2.479773539153719E-5);
      Complex complex13 = complex0.multiply(1.997844754509471E-9);
      Complex complex14 = complex12.multiply(1.997844754509471E-9);
      Complex complex15 = complex5.multiply((-909.30949));
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 372.078;
      Complex complex1 = complex0.ZERO.createComplex(4007.66, 372.078);
      Complex complex2 = complex0.INF.multiply(2841.9309973555);
      try { 
        complex1.INF.nthRoot((-1185));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,185
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.NaN.toString();
      int int0 = (-1631);
      try { 
        complex0.ONE.nthRoot((-1631));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,631
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.I.multiply(complex0);
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.I.sin();
      Object object0 = complex0.I.readResolve();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.cosh();
      Object object1 = complex4.ONE.readResolve();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.NaN.sin();
      String string1 = complex5.ONE.toString();
      Complex complex7 = complex5.NaN.log();
      Complex complex8 = complex4.acos();
      Complex complex9 = Complex.I;
      Complex complex10 = complex4.multiply(complex0);
      Complex complex11 = complex10.INF.sqrt1z();
      Complex complex12 = complex4.subtract(complex3);
      Complex complex13 = complex12.divide(complex10);
      Object object2 = complex0.readResolve();
      Complex complex14 = ((Complex) object2).ONE.tan();
      Complex complex15 = complex12.createComplex(0.0, 0.0);
      Complex complex16 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      int int0 = (-1570);
      try { 
        complex1.NaN.nthRoot((-1570));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,570
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-548.0), (-548.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex4.NaN.pow(complex1);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex5.INF.add(complex7);
      Complex complex9 = complex4.ONE.sqrt1z();
      Complex complex10 = complex9.INF.sqrt();
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex10.NaN.sin();
      Complex complex13 = complex12.NaN.divide(complex0);
      Complex complex14 = complex13.add(complex10);
      Complex complex15 = complex0.acos();
      List<Complex> list0 = complex1.nthRoot(1);
      double double0 = complex0.getImaginary();
      Complex complex16 = complex2.asin();
      Complex complex17 = complex1.subtract(complex3);
      Complex complex18 = complex4.tanh();
      Complex complex19 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.INF.pow(complex5);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.I.tan();
      Object object0 = complex7.readResolve();
      Complex complex9 = complex1.NaN.multiply(0.6666666269302368);
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex10.conjugate();
      int int0 = complex11.hashCode();
      String string0 = complex3.toString();
      Complex complex12 = complex7.cosh();
      Complex complex13 = complex12.acos();
      Complex complex14 = complex13.multiply(0.6666666269302368);
      boolean boolean0 = complex8.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.I.multiply(7.877833600365);
      Complex complex5 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ZERO.conjugate();
      double double0 = complex5.ZERO.abs();
      Complex complex7 = complex2.I.sqrt();
      Complex complex8 = complex5.I.subtract(complex0);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex9.ONE.subtract(complex0);
      Complex complex12 = complex11.ZERO.sinh();
      Complex complex13 = complex0.log();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex14.I.atan();
      Complex complex16 = complex6.INF.add(complex15);
      boolean boolean0 = complex2.isInfinite();
      double double1 = complex7.abs();
      Complex complex17 = complex6.log();
      Complex complex18 = complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.NaN.tanh();
      double double0 = complex3.getArgument();
      Complex complex4 = complex3.ZERO.acos();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex5 = complex0.NaN.cosh();
      Complex complex6 = complex1.multiply(complex2);
      Complex complex7 = complex2.I.divide(complex0);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex8.I.multiply(complex0);
      Complex complex10 = complex1.ONE.asin();
      Complex complex11 = complex9.add(complex0);
      ComplexField complexField1 = complex11.INF.getField();
      Complex complex12 = complex11.INF.subtract(complex8);
      double double1 = complex0.abs();
      double double2 = complex7.ZERO.abs();
      Complex complex13 = complex0.ZERO.createComplex((-3338.270387567697), 0.19999954104423523);
      Complex complex14 = complex8.tanh();
      Complex complex15 = complex14.INF.sqrt1z();
      Complex complex16 = complex7.cosh();
      Complex complex17 = complex0.conjugate();
      double double3 = complex17.getArgument();
      Complex complex18 = complex16.ONE.pow(complex17);
      Complex complex19 = complex18.INF.sin();
      Complex complex20 = complex16.tanh();
      Complex complex21 = complex20.I.conjugate();
      boolean boolean0 = complex20.isNaN();
      boolean boolean1 = complex4.equals((Object) null);
      Object object0 = complex4.readResolve();
      boolean boolean2 = complex2.equals(object0);
      String string0 = complex8.ONE.toString();
      Complex complex22 = complex8.cos();
      double double4 = complex15.abs();
      double double5 = complex13.abs();
      Complex complex23 = complex12.createComplex(0.0, -0.0);
  }
}
