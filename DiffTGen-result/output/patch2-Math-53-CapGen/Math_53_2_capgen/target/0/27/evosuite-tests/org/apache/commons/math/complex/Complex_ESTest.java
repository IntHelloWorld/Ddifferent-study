/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:35:25 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-2127.825), (-3113.528));
      Complex complex1 = new Complex((-3113.528), (-3113.528));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.tan();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex0.NaN.add(complex2);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex7.log();
      List<Complex> list0 = complex7.ONE.nthRoot(167);
      Complex complex9 = complex0.INF.conjugate();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex2.getImaginary();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex11.sin();
      int int0 = complex12.hashCode();
      Complex complex13 = complex3.subtract(complex2);
      Complex complex14 = complex10.negate();
      Object object0 = complex14.readResolve();
      Complex complex15 = complex1.INF.subtract(complex13);
      int int1 = complex14.ZERO.hashCode();
      Complex complex16 = complex1.subtract(complex14);
      String string0 = complex3.toString();
      Complex complex17 = complex14.sinh();
      Complex complex18 = complex13.ZERO.pow(complex9);
      Object object1 = complex15.readResolve();
      Complex complex19 = Complex.ZERO;
      Complex complex20 = complex1.add(complex19);
      int int2 = complex9.hashCode();
      int int3 = complex0.hashCode();
      Complex complex21 = complex20.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.8414709848078964, 0.8414709848078964);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.tan();
      String string0 = complex0.toString();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex2.ONE.cosh();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.INF.multiply(0.8414709848078964);
      Complex complex11 = complex0.NaN.sin();
      boolean boolean0 = complex3.equals(complex2);
      ComplexField complexField0 = complex2.I.getField();
      List<Complex> list0 = complex1.nthRoot(175);
      Complex complex12 = complex6.ZERO.subtract(complex9);
      Complex complex13 = complex2.cos();
      Complex complex14 = complex3.sin();
      ComplexField complexField1 = complex14.getField();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = Complex.I;
      Complex complex17 = complex16.ZERO.conjugate();
      Complex complex18 = complex14.multiply(complex16);
      double double0 = complex2.abs();
      Complex complex19 = complex7.cos();
      Complex complex20 = complex8.subtract(complex5);
      Complex complex21 = complex0.add(complex19);
      Complex complex22 = complex6.divide(complex1);
      double double1 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tanh();
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.ZERO.asin();
      double double0 = complex2.ONE.abs();
      Complex complex4 = complex2.NaN.tanh();
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex3.INF.acos();
      Complex complex6 = complex5.I.atan();
      int int1 = complex1.hashCode();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex2.ZERO.negate();
      double double1 = complex7.getArgument();
      Complex complex9 = complex2.ONE.asin();
      Complex complex10 = complex6.I.acos();
      Complex complex11 = complex0.subtract(complex3);
      double double2 = complex4.getArgument();
      double double3 = complex9.abs();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex1.INF.tan();
      Complex complex14 = complex9.tan();
      Complex complex15 = complex3.ONE.add(complex6);
      Complex complex16 = complex14.NaN.conjugate();
      Complex complex17 = complex16.NaN.subtract(complex3);
      Complex complex18 = complex0.I.tan();
      double double4 = complex7.getArgument();
      Complex complex19 = complex2.add(complex0);
      boolean boolean1 = complex7.isNaN();
      Complex complex20 = complex3.createComplex(1.059471116458249, 0.0);
      Complex complex21 = complex4.log();
      double double5 = complex21.ONE.getArgument();
      boolean boolean2 = complex15.equals(complex19);
      double double6 = complex10.getImaginary();
      double double7 = complex21.abs();
      Complex complex22 = complex19.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.acos();
      String string0 = complex2.I.toString();
      Complex complex3 = complex2.I.acos();
      double double0 = complex3.getArgument();
      Complex complex4 = complex1.INF.multiply(6.283185307179586);
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.I.multiply(complex6);
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex7.INF.pow(complex1);
      Complex complex10 = complex5.I.sin();
      Complex complex11 = complex1.I.atan();
      Complex complex12 = complex0.INF.divide(complex1);
      String string1 = complex12.ONE.toString();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex0.createComplex(768.7185, 768.7185);
      double double1 = complex13.getArgument();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex14.divide(complex1);
      Complex complex16 = complex10.multiply(12.0);
      Complex complex17 = complex1.ONE.pow(complex0);
      Complex complex18 = complex5.conjugate();
      List<Complex> list0 = complex13.nthRoot(698);
      Complex complex19 = complex13.conjugate();
      String string2 = complex19.ZERO.toString();
      Complex complex20 = complex15.add(complex6);
      Complex complex21 = complex19.negate();
      Complex complex22 = complex13.sinh();
      Complex complex23 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tanh();
      List<Complex> list0 = complex0.nthRoot(158);
      Complex complex3 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.conjugate();
      int int0 = complex3.I.hashCode();
      int int1 = complex2.ONE.hashCode();
      Complex complex5 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex0.sqrt1z();
      double double0 = complex0.abs();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.NaN.subtract(complex4);
      Complex complex7 = complex6.INF.exp();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getReal();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex5.pow(complex1);
      Complex complex10 = complex9.NaN.tanh();
      ComplexField complexField1 = complex10.ONE.getField();
      Complex complex11 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.ONE.log();
      Complex complex13 = complex10.asin();
      Complex complex14 = complex13.I.asin();
      Complex complex15 = complex13.NaN.sqrt1z();
      Complex complex16 = complex15.ONE.conjugate();
      int int0 = (-1581);
      Complex complex17 = complex11.ZERO.exp();
      Complex complex18 = complex11.INF.conjugate();
      try { 
        complex11.nthRoot((-1581));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,581
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2127.825), (-3113.528));
      Complex complex1 = new Complex((-3113.528), (-3113.528));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.tan();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex0.NaN.add(complex2);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex7.log();
      List<Complex> list0 = complex7.ONE.nthRoot(167);
      Complex complex9 = complex0.INF.conjugate();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex2.getImaginary();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex11.sin();
      int int0 = complex12.hashCode();
      Complex complex13 = complex3.subtract(complex2);
      Complex complex14 = complex10.negate();
      Object object0 = complex14.readResolve();
      Complex complex15 = complex1.INF.subtract(complex13);
      int int1 = complex14.ZERO.hashCode();
      Complex complex16 = complex1.subtract(complex14);
      String string0 = complex3.toString();
      Complex complex17 = complex14.sinh();
      Complex complex18 = complex13.ZERO.pow(complex9);
      Object object1 = complex15.readResolve();
      Complex complex19 = complex15.multiply(complex4);
      Complex complex20 = complex1.add(complex19);
      int int2 = complex9.hashCode();
      int int3 = complex0.hashCode();
      Complex complex21 = complex20.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 378.8879059087);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = new Complex(0.0, (-3391.0171));
      Complex complex2 = complex0.pow(complex1);
      try { 
        complex1.NaN.nthRoot((-143));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -143
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(2644.84, (-0.5));
      Complex complex2 = complex0.ZERO.multiply(2644.84);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = complex2.ONE.conjugate();
      Complex complex9 = complex3.asin();
      double double0 = complex4.NaN.getArgument();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex4.acos();
      ComplexField complexField0 = complex11.ZERO.getField();
      Complex complex12 = complex11.NaN.sqrt1z();
      Complex complex13 = complex2.atan();
      Complex complex14 = complex7.negate();
      int int0 = complex10.hashCode();
      Complex complex15 = complex1.ZERO.cos();
      Object object1 = complex0.readResolve();
      double double1 = complex0.getReal();
      Complex complex16 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.divide(complex1);
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.INF.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex0.ZERO.atan();
      double double1 = complex1.abs();
      double double2 = complex0.ZERO.abs();
      Complex complex10 = complex0.ZERO.negate();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex0.toString();
      Complex complex11 = complex0.ONE.sqrt();
      Complex complex12 = complex0.subtract(complex1);
      Complex complex13 = complex12.NaN.cos();
      Complex complex14 = complex13.INF.acos();
      Complex complex15 = complex0.I.divide(complex4);
      Complex complex16 = complex0.sinh();
      Complex complex17 = complex4.INF.tan();
      Complex complex18 = complex12.multiply(complex1);
      Complex complex19 = complex3.tanh();
      boolean boolean1 = complex8.isInfinite();
      ComplexField complexField0 = complex18.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply((-4697.1));
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.INF.multiply((-1620.9693709162063));
      Object object0 = complex2.ZERO.readResolve();
      Complex complex5 = complex4.ZERO.tan();
      double double0 = complex2.ONE.abs();
      double double1 = complex0.abs();
      List<Complex> list0 = complex3.nthRoot(267);
      Complex complex6 = complex2.cosh();
      List<Complex> list1 = complex6.nthRoot(267);
      Complex complex7 = complex0.negate();
      double double2 = complex1.getReal();
      Complex complex8 = complex4.multiply(complex3);
      Complex complex9 = complex4.cosh();
      boolean boolean0 = complex1.equals(complex9);
      ComplexField complexField0 = complex3.getField();
      double double3 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ONE.multiply((-875.1973571601485));
      Complex complex4 = complex1.ZERO.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex3.INF.subtract(complex0);
      Complex complex6 = complex3.NaN.add(complex5);
      Complex complex7 = complex2.tanh();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex8 = complex5.multiply(complex3);
      ComplexField complexField0 = complex6.ZERO.getField();
      int int0 = complex8.hashCode();
      Complex complex9 = complex6.NaN.tan();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.INF.sqrt();
      double double1 = complex0.ONE.abs();
      Complex complex12 = complex10.INF.createComplex((-2135.157430299183), 0.0);
      Complex complex13 = complex0.negate();
      String string0 = complex13.NaN.toString();
      Complex complex14 = complex6.log();
      Complex complex15 = complex3.acos();
      Complex complex16 = complex15.INF.asin();
      int int1 = complex3.hashCode();
      double double2 = complex5.getArgument();
      Complex complex17 = complex13.negate();
      try { 
        complex13.nthRoot((-566));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -566
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      String string0 = complex1.INF.toString();
      Object object0 = complex1.NaN.readResolve();
      String string1 = complex0.ONE.toString();
      Complex complex2 = complex1.cosh();
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex1.createComplex((-1371.695), 263.36829674);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.I.pow(complex1);
      Complex complex7 = complex6.subtract(complex3);
      Complex complex8 = complex6.multiply(complex2);
      Complex complex9 = complex3.ZERO.log();
      String string2 = complex1.toString();
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex10.ONE.subtract(complex3);
      Complex complex12 = complex4.multiply(0.0);
      boolean boolean0 = complex12.isNaN();
      int int0 = complex4.hashCode();
      Complex complex13 = complex11.tan();
      Complex complex14 = complex8.sqrt1z();
      Complex complex15 = complex14.multiply((-1371.695));
      Complex complex16 = complex3.tan();
      Complex complex17 = complex9.add(complex0);
      double double1 = complex15.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ZERO.createComplex((-2433.3316), 627.3259);
      Complex complex5 = complex3.I.cosh();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.I.cos();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex5.cos();
      Complex complex11 = complex10.NaN.add(complex2);
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex3.NaN.log();
      Complex complex14 = complex3.conjugate();
      ComplexField complexField1 = complex3.getField();
      Complex complex15 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(7.0);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.ONE.acos();
      Complex complex6 = complex4.ONE.subtract(complex3);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.conjugate();
      List<Complex> list0 = complex4.ZERO.nthRoot(37);
      Complex complex9 = complex4.ONE.tanh();
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex3.ZERO.sqrt();
      Complex complex12 = complex3.divide(complex2);
      Complex complex13 = complex10.sinh();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex0.ONE.sin();
      int int0 = complex14.NaN.hashCode();
      Complex complex16 = complex12.NaN.add(complex14);
      Complex complex17 = complex16.I.acos();
      String string0 = complex12.toString();
      Object object0 = complex10.ONE.readResolve();
      Complex complex18 = complex2.sqrt();
      Complex complex19 = complex3.divide(complex12);
      Complex complex20 = complex19.NaN.pow(complex14);
      List<Complex> list1 = complex10.nthRoot(37);
      Complex complex21 = complex20.I.tanh();
      Complex complex22 = complex19.NaN.negate();
      int int1 = complex12.hashCode();
      Complex complex23 = complex11.add(complex0);
      Object object1 = complex9.readResolve();
      Complex complex24 = complex10.divide(complex11);
      List<Complex> list2 = complex24.NaN.nthRoot(37);
      Complex complex25 = complex14.sin();
      Complex complex26 = complex4.exp();
      boolean boolean0 = complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ONE.divide(complex1);
      List<Complex> list0 = complex1.I.nthRoot(1);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.ZERO.divide(complex0);
      String string0 = "";
      Complex complex6 = complex1.ONE.sinh();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      try { 
        complex6.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(3.814697265625E-6, 3.814697265625E-6);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.cos();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex2.createComplex(3264.9981677603, 0.0);
      int int1 = complex4.ONE.hashCode();
      Complex complex6 = complex0.INF.sinh();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.subtract(complex3);
      double double0 = complex2.getImaginary();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex0.ZERO.sin();
      int int2 = complex11.ZERO.hashCode();
      double double1 = complex6.getImaginary();
      Complex complex12 = complex3.multiply(complex6);
      Complex complex13 = complex12.pow(complex3);
      Complex complex14 = complex1.subtract(complex2);
      Complex complex15 = complex12.negate();
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex2.pow(complex16);
      Complex complex18 = complex17.ONE.multiply(complex5);
      Complex complex19 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.add(complex1);
      double double0 = complex1.getImaginary();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex2.divide(complex1);
      int int0 = complex5.hashCode();
      Complex complex6 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1652.4065444812982, 1652.4065444812982);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.INF.subtract(complex1);
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex0.I.add(complex3);
      double double0 = complex5.ONE.getArgument();
      Complex complex6 = complex3.I.acos();
      Object object0 = complex3.I.readResolve();
      Complex complex7 = complex4.INF.conjugate();
      Complex complex8 = complex1.INF.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex5.acos();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex10 = complex9.ZERO.createComplex(1652.4065444812982, 1652.4065444812982);
      int int1 = (-1585);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex10.I.pow(complex11);
      Complex complex13 = complex12.NaN.exp();
      try { 
        complex10.ONE.nthRoot((-1585));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,585
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.multiply(complex0);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.INF.tan();
      double double0 = complex0.I.abs();
      Complex complex3 = complex2.I.createComplex((-1.0), 1067.588848525326);
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.ZERO.sin();
      boolean boolean0 = complex0.equals((Object) null);
      String string0 = complex2.ZERO.toString();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex2.NaN.cos();
      boolean boolean1 = complex3.isInfinite();
      Complex complex8 = complex5.exp();
      boolean boolean2 = complex1.isInfinite();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex1.createComplex((-719.201621), Double.NEGATIVE_INFINITY);
      int int0 = complex11.hashCode();
      Complex complex12 = complex4.multiply(1048.5308);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1771.91321396241), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex1.INF.nthRoot(221);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.I.cos();
      double double0 = complex0.abs();
      Complex complex4 = complex2.asin();
      double double1 = complex3.NaN.getArgument();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex4.I.multiply((-1771.91321396241));
      Complex complex8 = complex6.asin();
      Complex complex9 = complex6.createComplex(176.5132929660339, Double.POSITIVE_INFINITY);
      double double2 = complex0.NaN.abs();
      Complex complex10 = complex5.ZERO.asin();
      List<Complex> list1 = complex3.nthRoot(221);
      double double3 = complex3.getReal();
      Complex complex11 = complex4.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex12 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.036);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex3.multiply(complex0);
      ComplexField complexField0 = complex4.NaN.getField();
      String string0 = complex4.I.toString();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.abs();
      try { 
        complex2.nthRoot((-1473));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,473
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.add(complex1);
      boolean boolean0 = complex4.isInfinite();
      boolean boolean1 = complex0.isInfinite();
      boolean boolean2 = complex0.isNaN();
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.conjugate();
      int int0 = (-1);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex3.ZERO.divide(complex2);
      Object object0 = complex3.readResolve();
      Complex complex5 = complex1.NaN.asin();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = complex5.ONE.divide(complex6);
      boolean boolean0 = complex2.isNaN();
      Complex complex8 = complex2.INF.cos();
      Complex complex9 = complex0.multiply(0.0);
      Complex complex10 = complex1.ONE.exp();
      Complex complex11 = complex10.ONE.pow(complex8);
      ComplexField complexField0 = complex11.ZERO.getField();
      Complex complex12 = complex1.acos();
      String string0 = complex12.toString();
      double double0 = complex1.getReal();
      Complex complex13 = complex2.tan();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex14.I.tanh();
      Object object1 = complex14.readResolve();
      Complex complex16 = complex9.subtract(complex14);
      Complex complex17 = complex0.log();
      Complex complex18 = complex6.sqrt1z();
      Complex complex19 = complex4.acos();
      ComplexField complexField1 = complex15.getField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(complex1);
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex4.sin();
      Complex complex8 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex5 = complex0.ZERO.add(complex4);
      int int0 = complex4.I.hashCode();
      Complex complex6 = complex0.add(complex4);
      boolean boolean0 = complex5.isNaN();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex0.INF.cosh();
      ComplexField complexField1 = complex9.ONE.getField();
      Complex complex10 = complex8.ZERO.sqrt1z();
      double double2 = complex3.getArgument();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex3.multiply(complex0);
      Complex complex13 = complex8.NaN.subtract(complex11);
      Complex complex14 = complex12.acos();
      Complex complex15 = complex14.INF.log();
      Complex complex16 = complex11.log();
      Complex complex17 = complex12.exp();
      Complex complex18 = complex10.sinh();
      Complex complex19 = complex6.sin();
      Complex complex20 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = new Complex((-1105.1140935271), 1815.881898162427);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.INF.multiply(complex0);
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex5.asin();
      Object object1 = new Object();
      boolean boolean0 = complex3.equals(object1);
      boolean boolean1 = complex4.isNaN();
      Complex complex10 = complex5.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.INF.conjugate();
      double double1 = complex0.abs();
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      String string0 = complex0.toString();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.I.tanh();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      List<Complex> list0 = complex1.INF.nthRoot(230);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ZERO.log();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex5 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex0.INF.log();
      boolean boolean0 = complex4.equals(complex7);
      double double0 = complex7.getArgument();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex2.pow(complex7);
      try { 
        complex8.nthRoot((-219));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -219
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.NaN.sqrt();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.tan();
      Complex complex7 = new Complex(1951.51069959657, 0.0);
      Complex complex8 = complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.add(complex0);
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.INF.multiply((-123.09003));
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex3.tan();
      double double0 = complex4.getReal();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(144.0, (-768.005439066358));
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ONE.pow(complex0);
      int int1 = complex4.ZERO.hashCode();
      Complex complex5 = complex3.NaN.log();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.I.negate();
      Complex complex7 = complex2.I.tan();
      Complex complex8 = complex2.asin();
      String string0 = complex0.toString();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.ZERO.createComplex(0.0, (-768.005439066358));
      Complex complex11 = complex9.NaN.subtract(complex5);
      Complex complex12 = complex11.ZERO.acos();
      double double1 = complex9.getArgument();
      Complex complex13 = complex8.atan();
      Complex complex14 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.INF.sin();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex6.cos();
      boolean boolean0 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.tanh();
      List<Complex> list0 = complex0.nthRoot(158);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.008333333333333333, 0.008333333333333333);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex5.INF.negate();
      Complex complex8 = complex7.NaN.subtract(complex2);
      Complex complex9 = complex7.ZERO.asin();
      double double0 = complex5.getImaginary();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex8.equals(complex9);
      Complex complex10 = complex7.add(complex3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(725.11586, (-927.0));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.log();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex2.createComplex((-1112.6638), 0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.ONE.acos();
      double double1 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex2.I.sin();
      double double2 = complex2.ONE.abs();
      ComplexField complexField0 = complex0.I.getField();
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(112);
      Complex complex1 = Complex.NaN;
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.add(complex1);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex0.conjugate();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex2.getReal();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.NaN.tan();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex0.multiply(complex2);
      Complex complex12 = complex4.createComplex(542.2, 542.2);
      Complex complex13 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.divide(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.exp();
      double double0 = complex4.getArgument();
      Complex complex5 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ONE.sin();
      int int0 = (-1352);
      ComplexField complexField0 = complex3.I.getField();
      try { 
        complex4.nthRoot((-1352));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,352
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.createComplex(0.0, 329.883);
      Complex complex2 = complex0.acos();
      String string0 = complex2.toString();
      Complex complex3 = complex1.exp();
      String string1 = complex3.I.toString();
      Complex complex4 = complex1.NaN.sqrt();
      Complex complex5 = complex3.NaN.subtract(complex1);
      Complex complex6 = complex1.ZERO.exp();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex3.ZERO.divide(complex7);
      Complex complex9 = complex8.INF.pow(complex5);
      Complex complex10 = complex4.NaN.sinh();
      double double1 = complex8.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex1.multiply(complex5);
      Object object0 = complex5.readResolve();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex3.I.negate();
      ComplexField complexField0 = complex2.getField();
      boolean boolean1 = complex4.isNaN();
      Complex complex14 = complex1.log();
      try { 
        complex9.nthRoot((-951));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -951
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex0.tanh();
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex3.add(complex0);
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(3596.8349631467213, 1927.1168495448264);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.INF.asin();
      Object object0 = complex2.ONE.readResolve();
      Object object1 = complex1.readResolve();
      double double0 = complex1.getArgument();
      Complex complex7 = complex2.INF.subtract(complex0);
      Complex complex8 = complex2.ZERO.tan();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex9.INF.atan();
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex2.divide(complex9);
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex14.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex16 = complex13.createComplex(1.5707963267948966, 1927.1168495448264);
      Complex complex17 = complex2.createComplex((-7260.989482317), Double.NaN);
      Complex complex18 = complex1.sqrt();
      int int0 = complex14.hashCode();
      double double1 = complex16.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ZERO.sqrt();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex5.I.cosh();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex0.log();
      Complex complex11 = complex5.NaN.cosh();
      Complex complex12 = complex3.pow(complex5);
      int int0 = complex12.INF.hashCode();
      List<Complex> list0 = complex7.ZERO.nthRoot(859);
      String string1 = complex1.toString();
      Complex complex13 = complex7.asin();
      Complex complex14 = complex0.atan();
      double double0 = complex14.abs();
      Complex complex15 = complex3.sqrt1z();
      Complex complex16 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.INF.multiply(2041.58661959916);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex0.I.negate();
      Complex complex8 = complex7.INF.pow(complex0);
      Complex complex9 = complex7.ONE.asin();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.INF.subtract(complex2);
      Complex complex12 = complex3.asin();
      Complex complex13 = complex12.NaN.cos();
      String string0 = complex1.toString();
      Complex complex14 = complex0.sinh();
      Complex complex15 = complex14.I.negate();
      double double0 = complex3.getArgument();
      Complex complex16 = complex3.cos();
      Complex complex17 = complex1.add((Complex) null);
      Complex complex18 = complex14.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.ONE.cosh();
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = complex4.ONE.cosh();
      Complex complex8 = complex4.multiply(complex1);
      List<Complex> list0 = complex6.INF.nthRoot(253);
      Complex complex9 = complex8.log();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.createComplex(0.0, Double.NaN);
      Complex complex12 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.multiply((-962.783));
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.multiply((-962.783));
      int int0 = complex1.ONE.hashCode();
      Complex complex6 = complex2.I.pow(complex4);
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex2.NaN.asin();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.add(complex3);
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex9.I.add(complex8);
      Complex complex13 = complex3.cos();
      boolean boolean0 = complex13.equals(complex0);
      Complex complex14 = complex13.add(complex0);
      Complex complex15 = complex4.tanh();
      Complex complex16 = complex9.acos();
      double double0 = complex1.abs();
      Complex complex17 = complex1.createComplex(1454.91799969174, 0.0);
  }
}
