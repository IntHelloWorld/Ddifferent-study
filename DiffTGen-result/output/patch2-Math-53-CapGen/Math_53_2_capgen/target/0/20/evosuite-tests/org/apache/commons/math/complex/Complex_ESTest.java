/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:32:00 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.NaN.createComplex((-2033.0), (-2465.364));
      Complex complex6 = complex5.INF.divide(complex3);
      double double0 = complex5.I.getArgument();
      Complex complex7 = complex0.NaN.multiply(complex1);
      List<Complex> list0 = complex7.ZERO.nthRoot(853);
      ComplexField complexField0 = complex7.I.getField();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.INF.pow(complex2);
      Complex complex10 = complex9.ONE.sinh();
      double double1 = complex0.getArgument();
      Complex complex11 = complex0.add(complex4);
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex2.ONE.sqrt1z();
      boolean boolean0 = complex8.equals("");
      Complex complex15 = complex5.subtract(complex11);
      Complex complex16 = complex6.cosh();
      Complex complex17 = complex16.asin();
      Complex complex18 = complex2.divide(complex4);
      try { 
        complex18.INF.nthRoot((-6461));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -6,461
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex((-2096.1766864011656), (-2096.1766864011656));
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex1.INF.hashCode();
      boolean boolean1 = complex0.isInfinite();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex4.ZERO.createComplex(2.0, (-964.17032759));
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex4.pow(complex1);
      Complex complex9 = complex4.ZERO.multiply(Double.NaN);
      Complex complex10 = complex8.INF.divide(complex2);
      boolean boolean2 = complex4.isNaN();
      double double0 = complex9.I.getArgument();
      Complex complex11 = complex2.asin();
      String string0 = complex11.I.toString();
      int int1 = complex11.hashCode();
      Complex complex12 = complex9.tan();
      Complex complex13 = complex12.INF.multiply(complex11);
      Complex complex14 = complex9.ZERO.createComplex(Double.NaN, 1.0);
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex15.INF.multiply(1.5707963267948966);
      double double1 = complex12.abs();
      double double2 = complex5.getImaginary();
      Complex complex17 = complex14.sqrt();
      Complex complex18 = complex2.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.ZERO.add(complex0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex0.INF.atan();
      Complex complex5 = complex0.ZERO.multiply(359.759049585);
      Complex complex6 = complex5.ONE.subtract(complex1);
      double double0 = 0.0;
      Complex complex7 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex8 = complex7.NaN.exp();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex0.ONE.cosh();
      Complex complex7 = complex0.INF.sin();
      Complex complex8 = complex6.ZERO.sinh();
      Complex complex9 = complex8.INF.add(complex0);
      Complex complex10 = complex9.INF.sinh();
      double double0 = complex0.getReal();
      Object object0 = complex7.NaN.readResolve();
      Object object1 = complex6.readResolve();
      Complex complex11 = complex6.multiply(complex0);
      Complex complex12 = complex11.I.tanh();
      int int0 = complex12.I.hashCode();
      int int1 = complex11.INF.hashCode();
      int int2 = complex4.ONE.hashCode();
      Complex complex13 = complex12.ONE.tanh();
      Complex complex14 = complex7.asin();
      double double1 = complex12.getReal();
      Complex complex15 = complex4.I.exp();
      Complex complex16 = complex7.sinh();
      double double2 = complex0.I.abs();
      Complex complex17 = complex7.exp();
      Complex complex18 = complex7.multiply(complex4);
      Complex complex19 = complex3.pow(complex7);
      Complex complex20 = complex11.divide(complex19);
      Complex complex21 = complex18.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-4.9E-324), (-4.9E-324));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.multiply(1197.86298303);
      double double0 = complex1.ZERO.abs();
      String string0 = complex1.toString();
      Complex complex3 = complex0.conjugate();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex1.sqrt1z();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.I.conjugate();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex3.createComplex(0.0, 2373.08485664);
      Complex complex9 = complex8.multiply(0.0);
      Complex complex10 = complex9.pow(complex4);
      Complex complex11 = complex10.exp();
      Complex complex12 = complex8.acos();
      boolean boolean1 = complex1.isInfinite();
      Complex complex13 = complex11.tanh();
      Object object1 = complex13.ZERO.readResolve();
      Complex complex14 = complex10.negate();
      Complex complex15 = complex14.sqrt();
      ComplexField complexField0 = complex7.getField();
      Complex complex16 = complex15.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex3.ONE.pow(complex2);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex3.ONE.multiply(0.0);
      boolean boolean0 = complex1.equals(complex2);
      double double0 = complex6.abs();
      boolean boolean1 = complex0.equals(complex7);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex1.INF.conjugate();
      int int0 = complex9.INF.hashCode();
      double double1 = complex3.getReal();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex0.acos();
      Complex complex13 = complex6.add(complex12);
      String string0 = complex4.toString();
      Complex complex14 = complex6.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.NaN.divide(complex0);
      int int0 = complex1.I.hashCode();
      Complex complex8 = complex6.ONE.createComplex(Double.POSITIVE_INFINITY, 0.99);
      String string0 = complex4.toString();
      Complex complex9 = complex5.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex0.sqrt();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex5.log();
      double double0 = complex4.abs();
      Complex complex14 = complex3.exp();
      Complex complex15 = complex9.sin();
      Complex complex16 = complex0.cos();
      Complex complex17 = complex7.asin();
      double double1 = complex4.abs();
      Complex complex18 = complex6.createComplex(1.5, 1.0);
      Complex complex19 = complex12.acos();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex((-1.0), (-1.0));
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex3.INF.sinh();
      double double0 = complex1.ZERO.abs();
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex0.createComplex((-442.137445), (-442.137445));
      double double1 = complex6.NaN.abs();
      Complex complex7 = complex0.NaN.negate();
      Complex complex8 = complex0.createComplex((-442.137445), (-619.18013316632));
      Complex complex9 = complex8.ZERO.subtract(complex5);
      Complex complex10 = complex6.multiply(1003.2665554944499);
      Complex complex11 = complex8.INF.acos();
      Object object0 = complex6.readResolve();
      Complex complex12 = complex2.acos();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex2.getReal();
      boolean boolean0 = complex3.isNaN();
      Complex complex13 = complex2.tan();
      Complex complex14 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      String string0 = complex0.toString();
      Complex complex3 = complex0.NaN.createComplex(67.1008844089572, (-1593.3));
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex0.INF.conjugate();
      Complex complex7 = complex4.divide(complex0);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex5.sqrt1z();
      List<Complex> list0 = complex9.nthRoot(4554);
      Complex complex11 = complex10.INF.tanh();
      int int0 = complex1.hashCode();
      int int1 = complex9.hashCode();
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex12.ONE.cos();
      Complex complex14 = complex12.INF.subtract(complex5);
      Complex complex15 = complex0.atan();
      Complex complex16 = complex8.log();
      Complex complex17 = complex16.conjugate();
      Complex complex18 = complex6.asin();
      double double0 = complex7.getReal();
      Complex complex19 = complex13.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.ONE.pow(complex1);
      double double0 = complex3.NaN.abs();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex1.ZERO.pow(complex3);
      Complex complex6 = complex4.ZERO.conjugate();
      Complex complex7 = complex0.exp();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.ZERO.add(complex4);
      boolean boolean0 = complex0.equals(complex8);
      Complex complex10 = complex4.subtract(complex2);
      Complex complex11 = complex10.ZERO.divide(complex6);
      Complex complex12 = complex0.log();
      Complex complex13 = complex2.add(complex4);
      Complex complex14 = complex13.I.tanh();
      Complex complex15 = complex0.log();
      Complex complex16 = complex7.subtract(complex6);
      boolean boolean1 = complex13.isNaN();
      int int1 = (-1);
      try { 
        complex6.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-2.356194490192345), (-2.356194490192345));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex1.ONE.tan();
      Complex complex7 = complex0.ONE.subtract(complex1);
      Object object0 = complex7.readResolve();
      Complex complex8 = complex4.divide(complex3);
      Complex complex9 = complex7.ONE.tan();
      Complex complex10 = complex7.ZERO.sinh();
      Object object1 = complex0.readResolve();
      double double0 = complex0.getArgument();
      String string0 = complex7.toString();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex5.tan();
      Complex complex12 = complex6.log();
      Complex complex13 = complex12.ONE.sqrt();
      Complex complex14 = complex5.tan();
      Complex complex15 = complex7.cos();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      String string1 = complex1.ZERO.toString();
      Complex complex2 = complex1.INF.tan();
      List<Complex> list0 = complex1.ZERO.nthRoot(1243);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.INF.conjugate();
      double double0 = complex1.getReal();
      Complex complex5 = complex1.I.acos();
      Complex complex6 = complex1.negate();
      double double1 = complex4.getImaginary();
      boolean boolean0 = complex4.isNaN();
      String string2 = complex6.NaN.toString();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex6.ZERO.tanh();
      Complex complex9 = complex7.ZERO.conjugate();
      Complex complex10 = complex9.subtract(complex7);
      Complex complex11 = complex6.multiply(complex7);
      Complex complex12 = complex8.ONE.sin();
      Complex complex13 = complex1.add(complex0);
      double double2 = complex6.abs();
      double double3 = complex4.getArgument();
      Complex complex14 = complex8.log();
      Complex complex15 = complex13.acos();
      boolean boolean1 = complex6.equals(complex12);
      Complex complex16 = complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.log();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex5.NaN.subtract(complex4);
      Complex complex7 = complex1.tanh();
      ComplexField complexField1 = complex7.NaN.getField();
      int int0 = complex0.hashCode();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.I.multiply((-1402.2396081209652));
      Complex complex10 = complex9.ONE.multiply(Double.NaN);
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex9.ONE.tanh();
      Complex complex13 = complex9.NaN.multiply(0.0);
      double double1 = complex11.getReal();
      Complex complex14 = complex9.sinh();
      Complex complex15 = complex14.ONE.sqrt();
      Complex complex16 = complex11.log();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-743.2415), (-743.2415));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex3.ONE.divide(complex0);
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex0.ONE.createComplex((-3488.407737884628), (-743.2415));
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex7.ONE.subtract(complex5);
      double double0 = complex0.getImaginary();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex4.sin();
      Complex complex11 = complex9.subtract(complex7);
      Complex complex12 = complex3.sqrt();
      Complex complex13 = complex10.tan();
      double double1 = complex13.ZERO.abs();
      Complex complex14 = complex13.NaN.conjugate();
      double double2 = complex0.getArgument();
      boolean boolean1 = complex0.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      double double0 = complex1.abs();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.cosh();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.I.cosh();
      Complex complex6 = complex5.ONE.sqrt1z();
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex1.I.tanh();
      String string0 = complex5.ZERO.toString();
      boolean boolean1 = complex2.isNaN();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex0.sin();
      String string1 = complex3.ONE.toString();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex3.atan();
      Complex complex12 = complex11.INF.sqrt1z();
      Complex complex13 = complex11.atan();
      Complex complex14 = complex13.INF.atan();
      Complex complex15 = complex0.exp();
      Complex complex16 = complex5.sin();
      Complex complex17 = complex5.pow(complex7);
      Object object1 = new Object();
      boolean boolean2 = complex6.equals(object1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.NaN.multiply(complex2);
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex2.add(complex5);
      Complex complex9 = Complex.I;
      Complex complex10 = complex2.INF.subtract(complex9);
      Complex complex11 = complex10.sqrt1z();
      int int0 = complex2.hashCode();
      String string0 = complex1.toString();
      Complex complex12 = complex0.exp();
      try { 
        complex12.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex2.pow(complex5);
      Complex complex7 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex7);
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1363.3, (-3041.143309573647));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.add(complex0);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.INF.sqrt();
      String string0 = complex3.toString();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex3.sin();
      double double0 = complex3.getArgument();
      Complex complex9 = complex5.INF.tan();
      boolean boolean0 = complex5.isInfinite();
      double double1 = complex6.getArgument();
      Complex complex10 = complex8.log();
      double double2 = complex10.ZERO.getArgument();
      Complex complex11 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.ONE.asin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex0.createComplex(1, 1);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.ONE.conjugate();
      Complex complex9 = complex8.NaN.pow(complex4);
      Complex complex10 = complex0.createComplex(1, (-4.503599627370496E15));
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.divide(complex0);
      Complex complex13 = complex10.add(complex0);
      String string0 = complex13.NaN.toString();
      Complex complex14 = complex12.negate();
      double double0 = complex4.abs();
      String string1 = complex0.toString();
      Complex complex15 = complex10.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.asin();
      Object object1 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.ONE.createComplex(Double.NaN, 1.1921056801463227E-8);
      double double0 = complex2.I.getArgument();
      Complex complex4 = complex3.INF.asin();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.divide(complex2);
      double double1 = complex1.getReal();
      Complex complex8 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1137.392132842945, Double.NaN);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.INF.cosh();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.tan();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex2.multiply(Double.NaN);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.0, 2132.2451752822276);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex3.ONE.divide(complex2);
      ComplexField complexField0 = complex3.I.getField();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.ONE.pow(complex2);
      Complex complex7 = complex6.subtract(complex2);
      Complex complex8 = complex5.sqrt();
      double double0 = complex1.abs();
      Complex complex9 = complex2.asin();
      int int0 = complex5.hashCode();
      boolean boolean1 = complex2.isNaN();
      Complex complex10 = complex4.sinh();
      boolean boolean2 = complex2.isInfinite();
      boolean boolean3 = complex1.isNaN();
      Complex complex11 = complex8.subtract(complex0);
      Complex complex12 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.I.readResolve();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1212.1662), 271.54469163);
      double double0 = complex0.abs();
      double double1 = complex0.NaN.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.INF.subtract(complex0);
      int int0 = complex1.ONE.hashCode();
      ComplexField complexField0 = complex3.getField();
      double double2 = complex2.getArgument();
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex4.INF.negate();
      double double3 = complex5.getArgument();
      Complex complex6 = complex3.INF.sqrt();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex6.ONE.sinh();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex10.I.subtract(complex8);
      Complex complex12 = complex10.I.pow(complex8);
      ComplexField complexField1 = complex6.ZERO.getField();
      boolean boolean0 = complex2.isNaN();
      Complex complex13 = complex1.negate();
      Complex complex14 = complex13.I.log();
      double double4 = complex6.getArgument();
      double double5 = complex3.getReal();
      int int1 = complex6.hashCode();
      Complex complex15 = complex8.sinh();
      Complex complex16 = complex7.multiply(Double.NaN);
      Complex complex17 = complex16.multiply((-0.7853981633974483));
      ComplexField complexField2 = complex12.getField();
      Complex complex18 = complex16.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1256.659999));
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.ONE.log();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      List<Complex> list0 = complex0.INF.nthRoot(3498);
      Complex complex2 = complex0.INF.sin();
      List<Complex> list1 = complex1.INF.nthRoot(4289);
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.I.divide(complex3);
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex6.multiply((-1.0));
      Complex complex8 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply((-1246.653886));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.subtract(complex3);
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex1.pow(complex4);
      List<Complex> list0 = complex3.nthRoot(3019);
      int int0 = complex6.hashCode();
      Complex complex7 = complex5.log();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-615.0), (-615.0));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.ZERO.cos();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.cos();
      String string0 = complex1.toString();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.cosh();
      String string1 = complex8.NaN.toString();
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-843.765415114943));
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.NaN.getField();
      ComplexField complexField1 = complex0.ONE.getField();
      Complex complex1 = complex0.INF.atan();
      ComplexField complexField2 = complex0.getField();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = complex2.INF.divide(complex3);
      Complex complex6 = complex4.ZERO.tanh();
      ComplexField complexField3 = complex6.I.getField();
      double double0 = complex2.getImaginary();
      Complex complex7 = complex2.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex6.negate();
      boolean boolean1 = complex8.isNaN();
      Complex complex10 = complex1.multiply(0.0);
      double double1 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex1.ONE.multiply((-1765.3));
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex1.divide(complex8);
      Complex complex10 = complex9.createComplex((-1765.3), (-1765.3));
      Complex complex11 = complex7.exp();
      Complex complex12 = complex8.atan();
      Complex complex13 = complex12.multiply(complex7);
      Complex complex14 = complex1.multiply((-1765.3));
      Complex complex15 = complex13.subtract(complex1);
      Complex complex16 = complex15.negate();
      Complex complex17 = complex7.atan();
      Complex complex18 = complex16.tan();
      double double0 = complex0.getImaginary();
      Complex complex19 = complex16.conjugate();
      Complex complex20 = complex19.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-4725.0), (-972.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.NaN.createComplex((-972.0), 0.0);
      String string0 = complex4.toString();
      double double0 = complex3.NaN.getArgument();
      Complex complex6 = complex2.ZERO.cosh();
      Complex complex7 = complex4.INF.sqrt1z();
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex7.ZERO.sin();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex1.INF.sqrt1z();
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex11.INF.sqrt();
      double double1 = complex11.NaN.abs();
      Complex complex15 = complex1.INF.negate();
      Complex complex16 = complex15.exp();
      int int0 = complex10.INF.hashCode();
      Complex complex17 = complex3.sqrt();
      Complex complex18 = Complex.NaN;
      Complex complex19 = complex18.NaN.pow(complex10);
      Complex complex20 = complex4.add(complex18);
      Complex complex21 = complex2.divide(complex12);
      Complex complex22 = complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.NaN.tanh();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex6.ZERO.subtract(complex1);
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex5.ZERO.sinh();
      Complex complex10 = complex5.divide(complex3);
      double double0 = complex3.getArgument();
      Complex complex11 = complex3.INF.sin();
      Complex complex12 = complex6.pow(complex10);
      Complex complex13 = complex7.sin();
      double double1 = complex13.getImaginary();
      Complex complex14 = complex13.sinh();
      int int0 = complex10.hashCode();
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.INF;
      String string0 = complex2.toString();
      List<Complex> list0 = complex2.I.nthRoot(781);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ZERO.cosh();
      ComplexField complexField0 = complex1.getField();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex3.INF.add(complex1);
      Complex complex6 = complex3.divide(complex2);
      int int0 = complex3.hashCode();
      Complex complex7 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.createComplex(602.990407, 602.990407);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = new Complex((-1.0), (-1.0));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex2.ZERO.add(complex3);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.exp();
      double double0 = complex7.getArgument();
      Complex complex8 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1077.147321), (-1077.147321));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.negate();
      double double0 = complex3.I.abs();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.INF.atan();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex1.INF.acos();
      String string0 = complex2.toString();
      double double1 = complex2.getArgument();
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.INF.conjugate();
      Object object0 = complex2.NaN.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex1.acos();
      String string0 = complex8.INF.toString();
      Object object1 = complex1.readResolve();
      Complex complex9 = complex1.tanh();
      try { 
        complex5.nthRoot((-2962));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,962
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1.9868161777724352E-8, (-665.04571685));
      int int0 = complex0.hashCode();
      Complex complex1 = new Complex(1.9868161777724352E-8, 1.9868161777724352E-8);
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex5.sin();
      boolean boolean0 = complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.I.cos();
      Object object0 = complex2.INF.readResolve();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex1.tanh();
      Object object1 = complex1.NaN.readResolve();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex0.I.cos();
      Complex complex7 = complex5.NaN.log();
      Complex complex8 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.ZERO.subtract(complex3);
      double double0 = complex1.ONE.getArgument();
      Complex complex5 = complex4.ONE.tanh();
      Object object0 = complex1.ONE.readResolve();
      Complex complex6 = complex0.sqrt();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex0.cos();
      double double1 = complex8.getImaginary();
      Complex complex10 = complex8.INF.conjugate();
      boolean boolean0 = complex8.isInfinite();
      Complex complex11 = complex0.multiply(Double.NaN);
      Complex complex12 = complex9.log();
      Complex complex13 = complex12.NaN.multiply(complex1);
      Complex complex14 = complex8.tanh();
      Complex complex15 = complex14.sqrt1z();
      Complex complex16 = complex7.cosh();
      Complex complex17 = complex14.multiply((-2209.5));
      double double2 = complex0.getArgument();
      boolean boolean1 = complex7.isNaN();
      Object object1 = complex16.ONE.readResolve();
      Complex complex18 = complex6.cosh();
      double double3 = complex5.getReal();
      Complex complex19 = complex5.subtract(complex16);
      try { 
        complex19.nthRoot((-5003));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,003
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(427.0589806385428, 10.0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-104.321495), 1038.96678738312);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.I.sqrt1z();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.INF.sinh();
      ComplexField complexField1 = complex2.ONE.getField();
      ComplexField complexField2 = complex2.INF.getField();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.I.multiply(0.0);
      boolean boolean0 = complex0.equals(object0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex6.asin();
      ComplexField complexField3 = complex7.getField();
      double double0 = complex6.abs();
      Complex complex9 = complex4.tanh();
      int int0 = complex0.hashCode();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex7.conjugate();
      try { 
        complex5.nthRoot((-1110));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,110
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(2.7553817452272217E-6, 0.14982303977012634);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      List<Complex> list0 = complex0.nthRoot(1290);
      Complex complex3 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex2.ONE.createComplex(0.0, 0.875);
      Complex complex5 = complex4.ONE.tanh();
      double double0 = complex4.ZERO.abs();
      Complex complex6 = complex4.INF.acos();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.tan();
      Object object1 = new Object();
      Complex complex9 = complex7.ZERO.atan();
      Complex complex10 = complex9.ZERO.log();
      Complex complex11 = complex9.ZERO.acos();
      boolean boolean1 = complex7.equals(object1);
      Complex complex12 = complex0.asin();
      Complex complex13 = complex7.conjugate();
      Complex complex14 = complex4.asin();
      Object object2 = complex12.readResolve();
      boolean boolean2 = complex3.isInfinite();
      double double1 = complex3.getReal();
      Complex complex15 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = new Complex(477.39425787816, 477.39425787816);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex1.ONE.subtract(complex2);
      Complex complex6 = complex5.INF.add(complex2);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.createComplex(0.0, 0.0);
      Complex complex9 = complex3.multiply(complex1);
      Complex complex10 = complex2.ZERO.exp();
      Complex complex11 = complex8.ZERO.divide(complex2);
      Complex complex12 = complex8.log();
      double double0 = complex12.INF.abs();
      Complex complex13 = complex12.acos();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex2.cos();
      Complex complex16 = complex5.pow(complex3);
      Complex complex17 = complex4.exp();
      Complex complex18 = complex17.NaN.createComplex(0.0, 0.0);
      try { 
        complex15.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.NaN.createComplex((-1244.1406063062743), (-1244.1406063062743));
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex1.ZERO.add(complex0);
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex0.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex5.I.negate();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex3.exp();
      double double0 = complex11.ONE.abs();
      int int0 = complex8.hashCode();
      Object object0 = complex11.readResolve();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex12.I.subtract(complex13);
      double double1 = complex6.getArgument();
      double double2 = complex4.INF.getArgument();
      double double3 = complex8.getImaginary();
      ComplexField complexField0 = complex10.getField();
      List<Complex> list0 = complex4.nthRoot(1);
      String string0 = complex8.toString();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex15.INF.pow(complex6);
      boolean boolean1 = complex4.isInfinite();
      Complex complex17 = complex7.pow(complex15);
      List<Complex> list1 = complex17.ONE.nthRoot(1);
      Complex complex18 = complex16.createComplex((-2968.19025798046), (-2968.19025798046));
      Complex complex19 = complex0.pow(complex15);
      boolean boolean2 = complex1.isInfinite();
      Complex complex20 = complex10.tanh();
      boolean boolean3 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(1117.28953040681);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.NaN.subtract(complex3);
      Complex complex6 = complex0.multiply((-979.760568713));
      Complex complex7 = complex1.sqrt1z();
      double double0 = complex6.getImaginary();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex7.I.negate();
      Complex complex10 = complex1.asin();
      Object object0 = complex2.readResolve();
      Complex complex11 = Complex.ONE;
      boolean boolean0 = complex7.equals(complex11);
      Complex complex12 = complex9.multiply(1117.28953040681);
      Complex complex13 = complex10.cos();
      int int0 = complex4.hashCode();
      Object object1 = complex4.readResolve();
      Complex complex14 = complex11.add(complex7);
      ComplexField complexField0 = complex13.getField();
      String string0 = complex11.toString();
  }
}
