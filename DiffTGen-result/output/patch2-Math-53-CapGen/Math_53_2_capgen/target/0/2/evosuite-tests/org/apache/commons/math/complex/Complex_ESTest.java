/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:24:47 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(4.455505956692757, 4.455505956692757);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex5.I.tanh();
      Complex complex8 = complex7.multiply(complex0);
      Complex complex9 = complex7.ZERO.sinh();
      Complex complex10 = complex7.INF.log();
      List<Complex> list0 = complex7.ONE.nthRoot(4836);
      int int0 = complex0.I.hashCode();
      Complex complex11 = complex1.multiply(complex5);
      Complex complex12 = complex1.ONE.sqrt1z();
      int int1 = complex11.NaN.hashCode();
      Complex complex13 = complex1.createComplex(0.0, 3778.64930697);
      String string0 = complex0.toString();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex1.isNaN();
      Complex complex14 = complex0.multiply(4.455505956692757);
      Complex complex15 = complex1.negate();
      Complex complex16 = complex1.I.multiply(0.0);
      String string1 = complex0.INF.toString();
      boolean boolean1 = complex13.equals(complex12);
      Complex complex17 = complex12.acos();
      Object object0 = complex14.readResolve();
      int int2 = complex11.hashCode();
      Complex complex18 = complex13.cos();
      Complex complex19 = complex1.conjugate();
      double double1 = complex19.getImaginary();
      Complex complex20 = complex5.sin();
      boolean boolean2 = complex16.isInfinite();
      Complex complex21 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.19999954120254515);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex2.ZERO.add(complex0);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex5.NaN.acos();
      Complex complex8 = complex2.ONE.createComplex((-253.7919), 0.0);
      int int0 = complex0.hashCode();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex10.cosh();
      double double0 = complex2.getImaginary();
      Complex complex12 = complex8.ONE.asin();
      String string0 = complex1.INF.toString();
      Complex complex13 = complex8.negate();
      double double1 = complex8.abs();
      Complex complex14 = complex3.cosh();
      double double2 = complex8.getReal();
      Complex complex15 = complex8.multiply((-1819.734));
      try { 
        complex8.nthRoot((-2584));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,584
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.atan();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex3.divide(complex0);
      int int1 = complex2.NaN.hashCode();
      Complex complex5 = complex3.ZERO.asin();
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex2.log();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.ZERO.subtract(complex0);
      Complex complex11 = complex9.conjugate();
      double double1 = complex0.getArgument();
      boolean boolean0 = complex3.equals(complex7);
      Complex complex12 = complex1.log();
      boolean boolean1 = complex2.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2821.0987990817057), (-1229.28077095));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.INF.multiply((-2821.0987990817057));
      Complex complex4 = complex3.tanh();
      double double0 = complex4.abs();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.sqrt1z();
      int int0 = (-625);
      try { 
        complex5.I.nthRoot((-625));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -625
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.createComplex(0.0, 0.0);
      Complex complex6 = complex0.multiply(1593.41372835023);
      Complex complex7 = complex6.NaN.multiply(complex1);
      Complex complex8 = complex0.multiply(1092.415544);
      boolean boolean0 = complex2.isInfinite();
      Complex complex9 = complex1.ZERO.createComplex(1092.415544, 3843.1055588617);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex1.sqrt();
      boolean boolean1 = complex8.equals(complex13);
      Complex complex14 = complex11.sinh();
      Complex complex15 = complex6.tanh();
      Complex complex16 = complex8.negate();
      Complex complex17 = complex16.I.tanh();
      Complex complex18 = complex16.INF.sinh();
      Complex complex19 = complex5.sinh();
      Complex complex20 = complex19.tanh();
      int int0 = complex4.hashCode();
      Complex complex21 = complex6.asin();
      ComplexField complexField0 = complex19.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2474.4760437226), (-182.6));
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.INF.pow(complex5);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.ZERO.pow(complex0);
      Object object0 = complex0.readResolve();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex4.exp();
      ComplexField complexField0 = complex7.getField();
      Complex complex12 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex2.createComplex(1146.905934851, (-1060.52667));
      Complex complex5 = complex1.NaN.tan();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex6.INF.add(complex7);
      Complex complex10 = complex0.ONE.negate();
      Complex complex11 = complex9.I.add(complex6);
      Complex complex12 = complex5.NaN.acos();
      double double0 = complex2.getArgument();
      Complex complex13 = complex1.createComplex(6.283185307179586, 3.141592653589793);
      Complex complex14 = complex2.tan();
      Complex complex15 = complex1.conjugate();
      Object object0 = complex5.readResolve();
      Complex complex16 = complex5.tanh();
      Complex complex17 = complex9.tanh();
      Complex complex18 = complex16.atan();
      Complex complex19 = complex17.pow(complex9);
      Complex complex20 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.atan();
      double double0 = complex0.abs();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex4.createComplex(Double.NaN, Double.NaN);
      Complex complex8 = complex5.sqrt1z();
      String string0 = complex8.ONE.toString();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex0.getArgument();
      Complex complex9 = complex7.ONE.conjugate();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex7.ZERO.exp();
      Complex complex12 = complex0.multiply(Double.NaN);
      Complex complex13 = complex7.multiply(complex3);
      Complex complex14 = complex0.NaN.sinh();
      Complex complex15 = complex7.cosh();
      int int0 = complex15.hashCode();
      List<Complex> list0 = complex3.nthRoot(406);
      double double2 = complex1.getReal();
      Complex complex16 = complex4.exp();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.ZERO.subtract(complex4);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.ONE.multiply(complex2);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.sqrt1z();
      double double0 = complex9.I.getArgument();
      Complex complex10 = complex0.log();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.ONE.sqrt1z();
      Complex complex13 = complex11.ZERO.sin();
      Complex complex14 = complex11.atan();
      double double1 = complex14.NaN.getArgument();
      Complex complex15 = complex14.ONE.divide(complex11);
      Complex complex16 = complex12.acos();
      Complex complex17 = complex0.sqrt();
      Complex complex18 = complex2.sqrt();
      Complex complex19 = complex17.exp();
      Complex complex20 = new Complex((-1.0), 366.0478870136);
      boolean boolean0 = complex8.equals(complex20);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add((Complex) null);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.add(complex2);
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1614.012, 1614.012);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      String string0 = complex2.INF.toString();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.divide(complex0);
      Object object0 = complex2.I.readResolve();
      try { 
        complex3.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(complex0);
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex3.I.add(complex1);
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex0.createComplex(1813.45, 1813.45);
      Complex complex6 = complex5.ONE.multiply(0.0);
      Complex complex7 = complex5.pow(complex3);
      Object object0 = complex6.NaN.readResolve();
      Complex complex8 = complex3.acos();
      double double1 = complex6.getImaginary();
      double double2 = complex5.getImaginary();
      Complex complex9 = complex1.subtract(complex7);
      Complex complex10 = complex3.exp();
      double double3 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.ZERO.sin();
      double double1 = complex0.getReal();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = new Complex(698.4453943522, Double.NaN);
      Complex complex7 = complex4.ONE.add(complex6);
      Complex complex8 = complex7.I.sinh();
      double double2 = complex0.getArgument();
      boolean boolean0 = complex2.equals("I2MVM=AB<0Cv1 J(");
      Complex complex9 = complex0.cos();
      String string0 = complex2.toString();
      Complex complex10 = complex9.add(complex0);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex3.multiply(complex11);
      Complex complex13 = complex2.tan();
      double double3 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.INF.divide(complex2);
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex4 = new Complex(0.7853981633974483, 0.7853981633974483);
      String string0 = complex4.toString();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.INF.sqrt1z();
      Complex complex8 = complex5.add(complex0);
      Object object0 = complex4.I.readResolve();
      List<Complex> list0 = complex0.nthRoot(2678);
      Complex complex9 = complex6.subtract(complex5);
      double double2 = complex3.getArgument();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(576.993850711, 576.993850711);
      Complex complex1 = complex0.NaN.createComplex(576.993850711, 576.993850711);
      Complex complex2 = complex1.acos();
      double double0 = complex1.I.abs();
      double double1 = complex1.NaN.getArgument();
      Complex complex3 = complex0.createComplex(576.993850711, 1658.7340626912587);
      double double2 = complex0.getReal();
      Complex complex4 = complex0.divide(complex3);
      double double3 = complex3.NaN.abs();
      double double4 = complex2.getArgument();
      Complex complex5 = complex3.ONE.asin();
      ComplexField complexField0 = complex5.getField();
      double double5 = complex2.abs();
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.NaN.exp();
      boolean boolean0 = complex3.equals(complex7);
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = complex3.INF.sinh();
      Complex complex11 = complex9.multiply(complex0);
      Complex complex12 = complex11.ZERO.subtract(complex9);
      Complex complex13 = complex6.atan();
      Complex complex14 = complex13.INF.atan();
      double double6 = complex5.abs();
      Complex complex15 = complex14.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = new Complex(6.283185307179586, (-2741.878495205001));
      Complex complex2 = complex0.I.divide(complex1);
      double double0 = complex2.INF.abs();
      double double1 = complex0.I.getArgument();
      Complex complex3 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex1.ZERO.add(complex0);
      double double0 = complex1.abs();
      int int0 = complex1.hashCode();
      double double1 = complex3.getReal();
      Complex complex5 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex5);
      Object object0 = complex4.ONE.readResolve();
      Complex complex6 = complex4.divide(complex1);
      Object object1 = complex4.readResolve();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1295.69600195352), (-1295.69600195352));
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.cosh();
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = complex2.INF.negate();
      Complex complex7 = complex3.tan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex3.cos();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.subtract(complex3);
      int int1 = complex5.hashCode();
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.ONE.subtract(complex0);
      Complex complex9 = complex3.NaN.tan();
      Complex complex10 = complex7.ZERO.tanh();
      Complex complex11 = complex6.exp();
      Complex complex12 = complex1.acos();
      double double0 = complex0.getArgument();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ONE.cos();
      int int0 = complex1.ZERO.hashCode();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex8.INF.tan();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex9.divide(complex1);
      Complex complex13 = complex8.negate();
      Complex complex14 = complex10.sinh();
      boolean boolean0 = complex12.isInfinite();
      Complex complex15 = complex8.acos();
      Complex complex16 = complex14.multiply(2765.2492785);
      try { 
        complex3.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1.9699272335463627E-8, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.createComplex(1049.63, (-271.0));
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.atan();
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = complex5.createComplex(0.0, 0.3333333134651184);
      Complex complex7 = complex6.multiply(complex0);
      int int0 = complex1.hashCode();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex8.I.log();
      Object object0 = complex9.INF.readResolve();
      Object object1 = complex2.readResolve();
      int int1 = complex2.hashCode();
      Complex complex10 = complex1.pow(complex5);
      Complex complex11 = complex0.createComplex(0.0, (-2430.984223302));
      Complex complex12 = complex1.add(complex3);
      Complex complex13 = complex12.I.atan();
      Complex complex14 = complex3.sin();
      Complex complex15 = complex2.log();
      int int2 = complex15.I.hashCode();
      double double1 = complex14.getReal();
      double double2 = complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.sin();
      String string0 = complex0.ZERO.toString();
      Complex complex3 = complex2.ZERO.multiply(0.333333333333333);
      Complex complex4 = complex3.NaN.atan();
      Object object0 = complex3.NaN.readResolve();
      Complex complex5 = complex3.I.sqrt1z();
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex6.ONE.subtract(complex5);
      double double0 = complex0.abs();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.divide(complex1);
      Complex complex10 = complex9.I.exp();
      double double1 = complex8.getImaginary();
      ComplexField complexField0 = complex0.NaN.getField();
      ComplexField complexField1 = complex8.getField();
      Complex complex11 = complex9.sinh();
      int int0 = complex10.I.hashCode();
      try { 
        complex11.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.I.acos();
      boolean boolean0 = complex0.equals("w");
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.ONE.divide(complex2);
      ComplexField complexField0 = complex1.getField();
      List<Complex> list0 = complex1.ONE.nthRoot(1319);
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex2.conjugate();
      int int0 = complex2.hashCode();
      Object object1 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(3686.76837832, 310.3053);
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      int int0 = complex1.ONE.hashCode();
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.INF.tanh();
      double double1 = complex1.getArgument();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.NaN.multiply(complex0);
      Complex complex6 = complex4.cos();
      int int1 = complex4.hashCode();
      Complex complex7 = complex3.INF.exp();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex8.NaN.cosh();
      String string0 = complex4.toString();
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex9.createComplex(0.2857142686843872, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex1.getField();
      double double2 = complex8.getImaginary();
      Complex complex12 = complex0.ONE.createComplex(0.0, 0.2857142686843872);
      Complex complex13 = complex1.tanh();
      Object object0 = complex13.NaN.readResolve();
      Complex complex14 = complex9.asin();
      List<Complex> list0 = complex14.nthRoot(2006);
      double double3 = complex5.getArgument();
      Complex complex15 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      List<Complex> list0 = complex0.ONE.nthRoot(2949);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex2.I.exp();
      Object object0 = complex2.NaN.readResolve();
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex6.pow(complex1);
      Complex complex9 = complex1.ONE.acos();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex6.multiply(complex8);
      Complex complex13 = complex3.createComplex((-333.497148634), 0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      int int0 = complex2.NaN.hashCode();
      Object object0 = complex1.ONE.readResolve();
      Object object1 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.multiply((-750.2));
      int int1 = complex6.hashCode();
      List<Complex> list0 = complex6.nthRoot(2133);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(475.750672112829, 475.750672112829);
      double double0 = complex0.INF.abs();
      double double1 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.pow(complex1);
      double double2 = complex4.getReal();
      Complex complex5 = complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.multiply((-2198.3));
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.16666666666745392, (-221.13453));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ONE.multiply(3057.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      try { 
        complex1.nthRoot((-2070));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,070
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex3.I.tan();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex2.NaN.tan();
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = complex8.ONE.log();
      int int0 = complex2.hashCode();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex1.log();
      String string0 = complex11.toString();
      Complex complex12 = complex2.tanh();
      double double0 = complex11.abs();
      Complex complex13 = complex11.ZERO.multiply(complex3);
      Complex complex14 = complex9.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex15 = complex8.sqrt1z();
      int int1 = complex9.hashCode();
      Complex complex16 = complex9.conjugate();
      double double1 = complex7.getArgument();
      Complex complex17 = complex16.negate();
      boolean boolean0 = complex11.equals(complex9);
      Complex complex18 = complex0.cos();
      String string1 = complex3.toString();
      Complex complex19 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-164.73767198), (-164.73767198));
      Complex complex1 = complex0.sinh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.tanh();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.divide(complex0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ONE.log();
      double double1 = complex3.ZERO.getArgument();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex7.tan();
      String string0 = complex5.toString();
      Complex complex9 = complex3.divide(complex0);
      Complex complex10 = complex5.asin();
      double double2 = complex3.getImaginary();
      Complex complex11 = complex5.log();
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ZERO.exp();
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-379.5));
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.subtract(complex1);
      try { 
        complex2.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.cos();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.divide(complex2);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex4.multiply(complex6);
      Complex complex9 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.multiply((-2718.29873));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = Complex.I;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex4.I.tan();
      double double1 = complex3.abs();
      double double2 = complex0.getImaginary();
      Complex complex6 = complex3.NaN.asin();
      Complex complex7 = complex3.log();
      double double3 = complex7.abs();
      Complex complex8 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      String string0 = complex1.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.pow(complex0);
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex0.equals(object0);
      boolean boolean2 = complex2.isNaN();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.createComplex(8.251545029714408E-9, (-2053.5636004183));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex1.INF.tanh();
      Complex complex6 = complex4.add(complex1);
      boolean boolean0 = complex6.isInfinite();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex7.ZERO.asin();
      String string0 = complex7.NaN.toString();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex4.subtract(complex10);
      Complex complex12 = complex3.tan();
      Complex complex13 = complex4.subtract(complex10);
      ComplexField complexField0 = complex6.getField();
      ComplexField complexField1 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      int int0 = 57;
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.ONE.multiply(complex1);
      List<Complex> list0 = complex0.INF.nthRoot(57);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex3.ONE.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex6 = complex4.INF.exp();
      try { 
        complex6.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1912.294572690252), (-1912.294572690252));
      Complex complex2 = complex1.I.pow(complex0);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex0.conjugate();
      double double0 = complex2.getReal();
      Complex complex3 = complex0.acos();
      double double1 = complex1.getArgument();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.I.atan();
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.conjugate();
      double double0 = complex1.abs();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Object object0 = complex2.INF.readResolve();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex0.INF.asin();
      List<Complex> list0 = complex2.ONE.nthRoot(117);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex3.NaN.sin();
      Complex complex10 = complex8.INF.add(complex0);
      List<Complex> list1 = complex8.nthRoot(1);
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex7.pow(complex10);
      Complex complex14 = complex13.sin();
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex0.ZERO.tanh();
      int int0 = (-2501);
      try { 
        complex0.ONE.nthRoot((-2501));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,501
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-518.8));
      Complex complex1 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex1.ONE.sqrt1z();
      String string0 = complex5.I.toString();
      Complex complex6 = complex5.INF.add(complex4);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.ONE.acos();
      ComplexField complexField1 = complex1.getField();
      Complex complex10 = complex1.sqrt();
      double double0 = complex10.abs();
      String string1 = complex9.toString();
      double double1 = complex4.getArgument();
      double double2 = complex3.NaN.abs();
      Complex complex11 = complex10.divide(complex3);
      Complex complex12 = complex8.tanh();
      double double3 = complex0.getImaginary();
      Complex complex13 = complex11.log();
      Complex complex14 = complex9.divide(complex4);
      Complex complex15 = complex11.createComplex(Double.NaN, (-545.138583977734));
      double double4 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-4718.7788666998), (-4718.7788666998));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex3.tanh();
      String string0 = complex1.toString();
      Complex complex6 = complex3.ONE.tan();
      Complex complex7 = complex3.subtract(complex5);
      double double0 = complex7.INF.abs();
      List<Complex> list0 = complex7.INF.nthRoot(1);
      Complex complex8 = complex2.INF.multiply((-4718.7788666998));
      double double1 = complex6.ZERO.abs();
      Complex complex9 = complex5.subtract(complex2);
      Complex complex10 = complex9.divide(complex0);
      Complex complex11 = complex10.acos();
      String string1 = complex1.toString();
      double double2 = complex1.getReal();
      Complex complex12 = complex0.sin();
      int int0 = complex12.ONE.hashCode();
      Complex complex13 = complex9.sqrt();
      Complex complex14 = complex2.sinh();
      Complex complex15 = complex6.asin();
      Complex complex16 = complex14.acos();
      boolean boolean0 = complex16.equals(complex1);
      Complex complex17 = complex1.acos();
      Complex complex18 = complex10.acos();
      Complex complex19 = complex6.sinh();
      Complex complex20 = complex0.atan();
      boolean boolean1 = complex11.equals(complex9);
      String string2 = complex13.toString();
      double double3 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.subtract(complex3);
      int int1 = complex0.I.hashCode();
      Complex complex5 = complex2.NaN.sqrt();
      Complex complex6 = complex0.NaN.exp();
      Complex complex7 = complex1.multiply(complex4);
      Complex complex8 = complex3.ZERO.exp();
      List<Complex> list0 = complex7.nthRoot(7);
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex0.subtract(complex1);
      Complex complex11 = complex0.sinh();
      List<Complex> list1 = complex9.INF.nthRoot(3296);
      Complex complex12 = complex10.acos();
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex13.ZERO.multiply(0.0);
      Object object0 = complex13.readResolve();
      Complex complex15 = complex9.log();
      boolean boolean0 = complex10.equals("yeAK0Mj");
      double double1 = complex7.getImaginary();
      double double2 = complex2.getReal();
      Complex complex16 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.ZERO.atan();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = complex4.NaN.conjugate();
      Object object1 = complex5.INF.readResolve();
      String string0 = complex4.toString();
      List<Complex> list0 = complex4.ONE.nthRoot(1023);
      String string1 = complex0.toString();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex7.INF.log();
      List<Complex> list1 = complex4.nthRoot(1);
      String string2 = complex7.toString();
      Complex complex9 = complex0.multiply(complex6);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.subtract(complex10);
      Complex complex12 = complex0.divide(complex3);
      Complex complex13 = complex10.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sqrt1z();
      try { 
        complex2.INF.nthRoot((-2285));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,285
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.exp();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex3.INF.atan();
      double double1 = complex0.NaN.getArgument();
      Complex complex5 = complex3.I.acos();
      List<Complex> list0 = complex2.ZERO.nthRoot(258);
      Complex complex6 = complex1.INF.multiply(Double.NaN);
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex1.ZERO.exp();
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex2.ONE.multiply(complex1);
      Object object0 = complex11.I.readResolve();
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex11.NaN.sqrt();
      double double2 = complex0.getImaginary();
      Complex complex14 = complex2.atan();
      Object object1 = complex1.readResolve();
      Complex complex15 = complex14.divide(complex1);
      Complex complex16 = complex11.INF.tan();
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex2.equals(object0);
      double double3 = complex15.getReal();
  }
}
