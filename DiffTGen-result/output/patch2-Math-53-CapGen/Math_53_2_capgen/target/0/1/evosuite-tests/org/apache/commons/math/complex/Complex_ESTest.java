/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:24:43 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      String string0 = complex0.I.toString();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex3.conjugate();
      String string1 = complex1.toString();
      Complex complex6 = complex2.divide(complex0);
      double double0 = complex2.abs();
      Complex complex7 = complex1.sinh();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex5.INF.sin();
      Complex complex9 = complex4.log();
      boolean boolean0 = complex5.isNaN();
      double double1 = complex3.getArgument();
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex7.createComplex((-2901.875970876927), 591.88273);
      ComplexField complexField1 = complex3.getField();
      double double2 = complex4.abs();
      double double3 = complex4.getImaginary();
      Complex complex13 = complex7.sin();
      Complex complex14 = complex13.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.getReal();
      Complex complex1 = new Complex(Double.NaN, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex6.ZERO.multiply(complex1);
      Complex complex8 = complex6.ONE.sin();
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex5.INF.atan();
      double double2 = complex6.getReal();
      ComplexField complexField1 = complex4.getField();
      double double3 = complex5.getArgument();
      Complex complex10 = complex0.conjugate();
      double double4 = complex0.abs();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex11.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 2980.7;
      Complex complex0 = new Complex(2980.7, 2980.7);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.exp();
      String string0 = complex0.toString();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.INF.add(complex1);
      Complex complex6 = complex3.NaN.conjugate();
      Complex complex7 = complex4.ONE.sqrt();
      boolean boolean0 = complex4.isNaN();
      Complex complex8 = complex4.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex4.ZERO.cosh();
      try { 
        complex7.nthRoot((-47));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -47
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(163.472334, 163.472334);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex2.divide(complex1);
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex1.multiply((-2991.9841941668));
      Complex complex11 = complex1.acos();
      Complex complex12 = complex11.ZERO.subtract(complex8);
      Object object0 = complex7.readResolve();
      Complex complex13 = complex3.I.multiply(complex2);
      List<Complex> list0 = complex6.nthRoot(1280);
      Complex complex14 = complex3.asin();
      Complex complex15 = complex0.acos();
      Complex complex16 = complex11.add(complex2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.ZERO.createComplex(2.0, 2.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.subtract(complex3);
      try { 
        complex5.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1618.82168, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.I.createComplex(1618.82168, 1618.82168);
      Complex complex4 = complex0.negate();
      double double0 = complex4.getArgument();
      double double1 = complex4.getImaginary();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.NaN.multiply(complex0);
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex4.INF.asin();
      Complex complex7 = complex6.ONE.conjugate();
      Complex complex8 = complex6.log();
      Complex complex9 = complex2.tanh();
      double double1 = complex9.ONE.getArgument();
      Complex complex10 = complex9.ONE.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex3.multiply(1.0);
      Complex complex14 = complex9.cos();
      Complex complex15 = complex11.conjugate();
      Complex complex16 = complex13.asin();
      Complex complex17 = complex16.divide(complex1);
      List<Complex> list0 = complex13.nthRoot(1);
      Complex complex18 = complex1.sinh();
      Complex complex19 = complex3.asin();
      Complex complex20 = complex1.createComplex((-1.0), (-1.0));
      boolean boolean0 = complex18.isInfinite();
      Complex complex21 = Complex.ONE;
      Complex complex22 = complex8.pow(complex21);
      Object object1 = complex16.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1059.878917), (-1059.878917));
      Complex complex1 = complex0.multiply((-1059.878917));
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.I.createComplex(Double.NaN, (-1059.878917));
      Complex complex5 = complex2.NaN.tan();
      Complex complex6 = complex2.ONE.conjugate();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.INF.add(complex1);
      Complex complex11 = complex10.I.cos();
      Complex complex12 = complex1.ZERO.cosh();
      Complex complex13 = complex12.INF.pow(complex0);
      int int0 = complex9.ONE.hashCode();
      Complex complex14 = complex3.INF.asin();
      Complex complex15 = complex1.add(complex6);
      boolean boolean0 = complex7.isInfinite();
      ComplexField complexField1 = complex2.getField();
      Complex complex16 = complex0.add(complex3);
      Complex complex17 = complex9.createComplex((-1830.222340564686), 2348.54198585266);
      Complex complex18 = complex6.cos();
      Complex complex19 = complex18.I.tan();
      Complex complex20 = complex19.ZERO.createComplex(2686.22, 2348.54198585266);
      double double0 = complex17.abs();
      Complex complex21 = complex6.subtract(complex8);
      double double1 = complex17.getImaginary();
      Complex complex22 = complex18.sqrt1z();
      double double2 = complex5.getImaginary();
      double double3 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = new Complex(1.0, 3198.3460812793);
      Complex complex3 = complex0.ONE.pow(complex2);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.ZERO.tanh();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex0.ONE.divide(complex5);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex4.ZERO.log();
      Complex complex11 = complex4.NaN.multiply(complex8);
      double double0 = complex0.getImaginary();
      Complex complex12 = complex5.createComplex(2.0, Double.POSITIVE_INFINITY);
      Complex complex13 = complex8.pow(complex9);
      Complex complex14 = complex4.sin();
      Complex complex15 = complex14.ZERO.sinh();
      Complex complex16 = complex4.INF.acos();
      Complex complex17 = complex1.multiply(complex0);
      Complex complex18 = complex14.multiply(complex17);
      Complex complex19 = complex18.I.atan();
      Complex complex20 = complex2.sqrt1z();
      Complex complex21 = complex18.tanh();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex3.equals(object0);
      int int0 = complex4.hashCode();
      double double1 = complex10.getReal();
      double double2 = complex18.getImaginary();
      Complex complex22 = complex14.cosh();
      ComplexField complexField0 = complex19.getField();
      Complex complex23 = complex7.acos();
      double double3 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.createComplex((-1.5707963267948966), (-425.949751));
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex4.sqrt();
      double double0 = complex3.getImaginary();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.INF.createComplex(1084.948199, (-1781.4755358556617));
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex3.ONE.multiply(complex1);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.log();
      Object object0 = complex7.INF.readResolve();
      Complex complex8 = complex3.sinh();
      List<Complex> list0 = complex8.I.nthRoot(1);
      double double0 = complex1.abs();
      Complex complex9 = complex8.sqrt1z();
      double double1 = complex1.getArgument();
      Complex complex10 = complex9.sqrt();
      Object object1 = complex10.I.readResolve();
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex11.ONE.divide(complex9);
      Complex complex13 = complex12.NaN.divide(complex11);
      Complex complex14 = complex6.conjugate();
      Complex complex15 = complex7.multiply(Double.NaN);
      Complex complex16 = complex15.log();
      try { 
        complex1.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.multiply((-1038.461626677077));
      try { 
        complex0.nthRoot((-955));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -955
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex4.acos();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex7.INF.multiply(complex6);
      Complex complex9 = complex8.NaN.multiply(complex5);
      Complex complex10 = complex4.multiply(complex0);
      Complex complex11 = complex10.ONE.tan();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex10.add(complex0);
      Complex complex14 = complex1.sqrt1z();
      Complex complex15 = complex5.exp();
      ComplexField complexField0 = complex15.ZERO.getField();
      Complex complex16 = complex1.atan();
      Complex complex17 = complex15.I.sinh();
      List<Complex> list0 = complex16.I.nthRoot(17);
      Complex complex18 = complex14.I.conjugate();
      Complex complex19 = complex15.tan();
      Complex complex20 = complex1.atan();
      Complex complex21 = complex20.I.tanh();
      boolean boolean0 = complex14.equals(complex19);
      Complex complex22 = complex6.conjugate();
      Complex complex23 = complex22.INF.asin();
      Complex complex24 = complex1.sqrt1z();
      Complex complex25 = complex24.ONE.negate();
      Complex complex26 = complex24.createComplex(17, 17);
      try { 
        complex13.nthRoot((-172));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -172
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex3.ZERO.negate();
      double double0 = complex0.abs();
      Complex complex5 = complex0.I.sin();
      Complex complex6 = complex0.conjugate();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-3445.106222587252), (-2397.552530049714));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.multiply(2.0);
      Complex complex3 = complex0.cosh();
      int int0 = complex2.hashCode();
      Complex complex4 = complex0.createComplex((-2397.552530049714), (-4656.0));
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.multiply((-968.021121752097));
      String string1 = complex2.INF.toString();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.ZERO.cos();
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1.1730463525082348E-7, 0.0);
      Complex complex1 = complex0.conjugate();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.2, 904.4092641116155);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex3.ONE.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-2555.0148286452113), (-542.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.createComplex((-542.0), (-2555.0148286452113));
      String string0 = complex2.INF.toString();
      ComplexField complexField0 = complex0.NaN.getField();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.NaN.createComplex((-389.0985275), Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex1.ZERO.createComplex((-2555.0148286452113), 0.0);
      double double0 = complex3.getReal();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex8.I.negate();
      int int0 = complex4.hashCode();
      Complex complex11 = complex1.multiply((-1162.5799745064369));
      String string1 = complex11.NaN.toString();
      Complex complex12 = complex4.cos();
      Complex complex13 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex1.ZERO.createComplex(0.0, (-153.7));
      Complex complex6 = complex1.add(complex2);
      ComplexField complexField2 = complex0.getField();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex7.I.pow(complex5);
      int int0 = complex6.hashCode();
      Complex complex10 = complex6.pow(complex1);
      Complex complex11 = complex6.cos();
      Object object0 = new Object();
      boolean boolean0 = complex9.equals(object0);
      Complex complex12 = complex8.sqrt();
      List<Complex> list0 = complex11.nthRoot(15);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ZERO.multiply(Double.NaN);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.tanh();
      String string0 = complex3.NaN.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex5.I.tan();
      Object object0 = complex3.INF.readResolve();
      Complex complex7 = complex3.add(complex4);
      Complex complex8 = complex2.divide(complex0);
      Object object1 = complex7.readResolve();
      boolean boolean1 = complex2.equals(object1);
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      String string0 = complex1.I.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.NaN.sqrt1z();
      double double0 = complex3.I.getArgument();
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex5.multiply(complex1);
      double double1 = complex6.I.getArgument();
      Complex complex7 = complex2.I.exp();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.I.subtract(complex8);
      Complex complex10 = complex9.I.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex0.multiply(complex3);
      Complex complex12 = complex2.log();
      Complex complex13 = complex3.multiply(1.5707963267948966);
      Complex complex14 = complex2.log();
      boolean boolean1 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ONE.readResolve();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.ZERO.acos();
      String string0 = complex2.I.toString();
      Complex complex4 = complex0.conjugate();
      double double0 = complex2.abs();
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex4.I.exp();
      Object object0 = complex2.readResolve();
      double double1 = complex6.getReal();
      String string1 = complex6.toString();
      List<Complex> list0 = complex4.NaN.nthRoot(1);
      List<Complex> list1 = complex4.nthRoot(1);
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex2.isNaN();
      Complex complex7 = complex4.INF.cos();
      int int0 = complex6.hashCode();
      Complex complex8 = complex2.atan();
      double double2 = complex1.getArgument();
      Complex complex9 = complex6.cos();
      boolean boolean2 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.ZERO.negate();
      String string0 = complex0.I.toString();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex3.NaN.log();
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex0.subtract(complex4);
      Complex complex12 = complex3.ONE.add(complex0);
      List<Complex> list0 = complex12.ZERO.nthRoot(428);
      Complex complex13 = complex5.atan();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex8.exp();
      String string1 = complex14.NaN.toString();
      Complex complex16 = complex14.sqrt();
      Complex complex17 = complex16.ZERO.sin();
      Complex complex18 = complex17.I.cos();
      Complex complex19 = complex3.sqrt1z();
      double double0 = complex19.ZERO.getArgument();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex20 = complex8.sqrt();
      Complex complex21 = complex20.I.add(complex10);
      Complex complex22 = complex15.sinh();
      double double1 = complex22.ZERO.abs();
      Object object1 = complex14.readResolve();
      Complex complex23 = complex11.cosh();
      Complex complex24 = complex6.asin();
      boolean boolean1 = complex16.equals(complex20);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.sqrt();
      int int0 = complex2.hashCode();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex4.createComplex(1123.1170967, 9.220590270857665E-9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.ZERO.cos();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex1.NaN.add(complex8);
      int int0 = complex1.I.hashCode();
      Complex complex10 = complex1.ONE.sqrt();
      int int1 = complex0.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex11 = Complex.INF;
      double double1 = complex11.ZERO.abs();
      Complex complex12 = complex0.multiply(complex11);
      Complex complex13 = complex11.ONE.sin();
      Complex complex14 = complex6.log();
      int int2 = complex11.hashCode();
      String string0 = complex6.toString();
      double double2 = complex1.getArgument();
      Complex complex15 = complex6.negate();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.cos();
      Object object1 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.I.sin();
      double double0 = complex1.ZERO.getArgument();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex1.isNaN();
      ComplexField complexField1 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.createComplex(Double.NaN, 314.30985103);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex5.INF.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex3.tanh();
      double double0 = complex8.I.getArgument();
      Complex complex9 = complex4.ONE.exp();
      Complex complex10 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex11 = complex5.sin();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex10.equals(complexField0);
      boolean boolean1 = complex5.isInfinite();
      Complex complex12 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.NaN.log();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex3.equals(object0);
      Complex complex8 = complex0.sinh();
      Object object1 = complex8.ZERO.readResolve();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex7.log();
      Complex complex11 = complex6.sqrt();
      try { 
        complex3.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.exp();
      int int0 = complex4.I.hashCode();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.ONE;
      List<Complex> list0 = complex6.ONE.nthRoot(87);
      Complex complex7 = complex2.divide(complex6);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex10.acos();
      Complex complex12 = new Complex(0.7853981633974483, 0.7853981633974483);
      Complex complex13 = complex3.multiply(complex12);
      Complex complex14 = complex12.asin();
      Complex complex15 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.NaN.divide(complex1);
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.ZERO.createComplex(0.0, 2232.71429);
      Complex complex4 = complex0.multiply(complex1);
      String string0 = complex2.INF.toString();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.NaN.negate();
      double double0 = complex1.abs();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex4.cosh();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      double double0 = complex0.abs();
      Complex complex2 = complex1.asin();
      int int0 = complex2.NaN.hashCode();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(3.9736429850260626E-8);
      double double0 = complex0.abs();
      Complex complex3 = complex0.conjugate();
      try { 
        complex1.nthRoot((-185));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -185
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.tan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.tan();
      double double0 = complex2.getArgument();
      List<Complex> list0 = complex0.nthRoot(2047);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex2.ONE.tan();
      Complex complex5 = complex0.I.tanh();
      Complex complex6 = complex2.NaN.add(complex1);
      Complex complex7 = complex0.INF.tanh();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex0.INF.multiply(342.166745367);
      Complex complex10 = complex1.createComplex(342.166745367, 2968.15);
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex10.acos();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex10.sin();
      double double0 = complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1061.1725656867434, 1061.1725656867434);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.INF.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      double double0 = complex0.abs();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.I.acos();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex6 = complex3.ONE.subtract(complex1);
      Complex complex7 = complex0.createComplex(3133.691612173226, 3133.691612173226);
      boolean boolean0 = complex0.equals(complex7);
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex9.multiply(complex10);
      double double1 = complex8.getArgument();
      double double2 = complex2.getReal();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex1.multiply(complex2);
      try { 
        complex7.nthRoot((-1695));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,695
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 0;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.negate();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex1.createComplex(0.0, 0.0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.createComplex(6.283185307179586, 3944.2676428979507);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1799.8138992);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.INF.createComplex(2073, (-310.8324));
      Complex complex2 = complex0.INF.atan();
      List<Complex> list0 = complex0.nthRoot(2073);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3829.908576758), 0.0);
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.ZERO.multiply(complex2);
      Complex complex6 = complex2.NaN.cosh();
      Complex complex7 = complex6.ONE.createComplex(0.0, 0.0);
      Object object0 = complex0.INF.readResolve();
      Complex complex8 = complex0.ZERO.tan();
      String string0 = complex0.toString();
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex9.NaN.pow(complex0);
      Complex complex11 = complex9.ONE.divide(complex0);
      Complex complex12 = complex11.ZERO.multiply(complex1);
      int int1 = complex12.hashCode();
      Complex complex13 = complex0.NaN.negate();
      Complex complex14 = complex8.negate();
      Complex complex15 = complex14.ONE.sqrt1z();
      Object object1 = complex15.NaN.readResolve();
      double double0 = complex0.getReal();
      Complex complex16 = complex2.exp();
      ComplexField complexField0 = complex16.getField();
      boolean boolean0 = complex12.isNaN();
      double double1 = complex14.NaN.abs();
      Complex complex17 = complex9.atan();
      Complex complex18 = complex14.atan();
      Complex complex19 = complex18.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.I.pow(complex1);
      boolean boolean0 = complex0.equals(complex2);
      double double0 = complex3.abs();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.atan();
      double double1 = complex5.I.abs();
      Complex complex6 = complex3.cos();
      boolean boolean1 = complex1.isInfinite();
      Complex complex7 = complex0.NaN.tan();
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = complex4.ONE.atan();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex5.ZERO.acos();
      Complex complex12 = complex4.sqrt1z();
      Complex complex13 = complex10.pow(complex6);
      Complex complex14 = complex13.exp();
      Complex complex15 = complex6.sin();
      Complex complex16 = complex12.multiply(complex10);
      double double2 = complex12.getImaginary();
      Complex complex17 = complex5.tan();
      boolean boolean2 = complex10.equals(complex4);
      Object object0 = complex6.readResolve();
      boolean boolean3 = complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex4.I.add(complex2);
      Complex complex6 = complex1.NaN.divide(complex0);
      Complex complex7 = complex6.ZERO.createComplex(0.0, (-3810.72));
      int int0 = complex1.NaN.hashCode();
      Complex complex8 = complex7.INF.atan();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex1.ONE.negate();
      Complex complex6 = complex2.ONE.cosh();
      Complex complex7 = complex0.divide(complex1);
      double double0 = complex2.ZERO.getArgument();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex1.tanh();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex8.NaN.cos();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex7.divide(complex8);
      Complex complex13 = complex8.I.negate();
      List<Complex> list0 = complex12.nthRoot(1);
      Object object0 = complex5.NaN.readResolve();
      Complex complex14 = complex7.INF.acos();
      boolean boolean0 = complex8.isNaN();
      String string0 = complex3.toString();
      Complex complex15 = complex9.cosh();
      double double1 = complex15.INF.getArgument();
      Complex complex16 = complex5.sqrt();
      Complex complex17 = complex15.cos();
      Complex complex18 = complex1.ONE.acos();
      ComplexField complexField1 = complex17.getField();
      Complex complex19 = complex7.sqrt1z();
      double double2 = complex16.abs();
      Complex complex20 = complex15.multiply(1.0);
      double double3 = complex17.getImaginary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.I.createComplex(0.0, 2839.688212);
      double double0 = complex1.NaN.abs();
      ComplexField complexField1 = complex0.ONE.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.exp();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex4.NaN.multiply((-596.090052882124));
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex6.I.pow(complex2);
      Complex complex9 = complex8.NaN.subtract(complex0);
      Complex complex10 = complex6.ZERO.acos();
      double double1 = complex4.getReal();
      double double2 = complex4.abs();
      Complex complex11 = complex2.I.createComplex(0.7853981633974483, (-596.090052882124));
      Complex complex12 = complex0.log();
      Complex complex13 = complex2.sinh();
      double double3 = complex12.I.getArgument();
      double double4 = complex0.getReal();
      double double5 = complex12.getImaginary();
      Complex complex14 = complex12.sinh();
      ComplexField complexField2 = complex13.getField();
      Complex complex15 = complex0.createComplex(0.7853981633974483, 0.0);
      Complex complex16 = complex14.tanh();
      Complex complex17 = complex4.sqrt1z();
      Complex complex18 = complex17.INF.sqrt();
      Complex complex19 = new Complex(6.283185307179586, 1.5707963267948966);
      Complex complex20 = complex2.add(complex19);
      String string0 = complex8.toString();
      Complex complex21 = complex15.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex3.I.sin();
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex3.INF.add(complex0);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.INF.multiply(1246.8);
      Complex complex10 = complex2.multiply(0.0);
      Complex complex11 = complex3.createComplex(0.0, 0.0);
      Complex complex12 = complex4.I.createComplex(0.0, 0.19999999999923582);
      double double0 = complex4.abs();
      ComplexField complexField0 = complex4.getField();
      Complex complex13 = complex11.INF.conjugate();
      Complex complex14 = complex3.ONE.divide(complex10);
      ComplexField complexField1 = complex14.ONE.getField();
      Complex complex15 = complex13.I.negate();
      double double1 = complex3.getImaginary();
      Complex complex16 = complex11.add(complex4);
      Complex complex17 = complex16.divide(complex7);
      Complex complex18 = complex0.add(complex10);
      Complex complex19 = complex18.ZERO.subtract(complex7);
      Complex complex20 = complex5.pow(complex4);
      boolean boolean0 = complex0.equals("");
      Complex complex21 = complex1.sinh();
      List<Complex> list0 = complex18.NaN.nthRoot(3694);
      double double2 = complex20.getReal();
      Complex complex22 = complex19.sqrt1z();
      Complex complex23 = Complex.ONE;
      Complex complex24 = complex5.add(complex23);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ZERO.readResolve();
      List<Complex> list0 = complex0.INF.nthRoot(7);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = new Complex((-2159.583474099763), 2357.72);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.INF.subtract(complex1);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex3.NaN.tanh();
      Complex complex7 = complex6.NaN.cosh();
      ComplexField complexField1 = complex2.getField();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex3.subtract(complex8);
      Complex complex10 = complex1.I.conjugate();
      Complex complex11 = complex2.ONE.pow(complex9);
      Complex complex12 = complex0.NaN.subtract(complex9);
      Complex complex13 = complex1.sin();
      Complex complex14 = complex1.sqrt();
      ComplexField complexField2 = complex14.ZERO.getField();
      Complex complex15 = complex2.exp();
      Complex complex16 = complex15.tan();
      Complex complex17 = complex13.NaN.exp();
      List<Complex> list1 = complex13.nthRoot(74);
      Complex complex18 = complex2.sqrt1z();
      double double0 = complex8.abs();
      Complex complex19 = complex1.cosh();
      Complex complex20 = complex15.ONE.add(complex1);
      boolean boolean0 = complex5.isInfinite();
      Object object1 = complex3.readResolve();
      Complex complex21 = complex15.negate();
      Complex complex22 = complex5.log();
      double double1 = complex7.getImaginary();
      Complex complex23 = complex9.subtract(complex4);
      boolean boolean1 = complex9.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.createComplex((-3606.37), (-3437.8));
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.add(complex4);
      Complex complex7 = complex6.INF.multiply((-3437.8));
      Complex complex8 = complex7.NaN.divide(complex6);
      Complex complex9 = complex6.ONE.tanh();
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex11.ZERO.log();
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex13.tanh();
      int int1 = complex6.hashCode();
      Complex complex16 = complex13.tan();
      Complex complex17 = complex5.sin();
      Object object0 = complex3.readResolve();
      Complex complex18 = complex7.cos();
  }
}
