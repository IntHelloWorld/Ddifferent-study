/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:28:23 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      int int0 = complex1.hashCode();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.I.asin();
      double double1 = complex2.INF.abs();
      Complex complex4 = complex1.asin();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex5 = complex1.log();
      Complex complex6 = complex4.ZERO.sinh();
      Complex complex7 = complex6.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.pow(complex4);
      ComplexField complexField1 = complex1.I.getField();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex0.cos();
      double double2 = complex9.getReal();
      double double3 = complex0.getReal();
      Complex complex12 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(934.8344510939, 934.8344510939);
      double double0 = complex1.I.getArgument();
      double double1 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.cosh();
      ComplexField complexField0 = complex1.NaN.getField();
      double double2 = complex1.abs();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.INF.cosh();
      double double0 = complex2.I.abs();
      int int0 = complex2.INF.hashCode();
      double double1 = complex1.abs();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.tan();
      Object object0 = complex4.INF.readResolve();
      double double2 = complex1.getImaginary();
      boolean boolean0 = complex1.isNaN();
      ComplexField complexField1 = complex2.getField();
      String string0 = complex4.toString();
      boolean boolean1 = complex1.isNaN();
      Complex complex6 = complex1.NaN.subtract(complex4);
      Complex complex7 = complex6.ONE.divide(complex0);
      int int1 = complex0.hashCode();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.ONE.asin();
      String string1 = complex9.toString();
      Complex complex11 = complex2.pow(complex3);
      Complex complex12 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = Complex.ZERO;
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex3.NaN.subtract(complex0);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.NaN.divide(complex2);
      try { 
        complex9.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.INF.atan();
      int int0 = complex1.I.hashCode();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.ZERO.createComplex(4289.006, 7.0);
      double double2 = complex2.getArgument();
      double double3 = complex2.INF.getArgument();
      double double4 = complex0.abs();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.subtract(complex3);
      double double5 = complex0.NaN.abs();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex7.INF.pow(complex5);
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex7.ONE.conjugate();
      List<Complex> list0 = complex2.nthRoot(37);
      Complex complex11 = complex1.sin();
      Complex complex12 = complex1.sinh();
      double double6 = complex4.abs();
      Complex complex13 = complex5.subtract(complex2);
      List<Complex> list1 = complex13.ZERO.nthRoot(Integer.MAX_VALUE);
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex10.tan();
      Complex complex16 = complex15.NaN.cosh();
      Complex complex17 = complex14.negate();
      double double7 = complex12.getReal();
      Complex complex18 = complex6.cosh();
      Complex complex19 = complex12.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1.125);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex0.ONE.abs();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      boolean boolean0 = complex0.equals(object0);
      Object object1 = complex2.I.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.NaN.asin();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.ZERO.add(complex2);
      Complex complex11 = complex10.NaN.multiply(1.0);
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex2.ZERO.tanh();
      Complex complex14 = complex13.I.negate();
      Complex complex15 = complex10.ONE.exp();
      Complex complex16 = complex15.INF.sqrt();
      Complex complex17 = complex15.negate();
      Complex complex18 = complex2.I.pow(complex17);
      List<Complex> list0 = complex10.nthRoot(3305);
      Complex complex19 = complex17.createComplex(1.0, 3305);
      Complex complex20 = complex10.I.sinh();
      double double1 = complex16.getReal();
      Complex complex21 = complex19.exp();
      Object object2 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1173.357023), (-1173.357023));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.cos();
      double double0 = complex2.INF.getArgument();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex7.NaN.sqrt();
      String string0 = complex6.ONE.toString();
      String string1 = complex6.toString();
      boolean boolean0 = complex4.isInfinite();
      Complex complex9 = complex4.sinh();
      boolean boolean1 = complex0.equals(complex5);
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.sin();
      int int0 = complex1.hashCode();
      Complex complex12 = complex7.add(complex2);
      double double1 = complex2.getReal();
      Complex complex13 = complex6.cos();
      boolean boolean2 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex2.NaN.subtract(complex0);
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex5.ZERO.negate();
      double double0 = complex5.I.abs();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex7.INF.multiply(1.0);
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex7.NaN.multiply(1758.0);
      String string0 = complex7.INF.toString();
      double double1 = complex1.abs();
      Complex complex11 = complex1.multiply(complex0);
      Complex complex12 = complex11.asin();
      Complex complex13 = complex1.I.createComplex(1.0, 6.283185307179586);
      Complex complex14 = complex12.ZERO.multiply(1700.053060292318);
      Complex complex15 = complex12.tanh();
      Complex complex16 = complex11.pow(complex0);
      Complex complex17 = complex16.createComplex(0.0, 0.0);
      Complex complex18 = complex0.pow(complex16);
      Complex complex19 = complex2.tan();
      ComplexField complexField0 = complex19.getField();
      Complex complex20 = complex10.sqrt();
      Complex complex21 = complex17.exp();
      double double2 = complex11.getArgument();
      Complex complex22 = complex7.multiply(0.0);
      Complex complex23 = complex15.tan();
      Complex complex24 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex9.ONE.divide(complex8);
      double double0 = (-0.16624879837036133);
      try { 
        complex2.NaN.nthRoot((-3400));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,400
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex1.ONE.negate();
      Complex complex6 = complex2.NaN.divide(complex1);
      Complex complex7 = complex6.NaN.pow(complex1);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex4.multiply(complex8);
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex9.ZERO.exp();
      ComplexField complexField1 = complex6.ZERO.getField();
      Complex complex12 = complex11.INF.subtract(complex2);
      double double0 = complex7.abs();
      Complex complex13 = complex10.I.cosh();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex14.NaN.exp();
      Complex complex16 = complex15.I.sinh();
      ComplexField complexField2 = complex16.I.getField();
      double double1 = complex9.abs();
      double double2 = complex5.abs();
      Complex complex17 = complex7.acos();
      Complex complex18 = complex14.NaN.acos();
      Complex complex19 = complex18.I.pow(complex4);
      Complex complex20 = complex18.I.cos();
      Complex complex21 = complex3.sqrt();
      Complex complex22 = complex14.tan();
      Complex complex23 = complex5.atan();
      Complex complex24 = complex5.divide(complex14);
      boolean boolean0 = complex10.equals(complex18);
      Complex complex25 = complex15.cosh();
      Complex complex26 = complex16.divide(complex17);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2909.68368));
      String string0 = complex0.NaN.toString();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex1.ONE.multiply((-2909.68368));
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.ONE.multiply(0.0);
      Complex complex5 = complex4.ZERO.add(complex1);
      Object object1 = complex0.readResolve();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.ONE.negate();
      double double0 = complex4.getReal();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex7.NaN.cos();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex7.tanh();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex13.log();
      Object object2 = complex12.INF.readResolve();
      Object object3 = complex5.ZERO.readResolve();
      Complex complex16 = complex5.tan();
      Complex complex17 = complex5.conjugate();
      Complex complex18 = complex12.sinh();
      int int0 = complex16.hashCode();
      Complex complex19 = complex3.acos();
      Complex complex20 = complex4.add(complex17);
      Complex complex21 = complex7.createComplex((-2909.68368), 0.0);
      Complex complex22 = complex19.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-3196.774106294799), (-485.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.ONE.multiply(complex1);
      double double0 = complex0.abs();
      String string0 = complex2.NaN.toString();
      double double1 = complex0.getReal();
      Complex complex6 = complex2.I.acos();
      Complex complex7 = complex0.exp();
      double double2 = complex7.getArgument();
      Complex complex8 = complex7.NaN.add(complex3);
      Complex complex9 = complex8.ONE.createComplex(-0.0, (-485.0));
      Complex complex10 = complex8.subtract(complex7);
      Complex complex11 = complex7.tan();
      String string1 = complex7.toString();
      Complex complex12 = complex11.I.sin();
      Complex complex13 = complex11.ZERO.divide(complex7);
      Complex complex14 = complex13.NaN.sqrt();
      List<Complex> list0 = complex0.nthRoot(1);
      String string2 = complex11.toString();
      Complex complex15 = complex12.multiply(1790.96405246309);
      Complex complex16 = Complex.ZERO;
      ComplexField complexField0 = complex11.NaN.getField();
      boolean boolean0 = complex12.equals(complex16);
      Complex complex17 = complex13.cosh();
      Complex complex18 = complex11.add(complex12);
      Complex complex19 = complex0.log();
      double double3 = complex3.abs();
      Complex complex20 = complex19.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.conjugate();
      double double0 = complex1.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.ZERO.multiply(complex5);
      Complex complex7 = complex4.asin();
      String string1 = complex4.ONE.toString();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = complex8.cosh();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex1.getReal();
      int int0 = complex1.ONE.hashCode();
      Complex complex11 = complex8.subtract(complex4);
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex7.cosh();
      Object object0 = complex9.I.readResolve();
      Complex complex14 = complex4.atan();
      double double2 = complex1.getArgument();
      Complex complex15 = Complex.ZERO;
      Object object1 = complex15.readResolve();
      boolean boolean1 = complex9.equals(object1);
      Complex complex16 = complex14.multiply(complex4);
      Complex complex17 = complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      List<Complex> list0 = complex1.INF.nthRoot(5450);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.createComplex(5450, 4.455505956692757);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(788.996336, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 1563.62056);
      Complex complex2 = complex1.I.pow(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.createComplex((-532.0), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.I.createComplex(1.0, 1.0);
      Complex complex7 = complex5.INF.cosh();
      Complex complex8 = complex4.ZERO.log();
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex1.ZERO.log();
      Complex complex11 = complex10.I.add(complex6);
      Complex complex12 = complex5.NaN.acos();
      Complex complex13 = complex4.NaN.acos();
      int int0 = complex0.ZERO.hashCode();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex14.NaN.exp();
      Complex complex16 = complex3.INF.tan();
      Complex complex17 = complex4.multiply(complex5);
      List<Complex> list0 = complex17.ONE.nthRoot(1);
      String string0 = complex2.toString();
      Complex complex18 = complex17.sqrt1z();
      Object object0 = complex17.readResolve();
      double double1 = complex13.getArgument();
      Complex complex19 = complex3.exp();
      boolean boolean0 = complex14.equals(complex15);
      int int1 = complex17.hashCode();
      Complex complex20 = complex17.tanh();
      String string1 = complex20.ZERO.toString();
      Complex complex21 = complex8.multiply(complex20);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(3294198.0, 3294198.0);
      Complex complex1 = complex0.sinh();
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.createComplex(2408.9418, 2408.9418);
      ComplexField complexField0 = complex3.INF.getField();
      double double1 = complex3.INF.abs();
      Complex complex4 = complex3.NaN.multiply(complex0);
      String string0 = complex2.NaN.toString();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex7.I.tanh();
      ComplexField complexField1 = complex2.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex4.acos();
      Complex complex11 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex0.cosh();
      double double0 = complex3.getArgument();
      double double1 = complex3.ONE.abs();
      ComplexField complexField0 = complex3.getField();
      double double2 = complex0.getArgument();
      Complex complex5 = complex0.negate();
      String string0 = complex0.I.toString();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.NaN.sinh();
      String string1 = complex7.toString();
      Complex complex8 = complex5.ZERO.multiply(complex0);
      Complex complex9 = complex6.I.multiply(complex4);
      double double3 = complex5.ZERO.getArgument();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex9.multiply(1.0);
      Complex complex12 = complex3.pow(complex5);
      int int0 = complex6.hashCode();
      double double4 = complex2.getArgument();
      Complex complex13 = complex11.INF.multiply(complex5);
      Complex complex14 = complex6.negate();
      Complex complex15 = complex3.sqrt();
      boolean boolean0 = complex3.isNaN();
      Complex complex16 = complex8.multiply((-1.0));
      Complex complex17 = complex16.ZERO.conjugate();
      boolean boolean1 = complex12.equals((Object) null);
      Complex complex18 = Complex.NaN;
      boolean boolean2 = complex11.equals(complex18);
      Complex complex19 = complex9.conjugate();
      Complex complex20 = complex6.exp();
      Object object0 = complex20.readResolve();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.exp();
      boolean boolean0 = complex0.equals(complex5);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex7.log();
      Complex complex9 = complex6.INF.sin();
      double double1 = complex8.I.getArgument();
      // Undeclared exception!
      try { 
        complex7.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(617.52336, 5554.51233155672);
      String string0 = complex0.toString();
      double double0 = complex0.abs();
      Complex complex1 = complex0.createComplex(9.0, (-3916.763712593595));
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.sqrt1z();
      double double1 = complex3.getImaginary();
      Complex complex4 = complex1.negate();
      boolean boolean0 = complex0.equals(complex3);
      boolean boolean1 = complex1.isInfinite();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1645.5306745339537), (-1645.5306745339537));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = new Complex(4062.06115, 0.0);
      Complex complex3 = complex0.pow(complex2);
      double double0 = complex1.getReal();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex0.multiply(Double.NaN);
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex0.add(complex2);
      Object object0 = complex8.ZERO.readResolve();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex4.INF.multiply(complex0);
      Complex complex9 = complex3.pow(complex4);
      Complex complex10 = complex1.INF.cosh();
      double double0 = complex9.getReal();
      Complex complex11 = complex8.log();
      Complex complex12 = complex6.INF.divide(complex7);
      Complex complex13 = complex1.divide(complex9);
      Complex complex14 = complex7.asin();
      Complex complex15 = complex5.ZERO.multiply(complex3);
      Complex complex16 = complex6.divide(complex4);
      Complex complex17 = complex0.ONE.tanh();
      Complex complex18 = complex9.ONE.conjugate();
      Complex complex19 = complex5.pow(complex8);
      Complex complex20 = complex6.conjugate();
      List<Complex> list0 = complex19.nthRoot(288);
      Complex complex21 = complex13.conjugate();
      ComplexField complexField0 = complex4.getField();
      ComplexField complexField1 = complex6.getField();
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex1.negate();
      double double0 = complex1.NaN.getArgument();
      double double1 = complex2.ZERO.getArgument();
      boolean boolean0 = complex4.isInfinite();
      int int0 = complex2.hashCode();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.ONE.negate();
      boolean boolean1 = complex1.equals(complex5);
      Complex complex7 = complex4.log();
      Complex complex8 = complex1.NaN.divide(complex5);
      Complex complex9 = complex8.sinh();
      boolean boolean2 = complex4.isInfinite();
      Complex complex10 = complex7.subtract(complex2);
      Complex complex11 = complex10.ONE.cosh();
      Complex complex12 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.atan();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.ONE.createComplex(1, 1);
      try { 
        complex2.ZERO.nthRoot((-3238));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,238
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.add(complex0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(236.2430230104, 1.8014398509481984E16);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1589.87322511), (-1589.87322511));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.NaN.pow(complex0);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex0.ZERO.atan();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex5 = complex4.INF.subtract(complex1);
      Complex complex6 = complex4.NaN.asin();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex0.multiply(226.434);
      Complex complex9 = complex8.NaN.pow(complex1);
      double double0 = complex4.getReal();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex10.NaN.sin();
      boolean boolean1 = complex10.equals(complex1);
      Complex complex13 = complex6.sinh();
      Complex complex14 = complex13.I.divide(complex8);
      double double1 = complex5.getArgument();
      Complex complex15 = complex4.I.asin();
      ComplexField complexField1 = complex7.getField();
      Complex complex16 = complex2.NaN.asin();
      String string0 = complex6.toString();
      Complex complex17 = complex12.add(complex4);
      Complex complex18 = complex4.cos();
      Complex complex19 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-3507.4437437416), 2.0);
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex5.asin();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex3.I.conjugate();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.sin();
      boolean boolean0 = complex6.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.acos();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex1.ZERO.subtract(complex3);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.ZERO.tanh();
      double double0 = complex6.NaN.abs();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex5.createComplex((-1.0), 0.0);
      Complex complex8 = complex4.exp();
      Complex complex9 = complex0.add(complex2);
      Complex complex10 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex2.negate();
      double double0 = complex6.abs();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex3.sqrt1z();
      List<Complex> list0 = complex7.nthRoot(286);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex1.ZERO.sin();
      Complex complex5 = complex1.createComplex(Double.NaN, (-4236.04946625273));
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.NaN.pow(complex1);
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex7.ZERO.cos();
      int int0 = complex1.hashCode();
      Complex complex10 = complex1.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex2.sqrt();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.multiply(complex5);
      double double0 = complex4.getArgument();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.tan();
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      double double0 = complex1.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.I.sin();
      int int0 = complex1.hashCode();
      Complex complex3 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex0.acos();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1.625);
      Complex complex2 = complex0.I.multiply(complex1);
      String string0 = complex2.ONE.toString();
      try { 
        complex1.I.nthRoot((-2343));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,343
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.multiply((-1591.57624));
      Complex complex4 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply((-723.0));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.ZERO.atan();
      String string0 = complex2.I.toString();
      int int0 = complex2.hashCode();
      int int1 = complex4.INF.hashCode();
      Complex complex5 = complex0.sin();
      String string1 = complex5.toString();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex7.negate();
      Complex complex10 = complex7.ZERO.sin();
      Complex complex11 = complex6.NaN.add(complex1);
      Complex complex12 = complex8.INF.sin();
      Complex complex13 = complex11.ONE.multiply(complex1);
      Complex complex14 = complex13.NaN.cosh();
      Complex complex15 = complex10.subtract(complex0);
      Complex complex16 = complex8.I.cosh();
      Complex complex17 = complex6.multiply(0.0);
      Complex complex18 = complex8.subtract(complex7);
      double double0 = complex9.getImaginary();
      double double1 = complex15.getArgument();
      Complex complex19 = complex6.NaN.sqrt();
      double double2 = complex2.getArgument();
      Complex complex20 = complex15.subtract(complex5);
      String string2 = complex20.NaN.toString();
      Complex complex21 = complex18.multiply(complex7);
      Complex complex22 = complex21.ONE.asin();
      boolean boolean0 = complex4.isInfinite();
      Complex complex23 = complex18.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ONE.hashCode();
      List<Complex> list0 = complex0.nthRoot(1709);
      Complex complex1 = complex0.cos();
      int int1 = complex1.hashCode();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      int int2 = complex0.ZERO.hashCode();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex3.ZERO.cos();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.divide(complex0);
      Complex complex10 = complex3.log();
      List<Complex> list1 = complex2.nthRoot(1709);
      Complex complex11 = complex2.log();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex5.NaN.multiply((double) 1709);
      Complex complex14 = complex12.ZERO.multiply((double) 1709);
      Complex complex15 = complex12.NaN.sinh();
      int int3 = complex12.ZERO.hashCode();
      Complex complex16 = complex9.I.sin();
      List<Complex> list2 = complex16.NaN.nthRoot(1709);
      boolean boolean0 = complex1.isNaN();
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex1.INF.conjugate();
      Complex complex19 = complex2.createComplex(1158.209331277166, 1.2393345855018391E-8);
      int int4 = complex14.hashCode();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      Complex complex1 = new Complex((-3100.5009537), (-1.5707963267948966));
      String string1 = complex1.toString();
      Complex complex2 = complex1.NaN.multiply(1.073741824E9);
      Object object0 = complex2.I.readResolve();
      int int0 = complex2.INF.hashCode();
      int int1 = complex2.NaN.hashCode();
      Complex complex3 = complex1.NaN.atan();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex5.acos();
      double double0 = complex1.INF.abs();
      double double1 = complex5.NaN.getArgument();
      Complex complex7 = complex4.createComplex((-3100.5009537), (-1.5707963267948966));
      String string2 = complex0.toString();
      boolean boolean1 = complex4.isInfinite();
      Complex complex8 = complex3.conjugate();
      double double2 = complex8.getArgument();
      String string3 = complex0.toString();
      double double3 = complex7.abs();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex4.divide(complex8);
      Complex complex11 = complex1.ZERO.add(complex9);
      List<Complex> list0 = complex2.nthRoot(223);
      boolean boolean2 = complex5.isNaN();
      Complex complex12 = complex2.negate();
      Complex complex13 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex2.sin();
      List<Complex> list0 = complex1.nthRoot(374);
      Complex complex9 = complex2.NaN.sqrt1z();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex10.log();
      Complex complex12 = complex1.ONE.divide(complex2);
      String string0 = complex2.ONE.toString();
      Complex complex13 = complex7.INF.atan();
      Complex complex14 = complex12.NaN.conjugate();
      Complex complex15 = complex14.acos();
      Complex complex16 = complex8.I.sin();
      Complex complex17 = complex7.conjugate();
      Object object0 = complex17.NaN.readResolve();
      boolean boolean0 = complex2.isInfinite();
      int int0 = complex9.hashCode();
      Object object1 = complex7.INF.readResolve();
      Complex complex18 = complex8.sinh();
      Complex complex19 = complex7.multiply(0.15);
      double double0 = complex9.getImaginary();
      Complex complex20 = complex4.NaN.cosh();
      Complex complex21 = complex13.sqrt1z();
      Complex complex22 = complex9.add(complex4);
      Complex complex23 = complex9.negate();
      double double1 = complex0.getArgument();
      Complex complex24 = complex0.sqrt();
      boolean boolean1 = complex12.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      int int0 = complex0.hashCode();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.acos();
      Object object0 = complex2.INF.readResolve();
      ComplexField complexField0 = complex1.ZERO.getField();
      String string0 = complex0.toString();
      double double1 = complex2.I.abs();
      Complex complex3 = complex0.tanh();
      double double2 = complex1.getImaginary();
      int int1 = (-2684);
      try { 
        complex2.nthRoot((-2684));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,684
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.cos();
      double double0 = complex4.getArgument();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex3.multiply(3482.8348447031);
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.multiply(3482.8348447031);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1546.5660923);
      Complex complex1 = complex0.multiply(1546.5660923);
      Object object0 = complex1.ZERO.readResolve();
      double double0 = complex0.INF.getArgument();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.I.conjugate();
      String string0 = complex2.NaN.toString();
      double double1 = complex1.getImaginary();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.cos();
      double double2 = complex3.ZERO.abs();
      Complex complex7 = complex0.I.conjugate();
      Complex complex8 = complex7.ONE.multiply(complex4);
      Complex complex9 = complex7.ONE.atan();
      Complex complex10 = complex3.createComplex(509.4, 0.7853981633974483);
      Complex complex11 = complex10.INF.cosh();
      Complex complex12 = complex4.exp();
      Complex complex13 = complex11.subtract(complex4);
      Complex complex14 = complex4.add(complex12);
      ComplexField complexField0 = complex14.I.getField();
      double double3 = complex4.abs();
      Complex complex15 = complex5.tanh();
      Complex complex16 = complex12.tanh();
      Complex complex17 = complex11.pow(complex13);
      String string1 = complex9.toString();
      Complex complex18 = complex0.sqrt1z();
      Complex complex19 = complex9.multiply(complex18);
      Complex complex20 = complex12.asin();
      double double4 = complex9.getArgument();
      double double5 = complex4.getArgument();
      Complex complex21 = complex12.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.I.toString();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.NaN.divide(complex2);
      double double0 = complex0.getImaginary();
      double double1 = complex0.abs();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.I.divide(complex0);
      Complex complex6 = complex5.NaN.multiply(complex0);
      double double2 = complex0.getReal();
      Complex complex7 = complex1.divide(complex2);
      Complex complex8 = complex7.I.add(complex6);
      Complex complex9 = complex1.multiply(complex2);
      Complex complex10 = complex1.log();
      Complex complex11 = complex10.INF.pow(complex4);
      Complex complex12 = complex3.subtract(complex4);
  }
}
