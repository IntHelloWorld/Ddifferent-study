/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:35:27 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex2.I.atan();
      Complex complex8 = complex2.INF.tan();
      Complex complex9 = complex0.ONE.add(complex2);
      Complex complex10 = complex0.createComplex((-2535.4808615), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex3.ONE.createComplex((-3171.1067281012783), (-3171.1067281012783));
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex1.INF.sqrt1z();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.pow(complex4);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.I.conjugate();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.exp();
      ComplexField complexField1 = complex1.ZERO.getField();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex5.multiply(complex1);
      ComplexField complexField2 = complex5.ONE.getField();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.divide(complex1);
      int int0 = complex5.hashCode();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex5.add(complex4);
      Complex complex12 = complex11.ONE.sin();
      double double0 = complex10.getArgument();
      Complex complex13 = complex8.tan();
      Complex complex14 = complex0.ONE.sin();
      List<Complex> list0 = complex5.nthRoot(1279);
      ComplexField complexField3 = complex0.getField();
      Complex complex15 = complex13.atan();
      Complex complex16 = complex5.multiply(complex1);
      Complex complex17 = complex3.sin();
      Complex complex18 = complex17.log();
      boolean boolean1 = complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sqrt1z();
      Object object0 = complex1.readResolve();
      double double0 = complex1.abs();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.multiply(Double.NaN);
      Complex complex5 = complex3.sqrt1z();
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(908.08, 908.08);
      double double0 = complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex5.ONE.sinh();
      Object object0 = complex4.NaN.readResolve();
      Complex complex7 = complex4.NaN.sqrt();
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex0.I.log();
      Complex complex9 = complex0.add(complex1);
      Complex complex10 = complex9.I.tanh();
      ComplexField complexField0 = complex10.NaN.getField();
      List<Complex> list0 = complex9.nthRoot(1021);
      Complex complex11 = complex9.exp();
      List<Complex> list1 = complex7.nthRoot(37);
      double double1 = complex0.getReal();
      Complex complex12 = complex4.sqrt();
      ComplexField complexField1 = complex12.ONE.getField();
      Complex complex13 = complex12.cosh();
      Complex complex14 = complex13.INF.cosh();
      Complex complex15 = complex14.exp();
      Complex complex16 = complex6.ZERO.conjugate();
      ComplexField complexField2 = complex7.getField();
      double double2 = complex7.getReal();
      Complex complex17 = complex6.multiply(908.08);
      Complex complex18 = complex13.asin();
      Complex complex19 = complex18.NaN.tanh();
      Object object2 = complex11.readResolve();
      Complex complex20 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      double double0 = complex0.abs();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex5.pow(complex0);
      Complex complex10 = complex6.I.multiply(complex0);
      Complex complex11 = complex1.sin();
      Complex complex12 = complex11.cosh();
      String string0 = complex0.toString();
      double double1 = complex12.NaN.abs();
      Complex complex13 = complex12.INF.cosh();
      Complex complex14 = complex11.INF.negate();
      double double2 = complex9.getArgument();
      Complex complex15 = complex11.exp();
      Complex complex16 = complex11.acos();
      double double3 = complex16.ONE.abs();
      boolean boolean0 = complex6.equals(complex15);
      Object object0 = complex16.readResolve();
      Complex complex17 = complex16.conjugate();
      int int0 = complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.INF.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.ONE.multiply(complex4);
      Complex complex7 = complex3.NaN.createComplex(1910.9231238634582, 1910.9231238634582);
      Complex complex8 = complex2.createComplex(1910.9231238634582, (-499.8));
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex8.I.pow(complex2);
      ComplexField complexField1 = complex10.ZERO.getField();
      Complex complex11 = complex3.exp();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex4.pow(complex12);
      Complex complex14 = complex13.I.tanh();
      ComplexField complexField2 = complex14.INF.getField();
      Complex complex15 = complex0.multiply((-499.8));
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex15.NaN.asin();
      ComplexField complexField3 = complex11.getField();
      Complex complex18 = complex7.tanh();
      Complex complex19 = complex16.divide(complex18);
      double double0 = complex15.getArgument();
      Complex complex20 = complex19.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = null;
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = new Complex(1.0, 0.0);
      Complex complex4 = complex2.ZERO.subtract(complex3);
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.tan();
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex5.subtract(complex9);
      Complex complex11 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1356.0884825115, 2510.68383);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex3.createComplex(1356.0884825115, (-3278.02));
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex5.pow(complex2);
      Complex complex12 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.negate();
      double double1 = complex0.ZERO.abs();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.asin();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1195.9069185861274), (-1195.9069185861274));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.INF.divide(complex1);
      double double0 = complex5.INF.getArgument();
      List<Complex> list0 = complex3.ZERO.nthRoot(106);
      Complex complex6 = complex1.ZERO.acos();
      Complex complex7 = complex0.ONE.tan();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex2.ONE.subtract(complex5);
      Complex complex11 = complex9.ZERO.tan();
      int int0 = complex2.hashCode();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex1.NaN.log();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex6 = complex0.sin();
      List<Complex> list0 = complex1.nthRoot(2738);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-0.16666666666666666), (-0.16666666666666666));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex0.INF.divide(complex1);
      double double0 = complex2.ONE.getArgument();
      Complex complex5 = complex2.add(complex4);
      double double1 = complex1.abs();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.INF.tan();
      double double2 = complex6.ONE.getArgument();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex6.INF.sqrt();
      Complex complex10 = complex2.I.tanh();
      Complex complex11 = complex0.log();
      Complex complex12 = complex11.NaN.multiply(0.0);
      Complex complex13 = complex11.atan();
      double double3 = complex11.abs();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex14 = complex4.ZERO.sin();
      Complex complex15 = complex11.INF.atan();
      Complex complex16 = complex11.negate();
      Complex complex17 = complex16.NaN.add(complex4);
      Complex complex18 = complex4.add(complex11);
      Object object0 = complex7.readResolve();
      Complex complex19 = complex6.cosh();
      Complex complex20 = complex14.pow(complex16);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1526.6776, (-1360.3904029));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.createComplex((-319.537816675851), (-253.91));
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex2.sqrt();
      String string0 = complex1.toString();
      Complex complex7 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex((-1416.25541), (-1.0));
      double double0 = complex1.abs();
      Complex complex2 = complex0.multiply((-2299.0));
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex2.asin();
      double double1 = complex4.NaN.abs();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex6.ZERO.tanh();
      Complex complex9 = complex0.sqrt();
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex4.createComplex((-2299.0), (-96.3));
      Complex complex12 = complex11.I.negate();
      Complex complex13 = complex12.I.multiply(complex2);
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex9.multiply(complex5);
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex3.sin();
      String string0 = complex3.toString();
      Complex complex6 = complex5.subtract(complex2);
      Complex complex7 = complex6.subtract(complex4);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.sqrt1z();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex0.multiply((-3126.5540787755));
      Complex complex5 = complex4.INF.add(complex2);
      double double0 = complex1.getImaginary();
      Complex complex6 = complex2.ONE.tan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex1.subtract(complex7);
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex0.cosh();
      int int0 = complex0.hashCode();
      Complex complex13 = complex1.sin();
      Complex complex14 = complex5.sqrt();
      Complex complex15 = complex14.ONE.sqrt1z();
      Complex complex16 = complex4.tan();
      Complex complex17 = complex12.atan();
      Complex complex18 = complex17.I.pow(complex15);
      Complex complex19 = new Complex(14.0, 3103.908147);
      Complex complex20 = complex17.subtract(complex19);
      Complex complex21 = complex20.pow(complex4);
      int int1 = complex8.hashCode();
      double double1 = complex0.NaN.abs();
      ComplexField complexField1 = complex6.getField();
      Complex complex22 = complex12.log();
      Complex complex23 = complex2.negate();
      Complex complex24 = complex0.acos();
      Complex complex25 = complex18.exp();
      Complex complex26 = complex25.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(3603.13546463, (-1930.5738));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.cosh();
      double double0 = complex3.I.abs();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex3.ONE.atan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.NaN.multiply(complex7);
      double double1 = complex3.getArgument();
      double double2 = complex5.getArgument();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex2.ZERO.sin();
      Complex complex11 = complex9.I.tan();
      String string0 = complex11.ZERO.toString();
      Complex complex12 = complex9.INF.atan();
      Complex complex13 = complex5.cosh();
      Complex complex14 = complex3.INF.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex15 = complex11.cos();
      Complex complex16 = complex6.cos();
      Complex complex17 = complex0.pow(complex8);
      ComplexField complexField1 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(122.291441281257, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.exp();
      String string0 = complex1.toString();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex1.createComplex((-785.63883589), (-3567.054746292335));
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.ONE.subtract(complex0);
      String string1 = complex1.toString();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.sinh();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex9 = complex5.add(complex3);
      double double1 = complex3.abs();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex1.I.add(complex0);
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex2.INF.acos();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex0.INF.nthRoot(36);
      Complex complex2 = complex0.exp();
      try { 
        complex2.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.log();
      double double0 = complex2.getArgument();
      boolean boolean0 = complex6.isNaN();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex3.sin();
      double double0 = complex5.getReal();
      Complex complex6 = complex2.createComplex(Double.NaN, 0.0);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), (-0.16624882440418567));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.NaN.createComplex((-350.534410036), 773.0);
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.tanh();
      double double0 = complex0.I.abs();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.sin();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.atan();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = complex0.sqrt1z();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.INF.multiply(complex0);
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.divide(complex0);
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.ONE.log();
      double double0 = complex0.abs();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex1.INF.exp();
      int int0 = complex4.hashCode();
      Complex complex5 = complex3.tan();
      double double0 = complex3.abs();
      String string0 = complex4.ONE.toString();
      Complex complex6 = complex1.conjugate();
      int int1 = complex0.hashCode();
      Complex complex7 = complex3.asin();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ONE.add(complex1);
      String string0 = complex2.I.toString();
      double double0 = complex2.INF.abs();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex1.I.multiply((-0.5));
      double double1 = complex7.getArgument();
      Complex complex8 = complex4.I.sin();
      int int0 = complex7.INF.hashCode();
      Complex complex9 = complex4.cos();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex3.asin();
      double double2 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = new Complex(2.2250738585072014E-308, 0.030589580535888672);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.ONE.createComplex(1.01, 2.2250738585072014E-308);
      Complex complex7 = complex0.ONE.exp();
      Complex complex8 = complex5.ZERO.tan();
      Complex complex9 = complex0.ONE.subtract(complex3);
      Complex complex10 = complex7.NaN.divide(complex3);
      Complex complex11 = complex0.I.negate();
      Complex complex12 = complex0.createComplex(1749.3418999197104, 0.0);
      Complex complex13 = complex12.NaN.log();
      double double0 = complex0.getReal();
      Complex complex14 = complex7.ONE.multiply(complex6);
      Complex complex15 = complex4.sin();
      Complex complex16 = complex0.log();
      boolean boolean0 = complex7.isInfinite();
      Complex complex17 = complex6.negate();
      Object object0 = complex8.readResolve();
      Object object1 = complex4.readResolve();
      try { 
        complex3.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 2384.650864588468;
      Complex complex0 = new Complex(2384.650864588468, 2384.650864588468);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.ONE.negate();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      // Undeclared exception!
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.exp();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Object object0 = new Object();
      Complex complex3 = complex1.ZERO.add(complex2);
      boolean boolean0 = complex2.equals(object0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      boolean boolean1 = complex4.isInfinite();
      boolean boolean2 = complex0.equals(complex2);
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex6.INF.divide(complex5);
      Object object1 = complex7.readResolve();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.INF.multiply(complex0);
      Complex complex10 = complex9.negate();
      boolean boolean3 = complex5.equals(complex8);
      Complex complex11 = complex4.multiply((-1.0));
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex6.negate();
      String string0 = complex13.NaN.toString();
      String string1 = complex11.toString();
      double double1 = complex5.abs();
      double double2 = complex6.getImaginary();
      Complex complex14 = complex2.conjugate();
      Complex complex15 = complex12.tan();
      Complex complex16 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.INF.divide(complex0);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex0.ONE.acos();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex8.ONE.divide(complex7);
      Complex complex10 = complex7.INF.divide(complex1);
      double double0 = complex0.NaN.abs();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex0.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex14 = complex1.atan();
      Complex complex15 = complex12.sin();
      Complex complex16 = complex15.NaN.multiply(Double.NaN);
      Complex complex17 = complex15.cosh();
      double double1 = complex17.ONE.abs();
      String string0 = complex12.toString();
      Complex complex18 = complex14.sin();
      Complex complex19 = complex18.atan();
      Complex complex20 = complex18.negate();
      Complex complex21 = complex18.NaN.cos();
      Complex complex22 = complex18.NaN.divide(complex17);
      Complex complex23 = complex0.sqrt1z();
      Object object1 = complex14.readResolve();
      Complex complex24 = complex0.cos();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex25 = complex19.divide(complex5);
      Complex complex26 = complex17.cosh();
      Complex complex27 = complex15.asin();
      Complex complex28 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.ZERO.log();
      boolean boolean0 = complex3.isInfinite();
      boolean boolean1 = complex0.isNaN();
      double double0 = complex3.NaN.abs();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.I.subtract(complex2);
      String string0 = complex3.ONE.toString();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex6.ONE.tan();
      Complex complex12 = complex3.multiply(0.0);
      String string1 = complex0.NaN.toString();
      Complex complex13 = complex12.ONE.negate();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex13.NaN.add(complex14);
      String string2 = complex12.NaN.toString();
      boolean boolean2 = complex12.isNaN();
      Complex complex16 = complex3.tan();
      Complex complex17 = complex2.asin();
      List<Complex> list0 = complex17.I.nthRoot(888);
      double double1 = complex7.abs();
      Complex complex18 = complex17.multiply(complex2);
      Complex complex19 = complex1.add(complex13);
      Complex complex20 = complex19.tan();
      Complex complex21 = complex19.I.subtract(complex14);
      Complex complex22 = complex14.log();
      Complex complex23 = complex3.subtract(complex14);
      Complex complex24 = complex6.multiply((-2911.78991));
      Complex complex25 = complex17.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex1.cos();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex1.ZERO.multiply(complex3);
      Complex complex6 = complex0.I.tanh();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex7 = complex1.multiply(complex0);
      double double1 = complex7.INF.abs();
      Complex complex8 = complex7.asin();
      double double2 = complex1.getArgument();
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      double double3 = complex0.getReal();
      Complex complex10 = complex0.exp();
      ComplexField complexField1 = complex10.ONE.getField();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex11.log();
      Complex complex13 = complex12.I.acos();
      double double4 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      try { 
        complex1.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.ONE.atan();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex5.I.sqrt();
      Complex complex8 = complex5.NaN.tanh();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex2.INF.sinh();
      Complex complex11 = complex5.I.exp();
      String string0 = complex2.ZERO.toString();
      Complex complex12 = complex0.NaN.sqrt1z();
      Complex complex13 = complex12.ZERO.sqrt();
      List<Complex> list0 = complex2.nthRoot(189);
      Complex complex14 = complex1.conjugate();
      Complex complex15 = complex5.sqrt1z();
      Complex complex16 = complex15.ZERO.add(complex5);
      Complex complex17 = complex8.asin();
      boolean boolean0 = complex2.isNaN();
      Complex complex18 = complex2.conjugate();
      Complex complex19 = complex1.add(complex8);
      double double0 = complex18.getReal();
      ComplexField complexField0 = complex14.getField();
      Complex complex20 = complex19.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex2.ONE.divide(complex0);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex5 = complex2.tanh();
      ComplexField complexField1 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.I.sin();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex6.multiply(488.3063908037713);
      Complex complex8 = complex1.multiply(complex5);
      Complex complex9 = complex4.conjugate();
      double double1 = complex3.getImaginary();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.add(complex7);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-7718.81946543382), (-7718.81946543382));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.NaN.sqrt1z();
      int int0 = complex2.INF.hashCode();
      int int1 = complex2.I.hashCode();
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex5.NaN.createComplex((-7718.81946543382), (-7718.81946543382));
      boolean boolean0 = complex0.equals(complex1);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex6.INF.negate();
      Complex complex9 = complex1.atan();
      double double0 = complex0.getImaginary();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex10.INF.log();
      Complex complex13 = complex12.ZERO.add(complex9);
      Complex complex14 = complex6.pow(complex1);
      Complex complex15 = complex7.I.sqrt1z();
      Object object0 = complex6.readResolve();
      Complex complex16 = complex9.sqrt();
      Complex complex17 = complex7.conjugate();
      double double1 = complex1.getImaginary();
      Complex complex18 = complex0.sin();
      double double2 = complex18.NaN.abs();
      Complex complex19 = complex5.asin();
      Complex complex20 = complex19.exp();
      Complex complex21 = complex17.acos();
      Complex complex22 = complex20.cos();
      ComplexField complexField0 = complex4.getField();
      Complex complex23 = complex15.multiply(0.0);
      Complex complex24 = complex23.INF.negate();
      boolean boolean1 = complex7.isNaN();
      Complex complex25 = complex14.sin();
  }
}
