/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:28:18 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.multiply(complex5);
      boolean boolean0 = complex2.equals(complex0);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.createComplex(1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.createComplex((-3529.8740451411), 0.11113807559013367);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex2.I.cos();
      double double0 = complex0.I.getArgument();
      double double1 = complex1.getArgument();
      Complex complex5 = complex1.divide(complex0);
      double double2 = complex5.ZERO.getArgument();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.multiply(complex5);
      Complex complex8 = complex7.ONE.subtract(complex5);
      Complex complex9 = complex7.NaN.createComplex(0.11113807559013367, 0.11113807559013367);
      Complex complex10 = complex1.sqrt();
      double double3 = complex7.getArgument();
      double double4 = complex9.getImaginary();
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex0.add(complex2);
      Complex complex13 = complex11.ONE.cos();
      Complex complex14 = complex13.NaN.negate();
      Complex complex15 = complex13.ONE.add(complex6);
      Complex complex16 = complex15.INF.sinh();
      double double5 = complex5.abs();
      double double6 = complex9.INF.abs();
      Object object1 = complex11.readResolve();
      Complex complex17 = complex5.createComplex(997.9485999, 0.11113807559013367);
      Complex complex18 = complex17.ONE.conjugate();
      double double7 = complex5.getReal();
      Complex complex19 = complex9.divide(complex3);
      Complex complex20 = complex8.exp();
      Complex complex21 = complex6.add(complex3);
      Complex complex22 = complex21.I.multiply((-3529.8740451411));
      double double8 = complex14.getArgument();
      Complex complex23 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(504.3136, 504.3136);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex0.multiply(6.283185307179586);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.NaN.pow(complex4);
      double double0 = complex1.getImaginary();
      Complex complex7 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex2.add(complex0);
      Complex complex10 = complex1.I.cosh();
      Complex complex11 = complex1.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex12 = complex1.createComplex(Double.NEGATIVE_INFINITY, 504.3136);
      Complex complex13 = complex9.ONE.sqrt();
      Complex complex14 = complex9.INF.sqrt1z();
      Complex complex15 = complex13.I.conjugate();
      int int0 = complex12.ONE.hashCode();
      Complex complex16 = complex9.cosh();
      Complex complex17 = complex12.INF.asin();
      Complex complex18 = complex16.I.multiply(0.09090909090909091);
      Complex complex19 = complex4.negate();
      String string0 = complex19.ZERO.toString();
      ComplexField complexField0 = complex12.getField();
      Complex complex20 = complex16.sqrt1z();
      Object object0 = new Object();
      boolean boolean0 = complex16.equals(object0);
      Complex complex21 = complex17.atan();
      Complex complex22 = complex4.atan();
      Complex complex23 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.INF.cosh();
      List<Complex> list0 = complex1.I.nthRoot(1759);
      Complex complex3 = null;
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(1409.8129018027596, 1409.8129018027596);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex2.I.divide(complex1);
      int int0 = complex5.INF.hashCode();
      Complex complex8 = complex5.INF.cos();
      double double0 = complex5.ZERO.getArgument();
      Complex complex9 = complex0.ZERO.tan();
      Complex complex10 = complex0.pow(complex2);
      Complex complex11 = complex10.NaN.conjugate();
      double double1 = complex10.ONE.getArgument();
      boolean boolean0 = complex10.isNaN();
      double double2 = complex2.abs();
      double double3 = complex1.getArgument();
      Complex complex12 = complex2.multiply(complex9);
      Complex complex13 = complex12.I.multiply(complex8);
      try { 
        complex1.nthRoot((-1102));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,102
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1870.6079532653291, 1870.6079532653291);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ONE.multiply(1047.79231177);
      Complex complex3 = complex2.ONE.conjugate();
      Object object0 = complex0.ONE.readResolve();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.createComplex(1870.6079532653291, 1870.6079532653291);
      Complex complex5 = complex4.NaN.multiply(1047.79231177);
      Complex complex6 = complex0.ONE.add(complex4);
      String string0 = complex4.toString();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex0.pow(complex4);
      double double0 = complex7.abs();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex5.abs();
      ComplexField complexField1 = complex8.getField();
      List<Complex> list0 = complex8.nthRoot(124);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.INF.pow(complex1);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex1.createComplex(1.1730463525082348E-7, 1.1730463525082348E-7);
      Complex complex10 = complex9.add(complex3);
      Complex complex11 = new Complex((-3382.461376674), Double.POSITIVE_INFINITY);
      Complex complex12 = complex9.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 6.283185307179586);
      Complex complex2 = complex1.INF.sqrt();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex0.createComplex(6.283185307179586, (-999.3900779));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex6.negate();
      Complex complex10 = complex6.createComplex((-100.0), (-318.46112426879165));
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex11.ONE.add(complex9);
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex3.asin();
      Complex complex15 = complex2.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3816.8179066262037));
      Complex complex1 = new Complex((-3816.8179066262037), (-3816.8179066262037));
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.sqrt();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.I.createComplex(Double.NaN, Double.NaN);
      double double0 = complex1.NaN.getArgument();
      double double1 = complex0.getImaginary();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(complex2);
      double double2 = complex2.getArgument();
      double double3 = complex3.getReal();
      double double4 = complex3.abs();
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      boolean boolean0 = complex0.equals("imaginary format");
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.ONE.negate();
      double double0 = complex0.abs();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex0.ONE.sinh();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.divide(complex0);
      Complex complex9 = complex8.NaN.multiply(complex2);
      List<Complex> list1 = complex6.I.nthRoot(1);
      Complex complex10 = complex5.atan();
      Complex complex11 = complex7.cosh();
      List<Complex> list2 = complex2.nthRoot(1);
      double double1 = complex3.getReal();
      Object object0 = complex7.readResolve();
      Complex complex12 = complex3.log();
      int int0 = complex1.hashCode();
      Complex complex13 = complex12.ZERO.add(complex4);
      Complex complex14 = complex13.ZERO.log();
      Complex complex15 = complex3.ONE.sinh();
      Complex complex16 = new Complex(0.0, Double.NaN);
      Complex complex17 = complex12.multiply(complex16);
      double double2 = complex2.getImaginary();
      Complex complex18 = complex12.cos();
      boolean boolean1 = complex6.isInfinite();
      Complex complex19 = complex3.tan();
      Complex complex20 = complex9.atan();
      Complex complex21 = complex10.multiply(Double.NaN);
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1461.0035559054934), (-1461.0035559054934));
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.multiply((-1461.0035559054934));
      Complex complex4 = complex1.exp();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.exp();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.sqrt();
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.I.pow(complex0);
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex0.tanh();
      List<Complex> list0 = complex2.ONE.nthRoot(43);
      Complex complex8 = complex7.pow(complex1);
      List<Complex> list1 = complex8.I.nthRoot(1);
      Complex complex9 = complex6.ZERO.sinh();
      Object object0 = complex8.INF.readResolve();
      boolean boolean0 = complex3.equals(complex6);
      boolean boolean1 = complex0.isNaN();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex3.multiply(complex5);
      Complex complex12 = complex5.conjugate();
      Complex complex13 = complex12.I.negate();
      boolean boolean2 = complex11.isNaN();
      int int0 = complex0.hashCode();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex10.createComplex(0.0, 1746.0);
      Object object1 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.sinh();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.I.exp();
      Complex complex7 = complex5.I.pow(complex1);
      Complex complex8 = complex0.sin();
      double double0 = complex1.ONE.abs();
      Complex complex9 = complex1.ONE.atan();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex5.createComplex(1.0, 1.0);
      Object object0 = complex1.readResolve();
      Complex complex12 = complex5.atan();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex3.INF.divide(complex13);
      double double1 = complex10.getArgument();
      double double2 = complex4.abs();
      double double3 = complex1.abs();
      Complex complex15 = complex0.exp();
      Complex complex16 = complex15.ZERO.exp();
      Complex complex17 = complex16.I.conjugate();
      Object object1 = complex3.readResolve();
      Complex complex18 = complex8.subtract(complex7);
      boolean boolean1 = complex10.isInfinite();
      Complex complex19 = complex6.sin();
      Complex complex20 = complex11.asin();
      Complex complex21 = complex16.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.conjugate();
      Object object0 = complex4.ONE.readResolve();
      int int0 = complex4.INF.hashCode();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex3.divide(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex1.add(complex6);
      Complex complex8 = complex3.conjugate();
      boolean boolean0 = complex4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.INF.conjugate();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.ONE.acos();
      Complex complex7 = complex3.ZERO.asin();
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex4.ONE.tan();
      Complex complex10 = complex0.cosh();
      int int0 = complex10.I.hashCode();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex11.cosh();
      int int1 = complex12.hashCode();
      double double0 = complex3.getImaginary();
      Complex complex13 = complex12.atan();
      Complex complex14 = complex11.divide(complex1);
      Complex complex15 = complex14.NaN.log();
      double double1 = complex12.ONE.getArgument();
      Complex complex16 = complex12.I.divide(complex14);
      Complex complex17 = complex11.pow(complex3);
      Complex complex18 = complex2.I.conjugate();
      Complex complex19 = complex17.NaN.multiply(3381.54203);
      Complex complex20 = complex13.exp();
      List<Complex> list0 = complex12.nthRoot(2285);
      double double2 = complex9.getReal();
      Complex complex21 = complex20.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      int int0 = complex1.INF.hashCode();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex1.ZERO.tanh();
      Object object1 = complex2.INF.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex2.ZERO.negate();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.I.pow(complex4);
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex6.ONE.divide(complex7);
      double double0 = complex0.getImaginary();
      double double1 = complex7.getArgument();
      Complex complex11 = complex9.multiply(Double.NaN);
      double double2 = complex11.getArgument();
      double double3 = complex2.abs();
      Complex complex12 = complex4.exp();
      Complex complex13 = complex2.I.tan();
      double double4 = 0.0;
      try { 
        complex11.NaN.nthRoot((-1092));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,092
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex4.INF.add(complex2);
      List<Complex> list0 = complex3.INF.nthRoot(38);
      Complex complex6 = complex1.tanh();
      List<Complex> list1 = complex6.nthRoot(202);
      Complex complex7 = complex6.pow(complex2);
      Complex complex8 = complex7.ZERO.divide(complex2);
      Complex complex9 = complex3.negate();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex9.cos();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex12 = complex10.sin();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      String string0 = complex0.ZERO.toString();
      boolean boolean0 = complex0.equals("");
      double double0 = complex0.getReal();
      String string1 = complex0.toString();
      Complex complex2 = complex0.log();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.cosh();
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex0.createComplex(420.6996991, Double.NaN);
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex3.tanh();
      Object object1 = complex4.readResolve();
      double double2 = complex3.abs();
      try { 
        complex4.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1945.4988434514826, 1945.4988434514826);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.ONE.acos();
      Complex complex6 = complex0.NaN.add(complex4);
      List<Complex> list0 = complex5.nthRoot(1);
      double double0 = complex0.getArgument();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex8.I.log();
      List<Complex> list1 = complex8.ONE.nthRoot(1);
      Complex complex11 = complex9.I.log();
      Complex complex12 = complex11.I.tan();
      Complex complex13 = complex8.I.multiply(complex0);
      Complex complex14 = complex8.exp();
      double double1 = complex13.getReal();
      boolean boolean0 = complex9.equals("r/ |2J.{$u&^JN1)QJ_");
      Complex complex15 = complex3.log();
      Complex complex16 = complex15.NaN.sin();
      Complex complex17 = complex15.sqrt();
      List<Complex> list2 = complex12.nthRoot(1);
      Complex complex18 = complex5.multiply(complex12);
      Complex complex19 = complex13.sqrt();
      Complex complex20 = complex12.conjugate();
      Complex complex21 = complex12.createComplex((-457.916725), 0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.ONE.atan();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.ZERO.subtract(complex0);
      Complex complex5 = complex4.ONE.log();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.nthRoot((-1481));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,481
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex1.tan();
      String string0 = complex2.toString();
      double double1 = complex2.abs();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.I.multiply(0.0);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.INF.subtract(complex5);
      Complex complex8 = complex6.INF.tanh();
      Complex complex9 = complex1.createComplex(0.0, 0.19999954104423523);
      Complex complex10 = complex9.multiply(complex1);
      double double2 = complex10.INF.abs();
      double double3 = complex10.getImaginary();
      String string1 = complex7.toString();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex9.createComplex(2546.88685395011, (-277.3146));
      List<Complex> list0 = complex8.nthRoot(234);
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.acos();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex3.exp();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(284.8069430668, 284.8069430668);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.multiply(3018.0);
      Complex complex4 = complex2.NaN.pow(complex3);
      Complex complex5 = complex4.ZERO.log();
      List<Complex> list0 = complex3.ZERO.nthRoot(1);
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex6 = complex1.ONE.subtract(complex3);
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.conjugate();
      Object object1 = complex0.I.readResolve();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.divide(complex1);
      Complex complex11 = complex9.sinh();
      Complex complex12 = complex1.asin();
      try { 
        complex12.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.tanh();
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex4.NaN.asin();
      Complex complex8 = complex7.ONE.sqrt();
      Object object1 = complex4.INF.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.getReal();
      boolean boolean1 = complex1.isInfinite();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex0.sqrt();
      double double1 = complex2.getArgument();
      double double2 = complex1.getReal();
      Complex complex11 = complex9.multiply(0.0);
      Object object2 = complex0.readResolve();
      Complex complex12 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3816.8179066262037));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.exp();
      List<Complex> list0 = complex2.I.nthRoot(37);
      double double0 = (-1216.8477567747573);
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = complex1.createComplex((-1216.8477567747573), (-1216.8477567747573));
      double double1 = complex3.abs();
      int int1 = complex0.INF.hashCode();
      double double2 = (-1242.963145079209);
      Complex complex4 = complex1.multiply((-1242.963145079209));
      Complex complex5 = complex0.sqrt();
      int int2 = 0;
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.NaN.log();
      double double0 = complex0.getImaginary();
      Object object0 = complex2.readResolve();
      Complex complex5 = complex2.ONE.tanh();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex5.NaN.tan();
      Complex complex8 = complex7.I.createComplex(4332.382468123, 6.283185307179586);
      double double1 = complex1.I.getArgument();
      boolean boolean0 = complex2.equals(object0);
      boolean boolean1 = complex0.isNaN();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex9.I.tan();
      boolean boolean2 = complex3.isInfinite();
      Complex complex11 = complex3.negate();
      double double2 = complex3.getReal();
      double double3 = complex9.getImaginary();
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex12.subtract(complex4);
      Complex complex14 = complex13.ONE.sin();
      Complex complex15 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      int int0 = complex1.I.hashCode();
      int int1 = complex0.ONE.hashCode();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.ONE.tan();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.tanh();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex6.multiply(complex2);
      Complex complex9 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-983.059));
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex4.NaN.sinh();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.I.sqrt1z();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex0.INF.log();
      Complex complex11 = complex0.INF.log();
      Complex complex12 = complex9.createComplex(Double.POSITIVE_INFINITY, 57.4640603928);
      Complex complex13 = complex2.subtract(complex3);
      Complex complex14 = complex13.ONE.sqrt1z();
      Complex complex15 = complex2.cos();
      boolean boolean0 = complex10.isNaN();
      Complex complex16 = complex3.tan();
      Complex complex17 = complex11.tan();
      Complex complex18 = complex7.tan();
      Complex complex19 = complex18.INF.sinh();
      String string0 = complex8.toString();
      double double0 = complex12.abs();
      Complex complex20 = complex10.sqrt1z();
      Complex complex21 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.createComplex(1.073741824E9, 2081.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ONE.exp();
      double double0 = complex5.getArgument();
      Complex complex6 = complex3.ZERO.conjugate();
      Complex complex7 = complex0.sqrt();
      double double1 = complex7.I.getArgument();
      Complex complex8 = complex7.ONE.atan();
      double double2 = complex3.getReal();
      Complex complex9 = complex5.log();
      Complex complex10 = new Complex((-1649.9868304433926), (-1649.9868304433926));
      Complex complex11 = complex3.divide(complex10);
      Complex complex12 = complex5.sqrt1z();
      double double3 = complex9.getReal();
      double double4 = complex7.abs();
      Object object0 = complex3.readResolve();
      Complex complex13 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.sinh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.cosh();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex2.multiply(1110.75121184);
      Complex complex6 = complex5.asin();
      Object object1 = complex0.ONE.readResolve();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex2.multiply(complex8);
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex3.acos();
      ComplexField complexField1 = complex12.getField();
      double double0 = complex12.getImaginary();
      Complex complex13 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.multiply(complex1);
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-4709.59787079195), 8.0E298);
      Complex complex1 = complex0.ZERO.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.NaN.sinh();
      double double0 = complex4.I.abs();
      Complex complex5 = complex1.multiply((-4709.59787079195));
      Complex complex6 = complex5.ONE.negate();
      double double1 = complex0.getImaginary();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex5.tan();
      Complex complex9 = complex7.log();
      String string0 = complex5.toString();
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex1.negate();
      ComplexField complexField1 = complex10.getField();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.NaN.divide(complex10);
      Complex complex13 = complex7.I.tanh();
      Complex complex14 = complex10.asin();
      Complex complex15 = complex9.asin();
      double double2 = complex15.getReal();
      Complex complex16 = complex12.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex1.ONE.conjugate();
      int int0 = complex2.ONE.hashCode();
      Complex complex5 = complex0.I.conjugate();
      Complex complex6 = complex2.I.cos();
      Complex complex7 = complex6.sqrt1z();
      Object object0 = complex6.ZERO.readResolve();
      double double0 = complex6.getArgument();
      String string0 = complex0.toString();
      double double1 = complex2.getReal();
      Complex complex8 = complex2.pow(complex6);
      Complex complex9 = complex1.sin();
      int int1 = complex3.hashCode();
      Complex complex10 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.ONE.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.pow(complex6);
      double double0 = complex0.getReal();
      Complex complex8 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.INF.asin();
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.INF;
      List<Complex> list0 = complex2.NaN.nthRoot(877);
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex0.sinh();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.ZERO.tanh();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.divide(complex1);
      String string0 = complex3.ZERO.toString();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex2.I.asin();
      ComplexField complexField0 = complex1.getField();
      double double1 = complex4.getArgument();
      boolean boolean0 = complex3.isNaN();
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.INF.createComplex(2.479773539153719E-5, 6.283185307179586);
      int int1 = complex0.hashCode();
      Complex complex4 = complex3.ONE.subtract(complex0);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex5.ZERO.createComplex(0.0, 0.0);
      Complex complex8 = complex5.INF.pow(complex4);
      double double1 = complex8.ONE.getArgument();
      Complex complex9 = complex3.atan();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex5.subtract(complex1);
      int int2 = complex11.INF.hashCode();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex4.sin();
      Complex complex14 = complex13.add(complex11);
      Complex complex15 = complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1070.1668666904695, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.atan();
      double double0 = complex0.getReal();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.multiply(0.0);
      double double1 = complex0.abs();
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.INF.acos();
      boolean boolean0 = complex1.isInfinite();
      double double2 = complex1.getArgument();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666621166, 0.041666666666621166);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.acos();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      List<Complex> list0 = complex0.nthRoot(1537);
      Complex complex1 = new Complex(1.2443546982920806, 1537);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.cos();
      double double0 = complex5.ZERO.abs();
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex1.log();
      Complex complex7 = complex5.log();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex4.add(complex8);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-222.2536204549));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.divide(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex0.sqrt1z();
      ComplexField complexField0 = complex1.INF.getField();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex1.INF.multiply(956.0);
      ComplexField complexField1 = complex3.getField();
      Complex complex8 = complex2.createComplex(347.668, 2340.915);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex5.INF.multiply(complex9);
      Complex complex11 = complex8.INF.pow(complex0);
      Complex complex12 = complex8.ONE.acos();
      double double1 = complex8.abs();
      Complex complex13 = complex6.tan();
      Complex complex14 = complex5.createComplex(0.0, 0.0);
      Complex complex15 = complex4.log();
      Complex complex16 = complex12.add(complex3);
      Complex complex17 = complex16.log();
      Complex complex18 = complex14.conjugate();
      Complex complex19 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = Complex.ONE;
      boolean boolean1 = complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex4.ONE.add(complex3);
      double double0 = complex6.getArgument();
      Complex complex11 = complex9.subtract(complex7);
      Complex complex12 = complex11.I.asin();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.NaN.subtract(complex2);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.NaN.add(complex3);
      Complex complex7 = complex2.INF.multiply(complex1);
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex0.ZERO.asin();
      double double1 = complex4.getArgument();
      Complex complex9 = complex1.I.multiply(0.0);
      Object object0 = complex5.ZERO.readResolve();
      Complex complex10 = complex2.INF.negate();
      int int0 = complex0.INF.hashCode();
      Complex complex11 = complex3.createComplex(0.0, 2496.701);
      Complex complex12 = complex11.atan();
      Complex complex13 = complex2.atan();
      Complex complex14 = complex1.subtract(complex3);
      boolean boolean0 = complex14.isInfinite();
      Complex complex15 = complex14.cos();
      Object object1 = complex2.ONE.readResolve();
      Complex complex16 = complex14.conjugate();
      Complex complex17 = complex16.I.multiply((-0.1666666567325592));
      Complex complex18 = complex1.createComplex(31.25915198242, Double.NaN);
      Complex complex19 = complex14.multiply(complex3);
      double double2 = complex6.abs();
      Complex complex20 = complex6.sqrt1z();
      Complex complex21 = complex14.sin();
      double double3 = complex15.abs();
      Complex complex22 = complex2.conjugate();
      Complex complex23 = complex12.conjugate();
      Complex complex24 = complex23.createComplex(Double.NaN, 620.8);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.I.createComplex((-1157.829514076924), (-1157.829514076924));
      Object object0 = complex3.NaN.readResolve();
      Complex complex5 = complex0.I.conjugate();
      double double0 = complex5.ZERO.abs();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.add(complex2);
      List<Complex> list0 = complex6.I.nthRoot(2312);
      Complex complex7 = complex1.exp();
      ComplexField complexField0 = complex7.I.getField();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex3.exp();
      double double1 = complex8.getArgument();
      Complex complex9 = complex4.createComplex((-1157.829514076924), (-2141.0));
      double double2 = complex7.getArgument();
      Complex complex10 = complex6.createComplex(176.88532523737, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex5.I.conjugate();
      List<Complex> list0 = complex6.I.nthRoot(280);
      Complex complex7 = complex1.pow(complex3);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex7.divide(complex3);
      boolean boolean1 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex5.I.atan();
      int int0 = complex7.ONE.hashCode();
      double double0 = complex7.INF.abs();
      Complex complex8 = complex4.NaN.multiply(complex2);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex4.cosh();
      Complex complex11 = complex10.ONE.sin();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex9.getImaginary();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex11.NaN.negate();
      Complex complex14 = complex9.tan();
      Complex complex15 = complex11.sinh();
      Complex complex16 = complex1.sinh();
      Complex complex17 = complex10.subtract(complex6);
      Complex complex18 = complex4.tanh();
      Complex complex19 = complex1.cos();
      Complex complex20 = complex19.ZERO.multiply(complex13);
      Complex complex21 = Complex.I;
      Complex complex22 = complex16.multiply(complex21);
      Complex complex23 = complex22.NaN.sqrt();
      boolean boolean1 = complex3.isInfinite();
      Complex complex24 = Complex.NaN;
      boolean boolean2 = complex14.equals(complex24);
      Complex complex25 = complex20.sqrt();
      int int1 = complex12.hashCode();
      Complex complex26 = complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.ONE.multiply(complex4);
      Complex complex9 = complex8.ZERO.tanh();
      int int0 = complex4.hashCode();
      Complex complex10 = complex4.INF.multiply(complex5);
      Complex complex11 = complex10.NaN.log();
      int int1 = complex6.hashCode();
      int int2 = complex6.hashCode();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex2.nthRoot(1);
      double double0 = complex2.getArgument();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex12.INF.multiply(complex4);
      double double1 = complex12.ZERO.getArgument();
      double double2 = complex1.getImaginary();
      double double3 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-919.0), (-919.0));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.NaN.cosh();
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex0.ZERO.exp();
      List<Complex> list0 = complex0.nthRoot(88);
      Complex complex5 = complex2.I.createComplex(Double.NaN, Double.NaN);
      String string0 = complex3.toString();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex3.ONE.createComplex((-919.0), Double.NaN);
      Complex complex9 = complex6.multiply(complex0);
      int int0 = complex9.NaN.hashCode();
      Object object0 = complex1.readResolve();
      Object object1 = complex1.readResolve();
      Complex complex10 = complex1.cosh();
      boolean boolean0 = complex7.equals("(NaN, NaN)");
      Complex complex11 = complex0.cos();
      List<Complex> list1 = complex10.nthRoot(88);
      Complex complex12 = complex1.negate();
      Complex complex13 = complex7.asin();
      Complex complex14 = complex2.add(complex3);
  }
}
