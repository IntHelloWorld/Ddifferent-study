/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:31:51 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      Complex complex4 = complex1.I.divide(complex3);
      Complex complex5 = complex1.NaN.multiply(Double.NaN);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.INF.negate();
      try { 
        complex9.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(Double.NaN);
      Complex complex2 = complex1.NaN.divide(complex0);
      int int0 = complex2.ZERO.hashCode();
      int int1 = 1;
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex3 = complex2.ONE.multiply(Double.NaN);
      Complex complex4 = complex3.I.atan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.ZERO.multiply(complex5);
      Complex complex7 = complex6.ZERO.negate();
      try { 
        complex1.INF.nthRoot((-1676));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,676
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-3294.922643565884), (-3294.922643565884));
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.sinh();
      Object object0 = complex3.INF.readResolve();
      Complex complex5 = complex3.INF.multiply((-3294.922643565884));
      Complex complex6 = complex1.NaN.negate();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex5.exp();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex8.I.add(complex3);
      Complex complex10 = complex1.multiply(complex3);
      double double1 = complex10.abs();
      String string1 = complex1.toString();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex3.log();
      Complex complex13 = complex7.negate();
      ComplexField complexField0 = complex13.getField();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-3199.5978241809));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.createComplex((-1.0), Double.NaN);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex4.ONE.subtract(complex0);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex4.add(complex0);
      double double0 = complex1.abs();
      Complex complex9 = complex4.multiply(8.763927660339387);
      double double1 = complex0.getReal();
      Complex complex10 = complex5.sqrt();
      List<Complex> list0 = complex3.I.nthRoot(1);
      Complex complex11 = complex10.NaN.cos();
      Complex complex12 = complex10.INF.log();
      double double2 = complex9.getImaginary();
      int int0 = complex3.hashCode();
      Complex complex13 = complex12.INF.sinh();
      Complex complex14 = complex2.createComplex((-3577.70833), 2672.511991784);
      Complex complex15 = complex14.ONE.tanh();
      Complex complex16 = complex10.pow(complex4);
      Complex complex17 = complex10.negate();
      boolean boolean0 = complex8.isNaN();
      Complex complex18 = complex12.add(complex5);
      double double3 = complex18.ZERO.abs();
      Complex complex19 = complex1.tanh();
      String string0 = complex10.toString();
      Complex complex20 = complex12.cosh();
      Object object0 = complex9.readResolve();
      double double4 = complex12.getReal();
      boolean boolean1 = complex20.equals("(0.7071067811865476, -0.7071067811865475)");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.pow(complex3);
      Complex complex5 = complex0.tan();
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex5.ONE.subtract(complex0);
      int int1 = complex0.ZERO.hashCode();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex5.sqrt1z();
      int int2 = 7;
      List<Complex> list0 = complex8.ONE.nthRoot(7);
      Complex complex9 = complex0.log();
      Complex complex10 = complex5.INF.sqrt1z();
      try { 
        complex9.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      String string0 = complex0.INF.toString();
      double double0 = complex0.getArgument();
      Object object0 = complex1.readResolve();
      double double1 = complex0.getReal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex1.I.conjugate();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex5.ONE.exp();
      Complex complex9 = complex5.NaN.negate();
      Complex complex10 = complex8.I.createComplex(0.99, 0.0);
      boolean boolean0 = complex5.equals(complex0);
      Complex complex11 = complex5.tan();
      boolean boolean1 = complex8.isNaN();
      boolean boolean2 = complex9.isInfinite();
      Complex complex12 = complex6.pow(complex5);
      Complex complex13 = complex5.multiply(complex2);
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex14.tanh();
      double double2 = complex15.getArgument();
      Complex complex16 = complex13.tanh();
      Complex complex17 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-585.951935182), (-4171.0));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      double double0 = complex0.I.getArgument();
      double double1 = complex0.INF.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.ONE.multiply(complex1);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex6.NaN.pow(complex1);
      Complex complex8 = complex0.sin();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex6.INF.createComplex(1.5707963267948966, 0.7853981633974483);
      Complex complex10 = complex7.I.pow(complex9);
      Complex complex11 = complex10.NaN.add(complex0);
      Complex complex12 = complex10.ZERO.sin();
      Complex complex13 = complex12.INF.atan();
      Complex complex14 = complex8.ZERO.acos();
      Complex complex15 = complex14.ONE.divide(complex4);
      Complex complex16 = complex1.add(complex0);
      Complex complex17 = complex9.ONE.atan();
      Complex complex18 = complex16.ONE.exp();
      Complex complex19 = complex18.ONE.multiply(0.0);
      double double2 = complex8.abs();
      boolean boolean1 = complex7.isInfinite();
      Complex complex20 = complex1.tan();
      Complex complex21 = complex9.log();
      Complex complex22 = complex21.log();
      Complex complex23 = complex21.NaN.pow(complex18);
      Complex complex24 = complex4.sqrt1z();
      Complex complex25 = complex7.sqrt1z();
      Object object0 = complex22.readResolve();
      boolean boolean2 = complex24.isNaN();
      boolean boolean3 = complex25.isNaN();
      Object object1 = complex6.readResolve();
      Complex complex26 = complex21.acos();
      Complex complex27 = complex25.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 2210.885);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex3.NaN.divide(complex0);
      double double0 = complex4.NaN.getArgument();
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1062.411544008), 366.62554233);
      Complex complex1 = new Complex(366.62554233, 1262.71601765);
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.acos();
      double double1 = complex2.getReal();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex4.INF.divide(complex5);
      Complex complex9 = complex0.NaN.acos();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex10 = complex1.ONE.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex1.pow(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex0.sin();
      String string0 = complex3.toString();
      boolean boolean1 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.ZERO.multiply(1602.52422547);
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.ZERO.pow(complex1);
      double double0 = complex5.ONE.abs();
      Complex complex7 = complex5.NaN.cos();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.ONE.multiply(complex5);
      double double1 = complex8.ZERO.abs();
      double double2 = complex0.getArgument();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex0.I.add(complex7);
      Complex complex14 = complex7.multiply((-6.032174644509064E-23));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex3.ONE.createComplex(Double.NaN, (-534.899));
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex0.ZERO.multiply(complex5);
      Complex complex8 = complex0.asin();
      Object object0 = complex8.ZERO.readResolve();
      Complex complex9 = complex1.createComplex((-1.0), 0.0);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex0.add(complex10);
      Complex complex12 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      double double0 = complex0.I.getArgument();
      Complex complex2 = Complex.ZERO;
      ComplexField complexField0 = complex2.NaN.getField();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(273.565);
      Complex complex3 = complex0.I.negate();
      String string0 = complex1.I.toString();
      Complex complex4 = complex1.I.pow(complex0);
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex3.I.acos();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex3.log();
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex3.ONE.tanh();
      Complex complex11 = null;
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.createComplex(750.218, 0.0);
      Complex complex4 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex2.cos();
      ComplexField complexField1 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.atan();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.cosh();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.divide(complex3);
      String string0 = complex6.I.toString();
      Complex complex7 = complex5.INF.cosh();
      Complex complex8 = complex1.cosh();
      boolean boolean0 = complex6.equals(complex3);
      Complex complex9 = complex5.subtract(complex1);
      Complex complex10 = complex0.log();
      Complex complex11 = complex2.sin();
      Complex complex12 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex13 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.sqrt();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.NaN.sqrt1z();
      Complex complex6 = complex5.ZERO.divide(complex0);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex7.I.exp();
      Complex complex10 = complex7.NaN.add(complex5);
      Complex complex11 = complex4.sqrt1z();
      double double1 = complex7.getReal();
      Complex complex12 = new Complex((-349.93), Double.POSITIVE_INFINITY);
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-3181.89798), (-3181.89798));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.exp();
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex6.NaN.subtract(complex0);
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex5.exp();
      double double0 = complex0.getReal();
      double double1 = complex1.getReal();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex9.sin();
      Object object0 = complex3.readResolve();
      Complex complex13 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      double double1 = (-4319.230560666175);
      double double2 = complex0.INF.abs();
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-899.8204886), (-899.8204886));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.I.createComplex((-899.8204886), (-899.8204886));
      double double0 = complex0.abs();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.NaN.createComplex(136.34, (-899.8204886));
      String string0 = complex4.toString();
      int int0 = (-615);
      try { 
        complex2.nthRoot((-615));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -615
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.INF.nthRoot(3241);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-65.294186941734), Double.NaN);
      Complex complex2 = complex0.INF.divide(complex1);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.divide(complex0);
      int int0 = complex4.I.hashCode();
      try { 
        complex3.nthRoot((-739));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -739
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex4.ONE.sin();
      double double1 = complex0.ONE.getArgument();
      Complex complex6 = complex0.multiply(6.283185307179586);
      boolean boolean0 = complex6.isInfinite();
      Complex complex7 = complex3.ONE.subtract(complex1);
      Complex complex8 = complex3.sinh();
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex8.NaN.add(complex3);
      double double2 = complex0.getReal();
      Complex complex10 = complex4.tan();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex11.I.multiply((-424.69536722));
      Complex complex13 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = new Complex(1.25, 1.25);
      Complex complex2 = complex1.I.multiply((-0.33333333333333287));
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex1.ONE.multiply(complex4);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-864.1505), 0.04168701738764507);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.cos();
      double double1 = complex1.I.abs();
      Complex complex2 = complex1.sin();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex1.INF.pow(complex0);
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex5.sqrt();
      String string0 = complex7.ONE.toString();
      Complex complex9 = complex1.add(complex2);
      double double0 = complex9.ONE.getArgument();
      boolean boolean0 = complex6.isNaN();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.ZERO.cosh();
      Complex complex12 = complex5.subtract(complex7);
      Complex complex13 = complex10.ONE.acos();
      Complex complex14 = complex5.NaN.log();
      Complex complex15 = complex14.I.sinh();
      Complex complex16 = complex0.tan();
      // Undeclared exception!
      try { 
        complex10.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.createComplex((-1587.86066623), (-1587.86066623));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex3.INF.sinh();
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex7.INF.cosh();
      List<Complex> list0 = complex8.NaN.nthRoot(267);
      ComplexField complexField0 = complex6.getField();
      String string0 = complex6.toString();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex5.I.add(complex1);
      List<Complex> list1 = complex1.nthRoot(212);
      Object object1 = complex0.readResolve();
      Complex complex10 = complex3.pow(complex5);
      Complex complex11 = complex5.NaN.cosh();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex12.NaN.add(complex6);
      Complex complex14 = complex13.ONE.exp();
      Complex complex15 = complex1.log();
      Complex complex16 = complex15.INF.sinh();
      Complex complex17 = complex5.ZERO.multiply((-3246.1));
      boolean boolean0 = complex12.isNaN();
      double double1 = complex3.getReal();
      Object object2 = complex5.readResolve();
      Complex complex18 = complex3.divide(complex9);
      Complex complex19 = complex14.asin();
      Complex complex20 = complex12.conjugate();
      Object object3 = new Object();
      boolean boolean1 = complex7.equals(object3);
      Complex complex21 = complex10.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.multiply((-1802.72));
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.log();
      int int0 = complex5.hashCode();
      Complex complex7 = complex0.I.asin();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex1.multiply(complex3);
      String string0 = complex0.toString();
      Complex complex9 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-2567.461879831215));
      double double0 = complex0.getArgument();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex3.INF.add(complex0);
      Complex complex6 = complex3.tan();
      double double2 = complex2.getImaginary();
      Complex complex7 = complex0.asin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex10.log();
      double double3 = complex2.getReal();
      double double4 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.sinh();
      String string0 = complex0.toString();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex2.createComplex(1.570796251296997, (-1128.419));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-4639.208485546053));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.asin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex3.ZERO.cos();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex7 = complex3.multiply(complex1);
      ComplexField complexField1 = complex7.getField();
      Complex complex8 = complex6.add(complex1);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex5.log();
      double double0 = complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(645.117748393, 0.1538461446762085);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.INF.multiply(0.2857142686843872);
      String string0 = complex1.toString();
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex0.NaN.atan();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex5.ZERO.add(complex2);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex3.sqrt();
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex11.hashCode();
      Complex complex12 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(2760.337852807397, (-538.087073409));
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.createComplex((-198.7998855421287), 2.0);
      Complex complex5 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.I.pow(complex2);
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.sin();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.divide(complex0);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-977.47609), 0.0);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-6.663542893624021E-14), 6.123233995736766E-17);
      Complex complex1 = new Complex(6.123233995736766E-17, 0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      double double0 = complex0.NaN.getArgument();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.NaN.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.multiply(0.0);
      double double1 = complex0.getReal();
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex1.createComplex(0.11764700710773468, 0.0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.NaN.createComplex(0.0, 0.0);
      double double0 = complex4.getArgument();
      try { 
        complex4.nthRoot((-1356));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,356
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.ZERO.tan();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.ONE.sin();
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex3.subtract(complex4);
      double double1 = complex0.getArgument();
      double double2 = complex1.getArgument();
      Complex complex7 = complex6.sqrt();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.negate();
      ComplexField complexField0 = complex0.ZERO.getField();
      int int0 = 0;
      try { 
        complex2.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex0.ONE.atan();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.divide(complex3);
      int int0 = complex7.hashCode();
      Complex complex9 = complex8.multiply(3261.071702);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.I.multiply(complex4);
      List<Complex> list0 = complex5.NaN.nthRoot(7);
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.pow(complex7);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex9 = complex5.INF.asin();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex10.NaN.exp();
      boolean boolean1 = complex8.isInfinite();
      double double1 = complex8.abs();
      Complex complex12 = complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.sin();
      List<Complex> list0 = complex1.NaN.nthRoot(37);
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex1.ZERO.negate();
      double double1 = complex2.abs();
      boolean boolean0 = complex1.equals(complex2);
      double double2 = complex4.abs();
      Complex complex7 = complex2.atan();
      double double3 = complex4.getArgument();
      double double4 = complex1.getImaginary();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex3.log();
      double double5 = complex3.getImaginary();
      boolean boolean1 = complex7.isNaN();
      ComplexField complexField0 = complex7.getField();
      double double6 = complex7.getReal();
      Complex complex10 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      String string0 = complex0.toString();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.ONE.subtract(complex1);
      double double0 = complex2.I.abs();
      Complex complex4 = complex0.ONE.divide(complex2);
      Complex complex5 = complex3.ZERO.atan();
      Complex complex6 = complex2.NaN.sqrt1z();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex4.I.sinh();
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex9 = complex4.NaN.pow(complex2);
      Complex complex10 = complex9.INF.sqrt();
      try { 
        complex0.nthRoot((-2882));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,882
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.ZERO.divide(complex0);
      double double0 = complex0.abs();
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex5.I.asin();
      boolean boolean0 = complex2.equals(complexField0);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex2.ZERO.cos();
      double double1 = complex2.getReal();
      Complex complex11 = complex1.cosh();
      double double2 = complex1.abs();
      Complex complex12 = complex2.createComplex(1.9699272335463627E-8, 1.5430806348152437);
      int int0 = complex0.hashCode();
      Complex complex13 = complex12.sinh();
      double double3 = complex1.getArgument();
      String string0 = complex6.toString();
      Complex complex14 = complex12.cosh();
      Complex complex15 = complex0.multiply(0.0);
      Complex complex16 = complex5.divide(complex1);
      Object object0 = complex4.readResolve();
      Complex complex17 = complex3.multiply((-1.0));
      Complex complex18 = complex15.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-4078.8367773071714), (-4078.8367773071714));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = new Complex((-4078.8367773071714), (-1419.75657));
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.createComplex(0.0, 1.625);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ONE.multiply((-1419.75657));
      int int0 = complex4.I.hashCode();
      Complex complex6 = complex4.NaN.multiply(0.0);
      double double0 = complex0.getArgument();
      boolean boolean1 = complex0.isNaN();
      boolean boolean2 = complex3.isNaN();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex1.NaN.negate();
      Complex complex9 = complex7.INF.negate();
      List<Complex> list0 = complex7.ZERO.nthRoot(17);
      List<Complex> list1 = complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.atan();
      ComplexField complexField1 = complex2.I.getField();
      Complex complex3 = complex2.exp();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.divide(complex2);
      String string0 = complex4.I.toString();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex6.tanh();
      double double1 = complex1.getArgument();
      Complex complex8 = complex0.I.conjugate();
      Complex complex9 = complex5.INF.atan();
      Complex complex10 = Complex.ONE;
      boolean boolean0 = complex1.equals(complex10);
      Complex complex11 = complex9.negate();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex8.conjugate();
      double double2 = complex7.abs();
      Complex complex14 = complex11.sin();
      Complex complex15 = complex14.INF.negate();
      ComplexField complexField2 = complex4.getField();
      Complex complex16 = complex7.acos();
      boolean boolean1 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1696.35855436);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex5.ONE.createComplex(1696.35855436, 0.0);
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.ZERO.atan();
      Object object0 = complex2.INF.readResolve();
      Complex complex11 = complex9.NaN.exp();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex7.sinh();
      Complex complex14 = complex12.cos();
      Complex complex15 = complex14.NaN.subtract(complex5);
      Complex complex16 = complex4.negate();
      Complex complex17 = complex10.cos();
      ComplexField complexField0 = complex17.getField();
      Complex complex18 = complex14.exp();
      Complex complex19 = complex18.NaN.sin();
      Object object1 = complex19.INF.readResolve();
      ComplexField complexField1 = complex6.getField();
      Complex complex20 = complex14.multiply(complex18);
      double double0 = complex20.getArgument();
      Complex complex21 = complex20.I.sqrt1z();
      Complex complex22 = complex14.multiply(1696.35855436);
      double double1 = complex9.getImaginary();
      Complex complex23 = complex4.tan();
      Complex complex24 = complex12.sqrt1z();
      int int0 = complex24.ZERO.hashCode();
      boolean boolean0 = complex20.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.INF.sinh();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex0.createComplex(0.0, 0.0);
      Complex complex10 = complex1.add(complex6);
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex9.createComplex(0.0, 0.0);
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex3.add(complex0);
      String string0 = complex3.toString();
      Complex complex7 = complex6.sin();
      boolean boolean0 = complex6.equals("(NaN, NaN)");
      Complex complex8 = complex6.log();
      Complex complex9 = complex4.asin();
      boolean boolean1 = complex6.equals(complex9);
      double double0 = complex8.getReal();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.INF.sqrt1z();
      Complex complex12 = complex9.add(complex10);
      Complex complex13 = complex2.multiply(complex3);
      Complex complex14 = complex9.log();
      Complex complex15 = complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.08713622391223907, 0.08713622391223907);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cosh();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.conjugate();
      List<Complex> list0 = complex2.nthRoot(7);
  }
}
