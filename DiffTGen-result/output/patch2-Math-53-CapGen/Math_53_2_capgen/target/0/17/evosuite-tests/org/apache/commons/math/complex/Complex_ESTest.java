/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:31:57 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex0.I.pow(complex1);
      String string0 = complex4.toString();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.asin();
      double double1 = complex0.getArgument();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.divide(complex6);
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.add(complex9);
      Complex complex11 = complex10.ZERO.cosh();
      Complex complex12 = Complex.I;
      Complex complex13 = complex10.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.createComplex(2029.0172258701614, (-1350.954062));
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex3.sqrt();
      Complex complex12 = Complex.ZERO;
      Object object0 = complex12.readResolve();
      boolean boolean0 = complex7.equals(object0);
      double double0 = complex11.getArgument();
      double double1 = complex12.abs();
      double double2 = complex9.abs();
      double double3 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(460.443707, 460.443707);
      Complex complex1 = complex0.ONE.createComplex(460.443707, 460.443707);
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = complex2.conjugate();
      double double0 = complex7.getImaginary();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.cosh();
      ComplexField complexField0 = complex9.I.getField();
      Complex complex12 = complex11.multiply(Double.NaN);
      Complex complex13 = complex12.ZERO.cos();
      Complex complex14 = complex0.cosh();
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = new Complex(0.0, 1020.076267076);
      Complex complex2 = complex0.INF.multiply(complex1);
      List<Complex> list0 = complex2.INF.nthRoot(37);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.ONE.tan();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex3.ONE.pow(complex2);
      List<Complex> list1 = complex6.INF.nthRoot(1);
      Complex complex7 = complex0.createComplex(2012.90783, 2012.90783);
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex1.divide(complex0);
      Complex complex10 = complex9.subtract(complex7);
      Complex complex11 = complex1.log();
      Complex complex12 = complex7.ZERO.tanh();
      Complex complex13 = complex7.cos();
      ComplexField complexField0 = complex10.getField();
      Complex complex14 = complex10.log();
      Complex complex15 = complex14.I.pow(complex10);
      Complex complex16 = complex7.asin();
      Complex complex17 = complex16.NaN.subtract(complex8);
      Complex complex18 = complex16.sinh();
      Complex complex19 = complex12.multiply(complex3);
      Complex complex20 = complex2.acos();
      double double1 = complex8.getReal();
      Complex complex21 = complex13.sqrt1z();
      Complex complex22 = Complex.ONE;
      Complex complex23 = complex5.multiply(complex22);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.ONE.divide(complex7);
      Object object0 = complex4.readResolve();
      Complex complex9 = complex1.ONE.acos();
      double double0 = complex1.abs();
      String string0 = complex4.toString();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex4.I.tan();
      Complex complex12 = complex11.ZERO.createComplex(1.0, 0.0);
      Complex complex13 = complex3.NaN.negate();
      Complex complex14 = complex2.subtract(complex10);
      Complex complex15 = complex14.acos();
      double double1 = complex4.abs();
      Complex complex16 = complex1.INF.sinh();
      Complex complex17 = complex4.INF.createComplex((-3594.187), 5247.31484);
      Complex complex18 = complex17.ONE.sqrt();
      Complex complex19 = complex1.sqrt();
      Complex complex20 = complex19.ONE.pow(complex4);
      double double2 = complex20.ONE.abs();
      ComplexField complexField0 = complex3.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex21 = complex9.cos();
      Complex complex22 = complex16.sqrt1z();
      Complex complex23 = complex13.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.conjugate();
      // Undeclared exception!
      try { 
        complex3.I.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.negate();
      double double1 = complex2.getArgument();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex2.createComplex(4280.812212935857, 4280.812212935857);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.I.log();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex5.createComplex(4280.812212935857, (-1361.068566607));
      double double2 = complex4.getArgument();
      Complex complex10 = complex1.multiply(7.0);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex10.conjugate();
      boolean boolean1 = complex5.isNaN();
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1165.566, 1165.566);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.multiply(1165.566);
      Complex complex6 = complex2.ZERO.conjugate();
      boolean boolean0 = complex0.equals("");
      Complex complex7 = complex3.sin();
      Complex complex8 = complex3.add(complex1);
      Complex complex9 = complex8.tan();
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex10.ZERO.createComplex(1165.566, 1165.566);
      boolean boolean1 = complex3.isInfinite();
      double double0 = complex10.abs();
      Complex complex12 = complex1.sqrt1z();
      double double1 = complex12.ZERO.getArgument();
      Complex complex13 = complex11.sin();
      List<Complex> list0 = complex13.NaN.nthRoot(1022);
      Complex complex14 = complex13.sinh();
      Complex complex15 = complex6.createComplex(Double.NaN, 0.0);
      Complex complex16 = complex6.exp();
      double double2 = complex5.abs();
      double double3 = complex3.getReal();
      Complex complex17 = complex10.exp();
      Complex complex18 = complex17.negate();
      Complex complex19 = complex16.createComplex(Double.NaN, 1165.566);
      Complex complex20 = complex19.NaN.add(complex7);
      Complex complex21 = complex9.cosh();
      Complex complex22 = complex6.sin();
      Complex complex23 = complex18.sqrt1z();
      Complex complex24 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.NaN.createComplex((-2946.278079955), 0.0);
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = new Complex((-1805.60963935795), (-1805.60963935795));
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex5.NaN.tan();
      Complex complex8 = complex5.NaN.negate();
      List<Complex> list0 = complex6.ZERO.nthRoot(2000);
      String string0 = complex0.INF.toString();
      boolean boolean0 = complex0.equals(complex5);
      Complex complex9 = complex0.conjugate();
      String string1 = complex5.toString();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex9.negate();
      Complex complex13 = complex12.ONE.atan();
      boolean boolean1 = complex5.isInfinite();
      Complex complex14 = complex13.sqrt1z();
      int int0 = complex14.ZERO.hashCode();
      Complex complex15 = complex14.I.exp();
      Complex complex16 = complex15.ONE.multiply(complex3);
      Complex complex17 = complex3.asin();
      Complex complex18 = complex17.conjugate();
      Complex complex19 = complex9.createComplex(Double.NaN, (-3072.706885));
      int int1 = complex7.hashCode();
      Complex complex20 = complex8.createComplex(Double.NaN, (-1805.60963935795));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex((-653.781655), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.tan();
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      try { 
        complex3.INF.nthRoot((-808));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -808
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(58.96554171, 58.96554171);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.createComplex(58.96554171, 58.96554171);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.INF.createComplex(2.0, 58.96554171);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex3.I.sqrt();
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex7.I.acos();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex1.ZERO.add(complex0);
      Complex complex13 = complex12.asin();
      Complex complex14 = complex12.ONE.log();
      Complex complex15 = complex12.NaN.log();
      Complex complex16 = complex15.ONE.acos();
      Complex complex17 = complex16.acos();
      double double0 = complex12.ONE.getArgument();
      List<Complex> list0 = complex12.ONE.nthRoot(279);
      int int0 = complex1.ONE.hashCode();
      String string0 = complex12.ZERO.toString();
      Complex complex18 = complex1.atan();
      Complex complex19 = complex18.INF.cosh();
      Complex complex20 = complex18.ONE.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex21 = complex1.tan();
      ComplexField complexField0 = complex12.getField();
      Complex complex22 = complex6.negate();
      double double1 = complex16.getReal();
      Complex complex23 = complex19.NaN.sqrt1z();
      Complex complex24 = complex17.sinh();
      Complex complex25 = complex12.pow(complex24);
      Complex complex26 = complex4.acos();
      Complex complex27 = complex19.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.I.createComplex((-1070.7264425756741), (-204.1893084078));
      Complex complex4 = complex3.acos();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex5.ONE.add(complex3);
      Object object0 = complex6.INF.readResolve();
      Complex complex7 = complex1.NaN.sqrt1z();
      Complex complex8 = complex7.I.exp();
      double double1 = complex0.getReal();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex1.cosh();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex10.ONE.tanh();
      Complex complex13 = complex3.asin();
      Complex complex14 = complex8.divide(complex10);
      String string0 = complex6.toString();
      boolean boolean1 = complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.tanh();
      double double0 = complex5.getArgument();
      Complex complex7 = complex5.INF.pow(complex1);
      Complex complex8 = complex5.NaN.cosh();
      Complex complex9 = complex5.multiply(complex2);
      Complex complex10 = complex5.cos();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(634.48604683, 5180.6492898);
      Complex complex2 = complex0.ONE.multiply(0.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.ONE.multiply(complex2);
      Complex complex4 = complex2.ONE.subtract(complex1);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.ZERO.sin();
      Object object1 = complex6.readResolve();
      Complex complex8 = complex7.NaN.multiply(complex6);
      Complex complex9 = complex6.acos();
      Complex complex10 = complex2.createComplex(1613.24, 6.283185307179586);
      Complex complex11 = complex2.multiply((-1564.292));
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex12.I.multiply((-4032.312998269274));
      String string0 = complex10.ZERO.toString();
      Complex complex14 = complex2.negate();
      Complex complex15 = complex14.I.tan();
      Complex complex16 = complex7.sqrt();
      Complex complex17 = complex16.tanh();
      Complex complex18 = complex17.I.cosh();
      Complex complex19 = complex4.negate();
      Complex complex20 = complex0.cos();
      Complex complex21 = complex7.asin();
      Complex complex22 = complex14.tanh();
      boolean boolean0 = complex6.equals("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ZERO.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex2.I.pow(complex3);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex6.add(complex2);
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      double double0 = complex1.INF.abs();
      double double1 = complex0.I.abs();
      Complex complex3 = complex0.sqrt();
      double double2 = complex1.NaN.abs();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex4.pow(complex3);
      Complex complex7 = complex6.ONE.multiply(complex4);
      Complex complex8 = complex4.ZERO.divide(complex6);
      Complex complex9 = complex5.ONE.tan();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex10 = complex0.pow(complex3);
      Object object0 = complex4.readResolve();
      Complex complex11 = complex0.createComplex(0.4342944622039795, 0.4342944622039795);
      Complex complex12 = complex1.createComplex(Double.POSITIVE_INFINITY, 0.4342944622039795);
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex11.pow(complex13);
      Complex complex15 = complex0.exp();
      Complex complex16 = complex0.tan();
      Complex complex17 = complex5.tan();
      Complex complex18 = complex9.atan();
      Complex complex19 = complex5.conjugate();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tan();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.exp();
      ComplexField complexField1 = complex5.NaN.getField();
      Complex complex6 = complex1.sin();
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex6.ZERO.sinh();
      Complex complex10 = complex3.add(complex6);
      Complex complex11 = complex0.INF.sqrt();
      Complex complex12 = complex3.I.tanh();
      Complex complex13 = complex12.ZERO.sqrt1z();
      ComplexField complexField2 = complex6.INF.getField();
      Complex complex14 = complex10.ZERO.pow(complex0);
      int int0 = complex12.ZERO.hashCode();
      Complex complex15 = complex10.ZERO.createComplex(1.375, (-687.9320993339967));
      Complex complex16 = complex3.sqrt();
      Complex complex17 = complex3.cos();
      int int1 = complex17.NaN.hashCode();
      Complex complex18 = complex16.exp();
      Complex complex19 = complex16.log();
      Complex complex20 = complex19.ONE.conjugate();
      Complex complex21 = complex11.sinh();
      Complex complex22 = complex16.tan();
      Complex complex23 = complex13.sin();
      String string0 = complex0.toString();
      double double1 = complex11.abs();
      Complex complex24 = complex4.conjugate();
      try { 
        complex22.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(3174.69);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.I.exp();
      List<Complex> list0 = complex3.INF.nthRoot(1);
      double double0 = complex0.getReal();
      Complex complex4 = complex0.multiply(1.0);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex2.ONE.tanh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex4.tan();
      boolean boolean0 = complex4.equals(complex7);
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.INF.subtract(complex5);
      Complex complex11 = complex9.I.atan();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex7.sqrt();
      double double1 = complex2.getArgument();
      Complex complex14 = complex8.sinh();
      int int0 = complex14.I.hashCode();
      Complex complex15 = complex5.negate();
      Complex complex16 = complex9.exp();
      boolean boolean1 = complex12.isNaN();
      Complex complex17 = complex2.cosh();
      String string0 = complex11.toString();
      try { 
        complex13.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1331.35, 1331.35);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, (-755.477021147));
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex0.multiply(5226.47790763);
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex3.atan();
      Complex complex10 = complex9.INF.atan();
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex9.cosh();
      double double0 = complex3.getArgument();
      List<Complex> list0 = complex13.nthRoot(921);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-741.3489), (-741.3489));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.ZERO.createComplex((-172.3648845505), Double.NaN);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex4.ZERO.sin();
      double double0 = complex1.abs();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.INF.divide(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      double double1 = complex0.abs();
      Complex complex9 = complex2.conjugate();
      Object object0 = complex9.readResolve();
      try { 
        complex1.INF.nthRoot((-811));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -811
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.createComplex(Double.NaN, (-3447.715077232));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.ZERO.sinh();
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex3.divide(complex4);
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex1.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.ZERO.multiply((-1301.197914058));
      Object object0 = complex11.readResolve();
      double double1 = complex7.abs();
      Complex complex13 = complex3.ONE.log();
      Complex complex14 = complex13.I.tanh();
      ComplexField complexField0 = complex2.getField();
      Complex complex15 = complex3.createComplex(2097.5, (-667.556285034593));
      Complex complex16 = complex8.sqrt1z();
      Complex complex17 = complex7.log();
      Complex complex18 = complex7.sqrt1z();
      Complex complex19 = complex0.conjugate();
      Complex complex20 = complex16.tanh();
      String string1 = complex5.toString();
      int int0 = complex3.hashCode();
      Complex complex21 = new Complex(861.4159014657836, (-1301.197914058));
      Complex complex22 = complex20.add(complex21);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.createComplex((-869.891), (-2003.9953));
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.INF.multiply(complex2);
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex6.INF.cosh();
      Complex complex9 = complex6.ZERO.log();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex6.I.add(complex1);
      int int0 = complex1.ZERO.hashCode();
      ComplexField complexField0 = complex6.getField();
      double double0 = complex5.getReal();
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = complex1.pow(complex8);
      Complex complex15 = complex6.cos();
      Complex complex16 = complex9.pow(complex3);
      Complex complex17 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.multiply(9.219544613762692E-9);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.sinh();
      double double0 = complex3.ZERO.abs();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.ONE.divide(complex1);
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.NaN.divide(complex7);
      Complex complex9 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex10.INF.add(complex0);
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex9.INF.tanh();
      Complex complex14 = complex1.cos();
      boolean boolean0 = complex9.isInfinite();
      Complex complex15 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.exp();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex0.cos();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(825.5590634, 825.5590634);
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.INF.tan();
      double double1 = complex0.abs();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.I.sin();
      List<Complex> list0 = complex5.NaN.nthRoot(1042);
      Object object0 = complex5.readResolve();
      Complex complex7 = complex4.createComplex(Double.POSITIVE_INFINITY, 0.7853981633974483);
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.I.add(complex3);
      Complex complex6 = complex0.tan();
      double double0 = complex6.I.abs();
      double double1 = complex5.getImaginary();
      Complex complex7 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(2055.86176165, 113.33934430557);
      Complex complex1 = Complex.I;
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.createComplex(3681.80182, 3681.80182);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.I.createComplex(0.0, 3681.80182);
      Complex complex6 = complex5.NaN.sinh();
      int int0 = complex2.hashCode();
      Complex complex7 = complex2.pow(complex3);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex7.ZERO.getArgument();
      Complex complex8 = complex7.ONE.asin();
      boolean boolean0 = complex2.equals(complex7);
      Complex complex9 = complex7.multiply(complex0);
      Complex complex10 = complex9.NaN.createComplex(0.0, 0.0);
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = Complex.I;
      Complex complex14 = complex13.NaN.sqrt();
      Complex complex15 = complex13.INF.divide(complex4);
      Complex complex16 = complex14.ONE.tan();
      Complex complex17 = complex1.add(complex13);
      Complex complex18 = complex6.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.I.nthRoot(64);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.sin();
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.tanh();
      Object object0 = complex0.ZERO.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.ZERO.negate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex0.tanh();
      double double0 = complex6.I.abs();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.sinh();
      boolean boolean0 = complex0.equals(complex1);
      try { 
        complex1.NaN.nthRoot((-3662));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,662
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.INF.cosh();
      String string0 = complex4.ZERO.toString();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex6.ONE.asin();
      String string1 = complex1.toString();
      Complex complex8 = Complex.NaN;
      boolean boolean0 = complex2.equals(complex8);
      Object object1 = complex4.readResolve();
      boolean boolean1 = complex2.equals(object1);
      Complex complex9 = complex3.createComplex((-350.0), 0.07490822288864472);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex4.subtract(complex10);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex10.ONE.createComplex((-350.0), 1.0);
      Complex complex14 = complex9.multiply((-350.0));
      Complex complex15 = complex11.tan();
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.ZERO.createComplex((-1886.8764364), 1.01);
      Complex complex4 = complex1.INF.multiply(6.283185307179586);
      String string0 = complex4.toString();
      try { 
        complex4.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.tanh();
      double double0 = complex0.abs();
      Complex complex3 = complex2.sin();
      List<Complex> list0 = complex3.INF.nthRoot(227);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex4.NaN.pow(complex1);
      double double1 = complex4.ONE.abs();
      Complex complex7 = complex3.NaN.negate();
      Complex complex8 = complex3.ONE.multiply(complex0);
      int int0 = complex5.ONE.hashCode();
      Complex complex9 = complex0.pow(complex1);
      double double2 = complex9.NaN.abs();
      double double3 = complex5.getReal();
      double double4 = complex4.abs();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex5.subtract(complex0);
      Complex complex12 = complex1.acos();
      double double5 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2684.0), (-2684.0));
      Complex complex1 = complex0.INF.log();
      String string0 = complex0.I.toString();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.I.exp();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex0.createComplex(1115.7985769792, 1115.7985769792);
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex3.ZERO.divide(complex0);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex2.ZERO.exp();
      String string1 = complex7.ONE.toString();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex2.acos();
      Complex complex12 = complex10.INF.sin();
      Complex complex13 = complex2.conjugate();
      boolean boolean0 = complex0.equals(complex9);
      Complex complex14 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.I.multiply(733.0438932);
      Complex complex3 = complex0.INF.acos();
      List<Complex> list0 = complex3.ZERO.nthRoot(2073);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.ONE.getArgument();
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.sin();
      ComplexField complexField0 = complex0.I.getField();
      ComplexField complexField1 = complex5.ONE.getField();
      ComplexField complexField2 = complex4.getField();
      Complex complex6 = complex1.exp();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.036);
      Complex complex1 = new Complex(0.036, 0.036);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex0.createComplex(0.0, 0.036);
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1334.218477314135), (-1806.792273302965));
      Complex complex2 = complex0.NaN.multiply((-1334.218477314135));
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.I.tan();
      Complex complex6 = complex4.NaN.cos();
      double double0 = complex4.getReal();
      Complex complex7 = complex4.INF.acos();
      Complex complex8 = new Complex((-1334.218477314135), (-1806.792273302965));
      Complex complex9 = complex7.I.add(complex8);
      double double1 = complex1.NaN.abs();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex10.ZERO.pow(complex3);
      Complex complex12 = complex0.pow(complex4);
      Complex complex13 = complex1.subtract(complex12);
      Complex complex14 = complex1.cos();
      int int0 = complex14.ONE.hashCode();
      String string0 = complex14.ZERO.toString();
      Object object0 = complex3.readResolve();
      int int1 = complex6.hashCode();
      Complex complex15 = complex13.cos();
      Complex complex16 = complex6.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-807.52923), (-2959.3814048));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.ZERO.divide(complex1);
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex6.tan();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex2.sin();
      double double1 = complex0.abs();
      Complex complex9 = complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.multiply(1.0);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.INF.divide(complex4);
      Complex complex6 = complex3.ZERO.add(complex1);
      Complex complex7 = complex2.subtract(complex3);
      Complex complex8 = complex2.conjugate();
      int int0 = complex0.hashCode();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = Complex.I;
      Complex complex14 = complex1.add(complex13);
      boolean boolean0 = complex13.isInfinite();
      Complex complex15 = complex14.INF.asin();
      Object object0 = complex14.ZERO.readResolve();
      Complex complex16 = complex14.tanh();
      Complex complex17 = complex16.tanh();
      Complex complex18 = complex17.cosh();
      Complex complex19 = complex16.cos();
      Complex complex20 = complex10.NaN.exp();
      Complex complex21 = complex11.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex22 = complex21.INF.sinh();
      Complex complex23 = complex10.tan();
      Complex complex24 = complex16.cosh();
      double double0 = complex14.getArgument();
      List<Complex> list0 = complex14.nthRoot(217);
      Complex complex25 = complex19.sinh();
      try { 
        complex19.nthRoot((-108));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -108
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex0.I.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.I.divide(complex3);
      double double1 = complex1.getImaginary();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.tan();
      double double0 = complex3.getImaginary();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex6.INF.cos();
      boolean boolean0 = complex5.isNaN();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex6.divide(complex0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex10 = complex9.createComplex(6.283185307179586, 0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.sqrt();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex3.ZERO.acos();
      List<Complex> list0 = complex6.ONE.nthRoot(1);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.ONE.pow(complex4);
      Complex complex9 = complex3.ONE.multiply((-453.5485));
      Complex complex10 = complex9.ONE.pow(complex3);
      Complex complex11 = complex3.cos();
      Complex complex12 = complex9.negate();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex0.cos();
      Complex complex15 = complex4.divide(complex3);
      boolean boolean0 = complex2.equals(complex5);
      double double0 = complex3.abs();
      Complex complex16 = complex1.atan();
      Complex complex17 = complex7.asin();
      Complex complex18 = complex5.pow(complex7);
      String string1 = complex4.toString();
      Complex complex19 = complex16.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      String string0 = complex0.INF.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.ZERO.subtract(complex4);
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex4.ZERO.divide(complex5);
      boolean boolean1 = complex0.isNaN();
      Complex complex8 = complex5.add(complex0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      int int0 = complex1.NaN.hashCode();
      int int1 = complex0.hashCode();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex1.createComplex(0.0, 0.0);
      Complex complex7 = complex6.subtract(complex1);
      Complex complex8 = complex7.INF.sin();
      int int2 = 54;
      Complex complex9 = complex6.I.sqrt1z();
      try { 
        complex6.I.nthRoot((-2126));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,126
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-2060.426457524573), 928.29);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.exp();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.pow(complex7);
      Complex complex9 = complex8.ONE.pow(complex3);
      Complex complex10 = complex9.log();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex11.ONE.sinh();
      double double1 = complex5.getImaginary();
      Complex complex13 = complex5.createComplex(1738.0, 1.817653038558953E-4);
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex2.createComplex(1738.0, 0.0);
      boolean boolean0 = complex13.equals(complex15);
      Complex complex16 = complex1.log();
      Complex complex17 = complex16.ONE.atan();
      double double2 = complex16.getImaginary();
      Object object0 = complex7.readResolve();
      Complex complex18 = complex12.cosh();
      String string0 = complex5.toString();
      Complex complex19 = complex4.tanh();
      Complex complex20 = complex2.tanh();
      Complex complex21 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.log();
      double double0 = complex0.ONE.abs();
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.sqrt1z();
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = complex2.multiply(1.0);
      Complex complex9 = complex7.I.cosh();
      Complex complex10 = complex6.I.tanh();
      Complex complex11 = complex10.NaN.multiply(complex2);
      double double1 = complex5.getImaginary();
      Complex complex12 = complex0.sqrt();
      double double2 = complex2.abs();
      Complex complex13 = complex7.divide(complex5);
      int int0 = complex0.hashCode();
      Complex complex14 = complex1.asin();
      Complex complex15 = complex14.NaN.tan();
      double double3 = complex5.abs();
      Complex complex16 = complex13.add(complex12);
      Complex complex17 = complex1.sinh();
      Complex complex18 = complex0.log();
      ComplexField complexField0 = complex15.getField();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex0.createComplex((-1901.0), (-1901.0));
      List<Complex> list0 = complex4.ZERO.nthRoot(257);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.exp();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex8 = complex7.createComplex((-1567.0), 3863.12508695);
      ComplexField complexField1 = complex7.getField();
      Complex complex9 = complex7.NaN.createComplex(0.2857142686843872, 0.0);
      double double0 = complex9.ONE.abs();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex10.NaN.log();
      boolean boolean0 = complex7.isNaN();
      Complex complex12 = complex8.log();
      double double1 = complex0.getImaginary();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex8.sqrt();
      int int0 = complex14.I.hashCode();
      Complex complex15 = complex3.exp();
      Complex complex16 = complex15.I.acos();
      Complex complex17 = complex8.pow(complex11);
      int int1 = complex3.hashCode();
      int int2 = complex15.hashCode();
      Complex complex18 = complex14.add(complex17);
      Complex complex19 = complex15.tanh();
      Complex complex20 = complex2.createComplex(0.0, 155.541);
      Complex complex21 = complex9.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex0.ONE.acos();
      double double0 = complex0.ZERO.abs();
      Complex complex5 = complex0.negate();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.multiply(0.0);
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.tanh();
      List<Complex> list0 = complex4.NaN.nthRoot(544);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isNaN();
      double double0 = complex1.getArgument();
      boolean boolean2 = complex0.isNaN();
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex5.ONE.add(complex1);
      Complex complex9 = complex7.NaN.conjugate();
      Complex complex10 = complex1.divide(complex6);
      Complex complex11 = complex10.atan();
      Complex complex12 = complex9.I.sin();
      Complex complex13 = complex7.ZERO.sinh();
      Object object1 = complex13.INF.readResolve();
      boolean boolean3 = complex2.isInfinite();
      Object object2 = complex9.readResolve();
      Complex complex14 = complex5.sin();
      Complex complex15 = complex14.NaN.sin();
      ComplexField complexField0 = complex15.ONE.getField();
      double double1 = complex1.getImaginary();
      Complex complex16 = complex1.multiply(complex3);
      Complex complex17 = complex16.multiply(complex14);
      Complex complex18 = complex3.tanh();
      Complex complex19 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.createComplex(546.0, 546.0);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.asin();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex3.toString();
  }
}
