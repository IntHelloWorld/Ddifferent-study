/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:35:29 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex1.log();
      Complex complex8 = complex1.createComplex(523.240352, 523.240352);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.add(complex9);
      Complex complex11 = complex10.ONE.sqrt1z();
      Object object1 = complex5.readResolve();
      double double0 = complex11.INF.abs();
      Complex complex12 = complex0.multiply(complex3);
      Complex complex13 = Complex.I;
      boolean boolean0 = complex0.equals(complex13);
      Complex complex14 = complex11.multiply(complex10);
      Complex complex15 = new Complex(Double.POSITIVE_INFINITY, 1933.9277251365);
      Complex complex16 = complex3.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex((-784.9900853), (-784.9900853));
      Complex complex3 = complex0.INF.tanh();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.INF.divide(complex6);
      Complex complex8 = complex6.sin();
      Complex complex9 = complex6.I.tan();
      Complex complex10 = complex0.log();
      double double1 = complex4.getArgument();
      Complex complex11 = complex6.INF.asin();
      double double2 = complex5.abs();
      Complex complex12 = complex4.sin();
      Object object0 = complex8.readResolve();
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex13.tan();
      Complex complex15 = complex4.add(complex1);
      Complex complex16 = complex0.cos();
      Complex complex17 = complex11.sqrt();
      Complex complex18 = Complex.ONE;
      Complex complex19 = complex14.pow(complex18);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex2.exp();
      boolean boolean0 = complex3.equals(complex2);
      Complex complex7 = complex4.I.sinh();
      List<Complex> list0 = complex2.nthRoot(3540);
      double double0 = complex1.getImaginary();
      Complex complex8 = complex7.I.sin();
      boolean boolean1 = complex2.equals("$!SYx");
      boolean boolean2 = complex6.isInfinite();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex0.exp();
      double double1 = complex6.getReal();
      double double2 = complex7.INF.abs();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex11.I.exp();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex12.tan();
      List<Complex> list1 = complex7.nthRoot(279);
      Complex complex16 = complex10.tanh();
      Complex complex17 = complex16.ZERO.add(complex2);
      Complex complex18 = complex5.INF.sqrt1z();
      boolean boolean3 = complex4.isInfinite();
      boolean boolean4 = complex5.isInfinite();
      Complex complex19 = complex0.conjugate();
      double double3 = complex3.getImaginary();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.acos();
      Object object0 = complex1.INF.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.sin();
      boolean boolean1 = complex4.isNaN();
      Complex complex6 = complex1.multiply(954.342335291);
      int int0 = complex0.hashCode();
      boolean boolean2 = complex0.isInfinite();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex10.ZERO.divide(complex1);
      Complex complex12 = complex1.log();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex5.tanh();
      List<Complex> list0 = complex6.nthRoot(1880);
      Complex complex15 = complex8.atan();
      Complex complex16 = complex6.sin();
      Complex complex17 = complex11.sin();
      Complex complex18 = complex16.sinh();
      double double0 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1532.7983658, 1532.7983658);
      Complex complex2 = complex0.I.subtract(complex1);
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.I.sqrt();
      String string1 = complex5.ONE.toString();
      Complex complex6 = complex1.INF.conjugate();
      Complex complex7 = complex5.I.multiply(1532.7983658);
      Complex complex8 = complex7.I.divide(complex3);
      Complex complex9 = complex6.NaN.conjugate();
      double double0 = complex0.abs();
      double double1 = complex2.getArgument();
      String string2 = complex0.toString();
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex10.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex2.isInfinite();
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = complex0.ONE.cos();
      Complex complex15 = complex13.NaN.divide(complex7);
      boolean boolean1 = complex8.isNaN();
      boolean boolean2 = complex3.isInfinite();
      Complex complex16 = complex13.asin();
      Complex complex17 = complex8.log();
      Object object1 = complex4.readResolve();
      Complex complex18 = complex17.I.sqrt();
      ComplexField complexField0 = complex10.NaN.getField();
      Complex complex19 = complex11.divide(complex4);
      List<Complex> list0 = complex10.nthRoot(1927);
      Complex complex20 = complex1.multiply(806.7);
      Complex complex21 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.ZERO.multiply(Double.NaN);
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex1.ONE.log();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex8.ZERO.asin();
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex3.NaN.sin();
      Complex complex13 = complex0.asin();
      Complex complex14 = complex3.createComplex(Double.NaN, 441.0);
      Complex complex15 = complex8.cos();
      Complex complex16 = complex15.ONE.createComplex(441.0, Double.NaN);
      double double0 = complex0.getReal();
      int int1 = complex3.hashCode();
      Complex complex17 = complex1.exp();
      Complex complex18 = complex15.INF.pow(complex9);
      Complex complex19 = complex4.exp();
      Complex complex20 = complex0.acos();
      Object object0 = complex10.readResolve();
      double double1 = complex11.abs();
      Complex complex21 = complex4.conjugate();
      Object object1 = complex10.readResolve();
      Complex complex22 = complex16.cos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.INF.createComplex(544.220996, 0.0);
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex3.ONE.multiply(0.0);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.NaN.add(complex2);
      Complex complex8 = complex6.ZERO.subtract(complex2);
      Complex complex9 = complex7.NaN.divide(complex0);
      Complex complex10 = complex7.INF.createComplex(795.7463, 0.0);
      Object object0 = complex10.readResolve();
      Complex complex11 = complex10.INF.sin();
      Object object1 = complex1.readResolve();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex6.sqrt();
      double double0 = complex5.getArgument();
      Complex complex14 = complex7.INF.exp();
      Complex complex15 = complex10.I.add(complex6);
      Complex complex16 = complex15.multiply(complex9);
      Complex complex17 = complex15.cosh();
      ComplexField complexField1 = complex7.getField();
      Complex complex18 = complex6.negate();
      double double1 = complex11.abs();
      Complex complex19 = complex13.negate();
      try { 
        complex7.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex5.INF.add(complex2);
      double double0 = complex0.NaN.getArgument();
      Complex complex8 = complex6.pow(complex4);
      Object object0 = complex6.ZERO.readResolve();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex3.cosh();
      int int0 = complex2.hashCode();
      Complex complex12 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.createComplex(808.5409679945808, 808.5409679945808);
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.ONE.pow(complex6);
      Complex complex8 = complex4.ZERO.subtract(complex5);
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex9.I.divide(complex1);
      Complex complex11 = complex5.I.exp();
      Complex complex12 = complex5.ZERO.asin();
      Complex complex13 = complex8.ONE.sinh();
      ComplexField complexField0 = complex13.ZERO.getField();
      Complex complex14 = complex8.log();
      Complex complex15 = complex13.INF.tanh();
      Complex complex16 = Complex.INF;
      Complex complex17 = complex0.ONE.add(complex16);
      Complex complex18 = complex16.NaN.conjugate();
      Complex complex19 = complex3.ZERO.negate();
      Complex complex20 = complex17.NaN.multiply(complex4);
      Complex complex21 = complex8.pow(complex1);
      double double0 = complex4.getReal();
      double double1 = complex0.getReal();
      Complex complex22 = complex17.tanh();
      Complex complex23 = complex22.multiply(complex13);
      boolean boolean0 = complex3.isNaN();
      Complex complex24 = complex3.sin();
      Complex complex25 = complex13.cosh();
      Complex complex26 = complex5.divide(complex2);
      double double2 = complex13.getArgument();
      ComplexField complexField1 = complex7.getField();
      double double3 = complex12.abs();
      Complex complex27 = complex20.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      ComplexField complexField0 = complex2.getField();
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.negate();
      boolean boolean0 = complex0.equals(complex4);
      Object object1 = complex2.NaN.readResolve();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.NaN.tanh();
      ComplexField complexField1 = complex4.getField();
      String string0 = complex5.toString();
      boolean boolean1 = complex4.equals(complex5);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.tanh();
      double double0 = complex1.getImaginary();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex4.tanh();
      boolean boolean2 = complex2.isNaN();
      Complex complex11 = complex9.createComplex(0.0, 0.0);
      double double1 = complex8.getArgument();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex5.pow(complex2);
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex8.atan();
      Complex complex17 = complex10.log();
      Complex complex18 = complex17.I.subtract(complex15);
      Complex complex19 = complex16.divide(complex5);
      double double2 = complex6.getReal();
      Complex complex20 = complex12.divide(complex19);
      boolean boolean3 = complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.INF.atan();
      Complex complex7 = complex5.INF.tan();
      Complex complex8 = complex6.I.subtract(complex4);
      Complex complex9 = complex6.I.sinh();
      Object object0 = complex3.readResolve();
      double double0 = complex5.abs();
      Complex complex10 = complex0.createComplex((-1.0), (-1.0));
      Complex complex11 = complex10.createComplex((-396.35), (-1.0));
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex3.subtract(complex11);
      Object object1 = complex13.INF.readResolve();
      Complex complex14 = complex13.exp();
      Complex complex15 = complex14.NaN.sin();
      Complex complex16 = complex13.log();
      Complex complex17 = complex1.exp();
      int int0 = complex17.I.hashCode();
      Object object2 = complex11.readResolve();
      boolean boolean0 = complex9.equals(object2);
      Complex complex18 = complex14.exp();
      Complex complex19 = complex3.sin();
      boolean boolean1 = complex9.equals(complex15);
      Complex complex20 = complex19.multiply(4540.8);
      Complex complex21 = complex12.sin();
      Complex complex22 = Complex.ONE;
      Complex complex23 = complex11.subtract(complex22);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex3.INF.sqrt();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.sin();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex6.ONE.sinh();
      Complex complex10 = complex3.ONE.acos();
      Complex complex11 = complex6.subtract(complex9);
      Complex complex12 = complex6.NaN.sin();
      ComplexField complexField0 = complex5.getField();
      Complex complex13 = complex6.add(complex0);
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex14.ONE.sinh();
      Complex complex16 = complex15.ONE.multiply(complex8);
      Complex complex17 = complex13.tan();
      Complex complex18 = complex6.cos();
      boolean boolean0 = complex3.isNaN();
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.createComplex(184.70150328454778, (-0.16666666666666666));
      Complex complex5 = complex2.I.divide(complex0);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.equals("X>kR0");
      Complex complex6 = complex1.acos();
      double double0 = complex1.getImaginary();
      Complex complex7 = complex6.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.I.multiply(0.0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.divide(complex3);
      Complex complex6 = complex2.exp();
      double double0 = complex3.getImaginary();
      Complex complex7 = complex6.multiply(complex2);
      int int0 = complex6.ZERO.hashCode();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex7.conjugate();
      List<Complex> list0 = complex6.nthRoot(1);
      List<Complex> list1 = complex2.nthRoot(311);
      double double1 = complex2.abs();
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(616.0273, -0.0);
      Complex complex1 = Complex.I;
      List<Complex> list0 = complex1.ZERO.nthRoot(1071);
      Object object0 = complex1.NaN.readResolve();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.add(complex1);
      double double0 = complex3.NaN.getArgument();
      double double1 = complex0.ONE.abs();
      Object object1 = complex0.I.readResolve();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.sinh();
      ComplexField complexField1 = complex5.ONE.getField();
      Complex complex6 = complex0.tan();
      int int0 = complex0.hashCode();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.I.add(complex4);
      List<Complex> list1 = complex8.INF.nthRoot(1071);
      Complex complex9 = complex6.sin();
      List<Complex> list2 = complex3.nthRoot(228);
      Complex complex10 = complex0.add(complex2);
      Complex complex11 = complex5.negate();
      int int1 = complex11.hashCode();
      double double2 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex0.ZERO.multiply(0.0);
      Object object0 = complex5.ONE.readResolve();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ZERO.sinh();
      double double0 = complex0.getReal();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex8.divide(complex9);
      Complex complex11 = complex10.ONE.atan();
      int int1 = complex9.hashCode();
      ComplexField complexField1 = complex1.getField();
      try { 
        complex11.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-3995.279833), (-3995.279833));
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex1.I.exp();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex4.createComplex((-2.356194490192345), 1192.5315352726338);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2336.0119));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.log();
      int int0 = complex0.NaN.hashCode();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex5.sinh();
      int int1 = complex6.INF.hashCode();
      Complex complex7 = complex0.I.asin();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = new Complex(Double.NaN, (-0.2499999701976776));
      Complex complex3 = complex2.multiply((-0.2499999701976776));
      Complex complex4 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-2867.738330979));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.ONE.add(complex5);
      Complex complex7 = complex0.NaN.conjugate();
      Complex complex8 = complex3.INF.sqrt();
      Complex complex9 = complex1.I.atan();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex1.sin();
      String string0 = complex0.toString();
      Complex complex13 = complex3.INF.log();
      Complex complex14 = complex7.subtract(complex9);
      int int0 = complex14.INF.hashCode();
      Complex complex15 = complex3.asin();
      Complex complex16 = complex4.NaN.log();
      Complex complex17 = complex10.sqrt();
      Complex complex18 = complex10.negate();
      Complex complex19 = complex11.cos();
      double double0 = complex6.getImaginary();
      Object object0 = complex10.readResolve();
      Complex complex20 = complex18.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1.8014398509481984E16, Double.NaN);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.conjugate();
      ComplexField complexField0 = complex0.ZERO.getField();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex0.INF.multiply(complex1);
      String string0 = complex3.ONE.toString();
      double double0 = complex1.abs();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex1.I.acos();
      Complex complex6 = complex5.divide(complex0);
      Object object0 = complex6.readResolve();
      double double1 = complex1.abs();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = complex1.INF.sinh();
      Complex complex10 = complex2.tanh();
      int int1 = complex2.hashCode();
      double double2 = complex10.getArgument();
      Complex complex11 = complex4.asin();
      Complex complex12 = complex11.ONE.sqrt();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex13.NaN.subtract(complex10);
      Complex complex15 = complex10.NaN.sqrt1z();
      Object object1 = complex2.ONE.readResolve();
      Complex complex16 = complex5.multiply(Double.NaN);
      Complex complex17 = complex16.INF.log();
      Complex complex18 = complex16.INF.atan();
      Complex complex19 = complex10.multiply(complex12);
      Complex complex20 = complex10.cosh();
      Complex complex21 = complex10.pow(complex19);
      Complex complex22 = complex15.divide(complex5);
      Complex complex23 = complex11.tan();
      Complex complex24 = complex4.createComplex(814.26, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(229);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.tanh();
      double double0 = complex1.getReal();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.cos();
      boolean boolean0 = complex6.isNaN();
      Complex complex7 = complex2.cos();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      // Undeclared exception!
      try { 
        complex0.I.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.2857142686843872, 0.2857142686843872);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.INF.add(complex0);
      Object object0 = complex3.readResolve();
      Complex complex5 = complex1.NaN.sinh();
      Complex complex6 = complex1.ZERO.sin();
      Complex complex7 = complex0.ZERO.atan();
      Object object1 = complex7.NaN.readResolve();
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.multiply(complex8);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex8.ONE.subtract(complex11);
      Complex complex13 = complex12.NaN.multiply(3665.413);
      double double0 = complex1.getArgument();
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex14.sinh();
      Complex complex16 = complex0.multiply(complex6);
      Complex complex17 = complex6.acos();
      boolean boolean0 = complex4.isNaN();
      String string0 = complex1.toString();
      Complex complex18 = complex7.multiply((-0.08091870614050145));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 368.08032824);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = new Complex(491.747938, Double.POSITIVE_INFINITY);
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.add(complex0);
      double double1 = complex7.NaN.abs();
      Complex complex8 = complex5.ONE.tanh();
      double double2 = complex0.abs();
      Complex complex9 = complex1.subtract(complex6);
      Complex complex10 = complex0.sinh();
      ComplexField complexField0 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1379.6592), (-1379.6592));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.I.multiply((-1379.6592));
      Complex complex7 = complex0.INF.asin();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex8.pow(complex3);
      Complex complex10 = complex2.INF.pow(complex6);
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex8.INF.sqrt1z();
      Complex complex13 = complex7.INF.negate();
      List<Complex> list0 = complex5.INF.nthRoot(68);
      Complex complex14 = complex5.cos();
      double double0 = complex2.getImaginary();
      int int0 = complex5.hashCode();
      Complex complex15 = complex14.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      try { 
        complex1.ZERO.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1427.8339490516), 427.9424626729893);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.sinh();
      String string0 = complex0.toString();
      String string1 = complex1.toString();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ONE.divide(complex1);
      String string2 = complex1.toString();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.subtract(complex3);
      Complex complex6 = complex5.ZERO.subtract(complex3);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.ZERO.pow(complex4);
      double double1 = complex5.abs();
      double double2 = complex8.INF.getArgument();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex5.createComplex(2.8503978547815163, (-93.4423));
      Complex complex11 = complex3.cos();
      Complex complex12 = complex8.exp();
      double double3 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1757.0), 103.28820695644);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.multiply((-1757.0));
      try { 
        complex2.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.I.multiply(complex5);
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex2.equals(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex3.tanh();
      ComplexField complexField1 = complex7.ONE.getField();
      boolean boolean2 = complex2.isInfinite();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.add(complex4);
      Complex complex10 = complex4.sin();
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.19999998807907104, 0.19999998807907104);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.07692307692307693, 0.07692307692307693);
      String string0 = complex0.NaN.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex4 = complex3.INF.multiply(0.0);
      ComplexField complexField1 = complex1.getField();
      double double0 = complex1.NaN.getArgument();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex1.subtract(complex4);
      double double1 = complex0.getImaginary();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.ONE.negate();
      Object object0 = new Object();
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex0.ONE.sqrt1z();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.NaN.sqrt1z();
      String string0 = complex6.INF.toString();
      double double1 = complex5.getReal();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex(2420, 2.3841857910019882E-8);
      List<Complex> list0 = complex0.nthRoot(2420);
      Complex complex2 = Complex.I;
      List<Complex> list1 = complex2.ONE.nthRoot(1);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex2.NaN.subtract(complex0);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex6.sqrt();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(647.0643035018269, 647.0643035018269);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.cosh();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.ONE.multiply(2.0);
      Complex complex7 = complex6.I.multiply((-1078.038386305601));
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex6.sqrt1z();
      String string0 = complex3.toString();
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex3.createComplex(0.0, 0.0);
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex10.log();
      boolean boolean1 = complex3.isInfinite();
      boolean boolean2 = complex0.isInfinite();
      Complex complex14 = complex2.negate();
      Object object0 = complex4.readResolve();
      String string1 = complex2.toString();
      double double1 = complex6.getArgument();
      Complex complex15 = complex1.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-227.620888837), (-227.620888837));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex2.INF.negate();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex0.exp();
      double double0 = complex6.I.abs();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.subtract(complex3);
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-3881.43), (-3881.43));
      Complex complex1 = new Complex((-19.0), 0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1324.283318), (-1324.283318));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.ZERO.conjugate();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1560.922683477, 1560.922683477);
      Complex complex1 = complex0.ZERO.createComplex(1560.922683477, 1560.922683477);
      Complex complex2 = complex0.INF.multiply(454.856);
      Complex complex3 = complex0.tan();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-612.71072), (-612.71072));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.exp();
      Complex complex6 = new Complex((-1.0), 2319.254085061);
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex0.ZERO.tanh();
      Complex complex8 = complex2.ZERO.add(complex6);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex0.nthRoot(114);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.atan();
      ComplexField complexField0 = complex6.ONE.getField();
      try { 
        complex1.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.acos();
      List<Complex> list0 = complex3.nthRoot(171);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2181.2);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex1.INF.subtract(complex4);
      Complex complex6 = complex1.acos();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex1.cos();
      boolean boolean0 = complex3.equals(complex5);
      boolean boolean1 = complex7.equals(complex1);
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-3995.279833), (-3995.279833));
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.I.exp();
      double double0 = complex0.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex3.createComplex((-2.356194490192345), 1192.5315352726338);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.ONE.multiply(0.0);
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.nthRoot(890);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.ONE.getField();
      Complex complex1 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      double double0 = complex3.INF.abs();
      double double1 = complex3.abs();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.NaN.tan();
      Complex complex6 = complex4.sin();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex4.getArgument();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex1.sin();
      boolean boolean1 = complex7.isInfinite();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(119.94821535216005, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(complex2);
      double double0 = complex3.getReal();
      Complex complex4 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply(2.479773539153719E-5);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex1.NaN.exp();
      double double0 = complex1.INF.getArgument();
      Complex complex6 = complex0.ONE.acos();
      Complex complex7 = complex6.NaN.sqrt();
      double double1 = complex7.I.getArgument();
      Complex complex8 = complex0.NaN.log();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.ZERO.pow(complex0);
      Complex complex11 = complex6.createComplex((-847.85983934), (-2653.365));
      Complex complex12 = complex8.cos();
      Complex complex13 = complex12.ZERO.sin();
      boolean boolean0 = complex9.isNaN();
      boolean boolean1 = complex12.isInfinite();
      Complex complex14 = complex1.I.tan();
      Complex complex15 = complex6.atan();
      Complex complex16 = complex0.tanh();
      double double2 = complex8.getArgument();
      Complex complex17 = complex3.acos();
      Complex complex18 = complex6.multiply(Double.NaN);
      Complex complex19 = complex18.NaN.tan();
      Complex complex20 = complex0.negate();
      Complex complex21 = complex7.sqrt1z();
      Complex complex22 = complex5.multiply((-896.31));
      ComplexField complexField0 = complex8.getField();
      Complex complex23 = complex6.cos();
      Complex complex24 = complex2.createComplex(Double.NaN, 4338.670818748053);
      Complex complex25 = complex22.subtract(complex19);
      Complex complex26 = complex21.subtract(complex25);
      Complex complex27 = complex25.acos();
      double double3 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex1.ZERO.sqrt();
      double double0 = complex0.abs();
      Complex complex6 = complex1.NaN.exp();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex6.exp();
      ComplexField complexField0 = complex2.getField();
      double double1 = complex8.NaN.getArgument();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex3.NaN.multiply(complex2);
      Complex complex12 = complex10.NaN.negate();
      Object object0 = complex9.readResolve();
      boolean boolean0 = complex5.isNaN();
      Complex complex13 = complex3.cosh();
      double double2 = complex8.getArgument();
      Complex complex14 = complex7.tanh();
      Complex complex15 = complex2.tan();
      Complex complex16 = complex15.INF.multiply(complex7);
      ComplexField complexField1 = complex15.ZERO.getField();
      Complex complex17 = complex6.INF.log();
      Complex complex18 = complex1.pow(complex14);
      Complex complex19 = complex14.add(complex9);
      Complex complex20 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.I.sin();
      Object object0 = complex2.ONE.readResolve();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.ZERO.cos();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex4.cos();
      Object object1 = complex0.readResolve();
      Complex complex7 = complex1.INF.exp();
      double double0 = complex0.getArgument();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex8.acos();
      int int0 = complex6.NaN.hashCode();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex10.ZERO.cos();
      Complex complex12 = complex8.atan();
      Complex complex13 = complex12.atan();
      Complex complex14 = complex0.ZERO.cos();
      double double1 = complex4.INF.getArgument();
      Complex complex15 = complex8.asin();
      double double2 = complex8.getReal();
      Complex complex16 = complex5.multiply(complex7);
      double double3 = complex14.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.I.createComplex(1561.856157791, (-3993.845259228766));
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex0.createComplex((-1124.7939313), (-1124.7939313));
      double double0 = complex1.abs();
      Complex complex7 = complex0.tanh();
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = complex7.I.exp();
      Object object0 = complex4.readResolve();
      Complex complex9 = complex5.divide(complex7);
      Complex complex10 = complex5.sin();
      List<Complex> list0 = complex4.nthRoot(886);
      Complex complex11 = complex7.sin();
      Complex complex12 = complex7.sin();
      ComplexField complexField2 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      // Undeclared exception!
      try { 
        complex0.ONE.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.log();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex3.ONE.conjugate();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.sinh();
      double double0 = complex6.abs();
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex3.multiply(complex6);
      Complex complex9 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.ZERO.tan();
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ONE.log();
      double double1 = complex1.ZERO.getArgument();
      Complex complex6 = complex5.INF.conjugate();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex1.ONE.negate();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex3.ONE.cos();
      double double2 = complex5.INF.abs();
      double double3 = complex0.getReal();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.asin();
      Complex complex12 = complex1.NaN.pow(complex10);
      Complex complex13 = complex0.negate();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex1.I.tan();
      Complex complex16 = complex14.NaN.tanh();
      Complex complex17 = complex4.I.sqrt1z();
      boolean boolean0 = complex14.equals(complex3);
      Complex complex18 = complex1.negate();
      Complex complex19 = complex18.conjugate();
      Object object0 = complex0.NaN.readResolve();
      double double4 = complex19.abs();
      Object object1 = complex5.readResolve();
      Complex complex20 = complex1.sqrt();
      Complex complex21 = complex15.pow(complex2);
      int int0 = complex14.hashCode();
      boolean boolean1 = complex15.isInfinite();
      Complex complex22 = complex1.sqrt();
      double double5 = complex11.abs();
  }
}
