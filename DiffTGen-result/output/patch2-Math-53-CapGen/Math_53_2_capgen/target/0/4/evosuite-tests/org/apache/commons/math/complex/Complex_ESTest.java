/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:24:42 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1788.6518, 1788.6518);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.I.pow(complex1);
      int int0 = complex2.ZERO.hashCode();
      int int1 = complex1.hashCode();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.INF.createComplex(2028.884294088387, 0.0);
      Complex complex6 = complex0.createComplex(1788.6518, 1788.6518);
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex6.I.asin();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1251.8623485297169, 1251.8623485297169);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex0.toString();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex4.NaN.sinh();
      Complex complex7 = complex3.I.sinh();
      Complex complex8 = complex7.ONE.multiply(complex1);
      Complex complex9 = complex2.add(complex3);
      int int0 = complex2.hashCode();
      Complex complex10 = complex3.ZERO.asin();
      Complex complex11 = complex9.createComplex(5941.5195458, 1406.25774388);
      Complex complex12 = complex11.multiply((-1200.0));
      Complex complex13 = complex12.NaN.sqrt();
      Complex complex14 = complex13.ONE.tanh();
      List<Complex> list0 = complex13.nthRoot(273);
      Complex complex15 = complex9.subtract(complex2);
      Complex complex16 = complex3.sqrt();
      double double0 = complex15.abs();
      Complex complex17 = complex7.I.add(complex4);
      Complex complex18 = complex1.negate();
      Complex complex19 = complex4.cos();
      Complex complex20 = complex7.add(complex2);
      Complex complex21 = complex1.INF.sqrt();
      Complex complex22 = complex21.NaN.log();
      Complex complex23 = complex19.multiply((-1.0));
      String string1 = complex1.toString();
      boolean boolean0 = complex5.isNaN();
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.tanh();
      String string0 = complex1.ONE.toString();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.ONE.sqrt1z();
      Complex complex8 = complex1.I.sinh();
      Complex complex9 = complex1.multiply(3514.27);
      Complex complex10 = complex6.atan();
      int int0 = complex8.hashCode();
      Complex complex11 = complex7.subtract(complex6);
      Complex complex12 = complex7.pow(complex10);
      Complex complex13 = complex12.INF.sqrt();
      Complex complex14 = complex6.subtract(complex0);
      double double0 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex3.NaN.atan();
      Complex complex6 = complex1.ZERO.divide(complex0);
      Complex complex7 = complex2.NaN.exp();
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex0.I.sin();
      Complex complex10 = complex0.NaN.cosh();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex1.divide(complex0);
      ComplexField complexField0 = complex10.NaN.getField();
      List<Complex> list0 = complex0.nthRoot(1527);
      Complex complex14 = complex0.cosh();
      boolean boolean0 = complex9.isInfinite();
      Complex complex15 = complex14.ZERO.asin();
      Complex complex16 = complex9.acos();
      Complex complex17 = complex16.INF.pow(complex14);
      Object object0 = complex10.readResolve();
      Object object1 = new Object();
      boolean boolean1 = complex3.equals(object1);
      Complex complex18 = complex5.sin();
      double double0 = complex8.getReal();
      Complex complex19 = complex6.cosh();
      Complex complex20 = complex6.tanh();
      double double1 = complex2.getImaginary();
      Complex complex21 = complex16.tanh();
      Complex complex22 = complex20.acos();
      int int0 = complex22.NaN.hashCode();
      Complex complex23 = complex0.cosh();
      double double2 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.sqrt();
      double double0 = complex0.getReal();
      Complex complex5 = new Complex(Double.NaN, Double.NaN);
      double double1 = complex1.NaN.getArgument();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex5.tan();
      Complex complex9 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ONE.log();
      double double1 = complex0.getReal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex4.NaN.cosh();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex3.I.asin();
      Complex complex9 = complex2.add(complex7);
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex10.INF.sqrt();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex7.cosh();
      Complex complex14 = complex0.INF.multiply(0.0);
      double double2 = complex3.getArgument();
      Complex complex15 = complex8.divide(complex10);
      ComplexField complexField0 = complex11.getField();
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex3.equals("k*u");
      Complex complex16 = new Complex(1635.278229018201, Double.NaN);
      Complex complex17 = complex1.ZERO.exp();
      Complex complex18 = complex13.multiply(complex16);
      Complex complex19 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1554.205389387469);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex1.tan();
      double double0 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(3133.1299411, 3133.1299411);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.add(complex3);
      int int0 = complex0.hashCode();
      Complex complex5 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.INF.createComplex((-2224.6482764879797), 1.0);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex4.ONE.multiply(1.0);
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex4.INF.sqrt();
      Complex complex9 = new Complex((-2224.6482764879797), 1.0);
      Complex complex10 = complex4.pow(complex9);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.equals(complexField0);
      String string0 = complex5.I.toString();
      Complex complex11 = complex9.ZERO.add(complex5);
      Complex complex12 = complex0.sqrt1z();
      double double0 = complex0.getArgument();
      List<Complex> list0 = complex12.nthRoot(1);
      Complex complex13 = complex9.log();
      List<Complex> list1 = complex9.nthRoot(1);
      double double1 = complex0.abs();
      double double2 = complex11.getArgument();
      double double3 = complex12.getReal();
      Complex complex14 = complex0.add(complex11);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 6.283185307179586);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex2.INF.atan();
      double double1 = complex1.getReal();
      Complex complex5 = complex3.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-221.036814));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.createComplex(0.0, -0.0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.I.divide(complex7);
      Complex complex9 = complex6.tanh();
      String string0 = complex9.toString();
      Complex complex10 = complex1.acos();
      String string1 = complex6.toString();
      Complex complex11 = complex8.atan();
      double double0 = complex8.getReal();
      Complex complex12 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.ZERO.getField();
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex2.multiply(complex0);
      double double0 = complex0.getArgument();
      int int0 = complex2.ONE.hashCode();
      Complex complex5 = complex0.I.subtract(complex2);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex4.INF.cosh();
      String string0 = complex7.toString();
      Complex complex9 = complex4.divide(complex0);
      Complex complex10 = complex9.ONE.divide(complex1);
      Object object0 = complex9.NaN.readResolve();
      Complex complex11 = complex7.ONE.tan();
      Complex complex12 = complex0.multiply(0.0);
      boolean boolean0 = complex2.equals(complex7);
      Complex complex13 = complex11.conjugate();
      List<Complex> list0 = complex2.nthRoot(2848);
      Complex complex14 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex((-2757.5925997403), (-2757.5925997403));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.I.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex9.log();
      List<Complex> list0 = complex0.nthRoot(1955);
      Complex complex11 = complex1.multiply((-1662.0565458715));
      Complex complex12 = complex1.sin();
      boolean boolean1 = complex2.isNaN();
      Complex complex13 = complex2.cos();
      boolean boolean2 = complex6.isNaN();
      List<Complex> list1 = complex9.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.I.exp();
      int int0 = 928;
      Complex complex3 = complex2.NaN.sqrt();
      List<Complex> list0 = complex2.NaN.nthRoot(928);
      Complex complex4 = complex1.ONE.negate();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.ZERO.divide(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ZERO.multiply(Double.NaN);
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      double double0 = complex0.I.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.sinh();
      int int0 = complex0.INF.hashCode();
      List<Complex> list0 = complex1.NaN.nthRoot(238);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.I.createComplex((-0.2499999701976776), 1.5707963267948966);
      Complex complex5 = complex4.ZERO.sqrt();
      Object object1 = complex2.I.readResolve();
      ComplexField complexField0 = complex4.NaN.getField();
      String string0 = complex1.toString();
      ComplexField complexField1 = complex2.getField();
      double double1 = complex3.getArgument();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex0.add(complex4);
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex8.NaN.sin();
      double double2 = complex1.getReal();
      Object object2 = complex8.readResolve();
      boolean boolean1 = complex8.equals(object2);
      Complex complex10 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.NaN.createComplex((-127.55931), (-127.55931));
      Complex complex3 = complex0.I.divide(complex2);
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      double double0 = complex0.INF.abs();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex5.NaN.acos();
      double double1 = complex1.getArgument();
      Complex complex8 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-731.5299), (-731.5299));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.INF.acos();
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.NaN.sin();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.acos();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.createComplex((-20.0), 349.816800115);
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex4.NaN.createComplex(0.0, (-1135.817));
      Complex complex6 = complex2.multiply((-20.0));
      Complex complex7 = complex3.NaN.sqrt();
      String string0 = complex6.toString();
      Complex complex8 = complex0.ONE.createComplex(0.0, (-20.0));
      Complex complex9 = complex3.subtract(complex2);
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-2007.200441471), (-2007.200441471));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2637.11, 127.98);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.atan();
      double double0 = complex1.getArgument();
      Complex complex5 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex1.createComplex((-3841.59459), (-3841.59459));
      double double0 = complex4.ZERO.getArgument();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex3.INF.sinh();
      double double1 = complex4.INF.abs();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex6 = complex1.tan();
      double double2 = complex6.getImaginary();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex7.exp();
      double double3 = complex0.getArgument();
      double double4 = complex7.getReal();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex1.divide(complex9);
      Complex complex12 = complex0.exp();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex7.toString();
      Complex complex13 = complex8.multiply(complex3);
      Complex complex14 = complex12.divide(complex6);
      Complex complex15 = complex6.multiply(complex7);
      Complex complex16 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.acos();
      double double0 = complex0.INF.abs();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.ZERO.atan();
      double double1 = complex0.abs();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex0.I.multiply(complex6);
      Complex complex8 = complex1.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.INF.asin();
      Complex complex10 = complex5.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.NaN.divide(complex6);
      Complex complex12 = complex10.ZERO.cos();
      Complex complex13 = complex2.I.cosh();
      double double2 = complex2.getImaginary();
      Object object0 = complex0.readResolve();
      Complex complex14 = complex7.multiply(complex2);
      Complex complex15 = Complex.NaN;
      boolean boolean0 = complex1.equals(complex15);
      Complex complex16 = complex15.sinh();
      Complex complex17 = complex6.createComplex(Double.POSITIVE_INFINITY, (-126.36094272353));
      Object object1 = complex15.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.multiply(complex5);
      ComplexField complexField1 = complex4.getField();
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-14.79837);
      double double1 = (-17.3);
      Complex complex0 = new Complex((-14.79837), (-17.3));
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.INF.divide(complex2);
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.multiply(complex0);
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 146195.29822922577;
      Complex complex0 = new Complex(146195.29822922577, 146195.29822922577);
      Complex complex1 = complex0.ZERO.acos();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex1.NaN.atan();
      Complex complex7 = complex5.ONE.createComplex(3418.989597428, Double.POSITIVE_INFINITY);
      double double1 = complex7.ONE.getArgument();
      double double2 = complex3.NaN.getArgument();
      Complex complex8 = complex1.sinh();
      try { 
        complex1.nthRoot((-709));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -709
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.I.asin();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex1.ONE.cosh();
      double double0 = complex0.abs();
      boolean boolean1 = complex0.isNaN();
      boolean boolean2 = complex0.equals(complex1);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.INF.multiply(5.669184079525E-24);
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex1.I.getField();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex2.log();
      String string0 = complex4.toString();
      String string1 = complex3.I.toString();
      double double0 = complex5.I.abs();
      Complex complex7 = complex6.multiply((-357.0));
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex5.I.cosh();
      Complex complex9 = complex4.cosh();
      ComplexField complexField2 = complex5.getField();
      Complex complex10 = complex7.sin();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex2.add(complex0);
      Object object0 = complex6.INF.readResolve();
      boolean boolean1 = complex6.equals(complex5);
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = complex4.negate();
      boolean boolean2 = complex6.isInfinite();
      Complex complex9 = complex2.cosh();
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex5.negate();
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex0.log();
      Complex complex13 = complex6.add(complex1);
      double double0 = complex6.abs();
      Complex complex14 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ONE.createComplex(0.0, 0.0);
      Complex complex6 = complex2.divide(complex3);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.NaN.subtract(complex0);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(15.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex2.I.sinh();
      Complex complex5 = complex1.multiply(15.0);
      boolean boolean0 = complex2.equals(complex5);
      Complex complex6 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.I.nthRoot(2789);
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ONE.conjugate();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex1.I.pow(complex4);
      double double0 = complex0.abs();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.INF.multiply(0.0);
      Complex complex11 = complex10.INF.add(complex7);
      Complex complex12 = complex9.INF.pow(complex5);
      Complex complex13 = complex9.I.pow(complex7);
      double double1 = complex13.getArgument();
      int int0 = complex3.hashCode();
      Complex complex14 = complex3.ZERO.asin();
      boolean boolean0 = complex7.isInfinite();
      Object object0 = complex2.readResolve();
      Complex complex15 = complex13.tan();
      double double2 = (-40.27256805);
      Complex complex16 = complex8.I.divide(complex7);
      try { 
        complex16.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.tan();
      ComplexField complexField0 = complex2.ONE.getField();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex1 = complex0.tanh();
      String string1 = complex1.INF.toString();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.createComplex((-1947.4301767606441), (-1947.4301767606441));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.add(complex0);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex3.multiply(262.001);
      Complex complex12 = complex0.divide(complex7);
      double double0 = complex4.getArgument();
      Complex complex13 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex(1898.7518298, 1898.7518298);
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.ZERO.log();
      double double0 = complex0.NaN.abs();
      Complex complex7 = complex1.ONE.sqrt();
      double double1 = complex0.getReal();
      int int0 = complex1.hashCode();
      Complex complex8 = complex3.ONE.asin();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex8.sin();
      ComplexField complexField0 = complex8.getField();
      Complex complex13 = complex2.atan();
      double double2 = complex8.getImaginary();
      Complex complex14 = complex8.multiply(0.0);
      double double3 = complex0.getArgument();
      Complex complex15 = complex3.acos();
      int int1 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex1.ZERO.add(complex0);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.ZERO.multiply(1.5707963267948966);
      Complex complex8 = complex3.log();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex2.add(complex9);
      Complex complex11 = complex6.subtract(complex7);
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex1.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(1807.1115826);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex3.ONE.subtract(complex0);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
      double double2 = complex3.abs();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.atan();
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex2.atan();
      double double1 = complex0.getArgument();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.conjugate();
      String string0 = complex0.toString();
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.createComplex(1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.sqrt1z();
      double double0 = complex2.ONE.getArgument();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex2.multiply((double) 1052);
      List<Complex> list0 = complex0.nthRoot(1052);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.multiply(complex1);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex5.multiply((double) 1052);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.exp();
      List<Complex> list0 = complex0.nthRoot(7);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.I.nthRoot(85);
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.abs();
      Complex complex1 = complex0.ZERO.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-5429.12415698219), 0.0);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-2177.5706853), (-2177.5706853));
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex1.tan();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.NaN.add(complex2);
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex2.divide(complex0);
      Complex complex8 = complex0.ZERO.multiply(complex1);
      ComplexField complexField0 = complex8.INF.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex9 = complex1.createComplex((-4485.335389444958), (-1227.30594970643));
      Complex complex10 = complex4.multiply(complex0);
      List<Complex> list0 = complex2.nthRoot(3531);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.sinh();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex1.ZERO.multiply((-2021.572404));
      Complex complex3 = complex2.INF.cosh();
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex2.I.sinh();
      boolean boolean1 = complex5.equals("CONVERGENCE_FAILED");
      Complex complex7 = complex4.acos();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex3.multiply(0.0);
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex3.INF.multiply(0.0);
      double double0 = complex3.ONE.getArgument();
      Complex complex10 = Complex.INF;
      Object object0 = complex10.ZERO.readResolve();
      Complex complex11 = complex0.ZERO.divide(complex10);
      Complex complex12 = complex11.NaN.cos();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex2.multiply(complex13);
      double double2 = complex0.INF.getArgument();
      Complex complex15 = complex2.sin();
      Complex complex16 = complex1.sqrt();
      Complex complex17 = complex15.log();
      String string0 = complex12.toString();
      Complex complex18 = complex12.sinh();
      Complex complex19 = complex3.cosh();
      Complex complex20 = complex11.atan();
      List<Complex> list0 = complex3.ZERO.nthRoot(37);
      Complex complex21 = complex11.cos();
      double double3 = complex6.getImaginary();
      Complex complex22 = complex20.add(complex13);
      Complex complex23 = Complex.ZERO;
      Complex complex24 = complex14.add(complex23);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-852.1954838309), 352.48793358);
      Object object0 = complex0.I.readResolve();
      Object object1 = new Object();
      double double0 = complex0.I.getArgument();
      boolean boolean0 = complex0.equals(object1);
      Object object2 = complex0.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex1.ZERO.sqrt();
      Complex complex7 = complex5.I.multiply(1333.8067364455);
      boolean boolean1 = complex0.isInfinite();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.INF.negate();
      double double1 = complex1.abs();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex4.atan();
      int int0 = complex12.I.hashCode();
      Complex complex13 = complex12.I.multiply(complex11);
      Complex complex14 = complex11.I.conjugate();
      Complex complex15 = complex12.ZERO.cos();
      Complex complex16 = complex2.log();
      Complex complex17 = complex11.cosh();
      Object object3 = complex17.readResolve();
      ComplexField complexField0 = complex8.getField();
      List<Complex> list0 = complex16.nthRoot(37);
      Complex complex18 = complex4.tanh();
      Complex complex19 = complex18.acos();
      int int1 = complex2.hashCode();
      double double2 = complex13.abs();
      boolean boolean2 = complex18.isInfinite();
      Complex complex20 = complex14.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.add(complex0);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.NaN.asin();
      Object object0 = complex0.ONE.readResolve();
      Complex complex6 = complex0.multiply((-2713.0220769498173));
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex7.I.cos();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.INF.pow(complex0);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex11.ZERO.createComplex(0.0, 1.1430250008909141E-8);
      Complex complex13 = complex12.ONE.tanh();
      Complex complex14 = complex12.ZERO.createComplex(0.0, 0.0);
      Complex complex15 = complex9.INF.multiply(0.19999999999923582);
      double double0 = complex11.getReal();
      Complex complex16 = complex9.sin();
      Complex complex17 = complex5.sqrt();
      Complex complex18 = complex11.multiply(4912.73);
      Complex complex19 = complex18.conjugate();
      Complex complex20 = complex19.atan();
      Complex complex21 = complex19.INF.sqrt1z();
      Complex complex22 = complex11.createComplex((-2385.945693482714), 0.19999999999923582);
      ComplexField complexField1 = complex22.ONE.getField();
      String string0 = complex16.toString();
      Complex complex23 = complex17.log();
      Complex complex24 = complex1.asin();
      boolean boolean0 = complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 968;
      Complex complex1 = complex0.ONE.conjugate();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = null;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.INF.add(complex1);
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex6.ZERO.negate();
      Complex complex9 = complex7.INF.divide(complex1);
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex6.createComplex(0.0, 53.282037);
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex5.INF.pow(complex12);
      try { 
        complex11.ZERO.nthRoot((-2098));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,098
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.acos();
      Object object0 = new Object();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.multiply((-1.881373587019543));
      Complex complex5 = complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getImaginary();
      boolean boolean1 = complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.multiply((double) 0);
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex3.ONE.cosh();
      Complex complex6 = complex3.NaN.log();
      Complex complex7 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.abs();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.pow(complex2);
      double double1 = complex4.getReal();
      String string0 = complex1.toString();
      double double2 = complex1.abs();
      Complex complex6 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.add(complex2);
      ComplexField complexField0 = complex1.getField();
      String string0 = complex0.toString();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex0.ONE.sqrt();
      double double0 = complex0.INF.abs();
      Complex complex7 = complex2.NaN.add(complex4);
      Complex complex8 = complex5.acos();
      double double1 = complex3.getReal();
      Complex complex9 = complex3.divide(complex2);
      Complex complex10 = complex5.divide(complex2);
      double double2 = complex10.abs();
      Complex complex11 = complex7.ZERO.divide(complex1);
      Complex complex12 = Complex.I;
      boolean boolean0 = complex1.equals(complex12);
      Complex complex13 = complex6.sinh();
      double double3 = complex13.ONE.abs();
      Complex complex14 = complex8.divide(complex7);
      Complex complex15 = complex10.sin();
      boolean boolean1 = complex13.isNaN();
  }
}
