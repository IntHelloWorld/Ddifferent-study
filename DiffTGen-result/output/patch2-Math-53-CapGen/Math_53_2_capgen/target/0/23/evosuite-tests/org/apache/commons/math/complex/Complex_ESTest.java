/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:31:57 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(774.810726, 774.810726);
      boolean boolean0 = complex0.isNaN();
      String string0 = complex0.toString();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.tan();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-3446.34942128959), 0.2);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.exp();
      List<Complex> list0 = complex3.nthRoot(2257);
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex5.ZERO.createComplex(0.2, 0.2);
      Complex complex8 = complex3.sqrt();
      double double0 = complex8.getArgument();
      Complex complex9 = complex5.subtract(complex4);
      boolean boolean0 = complex8.isInfinite();
      Complex complex10 = complex5.multiply(complex7);
      Complex complex11 = complex0.ZERO.add(complex7);
      boolean boolean1 = complex7.equals((Object) null);
      Complex complex12 = complex8.subtract(complex7);
      Complex complex13 = complex12.createComplex((-4457.030822136241), (-3446.34942128959));
      Complex complex14 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.abs();
      int int0 = 1320;
      List<Complex> list0 = complex0.ZERO.nthRoot(1320);
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.tan();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.createComplex(35.7, 1324.35638846);
      Complex complex6 = complex5.NaN.subtract(complex1);
      Complex complex7 = complex5.I.multiply(35.7);
      Complex complex8 = complex0.divide(complex4);
      double double0 = complex4.getReal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1409.909259742437));
      Complex complex1 = complex0.NaN.createComplex((-1409.909259742437), (-1409.909259742437));
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.sin();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      ComplexField complexField1 = complex5.getField();
      Complex complex7 = complex1.tanh();
      double double0 = complex6.INF.getArgument();
      Complex complex8 = complex7.NaN.conjugate();
      double double1 = complex5.getArgument();
      Complex complex9 = complex0.ONE.acos();
      boolean boolean0 = complex7.isInfinite();
      Complex complex10 = complex4.divide(complex5);
      Complex complex11 = complex8.divide(complex6);
      Complex complex12 = Complex.I;
      Complex complex13 = complex4.divide(complex12);
      double double2 = complex10.getImaginary();
      double double3 = complex5.abs();
      Complex complex14 = complex0.cosh();
      Complex complex15 = complex14.multiply(0.0);
      Complex complex16 = complex1.sqrt1z();
      double double4 = complex8.getReal();
      Complex complex17 = complex14.sinh();
      Complex complex18 = complex14.negate();
      // Undeclared exception!
      try { 
        complex18.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.tanh();
      int int0 = (-233);
      try { 
        complex1.ONE.nthRoot((-233));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -233
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex((-1441.542141), (-1441.542141));
      Complex complex2 = complex1.INF.createComplex((-1441.542141), 0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex((-3097.6032558533307), (-3097.6032558533307));
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex0.subtract(complex2);
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex1.sin();
      double double0 = complex4.getReal();
      Complex complex6 = complex0.negate();
      String string0 = complex5.toString();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex2.INF.multiply(complex7);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex4.cos();
      String string1 = complex10.INF.toString();
      Complex complex11 = complex10.INF.sinh();
      double double1 = complex6.getArgument();
      Complex complex12 = complex4.multiply((-968.5955347845));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.divide(complex1);
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.sinh();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.cos();
      ComplexField complexField0 = complex1.NaN.getField();
      double double0 = complex1.abs();
      Complex complex3 = complex2.add(complex0);
      String string0 = complex1.I.toString();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex0.isNaN();
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex0.sqrt();
      ComplexField complexField1 = complex0.I.getField();
      Complex complex5 = complex3.log();
      Complex complex6 = complex2.sqrt1z();
      double double1 = complex6.INF.abs();
      Complex complex7 = complex5.INF.asin();
      Complex complex8 = complex5.I.cosh();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex11 = complex10.ZERO.exp();
      Complex complex12 = complex9.add(complex5);
      double double2 = complex9.getArgument();
      Complex complex13 = complex8.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex3.nthRoot(1576);
      Complex complex14 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.NaN.acos();
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex4.ONE.subtract(complex5);
      Complex complex8 = complex7.NaN.asin();
      boolean boolean0 = complex4.isNaN();
      Complex complex9 = complex6.multiply(864.378);
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = complex4.INF.sqrt();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex4.pow(complex12);
      Object object1 = complex13.I.readResolve();
      boolean boolean1 = complex6.isNaN();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex15.ZERO.negate();
      Complex complex17 = complex16.INF.negate();
      Complex complex18 = complex6.ONE.acos();
      Complex complex19 = complex0.tanh();
      Complex complex20 = complex19.createComplex(864.378, 2861.6737495197012);
      Complex complex21 = complex5.createComplex((-4764.882443376113), (-0.16624882440418567));
      Complex complex22 = complex1.asin();
      String string0 = complex21.toString();
      Complex complex23 = complex10.multiply((-4764.882443376113));
      Complex complex24 = complex12.exp();
      Complex complex25 = Complex.ONE;
      Complex complex26 = complex23.multiply(complex25);
      boolean boolean2 = complex20.equals("(-4764.882443376113, -0.16624882440418567)");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1946.7916, 1946.7916);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.sqrt();
      ComplexField complexField1 = complex5.NaN.getField();
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex5.I.divide(complex0);
      Complex complex10 = complex8.NaN.cos();
      Complex complex11 = complex0.add(complex6);
      Complex complex12 = complex5.ZERO.atan();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex3.I.add(complex13);
      Complex complex15 = complex6.sinh();
      double double0 = complex5.getReal();
      ComplexField complexField2 = complex11.getField();
      Complex complex16 = complex12.multiply(6.283185307179586);
      Complex complex17 = complex5.tanh();
      Complex complex18 = complex12.subtract(complex7);
      Complex complex19 = complex3.I.acos();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex3.abs();
      boolean boolean1 = complex0.isNaN();
      Complex complex20 = complex2.negate();
      boolean boolean2 = complex5.equals(complex13);
      ComplexField complexField3 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.add(complex1);
      double double0 = complex0.getImaginary();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex1.NaN.cos();
      Complex complex6 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.NaN.sin();
      Complex complex8 = complex7.ONE.multiply(complex4);
      Complex complex9 = complex6.NaN.exp();
      String string0 = complex6.toString();
      Complex complex10 = complex9.acos();
      double double1 = complex4.getReal();
      Complex complex11 = complex0.conjugate();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.sin();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex1.negate();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex2.log();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex8.acos();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex6.tan();
      double double1 = complex1.getReal();
      Complex complex13 = complex9.add(complex2);
      Complex complex14 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-2597.3431416406615), (-2597.3431416406615));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex1.I.cos();
      Complex complex9 = complex1.ONE.createComplex(2822.875398366598, (-2597.3431416406615));
      Complex complex10 = complex8.NaN.conjugate();
      double double0 = complex0.getArgument();
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex0.ONE.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex14 = complex8.cos();
      Object object0 = complex1.readResolve();
      Complex complex15 = complex2.NaN.negate();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex1.getField();
      Complex complex16 = complex2.sqrt();
      Complex complex17 = complex13.conjugate();
      String string0 = complex2.toString();
      Complex complex18 = complex2.sqrt();
      ComplexField complexField1 = complex0.getField();
      Complex complex19 = complex7.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ZERO.subtract(complex2);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex2.INF.conjugate();
      Complex complex6 = complex3.NaN.multiply(complex0);
      double double1 = complex2.NaN.getArgument();
      Complex complex7 = complex2.I.tan();
      double double2 = complex0.INF.abs();
      String string0 = complex3.NaN.toString();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.INF.subtract(complex6);
      int int0 = complex1.hashCode();
      Complex complex10 = complex0.multiply(Double.NaN);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex5.multiply(Double.NaN);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1992.239);
      Complex complex1 = complex0.NaN.sin();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.NaN.multiply(2150.67);
      List<Complex> list0 = complex0.INF.nthRoot(267);
      List<Complex> list1 = complex0.nthRoot(113);
      Complex complex4 = complex0.multiply((double) 113);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Object object0 = new Object();
      Complex complex2 = complex1.I.sqrt();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.multiply(1356.810614);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 821.0270274603353);
      int int0 = complex0.hashCode();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2605.1928415), 0.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex3.NaN.add(complex1);
      Complex complex5 = complex1.I.sqrt();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex2.subtract(complex5);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex8.ONE.sin();
      double double0 = complex8.abs();
      Complex complex11 = complex5.tan();
      double double1 = complex8.getArgument();
      Complex complex12 = complex1.exp();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex8.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.ONE.cosh();
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.log();
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.sqrt();
      Object object0 = complex5.NaN.readResolve();
      Complex complex7 = complex2.I.sqrt();
      Complex complex8 = complex3.multiply(0.0);
      double double1 = complex5.abs();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex2.pow(complex1);
      try { 
        complex10.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex2.pow(complex0);
      Object object0 = complex4.ONE.readResolve();
      double double0 = complex1.getArgument();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex4.INF.atan();
      Object object1 = complex5.readResolve();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex7 = complex0.I.add(complex4);
      boolean boolean0 = complex2.equals(object1);
      Complex complex8 = complex3.sqrt();
      boolean boolean1 = complex5.equals(complex8);
      Complex complex9 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.multiply((-4714.46737));
      String string0 = complex3.toString();
      double double1 = complex2.getReal();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.atan();
      boolean boolean0 = complex3.equals(complex2);
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex0.NaN.tan();
      ComplexField complexField1 = complex7.NaN.getField();
      Complex complex8 = complex6.ZERO.sqrt1z();
      Complex complex9 = complex6.INF.multiply(1.5707963267948966);
      List<Complex> list0 = complex6.nthRoot(149);
      Complex complex10 = complex5.negate();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex11.ONE.subtract(complex2);
      double double2 = complex0.getReal();
      Complex complex13 = complex3.atan();
      Complex complex14 = complex5.subtract(complex4);
      Complex complex15 = complex6.exp();
      boolean boolean1 = complex5.isNaN();
      double double3 = complex12.getImaginary();
      Complex complex16 = complex8.sqrt();
      double double4 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.sinh();
      double double1 = complex1.getReal();
      List<Complex> list0 = complex0.nthRoot(252);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex2.NaN.add(complex3);
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex3.INF.log();
      List<Complex> list1 = complex5.nthRoot(208);
      List<Complex> list2 = complex4.nthRoot(252);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-866.365966351), (-753.1525));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.pow(complex0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.multiply(complex2);
      int int1 = complex4.ZERO.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex4.asin();
      String string0 = complex6.toString();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex10.negate();
      double double0 = complex0.getArgument();
      Complex complex13 = complex4.multiply((-1.0));
      Complex complex14 = complex6.multiply(complex3);
      Complex complex15 = complex0.tan();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-3290.6), (-3290.6));
      List<Complex> list0 = complex0.I.nthRoot(1);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.multiply(4369.0);
      Complex complex5 = complex0.ZERO.sinh();
      Object object0 = complex0.ONE.readResolve();
      Complex complex6 = complex4.I.negate();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex4.add(complex3);
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex4.sin();
      Complex complex11 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1035.9), 0.0);
      Complex complex1 = complex0.tanh();
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.INF.multiply(886.455883296);
      Object object0 = complex4.readResolve();
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex5.I.acos();
      Complex complex8 = complex6.ZERO.cosh();
      Complex complex9 = complex8.NaN.cosh();
      double double2 = complex0.getReal();
      boolean boolean0 = complex6.isNaN();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex4.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(805.940164113, 1042.5459660427);
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.ONE.multiply(complex3);
      Complex complex6 = complex4.NaN.acos();
      String string0 = complex4.ONE.toString();
      double double0 = complex0.I.getArgument();
      String string1 = complex2.ZERO.toString();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(1.7976931348623157E308);
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex0.I.multiply(15.0);
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex4.NaN.log();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex6.INF.tanh();
      Complex complex9 = complex8.log();
      Complex complex10 = complex8.ZERO.subtract(complex6);
      int int0 = complex0.I.hashCode();
      Complex complex11 = complex0.ZERO.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex0.tanh();
      try { 
        complex12.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex4.NaN.cos();
      int int0 = complex3.ONE.hashCode();
      Complex complex6 = complex0.multiply((-3480.674469224838));
      Complex complex7 = complex2.tan();
      Complex complex8 = complex0.multiply((-3480.674469224838));
      boolean boolean0 = complex6.isNaN();
      Complex complex9 = complex4.multiply(1895.878513);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex5.multiply(complex2);
      Complex complex9 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.acos();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      List<Complex> list0 = complex0.nthRoot(963);
      Complex complex2 = complex1.createComplex(53.4653096749, 0.0);
      double double0 = complex2.abs();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex2.pow(complex3);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(2214.454875, 0.031);
      Complex complex1 = complex0.ZERO.negate();
      double double0 = complex0.getReal();
      double double1 = complex0.INF.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex1.negate();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex2.INF.acos();
      Complex complex7 = complex3.log();
      Complex complex8 = complex5.divide(complex2);
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-0.7853981633974483), (-0.7853981633974483));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.sqrt1z();
      String string0 = complex2.toString();
      Complex complex3 = complex0.I.acos();
      Object object0 = complex3.I.readResolve();
      ComplexField complexField0 = complex0.ONE.getField();
      Object object1 = complex0.readResolve();
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex4.ONE.cosh();
      double double0 = complex0.ZERO.abs();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.pow(complex0);
      double double0 = complex1.getReal();
      Complex complex3 = complex0.multiply(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.I.createComplex((-0.33333333333333287), 0.0);
      Complex complex5 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-579.8343585747546), (-579.8343585747546));
      String string0 = complex0.toString();
      Complex complex2 = complex0.divide(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.tan();
      double double0 = complex2.ONE.abs();
      double double1 = complex2.NaN.abs();
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex2.createComplex((-579.8343585747546), (-2160.555));
      Complex complex7 = complex6.createComplex((-579.8343585747546), (-579.8343585747546));
      Complex complex8 = complex1.asin();
      List<Complex> list0 = complex5.nthRoot(1);
      boolean boolean0 = complex6.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.tan();
      boolean boolean0 = complex0.equals("");
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.createComplex((-2102.6193358537), (-2102.6193358537));
      Complex complex5 = complex4.I.cosh();
      String string0 = complex4.ONE.toString();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-536.8023994425913), (-501.30004));
      Complex complex1 = complex0.createComplex((-536.8023994425913), 2.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(498.72066644504156, 498.72066644504156);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.atan();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.I.negate();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex1.equals("|U08%JnZ0%FB)%:'wf");
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.conjugate();
      boolean boolean1 = complex3.isNaN();
      Complex complex9 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.negate();
      int int1 = complex1.hashCode();
      Complex complex2 = complex0.sqrt1z();
      try { 
        complex0.nthRoot((-1548));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,548
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.atan();
      try { 
        complex1.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.sin();
      double double0 = complex2.I.getArgument();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tanh();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.INF.subtract(complex2);
      Complex complex6 = complex4.INF.add(complex3);
      Complex complex7 = complex4.INF.multiply(0.0);
      int int0 = 0;
      try { 
        complex2.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex1.INF.sinh();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.INF.divide(complex1);
      Complex complex7 = complex0.sqrt1z();
      int int0 = (-3186);
      Complex complex8 = complex3.I.log();
      try { 
        complex2.nthRoot((-3186));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,186
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.I.sin();
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = complex0.createComplex(731.48, 0.0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.pow(complex5);
      double double1 = complex1.getImaginary();
      Complex complex8 = complex2.tan();
      int int0 = complex6.hashCode();
      Complex complex9 = complex8.divide(complex7);
      Complex complex10 = complex8.divide(complex6);
      Complex complex11 = complex10.NaN.createComplex(0.0, (-3.7461337630615));
      Complex complex12 = complex1.createComplex(0.16666666666666666, 0.0);
      Complex complex13 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.INF.pow(complex5);
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex7.pow(complex3);
      Complex complex9 = complex7.sinh();
      ComplexField complexField0 = complex9.ONE.getField();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex9.NaN.multiply(Double.NaN);
      double double1 = complex0.NaN.abs();
      Complex complex12 = complex10.createComplex(268.3403229, 1.0);
      String string0 = complex7.INF.toString();
      Complex complex13 = complex10.I.cos();
      Complex complex14 = complex10.NaN.conjugate();
      Complex complex15 = complex0.multiply(0.0);
      Complex complex16 = complex9.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex17 = complex4.divide(complex1);
      Complex complex18 = complex17.INF.log();
      ComplexField complexField1 = complex11.getField();
      Complex complex19 = complex11.add(complex5);
      Complex complex20 = complex19.multiply(complex15);
      Complex complex21 = complex17.createComplex(Double.NaN, 0.0);
      Complex complex22 = complex7.pow(complex10);
      Complex complex23 = complex9.tanh();
      Complex complex24 = complex22.sqrt1z();
      Complex complex25 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex0.ONE.divide(complex1);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex5.ONE.negate();
      Complex complex8 = complex7.ONE.conjugate();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.add(complex9);
      Complex complex11 = complex0.cosh();
      String string0 = complex11.INF.toString();
      Complex complex12 = complex1.I.subtract(complex6);
      Object object0 = complex1.readResolve();
      Complex complex13 = complex1.I.sqrt1z();
      List<Complex> list0 = complex5.nthRoot(2425);
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex11.subtract(complex14);
      Complex complex16 = complex14.acos();
      Complex complex17 = complex16.ZERO.cos();
      Complex complex18 = complex17.asin();
      Complex complex19 = complex12.conjugate();
      Complex complex20 = complex7.tanh();
      Complex complex21 = complex7.conjugate();
      Complex complex22 = complex21.NaN.atan();
      Complex complex23 = complex16.INF.sqrt();
      int int0 = complex2.hashCode();
      Complex complex24 = complex17.divide(complex6);
      Complex complex25 = complex10.multiply((double) 2425);
      ComplexField complexField0 = complex16.getField();
      boolean boolean0 = complex24.isInfinite();
      double double0 = complex23.getArgument();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex3.INF.divide(complex0);
      Complex complex6 = complex5.INF.multiply(complex0);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.INF.sqrt1z();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex7.I.sqrt();
      Complex complex11 = complex10.ZERO.negate();
      Complex complex12 = complex0.subtract(complex7);
      Complex complex13 = complex12.ZERO.tan();
      Complex complex14 = complex4.acos();
      String string0 = complex0.toString();
      Complex complex15 = complex1.sqrt();
      Complex complex16 = complex15.multiply((double) 1);
      Complex complex17 = complex14.NaN.tanh();
      Complex complex18 = complex14.acos();
      Complex complex19 = complex18.sinh();
      int int0 = complex2.hashCode();
      double double0 = complex18.getImaginary();
      Complex complex20 = complex18.createComplex(301.08561947353, 0.7853981633974483);
      Complex complex21 = complex4.exp();
      double double1 = complex5.abs();
      int int1 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.multiply(560.5627130445);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.subtract(complex3);
      double double1 = complex2.ZERO.getArgument();
      try { 
        complex2.nthRoot((-147));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -147
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Object object0 = complex1.ZERO.readResolve();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.sinh();
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.sqrt1z();
      String string0 = complex4.toString();
      Complex complex8 = complex3.exp();
      ComplexField complexField0 = complex8.ZERO.getField();
      String string1 = complex8.ZERO.toString();
      double double1 = complex3.getReal();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex10.multiply((-3066.195915886));
      boolean boolean2 = complex7.isNaN();
      Complex complex13 = complex10.sin();
      String string2 = complex10.toString();
      Complex complex14 = complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      List<Complex> list0 = complex1.NaN.nthRoot(1195);
      Complex complex3 = complex0.createComplex(0.2857142686843872, 0.2857142686843872);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.INF.createComplex(0.0, 0.0);
      Complex complex6 = complex2.ZERO.asin();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex3.log();
      Complex complex9 = complex7.add(complex2);
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex1.tan();
      Complex complex12 = complex11.NaN.acos();
      Object object0 = complex12.I.readResolve();
      Complex complex13 = complex11.divide(complex6);
      boolean boolean0 = complex6.isNaN();
      double double0 = complex6.getReal();
      Complex complex14 = complex13.conjugate();
      Complex complex15 = new Complex(0.2857142686843872, 0.2857142686843872);
      Complex complex16 = complex13.subtract(complex15);
      Complex complex17 = complex6.tanh();
      Complex complex18 = complex3.sin();
      List<Complex> list1 = complex3.nthRoot(1195);
      double double1 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      try { 
        complex0.INF.nthRoot((-1537));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,537
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
