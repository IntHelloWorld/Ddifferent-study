/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:23:47 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1046.2));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.abs();
      Complex complex1 = new Complex(0.0, (-1341.99385703185));
      Complex complex2 = complex1.multiply(2049870754);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, (-2810.2));
      double double0 = complex0.ONE.getArgument();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.isInfinite();
      Complex complex2 = complex0.sqrt();
      double double1 = complex0.abs();
      Complex complex3 = complex1.ONE.pow(643.1367516);
      Complex complex4 = complex2.createComplex(2982.24255, (-2810.2));
      Complex complex5 = complex4.NaN.sqrt1z();
      String string0 = complex2.toString();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = Complex.valueOf((-2810.2));
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex7.sin();
      double double2 = complex1.abs();
      Complex complex11 = complex7.divide(2810.2);
      Complex complex12 = complex0.add(578.4375976319);
      Complex complex13 = complex10.conjugate();
      Complex complex14 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(434.79425004);
      Complex complex1 = Complex.valueOf(2.1252856254577637, 434.79425004);
      double double0 = complex1.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex0.ONE.multiply(complex2);
      int int0 = complex2.INF.hashCode();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ZERO.multiply(complex3);
      Complex complex7 = complex6.ZERO.divide(434.79425004);
      String string0 = complex5.ONE.toString();
      int int1 = 2146539969;
      Complex complex8 = complex6.ZERO.sqrt();
      ComplexField complexField0 = complex8.ONE.getField();
      double double1 = complex0.I.abs();
      Complex complex9 = complex0.multiply(2146539969);
      Complex complex10 = complex2.multiply((-2.10770182066344E-8));
      double double2 = complex10.I.abs();
      Complex complex11 = complex5.INF.exp();
      Complex complex12 = complex10.add(complex6);
      Complex complex13 = complex10.exp();
      Complex complex14 = complex13.I.tan();
      double double3 = complex13.abs();
      // Undeclared exception!
      complex7.nthRoot(2146539969);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(17.6);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.sin();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.NaN.createComplex(5.5657084775121975E-8, 5.5657084775121975E-8);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex1.I.add(complex0);
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex5.ONE.subtract(complex0);
      Complex complex7 = complex5.sinh();
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.INF.divide(complex4);
      ComplexField complexField0 = complex10.I.getField();
      Complex complex11 = complex9.ONE.add(17.6);
      Complex complex12 = complex8.INF.asin();
      double double1 = complex0.abs();
      Complex complex13 = complex1.sin();
      Complex complex14 = complex13.subtract(complex4);
      Complex complex15 = complex14.ONE.conjugate();
      Complex complex16 = complex4.sqrt1z();
      Complex complex17 = complex8.divide(17.6);
      Complex complex18 = Complex.valueOf((double) 947);
      List<Complex> list0 = complex4.nthRoot(947);
      String string0 = complex4.toString();
      Complex complex19 = complex11.createComplex(17.6, 17.6);
      boolean boolean0 = complex3.equals(complex18);
      Complex complex20 = complex16.createComplex((-6.781237055082), Double.POSITIVE_INFINITY);
      Complex complex21 = complex5.multiply(947);
      Complex complex22 = complex12.multiply(17.6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.subtract(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.NaN.sin();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex4.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = Complex.valueOf(0.0, 663.8006);
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex9.createComplex(Double.POSITIVE_INFINITY, 663.8006);
      Complex complex11 = complex10.divide(complex2);
      Complex complex12 = complex6.tanh();
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.divide(3.4042761729010895E29);
      Complex complex6 = complex4.ZERO.multiply((-690));
      Object object0 = complex1.readResolve();
      double double0 = complex2.ZERO.abs();
      Object object1 = complex4.INF.readResolve();
      Complex complex7 = Complex.valueOf(1042.920617000954);
      String string0 = complex7.toString();
      Complex complex8 = complex4.INF.multiply(1042.920617000954);
      Complex complex9 = complex8.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.pow(0.0);
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex1.acos();
      Complex complex13 = complex12.cos();
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex4.add(0.0);
      Complex complex16 = complex14.I.subtract(complex15);
      Complex complex17 = complex8.tan();
      Complex complex18 = complex12.exp();
      Complex complex19 = complex12.sin();
      int int0 = complex14.hashCode();
      boolean boolean0 = complex4.isInfinite();
      Complex complex20 = complex2.acos();
      Complex complex21 = complex17.tanh();
      Complex complex22 = complex16.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.INF.add(0.0);
      double double1 = complex0.getImaginary();
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex2.divide(0.0);
      Complex complex6 = complex5.ONE.add(0.0);
      Complex complex7 = complex2.conjugate();
      String string0 = complex5.toString();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.NaN.subtract(0.0);
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex2.ONE.reciprocal();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex12.ONE.conjugate();
      Complex complex14 = complex12.reciprocal();
      Object object0 = complex12.readResolve();
      Complex complex15 = complex4.pow(750.57);
      try { 
        complex15.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getArgument();
      String string0 = complex1.toString();
      Complex complex2 = complex0.tanh();
      double double1 = complex2.NaN.abs();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.add(complex3);
      boolean boolean0 = complex3.equals("(NaN, NaN)");
      Complex complex5 = complex2.NaN.divide(2669.609);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex4.divide(complex3);
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = Complex.valueOf(Double.NaN, 104.546958695513);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2349.16403272696), (-2349.16403272696));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.valueOf((-2349.16403272696));
      int int0 = complex2.hashCode();
      Complex complex7 = complex5.multiply(2.0);
      Complex complex8 = complex7.NaN.multiply((-2349.16403272696));
      Complex complex9 = complex8.NaN.multiply((-9));
      int int1 = complex8.I.hashCode();
      Complex complex10 = complex5.INF.cosh();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex10.NaN.subtract(complex11);
      Complex complex13 = complex2.NaN.sqrt();
      Complex complex14 = complex13.ZERO.add(180.2898);
      String string0 = complex6.toString();
      int int2 = complex1.hashCode();
      double double0 = complex5.getImaginary();
      Complex complex15 = complex1.sin();
      Complex complex16 = complex0.sinh();
      String string1 = complex16.toString();
      String string2 = complex2.toString();
      int int3 = 0;
      try { 
        complex15.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.INF.add(0.0);
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.tan();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 438.64046811;
      Complex complex0 = new Complex(438.64046811, 438.64046811);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-555.28415719), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.pow(259.80967346019);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = Complex.valueOf(941.176791, (-555.28415719));
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex7.ONE.multiply(complex2);
      Complex complex9 = complex1.reciprocal();
      int int0 = complex0.hashCode();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex0.pow(1247.89930275);
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = complex9.multiply(0);
      Complex complex14 = complex13.ONE.conjugate();
      Complex complex15 = complex0.tan();
      Object object0 = complex15.ONE.readResolve();
      int int1 = complex0.hashCode();
      Complex complex16 = complex6.tan();
      String string0 = complex4.toString();
      Complex complex17 = complex9.createComplex((-1035.0), 941.176791);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-12.3), (-4258.38219693101));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex1.NaN.asin();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.log();
      Complex complex9 = complex7.ONE.multiply((-12.3));
      Complex complex10 = complex8.divide((-4258.38219693101));
      Complex complex11 = complex10.I.exp();
      double double0 = complex10.getArgument();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = Complex.valueOf((-4258.38219693101), 0.0);
      Complex complex14 = complex1.subtract((-4258.38219693101));
      Complex complex15 = complex0.sqrt1z();
      double double1 = complex7.getImaginary();
      try { 
        complex7.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex1.INF.log();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex5 = complex3.INF.divide((-1420.554466156));
      List<Complex> list0 = complex5.NaN.nthRoot(1);
      Complex complex6 = complex5.INF.createComplex(0.0, 0.0);
      Complex complex7 = complex0.multiply(1608);
      Complex complex8 = complex7.sinh();
      boolean boolean0 = complex7.isNaN();
      boolean boolean1 = complex0.equals("|s;a[yrs3");
      double double0 = complex7.getArgument();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex9.ONE.multiply((-1.0705722541811197E-7));
      Complex complex11 = complex0.multiply((double) 1608);
      double double1 = complex5.abs();
      Complex complex12 = complex7.log();
      Complex complex13 = complex12.I.tan();
      boolean boolean2 = complex12.equals(complex1);
      double double2 = complex7.abs();
      Complex complex14 = Complex.valueOf(0.0);
      ComplexField complexField1 = complex14.NaN.getField();
      Complex complex15 = complex4.pow(complex14);
      Complex complex16 = complex3.sqrt1z();
      Complex complex17 = complex3.atan();
      Complex complex18 = complex14.reciprocal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-640.3709));
      Complex complex1 = complex0.multiply(248.65296467);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1036.43069));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.subtract((-1036.43069));
      List<Complex> list0 = complex1.I.nthRoot(2946);
      Complex complex3 = complex1.multiply(1);
      Complex complex4 = Complex.valueOf((-1314.73913628951), (-1314.73913628951));
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex1.ONE.exp();
      Complex complex7 = complex0.pow((-1036.43069));
      double double0 = complex3.getArgument();
      Complex complex8 = complex0.ZERO.sinh();
      Complex complex9 = complex0.pow((-1314.73913628951));
      Complex complex10 = complex0.pow((double) 1);
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex1.tan();
      double double2 = complex5.getImaginary();
      Complex complex13 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.multiply(4001.209137);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.createComplex(4001.209137, 4001.209137);
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.ONE.add((-467.776860698));
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex6.pow(4001.209137);
      Complex complex11 = complex8.acos();
      Complex complex12 = complex0.ZERO.pow(complex10);
      Complex complex13 = complex11.negate();
      double double0 = complex7.getReal();
      Complex complex14 = Complex.valueOf(561.045);
      Complex complex15 = complex13.createComplex(1.0, 561.045);
      Complex complex16 = complex15.reciprocal();
      Object object0 = complex6.readResolve();
      Complex complex17 = complex4.negate();
      Complex complex18 = Complex.valueOf(4001.209137);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex(2901.4055, 2901.4055);
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = Complex.valueOf((-1824.0791614457));
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex4.ONE.add(complex0);
      Complex complex6 = complex0.ZERO.sin();
      ComplexField complexField0 = complex4.getField();
      String string0 = complex0.toString();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex6.asin();
      double double0 = complex9.getReal();
      Complex complex10 = complex1.createComplex(2901.4055, 281.743961029946);
      Complex complex11 = complex10.ONE.sqrt1z();
      int int0 = complex10.NaN.hashCode();
      Complex complex12 = complex9.acos();
      List<Complex> list0 = complex12.nthRoot(1124);
      Complex complex13 = Complex.valueOf(0.0, (-1824.0791614457));
      Complex complex14 = complex13.ONE.sinh();
      double double1 = complex0.getReal();
      Complex complex15 = complex11.sqrt1z();
      Complex complex16 = Complex.valueOf((double) 1124, 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.INF.pow(0.0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.NaN.sinh();
      String string0 = complex3.INF.toString();
      Complex complex6 = complex1.INF.divide(0.0);
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      double double0 = complex1.getReal();
      Complex complex8 = complex6.I.reciprocal();
      Complex complex9 = complex8.ONE.multiply(0);
      Complex complex10 = complex8.NaN.add(0.0);
      double double1 = complex7.getArgument();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex0.getImaginary();
      Complex complex11 = complex7.log();
      Complex complex12 = complex6.acos();
      Complex complex13 = complex12.INF.divide(complex10);
      Complex complex14 = complex0.atan();
      Complex complex15 = complex14.ONE.subtract(complex5);
      int int0 = complex1.hashCode();
      Complex complex16 = complex8.divide(complex11);
      Complex complex17 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.add(0.0);
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex1.I.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf((-865.8800694), 1304.021441643);
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = Complex.valueOf((-865.8800694), (-1989.29));
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex2.negate();
      ComplexField complexField0 = complex11.I.getField();
      double double1 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2.81312841469177E128);
      Complex complex2 = complex1.INF.pow(2.81312841469177E128);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.NaN.tan();
      double double0 = complex5.getReal();
      Complex complex7 = complex0.asin();
      double double1 = complex7.getImaginary();
      Complex complex8 = complex7.createComplex(Double.NaN, 0.0);
      Complex complex9 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.ZERO.divide(0.0);
      Complex complex4 = complex3.I.sin();
      int int0 = complex0.hashCode();
      Complex complex5 = complex3.NaN.reciprocal();
      Complex complex6 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.I.subtract(0.0);
      List<Complex> list0 = complex1.NaN.nthRoot(595);
      List<Complex> list1 = complex1.nthRoot(17);
      double double0 = complex6.abs();
      int int1 = complex2.hashCode();
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex0.ONE.pow((double) 17);
      Complex complex9 = complex3.pow(20.0);
      double double1 = complex2.abs();
      double double2 = complex0.getImaginary();
      Complex complex10 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(186.6682043985388, 0.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.ZERO.createComplex((-2336.561963952), 1.8072328567504883);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex4.multiply(361);
      Complex complex9 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ONE.divide(complex0);
      List<Complex> list0 = complex2.NaN.nthRoot(1256);
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.conjugate();
      double double1 = complex3.getArgument();
      Complex complex4 = Complex.valueOf((-2597.792646636), 0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1578.815506267, 1578.815506267);
      Complex complex1 = complex0.I.asin();
      ComplexField complexField0 = complex1.NaN.getField();
      int int0 = complex1.NaN.hashCode();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex3.I.multiply(complex1);
      double double1 = complex0.getReal();
      Complex complex6 = Complex.valueOf(970.0, 0.142645001411438);
      Complex complex7 = complex0.add(1749.9);
      Complex complex8 = complex7.ZERO.multiply(2753.67);
      Complex complex9 = complex1.cos();
      double double2 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 32, (double) 32);
      Complex complex1 = complex0.negate();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex1 = complex0.multiply(3.623110695743118E237);
      Complex complex2 = complex0.subtract((-1468.0));
      int int0 = complex0.hashCode();
      int int1 = complex2.hashCode();
      Complex complex3 = complex0.ONE.divide((-1468.0));
      Complex complex4 = complex3.INF.subtract(complex1);
      String string0 = complex3.I.toString();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.NaN.atan();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex5.log();
      Complex complex9 = complex1.divide((double) 17);
      String string1 = complex9.toString();
      Complex complex10 = complex7.asin();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex11.negate();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex2.isNaN();
      Complex complex13 = complex8.pow(complex6);
      Complex complex14 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-228.54517), (-228.54517));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.tanh();
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = Complex.valueOf((-228.54517), (-3207.9139433072));
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.reciprocal();
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex0.subtract((-20.0));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 110.36647004623084);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = Complex.valueOf(1387.077791575608);
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = complex1.NaN.cosh();
      Complex complex10 = complex8.INF.add(7.091500562953208E248);
      Complex complex11 = complex10.I.multiply(2169.15374099);
      double double0 = complex1.getImaginary();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex7.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex1.INF.multiply(complex0);
      double double1 = complex0.INF.abs();
      double double2 = complex0.abs();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.I.sin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex1.I.add(complex8);
      Object object0 = complex7.INF.readResolve();
      Complex complex10 = complex6.ZERO.tan();
      Complex complex11 = complex0.NaN.subtract((-1893.9));
      Complex complex12 = complex11.add(Double.POSITIVE_INFINITY);
      double double3 = complex1.abs();
      Complex complex13 = complex0.multiply(Double.NaN);
      Complex complex14 = complex1.ZERO.tanh();
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex1.equals(complex6);
      double double4 = complex7.getReal();
      Complex complex15 = complex5.multiply(0.0);
      Complex complex16 = complex2.asin();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1274.8517));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.NaN.pow(0.0);
      Complex complex4 = complex0.conjugate();
      int int0 = complex4.hashCode();
      Complex complex5 = complex3.ONE.pow((-1274.8517));
      Complex complex6 = complex1.atan();
      double double0 = complex3.getArgument();
      Complex complex7 = complex5.multiply(Double.NaN);
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = Complex.valueOf((-2119.0056753819), (-2119.0056753819));
      Complex complex5 = new Complex((-2119.0056753819));
      Complex complex6 = complex4.INF.add(complex5);
      Complex complex7 = complex6.I.asin();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex2.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract((-20.0));
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex2.asin();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex2.reciprocal();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.ONE.asin();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getReal();
      double double2 = complex2.ONE.abs();
      ComplexField complexField1 = complex0.getField();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2510.8471), 0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex2.multiply((-2510.8471));
      Complex complex4 = complex2.negate();
      List<Complex> list0 = complex0.I.nthRoot(1041);
      Object object0 = complex0.readResolve();
      double double0 = complex4.getImaginary();
      Complex complex5 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = Complex.INF;
      int int0 = complex3.NaN.hashCode();
      int int1 = complex1.I.hashCode();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex5.I.subtract(complex2);
      Complex complex7 = complex0.pow(3278.53998797);
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex5.divide(complex1);
      Complex complex10 = complex3.divide((-1779.2058687));
      Complex complex11 = complex3.sin();
      Complex complex12 = complex4.subtract(complex9);
      Complex complex13 = complex5.exp();
      Complex complex14 = complex9.tan();
      Object object0 = complex14.ZERO.readResolve();
      Complex complex15 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex0.subtract((-2202.28328805));
      Complex complex6 = complex5.INF.multiply(105.54749241937);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex1.add(7.901084730502162E-9);
      int int0 = complex8.hashCode();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex9 = complex1.pow(complex3);
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      int int0 = complex1.INF.hashCode();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.sqrt();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(791.7, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = Complex.valueOf(791.7, 6.283185307179586);
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex3.NaN.pow((-1317.0));
      Complex complex6 = complex0.divide(6.283185307179586);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex7 = complex6.add(complex0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(642.530886867674, 642.530886867674);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.INF.pow(642.530886867674);
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex4.ONE.multiply(0.0);
      Complex complex6 = complex4.ONE.reciprocal();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.sinh();
      Object object0 = complex3.ONE.readResolve();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex3.subtract(complex2);
      Complex complex10 = complex9.I.createComplex(642.530886867674, 2.1970362663269043);
      boolean boolean0 = complex1.equals(complex3);
      String string0 = complex9.ONE.toString();
      Object object1 = complex9.readResolve();
      double double0 = complex9.abs();
      ComplexField complexField1 = complex2.getField();
      Complex complex11 = complex3.pow(complex10);
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex4.log();
      double double0 = complex0.getReal();
      Complex complex6 = complex0.acos();
      int int0 = complex6.hashCode();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1275.8251379510637));
      double double0 = complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      double double1 = complex0.getReal();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex5.NaN.cosh();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex1.ONE.cos();
      Complex complex9 = complex4.multiply((-1032));
      Complex complex10 = complex9.multiply((double) (-1032));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.valueOf((-2.1324678121885073E-10), 0.0);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(208.595709953);
      Complex complex1 = complex0.multiply(208.595709953);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1889.0), 0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(408.32990363);
      Complex complex1 = Complex.valueOf(0.0, (-3061.86250479));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex3.ZERO.subtract(complex2);
      double double0 = complex3.ZERO.abs();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ZERO.sqrt1z();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex8 = Complex.valueOf((-3061.86250479));
      Complex complex9 = complex1.add(0.0);
      Complex complex10 = complex9.add(complex2);
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex11.INF.divide(0.0);
      int int0 = complex0.hashCode();
      Complex complex13 = complex6.pow(6.47023467943241E-26);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = Complex.valueOf(1517.7856678049013, 0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.log();
      int int0 = complex0.hashCode();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex0.pow((-3107.504259));
      Complex complex8 = complex4.I.reciprocal();
      double double0 = complex7.ZERO.abs();
      double double1 = complex4.getArgument();
      Complex complex9 = complex8.add(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2297.385085514944, 2297.385085514944);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-33.277));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.ZERO.divide((-33.277));
      Complex complex6 = complex2.subtract(2.4224166870117188);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex6.pow((-3.89604237755475E-134));
      Complex complex9 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1040.2598574540903);
      Complex complex1 = complex0.I.subtract(1040.2598574540903);
      Complex complex2 = complex1.NaN.sqrt();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex(1901.081615, (-1846.6700822));
      Complex complex2 = complex1.pow(109.93167970782699);
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex3.NaN.atan();
      double double0 = complex0.abs();
      Complex complex6 = Complex.valueOf(801.9395962693063);
      double double1 = complex0.getArgument();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex0.NaN.cosh();
      double double2 = complex6.getReal();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex0.NaN.sinh();
      Complex complex12 = complex2.multiply(complex9);
      Complex complex13 = complex6.multiply(complex2);
      Complex complex14 = complex3.divide(complex4);
      boolean boolean0 = complex8.isNaN();
      double double3 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.add(2260.76423);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ONE.pow(2260.76423);
      Object object0 = complex3.INF.readResolve();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex5.multiply(3643.8014);
      int int0 = complex1.NaN.hashCode();
      Complex complex7 = complex3.INF.subtract(3643.8014);
      Complex complex8 = complex3.tanh();
      double double0 = complex0.getImaginary();
      Object object1 = complex3.readResolve();
      Complex complex9 = complex7.add(complex2);
      Complex complex10 = complex9.ZERO.divide(Double.NaN);
      Object object2 = complex0.readResolve();
      Complex complex11 = complex9.NaN.add(complex7);
      Complex complex12 = complex9.INF.sqrt();
      Complex complex13 = Complex.valueOf((-608.462594), 1313.988);
      Complex complex14 = complex9.pow(complex8);
      Complex complex15 = complex2.add((-608.462594));
      Complex complex16 = complex1.pow(1313.988);
      Object object3 = complex0.readResolve();
      Complex complex17 = complex0.NaN.subtract(complex13);
      Complex complex18 = complex1.pow(0.0);
      Complex complex19 = complex18.INF.multiply((-1673.245675));
      Complex complex20 = complex10.log();
      Complex complex21 = complex20.ONE.negate();
      int int1 = complex20.ZERO.hashCode();
      Complex complex22 = complex13.atan();
      Complex complex23 = complex14.exp();
      Complex complex24 = complex4.subtract((-1550.3975274130078));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2089.1848);
      Complex complex1 = complex0.pow(2089.1848);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ONE.createComplex(Double.NaN, 1286.75);
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.divide(2060.076961115);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex3.NaN.atan();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.acos();
      int int0 = complex8.NaN.hashCode();
      double double0 = complex0.getArgument();
      Complex complex9 = complex5.asin();
      List<Complex> list0 = complex9.nthRoot(1321);
      String string0 = complex7.toString();
      Complex complex10 = complex2.multiply(2305);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ONE.pow(complex2);
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex1.pow(complex2);
      double double0 = complex1.getImaginary();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1126.9883111702875));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex1.ZERO.pow((-1126.9883111702875));
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex0.ONE.divide(complex5);
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.sqrt();
      boolean boolean0 = complex7.isInfinite();
      Complex complex11 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-406.55274340826));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-228.54517), (-228.54517));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.tanh();
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = Complex.valueOf((-228.54517), (-3207.9139433072));
      Complex complex4 = complex2.ONE.tanh();
      Complex complex5 = complex0.reciprocal();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.subtract((-20.0));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-284.8));
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.atan();
      double double1 = complex2.ZERO.abs();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.valueOf(1.78211222185955E-7, 0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.createComplex(4966.744, (-764.652));
      Complex complex3 = complex0.atan();
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.ZERO.subtract(complex1);
      Complex complex6 = complex4.ONE.add(0.0);
      double double0 = complex0.getArgument();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(600.0);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.INF.multiply((-1));
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1530.29835621419));
      List<Complex> list0 = complex0.ZERO.nthRoot(689);
      Complex complex1 = complex0.ZERO.createComplex(689, 689);
      Complex complex2 = complex0.NaN.add(0.0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.multiply(633);
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex0.I.divide(complex4);
      Complex complex7 = complex4.ZERO.divide((-1796.87121086));
      double double0 = complex1.getReal();
      Complex complex8 = complex7.subtract((double) 689);
      Complex complex9 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-5.159602957634814E-9), 2.2645654678344727);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.INF.exp();
      Complex complex7 = complex5.divide((-5.159602957634814E-9));
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1571.7));
      Complex complex1 = complex0.ONE.divide((-1571.7));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ZERO.add(Double.NaN);
      Complex complex3 = complex2.ONE.multiply(0);
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(1.0, 1.0);
      Complex complex4 = complex1.add(1.0);
      double double1 = complex4.getImaginary();
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.NaN.sin();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.divide((-2200.10491));
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-181);
      try { 
        complex0.NaN.nthRoot((-181));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -181
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.multiply(2493);
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = Complex.valueOf((-2.0821912536551675E-8));
      String string0 = complex3.I.toString();
      double double0 = complex0.abs();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.atan();
      int int0 = complex2.hashCode();
      double double1 = complex3.abs();
      Complex complex6 = Complex.valueOf((-3468.605428), 0.0);
      Complex complex7 = complex3.subtract(0.0);
      double double2 = complex5.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2490.933);
      Complex complex1 = complex0.acos();
      int int0 = complex1.ONE.hashCode();
      List<Complex> list0 = complex1.INF.nthRoot(1171);
      Complex complex2 = complex1.ONE.add(2490.933);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.ZERO.sqrt1z();
      double double0 = complex0.NaN.abs();
      String string0 = complex4.toString();
      Complex complex6 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex0.pow(0.0);
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex6.pow((double) (-1));
      Complex complex8 = complex6.add(complex3);
      boolean boolean0 = complex5.isNaN();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex8.exp();
      Complex complex12 = complex7.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(3024.66, 3024.66);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex1.NaN.pow(1317.7181614394);
      Complex complex4 = complex3.I.exp();
      double double0 = complex3.NaN.getArgument();
      Complex complex5 = complex1.I.multiply(complex0);
      Complex complex6 = Complex.valueOf(3024.66, 1.8700714111328125);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex0.acos();
      Complex complex9 = Complex.valueOf(3024.66);
      int int0 = complex8.hashCode();
      Complex complex10 = complex9.tanh();
      double double1 = 2918.630199909;
      Complex complex11 = Complex.valueOf(2918.630199909);
      Complex complex12 = complex9.subtract(complex8);
      ComplexField complexField0 = complex12.ZERO.getField();
      Complex complex13 = complex10.ZERO.negate();
      boolean boolean0 = complex8.isInfinite();
      boolean boolean1 = complex10.equals(complex9);
      Complex complex14 = complex9.divide(complex8);
      Complex complex15 = complex9.sin();
      Complex complex16 = complex14.acos();
      Complex complex17 = complex16.NaN.negate();
      try { 
        complex6.nthRoot((-1382));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,382
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex0.ZERO.negate();
      Complex complex7 = complex4.ONE.atan();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.tan();
      double double0 = complex9.INF.abs();
      int int0 = complex8.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex2.subtract(0.0);
      Complex complex11 = complex4.ONE.divide(3404.25674052);
      Object object0 = complex10.readResolve();
      boolean boolean1 = complex4.isInfinite();
      List<Complex> list1 = complex2.nthRoot(1);
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex2.negate();
      boolean boolean2 = complex2.isNaN();
      Complex complex15 = complex7.tan();
      Complex complex16 = complex0.exp();
      Complex complex17 = complex0.tanh();
      Object object1 = complex17.readResolve();
      String string0 = complex10.toString();
      Complex complex18 = complex12.divide((double) 1);
      Object object2 = complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.sqrt1z();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf((-3239.683), 0.0);
      Complex complex5 = complex4.cos();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex6 = Complex.valueOf((-2160.821), (-2160.821));
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.I.add(complex3);
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex11.NaN.subtract(complex6);
      Complex complex13 = complex12.atan();
      Complex complex14 = complex12.ONE.negate();
      Complex complex15 = complex14.divide(complex9);
      Complex complex16 = complex11.I.multiply(complex5);
      Complex complex17 = complex0.multiply((-2160.821));
      Complex complex18 = complex17.ZERO.acos();
      Complex complex19 = complex1.sinh();
      Complex complex20 = Complex.ONE;
      Complex complex21 = complex5.subtract(complex20);
      Complex complex22 = complex18.acos();
      Complex complex23 = complex2.add((-520.5214752125622));
      Complex complex24 = complex18.atan();
      double double0 = complex19.abs();
      Complex complex25 = complex3.createComplex((-2160.821), 0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(3845.047468, 0.0);
      Complex complex1 = complex0.INF.acos();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex4.ZERO.subtract(1520.107);
      Complex complex7 = complex1.ONE.subtract(0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.ZERO.tan();
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex4.tanh();
      ComplexField complexField1 = complex2.INF.getField();
      Complex complex11 = complex8.negate();
      Complex complex12 = complex11.I.add(complex7);
      Complex complex13 = complex9.divide(complex2);
      Complex complex14 = complex8.sqrt();
      Complex complex15 = complex13.ZERO.cosh();
      Complex complex16 = complex15.ZERO.sqrt();
      Complex complex17 = complex13.INF.createComplex(3845.047468, 1.3726137091534984E303);
      Complex complex18 = complex14.INF.pow(complex0);
      Complex complex19 = complex14.NaN.sin();
      double double1 = complex13.getImaginary();
      Complex complex20 = complex19.sin();
      Complex complex21 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract(0.0);
      List<Complex> list0 = complex0.nthRoot(2393);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex4.ONE.log();
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex0.subtract(781.9060001);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex0.NaN.acos();
      Complex complex11 = complex8.ZERO.cosh();
      boolean boolean0 = complex7.equals(complex1);
      Complex complex12 = complex0.atan();
      Complex complex13 = complex12.ZERO.createComplex(2393, 781.9060001);
      Complex complex14 = complex12.reciprocal();
      Complex complex15 = complex13.asin();
      Complex complex16 = complex1.multiply(1338.84316297);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(2.0);
      double double0 = complex1.ZERO.abs();
      Complex complex2 = new Complex(0.0, 2609.762103594);
      Complex complex3 = complex2.add(2160.7455);
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex0.I.multiply(complex2);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.NaN.tan();
      List<Complex> list0 = complex5.I.nthRoot(429);
      int int0 = complex7.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex3.INF.subtract(2609.762103594);
      double double1 = complex6.abs();
      Complex complex9 = complex5.NaN.conjugate();
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex5.sin();
      double double2 = complex0.getArgument();
      Complex complex13 = complex3.tan();
      Complex complex14 = complex6.atan();
      Complex complex15 = complex0.pow(0.6223390102386475);
      Complex complex16 = complex7.acos();
      Complex complex17 = complex13.reciprocal();
      Complex complex18 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex6.multiply(706);
      Complex complex9 = complex8.NaN.asin();
      String string0 = complex8.NaN.toString();
      Complex complex10 = complex2.add(complex8);
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex3.createComplex(706, 0.0);
      double double0 = complex7.getImaginary();
      Complex complex13 = complex12.add(Double.NaN);
  }
}
