/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:13:30 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-6.50348962894948E133), (-6.50348962894948E133));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex0.divide((-6.50348962894948E133));
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.conjugate();
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex8.ZERO.asin();
      Complex complex11 = complex10.I.subtract(complex0);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex8.divide(complex12);
      double double0 = complex9.getReal();
      double double1 = complex12.getImaginary();
      Complex complex14 = complex7.negate();
      Complex complex15 = complex1.tan();
      Complex complex16 = complex1.multiply(complex4);
      Complex complex17 = complex8.sin();
      Complex complex18 = complex15.createComplex((-6.50348962894948E133), (-3209.2269452456));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex4.tan();
      String string0 = complex4.ZERO.toString();
      Complex complex6 = complex4.NaN.atan();
      Complex complex7 = complex4.NaN.reciprocal();
      Complex complex8 = complex0.subtract(2045.6873658488778);
      boolean boolean0 = complex4.equals(complex0);
      Complex complex9 = Complex.valueOf((-356.49769), 2045.6873658488778);
      Complex complex10 = complex6.tan();
      Complex complex11 = complex10.add((-83.010548));
      Complex complex12 = complex4.pow(2881.4);
      boolean boolean1 = complex2.isInfinite();
      Complex complex13 = complex8.NaN.cosh();
      Complex complex14 = complex5.add(2.0599991793068063E262);
      Complex complex15 = complex8.sqrt();
      Complex complex16 = complex15.ONE.tan();
      Object object0 = complex16.I.readResolve();
      double double0 = complex3.abs();
      Complex complex17 = complex8.sin();
      Complex complex18 = complex17.NaN.multiply(1.0);
      Complex complex19 = complex12.pow((-1.8921091400297595E93));
      double double1 = complex5.getReal();
      Complex complex20 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add(3611.0);
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.valueOf(3611.0);
      Complex complex5 = complex2.ZERO.atan();
      Complex complex6 = complex1.createComplex((-1755.2), (-885.81473468924));
      Complex complex7 = Complex.valueOf(0.0);
      double double0 = complex0.getReal();
      Complex complex8 = complex0.reciprocal();
      boolean boolean0 = complex8.equals(complex1);
      Complex complex9 = complex0.sqrt();
      double double1 = complex9.INF.abs();
      Complex complex10 = new Complex(0.0, Double.NaN);
      Complex complex11 = complex4.ONE.exp();
      Complex complex12 = complex9.INF.multiply(complex10);
      Complex complex13 = complex2.sqrt();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex14.INF.add(0.0);
      Complex complex16 = complex4.pow(complex14);
      try { 
        complex14.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(426.930222, 426.930222);
      Complex complex1 = complex0.INF.add(426.930222);
      Complex complex2 = complex1.NaN.multiply((-322));
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.multiply((-2470));
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.divide(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex0.tan();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex4 = complex3.atan();
      double double0 = complex4.getImaginary();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = Complex.valueOf(6871.1568);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex2.ONE.sin();
      Complex complex7 = complex4.I.tanh();
      Complex complex8 = complex2.NaN.log();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex9 = complex0.divide(Double.POSITIVE_INFINITY);
      double double1 = complex9.INF.getArgument();
      Complex complex10 = complex0.acos();
      boolean boolean0 = complex10.equals("");
      String string0 = complex0.toString();
      Complex complex11 = complex0.INF.log();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.I.getField();
      ComplexField complexField1 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.conjugate();
      int int0 = complex0.INF.hashCode();
      Complex complex6 = complex1.I.pow(623.4779);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex7.multiply(Double.NaN);
      int int1 = complex0.hashCode();
      Complex complex9 = complex0.ZERO.createComplex(Double.NaN, 1653.148279965139);
      int int2 = complex3.hashCode();
      Complex complex10 = complex5.log();
      Complex complex11 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1172.478974, 1172.478974);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt();
      double double0 = complex1.getImaginary();
      Complex complex3 = complex0.exp();
      ComplexField complexField0 = complex1.getField();
      int int0 = complex3.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.subtract(complex3);
      int int1 = complex1.hashCode();
      Object object0 = complex4.readResolve();
      double double1 = complex5.getImaginary();
      Complex complex6 = complex5.pow(complex2);
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.valueOf(0.1256551444530487);
      String string0 = complex1.toString();
      Complex complex2 = complex1.ONE.add(1907.04284033457);
      String string1 = complex1.toString();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.pow(complex0);
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex0.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(604.01082, 604.01082);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = Complex.valueOf((-1187.8256776819126), (-1187.8256776819126));
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.multiply(complex3);
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex6.sqrt();
      Object object0 = complex3.readResolve();
      Complex complex8 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-448.822539));
      Complex complex1 = complex0.add((-448.822539));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.INF.add((-448.822539));
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.I.log();
      double double0 = complex4.I.abs();
      ComplexField complexField1 = complex0.I.getField();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.valueOf(0.0, 1.0);
      Complex complex9 = complex7.I.pow(complex4);
      Complex complex10 = complex9.ZERO.sinh();
      List<Complex> list0 = complex7.nthRoot(1);
      Object object0 = complex7.readResolve();
      Complex complex11 = complex0.divide(complex7);
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex8.pow(complex6);
      String string0 = complex0.INF.toString();
      Complex complex14 = complex10.sinh();
      Complex complex15 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 3344.0023031308;
      Complex complex0 = new Complex(3344.0023031308);
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.pow((-1655.8958320217034));
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex3.NaN.readResolve();
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-486.813385));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.reciprocal();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex0.ZERO.pow(0.0);
      Complex complex6 = complex3.ZERO.add(complex2);
      Complex complex7 = Complex.valueOf((-486.813385));
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.I.divide(complex3);
      Complex complex10 = complex7.exp();
      Complex complex11 = complex7.sqrt();
      double double0 = complex7.getArgument();
      Complex complex12 = complex7.multiply(complex3);
      Complex complex13 = complex7.conjugate();
      Complex complex14 = Complex.valueOf((-486.813385), (double) 1);
      Complex complex15 = complex6.negate();
      Complex complex16 = complex15.multiply((double) 1);
      Complex complex17 = complex16.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex18 = complex15.pow(0.0);
      Complex complex19 = complex3.conjugate();
      boolean boolean0 = complex10.equals(complex13);
      Complex complex20 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(86.446109539508, 2637.25);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.NaN.pow((-1510.6861961487086));
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex0.divide(0.11865071952342987);
      double double1 = complex0.getReal();
      Complex complex6 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.NaN.sqrt();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.NaN.log();
      double double0 = complex3.INF.abs();
      Complex complex5 = complex2.createComplex((-20.0), (-2300.522873));
      double double1 = complex3.getReal();
      List<Complex> list0 = complex1.nthRoot(1398);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex1.cosh();
      double double2 = complex6.getReal();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex5.ZERO.pow(3766.669614975548);
      Complex complex10 = complex5.add(complex4);
      Complex complex11 = complex10.ZERO.add((-1.0));
      Complex complex12 = complex10.I.tanh();
      Complex complex13 = Complex.valueOf((-1.0));
      Complex complex14 = complex2.sin();
      double double3 = complex2.getImaginary();
      Complex complex15 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.I.atan();
      double double1 = complex0.ONE.getArgument();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.subtract(complex0);
      double double2 = complex0.INF.abs();
      Complex complex3 = complex0.sinh();
      boolean boolean0 = complex1.isNaN();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex4.ONE.sqrt1z();
      Complex complex8 = complex7.I.atan();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.subtract(complex4);
      Complex complex11 = complex10.ZERO.subtract(687.2839958236463);
      Complex complex12 = complex10.ZERO.exp();
      Complex complex13 = complex1.sinh();
      int int0 = complex13.ONE.hashCode();
      Complex complex14 = complex9.log();
      double double3 = complex12.getReal();
      Complex complex15 = complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex16 = complex13.conjugate();
      Complex complex17 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1.2639113706171572E250, 1.2639113706171572E250);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = Complex.valueOf((-153.863007458));
      Complex complex4 = complex2.INF.subtract(complex3);
      Complex complex5 = Complex.valueOf((-7.253671992213344E-296), 1.2639113706171572E250);
      Complex complex6 = complex0.createComplex(866.332527009, 1002.985);
      Complex complex7 = complex6.ONE.tanh();
      int int0 = complex7.hashCode();
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex6.atan();
      Complex complex11 = complex4.I.add(0.0);
      Complex complex12 = complex10.ONE.add(0.0);
      Object object0 = complex6.INF.readResolve();
      ComplexField complexField0 = complex12.ZERO.getField();
      Complex complex13 = complex10.pow(complex6);
      double double0 = complex13.getArgument();
      Complex complex14 = complex13.I.tanh();
      Complex complex15 = complex13.sinh();
      int int1 = complex6.hashCode();
      double double1 = complex0.abs();
      Complex complex16 = Complex.valueOf(0.541453187488383);
      Complex complex17 = complex14.reciprocal();
      Complex complex18 = complex0.divide(complex8);
      Complex complex19 = complex7.sqrt();
      boolean boolean0 = complex5.equals(complex4);
      ComplexField complexField1 = complex3.getField();
      Complex complex20 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-128.0));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ZERO.divide(complex0);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = Complex.valueOf((-128.0));
      Complex complex6 = complex0.I.cos();
      Complex complex7 = complex0.INF.sqrt1z();
      Complex complex8 = complex1.INF.multiply(1446);
      Complex complex9 = complex5.NaN.atan();
      Complex complex10 = complex5.log();
      Complex complex11 = complex9.INF.negate();
      Complex complex12 = complex5.acos();
      boolean boolean1 = complex0.isNaN();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex1.acos();
      double double0 = complex4.abs();
      boolean boolean2 = complex2.isNaN();
      Complex complex15 = complex5.add(complex13);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2058.0228, 2058.0228);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.sinh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.pow(2058.0228);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.valueOf(2058.0228, 2058.0228);
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex10.subtract(complex7);
      ComplexField complexField0 = complex12.getField();
      Complex complex13 = complex6.subtract(0.0);
      Complex complex14 = complex6.divide(complex9);
      boolean boolean0 = complex4.isNaN();
      Complex complex15 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-3002.3328127952796), 0.0);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex3.ONE.pow(1.0);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.exp();
      ComplexField complexField1 = complex6.ZERO.getField();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex7.NaN.multiply(887);
      Complex complex9 = complex8.ONE.multiply(complex1);
      Complex complex10 = Complex.valueOf(1.0);
      Complex complex11 = complex10.INF.add(complex6);
      Complex complex12 = complex10.tan();
      boolean boolean1 = complex1.isInfinite();
      Complex complex13 = complex12.reciprocal();
      boolean boolean2 = complex0.isNaN();
      Object object0 = complex5.readResolve();
      boolean boolean3 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(924.42);
      Complex complex1 = complex0.atan();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex1.I.divide(924.42);
      Complex complex3 = complex0.subtract(133.412);
      Complex complex4 = Complex.valueOf((-61.93093418388));
      Complex complex5 = complex3.conjugate();
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = complex2.createComplex((-61.93093418388), 924.42);
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex4.add(complex7);
      Complex complex10 = complex4.conjugate();
      double double1 = complex9.abs();
      double double2 = complex8.getArgument();
      Complex complex11 = complex9.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-282.93261), (-282.93261));
      Complex complex1 = Complex.valueOf((-282.93261), (-282.93261));
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.reciprocal();
      List<Complex> list0 = complex0.ONE.nthRoot(2462);
      Complex complex4 = Complex.valueOf((-282.93261));
      Complex complex5 = complex0.ZERO.divide(complex1);
      Complex complex6 = complex5.NaN.add(complex3);
      double double0 = complex0.abs();
      Complex complex7 = complex5.ONE.negate();
      Complex complex8 = complex5.pow((-282.93261));
      double double1 = complex5.getReal();
      Complex complex9 = complex1.tanh();
      Complex complex10 = Complex.valueOf(2002.4019160285);
      Complex complex11 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(98.16227015529763);
      Complex complex1 = complex0.pow(98.16227015529763);
      Complex complex2 = Complex.valueOf(98.16227015529763, 98.16227015529763);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.subtract(98.16227015529763);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = Complex.valueOf(98.16227015529763);
      Complex complex6 = complex1.ZERO.conjugate();
      double double0 = complex3.NaN.abs();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex3.add(complex0);
      double double1 = complex8.abs();
      Complex complex9 = complex2.acos();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex5.pow(complex8);
      Complex complex11 = complex2.sin();
      Complex complex12 = complex11.INF.log();
      boolean boolean1 = complex6.equals(complex4);
      Complex complex13 = complex6.conjugate();
      Complex complex14 = complex1.atan();
      int int0 = complex12.hashCode();
      Complex complex15 = complex14.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex2.INF.tanh();
      double double0 = complex0.abs();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex3.INF.divide(Double.NaN);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.INF.cosh();
      boolean boolean0 = complex8.equals(complex4);
      Complex complex10 = complex0.tan();
      Complex complex11 = Complex.valueOf(0.0);
      boolean boolean1 = complex3.isInfinite();
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex12.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1305.3013514948304));
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 4.250734424415339E-289;
      Complex complex0 = new Complex(4.250734424415339E-289, 4.250734424415339E-289);
      Complex complex1 = complex0.createComplex(4.250734424415339E-289, (-3902.37));
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.INF.multiply((-1872));
      int int0 = 0;
      try { 
        complex0.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(1.2530649392922358E-242, 1.2530649392922358E-242);
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex4.divide(complex3);
      String string0 = complex3.toString();
      Complex complex6 = complex0.I.log();
      Complex complex7 = complex6.I.asin();
      double double0 = complex7.INF.getArgument();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex2.INF.tanh();
      Complex complex10 = complex8.ZERO.sqrt();
      Complex complex11 = complex1.createComplex(7.75933511025868E163, 0.0);
      Complex complex12 = complex11.NaN.subtract(complex1);
      double double1 = complex2.getReal();
      Complex complex13 = complex8.tan();
      Object object0 = complex1.readResolve();
      Complex complex14 = complex2.createComplex(1.2530649392922358E-242, (-2149.45616683061));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2205.43055375);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex1.subtract(2205.43055375);
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex2.multiply(complex5);
      String string0 = complex7.toString();
      Complex complex8 = complex2.add(2205.43055375);
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = Complex.valueOf(2473.619658);
      Complex complex10 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1161.58529));
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.INF.subtract(2.0);
      Complex complex2 = complex1.NaN.multiply(17);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.pow((-1161.58529));
      Complex complex6 = Complex.valueOf((-1161.58529), 760.82658871);
      Complex complex7 = complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = complex0.cosh();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex0.reciprocal();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(531.0863);
      Complex complex1 = complex0.ONE.cosh();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3855429446520427E-49);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.atan();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = Complex.valueOf(3.3855429446520427E-49);
      Complex complex7 = complex2.createComplex(0.0, (-352.309));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(3089.83662261943);
      int int0 = complex3.ZERO.hashCode();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex5.ONE.createComplex(543.54, Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.I.pow(Double.POSITIVE_INFINITY);
      Object object0 = complex7.ZERO.readResolve();
      Complex complex9 = Complex.valueOf((-1.0953484767704112E226), Double.POSITIVE_INFINITY);
      Object object1 = complex0.ZERO.readResolve();
      Complex complex10 = complex1.INF.sqrt1z();
      Complex complex11 = complex0.subtract((-122.58046124730767));
      Complex complex12 = complex11.ONE.atan();
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.ZERO.pow(complex11);
      Complex complex15 = complex14.ZERO.reciprocal();
      Complex complex16 = complex1.add(complex13);
      Complex complex17 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2543.22807897385), (-1066.9745372607));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.multiply((-1292));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.multiply((double) (-1292));
      ComplexField complexField1 = complex5.ONE.getField();
      Complex complex6 = complex5.INF.subtract((-2543.22807897385));
      Complex complex7 = Complex.valueOf((double) (-1292));
      ComplexField complexField2 = complex0.getField();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.I.sinh();
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex1.subtract(0.0);
      Complex complex12 = complex10.sqrt1z();
      try { 
        complex1.nthRoot((-1292));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,292
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1239.0);
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(0.0, (-2223.0));
      Complex complex3 = complex0.I.divide(20.0);
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.ONE.multiply((-2223.0));
      Complex complex7 = complex0.add(complex2);
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex0.ONE.sin();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex7.add(1239.0);
      Complex complex11 = complex10.I.atan();
      Complex complex12 = complex10.conjugate();
      String string0 = complex11.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-1.5453111533064765E19);
      Complex complex0 = Complex.valueOf((-1.5453111533064765E19));
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.exp();
      double double0 = complex2.NaN.abs();
      Complex complex3 = Complex.valueOf(Double.NaN, (-2006.3853983));
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = Complex.valueOf(0.0, 1565.454602807);
      Complex complex7 = complex0.acos();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex7.conjugate();
      double double1 = complex0.abs();
      Complex complex9 = complex8.INF.pow(Double.NaN);
      Complex complex10 = complex7.sin();
      double double2 = complex3.getImaginary();
      Complex complex11 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex3.multiply(Double.POSITIVE_INFINITY);
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex2.I.divide(complex1);
      double double0 = complex5.INF.getArgument();
      Complex complex6 = complex0.ONE.pow(complex1);
      String string0 = complex0.ONE.toString();
      Complex complex7 = complex0.acos();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex7.add(complex0);
      Complex complex10 = complex9.INF.pow(complex0);
      Complex complex11 = complex9.ZERO.add(complex1);
      Complex complex12 = Complex.valueOf(0.0);
      Object object0 = complex9.readResolve();
      Complex complex13 = complex2.INF.log();
      String string1 = complex3.toString();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.1011920825226876E-8, 4.1011920825226876E-8);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex2);
      int int0 = complex2.INF.hashCode();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-4906.4123955));
      Complex complex1 = complex0.multiply(1);
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.ZERO.divide(complex2);
      double double0 = complex2.getArgument();
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex2.asin();
      List<Complex> list0 = complex0.nthRoot(1120);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.INF.sinh();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2506.9814643138), (-2506.9814643138));
      Complex complex1 = complex0.asin();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.INF.multiply((-1670.40454));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.multiply(37);
      Complex complex5 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf((-1485.74), (-1485.74));
      List<Complex> list0 = complex3.nthRoot(1481);
      double double0 = complex1.abs();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      List<Complex> list0 = complex0.nthRoot(1039);
      double double0 = complex0.abs();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex0.add(0.0);
      List<Complex> list1 = complex2.nthRoot(2579);
      double double1 = complex2.abs();
      Complex complex3 = complex0.add(complex2);
      double double2 = complex3.getArgument();
      double double3 = complex0.getArgument();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-319.0), 0.0);
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.I.multiply((-319.0));
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex4.INF.tanh();
      Complex complex9 = complex2.I.tan();
      try { 
        complex4.nthRoot((-743));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -743
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-262.513963), (-262.513963));
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      int int0 = 0;
      Complex complex2 = complex0.NaN.subtract((double) 0);
      Complex complex3 = complex0.multiply(0);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex2.INF.readResolve();
      boolean boolean0 = complex2.equals("]\u0000)I)}}se2Uxs`2q");
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.NaN.add(complex4);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex2.cos();
      int int1 = complex0.I.hashCode();
      Complex complex8 = complex7.multiply(complex6);
      try { 
        complex6.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1098.54227771157));
      Complex complex1 = complex0.sinh();
      try { 
        complex0.nthRoot((-2312));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,312
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex2.createComplex((-2266.1779252021), 971.2017374660073);
      Complex complex4 = complex3.cosh();
      double double0 = complex0.ZERO.abs();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.sin();
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex5.add((-20.0));
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex2.sin();
      int int0 = complex1.hashCode();
      Complex complex10 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1167.0), (-1167.0));
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.7527887552743672E-8), (-2.7527887552743672E-8));
      Complex complex1 = complex0.INF.multiply(2.0121798515319824);
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.pow(734.146249);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, (-4677.861));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.NaN.divide(complex2);
      double double0 = complex1.abs();
      Complex complex4 = complex1.ZERO.add(0.0);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(1106.043232, 1106.043232);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tan();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2739.135034014, 914.6);
      Complex complex1 = complex0.I.pow(1122.82);
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex1.I.subtract(0.0);
      Complex complex4 = complex0.log();
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex4.atan();
      double double1 = complex5.getArgument();
      Complex complex7 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2408.0620141723507), (-1012.57296328186));
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.0, (-1012.57296328186));
      Complex complex3 = Complex.valueOf(0.0);
      int int0 = complex2.INF.hashCode();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.ONE.pow((-2408.0620141723507));
      Complex complex8 = complex1.tan();
      boolean boolean0 = complex6.isNaN();
      Complex complex9 = complex6.sin();
      String string0 = complex6.toString();
      Complex complex10 = Complex.valueOf(5.1847060206155E21, 0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1.6829556040859853E-124);
      Complex complex1 = complex0.INF.divide(1.6829556040859853E-124);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.NaN.cos();
      int int0 = complex0.INF.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex6.INF.sinh();
      double double0 = complex0.abs();
      Complex complex8 = complex4.divide(complex0);
      Complex complex9 = complex7.subtract(548.1617);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      String string0 = complex0.toString();
      Complex complex2 = complex0.I.asin();
      double double0 = complex0.abs();
      Complex complex3 = complex1.add(Double.NaN);
      Complex complex4 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.INF.createComplex(Double.NaN, Double.NaN);
      String string1 = complex0.toString();
      double double1 = complex0.getReal();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex0.pow(0.6527930498123169);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex6.atan();
      Complex complex11 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex0.INF.cosh();
      Complex complex5 = complex1.createComplex((-1484.39022808791), 0.0);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex1.subtract((-1484.39022808791));
      Complex complex7 = complex6.ONE.divide(0.0);
      Complex complex8 = complex1.pow(0.0);
      Complex complex9 = complex7.exp();
      double double1 = complex8.getArgument();
      Complex complex10 = complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1764.5455194);
      Complex complex2 = complex0.NaN.multiply(585);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.exp();
      boolean boolean0 = complex4.isInfinite();
      double double0 = complex4.getImaginary();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.multiply((-1896));
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex5 = complex3.subtract((-38.427274243));
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex5.ZERO.add(complex6);
      Complex complex9 = complex8.ONE.divide((double) (-1896));
      Complex complex10 = complex0.add(complex3);
      Complex complex11 = complex0.divide(complex2);
      Complex complex12 = complex6.conjugate();
      Complex complex13 = complex12.divide(0.0);
      Complex complex14 = complex5.log();
      Complex complex15 = complex12.ZERO.subtract(complex7);
      Complex complex16 = complex13.INF.tanh();
      Complex complex17 = complex16.NaN.exp();
      Complex complex18 = complex17.NaN.pow(0.0);
      Complex complex19 = complex12.multiply((-1896));
      Complex complex20 = complex10.multiply(complex12);
      Complex complex21 = complex12.tanh();
      ComplexField complexField1 = complex21.getField();
      Complex complex22 = complex1.divide(complex4);
      Complex complex23 = complex8.tanh();
      boolean boolean0 = complex10.isNaN();
      Complex complex24 = complex12.multiply(complex20);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.valueOf(647.5755056247316);
      Complex complex3 = complex2.INF.atan();
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.log();
      double double1 = complex4.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.subtract(647.5755056247316);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.I.pow(0.0);
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-2511.745));
      Complex complex2 = complex0.add(1483.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.tanh();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = complex0.ONE.divide(0.0);
      Complex complex4 = complex0.divide((-5430.455530675155));
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.ONE.createComplex(0.0, (-1504.0097060955015));
      Complex complex11 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = Complex.valueOf(0.0, Double.NaN);
      Complex complex5 = complex4.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.atan();
      double double0 = complex6.abs();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex7 = complex0.NaN.sqrt1z();
      Complex complex8 = complex1.asin();
      Complex complex9 = Complex.valueOf(0.0, (-6.883499809714189E297));
      Complex complex10 = complex6.multiply(1);
      double double1 = complex9.getReal();
      Complex complex11 = Complex.valueOf(4843.04075017558, Double.POSITIVE_INFINITY);
      Complex complex12 = complex3.pow(complex8);
      List<Complex> list1 = complex12.INF.nthRoot(1);
      double double2 = complex12.getReal();
      boolean boolean0 = complex8.isInfinite();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-1473.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex1.ZERO.divide(complex2);
      Complex complex6 = complex1.cos();
      Complex complex7 = Complex.valueOf((-1473.0));
      Complex complex8 = complex7.pow(1086.5868721844);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex7.createComplex((-1473.0), (-1473.0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex1.divide(Double.NaN);
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex4.asin();
      Complex complex9 = Complex.valueOf(Double.NaN, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.6808650493621826, 0.6808650493621826);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.pow(complex0);
      List<Complex> list0 = complex2.nthRoot(1260);
      Complex complex4 = complex1.multiply(437);
      Complex complex5 = complex4.multiply(complex0);
      double double0 = complex2.getImaginary();
      Complex complex6 = Complex.valueOf(1.0, (double) 1260);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = Complex.valueOf((-3476.235));
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.ZERO.pow(2.1906094551086426);
      Complex complex3 = complex0.add(1030.2039470312118);
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.pow(1140.3608487);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.ONE.divide(complex7);
      Complex complex9 = Complex.valueOf((-1111.72421), (-3319.47834));
      Complex complex10 = complex1.cos();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex7.subtract(complex11);
      double double0 = complex1.getImaginary();
      double double1 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.NaN.atan();
      List<Complex> list0 = complex2.nthRoot(830);
      double double0 = complex0.getImaginary();
      double double1 = complex4.abs();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      double double0 = complex1.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1016.8), (-1016.8));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField1 = complex5.INF.getField();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply((-3321.509));
      Complex complex2 = complex1.multiply((-3321.509));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = Complex.valueOf((-20.0));
      Complex complex7 = complex6.cos();
      ComplexField complexField0 = complex7.ZERO.getField();
      double double0 = 166.2872639;
      Complex complex8 = complex7.ONE.subtract(166.2872639);
      Complex complex9 = complex0.multiply(complex6);
      Complex complex10 = complex6.divide((-20.0));
      Complex complex11 = complex10.pow(744.361880044);
      Complex complex12 = complex5.ONE.sqrt1z();
      Complex complex13 = complex11.multiply(1006);
      Complex complex14 = complex5.multiply((-94));
      Complex complex15 = complex3.INF.acos();
      try { 
        complex15.INF.nthRoot((-94));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -94
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(1.32472428796441E-9);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.I.acos();
      Complex complex6 = complex2.ZERO.divide(complex0);
      Complex complex7 = complex2.NaN.sin();
      Complex complex8 = complex3.multiply(1);
      Complex complex9 = complex1.multiply(complex2);
      Complex complex10 = complex1.I.log();
      Complex complex11 = complex8.INF.cosh();
      Complex complex12 = complex3.divide(1.32472428796441E-9);
      Complex complex13 = complex8.conjugate();
      int int0 = complex7.hashCode();
      Complex complex14 = complex5.tan();
      Complex complex15 = complex14.ONE.cos();
      Complex complex16 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.divide(0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex4.INF.pow(complex3);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.NaN.multiply(0);
      Complex complex7 = complex0.I.conjugate();
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex7.NaN.sin();
      Complex complex10 = complex7.I.sqrt1z();
      Complex complex11 = complex0.NaN.tan();
      String string0 = complex11.ZERO.toString();
      Complex complex12 = complex11.ZERO.divide(complex3);
      Complex complex13 = complex0.conjugate();
      Object object0 = new Object();
      Complex complex14 = complex6.ONE.tanh();
      double double1 = complex14.INF.getArgument();
      boolean boolean0 = complex2.equals(object0);
      double double2 = complex6.getImaginary();
      Complex complex15 = complex11.sinh();
      Complex complex16 = complex14.multiply(complex11);
      Complex complex17 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.atan();
      List<Complex> list0 = complex1.ZERO.nthRoot(4293);
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex5.ONE.cosh();
      double double0 = complex4.getArgument();
      Complex complex7 = complex0.INF.negate();
      Complex complex8 = complex2.add(2153.643);
      double double1 = complex0.getImaginary();
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.INF.tanh();
      Complex complex11 = complex8.ONE.multiply(4293);
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.INF.multiply(complex8);
      Complex complex14 = complex5.sqrt();
      Complex complex15 = complex14.INF.sqrt1z();
      Complex complex16 = complex15.NaN.tanh();
      boolean boolean0 = complex1.isNaN();
      Complex complex17 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = complex6.hashCode();
      Complex complex18 = complex3.exp();
      Complex complex19 = complex4.acos();
      String string0 = complex19.ONE.toString();
      Complex complex20 = complex19.tan();
      Complex complex21 = complex4.log();
      boolean boolean1 = complex17.isInfinite();
      boolean boolean2 = complex15.isNaN();
      Complex complex22 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(3.145894820876798E-6);
      Object object0 = complex1.ONE.readResolve();
      double double0 = complex0.INF.getArgument();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.cosh();
      String string0 = complex1.toString();
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.ZERO;
      boolean boolean0 = complex4.equals(complex5);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = complex1.INF.conjugate();
      boolean boolean1 = complex1.equals(complexField0);
      Complex complex9 = Complex.valueOf(3.145894820876798E-6, 2.0);
      Complex complex10 = complex3.tan();
      ComplexField complexField1 = complex1.getField();
      ComplexField complexField2 = complex7.I.getField();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex9.multiply(0.32270604372024536);
      Complex complex14 = complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(3349.0, 3349.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.I.conjugate();
      double double0 = complex1.abs();
      int int0 = complex1.ONE.hashCode();
      Complex complex4 = complex1.I.reciprocal();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex6.ONE.log();
      Complex complex9 = complex5.atan();
      List<Complex> list0 = complex6.I.nthRoot(17);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex5.atan();
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex12.INF.atan();
      double double1 = complex5.getArgument();
      double double2 = complex10.getArgument();
      Complex complex14 = complex10.exp();
      Complex complex15 = complex10.add(complex7);
      Object object0 = complex5.readResolve();
      Complex complex16 = Complex.valueOf(3349.0, 1.5707963267948966);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex17 = complex2.createComplex((-2768.4612), 2.8930193727937684E208);
      Complex complex18 = complex17.ONE.exp();
      Complex complex19 = complex12.add(complex5);
      ComplexField complexField1 = complex15.getField();
      Complex complex20 = complex18.acos();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply((-2203.3142263120076));
      Complex complex2 = complex0.INF.log();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex1.ZERO.pow(complex0);
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ZERO.add(complex4);
      double double0 = complex6.ZERO.abs();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex1.add(complex5);
      Complex complex9 = complex7.acos();
      Complex complex10 = complex9.NaN.multiply(complex8);
      int int1 = complex9.NaN.hashCode();
      Complex complex11 = complex8.add(0.0);
      Complex complex12 = Complex.valueOf((-1028.106673));
      Complex complex13 = complex4.log();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex0.add(1.0);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.divide(1.0);
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex4.NaN.multiply(complex2);
      Complex complex9 = complex4.NaN.log();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex8.INF.sqrt1z();
      Complex complex13 = complex11.subtract(complex7);
      String string0 = complex11.NaN.toString();
      Complex complex14 = complex11.ONE.reciprocal();
      Complex complex15 = complex11.ZERO.tanh();
      Complex complex16 = complex4.cosh();
      Complex complex17 = complex8.NaN.sqrt1z();
      Complex complex18 = complex16.sqrt();
      Complex complex19 = complex18.ONE.sqrt1z();
      Complex complex20 = complex8.multiply(1.0);
      Complex complex21 = complex1.subtract(1.0);
      Complex complex22 = complex15.sqrt1z();
      Complex complex23 = complex22.multiply(complex1);
      Complex complex24 = complex16.subtract(complex10);
      Complex complex25 = complex21.sinh();
      Complex complex26 = complex25.ONE.exp();
      Complex complex27 = complex25.asin();
      Complex complex28 = complex27.acos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex((-1.0), (-1.0));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex0.sinh();
      String string0 = complex0.toString();
      Complex complex6 = complex3.NaN.add(0.0);
      Complex complex7 = complex3.sin();
      String string1 = complex7.ZERO.toString();
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex8.I.tan();
      Complex complex10 = complex5.ZERO.sinh();
      Complex complex11 = complex0.sinh();
      int int0 = complex3.hashCode();
      Complex complex12 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(762.60674243466);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = Complex.valueOf(762.60674243466);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex3.add(762.60674243466);
      List<Complex> list0 = complex1.nthRoot(37);
      boolean boolean0 = complex1.isInfinite();
  }
}
