/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:20:16 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-829.3304));
      // Undeclared exception!
      complex0.ZERO.nthRoot(659509602);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.valueOf((-2992.626), (-2237.0));
      Complex complex3 = new Complex((-2992.626), (-2992.626));
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex3.add((-2992.626));
      Complex complex6 = complex5.NaN.pow(complex3);
      Complex complex7 = complex0.ONE.pow(complex3);
      Complex complex8 = complex7.ONE.multiply((-2992.626));
      Complex complex9 = complex0.NaN.multiply(0.0);
      double double0 = complex0.getReal();
      Complex complex10 = complex0.tan();
      Object object0 = complex10.I.readResolve();
      Complex complex11 = Complex.valueOf(3.51519845948652E-139);
      Complex complex12 = complex4.tan();
      Complex complex13 = complex4.cosh();
      boolean boolean0 = complex7.isNaN();
      Complex complex14 = complex5.subtract((-2992.626));
      Complex complex15 = complex8.pow(0.0);
      Complex complex16 = complex15.createComplex(0.0, 262.88778324);
      Complex complex17 = complex4.sin();
      Complex complex18 = complex6.subtract(complex4);
      Complex complex19 = complex11.cos();
      Complex complex20 = complex17.sqrt1z();
      Complex complex21 = complex3.negate();
      Complex complex22 = complex3.multiply(0);
      Complex complex23 = complex15.multiply(complex7);
      double double1 = complex1.getImaginary();
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(3023.2045, 3023.2045);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex2.atan();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.INF.pow(0.0);
      Complex complex8 = complex6.INF.sin();
      Complex complex9 = complex0.ONE.reciprocal();
      Complex complex10 = complex0.createComplex(0.6527930498123169, (-3132.652929));
      Complex complex11 = Complex.valueOf(0.6527930498123169, (-2.2042966348036592E55));
      Complex complex12 = complex1.tan();
      Complex complex13 = complex12.ONE.atan();
      ComplexField complexField0 = complex13.I.getField();
      int int0 = complex12.ZERO.hashCode();
      Complex complex14 = complex3.pow(complex10);
      Complex complex15 = complex14.ZERO.log();
      double double0 = complex3.getImaginary();
      boolean boolean0 = complex11.isInfinite();
      Object object0 = complex7.readResolve();
      Complex complex16 = complex1.multiply(0.6527930498123169);
      double double1 = complex7.abs();
      Complex complex17 = complex13.createComplex((-574.708), 0.6527930498123169);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.divide(complex0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.NaN.sqrt();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.tan();
      int int1 = complex3.I.hashCode();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex1.INF.negate();
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex8 = complex0.add(Double.NaN);
      double double0 = complex3.getReal();
      double double1 = complex6.abs();
      double double2 = complex3.getImaginary();
      Complex complex9 = complex6.sinh();
      double double3 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex1.divide(complex0);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = Complex.valueOf((double) 1347);
      double double1 = complex7.INF.getArgument();
      Complex complex8 = complex3.multiply(1347);
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex2.asin();
      double double2 = complex10.getImaginary();
      Complex complex11 = complex9.conjugate();
      Complex complex12 = complex11.createComplex(Double.NaN, (-216.70491));
      Complex complex13 = complex5.createComplex(0.0, Double.NaN);
      boolean boolean0 = complex4.isNaN();
      Complex complex14 = complex0.multiply(1347);
      Complex complex15 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(468.057533);
      Complex complex1 = complex0.INF.createComplex(468.057533, 4.725191397657393E289);
      Complex complex2 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.sinh();
      Object object1 = complex2.ONE.readResolve();
      Complex complex4 = complex0.INF.createComplex(439.92202888521, (-783.3606));
      Complex complex5 = complex3.pow(468.057533);
      double double0 = complex3.NaN.abs();
      Complex complex6 = complex3.NaN.reciprocal();
      Complex complex7 = complex2.NaN.createComplex((-348.032278), 0.0);
      ComplexField complexField0 = complex7.I.getField();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex8.negate();
      double double1 = complex8.getImaginary();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex10.cos();
      double double2 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 488.02;
      Complex complex0 = new Complex(488.02, 488.02);
      Complex complex1 = null;
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-938.14709751), (-938.14709751));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex0.INF.pow(complex1);
      double double0 = complex0.abs();
      Complex complex5 = complex0.ONE.createComplex(1326.7403487995966, 1326.7403487995966);
      Complex complex6 = complex1.divide((-938.14709751));
      Complex complex7 = complex3.negate();
      Complex complex8 = complex1.pow((-2519.0));
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex8.subtract(complex4);
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex9.sqrt1z();
      Complex complex14 = complex1.conjugate();
      Complex complex15 = complex14.log();
      Complex complex16 = complex14.tan();
      Complex complex17 = complex1.asin();
      Complex complex18 = complex10.sin();
      Complex complex19 = complex18.INF.tanh();
      Complex complex20 = complex6.multiply(complex9);
      Complex complex21 = complex5.log();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf((-2.4642997069960124E-8), 2.0);
      Complex complex2 = complex1.NaN.divide((-902.0));
      ComplexField complexField1 = complex1.INF.getField();
      String string0 = complex0.toString();
      Complex complex3 = complex0.divide((-2.4642997069960124E-8));
      Complex complex4 = complex3.NaN.multiply(1.4822404384613037);
      Complex complex5 = complex4.I.multiply(0.0);
      List<Complex> list0 = complex3.NaN.nthRoot(892);
      Complex complex6 = complex0.asin();
      List<Complex> list1 = complex6.NaN.nthRoot(892);
      int int0 = complex4.hashCode();
      Complex complex7 = Complex.valueOf(0.0, 1.4822404384613037);
      try { 
        complex3.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-4643.824175));
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.multiply(complex2);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = Complex.valueOf((-4643.824175), 2004.758125535775);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex0.I.log();
      Complex complex9 = complex1.NaN.negate();
      Complex complex10 = complex7.NaN.exp();
      Complex complex11 = complex6.ZERO.sqrt();
      Complex complex12 = complex0.pow((-1018.7827436490652));
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex5.asin();
      Object object0 = complex7.readResolve();
      Complex complex15 = Complex.valueOf(0.0, (-4643.824175));
      Complex complex16 = complex1.add(complex15);
      Complex complex17 = complex2.asin();
      Complex complex18 = Complex.INF;
      Complex complex19 = complex17.add(complex18);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1622.95), (-2.990535475079021E-239));
      Complex complex1 = complex0.divide((-2.990535475079021E-239));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.multiply((-2994.0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4842.240241863122, 4842.240241863122);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf(126.061, (-489.1));
      Complex complex3 = Complex.valueOf(4842.240241863122, 4842.240241863122);
      Complex complex4 = complex0.ONE.reciprocal();
      Object object0 = complex3.ZERO.readResolve();
      String string0 = complex3.I.toString();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex3.NaN.reciprocal();
      String string1 = complex7.INF.toString();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex10.I.conjugate();
      Complex complex12 = complex0.subtract(4842.240241863122);
      Complex complex13 = complex5.cosh();
      Complex complex14 = complex13.add(0.0);
      Complex complex15 = complex13.subtract(complex12);
      Complex complex16 = complex10.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 323.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.subtract((-20.0));
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex4.subtract(complex2);
      Complex complex7 = complex6.ONE.pow(2280.707302861359);
      Complex complex8 = complex7.ZERO.multiply(4010);
      double double0 = complex0.getReal();
      Complex complex9 = complex0.ZERO.negate();
      Complex complex10 = complex9.INF.asin();
      Complex complex11 = complex4.createComplex((-20.0), (-2673.063264));
      Complex complex12 = complex7.pow(complex1);
      Complex complex13 = complex4.add((-6.587776621471115E234));
      Complex complex14 = complex6.add((-587.3492056));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex2.getReal();
      int int0 = complex2.hashCode();
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex1.divide(1457.4);
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.add(complex5);
      int int1 = complex0.hashCode();
      Complex complex7 = complex0.pow(Double.NaN);
      Complex complex8 = complex7.ZERO.divide(complex0);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.ZERO.atan();
      double double1 = complex2.getImaginary();
      String string0 = complex8.ZERO.toString();
      Complex complex11 = complex0.createComplex(1457.4, 1457.4);
      Complex complex12 = complex8.acos();
      double double2 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(1939.6673728, 1939.6673728);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.INF.createComplex(1939.6673728, 7.204525142098426E-261);
      List<Complex> list0 = complex1.nthRoot(914);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.divide(2318.665);
      double double0 = complex3.abs();
      Complex complex6 = complex0.cos();
      double double1 = complex6.I.getArgument();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex4.I.divide(1.2978930473327637);
      Complex complex10 = complex9.acos();
      Complex complex11 = complex4.ONE.sinh();
      Complex complex12 = complex2.createComplex(2425.2234766313, (-761.33));
      String string0 = complex12.toString();
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = complex5.divide(complex8);
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex0.negate();
      Complex complex17 = complex3.add(1.2978930473327637);
      Complex complex18 = complex17.asin();
      Complex complex19 = complex9.cosh();
      Complex complex20 = complex2.multiply(2438);
      boolean boolean0 = complex11.isInfinite();
      Complex complex21 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(533.1054689, 533.1054689);
      List<Complex> list0 = complex0.nthRoot(1362);
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.ONE.multiply(0.0);
      double double1 = complex0.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf(1.1309373378753662, (double) 1362);
      boolean boolean0 = complex3.isNaN();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = Complex.valueOf(360.75, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.ZERO.asin();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex6.I.sinh();
      double double0 = complex2.getImaginary();
      Complex complex10 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex2.INF.multiply((-3190));
      Complex complex13 = complex11.I.subtract((-180.3975571821052));
      Complex complex14 = complex11.INF.cosh();
      double double1 = complex14.ZERO.getArgument();
      Complex complex15 = complex11.ZERO.cosh();
      Complex complex16 = complex13.ZERO.sinh();
      Complex complex17 = complex6.divide(complex10);
      Complex complex18 = complex2.sqrt();
      Complex complex19 = complex13.atan();
      Complex complex20 = complex4.exp();
      double double2 = complex14.abs();
      int int0 = complex16.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.ONE.pow(1148.2463202631898);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex1.ONE.sqrt();
      Complex complex6 = complex2.NaN.log();
      Complex complex7 = complex2.INF.conjugate();
      Complex complex8 = complex0.sin();
      try { 
        complex8.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(798.093189817, 798.093189817);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.exp();
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.multiply((-5056.3474445));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-84.164696066));
      Complex complex1 = new Complex((-84.164696066), (-84.164696066));
      Complex complex2 = complex0.ZERO.subtract((-84.164696066));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.ONE.add(complex1);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add((-1.0));
      List<Complex> list0 = complex0.nthRoot(2207);
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.subtract((-2155.717957));
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = Complex.valueOf((-2155.717957), Double.NaN);
      Complex complex5 = complex3.I.pow(complex0);
      Complex complex6 = complex5.NaN.multiply(complex1);
      Complex complex7 = complex0.sin();
      Object object0 = complex7.readResolve();
      Complex complex8 = new Complex((-1.0), Double.NaN);
      Complex complex9 = complex0.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(0.0, (-1646.9242301));
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex4.asin();
      String string0 = complex1.toString();
      double double1 = complex0.getArgument();
      double double2 = complex4.getArgument();
      Complex complex7 = Complex.valueOf(0.0, 1.0);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex5.multiply(0);
      Complex complex10 = complex9.pow(complex0);
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex4.sin();
      Complex complex13 = complex12.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0212284427080097E-7), (-1.0212284427080097E-7));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex0.subtract((-3778.3559175838));
      Complex complex5 = complex0.I.cos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.NaN.add(complex6);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex4.log();
      String string0 = complex9.toString();
      Complex complex10 = complex7.subtract(complex1);
      Complex complex11 = complex9.cos();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.pow((-3815.74));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = new Complex(1.0, 0.0);
      Complex complex3 = complex0.divide(complex2);
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex3.NaN.divide(1.0);
      double double0 = complex0.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex3.I.conjugate();
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex4.add(1.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(728.0, (-1807.27173151333));
      Complex complex2 = complex0.INF.multiply((-1807.27173151333));
      Complex complex3 = complex1.NaN.reciprocal();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = complex1.ZERO.multiply((-1));
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex1.sqrt1z();
      Object object0 = complex6.readResolve();
      Complex complex9 = complex1.INF.createComplex((-1807.27173151333), (-1));
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex0.pow(complex1);
      Complex complex11 = Complex.valueOf((-65.81));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-634.32661));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.multiply(17);
      Complex complex4 = complex1.subtract(0.0);
      int int0 = complex2.hashCode();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(98.5, (-2096.547));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide((-2096.547));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2206.34354198));
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.NaN.sinh();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1543.299969);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1588.4994612714333);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex2.divide(complex3);
      double double0 = complex1.abs();
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.valueOf(1588.4994612714333);
      Complex complex9 = complex7.ZERO.add(complex8);
      List<Complex> list0 = complex6.nthRoot(107);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(63.99163, 63.99163);
      Complex complex1 = Complex.valueOf(6.283185307179586);
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.NaN.atan();
      int int0 = (-59);
      try { 
        complex0.nthRoot((-59));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -59
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-3331.352359299766), (-3331.352359299766));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.valueOf((-3331.352359299766));
      Complex complex3 = complex2.ONE.add(complex0);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.subtract(complex2);
      double double0 = complex2.abs();
      Complex complex6 = Complex.valueOf((-922.749339), (-3331.352359299766));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.2160874605178833, 1.8939170679975288E-131);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.INF.createComplex(0.0, (-1664.5913077596));
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex0.INF.sinh();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.I.multiply(4035);
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex1.NaN.createComplex((-4347.576258604024), (-4347.576258604024));
      Complex complex6 = Complex.valueOf((-4347.576258604024));
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.ZERO.sin();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.NaN.divide(complex0);
      Complex complex11 = complex7.conjugate();
      Complex complex12 = Complex.valueOf((-5.885186277410878E-9));
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex13.INF.multiply(complex3);
      Complex complex15 = complex3.subtract(complex13);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex16 = complex11.asin();
      Complex complex17 = complex2.negate();
      ComplexField complexField1 = complex6.getField();
      String string0 = complex17.toString();
      double double0 = complex4.getReal();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.ONE.conjugate();
      double double0 = complex1.abs();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2620.203929564759), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.subtract(complex2);
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex7.INF.tanh();
      List<Complex> list0 = complex7.nthRoot(1002);
      Complex complex10 = complex7.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex1.divide(complex7);
      Complex complex14 = complex13.reciprocal();
      double double0 = complex13.ONE.getArgument();
      Complex complex15 = complex9.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.conjugate();
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex0.asin();
      double double1 = complex8.NaN.getArgument();
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex10.cosh();
      double double2 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      double double0 = complex0.abs();
      Complex complex2 = complex0.multiply(0.03643739968538284);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(933.56255473971, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.ZERO.pow(complex4);
      List<Complex> list0 = complex0.nthRoot(37);
      double double1 = complex0.abs();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-636.42147484195));
      Complex complex1 = complex0.NaN.divide((-141.29556));
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.INF.exp();
      Object object1 = complex2.NaN.readResolve();
      Complex complex4 = complex1.subtract(complex0);
      boolean boolean0 = complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-2.3470351753125604E-8));
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.multiply(complex3);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ZERO.reciprocal();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.INF.sqrt1z();
      List<Complex> list0 = complex3.nthRoot(62);
      Complex complex4 = complex2.NaN.multiply(20.0);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.I.acos();
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex3.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(625.5579588, 0.0);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf(625.5579588, (-1882.476912105));
      Complex complex4 = complex1.INF.divide(complex3);
      Complex complex5 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(5.8376834484391746E-8);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1767);
      String string0 = complex1.INF.toString();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.ONE.divide((double) 1767);
      Complex complex4 = complex2.ONE.createComplex(9.15109220707761E72, 9.15109220707761E72);
      Complex complex5 = complex3.NaN.tanh();
      Complex complex6 = complex0.createComplex(1767, 0.0);
      Complex complex7 = complex5.I.tanh();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex5.I.tan();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex5.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.createComplex(894.03576128542, 894.03576128542);
      Complex complex3 = complex2.INF.divide(894.03576128542);
      Complex complex4 = complex2.I.multiply(0.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.NaN.subtract(complex5);
      Complex complex7 = complex0.add(894.03576128542);
      Complex complex8 = complex6.INF.sqrt1z();
      Complex complex9 = complex7.ZERO.multiply(1);
      Complex complex10 = complex2.INF.subtract((double) 1);
      Complex complex11 = complex6.multiply(1510.497407017);
      Complex complex12 = complex3.conjugate();
      String string0 = complex2.toString();
      Complex complex13 = complex12.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(731.0);
      ComplexField complexField0 = complex0.ONE.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.valueOf(2049.5348, 2049.5348);
      Complex complex2 = Complex.valueOf(731.0);
      Complex complex3 = complex1.createComplex((-4054.62), 1475.2);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex4.cosh();
      Complex complex7 = new Complex((-4054.62), (-4054.62));
      Complex complex8 = complex6.ONE.subtract(complex7);
      Complex complex9 = complex6.add(1475.2);
      boolean boolean1 = complex8.isNaN();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-426.614));
      Complex complex1 = complex0.ZERO.subtract((-426.614));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.cosh();
      String string0 = complex1.toString();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex2.pow(complex4);
      Complex complex7 = complex1.add(complex3);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1577.42749228574);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.tanh();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.pow(1577.42749228574);
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex6 = complex0.I.add(complex5);
      Object object0 = complex3.readResolve();
      Complex complex7 = complex4.createComplex(0.0, 0.0);
      Complex complex8 = complex0.atan();
      double double1 = complex3.getReal();
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0114948914089626E-7));
      Complex complex1 = new Complex(3247.90311);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.INF.subtract((-1.0114948914089626E-7));
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex0.getArgument();
      Complex complex5 = complex3.ZERO.negate();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.subtract(4361.5);
      Complex complex7 = complex3.log();
      Complex complex8 = complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply((-134));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.multiply(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-1020.84231767229), (-1020.84231767229));
      Complex complex2 = complex1.ZERO.cos();
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex2.ZERO.multiply((-1174));
      Complex complex4 = complex1.createComplex(0.0, (-1020.84231767229));
      Complex complex5 = complex1.sinh();
      String string0 = complex2.toString();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.ONE.reciprocal();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex5.multiply(7.824500749252316E-9);
      double double1 = complex4.abs();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(37);
      Complex complex2 = complex0.I.sinh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex0.multiply(0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex4 = Complex.valueOf(4827.86, 1.1144917011260986);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.valueOf(990.538605686347);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1016.378103));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.INF.multiply(63.02207170949081);
      Complex complex4 = complex2.divide(1.108938997126179E-40);
      Complex complex5 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.createComplex((-1.0), (-1.0));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.I.getField();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.createComplex((-244.1396), 5.82190887044604E-84);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(complex2);
      try { 
        complex1.nthRoot((-2693));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,693
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1072.36429);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.INF.asin();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex1.toString();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex0.cosh();
      int int0 = complex7.hashCode();
      Complex complex8 = complex1.divide(complex6);
      Complex complex9 = complex2.multiply((-1270));
      Complex complex10 = complex2.createComplex(1072.36429, 0.0);
      Complex complex11 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1483.034709));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2279.8607, 2279.8607);
      Complex complex1 = new Complex((-1.1594886810010702E-7));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.log();
      double double0 = complex0.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex1.pow(5677.391821257932);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-180.74));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.add((-180.74));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      double double0 = (-678.49078);
      Complex complex1 = Complex.valueOf((-1.0), (-678.49078));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cos();
      double double1 = complex3.getReal();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.divide(complex1);
      try { 
        complex5.INF.nthRoot((-2709));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,709
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.multiply(20.0);
      try { 
        complex0.ZERO.nthRoot((-276));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -276
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.4475363492965698, 0.4475363492965698);
      Complex complex1 = complex0.multiply(1467);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-453.1998370650599));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf((-453.1998370650599), 2432.94423528);
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1347.93756733), 0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf((-1347.93756733));
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.log();
      Object object0 = complex0.readResolve();
      try { 
        complex3.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.pow(0.0);
      double double0 = complex1.I.abs();
      int int0 = (-2070);
      try { 
        complex0.ONE.nthRoot((-2070));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,070
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = new Complex(0.5284429788589478, 0.5284429788589478);
      Complex complex8 = complex2.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = Complex.valueOf((-2.260047972865202E-8));
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex2.add(complex3);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex2.acos();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = Complex.valueOf((-2.260047972865202E-8));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1395.32274708403));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.NaN.subtract((-1395.32274708403));
      double double0 = complex0.abs();
      Complex complex3 = complex0.tan();
      String string0 = complex3.ONE.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.divide(Double.NaN);
      int int0 = complex2.hashCode();
      Complex complex5 = complex1.multiply(1.828536033630371);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-1982.444348829163));
      Complex complex1 = complex0.add((-1982.444348829163));
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.divide((-1982.444348829163));
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.multiply(1230.9733);
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.INF.multiply(1.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex1.multiply(0.7853981633974483);
      Object object0 = complex4.readResolve();
      double double2 = complex1.ZERO.getArgument();
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.valueOf((-57.626));
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex7.ZERO.log();
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = Complex.valueOf(1230.9733, 0.7853981633974483);
      Object object1 = complex11.NaN.readResolve();
      Complex complex12 = complex1.atan();
      double double3 = complex5.getImaginary();
      double double4 = complex0.getArgument();
      String string0 = complex5.toString();
      Complex complex13 = complex7.cos();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex6.sqrt1z();
      Complex complex16 = complex15.ONE.negate();
      Complex complex17 = complex16.INF.divide((-2931.3479622));
      double double5 = complex15.I.getArgument();
      Complex complex18 = complex7.createComplex(1.0, 4313.8839041616775);
      double double6 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-716.7998631469181), (-716.7998631469181));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex4.ZERO.multiply((-1575));
      Complex complex8 = complex6.I.add(0.0);
      Complex complex9 = complex5.ONE.cos();
      Complex complex10 = complex1.ONE.log();
      Complex complex11 = complex10.NaN.negate();
      ComplexField complexField0 = complex11.INF.getField();
      double double0 = complex5.getReal();
      double double1 = complex0.abs();
      Complex complex12 = complex4.divide((-153.0));
      String string0 = complex1.toString();
      Complex complex13 = complex4.pow(complex3);
      boolean boolean0 = complex10.equals(complex3);
      boolean boolean1 = complex5.isNaN();
      String string1 = complex13.toString();
      double double2 = complex2.getArgument();
      Complex complex14 = complex12.log();
      Complex complex15 = complex2.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      List<Complex> list0 = complex0.I.nthRoot(37);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.NaN.pow(complex4);
      String string0 = complex5.toString();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.tanh();
      double double0 = complex4.getArgument();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.ONE.nthRoot(734);
      Complex complex1 = complex0.subtract(1244.638199637);
      try { 
        complex1.ONE.nthRoot((-1080));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,080
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-3083);
      try { 
        complex0.NaN.nthRoot((-3083));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,083
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ZERO.getArgument();
      String string0 = complex0.toString();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.INF.cosh();
      String string1 = complex0.NaN.toString();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.INF.sin();
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex4.ZERO.multiply(1);
      double double1 = complex4.INF.abs();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex3.ONE.cos();
      Complex complex10 = complex9.ZERO.reciprocal();
      double double2 = complex0.getImaginary();
      double double3 = complex0.getReal();
      ComplexField complexField0 = complex4.getField();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex7.cosh();
      double double4 = complex11.INF.abs();
      Complex complex13 = complex11.multiply((-1597));
      double double5 = complex7.ONE.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex14 = complex7.tan();
      Complex complex15 = complex4.log();
      Complex complex16 = complex15.I.divide(3204.8863349152);
      Complex complex17 = complex7.createComplex(Double.POSITIVE_INFINITY, (-344.2151));
      ComplexField complexField1 = complex12.getField();
      Complex complex18 = Complex.valueOf(1.1199469566345215);
      Complex complex19 = complex5.tan();
      Complex complex20 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.INF.pow((-195.133901));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ZERO.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.conjugate();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex9 = complex7.NaN.atan();
      Complex complex10 = complex7.INF.pow((-2632.699699079));
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.atan();
      boolean boolean0 = complex7.equals(complex6);
      Complex complex13 = complex3.NaN.tan();
      double double1 = complex0.I.abs();
      Complex complex14 = Complex.valueOf(2017.2824000349);
      Complex complex15 = complex3.sqrt1z();
      Complex complex16 = Complex.valueOf((-2702.15030906));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-1267.28), 0.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.subtract(364.8101358327362);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.ONE.divide(complex1);
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2773.073368445), (-237.403505694593));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = Complex.valueOf((-237.403505694593), (-237.403505694593));
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.ONE.reciprocal();
      Complex complex6 = complex5.I.divide((-2773.073368445));
      Complex complex7 = complex6.INF.add((-237.403505694593));
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex0.ZERO.asin();
      Complex complex10 = complex5.ZERO.sqrt1z();
      Complex complex11 = complex0.multiply((-237.403505694593));
      Complex complex12 = complex8.cos();
      Object object0 = complex4.ONE.readResolve();
      Complex complex13 = complex10.INF.conjugate();
      Complex complex14 = complex5.I.pow((-237.403505694593));
      Complex complex15 = complex12.sqrt();
      String string0 = complex5.ONE.toString();
      boolean boolean0 = complex4.isInfinite();
      Complex complex16 = complex5.sinh();
      Complex complex17 = complex10.atan();
      Complex complex18 = complex17.ZERO.cosh();
      double double0 = complex1.abs();
      Complex complex19 = complex11.reciprocal();
  }
}
