/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:16:47 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 1.25);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.add(1037.0067575);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.createComplex(1.25, 563.66);
      Complex complex6 = complex5.INF.subtract(complex3);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex0.pow(complex2);
      boolean boolean0 = complex4.equals(complex3);
      Complex complex10 = complex1.exp();
      boolean boolean1 = complex4.isInfinite();
      Complex complex11 = complex4.add(complex7);
      double double0 = complex11.I.getArgument();
      Complex complex12 = Complex.valueOf(1.25, 2901.0055041766);
      int int0 = complex4.hashCode();
      // Undeclared exception!
      complex4.nthRoot(2090970920);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.divide(complex0);
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = Complex.I;
      String string0 = complex0.toString();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex4.divide(complex2);
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex6.I.atan();
      Complex complex11 = complex6.NaN.createComplex(Double.NaN, Double.NaN);
      double double1 = complex7.NaN.abs();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex6.sinh();
      Complex complex14 = complex1.createComplex((-1517.316288279396), Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex14.NaN.getField();
      double double2 = complex13.abs();
      Complex complex15 = complex14.add(20.0);
      Complex complex16 = complex1.pow(complex15);
      Complex complex17 = complex10.createComplex(2.850781059358212, 1715.4408);
      Complex complex18 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-3055.808265));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex3.INF.subtract(Double.NaN);
      Complex complex5 = complex4.ZERO.pow(1073.0571);
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex0.INF.exp();
      Complex complex7 = complex0.NaN.conjugate();
      Complex complex8 = new Complex((-3055.808265), (-483.975));
      Complex complex9 = complex6.I.cos();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex10 = complex0.ONE.log();
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex6.ZERO.conjugate();
      Complex complex13 = complex0.add(complex8);
      ComplexField complexField1 = complex13.I.getField();
      Complex complex14 = complex6.NaN.asin();
      ComplexField complexField2 = complex0.getField();
      Complex complex15 = complex6.asin();
      Complex complex16 = complex8.createComplex(Double.NaN, (-483.975));
      Complex complex17 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1277.62009, (-1588.1675434658962));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.pow((-20.0));
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.ZERO.pow(complex0);
      Complex complex7 = complex5.ONE.createComplex((-20.0), (-20.0));
      Complex complex8 = Complex.valueOf((-1298.3565258593214), 1449.2631);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex9.NaN.asin();
      Complex complex12 = complex0.ONE.createComplex(409.66368069111, 409.66368069111);
      Complex complex13 = complex0.multiply((-3746));
      Complex complex14 = complex9.exp();
      Complex complex15 = complex3.conjugate();
      Complex complex16 = complex14.I.multiply(complex15);
      Complex complex17 = complex16.ZERO.subtract((-3.5901655945224663E-10));
      Complex complex18 = complex3.add(complex15);
      Complex complex19 = complex4.multiply((-487.96928058));
      Complex complex20 = complex10.pow(complex14);
      Complex complex21 = complex19.conjugate();
      Complex complex22 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.484237749027735E-8);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex2.multiply((-395.5));
      Complex complex5 = complex4.ONE.multiply(0);
      Complex complex6 = complex1.ZERO.multiply(3.9205810725333715E-8);
      Complex complex7 = complex3.add(0.0);
      boolean boolean0 = complex2.equals(complex7);
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex7.divide(complex0);
      Complex complex9 = complex0.I.cos();
      Complex complex10 = complex9.ONE.pow((-2466.5329289859883));
      Complex complex11 = complex2.acos();
      Complex complex12 = Complex.valueOf(0.0);
      double double0 = complex11.ZERO.abs();
      int int1 = complex8.hashCode();
      Complex complex13 = complex2.multiply((-2731.0));
      List<Complex> list0 = complex6.nthRoot(4637);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = complex1.sin();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.ONE.add(Double.NaN);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex1.NaN.negate();
      Complex complex10 = complex7.ONE.subtract(0.0);
      Complex complex11 = complex3.negate();
      Complex complex12 = complex11.pow(complex0);
      try { 
        complex12.nthRoot((-802));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -802
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.ONE.add(Double.NaN);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex1.NaN.negate();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex9.pow(complex0);
      try { 
        complex10.nthRoot((-802));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -802
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2206.6183814691653));
      Complex complex1 = new Complex((-1396.5981997), Double.NaN);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex2.I.conjugate();
      Complex complex6 = complex1.negate();
      double double0 = complex3.getImaginary();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex3.ONE.conjugate();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.I.add(complex1);
      Complex complex11 = complex9.reciprocal();
      Complex complex12 = complex0.multiply(7);
      double double1 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1626.687739763));
      Complex complex1 = complex0.NaN.createComplex((-1626.687739763), (-966.090336));
      Complex complex2 = complex1.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.I.createComplex((-966.090336), 3531.787);
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex3.add((-1626.687739763));
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-2143.9276), (-2143.9276));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.INF.sqrt();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex1.ZERO.divide(0.0);
      Complex complex6 = complex5.ZERO.createComplex(0.0, (-2143.9276));
      ComplexField complexField0 = complex6.ONE.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex9.NaN.sqrt1z();
      double double0 = complex10.I.abs();
      boolean boolean1 = complex9.isNaN();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex9.atan();
      Complex complex13 = complex8.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      double double0 = 0.0;
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.I.subtract(complex0);
      try { 
        complex2.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-0.33333333333333287));
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex5.ZERO.add(complex0);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex2.subtract(complex1);
      String string0 = complex8.toString();
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex7.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.NaN.negate();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.I.sinh();
      Complex complex13 = complex2.ONE.pow(0.5573811531066895);
      Complex complex14 = complex11.INF.sqrt1z();
      Complex complex15 = complex2.pow(complex7);
      Complex complex16 = complex2.multiply(complex4);
      Complex complex17 = complex16.ONE.exp();
      double double0 = complex15.abs();
      Complex complex18 = complex2.negate();
      Complex complex19 = complex8.add(Double.NaN);
      Complex complex20 = complex14.divide(0.5573811531066895);
      Complex complex21 = complex0.reciprocal();
      Complex complex22 = complex0.negate();
      Complex complex23 = complex2.pow(Double.POSITIVE_INFINITY);
      int int0 = complex11.hashCode();
      Complex complex24 = complex19.subtract(complex13);
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.ONE.tanh();
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex0.divide(complex1);
      String string0 = complex4.ZERO.toString();
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex1.ONE.tanh();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex0.createComplex(0.0, Double.NaN);
      Complex complex8 = complex2.ONE.add(2792.4318);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex3.multiply(0.0);
      Complex complex11 = complex0.cos();
      String string1 = complex7.toString();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex12.INF.tan();
      Complex complex14 = complex1.cos();
      Complex complex15 = complex10.multiply(complex9);
      Complex complex16 = complex4.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex0.nthRoot(1177);
      Complex complex2 = complex0.asin();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.multiply((-2008.73847434805));
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.ZERO.conjugate();
      String string0 = complex5.I.toString();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.ZERO.reciprocal();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex1.conjugate();
      double double1 = complex3.abs();
      boolean boolean0 = complex9.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ZERO.toString();
      String string1 = complex0.INF.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex1.ONE.createComplex((-20.0), (-20.0));
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.negate();
      String string2 = complex6.I.toString();
      Complex complex7 = complex3.multiply(complex4);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = Complex.valueOf(4.4940857547850743E-194);
      Complex complex10 = complex8.I.subtract(complex5);
      Complex complex11 = complex10.ZERO.acos();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex12 = complex1.NaN.createComplex(4.4940857547850743E-194, (-20.0));
      Complex complex13 = complex5.multiply(complex1);
      Complex complex14 = Complex.INF;
      Complex complex15 = complex12.ZERO.add(complex14);
      Complex complex16 = complex3.negate();
      Complex complex17 = complex13.NaN.exp();
      Complex complex18 = complex0.INF.sin();
      Complex complex19 = complex13.exp();
      Complex complex20 = complex12.multiply(4.4940857547850743E-194);
      Complex complex21 = complex15.multiply((-20.0));
      Complex complex22 = complex3.sinh();
      Complex complex23 = complex0.divide(complex18);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.73, 1744.73);
      Complex complex1 = complex0.pow(1744.73);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.NaN.pow(1744.73);
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.INF.add(complex4);
      Complex complex7 = complex5.subtract(complex4);
      int int0 = 0;
      String string0 = complex5.NaN.toString();
      try { 
        complex7.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex2.NaN.reciprocal();
      Complex complex6 = complex2.ZERO.multiply(Double.NaN);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.ONE.divide(726.50868994754);
      Complex complex9 = complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.INF.add(complex2);
      Complex complex12 = complex11.pow(Double.NaN);
      double double1 = complex0.getReal();
      Complex complex13 = complex10.asin();
      double double2 = complex9.abs();
      Complex complex14 = complex11.multiply(complex10);
      Complex complex15 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3573.386), (-3573.386));
      Complex complex1 = complex0.cosh();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-916.46981368), 2367.477658694);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.multiply(2367.477658694);
      Complex complex4 = Complex.valueOf(2367.477658694, 0.0);
      Complex complex5 = complex4.ZERO.add(998.7641141);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex0.multiply(complex6);
      Complex complex9 = complex4.add(0.0);
      Complex complex10 = complex7.atan();
      Complex complex11 = complex4.cosh();
      Complex complex12 = complex3.tanh();
      double double0 = complex1.getReal();
      Complex complex13 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.INF.sin();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.createComplex(2323.8869, 0.6588751077651978);
      Complex complex5 = complex0.multiply(1978.612);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.INF.pow(2323.8869);
      double double1 = complex1.getReal();
      Complex complex9 = complex4.multiply(445);
      Complex complex10 = complex2.ZERO.cosh();
      Complex complex11 = complex9.createComplex(1.5430806348152437, 2174.463833332);
      double double2 = complex2.getArgument();
      Complex complex12 = complex2.reciprocal();
      boolean boolean0 = complex6.isInfinite();
      Complex complex13 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex4.divide(complex0);
      double double0 = complex3.getReal();
      Complex complex7 = complex1.divide(complex3);
      try { 
        complex5.nthRoot((-2931));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,931
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.186914813275767E-8, (-1.0288181007465474E-8));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = Complex.valueOf((-1679.08770914), (-1679.08770914));
      Complex complex6 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.509102421));
      Complex complex1 = complex0.pow((-1.0));
      try { 
        complex1.nthRoot((-160));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -160
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-4.518315366841937E55);
      Complex complex0 = new Complex(0.0, (-4.518315366841937E55));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      try { 
        complex2.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow((-6.655106680680314E-8));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.NaN.multiply((-2414));
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex2.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.I.exp();
      Complex complex8 = complex0.divide(complex2);
      Complex complex9 = complex2.ZERO.sin();
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex3.multiply((double) (-2414));
      Complex complex11 = complex2.conjugate();
      try { 
        complex10.nthRoot((-2414));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,414
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.createComplex(2373.079134951, 2373.079134951);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex3.INF.multiply(0);
      Complex complex6 = complex3.INF.subtract(0.0);
      double double0 = complex6.NaN.abs();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex1.ONE.negate();
      ComplexField complexField0 = complex8.ONE.getField();
      boolean boolean0 = complex8.isInfinite();
      Complex complex10 = complex1.pow(complex8);
      Complex complex11 = complex10.NaN.multiply(2373.079134951);
      Complex complex12 = complex9.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(3836.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex0.subtract(3836.0);
      double double0 = complex4.getArgument();
      Complex complex5 = complex3.multiply((-4446));
      double double1 = complex0.abs();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex1.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1.0487601931965087E175, 561.7681740264578);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.pow(561.7681740264578);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.multiply((-998.68856));
      String string0 = complex1.ONE.toString();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 1114.7;
      Complex complex0 = Complex.valueOf(1114.7);
      Complex complex1 = complex0.INF.acos();
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.2, 0.2);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = new Complex(0.0, 2137.58601527);
      Complex complex4 = complex3.sqrt();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex5 = complex3.ONE.exp();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex3.ONE.subtract(0.2);
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = Complex.valueOf((-792.070509));
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex8.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-415.5761515269505));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.pow((-415.5761515269505));
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.divide(complex0);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.add((-20.0));
      Complex complex7 = Complex.valueOf((-20.0), 353.717091338412);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex8.I.negate();
      double double0 = complex3.getReal();
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex4.multiply(complex2);
      Complex complex12 = complex11.INF.subtract(complex5);
      Complex complex13 = complex12.ZERO.pow(complex4);
      Complex complex14 = Complex.INF;
      Complex complex15 = complex11.exp();
      Complex complex16 = complex9.divide(complex5);
      Complex complex17 = complex11.asin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-558.327), 0.0);
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.ONE.negate();
      int int0 = complex2.ZERO.hashCode();
      Complex complex5 = complex1.createComplex((-558.327), 8.0);
      Complex complex6 = complex5.ZERO.add(8.0);
      Complex complex7 = complex0.log();
      Complex complex8 = complex1.log();
      ComplexField complexField0 = complex5.NaN.getField();
      Object object0 = complex7.readResolve();
      Complex complex9 = complex1.log();
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex5.subtract(complex1);
      Complex complex11 = complex9.divide(complex0);
      Complex complex12 = complex5.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2017.616464147378, (-428.7225805));
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-494.37955641));
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.divide((-494.37955641));
      Complex complex4 = complex3.pow((-687.7904253596574));
      Complex complex5 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.NaN.multiply(173);
      Complex complex3 = complex1.ONE.sin();
      double double0 = complex0.abs();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.ZERO.cos();
      String string0 = complex1.ONE.toString();
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.multiply((-61.336));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.NaN.pow((-863.1124843));
      Complex complex4 = complex3.ONE.pow((-20.0));
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-343.1927), (-343.1927));
      Complex complex1 = complex0.ZERO.createComplex(1.0, (-343.1927));
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.sinh();
      double double0 = complex0.getReal();
      Complex complex4 = Complex.valueOf(5.6648446166177225E-9);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex3.add(complex4);
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-338.868298595349));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.NaN.createComplex((-338.868298595349), 0.0);
      List<Complex> list0 = complex0.nthRoot(58);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.createComplex((-1838.1), 0.0);
      Complex complex6 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = complex0.INF.divide(Double.NaN);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.valueOf((-124.36805269252));
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex3.pow(complex6);
      Complex complex9 = complex8.ONE.add(complex5);
      Complex complex10 = complex0.tan();
      int int0 = complex5.hashCode();
      Complex complex11 = Complex.valueOf((-3776.781895432));
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 9.750264097807267E-262);
      Complex complex3 = complex1.ZERO.add((-5.235397688850367E180));
      Complex complex4 = complex3.ONE.tan();
      String string0 = complex0.toString();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex5.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.pow((-266.46952927810383));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.ZERO.asin();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.multiply(0.2470736801624298);
      Complex complex5 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(1431);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.NaN.acos();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.subtract(0.0);
      List<Complex> list0 = complex5.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.sqrt();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.subtract(91.53);
      Complex complex4 = complex2.NaN.pow(91.53);
      double double0 = complex0.ONE.getArgument();
      Complex complex5 = complex0.ONE.subtract(complex1);
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex1.ONE.atan();
      Complex complex8 = complex6.I.divide((-498.1));
      Complex complex9 = complex0.negate();
      try { 
        complex9.NaN.nthRoot((-417));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -417
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.subtract(204.99196019881572);
      List<Complex> list0 = complex1.nthRoot(1);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.subtract(204.99196019881572);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex2.multiply(506);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.exp();
      List<Complex> list0 = complex0.ZERO.nthRoot(1107);
      Complex complex2 = complex0.asin();
      int int0 = complex2.hashCode();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.subtract(complex0);
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex4.ZERO.multiply(1);
      Complex complex6 = complex1.sqrt1z();
      boolean boolean0 = complex1.equals(complex3);
      double double0 = complex3.getImaginary();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex2.subtract(complex7);
      Complex complex9 = complex0.NaN.createComplex(0.0, 0.0);
      List<Complex> list1 = complex0.nthRoot(37);
      Complex complex10 = complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1187.9388796943806, (-563.93188));
      Complex complex1 = complex0.pow((-2355.97216093828));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 4080.63176254618);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.I.subtract(complex0);
      Complex complex6 = complex2.ONE.divide(complex4);
      ComplexField complexField0 = complex6.ZERO.getField();
      double double0 = complex0.abs();
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex9 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(7.054443447243064E-8);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.log();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4031.7393232062), (-4031.7393232062));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract((-4031.7393232062));
      boolean boolean0 = complex1.equals("K6YE2_C]#");
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.INF;
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.ZERO.multiply(2926.92);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.INF.reciprocal();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex0.tan();
      int int1 = complex0.hashCode();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2591.95));
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.acos();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex1.tanh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex0.pow(2329.793745);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.INF.pow(0.017008920503326107);
      Complex complex2 = Complex.valueOf(0.017008920503326107);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf((-2637.8960842), 20.0);
      Complex complex7 = complex4.subtract(162.553);
      Complex complex8 = complex3.add(3821.0);
      Complex complex9 = complex6.subtract(0.017008920503326107);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 25.71030423214074);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(255.0, 0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.sinh();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = Complex.NaN;
      Object object0 = complex7.readResolve();
      boolean boolean1 = complex3.equals(object0);
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.multiply((-584));
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.I.pow(complex2);
      Complex complex7 = complex6.ONE.divide((-965.1301));
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex8.INF.divide((double) (-584));
      Complex complex10 = complex3.INF.multiply(complex1);
      Complex complex11 = complex10.NaN.sinh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex12 = complex0.pow(0.0);
      Complex complex13 = complex0.multiply((-584));
      Complex complex14 = complex13.conjugate();
      double double0 = complex1.getReal();
      Complex complex15 = complex9.sqrt();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(0.0833425521850586);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-318.529635560839), (-318.529635560839));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(5852.630211646, 5852.630211646);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.add(5852.630211646);
      Complex complex4 = complex3.I.multiply((-3011));
      Complex complex5 = complex1.I.atan();
      int int0 = complex0.hashCode();
      Complex complex6 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.INF.pow((-2895.6946448969065));
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = Complex.valueOf(2.6735267639160156, 0.0);
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = complex4.tanh();
      boolean boolean0 = complex0.equals("");
      Complex complex6 = complex4.asin();
      Complex complex7 = complex1.subtract(616.8283349249);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      String string0 = complex0.toString();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1493.67259055));
      Complex complex1 = complex0.multiply(826);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.add((-1893.304116612479));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.sqrt1z();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1485.580481946835), 6.283185307179586);
      Complex complex1 = complex0.I.divide(6.283185307179586);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.I.add(complex1);
      Complex complex6 = complex4.NaN.pow(complex3);
      Complex complex7 = complex1.pow(complex3);
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex0.subtract(complex3);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(Double.NaN, (-3001.45933));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.ZERO.conjugate();
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex3.ZERO.sin();
      double double0 = complex5.getArgument();
      Complex complex7 = complex5.multiply(complex0);
      Complex complex8 = complex2.multiply(3040);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.multiply(384);
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      List<Complex> list0 = complex0.NaN.nthRoot(37);
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.multiply(20.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex1.log();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex((-1520.665), (-1520.665));
      Object object0 = complex0.readResolve();
      try { 
        complex0.nthRoot((-1008));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,008
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1030897183911054E-8));
      Complex complex1 = complex0.NaN.multiply((-1.1030897183911054E-8));
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.acos();
      double double0 = complex0.abs();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ONE.tan();
      Object object0 = complex7.INF.readResolve();
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex8.ZERO.multiply(69);
      Complex complex10 = complex8.atan();
      Complex complex11 = complex1.add(complex10);
      String string0 = complex10.toString();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.asin();
      double double0 = complex0.abs();
      Complex complex2 = complex1.reciprocal();
      boolean boolean0 = complex2.equals("(Infinity, Infinity)");
      Complex complex3 = complex2.exp();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4024.1228996));
      Complex complex1 = complex0.ONE.multiply((-4024.1228996));
      try { 
        complex1.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply(7);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.pow(2483.644);
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot((-3058));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,058
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1037.0067575);
      Complex complex2 = complex1.ZERO.subtract(1037.0067575);
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = Complex.valueOf((double) 1337);
      Complex complex5 = complex4.INF.pow((-1669.052501097909));
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex0.I.subtract(complex4);
      Complex complex8 = complex7.NaN.add(complex5);
      Complex complex9 = complex0.multiply(1337);
      boolean boolean0 = complex9.equals(complex0);
      Complex complex10 = complex0.pow(1037.0067575);
      Complex complex11 = Complex.valueOf(1.7602040767669678);
      Complex complex12 = complex11.add(complex7);
      ComplexField complexField0 = complex9.getField();
      Complex complex13 = complex10.pow(complex6);
      Complex complex14 = complex10.acos();
      Complex complex15 = complex3.add((double) 1337);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex2.multiply(2.0);
      Complex complex6 = Complex.valueOf(0.0, 2.0);
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex1.multiply(complex6);
      Complex complex9 = complex8.INF.createComplex(2.0, 2.0);
      Complex complex10 = complex3.subtract(2.0);
      Complex complex11 = complex2.NaN.conjugate();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex12 = complex8.atan();
      Complex complex13 = complex2.negate();
      Complex complex14 = complex13.atan();
      Complex complex15 = complex14.ONE.conjugate();
      Complex complex16 = Complex.valueOf((-1.0));
      Complex complex17 = complex5.divide(complex3);
      Object object0 = complex9.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex18 = complex8.tan();
      Complex complex19 = Complex.valueOf((double) 1);
      Complex complex20 = Complex.valueOf(0.0, 367.989);
      Complex complex21 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(3085.515160268114);
      Complex complex2 = complex1.I.multiply(complex0);
      String string0 = complex2.INF.toString();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = Complex.valueOf(3085.515160268114, 1519.454343669);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.acos();
      double double0 = complex0.ONE.getArgument();
      double double1 = complex6.getImaginary();
      double double2 = complex6.abs();
      Complex complex7 = complex1.ONE.pow((-1262.208290453723));
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex6.I.reciprocal();
      Complex complex10 = complex0.add(1.8011719796199461);
      Complex complex11 = complex10.multiply(0);
      boolean boolean0 = complex0.isNaN();
      double double3 = complex4.getImaginary();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex5.tan();
      Complex complex14 = complex4.tan();
      Complex complex15 = complex7.add(0.0);
      Complex complex16 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.tanh();
      double double0 = complex2.getImaginary();
      List<Complex> list0 = complex1.nthRoot(37);
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf((double) 37, 1102.76509);
      List<Complex> list1 = complex5.nthRoot(37);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex1.divide((double) 37);
      Complex complex10 = complex2.subtract(160.201606);
      Complex complex11 = complex10.INF.acos();
      Complex complex12 = complex10.ONE.pow((-1.0));
      int int0 = complex10.ONE.hashCode();
      Complex complex13 = complex9.divide(Double.NaN);
      ComplexField complexField0 = complex0.getField();
      Complex complex14 = complex13.ONE.atan();
      int int1 = complex2.ONE.hashCode();
      Complex complex15 = Complex.valueOf(1102.76509, 2956.542006);
      double double1 = complex6.abs();
      Complex complex16 = complex13.subtract(complex9);
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex16.sin();
      double double2 = complex4.abs();
      Complex complex19 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-485.6819982));
      Complex complex1 = complex0.I.createComplex((-485.6819982), (-485.6819982));
      Complex complex2 = new Complex(101.699403, 101.699403);
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = Complex.valueOf((-435.0));
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex1.INF.multiply(101.699403);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf(779.7035602040515, (-485.6819982));
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex6.conjugate();
      ComplexField complexField1 = complex1.getField();
      Complex complex10 = complex7.ZERO.sinh();
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex7.multiply(263);
      Complex complex13 = complex12.cosh();
      double double0 = complex12.getArgument();
      Complex complex14 = complex0.acos();
      Complex complex15 = complex9.subtract(complex14);
      Complex complex16 = complex4.createComplex(0.0, 0.0);
      Complex complex17 = complex5.conjugate();
      Complex complex18 = Complex.valueOf((-2166.07));
      boolean boolean0 = complex9.isNaN();
      Complex complex19 = complex15.acos();
      Complex complex20 = complex11.cos();
      Complex complex21 = complex6.multiply(1678.43638561);
      Complex complex22 = complex19.tanh();
      Complex complex23 = complex7.tan();
      double double1 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4.848934634563382E279, 4.848934634563382E279);
      Complex complex2 = complex1.acos();
      String string0 = complex1.toString();
      List<Complex> list0 = complex1.ONE.nthRoot(1717);
      Complex complex3 = complex0.pow(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex3.add(complex1);
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex0.subtract(73.2774134538614);
      Complex complex6 = complex0.cos();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = Complex.valueOf(73.2774134538614);
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex10.tan();
      Object object1 = complex5.ZERO.readResolve();
      Complex complex12 = Complex.valueOf((-4.1723833577410244E-8));
      Complex complex13 = complex5.multiply(73.2774134538614);
      double double0 = complex4.getImaginary();
      boolean boolean1 = complex4.isInfinite();
      Complex complex14 = complex4.cos();
      Complex complex15 = complex10.multiply(complex3);
      boolean boolean2 = complex4.isInfinite();
      Complex complex16 = complex9.createComplex(1717, (-2596.419));
      double double1 = complex13.getArgument();
      Complex complex17 = complex14.pow(complex10);
      double double2 = complex8.getReal();
      double double3 = complex16.getArgument();
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(961.88626, 961.88626);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.pow(961.88626);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.ONE.negate();
      Complex complex5 = complex0.createComplex(961.88626, 961.88626);
      Complex complex6 = complex5.NaN.conjugate();
      double double0 = complex6.abs();
      Complex complex7 = complex5.ONE.acos();
      double double1 = complex1.ONE.getArgument();
      int int0 = complex4.INF.hashCode();
      double double2 = complex4.abs();
      Complex complex8 = complex0.NaN.cos();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex8.ZERO.exp();
      Complex complex11 = complex10.ZERO.subtract(complex7);
      Complex complex12 = complex4.subtract(20.0);
      Complex complex13 = complex12.multiply(961.88626);
      Complex complex14 = complex7.I.asin();
      Complex complex15 = complex14.sin();
      boolean boolean0 = complex4.isInfinite();
      Complex complex16 = complex0.multiply((-1073.3894));
      String string0 = complex0.toString();
      Complex complex17 = complex7.divide(complex16);
      Complex complex18 = complex17.createComplex(4498.4243329, (-1073.3894));
      Complex complex19 = complex18.INF.sinh();
      Complex complex20 = complex1.multiply(1.0);
      double double3 = complex12.getImaginary();
      Complex complex21 = complex5.createComplex((-733.162), 0.0);
      Complex complex22 = complex17.cosh();
      Complex complex23 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 1.25);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.add(1037.0067575);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.createComplex(1.25, 563.66);
      Complex complex6 = complex5.ONE.subtract(1.25);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex0.pow(complex2);
      boolean boolean0 = complex4.equals(complex3);
      Complex complex10 = complex1.exp();
      boolean boolean1 = complex4.isInfinite();
      Complex complex11 = Complex.ONE;
      double double0 = complex11.I.getArgument();
      Complex complex12 = Complex.valueOf(1.25, 2901.0055041766);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-20.0), (-527.3387793676));
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex3.ONE.cosh();
      Complex complex8 = complex6.createComplex((-1.0), (-20.0));
      String string0 = complex8.toString();
      int int0 = complex8.INF.hashCode();
      Complex complex9 = Complex.valueOf((-20.0), (-20.0));
      int int1 = complex0.hashCode();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex9.add(complex6);
      Complex complex13 = complex12.ZERO.atan();
      Complex complex14 = complex13.ZERO.tanh();
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex15.multiply(0);
      Complex complex17 = complex1.reciprocal();
      Complex complex18 = complex12.divide((-20.0));
      Complex complex19 = complex6.exp();
      Complex complex20 = complex15.subtract(complex4);
      Complex complex21 = complex10.atan();
      Complex complex22 = complex10.multiply(2975);
      Complex complex23 = complex22.reciprocal();
      Complex complex24 = complex23.negate();
      Complex complex25 = complex2.cosh();
  }
}
