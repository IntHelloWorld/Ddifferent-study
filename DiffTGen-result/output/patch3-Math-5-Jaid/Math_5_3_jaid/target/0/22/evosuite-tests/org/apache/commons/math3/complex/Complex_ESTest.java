/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:20:18 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ZERO.cos();
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      double double1 = complex4.I.getArgument();
      Complex complex5 = complex1.sinh();
      boolean boolean0 = complex5.isNaN();
      Complex complex6 = complex1.log();
      int int0 = complex6.hashCode();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex7.createComplex((-77.045), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.createComplex((-20.0), 0.0);
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.ZERO.createComplex((-20.0), 0.0);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.INF.sinh();
      double double1 = complex0.getReal();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.NaN.cos();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      ComplexField complexField1 = complex6.ONE.getField();
      Complex complex8 = Complex.valueOf((-1807.6769736717));
      Complex complex9 = complex0.ONE.multiply((-1708.0));
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex8.NaN.tanh();
      List<Complex> list1 = complex9.nthRoot(1230);
      Complex complex12 = complex8.I.acos();
      boolean boolean0 = complex6.equals("-nx 8`:D");
      Complex complex13 = complex5.subtract((-20.0));
      Complex complex14 = complex13.ZERO.multiply(1);
      Complex complex15 = complex0.tanh();
      Complex complex16 = complex13.subtract(complex1);
      Complex complex17 = complex16.NaN.divide((double) 1230);
      Complex complex18 = complex16.I.pow(complex7);
      Complex complex19 = complex13.divide(0.6379399299621582);
      Complex complex20 = complex0.cos();
      Complex complex21 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(2080.811812944);
      Complex complex3 = complex0.INF.subtract(Double.NaN);
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.ONE.log();
      Complex complex6 = complex2.I.subtract(2339.009269);
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex6.I.divide(complex0);
      Complex complex9 = complex4.NaN.multiply(complex1);
      double double0 = complex1.getArgument();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex1.NaN.multiply(complex6);
      double double1 = complex11.NaN.abs();
      Complex complex12 = complex10.ONE.tanh();
      Complex complex13 = complex10.NaN.acos();
      double double2 = complex13.I.abs();
      Complex complex14 = complex10.ONE.subtract(2080.811812944);
      Complex complex15 = complex12.multiply(complex5);
      Complex complex16 = complex2.tan();
      Complex complex17 = complex16.tan();
      Complex complex18 = complex12.multiply(complex16);
      Complex complex19 = complex17.log();
      boolean boolean1 = complex4.isNaN();
      Complex complex20 = complex19.pow(0.0);
      Complex complex21 = complex4.cosh();
      Complex complex22 = complex12.multiply((-3014.15451352181));
      Complex complex23 = complex12.atan();
      boolean boolean2 = complex5.isInfinite();
      Complex complex24 = Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(8.792425221770645E-222, 8.792425221770645E-222);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.ONE.subtract(8.792425221770645E-222);
      Complex complex5 = complex3.ZERO.conjugate();
      Complex complex6 = complex5.INF.createComplex(8.792425221770645E-222, 8.792425221770645E-222);
      Complex complex7 = complex6.pow(8.792425221770645E-222);
      Complex complex8 = complex3.NaN.log();
      int int0 = complex3.I.hashCode();
      Complex complex9 = complex0.reciprocal();
      String string0 = complex9.toString();
      Complex complex10 = complex9.INF.add(complex8);
      Complex complex11 = complex0.INF.pow(8.792425221770645E-222);
      int int1 = (-220);
      Complex complex12 = Complex.valueOf(8.792425221770645E-222, 8.792425221770645E-222);
      try { 
        complex3.nthRoot((-220));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -220
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-2794));
      double double0 = complex0.getImaginary();
      double double1 = complex0.I.getArgument();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex3.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.multiply((double) (-2794));
      double double2 = complex5.getArgument();
      Complex complex6 = complex5.NaN.tan();
      Object object0 = complex3.I.readResolve();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.ZERO.multiply((-2794));
      Complex complex9 = complex1.ONE.atan();
      Object object1 = complex5.I.readResolve();
      Complex complex10 = complex4.acos();
      Complex complex11 = Complex.valueOf((-1777.31902506), 1.5707963267948966);
      Complex complex12 = complex5.negate();
      Complex complex13 = complex8.NaN.pow(complex2);
      Complex complex14 = complex12.I.cosh();
      Complex complex15 = complex3.exp();
      Object object2 = complex15.readResolve();
      double double3 = complex4.getArgument();
      int int0 = complex6.hashCode();
      double double4 = complex6.getImaginary();
      Complex complex16 = complex14.ONE.subtract((-20.0));
      Complex complex17 = complex5.pow(complex2);
      Complex complex18 = Complex.valueOf(1.5707963267948966, Double.NaN);
      Complex complex19 = complex14.subtract(complex8);
      Complex complex20 = complex19.NaN.tanh();
      Complex complex21 = complex17.createComplex(0.7853981633974483, (-1028.911));
      Complex complex22 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.subtract(0.18573370575904846);
      Complex complex4 = complex3.NaN.divide(1741.3072591924);
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1697.385), (-1697.385));
      Complex complex1 = complex0.INF.multiply(4254.391916);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.ZERO.add((-4026.26567));
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex3.multiply((-641));
      Complex complex7 = Complex.valueOf(4254.391916);
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex2.atan();
      Complex complex10 = complex9.ONE.exp();
      Complex complex11 = complex10.ONE.tan();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex0.acos();
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = new Complex((-2.7651059253677425E203), 1298.458);
      Complex complex2 = complex0.subtract(complex1);
      String string1 = complex0.ZERO.toString();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.subtract(1298.458);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex2.createComplex(0.0, 0.0);
      Complex complex8 = complex2.asin();
      Complex complex9 = complex8.I.tan();
      Complex complex10 = Complex.valueOf((-2.7651059253677425E203));
      Complex complex11 = complex2.acos();
      Complex complex12 = complex1.INF.tan();
      Complex complex13 = complex0.I.add(complex9);
      Complex complex14 = complex13.ONE.acos();
      Complex complex15 = complex13.INF.divide(complex2);
      Complex complex16 = complex5.tanh();
      Complex complex17 = complex6.sin();
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = complex3.divide(complex9);
      boolean boolean0 = complex7.isInfinite();
      Complex complex20 = complex8.multiply((-2.7651059253677425E203));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.asin();
      List<Complex> list0 = complex0.I.nthRoot(3465);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex1.INF.multiply(complex4);
      Complex complex6 = complex1.multiply((-3542.5859088207594));
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.valueOf(0.0, 2768.021264331);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.I.pow(complex9);
      boolean boolean0 = complex1.equals(complex8);
      Complex complex11 = complex3.acos();
      Complex complex12 = complex8.ZERO.add(0.29619067907333374);
      Complex complex13 = complex12.divide(complex3);
      Complex complex14 = complex8.cosh();
      Complex complex15 = complex14.exp();
      Complex complex16 = complex1.multiply(2768.021264331);
      Complex complex17 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.valueOf(2.244749069213867);
      Complex complex2 = complex0.subtract(complex1);
      List<Complex> list0 = complex2.I.nthRoot(37);
      Complex complex3 = complex0.INF.divide(2.244749069213867);
      Complex complex4 = complex3.I.tanh();
      String string0 = complex3.ONE.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.reciprocal();
      String string0 = complex0.toString();
      Complex complex2 = new Complex((-392.9521514));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.multiply(0);
      String string1 = complex4.toString();
      ComplexField complexField0 = complex4.ZERO.getField();
      double double0 = complex0.I.abs();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.NaN.multiply(complex0);
      Object object0 = complex6.ONE.readResolve();
      double double1 = complex0.getReal();
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex1.ONE.negate();
      Complex complex8 = complex6.NaN.sinh();
      double double2 = complex5.abs();
      Complex complex9 = complex4.ONE.cos();
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex2.multiply(complex6);
      Complex complex11 = Complex.valueOf(5357.663, (-1113.49));
      Complex complex12 = complex3.exp();
      Complex complex13 = complex12.NaN.divide((-1.6436423669122624E8));
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex14.sin();
      int int1 = complex13.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex0.NaN.divide(0.0);
      Complex complex8 = complex2.INF.atan();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex8.I.conjugate();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex9.NaN.add(0.0);
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      Complex complex14 = complex9.pow(complex8);
      Complex complex15 = complex14.sin();
      Complex complex16 = complex15.I.cosh();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex17 = complex2.multiply(complex3);
      Object object0 = complex17.INF.readResolve();
      Complex complex18 = complex0.INF.pow(complex12);
      Complex complex19 = complex17.ONE.multiply((-156));
      Complex complex20 = Complex.valueOf((double) 17);
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex4.equals(object1);
      ComplexField complexField0 = complex18.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(2706.9865171744427, 2706.9865171744427);
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.I.createComplex(Double.NaN, 2706.9865171744427);
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex0.tanh();
      double double1 = complex3.getImaginary();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.ONE.add(complex0);
      double double2 = complex2.getReal();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.sin();
      Complex complex10 = Complex.valueOf(Double.NaN, (double) 0);
      boolean boolean0 = complex9.equals(complex2);
      Complex complex11 = complex0.add(Double.NaN);
      Complex complex12 = complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.tanh();
      int int0 = complex1.hashCode();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex0.divide(0.0);
      double double0 = complex7.INF.abs();
      boolean boolean0 = complex1.equals("<F}utHun`.");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.088219872370737E183, 5.609418227003629E-301);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.multiply(1380);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.sin();
      Complex complex9 = complex5.I.sin();
      Complex complex10 = complex9.NaN.pow(complex0);
      Complex complex11 = complex10.NaN.add(Double.POSITIVE_INFINITY);
      double double0 = complex1.getImaginary();
      Complex complex12 = complex7.subtract((-436.7687171069));
      Complex complex13 = complex12.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex1.negate();
      Complex complex15 = complex5.reciprocal();
      Complex complex16 = complex15.divide(complex7);
      Complex complex17 = complex12.pow(complex6);
      Complex complex18 = complex16.tanh();
      String string0 = complex2.toString();
      Complex complex19 = complex5.subtract(2.0);
      Complex complex20 = complex19.conjugate();
      int int0 = complex19.I.hashCode();
      Complex complex21 = complex1.sin();
      Complex complex22 = complex3.pow(complex19);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-2511.08795619), (-2511.08795619));
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.ONE.sqrt();
      double double1 = complex0.getReal();
      Complex complex3 = Complex.valueOf((-2511.08795619));
      Complex complex4 = complex3.I.asin();
      try { 
        complex4.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.abs();
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.ZERO.sqrt();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex1.tanh();
      double double1 = complex1.I.abs();
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex0.subtract(complex6);
      Complex complex11 = complex0.multiply(complex7);
      Complex complex12 = complex9.divide(Double.NaN);
      boolean boolean0 = complex12.isInfinite();
      Complex complex13 = Complex.valueOf(1.3677729802316034E227);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4500739038517657E-9, 1170.40655857);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex2.divide(complex0);
      String string0 = complex0.toString();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-541.0));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.valueOf((-541.0));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.pow((-541.0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2315.351954671));
      Complex complex1 = new Complex(0.0, 2.0);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.acos();
      int int0 = complex5.NaN.hashCode();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex8.divide((-1812.8));
      Complex complex11 = complex8.tan();
      Complex complex12 = complex11.ONE.add(complex4);
      Complex complex13 = complex11.add(complex7);
      Complex complex14 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.3910768032073975, 1.3910768032073975);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-5030.7316651));
      Complex complex2 = complex1.INF.pow(complex0);
      Object object0 = complex0.I.readResolve();
      Complex complex3 = Complex.valueOf((-5030.7316651), (-3835.467907));
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object1);
      Complex complex4 = Complex.valueOf(0.0);
      boolean boolean1 = complex2.isInfinite();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.I.subtract(complex0);
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex5.ONE.createComplex(0.0, (-2000.19366));
      Complex complex9 = complex2.negate();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex6.multiply(complex10);
      Complex complex12 = complex2.atan();
      Complex complex13 = complex4.multiply(0.6689305305480957);
      int int0 = complex4.hashCode();
      Complex complex14 = complex3.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-472.04), (-472.04));
      Complex complex1 = complex0.multiply((-2089.8074294));
      double double0 = complex1.getReal();
      Complex complex2 = complex0.NaN.exp();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.add((-2432.4376642742063));
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex3.multiply(2768);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.pow(complex2);
      Complex complex9 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 5505.13;
      Complex complex0 = Complex.valueOf(5505.13);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.NaN.negate();
      // Undeclared exception!
      complex0.nthRoot(5493);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.5092618465423584);
      Complex complex2 = Complex.valueOf(0.5092618465423584);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex1.subtract(0.5092618465423584);
      Complex complex6 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.asin();
      List<Complex> list0 = complex0.I.nthRoot(3465);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex1.INF.multiply(complex4);
      Complex complex6 = complex1.multiply((-3542.5859088207594));
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.valueOf((double) 3465, 2768.021264331);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.I.pow(complex9);
      boolean boolean0 = complex1.equals(complex8);
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.divide(complex3);
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex13.exp();
      Complex complex15 = complex1.multiply(2768.021264331);
      Complex complex16 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.multiply(4406.6678420545);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      int int1 = complex0.ONE.hashCode();
      Complex complex1 = complex0.multiply((-2720.995981997));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1164.72710957995);
      Complex complex1 = complex0.ZERO.multiply(877);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = new Complex((-1477.1043611440552), 908.556248923);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex5.multiply(4070);
      double double0 = complex3.getImaginary();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex4.log();
      double double1 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-9.53795080582038E-9), (-9.53795080582038E-9));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.ZERO.cosh();
      Complex complex6 = Complex.valueOf((-2568.12));
      Complex complex7 = Complex.valueOf((-1046.0), 850.1515481791762);
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex3.INF.exp();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      double double0 = complex10.ZERO.getArgument();
      Complex complex11 = complex0.INF.asin();
      boolean boolean0 = complex8.isNaN();
      Complex complex12 = complex7.pow(1.126528263092041);
      Complex complex13 = complex10.I.log();
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex14.INF.tanh();
      Complex complex16 = complex14.I.subtract(complex11);
      Complex complex17 = complex5.sqrt();
      Complex complex18 = complex17.ZERO.tan();
      Complex complex19 = complex10.negate();
      Complex complex20 = complex0.cos();
      Complex complex21 = complex5.subtract(3027.34332735382);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-65.0));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex1.createComplex((-899.567624335439), (-899.567624335439));
      Complex complex7 = complex2.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.NaN.pow((-534.8));
      Object object0 = complex5.readResolve();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex5.multiply(complex6);
      Complex complex11 = complex6.NaN.negate();
      double double0 = complex1.getImaginary();
      Complex complex12 = complex5.sin();
      Complex complex13 = complex6.atan();
      Complex complex14 = complex8.acos();
      Complex complex15 = complex12.conjugate();
      Complex complex16 = complex10.cos();
      Complex complex17 = complex1.divide(0.0);
      boolean boolean0 = complex4.equals("window size must be positive ({0})");
      Complex complex18 = complex17.subtract((-2890.7851356));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.INF.toString();
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3234.3872818), (-3234.3872818));
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.ZERO.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex6.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex10.I.subtract(complex4);
      Complex complex12 = complex1.log();
      Complex complex13 = complex6.log();
      List<Complex> list0 = complex3.nthRoot(2881);
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.valueOf((-433.36542));
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex1.createComplex(3237.72, 3237.72);
      Complex complex9 = complex1.subtract(2.0089026801414973E-37);
      Complex complex10 = complex8.acos();
      Complex complex11 = complex8.exp();
      Complex complex12 = complex11.I.sinh();
      double double0 = complex0.abs();
      Complex complex13 = Complex.valueOf(2.266777992248535);
      Complex complex14 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.createComplex(1114.272021766863, (-1699.414613712076));
      Complex complex4 = complex3.subtract((-1699.414613712076));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(8.165114384910189E-116);
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.2499999701976776));
      Complex complex1 = Complex.valueOf((-0.2499999701976776), (-29.09028741));
      String string0 = complex0.toString();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.log();
      double double0 = complex3.getReal();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf((-1.3862944803291872));
      Complex complex6 = complex5.NaN.multiply((-447.32));
      Complex complex7 = Complex.valueOf((-29.09028741), (-1.3862944803291872));
      int int0 = complex1.hashCode();
      Object object0 = complex3.readResolve();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex3.cos();
      double double1 = complex7.getArgument();
      Complex complex10 = complex8.subtract((-447.32));
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-431.8225921293652), 0.0);
      Object object0 = complex0.ONE.readResolve();
      List<Complex> list0 = complex0.nthRoot(587);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ONE.multiply(complex3);
      double double0 = complex0.ZERO.getArgument();
      Complex complex6 = complex4.ONE.negate();
      double double1 = complex3.getImaginary();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.exp();
      try { 
        complex1.INF.nthRoot((-1113));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,113
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2340.73508);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ONE.subtract(complex1);
      List<Complex> list0 = complex4.ONE.nthRoot(47);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.8027), (-9.482896784430338E-8));
      Complex complex1 = complex0.I.multiply((-9.482896784430338E-8));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex2.NaN.subtract(complex0);
      Complex complex6 = complex5.NaN.divide(complex0);
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex2.ZERO.divide(0.5920095443725586);
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex9.I.exp();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.2167807682331913E-308);
      Complex complex2 = complex0.add(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex0.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-262.46770592020954));
      Complex complex1 = complex0.pow(5398.9064023);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.NaN.cos();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1199.3055924471, 1199.3055924471);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1.2288203239440918, 4407.7085);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.ZERO.reciprocal();
      double double0 = complex1.getReal();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.subtract((-20.0));
      Complex complex3 = complex2.NaN.createComplex((-972.3717), (-972.3717));
      Complex complex4 = complex0.ONE.multiply((-20.0));
      Complex complex5 = complex1.pow((-20.0));
      Complex complex6 = complex0.sin();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1551.2986344007), 1732.6927077);
      Complex complex1 = complex0.sin();
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.add(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.pow((-1551.2986344007));
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.4709796905517578, (-1.0));
      Complex complex1 = complex0.I.multiply(0.4709796905517578);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex1.multiply((double) 0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(8.310629417537063E264);
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1023.34);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.I.acos();
      int int0 = complex0.hashCode();
      Complex complex6 = complex2.INF.multiply((-4097));
      Complex complex7 = complex0.divide(6.283185307179586);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.I.pow((-8.669526204279467E-8));
      Complex complex10 = complex1.sqrt();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex9.subtract(complex3);
      Complex complex12 = complex7.asin();
      Complex complex13 = complex1.createComplex(0.0, 6.283185307179586);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1718.448115));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-356.68));
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1970.091), 0.0);
      Complex complex1 = complex0.I.subtract((-1970.091));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.multiply(218.49418070685);
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex2.INF.divide((-1970.091));
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.NaN.divide(6.645352711199266E-8);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex1.cosh();
      Complex complex10 = Complex.valueOf(2.791031173360063E-281, (-1899.028));
      Complex complex11 = complex7.ZERO.pow(0.0);
      Complex complex12 = complex10.ONE.pow(0.0);
      Complex complex13 = complex7.createComplex((-4067.0), (-1970.091));
      ComplexField complexField0 = complex1.getField();
      Complex complex14 = complex0.add(0.0);
      Complex complex15 = complex1.tanh();
      Complex complex16 = complex1.sqrt1z();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex8.add(complex17);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.createComplex(0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.atan();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex2.I.add(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.pow((-20.0));
      List<Complex> list0 = complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      double double0 = complex0.ZERO.abs();
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(241.013205871713);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ZERO.sinh();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.reciprocal();
      String string1 = complex1.ONE.toString();
      Complex complex6 = complex0.NaN.sqrt();
      Complex complex7 = complex2.subtract((-5.004237248003625E181));
      int int0 = complex7.INF.hashCode();
      Complex complex8 = complex0.multiply(Double.NaN);
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex8.NaN.asin();
      Complex complex11 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex12 = Complex.valueOf(3579.7);
      String string2 = complex2.toString();
      Object object0 = complex0.readResolve();
      Complex complex13 = complex10.reciprocal();
      Complex complex14 = complex0.negate();
      Complex complex15 = complex11.sqrt1z();
      Complex complex16 = complex13.NaN.subtract(complex14);
      try { 
        complex15.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(3030.6036);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.divide(3030.6036);
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex0.cos();
      double double0 = 4992.0;
      Complex complex7 = Complex.valueOf(4992.0);
      Complex complex8 = complex7.multiply(1481.9033);
      Complex complex9 = complex8.sinh();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex1.acos();
      double double1 = complex10.ZERO.getArgument();
      Complex complex11 = complex10.divide(0.0);
      Complex complex12 = complex11.INF.add(complex3);
      double double2 = complex11.abs();
      Complex complex13 = Complex.valueOf(1481.9033, 3030.6036);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex14.ONE.log();
      try { 
        complex2.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex0.ZERO.pow(Double.NaN);
      Complex complex4 = complex3.ONE.log();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = new Complex(2.6066826304502746E-198);
      Complex complex7 = complex6.ZERO.multiply(2.6066826304502746E-198);
      Complex complex8 = complex0.multiply(complex6);
      Complex complex9 = complex6.ZERO.cosh();
      Complex complex10 = complex0.NaN.exp();
      Complex complex11 = complex8.NaN.sqrt1z();
      Complex complex12 = complex5.atan();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex10.conjugate();
      Complex complex15 = complex2.atan();
      boolean boolean1 = complex7.equals((Object) null);
      Complex complex16 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 708.69878);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.sqrt1z();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = new Complex(Double.NaN);
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex1.multiply(891);
      boolean boolean1 = complex4.equals(complex5);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex7.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1.9872713979884691E43));
      Complex complex1 = complex0.ONE.createComplex((-1.9872713979884691E43), (-8.286782292266659E-9));
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex0.acos();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.add((-1.9872713979884691E43));
      Object object0 = complex7.readResolve();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex7.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-1604));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,604
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.log();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      double double0 = complex2.abs();
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf(778.0908512377);
      double double0 = complex1.getReal();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.divide(2371.03);
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex3.ZERO.acos();
      Complex complex7 = complex3.NaN.sqrt1z();
      Complex complex8 = complex5.I.subtract(complex2);
      int int0 = complex2.hashCode();
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.NaN.sqrt();
      double double1 = complex1.abs();
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex13.ZERO.subtract(complex0);
      Complex complex15 = Complex.valueOf(778.0908512377);
      int int1 = complex15.ZERO.hashCode();
      Complex complex16 = complex15.cosh();
      Complex complex17 = complex16.divide(complex15);
      Complex complex18 = complex4.divide((-793.9666));
      Complex complex19 = Complex.valueOf((-155.7));
      Complex complex20 = complex18.conjugate();
      Complex complex21 = complex8.sinh();
      Complex complex22 = complex21.NaN.sqrt1z();
      String string0 = complex0.toString();
      Complex complex23 = complex13.multiply(778.0908512377);
      boolean boolean0 = complex7.isNaN();
      Complex complex24 = complex12.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2130.4876065312);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex3.createComplex(2130.4876065312, 3778.29953642585);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.I.conjugate();
      List<Complex> list0 = complex7.I.nthRoot(1);
      Complex complex9 = complex6.I.divide(complex4);
      Complex complex10 = complex1.multiply(342);
      Complex complex11 = complex7.NaN.sqrt1z();
      String string0 = complex6.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex12 = complex5.subtract(complex10);
      Complex complex13 = complex1.multiply((double) 1);
      boolean boolean1 = complex1.equals("");
      double double0 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.pow((-4.079585475491198E-54));
      Complex complex4 = complex0.multiply((-74.27839686550695));
      Complex complex5 = complex4.INF.pow(complex1);
      Complex complex6 = complex1.divide(complex3);
      Object object0 = complex3.NaN.readResolve();
      List<Complex> list0 = complex2.INF.nthRoot(2878);
      Complex complex7 = complex6.INF.atan();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex7.ONE.exp();
      String string0 = complex6.ONE.toString();
      Complex complex9 = complex2.createComplex((-74.27839686550695), Double.NaN);
      Complex complex10 = complex6.add((-2237.24));
      Complex complex11 = complex7.cosh();
      double double0 = complex3.abs();
      Complex complex12 = complex0.pow(complex6);
      Complex complex13 = complex9.sqrt1z();
      String string1 = complex9.toString();
      Complex complex14 = complex1.sin();
      String string2 = complex9.toString();
      Complex complex15 = complex13.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-1212.856818129642));
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.NaN.pow((-1212.856818129642));
      Complex complex6 = complex5.I.divide((-1212.856818129642));
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex5.NaN.atan();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex6.I.divide(complex3);
      Complex complex11 = complex9.asin();
      Complex complex12 = complex9.I.divide(complex7);
      double double0 = complex12.getArgument();
      ComplexField complexField1 = complex4.getField();
      Complex complex13 = complex8.pow(1.2530567646026611);
      Complex complex14 = complex4.sqrt1z();
      Complex complex15 = complex14.INF.divide(complex8);
      ComplexField complexField2 = complex15.I.getField();
      Complex complex16 = complex15.cos();
      Complex complex17 = complex14.add(0.0);
      Complex complex18 = complex12.cos();
      Complex complex19 = complex18.I.multiply(0);
      Complex complex20 = complex19.INF.divide((-2922.97379));
      double double1 = complex3.getImaginary();
      Complex complex21 = complex18.conjugate();
      Complex complex22 = complex17.divide(34.826093925814334);
      Complex complex23 = complex21.pow(complex9);
      Complex complex24 = complex18.sqrt1z();
      Complex complex25 = complex18.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.ONE.pow(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.ONE.multiply((-587.93));
      Complex complex9 = complex4.NaN.multiply((-3036));
      Complex complex10 = complex9.I.reciprocal();
      ComplexField complexField0 = complex7.ZERO.getField();
      List<Complex> list0 = complex5.nthRoot(717);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.divide(Double.NaN);
      Complex complex13 = complex12.ONE.tan();
      Complex complex14 = complex5.tanh();
      Complex complex15 = complex0.tan();
      Complex complex16 = new Complex(0.0);
      Complex complex17 = complex15.subtract(complex16);
      Complex complex18 = Complex.valueOf(Double.NaN);
      Complex complex19 = complex2.sqrt1z();
      int int0 = complex6.hashCode();
      Complex complex20 = complex19.log();
      double double1 = complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract((-1081.3030075008));
      Complex complex2 = Complex.valueOf(2767.06318, 2.7758613753516344E131);
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.ZERO.exp();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.INF.atan();
      Object object0 = complex6.readResolve();
      Complex complex8 = complex6.ZERO.sin();
      Complex complex9 = complex0.subtract(271.90195636228);
      Object object1 = complex6.readResolve();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.ONE.pow((-749.7));
      Complex complex12 = complex11.NaN.atan();
      Complex complex13 = complex7.exp();
      Complex complex14 = complex9.sqrt();
      boolean boolean0 = complex9.isNaN();
      Complex complex15 = complex8.pow(682.782);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.0);
      Complex complex1 = complex0.ONE.multiply(2.0);
      Complex complex2 = complex1.ZERO.add(2.0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      double double0 = complex2.INF.getArgument();
      double double1 = complex2.I.getArgument();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.ZERO.atan();
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex5.INF.multiply(0);
      double double2 = complex0.getImaginary();
      Complex complex8 = complex2.ZERO.reciprocal();
      Complex complex9 = complex0.ZERO.pow(2.0);
      Complex complex10 = complex2.NaN.multiply(complex0);
      String string0 = complex9.ONE.toString();
      Complex complex11 = complex1.divide(complex5);
      Complex complex12 = complex4.add(complex0);
      Complex complex13 = Complex.valueOf((double) 0);
      Complex complex14 = complex3.divide(0.0);
      Complex complex15 = Complex.valueOf((double) 0);
      Complex complex16 = complex9.sinh();
      Complex complex17 = Complex.valueOf(2.0, 0.0);
      boolean boolean1 = complex16.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1159.87780177336);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.conjugate();
      String string0 = complex5.ONE.toString();
      double double0 = complex2.getImaginary();
      boolean boolean0 = complex4.isInfinite();
      String string1 = complex2.toString();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex6.ONE.acos();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex10.divide(complex4);
      Complex complex12 = complex8.NaN.divide(0.0);
      Complex complex13 = complex10.INF.reciprocal();
      double double1 = complex4.abs();
      Complex complex14 = complex2.sqrt1z();
      Complex complex15 = complex10.multiply(complex5);
      Complex complex16 = complex4.subtract(complex0);
      Complex complex17 = complex16.I.add(1159.87780177336);
      Complex complex18 = complex17.I.asin();
      Complex complex19 = complex10.sinh();
      Complex complex20 = complex10.divide(complex8);
      Complex complex21 = complex14.add(2.718281828459045);
      String string2 = complex11.toString();
      boolean boolean1 = complex1.isInfinite();
      Complex complex22 = complex16.log();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1558.211944995722);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.tan();
      Object object0 = complex2.ZERO.readResolve();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex7.I.acos();
      Complex complex9 = Complex.valueOf(0.0);
      String string0 = complex4.toString();
      Complex complex10 = complex1.tanh();
      int int0 = complex9.hashCode();
      double double1 = complex5.getArgument();
      Complex complex11 = complex3.sqrt();
      double double2 = complex2.getArgument();
  }
}
