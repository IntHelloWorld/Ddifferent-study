/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:20:28 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.INF.subtract(complex2);
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex2.NaN.createComplex((-2473.7789519), Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.ZERO.divide((double) 589);
      List<Complex> list0 = complex1.nthRoot(589);
      Complex complex11 = complex2.subtract((-1843.68193269));
      Complex complex12 = Complex.valueOf((double) 589);
      boolean boolean0 = complex1.isNaN();
      Complex complex13 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.INF.multiply(Double.NaN);
      Complex complex4 = complex2.INF.pow(complex0);
      Complex complex5 = complex2.add(Double.NaN);
      Complex complex6 = complex2.INF.multiply(Double.NaN);
      int int0 = complex0.hashCode();
      Complex complex7 = complex0.asin();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex8.I.multiply((-1));
      Complex complex10 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4910.531642), (-1193.100871841544));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(1519);
      Complex complex4 = complex3.ZERO.multiply(1519);
      List<Complex> list0 = complex0.ONE.nthRoot(1454);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.pow((-196.017095249584));
      Complex complex7 = complex5.INF.atan();
      Complex complex8 = complex6.ZERO.add(complex3);
      List<Complex> list1 = complex5.nthRoot(322);
      Complex complex9 = complex1.subtract((double) 322);
      Complex complex10 = complex4.I.divide(complex6);
      Complex complex11 = complex0.divide(complex1);
      Complex complex12 = complex11.ONE.sqrt1z();
      Complex complex13 = complex12.NaN.reciprocal();
      Complex complex14 = complex4.acos();
      Complex complex15 = complex2.asin();
      Complex complex16 = complex4.pow(0.5819064644665095);
      Complex complex17 = complex14.add(0.002385233612290293);
      Complex complex18 = complex6.divide(complex14);
      List<Complex> list2 = complex10.nthRoot(1519);
      Complex complex19 = complex9.asin();
      Object object0 = complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 3458.8;
      Complex complex1 = complex0.INF.pow(3458.8);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex4.ZERO.subtract((-413.339439835734));
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex2.subtract(complex0);
      double double1 = complex0.abs();
      String string0 = complex7.toString();
      Complex complex9 = complex1.I.sqrt();
      Complex complex10 = complex7.subtract(1.0);
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex9.ONE.negate();
      Complex complex13 = Complex.valueOf(3458.8, 0.0);
      int int0 = 6016;
      // Undeclared exception!
      complex13.nthRoot(6016);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.I.subtract(complex2);
      Complex complex4 = complex2.INF.pow(complex1);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex5 = Complex.valueOf((-4.831068747037129E-118));
      ComplexField complexField1 = complex5.ONE.getField();
      Complex complex6 = complex1.add(0.0);
      Complex complex7 = complex1.INF.multiply(complex2);
      Complex complex8 = complex7.I.tan();
      ComplexField complexField2 = complex8.getField();
      Complex complex9 = complex0.divide((-1.0482571326594316E-8));
      Complex complex10 = complex9.ONE.reciprocal();
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex0.createComplex((-1.0482571326594316E-8), (-2817.8));
      Complex complex13 = complex12.I.cosh();
      Complex complex14 = complex13.NaN.multiply((-2627));
      Complex complex15 = complex12.sqrt1z();
      Complex complex16 = complex1.sqrt();
      int int0 = complex1.hashCode();
      Complex complex17 = complex12.reciprocal();
      Complex complex18 = complex16.acos();
      Complex complex19 = complex17.exp();
      int int1 = complex10.hashCode();
      Complex complex20 = complex0.cos();
      boolean boolean0 = complex7.isNaN();
      double double0 = complex8.getArgument();
      Complex complex21 = complex9.pow((-1767.55528732));
      Complex complex22 = complex18.sqrt();
      double double1 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.ONE.sqrt();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.NaN.createComplex(0.0, (-2.8245462428022094E-8));
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex0.sinh();
      String string0 = complex2.toString();
      Complex complex8 = complex2.ONE.tan();
      Complex complex9 = complex8.ZERO.acos();
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex11.NaN.subtract((-203.6));
      Complex complex13 = complex11.ZERO.tanh();
      Complex complex14 = complex13.NaN.reciprocal();
      Complex complex15 = complex13.ONE.negate();
      Complex complex16 = complex4.reciprocal();
      Complex complex17 = Complex.valueOf((-2.8245462428022094E-8));
      Complex complex18 = complex17.NaN.sin();
      try { 
        complex10.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.INF.createComplex(0.0, 438);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.I.log();
      Object object0 = complex4.ONE.readResolve();
      List<Complex> list0 = complex0.nthRoot(438);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex3.NaN.subtract(0.0);
      Complex complex5 = complex1.I.add(0.0);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex8.multiply(complex5);
      Complex complex11 = complex1.reciprocal();
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-52.0), (-1462.753670376));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex1.tan();
      Object object0 = complex5.ONE.readResolve();
      String string0 = complex0.toString();
      Complex complex6 = complex4.multiply(0);
      Complex complex7 = complex1.ONE.atan();
      Complex complex8 = complex7.ZERO.reciprocal();
      Complex complex9 = complex4.acos();
      double double1 = complex2.getImaginary();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex3.pow(complex7);
      double double2 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.atan();
      try { 
        complex3.NaN.nthRoot((-2243));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,243
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(2757.711);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.NaN.add(2757.711);
      Complex complex6 = complex3.pow((-20.0));
      Complex complex7 = complex4.log();
      Complex complex8 = complex3.NaN.sin();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.divide(complex6);
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex7.add((-20.0));
      Complex complex13 = complex7.sin();
      Complex complex14 = complex9.pow(2757.711);
      Complex complex15 = complex14.NaN.atan();
      Complex complex16 = complex0.multiply(1);
      Complex complex17 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(838.4911);
      Complex complex2 = complex0.ZERO.sinh();
      String string0 = complex0.INF.toString();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.multiply(complex1);
      List<Complex> list0 = complex1.nthRoot(324);
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf((double) 324);
      double double0 = complex5.getImaginary();
      Complex complex7 = new Complex((-982.848694035), Double.NaN);
      Complex complex8 = complex4.ZERO.divide(complex7);
      Complex complex9 = complex4.INF.tan();
      double double1 = complex0.getImaginary();
      Complex complex10 = complex7.ZERO.add(complex1);
      Complex complex11 = complex5.pow(5654.7955813);
      int int0 = complex5.hashCode();
      Complex complex12 = complex11.subtract(complex1);
      Complex complex13 = complex11.I.add(3392.691);
      Complex complex14 = complex12.INF.negate();
      Complex complex15 = complex3.sqrt1z();
      Complex complex16 = complex12.ONE.exp();
      Complex complex17 = Complex.valueOf(838.4911);
      int int1 = complex16.ONE.hashCode();
      Complex complex18 = complex16.multiply(0);
      double double2 = complex4.getReal();
      Complex complex19 = complex12.sin();
      double double3 = complex11.abs();
      Complex complex20 = complex2.subtract(complex7);
      Complex complex21 = complex12.add(6.283185307179586);
      Complex complex22 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 296;
      Complex complex1 = complex0.multiply(296);
      Complex complex2 = Complex.valueOf((double) 296, (double) 296);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex3.ONE.multiply((double) 296);
      Complex complex5 = complex3.I.sqrt1z();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex7.ONE.conjugate();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex0.add(complex1);
      double double0 = complex0.getReal();
      try { 
        complex6.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.valueOf((-20.0), 2.0);
      double double0 = complex1.INF.abs();
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(0.0, (-78.265901621835));
      Complex complex7 = complex4.atan();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex4.divide(complex1);
      double double1 = complex9.abs();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex4.subtract(Double.POSITIVE_INFINITY);
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex5.log();
      Complex complex14 = complex9.INF.add(complex0);
      Complex complex15 = complex13.INF.add(complex5);
      Complex complex16 = complex0.multiply((-20.0));
      Complex complex17 = complex12.negate();
      String string0 = complex11.toString();
      Complex complex18 = complex1.negate();
      Complex complex19 = complex18.negate();
      Complex complex20 = complex6.divide(Double.POSITIVE_INFINITY);
      Complex complex21 = complex2.multiply(complex9);
      Complex complex22 = complex21.divide(complex8);
      Complex complex23 = complex18.conjugate();
      Complex complex24 = Complex.valueOf(2493.863543709206, (-1.0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-713.605323319897), (-713.605323319897));
      Complex complex1 = complex0.INF.add((-713.605323319897));
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.ONE.conjugate();
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex0.pow((-104.04348));
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = Complex.valueOf((-713.605323319897));
      Complex complex7 = complex3.multiply((-723.639));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(967.010904382, 967.010904382);
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.valueOf(1326.70036);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.pow(Double.NaN);
      Complex complex5 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1348.8215969408782), (-1348.8215969408782));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.divide((-1348.8215969408782));
      double double0 = complex0.ZERO.getArgument();
      Complex complex4 = complex2.I.createComplex(0.0, (-196.137998171155));
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.ZERO.divide(complex0);
      Complex complex8 = complex2.INF.atan();
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex9.INF.divide((-1708.75));
      Complex complex11 = Complex.valueOf((-2884.0));
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex5.divide(complex1);
      double double1 = complex4.getArgument();
      String string0 = complex3.toString();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex2.exp();
      Complex complex16 = complex15.exp();
      Complex complex17 = complex4.acos();
      Complex complex18 = complex0.pow(3534.223337021279);
      String string1 = complex18.toString();
      Complex complex19 = complex5.pow(complex1);
      String string2 = complex3.toString();
      Complex complex20 = complex4.sinh();
      Complex complex21 = complex5.pow(complex7);
      Complex complex22 = Complex.valueOf(0.0);
      Complex complex23 = complex16.subtract(complex22);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1590.70714), (-1590.70714));
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.divide(complex1);
      double double0 = complex3.INF.getArgument();
      Complex complex4 = Complex.valueOf((-2.308736892479391E-9));
      Complex complex5 = complex4.INF.add(complex3);
      double double1 = complex4.ONE.getArgument();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.add(0.0);
      Complex complex8 = complex1.cos();
      boolean boolean0 = complex8.isInfinite();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex0.createComplex(0.0, 2155.90703669);
      Complex complex11 = complex0.divide(0.7853981633974483);
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1200.98059886248, 1200.98059886248);
      Complex complex1 = complex0.atan();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ONE.subtract(Double.NaN);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = (-1450.5473814391828);
      Complex complex0 = Complex.valueOf((-1450.5473814391828));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.multiply((-789.2643552730777));
      try { 
        complex1.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(394.0);
      Complex complex1 = complex0.NaN.createComplex(2.1858142063550155E-134, 2963.9448);
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.I.multiply(1.0);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex2.I.pow(complex1);
      Complex complex6 = complex2.NaN.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex6.negate();
      double double0 = complex5.abs();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-1644.0));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.INF.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex6.ZERO.divide(3323.158);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex5.ZERO.acos();
      Complex complex12 = complex10.NaN.createComplex((-1644.0), (-486.9364));
      Complex complex13 = Complex.valueOf(3786.3907871514357, 0.0);
      Complex complex14 = complex10.add(complex1);
      Complex complex15 = complex0.cos();
      List<Complex> list0 = complex15.nthRoot(1224);
      int int0 = complex5.hashCode();
      Complex complex16 = complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(4.102052341676543E-46);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1509.150047228118, 1083.836);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.exp();
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex4.pow(1509.150047228118);
      Object object0 = complex7.INF.readResolve();
      int int1 = complex7.NaN.hashCode();
      Complex complex8 = complex0.multiply(169);
      Complex complex9 = complex0.tanh();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.INF.multiply(1124);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex3.ZERO.divide(2976.16332244);
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.ZERO.sinh();
      double double0 = complex6.ZERO.getArgument();
      Complex complex8 = complex6.add(0.0);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex1.multiply(1);
      Complex complex11 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2693.7256);
      Complex complex1 = complex0.ONE.multiply((-30.3313131));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex2.NaN.acos();
      Complex complex6 = complex2.NaN.multiply(2322);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex7.ONE.subtract(complex2);
      Complex complex10 = complex7.I.multiply(complex2);
      Complex complex11 = complex6.NaN.add(complex1);
      double double0 = complex5.ONE.getArgument();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex5.equals(object0);
      List<Complex> list0 = complex6.nthRoot(2322);
      int int0 = complex5.hashCode();
      Complex complex12 = complex5.exp();
      String string0 = complex3.toString();
      Complex complex13 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(1);
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex2.I.pow(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex2.conjugate();
      double double1 = complex0.abs();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex5.sqrt1z();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1856.0899953612256), 0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.negate();
      List<Complex> list0 = complex1.NaN.nthRoot(791);
      Complex complex4 = complex0.multiply(791);
      Complex complex5 = complex3.INF.multiply(complex0);
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex4.tanh();
      double double0 = complex3.abs();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex0.I.multiply((-1856.0899953612256));
      Complex complex10 = complex8.createComplex(5.926057457356852E-43, 7.47197247068667E-43);
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex1.multiply(complex0);
      Complex complex13 = complex12.I.reciprocal();
      double double1 = complex12.getArgument();
      ComplexField complexField0 = complex12.getField();
      double double2 = complex12.getReal();
      Complex complex14 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2658.3392093487996);
      Complex complex1 = Complex.valueOf(2658.3392093487996, (-680.6216065));
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex0.tanh();
      boolean boolean0 = complex4.isInfinite();
      String string0 = complex4.toString();
      Complex complex6 = complex0.atan();
      boolean boolean1 = complex5.equals(complex3);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-2480));
      ComplexField complexField0 = complex1.NaN.getField();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex3.multiply(0.0);
      Complex complex7 = complex6.ONE.multiply(complex1);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex4.subtract(complex8);
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex7.reciprocal();
      double double1 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.acos();
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.NaN.add(1769.5888);
      Complex complex5 = complex0.tanh();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.multiply(37);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.subtract((-1.0902938113007961E-8));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.I.getArgument();
      double double1 = complex0.ONE.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.INF.tanh();
      double double2 = complex1.INF.abs();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.tan();
      int int0 = complex2.hashCode();
      Complex complex4 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(2471.27, 2471.27);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.valueOf(2471.27, (-548.679326496602));
      Complex complex3 = complex0.ZERO.subtract(0.0);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex0.createComplex(2471.27, (-548.679326496602));
      List<Complex> list0 = complex5.INF.nthRoot(1451);
      Complex complex6 = complex5.divide((-548.679326496602));
      Complex complex7 = Complex.valueOf(2471.27);
      Complex complex8 = complex0.INF.log();
      double double0 = complex1.getImaginary();
      Complex complex9 = complex7.pow((-548.679326496602));
      Complex complex10 = complex0.exp();
      Complex complex11 = complex4.cos();
      ComplexField complexField0 = complex9.getField();
      Complex complex12 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1139.128145545, 1139.128145545);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.exp();
      String string0 = complex3.toString();
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.NaN.subtract(complex0);
      Complex complex6 = complex0.I.sin();
      Complex complex7 = complex3.exp();
      double double0 = complex0.getArgument();
      Complex complex8 = complex5.ZERO.log();
      Complex complex9 = complex3.cos();
      double double1 = complex5.getImaginary();
      Complex complex10 = complex3.multiply(1);
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex6.negate();
      Complex complex12 = complex0.cos();
      double double2 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(89.7698);
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.tan();
      double double0 = complex0.I.getArgument();
      Complex complex5 = complex1.subtract(20.0);
      ComplexField complexField0 = complex5.ZERO.getField();
      double double1 = complex5.getArgument();
      Complex complex6 = complex3.add(complex1);
      String string0 = complex6.INF.toString();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.add(1.5707963267948966);
      boolean boolean0 = complex0.equals(complex7);
      Complex complex9 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(275.9526286395, 0.265214741230011);
      Complex complex1 = complex0.createComplex(275.9526286395, 1827.7419234683);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.add(1827.7419234683);
      Complex complex4 = complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex0.add(0.0);
      double double0 = complex4.abs();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.INF.multiply(Double.NaN);
      Complex complex4 = complex2.INF.pow(complex0);
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.asin();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.I.multiply((-1));
      Complex complex8 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = complex0.ONE.exp();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.INF.subtract(446.6);
      Complex complex6 = complex3.ZERO.createComplex(446.6, Double.NaN);
      Complex complex7 = complex6.NaN.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1554977893829346, 0.0);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.INF.multiply(complex0);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex0.multiply(1853.65822349);
      Complex complex7 = complex0.exp();
      double double0 = complex2.getImaginary();
      int int0 = complex7.hashCode();
      Complex complex8 = complex4.negate();
      Complex complex9 = Complex.I;
      Complex complex10 = complex5.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.pow(773.9504);
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex3.ONE.subtract(0.0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.INF.subtract(0.0);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.ZERO.pow(0.0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.multiply(complex2);
      double double0 = complex0.getReal();
      int int0 = complex3.hashCode();
      Complex complex5 = complex2.multiply(0.0);
      Complex complex6 = Complex.valueOf((-236.02348456596));
      double double1 = complex0.abs();
      Complex complex7 = complex1.NaN.multiply(1);
      double double2 = complex1.getReal();
      double double3 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-615.1923008632), (-776.8498043981144));
      Complex complex1 = complex0.subtract((-776.8498043981144));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3604.2330167235473);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.divide((-306.1777));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2446.835547128518, (-1562.766));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.INF.createComplex(2446.835547128518, (-1562.766));
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = Complex.valueOf(2446.835547128518, 2446.835547128518);
      Complex complex5 = complex4.INF.exp();
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ONE.createComplex(1.5959614205422845E-225, 0.0);
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = Complex.valueOf((-1562.766));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.add(1220.9934);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.createComplex((-1409.8834474), 1220.9934);
      Complex complex4 = complex1.NaN.tanh();
      Complex complex5 = complex1.ZERO.negate();
      int int1 = complex4.NaN.hashCode();
      String string0 = complex1.INF.toString();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex0.multiply(0);
      double double0 = complex7.getReal();
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex4.multiply(4.31880454864738E-203);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.NaN.pow(0.0);
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.pow(1282.65361109);
      String string0 = complex5.toString();
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex6.I.cosh();
      boolean boolean0 = complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ONE.subtract(0.0);
      Complex complex3 = complex0.createComplex((-2626.55155), (-2626.55155));
      Object object0 = complex0.I.readResolve();
      Object object1 = complex0.ONE.readResolve();
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ZERO.multiply(2473);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex2.pow(3.6725170580355583E-9);
      Complex complex8 = complex3.multiply((-2893));
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      double double0 = 2.0;
      Complex complex2 = complex0.divide(2.0);
      Complex complex3 = complex0.NaN.tan();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(402.43, (-1899.625766));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2829.9061350151824, 2829.9061350151824);
      Complex complex1 = Complex.valueOf(896.6569, 0.0);
      List<Complex> list0 = complex0.nthRoot(1703);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(1509.36516);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(1509.36516);
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.multiply(646);
      double double0 = complex3.getArgument();
      Complex complex9 = complex1.multiply(37);
      Object object0 = complex1.readResolve();
      Complex complex10 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply((-476));
      Complex complex3 = complex2.add(complex1);
      double double0 = complex0.getReal();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1742.601187434));
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.INF.add(0.0);
      double double0 = complex6.getImaginary();
      Complex complex9 = complex4.add(0.0);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex9.ZERO.multiply(complex7);
      Complex complex12 = complex1.INF.tan();
      int int0 = complex1.hashCode();
      Complex complex13 = complex5.log();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.INF.divide(complex1);
      try { 
        complex2.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.tanh();
      double double0 = complex1.INF.getArgument();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.createComplex(0.5069117546081543, (-40.0));
      Complex complex5 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(1223.3360828290315);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.reciprocal();
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.acos();
      double double0 = complex1.INF.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.acos();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.INF.divide(685.6345062);
      double double0 = complex3.getImaginary();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex0.createComplex((-1707.63), (-2203.4861));
      Complex complex5 = complex4.sinh();
      List<Complex> list0 = complex1.nthRoot(1230);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ZERO.cos();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex3 = complex0.I.divide((-709.74));
      String string0 = complex0.toString();
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.ONE.pow(complex0);
      Complex complex7 = complex5.multiply((-8.291832428736212E-8));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex2.INF.cosh();
      int int0 = (-3271);
      double double0 = complex3.getArgument();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.multiply((-3271));
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex2.createComplex((-3271), (-938.34709));
      try { 
        complex7.NaN.nthRoot((-584));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -584
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.reciprocal();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = Complex.valueOf((-8.491135959370133E-8));
      try { 
        complex4.nthRoot((-749));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -749
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(4572.462055);
      Complex complex1 = Complex.valueOf((-2068.502383033));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1274.33147209609), (-1274.33147209609));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(862.2135207562);
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex0.createComplex((-1274.33147209609), (-1274.33147209609));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-151.379897), 3054.9);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.NaN.reciprocal();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      String string0 = complex0.ZERO.toString();
      String string1 = complex0.toString();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.divide(complex0);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex3.add((-2386.7));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-1294.945569371));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.INF.divide(complex2);
      Complex complex4 = complex2.NaN.divide(complex1);
      double double0 = complex0.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex5 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.divide((-2689.7746));
      Complex complex3 = complex1.exp();
      double double0 = complex0.abs();
      Complex complex4 = complex0.pow(1513.248345);
      Complex complex5 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex2.ONE.exp();
      Complex complex6 = complex2.INF.atan();
      double double0 = complex0.abs();
      Complex complex7 = new Complex(20.0, 20.0);
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex8.I.exp();
      double double1 = complex6.getArgument();
      try { 
        complex6.nthRoot((-3815));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,815
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.createComplex(0.0, 365.178391);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex5.NaN.add(complex6);
      List<Complex> list0 = complex1.NaN.nthRoot(1767);
      Complex complex8 = complex5.ZERO.add(complex3);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.ONE.multiply(0.0);
      int int0 = complex10.INF.hashCode();
      Object object0 = complex9.readResolve();
      Complex complex11 = complex8.acos();
      Complex complex12 = complex1.NaN.log();
      Complex complex13 = Complex.valueOf(0.0, (-206.73978196029));
      Complex complex14 = complex11.ONE.conjugate();
      Complex complex15 = complex14.NaN.tanh();
      Complex complex16 = complex10.acos();
      Complex complex17 = complex8.createComplex(0.0, 365.178391);
      Complex complex18 = complex0.pow(341.9);
      Complex complex19 = complex16.log();
      double double1 = complex1.getReal();
      Complex complex20 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex20.INF.getField();
      Complex complex21 = complex3.sqrt();
      Complex complex22 = complex5.subtract(365.178391);
      Complex complex23 = complex8.atan();
      boolean boolean0 = complex10.isInfinite();
      Complex complex24 = complex14.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.tan();
      int int0 = complex2.hashCode();
      Complex complex4 = complex0.multiply(279.3917429975);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-1937.5046595));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.I.tanh();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex3.I.subtract((-886.0));
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex7.I.createComplex((-4763.67070073145), 928.76);
      double double0 = complex6.getArgument();
      Complex complex9 = complex0.subtract(0.0);
      Complex complex10 = complex0.I.cosh();
      double double1 = complex2.INF.abs();
      Complex complex11 = complex1.multiply((-210.8));
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex12.INF.subtract(0.0);
      Complex complex14 = complex13.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex15 = complex6.tanh();
      double double2 = complex1.I.abs();
      Complex complex16 = complex7.INF.conjugate();
      Complex complex17 = complex2.NaN.subtract((-1303.611433));
      Complex complex18 = complex2.log();
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex7.acos();
      Complex complex21 = complex2.pow((-210.8));
      Complex complex22 = complex0.pow(complex7);
      Complex complex23 = complex8.multiply(928.76);
      double double3 = complex9.getArgument();
      Complex complex24 = complex22.multiply(37);
      List<Complex> list0 = complex6.nthRoot(1400);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.sqrt1z();
      List<Complex> list0 = complex2.nthRoot(1);
      double double0 = complex2.getImaginary();
      Complex complex5 = complex1.NaN.log();
      Complex complex6 = complex0.sqrt1z();
      try { 
        complex1.nthRoot((-1371));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,371
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.multiply(1);
      Complex complex3 = complex2.I.subtract(complex1);
      double double0 = complex0.ZERO.getArgument();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex0.add(2.0);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex6.I.tanh();
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = complex9.I.multiply(complex0);
      Complex complex12 = complex7.subtract(complex3);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex13 = complex6.subtract(complex7);
      Complex complex14 = complex13.NaN.atan();
      List<Complex> list1 = complex2.nthRoot(1);
      Complex complex15 = complex12.sin();
      double double1 = complex4.abs();
      double double2 = complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.INF.subtract(complex2);
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex1.ZERO.divide((double) 589);
      List<Complex> list0 = complex1.nthRoot(589);
      Complex complex10 = complex2.subtract((-1843.68193269));
      Complex complex11 = Complex.valueOf((double) 589);
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = Complex.valueOf((-1629.856518843));
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex4.multiply((-2437));
      Complex complex8 = complex2.subtract(Double.NaN);
      Complex complex9 = complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      String string0 = complex0.I.toString();
      Complex complex3 = complex1.INF.subtract(complex2);
      Complex complex4 = complex3.ZERO.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex2.sin();
      Complex complex6 = Complex.valueOf(0.0);
      double double0 = complex6.ZERO.abs();
      List<Complex> list0 = complex5.nthRoot(1);
      double double1 = complex5.INF.getArgument();
      int int0 = complex5.ONE.hashCode();
      double double2 = complex2.getImaginary();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex0.atan();
      String string1 = complex0.toString();
      boolean boolean0 = complex9.equals("(NaN, NaN)");
      Complex complex11 = complex2.log();
      Complex complex12 = complex11.ZERO.multiply(complex1);
      String string2 = complex0.toString();
      Complex complex13 = complex1.add(complex7);
      Complex complex14 = complex5.cos();
      Complex complex15 = complex11.atan();
      double double3 = complex2.abs();
      double double4 = complex10.getArgument();
  }
}
