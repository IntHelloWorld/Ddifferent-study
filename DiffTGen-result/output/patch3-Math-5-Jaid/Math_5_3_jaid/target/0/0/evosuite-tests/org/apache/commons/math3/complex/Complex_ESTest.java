/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:13:36 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.ONE.subtract((-4340.321403616141));
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.NaN.sqrt1z();
      Complex complex7 = Complex.valueOf(2483.7627536);
      Complex complex8 = complex7.I.multiply(complex5);
      Complex complex9 = complex7.I.sin();
      Complex complex10 = complex5.sqrt();
      ComplexField complexField0 = complex10.I.getField();
      Object object0 = complex3.readResolve();
      String string0 = complex0.toString();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex1.tan();
      Complex complex13 = complex3.divide(94.4542);
      Complex complex14 = complex2.subtract(0.0);
      double double1 = complex3.getImaginary();
      Complex complex15 = Complex.valueOf(94.4542, Double.NaN);
      Complex complex16 = Complex.valueOf(0.0, 2483.7627536);
      Complex complex17 = complex9.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2305.526196654366), (-2305.526196654366));
      Complex complex1 = complex0.ONE.asin();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.ONE.subtract(0.0);
      boolean boolean1 = complex1.isNaN();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = new Complex(0.0);
      double double0 = complex4.abs();
      Complex complex8 = complex0.multiply((-864.259339588));
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex10.ZERO.asin();
      Complex complex12 = complex4.acos();
      Complex complex13 = new Complex(0.0);
      Complex complex14 = complex12.INF.tan();
      boolean boolean2 = complex8.equals(complex13);
      Complex complex15 = complex2.divide(complex4);
      String string0 = complex9.toString();
      double double1 = complex15.getImaginary();
      Complex complex16 = complex12.log();
      ComplexField complexField0 = complex3.getField();
      Complex complex17 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex2.NaN.negate();
      Complex complex5 = complex0.INF.pow(1.958392846081373E-260);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.multiply((-1237));
      Complex complex8 = complex7.pow(complex0);
      String string0 = complex3.toString();
      String string1 = complex7.ZERO.toString();
      Object object0 = complex3.readResolve();
      Complex complex9 = complex2.multiply((-2655.578423385));
      boolean boolean0 = complex6.equals(object0);
      Complex complex10 = Complex.valueOf(20.0);
      Complex complex11 = complex0.INF.subtract(complex8);
      Complex complex12 = complex10.NaN.cosh();
      Complex complex13 = complex10.ONE.pow(20.0);
      ComplexField complexField1 = complex13.INF.getField();
      Complex complex14 = complex7.createComplex((-1237), 20.0);
      int int0 = complex6.NaN.hashCode();
      Complex complex15 = complex3.cosh();
      Complex complex16 = complex15.NaN.sin();
      double double0 = complex2.abs();
      Complex complex17 = complex14.log();
      Complex complex18 = complex17.cos();
      Complex complex19 = new Complex((-2655.578423385), 0.9999999999999998);
      Complex complex20 = complex17.subtract(complex19);
      Complex complex21 = complex14.log();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.valueOf(883.0);
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex1.ZERO.subtract(883.0);
      Complex complex5 = complex1.INF.multiply(complex0);
      double double0 = complex0.getReal();
      String string0 = complex0.NaN.toString();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.subtract((-1050.38448165075));
      Complex complex7 = complex6.tanh();
      String string1 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.conjugate();
      String string0 = complex2.I.toString();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex2.sqrt();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.divide((-190.84557187766944));
      Complex complex6 = Complex.valueOf((-190.84557187766944), (-190.84557187766944));
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex1.divide(complex6);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.4143368931719686E98);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex1.ONE.atan();
      double double0 = complex2.getReal();
      Complex complex4 = complex2.subtract(1.4143368931719686E98);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex4.I.divide(complex5);
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex7 = complex5.multiply(Double.NaN);
      Complex complex8 = complex7.pow(complex2);
      Complex complex9 = complex7.pow(complex0);
      Complex complex10 = complex9.ONE.divide(20.0);
      Complex complex11 = complex4.NaN.sin();
      Complex complex12 = complex7.add(1.4143368931719686E98);
      Complex complex13 = complex2.I.divide(0.0);
      Complex complex14 = complex7.ZERO.cosh();
      Complex complex15 = complex2.sqrt();
      double double1 = complex4.getArgument();
      Complex complex16 = complex5.add(complex15);
      Complex complex17 = complex15.cosh();
      Complex complex18 = complex6.multiply(complex7);
      Complex complex19 = complex15.pow(complex16);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1768.9198843798392));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.I.pow(complex1);
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex1.I.add(complex6);
      Complex complex9 = complex7.I.log();
      int int0 = complex3.hashCode();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex1.ONE.cosh();
      Complex complex12 = complex8.createComplex(0.0, 3434.7232932422);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-867.27722));
      Complex complex1 = complex0.INF.acos();
      List<Complex> list0 = complex1.I.nthRoot(1525);
      Complex complex2 = complex0.ZERO.multiply(17);
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.NaN.multiply(1525);
      Complex complex6 = complex0.createComplex((-867.27722), (-867.27722));
      Complex complex7 = complex2.ONE.conjugate();
      Complex complex8 = complex0.ONE.tanh();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex9.tan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex11 = complex6.multiply((double) 17);
      Complex complex12 = complex11.NaN.atan();
      double double1 = complex2.getReal();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex13.multiply(1525);
      Complex complex15 = complex6.INF.tanh();
      Complex complex16 = complex8.NaN.tanh();
      Complex complex17 = complex16.ONE.asin();
      Complex complex18 = complex11.subtract(Double.NaN);
      Complex complex19 = complex8.cosh();
      Complex complex20 = complex11.atan();
      double double2 = complex20.getReal();
      boolean boolean1 = complex12.isInfinite();
      Complex complex21 = complex12.pow((-867.27722));
      Complex complex22 = complex2.multiply((double) 17);
      boolean boolean2 = complex2.equals(complex22);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = new Complex((-20.0));
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex6.NaN.cosh();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex12.NaN.acos();
      Complex complex14 = complex3.pow((-1231.0));
      Complex complex15 = complex14.NaN.exp();
      Complex complex16 = complex14.ZERO.pow(complex9);
      Complex complex17 = complex0.INF.sqrt();
      String string0 = complex11.toString();
      Complex complex18 = complex10.tanh();
      Complex complex19 = complex9.log();
      Complex complex20 = complex19.add(complex17);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0112214979786464E-43, 1.0112214979786464E-43);
      String string0 = complex0.I.toString();
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.createComplex(1.0112214979786464E-43, 1.0112214979786464E-43);
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex2.NaN.tanh();
      Complex complex6 = complex3.ZERO.createComplex(1.0112214979786464E-43, 0.0);
      Complex complex7 = complex6.subtract((-1895.569135657));
      Complex complex8 = complex1.I.pow(1.0112214979786464E-43);
      Complex complex9 = complex8.NaN.multiply(1.0112214979786464E-43);
      Complex complex10 = complex9.I.multiply((-5.533523366931846E-8));
      Complex complex11 = complex0.add(1.0);
      Complex complex12 = complex0.ONE.cos();
      Complex complex13 = complex5.NaN.cosh();
      Complex complex14 = complex5.ONE.conjugate();
      Complex complex15 = complex11.NaN.createComplex(2.0, 799.92865399);
      int int0 = complex0.hashCode();
      double double0 = complex2.getImaginary();
      Complex complex16 = complex5.multiply(2.0);
      double double1 = complex4.abs();
      Complex complex17 = complex10.createComplex(799.92865399, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = null;
      Complex complex3 = complex0.ONE.acos();
      try { 
        complex3.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(1847.28214244119);
      Complex complex2 = complex0.divide((-3323.18));
      double double0 = complex1.getImaginary();
      List<Complex> list0 = complex0.NaN.nthRoot(713);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.add(complex2);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex0.multiply((-3323.18));
      boolean boolean1 = complex6.equals(complex5);
      double double1 = complex5.abs();
      Complex complex7 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.pow(Double.NaN);
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(5.32346341339996E-260, 3036.10829569);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2305.526196654366), (-2305.526196654366));
      Complex complex1 = complex0.ONE.asin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.tan();
      boolean boolean0 = complex1.isInfinite();
      double double0 = 0.0;
      Complex complex3 = complex0.ONE.subtract(0.0);
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.ONE.add(complex5);
      Complex complex8 = complex7.INF.cos();
      double double1 = complex5.abs();
      Complex complex9 = complex0.multiply((-864.259339588));
      Complex complex10 = complex9.INF.sqrt();
      try { 
        complex9.nthRoot((-1328));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,328
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-247.0), (-247.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.add(4315.4892664815);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.ZERO.tan();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex4.I.add(complex1);
      Complex complex8 = Complex.valueOf(4315.4892664815);
      Complex complex9 = complex7.exp();
      Object object0 = complex4.ONE.readResolve();
      Complex complex10 = complex5.I.sqrt1z();
      Complex complex11 = complex9.divide(20.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex12 = complex0.tanh();
      Complex complex13 = Complex.valueOf((-247.0));
      Complex complex14 = complex1.pow(complex5);
      Complex complex15 = complex9.exp();
      Complex complex16 = complex13.exp();
      double double0 = complex15.getImaginary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      List<Complex> list0 = complex0.nthRoot(855);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex0.createComplex((-936.488), 855);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex6.I.divide((double) 855);
      Complex complex9 = complex1.INF.createComplex(87.18711222, (-936.488));
      Complex complex10 = complex8.ONE.subtract(complex0);
      Complex complex11 = complex5.ZERO.conjugate();
      Complex complex12 = complex1.NaN.log();
      Complex complex13 = complex0.ZERO.multiply(855);
      Complex complex14 = complex13.ONE.sqrt1z();
      Complex complex15 = complex1.multiply(855);
      double double0 = complex15.getImaginary();
      Complex complex16 = complex5.pow(complex1);
      Complex complex17 = complex1.tan();
      Complex complex18 = complex5.sqrt1z();
      Complex complex19 = complex11.subtract(complex5);
      Object object0 = complex1.readResolve();
      Complex complex20 = complex6.divide(complex11);
      ComplexField complexField0 = complex20.getField();
      Complex complex21 = complex20.sqrt();
      Complex complex22 = complex21.ONE.subtract((double) 855);
      String string0 = complex18.toString();
      Complex complex23 = complex20.pow(complex13);
      Complex complex24 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.createComplex((-5570.363387741096), (-5570.363387741096));
      Complex complex4 = complex1.NaN.asin();
      Complex complex5 = complex4.ZERO.multiply((-5570.363387741096));
      Complex complex6 = complex4.I.pow(complex0);
      Complex complex7 = complex2.NaN.add(complex1);
      Complex complex8 = complex3.NaN.exp();
      String string1 = complex2.I.toString();
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex1.I.cos();
      Complex complex11 = complex8.ONE.atan();
      String string2 = complex0.toString();
      double double0 = complex2.getReal();
      Complex complex12 = complex8.negate();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex2.cosh();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex14.equals(object0);
      Complex complex15 = complex14.asin();
      double double1 = complex6.abs();
      double double2 = complex12.getImaginary();
      Complex complex16 = complex13.cosh();
      Complex complex17 = complex12.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex3.divide((-969.159085));
      Object object0 = complex6.readResolve();
      Complex complex8 = complex0.NaN.sqrt();
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = complex1.INF.multiply(0.0);
      Complex complex11 = complex10.INF.acos();
      Complex complex12 = complex2.NaN.cosh();
      boolean boolean0 = complex5.equals(object0);
      Complex complex13 = complex6.add(complex2);
      Complex complex14 = complex13.add(1106.558315372415);
      Complex complex15 = complex12.createComplex(1798.0, 1.5640296936035156);
      Complex complex16 = complex6.acos();
      Complex complex17 = complex15.exp();
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.83211088180542, 1.83211088180542);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ZERO.reciprocal();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.I.cos();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex0.NaN.exp();
      Complex complex8 = Complex.valueOf((-201.7796285), (-201.7796285));
      Complex complex9 = complex6.subtract((-1743.936824));
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex8.INF.pow(complex9);
      Complex complex13 = complex8.atan();
      Complex complex14 = complex8.exp();
      Complex complex15 = complex14.ONE.sin();
      Complex complex16 = complex15.NaN.add(1.83211088180542);
      boolean boolean1 = complex0.isNaN();
      Complex complex17 = complex1.conjugate();
      Complex complex18 = complex17.ZERO.add((-1743.936824));
      Complex complex19 = complex16.divide(complex14);
      Complex complex20 = complex7.atan();
      Complex complex21 = complex11.exp();
      Complex complex22 = complex14.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1090.66395227784), (-1090.66395227784));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-486.0));
      Complex complex1 = Complex.valueOf((-486.0));
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.createComplex((-1.0), 4.588367423411997E223);
      Complex complex5 = complex3.pow((-486.0));
      Complex complex6 = complex2.divide(2424.2);
      Complex complex7 = complex2.ZERO.log();
      String string0 = complex7.INF.toString();
      Complex complex8 = complex6.add((-1.0));
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.ONE.log();
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex12.NaN.subtract(complex11);
      Object object0 = complex2.readResolve();
      Complex complex14 = complex5.ZERO.acos();
      Complex complex15 = Complex.valueOf(2424.2, (-1.0));
      Complex complex16 = complex4.negate();
      Complex complex17 = complex16.asin();
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex5.pow(complex18);
      Complex complex20 = complex6.negate();
      Complex complex21 = complex20.sin();
      Complex complex22 = complex17.conjugate();
      Complex complex23 = complex11.sinh();
      Complex complex24 = complex2.add(4.588367423411997E223);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4679262638092041, 0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.divide(0.4679262638092041);
      Complex complex3 = complex1.NaN.createComplex((-259.349577039), 0.0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex5.ONE.tanh();
      ComplexField complexField0 = complex5.getField();
      double double0 = complex0.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex3.pow((-259.349577039));
      ComplexField complexField1 = complex1.getField();
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex0.pow((-362.35));
      Complex complex10 = complex4.add(complex3);
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex0.subtract((-1081.708));
      Complex complex13 = complex10.add(complex4);
      Complex complex14 = complex1.conjugate();
      Complex complex15 = complex14.createComplex((-259.349577039), (-362.35));
      Complex complex16 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.I.pow((-497.0815538526));
      Object object0 = complex4.I.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.ZERO.sqrt1z();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex7 = complex3.cos();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.I.multiply(1229);
      Complex complex10 = complex3.exp();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex7.sin();
      Complex complex13 = complex5.sqrt();
      int int0 = complex5.hashCode();
      Complex complex14 = complex7.add(complex9);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2891.77595481);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex3.ONE.log();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex6 = complex0.I.subtract(0.0);
      int int0 = complex0.hashCode();
      String string0 = complex2.toString();
      Complex complex7 = complex1.createComplex(3412.880120101404, 3412.880120101404);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.cosh();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex1.conjugate();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-1283.5868017411);
      Complex complex0 = new Complex((-1283.5868017411), 0.0);
      List<Complex> list0 = complex0.I.nthRoot(4082);
      int int0 = 1;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.INF.subtract((double) 1);
      Complex complex3 = Complex.valueOf((double) 1, (-2351.0));
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.tanh();
      double double1 = complex5.I.abs();
      double double2 = 5.515817703577808E-8;
      Complex complex7 = Complex.valueOf(90.3, 5.515817703577808E-8);
      // Undeclared exception!
      complex7.I.nthRoot(1069);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1.5640296936035156, 1.5640296936035156);
      List<Complex> list0 = complex0.INF.nthRoot(876);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.multiply(876);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 4517;
      Complex complex1 = complex0.INF.multiply(4517);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex0.I.multiply((-803));
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex0.conjugate();
      double double1 = complex5.getImaginary();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.NaN.multiply(0);
      Complex complex8 = complex6.ONE.acos();
      Complex complex9 = complex8.I.divide(0.0);
      String string0 = complex3.toString();
      double double2 = complex3.abs();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex6.negate();
      try { 
        complex11.NaN.nthRoot((-1342));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,342
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-3626.606));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.ONE.pow((-3626.606));
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.I.sinh();
      boolean boolean0 = complex2.isInfinite();
      double double0 = complex0.getReal();
      double double1 = complex1.getReal();
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.getReal();
      int int1 = 2208;
      List<Complex> list0 = complex0.nthRoot(2208);
      Complex complex1 = complex0.INF.reciprocal();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex0.subtract(complex1);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex5 = Complex.valueOf((-2666.045473713), (-2666.045473713));
      Complex complex6 = complex3.add(8779368.0);
      Complex complex7 = complex3.I.reciprocal();
      Complex complex8 = complex6.multiply((-413412658));
      Object object0 = complex1.readResolve();
      Complex complex9 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.subtract(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = complex6.ONE.multiply(complex2);
      Complex complex8 = complex3.ONE.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex3.ONE.readResolve();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex12.I.sinh();
      Complex complex14 = complex10.INF.add(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex14.NaN.nthRoot(665);
      Complex complex15 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex16 = complex15.I.sqrt();
      double double0 = complex16.NaN.getArgument();
      Complex complex17 = complex15.tan();
      Complex complex18 = complex17.INF.acos();
      Complex complex19 = complex14.add((-3757.6));
      List<Complex> list1 = complex19.ZERO.nthRoot(665);
      Complex complex20 = complex14.log();
      Complex complex21 = complex15.sqrt1z();
      Complex complex22 = complex15.tanh();
      Complex complex23 = complex22.INF.tanh();
      Complex complex24 = complex2.cos();
      Complex complex25 = complex12.subtract((-3810.0));
      String string0 = complex1.toString();
      Complex complex26 = complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(4881.5852);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.INF.add(94.625);
      Complex complex4 = Complex.valueOf(1.3390847149416908E-229, 1.3390847149416908E-229);
      int int1 = complex0.hashCode();
      Complex complex5 = complex0.reciprocal();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.divide((-1939.179006));
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.NaN.tanh();
      Object object0 = complex5.ONE.readResolve();
      Complex complex7 = Complex.valueOf(7.112596406315374E-272);
      Complex complex8 = complex7.ONE.cosh();
      double double0 = complex8.I.getArgument();
      double double1 = complex0.abs();
      Object object1 = complex4.readResolve();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(185.0, 281.137);
      Complex complex1 = complex0.divide(20.0);
      Complex complex2 = new Complex((-2741.751925525), 0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex3.ONE.negate();
      Complex complex7 = complex3.ONE.cosh();
      Complex complex8 = complex5.I.subtract(complex0);
      Complex complex9 = complex3.createComplex(185.0, 281.137);
      Complex complex10 = complex0.ZERO.subtract(20.0);
      Complex complex11 = complex9.ZERO.multiply(3084);
      Complex complex12 = complex0.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.createComplex(0.0, (-2431.7688456644873));
      Complex complex3 = complex2.reciprocal();
      double double0 = complex2.I.getArgument();
      Complex complex4 = complex2.ZERO.cos();
      double double1 = complex0.getImaginary();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex4.sin();
      int int0 = complex5.hashCode();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1008.1259);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.subtract((-1652.0685458411924));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.createComplex((-1574.84214039), (-1652.0685458411924));
      Complex complex5 = Complex.valueOf(1008.1259);
      Complex complex6 = complex0.ONE.multiply((-1574.84214039));
      double double0 = 772.1113;
      try { 
        complex4.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex2.INF.log();
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = new Complex(1176.54962443);
      Complex complex8 = complex5.add(complex7);
      Complex complex9 = complex0.log();
      Complex complex10 = complex5.negate();
      boolean boolean1 = complex4.isNaN();
      Complex complex11 = Complex.valueOf(0.0, 2.3984878190403553E-145);
      boolean boolean2 = complex0.equals(complex11);
      Complex complex12 = complex3.cos();
      Complex complex13 = complex12.createComplex(0.0, 0.0);
      Complex complex14 = complex9.INF.sqrt1z();
      double double2 = complex11.getArgument();
      Complex complex15 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0624175071716309, (-3788.842));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.NaN.add(6.279361500971995E179);
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = complex0.atan();
      boolean boolean0 = complex5.isNaN();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex5.multiply((-3788.842));
      Complex complex7 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex2.multiply(865);
      Complex complex4 = complex0.log();
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex1.multiply(complex4);
      double double1 = complex6.getArgument();
      int int0 = complex6.hashCode();
      double double2 = complex0.getArgument();
      String string0 = complex6.toString();
      Complex complex7 = complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.pow(20.0);
      List<Complex> list0 = complex4.NaN.nthRoot(1666);
      Complex complex5 = complex1.ONE.sinh();
      Object object0 = complex4.INF.readResolve();
      Complex complex6 = complex0.pow((-3.791840683760427E173));
      Object object1 = complex6.NaN.readResolve();
      Complex complex7 = complex6.NaN.pow(complex0);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.subtract(7.952287052787358E165);
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex10.I.createComplex((-3.791840683760427E173), 7.952287052787358E165);
      Complex complex12 = complex3.sqrt1z();
      double double0 = complex12.getArgument();
      double double1 = complex2.abs();
      Complex complex13 = complex7.sqrt();
      ComplexField complexField0 = complex6.getField();
      boolean boolean0 = complex4.isNaN();
      ComplexField complexField1 = complex0.getField();
      Complex complex14 = complex2.subtract(complex3);
      Complex complex15 = complex12.log();
      Complex complex16 = Complex.valueOf(Double.NaN, (double) 1666);
      Complex complex17 = complex13.acos();
      Complex complex18 = complex13.sin();
      double double2 = complex12.abs();
      Complex complex19 = complex6.conjugate();
      Complex complex20 = complex17.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.INF.pow(0.0);
      Complex complex4 = new Complex(168.6, 0.0);
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex5.I.multiply(0);
      double double0 = complex4.getArgument();
      boolean boolean0 = complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide(0.0);
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.add((-1.0));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.multiply(1.0);
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex3.cosh();
      String string0 = complex1.toString();
      Complex complex8 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex((-62.5214356028));
      Complex complex2 = complex0.NaN.multiply(944.0);
      Complex complex3 = complex0.I.divide(complex1);
      double double0 = complex3.I.abs();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.add(0.0);
      List<Complex> list0 = complex3.nthRoot(413);
      ComplexField complexField0 = complex5.getField();
      double double1 = complex0.abs();
      int int0 = complex1.hashCode();
      String string0 = complex0.toString();
      Complex complex6 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0305018010328949E-8));
      Complex complex1 = Complex.valueOf((-1.0305018010328949E-8), (-1.0305018010328949E-8));
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.I.subtract((-1989.6401462));
      Complex complex8 = complex3.atan();
      double double0 = complex6.getArgument();
      Complex complex9 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.cos();
      double double0 = complex3.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.tanh();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex3 = complex0.I.pow(complex1);
      double double0 = complex0.getImaginary();
      try { 
        complex3.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = Complex.valueOf(1104.7961891215934);
      Complex complex2 = complex0.NaN.pow(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = Complex.valueOf(0.0);
      boolean boolean1 = complex1.equals(complex0);
      Complex complex4 = complex1.pow(1104.7961891215934);
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex2.divide(0.0);
      Complex complex8 = complex7.sinh();
      Object object0 = complex2.readResolve();
      Complex complex9 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-772.780707524), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide((-407.0));
      Complex complex2 = complex1.I.divide((-407.0));
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.createComplex(3874.032193748224, (-1322.48837715));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.INF.createComplex(0.0, 8.642254225732676E-9);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ONE.divide((-128.844254605539));
      Complex complex4 = complex3.NaN.add((-1675.6394471863016));
      Complex complex5 = complex0.NaN.pow(complex1);
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex0.INF.sqrt1z();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex7.INF.sin();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex8.INF.multiply(complex6);
      Complex complex10 = complex8.I.subtract(complex1);
      Complex complex11 = complex8.exp();
      Complex complex12 = complex11.I.reciprocal();
      Complex complex13 = complex8.INF.subtract(complex0);
      Complex complex14 = complex13.ZERO.multiply(8.642254225732676E-9);
      Complex complex15 = complex0.pow(complex6);
      Complex complex16 = complex11.sinh();
      Complex complex17 = Complex.NaN;
      Complex complex18 = complex15.INF.divide(complex17);
      Complex complex19 = complex15.I.reciprocal();
      Complex complex20 = complex15.ZERO.tan();
      Object object1 = complex1.readResolve();
      Complex complex21 = complex7.subtract((double) 1);
      try { 
        complex9.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.INF.acos();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex4.NaN.atan();
      double double1 = complex0.getArgument();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex0.reciprocal();
      double double2 = complex7.NaN.abs();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = new Complex((-279.095076703), 0.0);
      Complex complex10 = complex4.add(complex9);
      Complex complex11 = complex9.sinh();
      Complex complex12 = complex10.sinh();
      double double3 = complex0.getArgument();
      Complex complex13 = complex9.tanh();
      Complex complex14 = complex12.createComplex((-693.4862106928), (-279.095076703));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.INF.reciprocal();
      boolean boolean0 = complex0.equals(";S5r)ywZ0|df:n");
      Complex complex2 = complex0.NaN.createComplex(1857.3494118153887, 1.0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-626.05909), (-626.05909));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = Complex.valueOf((-626.05909), (-626.05909));
      Complex complex6 = complex2.INF.multiply(complex5);
      int int0 = (-1036);
      try { 
        complex6.nthRoot((-1036));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,036
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.exp();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1516.453420808674));
      Complex complex10 = complex9.atan();
      Complex complex11 = complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.ZERO.add((-1198.7661944845));
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex0.tanh();
      double double0 = complex2.getArgument();
      Complex complex7 = complex6.I.subtract((-1198.7661944845));
      Complex complex8 = complex7.pow(complex0);
      Complex complex9 = complex6.I.sqrt();
      Complex complex10 = complex9.NaN.divide(1427.9541097);
      Complex complex11 = complex6.createComplex(0.0, (-1312.93));
      Complex complex12 = complex0.multiply(complex3);
      Complex complex13 = complex12.NaN.sin();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex3.pow(0.6191893815994263);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3674.0), (-3674.0));
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = Complex.valueOf(1.4259627797225802E-292);
      Complex complex5 = complex0.multiply(complex1);
      double double0 = complex5.getImaginary();
      Complex complex6 = complex5.add(5.56023190218245E110);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1104.7961891215934);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.pow(1104.7961891215934);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.NaN.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex1.pow(8.257484966196574E-8);
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      String string0 = complex1.INF.toString();
      double double0 = complex0.I.abs();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.add(1.0);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex2.tan();
      double double0 = complex5.getArgument();
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, (-3.081552929643174E-9));
      Complex complex7 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.negate();
      double double0 = complex0.I.getArgument();
      Object object0 = complex4.ZERO.readResolve();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide((-2425.8113));
      Complex complex2 = complex1.INF.log();
      double double0 = complex0.getReal();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.pow(complex1);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-1975.013815874726));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-3006.2028564));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = new Complex(467.73772, (-3006.2028564));
      Complex complex5 = complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex((-712.0830245537), (-712.0830245537));
      List<Complex> list0 = complex0.I.nthRoot(3336);
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = Complex.valueOf((-1098.0590004), (-1098.0590004));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf((-2104.0463559582), (-1361.8070267));
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex2.ZERO.subtract(Double.NaN);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.pow((double) 1);
      Complex complex7 = complex5.I.atan();
      List<Complex> list0 = complex7.ONE.nthRoot(1);
      Complex complex8 = complex0.multiply(1);
      Complex complex9 = complex0.asin();
      int int0 = complex9.INF.hashCode();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex10.I.sin();
      Object object0 = complex9.readResolve();
      Object object1 = complex9.readResolve();
      Complex complex12 = complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex2.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.NaN.multiply(complex3);
      Complex complex5 = complex0.ONE.subtract(complex4);
      Complex complex6 = complex4.I.add(complex1);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.acos();
      List<Complex> list0 = complex8.nthRoot(1423);
      Complex complex9 = complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.subtract((-20.0));
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-329.4));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex0.I.pow((-329.4));
      Complex complex5 = complex0.add((-336.378571));
      Complex complex6 = complex0.divide(complex1);
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(985.616498756167, 985.616498756167);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.divide(1369.6462);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      double double0 = complex0.INF.abs();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 518.2082632028148);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.INF.exp();
      Object object0 = complex2.INF.readResolve();
      Complex complex5 = complex2.add(0.5629583597183228);
      Complex complex6 = complex5.pow(971.437441125);
      Complex complex7 = complex2.divide(complex3);
      Complex complex8 = complex7.ZERO.reciprocal();
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex0.NaN.subtract(971.437441125);
      Complex complex12 = Complex.valueOf(518.2082632028148, 518.2082632028148);
      Complex complex13 = complex7.I.subtract(complex8);
      Complex complex14 = complex0.divide(complex3);
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex15.multiply((-1321));
      double double0 = complex15.NaN.abs();
      Object object1 = complex6.readResolve();
      Complex complex17 = complex1.pow(complex0);
      boolean boolean0 = complex15.equals(complex3);
      double double1 = complex7.getArgument();
      ComplexField complexField0 = complex4.getField();
      boolean boolean1 = complex13.isNaN();
      Complex complex18 = complex7.cosh();
      Complex complex19 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-235.544));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.ZERO.subtract(1194.70232);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex4 = complex0.ZERO.multiply(20.0);
      Complex complex5 = complex2.ONE.tan();
      Complex complex6 = complex5.I.add(complex0);
      Complex complex7 = complex2.I.add(0.0);
      Complex complex8 = complex7.ZERO.divide(1194.70232);
      String string0 = complex0.INF.toString();
      Complex complex9 = complex1.subtract(1194.70232);
      Complex complex10 = complex9.NaN.multiply(2952);
      Complex complex11 = complex9.ONE.pow(1194.70232);
      double double0 = complex2.abs();
      String string1 = complex2.toString();
      double double1 = complex8.abs();
      Complex complex12 = complex0.acos();
      boolean boolean0 = complex8.equals(complex11);
      Complex complex13 = complex6.multiply((double) 2952);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex1.asin();
      Complex complex16 = complex15.INF.tanh();
      Complex complex17 = Complex.valueOf((-1289.1862), 789.31347);
      Complex complex18 = complex13.asin();
      String string2 = complex10.toString();
      Complex complex19 = complex10.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      List<Complex> list0 = complex0.nthRoot(1);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.ZERO.cos();
      List<Complex> list1 = complex3.ONE.nthRoot(1);
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex4.ZERO.subtract((-1357.033));
      Complex complex6 = complex4.NaN.conjugate();
      Complex complex7 = complex4.ONE.pow(complex0);
      Complex complex8 = complex7.NaN.asin();
      List<Complex> list2 = complex1.nthRoot(1);
      Complex complex9 = complex4.sqrt1z();
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex9.subtract(2497.5051649858106);
      Complex complex11 = complex9.conjugate();
      Complex complex12 = complex10.negate();
      String string0 = complex2.toString();
      Complex complex13 = complex7.tanh();
      Complex complex14 = complex12.add(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.ONE.getArgument();
      double double1 = complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex3.ZERO.multiply(0);
      double double2 = complex5.ZERO.abs();
      Complex complex6 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-157.7583), (-1967.436));
      Complex complex1 = complex0.ONE.divide(1139.9009523);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex2.add((-157.7583));
      Complex complex5 = complex3.tan();
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.negate();
      boolean boolean0 = complex3.equals(complex7);
      Complex complex8 = complex1.divide((-2427.1909452614505));
      Complex complex9 = complex6.I.subtract((-936.7633));
      Complex complex10 = complex8.tanh();
      double double0 = complex7.getReal();
      Complex complex11 = complex5.divide(complex7);
      Complex complex12 = Complex.valueOf(0.0, (-157.7583));
      Complex complex13 = complex6.add(complex12);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.5461324453353882);
      String string0 = complex0.toString();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(0.5461324453353882, 0.5461324453353882);
      Complex complex3 = complex2.subtract(0.0);
      double double0 = complex1.abs();
      double double1 = complex0.abs();
      List<Complex> list0 = complex0.nthRoot(1237);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.multiply(0.5461324453353882);
      Complex complex6 = complex5.INF.add(complex4);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex5.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex8.conjugate();
      double double2 = complex5.abs();
      double double3 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1336.0502019, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.INF.subtract(complex4);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex0.NaN.subtract(complex6);
      Complex complex8 = complex2.NaN.createComplex(0.0, 0.0);
      Complex complex9 = complex7.I.pow((-3168.563719));
      double double0 = complex0.getReal();
      Complex complex10 = complex2.add(1336.0502019);
      Complex complex11 = complex0.subtract(0.0);
      Complex complex12 = complex7.ZERO.cos();
      Complex complex13 = complex5.ONE.add((-1576.58628));
      Complex complex14 = complex11.ZERO.exp();
      Complex complex15 = complex10.ZERO.acos();
      Complex complex16 = complex10.INF.sqrt1z();
      Complex complex17 = complex16.ZERO.atan();
      Complex complex18 = complex0.multiply(complex2);
      Complex complex19 = complex4.pow(0.0);
      double double1 = complex10.getArgument();
      double double2 = complex2.getImaginary();
      double double3 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(967.66716);
      Complex complex1 = complex0.ONE.pow(967.66716);
      Complex complex2 = complex1.NaN.subtract(2441.4456273936926);
      Complex complex3 = complex0.I.sin();
      Complex complex4 = new Complex(421.1839256);
      Complex complex5 = complex3.I.reciprocal();
      Complex complex6 = complex4.INF.multiply(4589.0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.I.pow(complex4);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex5.INF.createComplex(0.0, 2441.4456273936926);
      Complex complex11 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex5.asin();
      boolean boolean0 = complex6.isNaN();
      Complex complex15 = complex7.multiply((-4458.5187852305));
      Complex complex16 = complex15.subtract(2441.4456273936926);
  }
}
