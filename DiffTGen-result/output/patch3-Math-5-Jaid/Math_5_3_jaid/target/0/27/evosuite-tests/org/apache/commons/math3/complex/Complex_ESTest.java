/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:23:41 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.multiply((-647));
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      String string0 = complex1.toString();
      Complex complex6 = complex5.sqrt1z();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.add(3149.70126086066);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex3.ONE.createComplex(3131.2969016256257, 0.0);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex3.I.atan();
      double double0 = complex0.NaN.abs();
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex10.ZERO.createComplex(1.0, 0.0);
      Complex complex12 = Complex.valueOf(0.0, 3131.2969016256257);
      Complex complex13 = complex3.asin();
      double double1 = complex12.getReal();
      Complex complex14 = complex6.createComplex(Double.NaN, (-1460.7347970938254));
      Complex complex15 = Complex.valueOf(0.0);
      boolean boolean0 = complex9.isInfinite();
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(613);
      double double0 = (-1.0);
      Complex complex1 = complex0.I.createComplex((-1.0), (-1.0));
      double double1 = (-3381.91);
      Complex complex2 = complex0.pow((-3381.91));
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex2.ONE.createComplex(613, (-3381.91));
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.ZERO.cosh();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex4.I.pow((double) 613);
      Complex complex12 = complex0.sqrt();
      try { 
        complex5.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4274.69704), (-4274.69704));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.INF.createComplex(1248.656, 1248.656);
      Complex complex4 = complex0.ZERO.multiply((-450));
      Complex complex5 = complex0.divide((-4274.69704));
      Complex complex6 = complex2.NaN.createComplex(0.0, (-6232.703981458));
      Complex complex7 = Complex.valueOf(2.0, (-4274.69704));
      Complex complex8 = complex7.INF.divide(9.362866914115166E-285);
      Complex complex9 = complex8.I.subtract(1248.656);
      Complex complex10 = complex7.tan();
      Complex complex11 = complex10.NaN.asin();
      ComplexField complexField0 = complex10.ZERO.getField();
      int int0 = complex0.hashCode();
      Complex complex12 = complex8.acos();
      Complex complex13 = complex10.tan();
      Complex complex14 = Complex.valueOf(2.0, 0.0);
      double double0 = complex13.abs();
      Complex complex15 = complex13.reciprocal();
      Complex complex16 = complex15.ZERO.sqrt1z();
      Complex complex17 = complex3.pow(complex0);
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex17.createComplex((-4244.65), (-4244.65));
      Object object0 = complex19.I.readResolve();
      Complex complex20 = complex17.asin();
      double double1 = complex1.getImaginary();
      Complex complex21 = complex7.cosh();
      Complex complex22 = complex10.log();
      double double2 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.subtract(complex1);
      Complex complex10 = complex2.divide(201.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-127.806422316));
      Complex complex1 = complex0.cosh();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.subtract(complex0);
      List<Complex> list0 = complex1.nthRoot(1823);
      String string0 = complex0.I.toString();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.subtract((-127.806422316));
      Complex complex5 = complex4.INF.add((double) 1823);
      Complex complex6 = complex5.ONE.subtract(complex4);
      Complex complex7 = complex2.NaN.add(complex1);
      Complex complex8 = complex1.NaN.cosh();
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex0.ZERO.subtract((-2365.72114351611));
      ComplexField complexField0 = complex3.getField();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.sinh();
      int int0 = complex12.I.hashCode();
      Complex complex13 = complex12.I.add(complex0);
      Complex complex14 = complex13.ONE.multiply(0.0);
      Complex complex15 = complex12.ZERO.subtract(0.0);
      Complex complex16 = complex3.multiply(7);
      Complex complex17 = complex2.pow(complex4);
      ComplexField complexField1 = complex3.getField();
      Complex complex18 = complex4.subtract((-2365.72114351611));
      Complex complex19 = complex13.add(0.0);
      Complex complex20 = complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1159.51, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.I.add(2977.0063842271375);
      double double0 = complex1.getArgument();
      Object object1 = complex1.readResolve();
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.ONE.add(2977.0063842271375);
      double double1 = complex5.getArgument();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex1.log();
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex0.multiply((-3527));
      Complex complex11 = complex4.add(0.0);
      int int0 = complex5.hashCode();
      Complex complex12 = complex1.createComplex(0.0, (-3527));
      String string0 = complex4.toString();
      Complex complex13 = complex12.add(0.0);
      Complex complex14 = complex12.divide(complex11);
      Complex complex15 = complex12.subtract(complex7);
      Object object2 = complex2.readResolve();
      Complex complex16 = complex0.createComplex(0.0, 3761.25754586713);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.246635423141374E-7));
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.subtract((-1.246635423141374E-7));
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex0.I.multiply(1142);
      Complex complex5 = complex2.INF.acos();
      Object object0 = complex5.readResolve();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = Complex.valueOf((double) 1142);
      String string0 = complex0.toString();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex4.multiply(1142);
      Complex complex10 = complex9.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ZERO.subtract((-9.633854121180397E-9));
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex3.ZERO.pow(complex0);
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex6.ZERO.pow((-9.633854121180397E-9));
      Complex complex8 = Complex.valueOf(1.511427628805191E111, 0.0);
      Complex complex9 = complex8.I.subtract(0.0);
      Complex complex10 = Complex.valueOf(1337.73034085042);
      Object object0 = complex10.I.readResolve();
      Complex complex11 = complex5.ZERO.sinh();
      Complex complex12 = complex3.INF.add(Double.NaN);
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex13.add(complex3);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex3.toString();
      Complex complex15 = complex5.subtract(9.529727908157224E95);
      Complex complex16 = complex14.multiply((-584.4167239));
      Complex complex17 = Complex.valueOf((-584.4167239));
      Complex complex18 = complex17.ZERO.sqrt();
      List<Complex> list0 = complex5.nthRoot(702);
      Complex complex19 = complex11.conjugate();
      Complex complex20 = complex12.subtract(complex8);
      boolean boolean1 = complex14.isInfinite();
      Complex complex21 = complex0.log();
      Complex complex22 = complex10.multiply(1337.73034085042);
      Complex complex23 = complex11.exp();
      Complex complex24 = complex4.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2999.9301300942);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.ONE.add((-569.3084893158644));
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.createComplex(0.0, 0.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.subtract(complex4);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.asin();
      double double0 = complex0.getReal();
      double double1 = complex4.getArgument();
      Complex complex9 = complex4.subtract(complex5);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double2 = complex2.abs();
      List<Complex> list0 = complex2.nthRoot(949);
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex1.createComplex(568.3084893158644, 0.0);
      List<Complex> list1 = complex6.nthRoot(949);
      Complex complex12 = complex9.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(4.4896127778163155E38);
      Complex complex1 = Complex.valueOf(2564.922207319559, (-2370.52701));
      Complex complex2 = complex1.ONE.cosh();
      List<Complex> list0 = complex0.I.nthRoot(37);
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf((double) 37, 0.0);
      double double0 = complex3.getImaginary();
      double double1 = complex4.abs();
      Complex complex6 = complex0.multiply(1670.56745);
      String string0 = complex1.toString();
      Complex complex7 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.createComplex(0.0, (-2721.826786));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex0.add((-2721.826786));
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex1.atan();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex3.isNaN();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex4.INF.atan();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex7.sqrt();
      Complex complex14 = complex13.NaN.sinh();
      Complex complex15 = complex1.createComplex(0.0, 0.0);
      double double0 = complex10.getArgument();
      Complex complex16 = Complex.valueOf(1503.0, 0.0);
      double double1 = complex16.I.getArgument();
      Complex complex17 = complex0.conjugate();
      Complex complex18 = complex5.acos();
      Complex complex19 = complex17.negate();
      boolean boolean2 = complex15.isInfinite();
      String string0 = complex17.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.multiply(complex4);
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex6.multiply(5369.394354621);
      double double0 = complex4.getImaginary();
      Complex complex9 = complex6.NaN.pow(complex0);
      Complex complex10 = complex4.createComplex(5369.394354621, 5369.394354621);
      Complex complex11 = complex10.pow(713.1925384212893);
      boolean boolean1 = complex11.isInfinite();
      Complex complex12 = complex4.I.negate();
      Complex complex13 = Complex.valueOf(5082.8078);
      Complex complex14 = Complex.valueOf(1.0, (-2972.2135));
      Complex complex15 = complex5.multiply(complex1);
      Complex complex16 = complex13.INF.divide(5369.394354621);
      Complex complex17 = complex8.tan();
      double double1 = complex2.I.getArgument();
      Complex complex18 = Complex.valueOf(4205.037244, (-2616.41));
      Complex complex19 = complex13.sqrt();
      Complex complex20 = complex13.pow(complex19);
      Complex complex21 = complex0.pow(complex11);
      Complex complex22 = complex7.divide(complex2);
      Complex complex23 = Complex.valueOf((-1559.5586025016), 5082.8078);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1615.372615444));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.createComplex((-1615.372615444), (-1615.372615444));
      Complex complex3 = complex2.ONE.multiply(complex0);
      double double0 = complex3.INF.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.INF.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex6 = complex4.I.cos();
      Complex complex7 = complex3.INF.divide(complex4);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.ONE.divide(complex8);
      double double1 = complex3.I.getArgument();
      double double2 = complex1.getArgument();
      Object object0 = complex3.NaN.readResolve();
      Complex complex10 = complex1.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex10.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex12 = complex11.cos();
      double double3 = complex11.ZERO.getArgument();
      Complex complex13 = complex0.divide(6081.568773854986);
      Complex complex14 = complex12.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.492984900939992E-8), (-2739.879028577176));
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex3.ZERO.subtract(0.0);
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex5.NaN.subtract(complex0);
      Complex complex7 = complex5.subtract(complex1);
      Complex complex8 = complex0.ZERO.multiply((-65));
      Complex complex9 = complex8.tan();
      Complex complex10 = complex3.INF.subtract(complex7);
      Complex complex11 = complex9.INF.divide(complex0);
      Object object0 = complex2.INF.readResolve();
      Complex complex12 = complex0.ZERO.sqrt1z();
      Object object1 = complex0.readResolve();
      Complex complex13 = complex2.pow(2918.1);
      Complex complex14 = complex13.I.asin();
      Complex complex15 = complex14.INF.pow(2323.220864502935);
      String string0 = complex2.toString();
      Complex complex16 = complex12.ZERO.cosh();
      Complex complex17 = new Complex(2918.1);
      Complex complex18 = complex12.ZERO.divide(complex17);
      double double0 = complex12.abs();
      Complex complex19 = complex12.pow((double) (-65));
      Complex complex20 = complex3.INF.tanh();
      ComplexField complexField0 = complex3.getField();
      Complex complex21 = complex12.acos();
      Complex complex22 = complex4.exp();
      Complex complex23 = complex4.multiply(complex2);
      Complex complex24 = complex3.multiply(573);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.2250764591564252E82, 1.2250764591564252E82);
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.acos();
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.I.multiply(1.2250764591564252E82);
      Complex complex5 = complex4.INF.conjugate();
      int int1 = complex5.I.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.ONE.cos();
      List<Complex> list0 = complex7.I.nthRoot(1);
      double double0 = complex6.getArgument();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex1.multiply((-1423));
      Complex complex10 = complex0.atan();
      Complex complex11 = complex3.sqrt1z();
      Complex complex12 = complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex1.NaN.multiply(complex5);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex5.NaN.reciprocal();
      String string0 = complex1.toString();
      Complex complex9 = complex7.add(complex5);
      Complex complex10 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1256.71443768232);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ZERO.add(1256.71443768232);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.multiply(1256.71443768232);
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex3.equals(object0);
      double double0 = complex0.abs();
      Complex complex4 = Complex.valueOf((-453.3229));
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = Complex.valueOf(2.462968349456787, 2.462968349456787);
      Complex complex6 = complex2.INF.cos();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex0.negate();
      int int0 = complex1.hashCode();
      Complex complex9 = complex2.INF.sqrt1z();
      Complex complex10 = complex8.add((-692.17611162578));
      boolean boolean0 = complex2.isInfinite();
      Complex complex11 = complex3.add(2.462968349456787);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-915.806981087));
      Complex complex1 = complex0.pow((-915.806981087));
      Complex complex2 = complex1.ZERO.subtract((-915.806981087));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.NaN.add(complex2);
      Complex complex5 = complex3.sin();
      Complex complex6 = Complex.valueOf((-915.806981087), 0.0);
      String string0 = complex6.toString();
      Complex complex7 = complex0.I.divide((-915.806981087));
      Complex complex8 = complex3.NaN.exp();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex9.atan();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex2.divide(complex4);
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf((-1379.5339308), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex3.NaN.add(0.0);
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex0.ZERO.subtract(complex1);
      Complex complex7 = complex1.INF.tan();
      Complex complex8 = complex6.NaN.pow(complex7);
      Complex complex9 = complex8.atan();
      Complex complex10 = complex2.INF.conjugate();
      Complex complex11 = complex7.I.acos();
      Complex complex12 = complex6.sin();
      String string0 = complex12.NaN.toString();
      double double1 = complex0.getArgument();
      Complex complex13 = complex0.INF.asin();
      Complex complex14 = Complex.valueOf((-1379.5339308), Double.NaN);
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex7.ONE.multiply(3.141592653589793);
      Complex complex17 = complex0.tan();
      Complex complex18 = complex17.add(0.0);
      Complex complex19 = complex7.sinh();
      Complex complex20 = complex19.I.multiply(complex6);
      try { 
        complex18.I.nthRoot((-821));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -821
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(3366.4, 0.6059582233428955);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow(2075.28037011316);
      Complex complex2 = complex0.subtract(359.173309377);
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2462.0), (-2462.0));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex5.ONE.sin();
      try { 
        complex7.ONE.nthRoot((-3000));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,000
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(6.809741127603255E225, 1204.009644338);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.multiply(0.0);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.NaN.conjugate();
      double double1 = complex0.getReal();
      double double2 = complex2.getReal();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex2.ONE.divide(complex0);
      Complex complex5 = complex0.INF.multiply(complex1);
      double double0 = complex0.getReal();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.ONE.createComplex(0.0, Double.NaN);
      Complex complex10 = complex0.subtract(complex6);
      double double1 = complex1.getImaginary();
      String string0 = complex0.toString();
      Complex complex11 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.I.multiply(complex1);
      int int0 = complex1.I.hashCode();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Object object0 = complex2.INF.readResolve();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex4.ONE.divide(0.0);
      Complex complex6 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex7 = complex2.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex8 = complex7.reciprocal();
      Object object1 = complex7.readResolve();
      Complex complex9 = complex4.pow(complex8);
      Object object2 = complex5.ZERO.readResolve();
      Complex complex10 = complex4.pow(complex5);
      int int1 = complex8.hashCode();
      Complex complex11 = complex0.add(complex5);
      Complex complex12 = complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(863.0, 863.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.multiply(2449.2004465067625);
      Complex complex4 = complex1.ZERO.acos();
      List<Complex> list0 = complex3.nthRoot(81);
      Complex complex5 = Complex.valueOf(3057.1);
      List<Complex> list1 = complex5.nthRoot(81);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.NaN.add(complex1);
      Complex complex8 = complex7.ONE.sqrt();
      String string0 = complex8.INF.toString();
      Complex complex9 = complex7.I.atan();
      Complex complex10 = complex6.I.pow((double) 81);
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex6.cos();
      Complex complex13 = complex2.multiply(complex0);
      Complex complex14 = Complex.valueOf((-283.0), (-4124.4100608));
      Object object0 = complex2.readResolve();
      Complex complex15 = complex3.multiply((-1887.5180967917));
      Complex complex16 = complex7.pow(complex1);
      Complex complex17 = Complex.I;
      Complex complex18 = complex14.divide(complex17);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.INF.pow((-20.0));
      double double0 = complex3.I.abs();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex2.NaN.sinh();
      Complex complex6 = complex0.ZERO.subtract(447.9617779236138);
      double double1 = complex5.abs();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.I.sinh();
      List<Complex> list0 = complex0.nthRoot(515);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.asin();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.NaN.multiply((-1));
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex1.INF.exp();
      String string1 = complex0.I.toString();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.subtract(complex1);
      int int0 = complex1.hashCode();
      Complex complex3 = complex1.I.subtract((-2295.347518));
      Complex complex4 = complex1.divide((-4.750377491075032E-8));
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = Complex.valueOf((-473.82095), 2510.242);
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex4.ZERO.divide(complex1);
      Complex complex7 = complex6.ZERO.pow(2510.242);
      double double0 = complex6.INF.abs();
      Complex complex8 = complex0.multiply(2510.242);
      Complex complex9 = complex8.NaN.acos();
      double double1 = complex0.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex10 = complex8.ZERO.log();
      Complex complex11 = complex0.divide((-473.82095));
      double double2 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1466.7663188612);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = new Complex(0.0, 1466.7663188612);
      Complex complex3 = complex2.NaN.createComplex(1466.7663188612, 1466.7663188612);
      Complex complex4 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      String string0 = complex0.I.toString();
      List<Complex> list0 = complex1.ZERO.nthRoot(2370);
      Complex complex2 = complex0.ONE.add((double) 2370);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.ZERO.add(0.0);
      Complex complex5 = complex3.ZERO.tan();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-2351.1691463935);
      Complex complex0 = Complex.valueOf((-2351.1691463935), (-2351.1691463935));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide((-2351.1691463935));
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.INF.subtract(complex1);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex0.log();
      try { 
        complex7.I.nthRoot((-1231));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,231
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.multiply((-526.78));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.INF.multiply(0);
      Complex complex5 = Complex.valueOf((-1.0), 1892.86681285822);
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = Complex.valueOf(1892.86681285822, 0.0);
      boolean boolean0 = complex3.isInfinite();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-381.0), (-381.0));
      Complex complex1 = complex0.NaN.createComplex((-381.0), (-381.0));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.multiply(835);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = new Complex((-1.6990896855901115E-55), (-894.98794432));
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex5.asin();
      double double0 = complex8.getReal();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.divide((-3.2552002992257195E223));
      List<Complex> list0 = complex4.INF.nthRoot(928);
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.subtract(Double.NaN);
      Complex complex5 = complex4.INF.exp();
      int int0 = complex2.hashCode();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(679.291, 679.291);
      Complex complex2 = complex1.tanh();
      try { 
        complex1.ZERO.nthRoot((-1470));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,470
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1777.1222621));
      Complex complex1 = new Complex((-1777.1222621), (-294.17652));
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex0.INF.subtract(complex1);
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.multiply((-2701.9));
      Complex complex3 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(279.030837);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      int int0 = complex2.hashCode();
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex0.exp();
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex1.tanh();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add(0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-787.879991883148));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.multiply(155);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(111.476, 111.476);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-8.146080588190463E-9), 2404.48);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.log();
      List<Complex> list0 = complex0.I.nthRoot(22);
      try { 
        complex1.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.multiply((-609));
      double double0 = complex1.getArgument();
      Complex complex3 = complex2.NaN.negate();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.negate();
      double double1 = complex4.getImaginary();
      Complex complex7 = complex5.add(complex0);
      boolean boolean1 = complex5.isInfinite();
      boolean boolean2 = complex7.isNaN();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.multiply(17);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(57.1);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      double double0 = complex2.I.abs();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = Complex.valueOf((-7.956144278281947E-8), (-7.956144278281947E-8));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.add(2.0);
      Complex complex2 = complex1.NaN.subtract(complex0);
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = new Complex((-558.956755189032), (-1.0));
      Complex complex4 = complex1.ZERO.divide(complex3);
      Complex complex5 = complex1.ZERO.acos();
      int int1 = complex1.I.hashCode();
      Complex complex6 = Complex.valueOf(2.0);
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex0.add(complex7);
      Complex complex10 = complex9.atan();
      Complex complex11 = complex10.divide(2.0);
      Complex complex12 = complex11.ZERO.add(complex7);
      double double0 = complex7.getReal();
      Complex complex13 = Complex.valueOf(2.0);
      Complex complex14 = complex9.exp();
      Complex complex15 = complex6.NaN.multiply(complex7);
      Complex complex16 = Complex.INF;
      Complex complex17 = complex13.multiply(complex16);
      boolean boolean0 = complex11.isNaN();
      double double1 = complex12.getArgument();
      double double2 = complex6.getArgument();
      Complex complex18 = complex8.asin();
      Complex complex19 = complex18.NaN.createComplex(0.0, 0.0);
      Complex complex20 = complex14.negate();
      Complex complex21 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4121.1731);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.I.multiply((-2624));
      Complex complex3 = complex0.createComplex(341.741107416977, (-810.39543426045));
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.NaN.subtract(0.0);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.log();
      Complex complex9 = complex5.ZERO.sqrt1z();
      Complex complex10 = Complex.valueOf((-810.39543426045), (-8.539328154875224E-8));
      Complex complex11 = complex8.ZERO.conjugate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex12 = complex0.atan();
      double double0 = complex12.ZERO.abs();
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex0.isNaN();
      Complex complex13 = complex4.log();
      Complex complex14 = complex5.sin();
      Complex complex15 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex1.I.multiply((-1));
      Complex complex5 = complex1.I.multiply(complex2);
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex1.createComplex((-20.0), (-398.618906235));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.acos();
      double double1 = complex3.getReal();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.7689754029101934E-9));
      Complex complex1 = complex0.sinh();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = Complex.valueOf((-4.7689754029101934E-9));
      Complex complex3 = complex1.ZERO.sqrt();
      double double0 = complex2.NaN.getArgument();
      Complex complex4 = complex2.INF.multiply(Double.NaN);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex1.ONE.multiply(complex2);
      Complex complex7 = complex4.INF.negate();
      List<Complex> list0 = complex2.ZERO.nthRoot(1);
      double double1 = complex1.getImaginary();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex6.subtract(45.909);
      Complex complex11 = Complex.valueOf((double) 1, (double) 1);
      Complex complex12 = complex5.atan();
      Complex complex13 = complex8.subtract(2882.277018190717);
      boolean boolean0 = complex12.isInfinite();
      Complex complex14 = complex3.reciprocal();
      double double2 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.6816387176513672);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.acos();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.divide(2.1360492104281465E191);
      try { 
        complex0.I.nthRoot((-1282));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,282
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2756.94721445);
      double double0 = complex1.getReal();
      Complex complex2 = complex0.asin();
      double double1 = complex2.ZERO.abs();
      Complex complex3 = complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      List<Complex> list0 = complex0.nthRoot(531);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex1.NaN.sin();
      Complex complex6 = complex1.INF.sinh();
      String string0 = complex0.toString();
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = Complex.NaN;
      Object object0 = complex8.readResolve();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.I.createComplex(0.0, 654.837939);
      double double0 = complex2.INF.abs();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.exp();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.add((-1116.42079544));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(304.07, 2.0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.NaN.multiply(0);
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex0.multiply(complex1);
      double double0 = complex2.abs();
      Complex complex7 = complex0.divide(304.0765773616902);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1229.2896525, 4.7304887145310405E-253);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.log();
      boolean boolean1 = complex0.isInfinite();
      Complex complex5 = complex0.ZERO.subtract((-12.8787711));
      Complex complex6 = complex0.negate();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex4.sqrt();
      Object object0 = complex7.readResolve();
      double double0 = complex3.NaN.getArgument();
      Complex complex9 = complex3.divide(complex7);
      Complex complex10 = complex3.add(complex2);
      Complex complex11 = complex2.sqrt1z();
      List<Complex> list0 = complex4.nthRoot(2291);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.401816502004675E-309));
      Complex complex1 = new Complex((-2.401816502004675E-309));
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.ONE.subtract(complex1);
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex0.ONE.divide(complex2);
      Complex complex5 = complex0.INF.subtract((-2.401816502004675E-309));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(Double.NaN, (-2.238614484037969E-159));
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = null;
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex1.ZERO.negate();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex0.multiply((-420.550327801));
      Complex complex9 = complex0.ONE.createComplex(0.0, (-420.550327801));
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex6.add(complex7);
      Complex complex12 = complex11.tanh();
      List<Complex> list0 = complex12.NaN.nthRoot(1);
      Complex complex13 = complex4.multiply(complex8);
      Complex complex14 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-835.01251205));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.ZERO.add((-835.01251205));
      Complex complex5 = complex4.INF.tan();
      List<Complex> list0 = complex2.nthRoot(474);
      Complex complex6 = complex1.multiply((-290));
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex6.NaN.tanh();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex6.pow(complex3);
      Complex complex12 = complex9.exp();
      Complex complex13 = complex9.sqrt1z();
      Complex complex14 = complex13.NaN.sin();
      Complex complex15 = complex9.atan();
      Complex complex16 = complex4.tanh();
      Complex complex17 = complex11.pow(complex2);
      Complex complex18 = complex0.asin();
      ComplexField complexField0 = complex11.getField();
      Complex complex19 = complex7.cos();
      Complex complex20 = complex17.sinh();
      Complex complex21 = complex16.exp();
      Complex complex22 = Complex.valueOf((double) 474);
      Complex complex23 = complex9.atan();
      Complex complex24 = complex18.conjugate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.I.pow(386.583467);
      Complex complex4 = Complex.valueOf(386.583467);
      Complex complex5 = complex1.ZERO.multiply((-1315));
      Complex complex6 = complex2.ZERO.acos();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex6.ONE.pow(complex2);
      Complex complex9 = complex1.ZERO.cos();
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex7.ZERO.multiply(complex1);
      Complex complex11 = complex10.ZERO.pow(Double.NaN);
      List<Complex> list0 = complex6.I.nthRoot(37);
      String string0 = complex0.toString();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex6.conjugate();
      Complex complex14 = complex7.NaN.exp();
      Complex complex15 = complex13.ZERO.conjugate();
      Complex complex16 = complex12.ONE.add(0.0);
      Complex complex17 = complex12.INF.sqrt1z();
      Complex complex18 = complex12.sin();
      ComplexField complexField1 = complex0.getField();
      boolean boolean0 = complex12.equals(complex6);
      Complex complex19 = complex7.sqrt1z();
      String string1 = complex7.toString();
      String string2 = complex5.toString();
      Complex complex20 = complex16.sin();
      Complex complex21 = complex7.createComplex(Double.NaN, 386.583467);
      Complex complex22 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.INF.multiply(143);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = new Complex(2.426795414605756E-8);
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.log();
      Complex complex7 = Complex.valueOf(0.0, 1.0);
      Complex complex8 = complex4.multiply(1);
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex6.multiply(1.0);
      boolean boolean0 = complex1.equals(complex5);
      Complex complex11 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(847.87, 847.87);
      Complex complex1 = Complex.valueOf(847.87);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex1.I.add(2918.5462590863785);
      Complex complex5 = complex4.ZERO.add(847.87);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex6.ZERO.asin();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex8.divide(2918.5462590863785);
      int int0 = complex1.hashCode();
      boolean boolean0 = complex0.equals(complex1);
      String string0 = complex6.toString();
      Complex complex11 = complex8.pow(complex9);
      Complex complex12 = complex6.atan();
      Complex complex13 = complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-561.27), 113.164148187);
      Complex complex1 = Complex.valueOf((-32.216), 20.0);
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.ZERO.divide(113.164148187);
      Complex complex4 = complex2.NaN.multiply(0.0);
      Complex complex5 = complex2.INF.divide(complex0);
      String string0 = complex1.NaN.toString();
      Complex complex6 = complex2.NaN.pow((double) (-713));
      Complex complex7 = complex2.ONE.multiply(1.336479663848877);
      Complex complex8 = complex0.NaN.subtract(0.0);
      List<Complex> list0 = complex0.I.nthRoot(1);
      try { 
        complex1.nthRoot((-713));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -713
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex(9.183480622172801E148, 6.283185307179586);
      ComplexField complexField0 = complex1.ZERO.getField();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.cosh();
      double double1 = complex3.abs();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.valueOf(158.11593308);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.185064946717304E-27);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex3.exp();
      String string0 = complex3.INF.toString();
      Complex complex7 = complex6.pow(complex3);
      double double0 = complex3.getImaginary();
      try { 
        complex2.nthRoot((-3934));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,934
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow((-1986.5));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.valueOf((-752.5102868), 0.0);
      Complex complex6 = complex5.subtract((-752.5102868));
      boolean boolean0 = complex2.isNaN();
      double double0 = complex3.getImaginary();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex4.NaN.conjugate();
      Complex complex9 = complex4.ONE.multiply(complex0);
      Complex complex10 = complex1.reciprocal();
      double double1 = complex5.ZERO.abs();
      Complex complex11 = complex5.exp();
      Complex complex12 = complex11.I.tan();
      Complex complex13 = complex11.subtract(complex4);
      Complex complex14 = complex9.exp();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex11.reciprocal();
      Complex complex17 = complex15.negate();
      double double2 = complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(1.5732207298278809, 1.5732207298278809);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.I.add(1.5732207298278809);
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex3.multiply((-2558));
      Complex complex6 = complex2.ZERO.pow((double) (-2558));
      double double0 = complex3.ONE.getArgument();
      Object object0 = complex2.INF.readResolve();
      List<Complex> list0 = complex0.nthRoot(1);
      double double1 = complex2.ONE.abs();
      Complex complex7 = complex5.ONE.createComplex(2356.316026719, 408.10033);
      Complex complex8 = complex3.INF.multiply(2356.316026719);
      Complex complex9 = complex8.NaN.subtract(1.5732207298278809);
      Complex complex10 = complex0.log();
      Complex complex11 = complex1.add(complex2);
      Complex complex12 = complex10.multiply(complex5);
      Complex complex13 = complex12.I.createComplex((-2558), (-1759.553612645644));
      Complex complex14 = complex2.ZERO.pow(1.5732207298278809);
      Complex complex15 = complex2.multiply((-4.311847594020281E-9));
      Complex complex16 = complex15.INF.divide(1.5732207298278809);
      Object object1 = complex5.readResolve();
      Complex complex17 = complex4.sinh();
      Complex complex18 = complex17.INF.sqrt1z();
      Complex complex19 = complex15.acos();
      Complex complex20 = complex15.multiply(2356.316026719);
      Object object2 = complex15.readResolve();
      Complex complex21 = complex20.pow(408.10033);
      Complex complex22 = complex1.pow(complex6);
      Complex complex23 = complex22.createComplex(1.0, 2356.316026719);
      Complex complex24 = complex11.multiply(complex18);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.NaN.negate();
      int int0 = complex5.NaN.hashCode();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex5.reciprocal();
      double double0 = complex0.getArgument();
      Complex complex9 = complex6.add(0.0);
      double double1 = complex4.abs();
  }
}
