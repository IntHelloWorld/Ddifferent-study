/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:13:34 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1454.9311231658944);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.I.divide(1454.9311231658944);
      Complex complex5 = complex4.ONE.acos();
      String string0 = complex2.NaN.toString();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex4.ZERO.pow(2026.5448);
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex1.add(1.1518771984292262E146);
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex12.NaN.tan();
      Complex complex14 = complex9.ZERO.divide(1.1518771984292262E146);
      Complex complex15 = complex14.ZERO.tan();
      String string1 = complex5.toString();
      Complex complex16 = complex0.asin();
      Complex complex17 = complex1.exp();
      Complex complex18 = Complex.valueOf(1040.0);
      Complex complex19 = complex2.negate();
      Complex complex20 = complex3.divide(complex6);
      Complex complex21 = complex9.conjugate();
      String string2 = complex12.toString();
      Complex complex22 = complex13.multiply(complex0);
      Complex complex23 = complex20.atan();
      Complex complex24 = Complex.valueOf(2026.5448, 1.1518771984292262E146);
      double double0 = complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex0.NaN.pow(0.0);
      Complex complex4 = Complex.valueOf((-3780.909124));
      int int0 = complex0.INF.hashCode();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = Complex.valueOf(1287.53);
      Complex complex8 = complex1.cos();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex2.sqrt();
      List<Complex> list0 = complex1.nthRoot(3966);
      Complex complex10 = complex2.sinh();
      Complex complex11 = Complex.valueOf(0.0, 3036.0);
      // Undeclared exception!
      complex9.nthRoot(3966);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(890.017493995668, Double.NaN);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-965.264725);
      double double1 = 0.0;
      Complex complex0 = new Complex((-965.264725), 0.0);
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-3.448944157854234E-8));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = Complex.valueOf((-3.448944157854234E-8), (-3.448944157854234E-8));
      Complex complex5 = complex2.ZERO.add(complex3);
      Complex complex6 = complex2.divide(complex0);
      Complex complex7 = complex6.ONE.subtract(complex3);
      Complex complex8 = Complex.valueOf(0.0, (-3.448944157854234E-8));
      Complex complex9 = complex8.ONE.add(Double.NaN);
      Complex complex10 = complex8.I.sin();
      Complex complex11 = complex7.I.sin();
      double double0 = complex2.getImaginary();
      ComplexField complexField0 = complex2.getField();
      Complex complex12 = complex7.subtract(complex1);
      Complex complex13 = complex12.sin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = complex2.ZERO.sinh();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.ONE.pow(complex3);
      Complex complex9 = complex6.divide(complex7);
      int int0 = complex9.INF.hashCode();
      String string0 = complex2.INF.toString();
      Complex complex10 = complex6.divide((-3148.7582462107166));
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex4.conjugate();
      Complex complex13 = complex12.ZERO.multiply(1.401987075805664);
      Complex complex14 = new Complex(491.5291702908);
      Complex complex15 = complex11.multiply(complex14);
      Complex complex16 = complex6.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.ONE.acos();
      List<Complex> list0 = complex0.nthRoot(946);
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex0.NaN.createComplex(946, 1858.0913908);
      Complex complex5 = complex1.negate();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex5.INF.divide(complex1);
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex3.NaN.createComplex((-1.0), 946);
      Complex complex9 = complex1.add(complex8);
      Complex complex10 = complex2.NaN.cos();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex2.createComplex(946, 1.0);
      Complex complex12 = complex3.INF.divide(1858.0913908);
      Complex complex13 = complex12.ZERO.divide(2.192749500274658);
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex14.add((double) 946);
      Complex complex16 = complex1.sqrt();
      Complex complex17 = complex8.cos();
      Complex complex18 = complex11.multiply(1);
      Complex complex19 = complex16.cos();
      Complex complex20 = complex3.asin();
      Complex complex21 = complex2.pow(complex0);
      int int0 = complex13.hashCode();
      Complex complex22 = complex4.tan();
      Complex complex23 = Complex.ZERO;
      Complex complex24 = complex9.add(complex23);
      Complex complex25 = complex16.reciprocal();
      Complex complex26 = Complex.valueOf(5.2869976233132615E-298);
      Complex complex27 = complex26.reciprocal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1.5322813987731934);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply((-1948.5358821));
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.NaN.subtract(0.0);
      Complex complex5 = complex3.pow(336.8921672567537);
      Complex complex6 = complex1.ONE.pow(complex0);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex6.createComplex(2.0624330192486066E-8, (-1948.5358821));
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex6.ONE.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex2.subtract(0.0);
      Complex complex12 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      String string0 = complex11.I.toString();
      Complex complex13 = complex10.pow(complex5);
      Complex complex14 = complex1.pow(complex11);
      Complex complex15 = complex14.ONE.negate();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex14.getArgument();
      Complex complex16 = complex11.cosh();
      Complex complex17 = complex10.tanh();
      Complex complex18 = Complex.valueOf(0.0, 2.0624330192486066E-8);
      Complex complex19 = complex3.add(0.01165061630308628);
      int int0 = complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.exp();
      List<Complex> list0 = complex2.ZERO.nthRoot(260);
      String string1 = complex2.toString();
      Complex complex4 = complex1.ONE.subtract(complex0);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex4.ONE.add(complex0);
      Complex complex6 = complex0.NaN.pow(complex2);
      Object object1 = complex6.NaN.readResolve();
      Complex complex7 = complex0.ZERO.log();
      String string2 = complex0.toString();
      Complex complex8 = complex1.INF.divide(complex4);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex4.INF.reciprocal();
      Complex complex11 = complex5.NaN.sqrt1z();
      Complex complex12 = complex10.ZERO.sinh();
      Complex complex13 = complex4.multiply((double) 260);
      Complex complex14 = complex4.INF.subtract(complex3);
      Complex complex15 = Complex.INF;
      Complex complex16 = complex0.multiply(complex15);
      Complex complex17 = Complex.valueOf((-3466.078754429385), (-3466.078754429385));
      boolean boolean1 = complex5.isInfinite();
      Complex complex18 = complex9.add(complex0);
      Complex complex19 = complex18.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex20 = complex4.divide((double) 260);
      Complex complex21 = complex13.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1.3608995799112174E108, 84.11);
      Complex complex1 = complex0.ZERO.divide(4.2303826056297614E-123);
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.divide(84.11);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.ZERO.conjugate();
      Complex complex6 = Complex.valueOf(270.7895232, 270.7895232);
      String string0 = complex6.INF.toString();
      Complex complex7 = complex4.sqrt();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex9.atan();
      double double0 = complex1.getImaginary();
      List<Complex> list0 = complex9.nthRoot(7);
      String string1 = complex9.toString();
      Complex complex11 = complex0.subtract((-2870.07));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1162.97986);
      Complex complex1 = new Complex((-324.269191701758), 3.7730204737910044E260);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-160.56338992301679));
      Complex complex1 = complex0.ONE.subtract((-160.56338992301679));
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex3.ZERO.createComplex(609.4599187674143, 609.4599187674143);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.ZERO.multiply(1437);
      Complex complex10 = complex3.ZERO.atan();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex5.pow(3.2542391242036633E233);
      Complex complex13 = Complex.NaN;
      double double0 = complex12.abs();
      Complex complex14 = complex12.ONE.add(complex13);
      Complex complex15 = complex12.tan();
      double double1 = complex3.abs();
      Complex complex16 = complex5.acos();
      Complex complex17 = complex16.acos();
      double double2 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(4.153321337726989E-8, (-20.0));
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.multiply(6.283185307179586);
      String string0 = complex1.I.toString();
      Complex complex6 = complex0.I.sqrt1z();
      String string1 = complex0.toString();
      Complex complex7 = complex0.I.subtract(complex3);
      double double0 = complex5.getImaginary();
      Object object0 = complex3.readResolve();
      Complex complex8 = complex1.pow(complex2);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.ZERO.tan();
      Complex complex12 = complex8.add(6.283185307179586);
      Complex complex13 = complex1.tan();
      Complex complex14 = complex10.cos();
      double double1 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(2103.063791);
      Complex complex2 = null;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(0.0);
      List<Complex> list0 = complex0.INF.nthRoot(17);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.INF.sin();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex0.INF.log();
      Complex complex8 = complex1.I.atan();
      double double0 = complex1.I.abs();
      Complex complex9 = complex0.createComplex((-1.7766273910482863E198), (-1.7766273910482863E198));
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex9.I.conjugate();
      Complex complex13 = complex1.multiply(complex0);
      Complex complex14 = complex9.add((-1849.137));
      Complex complex15 = complex2.INF.sin();
      Object object1 = complex0.readResolve();
      Object object2 = complex4.readResolve();
      Complex complex16 = complex4.tanh();
      Complex complex17 = complex8.subtract((-621.1201650373787));
      Complex complex18 = complex17.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1843.4), 312.66347);
      Complex complex1 = complex0.NaN.createComplex(312.66347, (-1843.4));
      Complex complex2 = complex1.NaN.add(complex0);
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex1.reciprocal();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex2.NaN.sinh();
      Complex complex9 = complex7.INF.sinh();
      boolean boolean0 = complex7.equals(complex0);
      Complex complex10 = complex5.subtract(0.0);
      String string0 = complex7.ONE.toString();
      int int0 = complex10.hashCode();
      Complex complex11 = complex9.cosh();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex4.multiply(complex2);
      Complex complex14 = complex13.tanh();
      double double0 = complex2.getImaginary();
      Complex complex15 = complex6.subtract(2141.669450355088);
      Complex complex16 = complex15.ONE.conjugate();
      Complex complex17 = complex9.sqrt1z();
      Complex complex18 = complex5.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex19 = complex10.subtract(1471.131);
      Complex complex20 = Complex.valueOf(1.1679773330688477);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = complex0.pow(complex2);
      try { 
        complex6.ZERO.nthRoot((-82));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -82
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1.0965324942770584E171), (-1.0965324942770584E171));
      Complex complex1 = Complex.ZERO;
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex3.ONE.multiply((-3319.0));
      Complex complex6 = complex1.ZERO.exp();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex1.subtract((-2731.004097166));
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.ONE.divide(0.0);
      Complex complex11 = complex5.log();
      Complex complex12 = complex5.pow(complex2);
      Complex complex13 = complex3.acos();
      Complex complex14 = complex1.pow((-2731.004097166));
      Complex complex15 = complex6.cosh();
      Complex complex16 = complex15.ONE.sqrt();
      Complex complex17 = complex14.log();
      Complex complex18 = complex8.acos();
      Object object0 = new Object();
      boolean boolean0 = complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-3779.147629538565), (-3779.147629538565));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.INF.subtract((-3194.9223));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.INF.reciprocal();
      String string0 = complex3.NaN.toString();
      int int0 = complex0.hashCode();
      Object object1 = complex2.I.readResolve();
      Complex complex5 = Complex.valueOf((-3779.147629538565), 6.283185307179586);
      Complex complex6 = complex3.divide(0.0);
      double double0 = complex6.getImaginary();
      Complex complex7 = complex4.multiply(0.0);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex0.divide(335.4340166469562);
      Complex complex13 = complex7.createComplex(6.283185307179586, 460.5261113821);
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex8.createComplex((-3779.147629538565), 6.283185307179586);
      Complex complex16 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1788.08628459071), 0.0);
      Complex complex1 = complex0.ONE.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.NaN.add((-1788.08628459071));
      Complex complex4 = complex0.divide((-110.55443682));
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.ONE.cos();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex7.createComplex(0.0, (-110.55443682));
      Complex complex9 = complex7.I.tanh();
      String string0 = complex3.toString();
      Complex complex10 = complex0.divide(complex1);
      double double0 = complex8.getImaginary();
      Complex complex11 = complex8.multiply((-5383));
      boolean boolean0 = complex3.isNaN();
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2004.34198069743);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex1.pow((-1208.22783572));
      Complex complex5 = complex1.sinh();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex4 = complex1.pow(Double.NaN);
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex2.I.conjugate();
      Complex complex7 = complex2.log();
      Complex complex8 = complex0.I.asin();
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex3.NaN.negate();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex1.NaN.conjugate();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex13.exp();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex15.ZERO.subtract(389.95);
      Complex complex17 = complex13.multiply(0.0);
      String string0 = complex3.toString();
      Complex complex18 = complex3.createComplex((-1644.222898), 0.0);
      Complex complex19 = complex18.NaN.log();
      Complex complex20 = complex0.pow((-415.10596894));
      int int0 = complex4.hashCode();
      Complex complex21 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.divide((-595.76));
      Complex complex3 = complex2.I.multiply(complex0);
      double double0 = complex2.getArgument();
      String string0 = complex3.toString();
      double double1 = complex3.getReal();
      Complex complex4 = complex0.ONE.multiply(609);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.I.atan();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex5.ONE.pow(3738.323772282645);
      Complex complex9 = complex8.ZERO.subtract(complex2);
      Complex complex10 = complex5.exp();
      Complex complex11 = complex10.I.reciprocal();
      Complex complex12 = complex11.ZERO.negate();
      Complex complex13 = Complex.valueOf(Double.NaN, 2129.79031);
      Complex complex14 = complex8.atan();
      boolean boolean0 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(730.05, 0.0);
      Complex complex1 = complex0.pow(730.05);
      List<Complex> list0 = complex0.ZERO.nthRoot(1375);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.tanh();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex5 = complex0.ZERO.subtract(complex4);
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = complex5.I.multiply(1375);
      Complex complex8 = complex3.subtract(complex2);
      Complex complex9 = complex8.subtract(complex4);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex3.NaN.cosh();
      Complex complex12 = complex4.add(6.308649765138419E-287);
      List<Complex> list1 = complex10.INF.nthRoot(3032);
      Complex complex13 = complex0.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex8.getImaginary();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY);
      List<Complex> list2 = complex14.I.nthRoot(1375);
      Complex complex15 = complex4.add(complex5);
      Complex complex16 = complex15.I.sqrt1z();
      Complex complex17 = complex8.I.add(complex0);
      String string0 = complex16.ONE.toString();
      ComplexField complexField1 = complex8.NaN.getField();
      ComplexField complexField2 = complex8.ZERO.getField();
      Complex complex18 = complex8.I.atan();
      double double1 = complex10.getArgument();
      boolean boolean0 = complex6.isNaN();
      boolean boolean1 = complex8.isInfinite();
      Complex complex19 = complex11.add(complex2);
      double double2 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.add(0.0);
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.subtract(Double.NaN);
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex4.log();
      Complex complex8 = complex2.pow(complex1);
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex4.sin();
      Complex complex11 = complex3.INF.divide((-20.0));
      Complex complex12 = complex0.log();
      Complex complex13 = complex5.ONE.add(0.0);
      double double0 = complex4.getArgument();
      boolean boolean1 = complex6.isNaN();
      Complex complex14 = complex1.reciprocal();
      List<Complex> list0 = complex12.nthRoot(2193);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(826.5731215788728);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex4.NaN.subtract(826.5731215788728);
      double double0 = complex2.I.abs();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.INF.createComplex(1.0, 1.0);
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex7.I.log();
      Complex complex11 = complex7.ZERO.cos();
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex3.exp();
      Complex complex14 = complex7.sinh();
      double double1 = complex2.getImaginary();
      Complex complex15 = complex0.reciprocal();
      Complex complex16 = complex15.ONE.divide(complex1);
      Complex complex17 = complex12.add(754.0);
      Complex complex18 = complex17.INF.multiply((-6.56250013356227E-149));
      Complex complex19 = complex10.reciprocal();
      Complex complex20 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(1878.337785271);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.multiply(complex0);
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.pow(complex3);
      Object object1 = complex4.ONE.readResolve();
      Complex complex5 = complex3.multiply(0.0);
      Object object2 = complex5.I.readResolve();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.INF.add(complex4);
      Complex complex8 = complex6.log();
      String string0 = complex6.ZERO.toString();
      boolean boolean0 = complex3.equals(complex6);
      Complex complex9 = complex3.createComplex(1878.337785271, (-862.687));
      Complex complex10 = complex8.tan();
      Complex complex11 = complex8.INF.cos();
      double double1 = complex6.INF.abs();
      double double2 = complex9.getArgument();
      String string1 = complex0.toString();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex13.INF.tanh();
      Complex complex15 = complex13.NaN.subtract(complex6);
      ComplexField complexField0 = complex4.getField();
      Complex complex16 = complex0.ZERO.multiply((-1682));
      Complex complex17 = complex8.exp();
      int int1 = complex4.hashCode();
      Complex complex18 = complex4.subtract(complex12);
      Object object3 = complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-2695.22077);
      Complex complex0 = Complex.valueOf((-2695.22077));
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(37);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.ZERO.pow(complex0);
      Complex complex5 = complex4.ONE.add((double) 37);
      double double0 = complex1.ZERO.abs();
      Complex complex6 = complex0.createComplex(498.116674616707, 498.116674616707);
      Object object0 = complex5.ONE.readResolve();
      Complex complex7 = complex0.I.reciprocal();
      Complex complex8 = Complex.valueOf((-876.2160656543249), (-3777.9843));
      Complex complex9 = Complex.valueOf((-876.2160656543249), 1074.6819997754);
      Complex complex10 = complex6.I.subtract(complex9);
      Complex complex11 = complex6.tan();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex11.NaN.subtract(complex3);
      Complex complex14 = Complex.valueOf((-129.88991815703), 0.0);
      Complex complex15 = complex14.INF.divide((-4002.099769038702));
      Complex complex16 = complex15.ONE.multiply(complex5);
      Complex complex17 = complex16.ZERO.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex18 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-503.0), (-3.286964881802063E-8));
      Complex complex2 = complex0.I.multiply((-1));
      Complex complex3 = complex2.NaN.pow((-1245.662615066583));
      Complex complex4 = complex0.ZERO.subtract(complex1);
      Complex complex5 = Complex.valueOf(2.175685405731201);
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.NaN.atan();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex0.add(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1.494140625, 1400.59963);
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1.0028324930788433E27));
      Complex complex2 = complex1.createComplex((-1.0028324930788433E27), 2430.025484350359);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.ZERO.add(complex3);
      Complex complex5 = complex3.NaN.sqrt1z();
      int int0 = complex2.hashCode();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex3.multiply((-1787));
      Complex complex9 = complex4.log();
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.tanh();
      String string0 = complex2.toString();
      Complex complex3 = complex1.subtract(1.5707963267948966);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf(1870.8346, 1862.317148);
      Complex complex7 = complex4.log();
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex7.atan();
      double double1 = complex7.abs();
      Complex complex12 = complex4.cos();
      Complex complex13 = complex3.atan();
      Complex complex14 = complex0.tan();
      Complex complex15 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5133614540100098);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.multiply((-1108));
      Complex complex2 = complex1.add((double) (-1108));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(801.0286);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex0.multiply((-2653.9679));
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex4.ONE.createComplex(801.0286, 4508.145441462158);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex7 = complex5.I.multiply(1);
      Complex complex8 = Complex.valueOf((-1.7950057534514933E-9));
      Complex complex9 = complex8.I.cosh();
      int int0 = complex5.hashCode();
      Complex complex10 = complex5.log();
      Complex complex11 = complex5.divide((-2383.89));
      Complex complex12 = complex10.reciprocal();
      Complex complex13 = complex2.acos();
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex13.subtract(complex3);
      int int1 = complex15.hashCode();
      Complex complex16 = complex15.subtract(801.0286);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.NaN.nthRoot(17);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex1.INF.add((double) 17);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      String string0 = complex0.toString();
      boolean boolean1 = complex3.isNaN();
      Complex complex4 = Complex.valueOf((double) 17, (double) 17);
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex6.multiply(2.0);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex8.createComplex(17, 0.0);
      int int0 = complex10.hashCode();
      Complex complex11 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = complex0.add((-1415.3));
      Complex complex4 = complex0.INF.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.abs();
      Complex complex5 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(4538.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract(3.2558720916543104E-263);
      double double0 = complex1.getReal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex3.multiply(4538.0);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex2.atan();
      boolean boolean1 = complex2.isInfinite();
      String string0 = complex5.toString();
      boolean boolean2 = complex6.equals("(NaN, NaN)");
      boolean boolean3 = complex3.isNaN();
      int int0 = complex5.hashCode();
      Complex complex8 = complex4.multiply(1);
      Complex complex9 = complex8.multiply(1);
      Complex complex10 = complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1777.1));
      Complex complex1 = Complex.valueOf((-1777.1), (-1777.1));
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.conjugate();
      int int0 = complex4.INF.hashCode();
      Complex complex5 = Complex.valueOf((-493.144670417941), (-509.0604724321));
      Complex complex6 = complex4.multiply(complex0);
      Complex complex7 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex1.log();
      double double0 = complex3.INF.getArgument();
      Complex complex6 = complex2.divide(complex4);
      Complex complex7 = complex3.ZERO.cos();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex5.multiply((-1135.8645));
      Complex complex11 = complex0.divide(complex2);
      double double1 = complex3.getReal();
      double double2 = complex8.abs();
      Complex complex12 = complex9.multiply((-1685));
      Complex complex13 = complex12.add(complex1);
      double double3 = complex0.abs();
      Complex complex14 = complex3.sqrt();
      Complex complex15 = complex5.tan();
      Complex complex16 = complex14.subtract(0.0);
      Complex complex17 = complex13.cos();
      Complex complex18 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2405.30046779869));
      Complex complex1 = complex0.asin();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.I.sinh();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex5.pow((-1544.206559135));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.valueOf((-1742.209819307433));
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex1.ZERO.divide(complex0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      List<Complex> list0 = complex0.nthRoot(179);
      Complex complex6 = Complex.valueOf(1032.537060759281, 1032.537060759281);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex0.add(complex4);
      Complex complex10 = complex3.log();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.7853981633974483);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.multiply(666);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.NaN.exp();
      String string0 = complex1.toString();
      ComplexField complexField0 = complex3.getField();
      Complex complex7 = complex2.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ZERO.toString();
      double double0 = complex0.abs();
      Complex complex1 = complex0.ZERO.cosh();
      double double1 = complex1.abs();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex2.NaN.add(Double.NaN);
      Complex complex4 = complex2.NaN.divide((-1.8535359161566028E-8));
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.ZERO.createComplex(Double.NaN, 1758.87277902);
      Complex complex7 = complex4.INF.multiply((-1.8535359161566028E-8));
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex2.divide(complex0);
      Complex complex10 = complex9.INF.add(0.0);
      Complex complex11 = complex2.NaN.sinh();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex12.ONE.multiply(complex2);
      Complex complex14 = complex0.atan();
      double double2 = complex14.ZERO.abs();
      Complex complex15 = complex12.cosh();
      double double3 = complex15.ONE.abs();
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex3.conjugate();
      double double4 = complex0.getImaginary();
      Complex complex18 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.multiply((-433.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.pow(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = Complex.INF;
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex1.I.subtract(complex2);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex1.NaN.asin();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.NaN.exp();
      double double0 = complex1.abs();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex9.multiply(744);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = Complex.valueOf(0.18978065252304077);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex6.ONE.add(complex2);
      Object object1 = complex2.ONE.readResolve();
      Complex complex9 = complex8.ONE.sin();
      String string0 = complex0.toString();
      boolean boolean0 = complex8.equals(complex3);
      boolean boolean1 = complex2.equals(complex0);
      Complex complex10 = Complex.valueOf((-144.6721072), 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.ONE.pow((-3261.987));
      List<Complex> list0 = complex0.nthRoot(147);
      Complex complex5 = complex2.ZERO.add((double) 147);
      Complex complex6 = complex5.ZERO.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      double double0 = complex0.abs();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(968.60749635);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.pow(968.60749635);
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex4.ZERO.cos();
      boolean boolean0 = complex3.isInfinite();
      boolean boolean1 = complex4.isInfinite();
      Complex complex7 = complex4.multiply(968.60749635);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex2.I.add(complex8);
      Complex complex10 = complex7.multiply(complex3);
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex0.subtract(968.60749635);
      double double0 = complex10.getReal();
      Complex complex13 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract((-2.9098805266958403E-8));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.NaN.sqrt1z();
      int int0 = complex0.hashCode();
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex0.INF.reciprocal();
      int int1 = complex4.NaN.hashCode();
      double double1 = complex4.NaN.abs();
      Complex complex5 = complex1.multiply(complex0);
      boolean boolean0 = complex3.equals("YF`hwv~p");
      double double2 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = Complex.valueOf(0.0, (-3821.6));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex1.multiply((-2991.7716825542175));
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(0.25694090127944946);
      Complex complex3 = complex2.INF.pow(2964.607094);
      Complex complex4 = complex3.NaN.subtract(376.1161758);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.ZERO.pow((-1930.85441330435));
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.subtract(0.0);
      double double0 = complex5.getImaginary();
      double double1 = complex0.getImaginary();
      Complex complex9 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1044.721424), (-1.9256682968755803E-7));
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-1167.12538146));
      Complex complex4 = Complex.valueOf((-1044.721424));
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex2.ONE.pow(complex3);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex0.NaN.multiply((-1660));
      Complex complex9 = complex4.add(complex6);
      Complex complex10 = complex0.add(complex4);
      List<Complex> list0 = complex0.NaN.nthRoot(1016);
      ComplexField complexField0 = complex9.getField();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex11.I.subtract(complex3);
      Complex complex13 = complex6.tanh();
      Complex complex14 = new Complex((-1660));
      Complex complex15 = complex13.INF.pow(complex14);
      boolean boolean1 = complex9.isNaN();
      Complex complex16 = complex2.pow((double) 1016);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.add((-718.9135784));
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.multiply((-362.122));
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Object object1 = complex0.ZERO.readResolve();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cos();
      double double1 = complex1.I.abs();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.INF.createComplex(Double.POSITIVE_INFINITY, (-954.505368));
      int int0 = complex2.ONE.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.add(20.0);
      double double2 = complex1.getReal();
      double double3 = complex2.getImaginary();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.multiply(complex1);
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = Complex.valueOf((-1681.5097863), (-1172.8623835));
      Complex complex4 = complex3.I.tan();
      boolean boolean0 = complex0.equals(complex3);
      boolean boolean1 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Object object0 = complex0.ONE.readResolve();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.pow(1.287792682647705);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(2107.01619, 2107.01619);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.ONE.pow(0.0);
      Complex complex4 = complex3.ONE.sqrt1z();
      double double0 = complex3.ZERO.getArgument();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.INF.sin();
      String string0 = complex6.I.toString();
      double double1 = complex0.getArgument();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.INF.cos();
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex0.multiply((-2061.41759153));
      boolean boolean0 = complex5.isNaN();
      Complex complex12 = complex5.asin();
      Complex complex13 = Complex.valueOf(0.0, (-2185.8706042064));
      Complex complex14 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-37.22027829852125), 1.7013941257113314E-190);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.createComplex((-20.0), (-20.0));
      List<Complex> list0 = complex0.INF.nthRoot(111);
      Complex complex3 = complex0.INF.divide(complex1);
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex0.add((-1573.8785789528276));
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = Complex.valueOf((-1573.8785789528276), (-20.0));
      Complex complex8 = Complex.valueOf(2.0, (-1573.8785789528276));
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex6.NaN.cos();
      Complex complex12 = Complex.valueOf((-20.0));
      Complex complex13 = complex3.pow(complex6);
      Complex complex14 = complex12.sinh();
      Complex complex15 = complex5.subtract(complex6);
      Complex complex16 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide((-1046.2));
      Complex complex2 = complex0.add((-1046.2));
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4041.0);
      Complex complex1 = complex0.ZERO.cos();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-976.442));
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.NaN.divide(0.0);
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.19541901350021362, 0.19541901350021362);
      Complex complex2 = complex1.multiply((-20.0));
      String string0 = complex1.INF.toString();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      double double0 = (-20.0);
      Complex complex4 = Complex.valueOf((-3514.80683), 885.5736403890191);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex3.INF.createComplex((-20.0), (-20.0));
      Complex complex7 = complex6.ONE.tanh();
      double double1 = complex0.getArgument();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.multiply((-1674.8));
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex10.INF.add(complex2);
      double double2 = complex9.abs();
      Complex complex12 = complex0.subtract((-984.406072158));
      Object object1 = complex12.NaN.readResolve();
      Complex complex13 = Complex.valueOf((-957.4727527414));
      Complex complex14 = Complex.valueOf((-20.0));
      boolean boolean1 = complex14.isNaN();
      Complex complex15 = complex6.cos();
      Complex complex16 = complex7.tanh();
      try { 
        complex14.nthRoot((-3896));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,896
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3350.48361655839));
      Complex complex1 = new Complex(789.8904652097178, 0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.INF.divide((-3350.48361655839));
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex5.NaN.divide(complex2);
      Complex complex7 = complex0.I.asin();
      Complex complex8 = complex0.divide((-942.45940259));
      Complex complex9 = complex2.INF.subtract(complex0);
      Complex complex10 = complex1.createComplex((-942.45940259), 0.0);
      Complex complex11 = complex10.divide(complex3);
      double double0 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.381600167287677E-297, Double.NaN);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.createComplex((-3012.582), (-3012.582));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(363);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.multiply((-1906));
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6095.8), (-899.1603439));
      Complex complex1 = complex0.INF.add(7.887051614592191E-8);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.sinh();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.cos();
      ComplexField complexField1 = complex1.getField();
      Complex complex6 = complex2.ONE.add(7.887051614592191E-8);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex4.divide((-1551.8616799044578));
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.INF.acos();
      boolean boolean0 = complex6.isNaN();
      Complex complex11 = Complex.valueOf(20.0);
      Complex complex12 = complex0.negate();
      Complex complex13 = Complex.valueOf(7.887051614592191E-8, (-1176.4833064274846));
      Complex complex14 = complex11.cosh();
      Complex complex15 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.INF.multiply(0.0);
      Complex complex4 = complex3.I.sin();
      List<Complex> list0 = complex1.NaN.nthRoot(138);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex6.divide((double) 138);
      Complex complex9 = complex7.pow((double) 138);
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex1.multiply(1);
      Complex complex12 = complex6.I.reciprocal();
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex13.subtract((double) 138);
      Complex complex15 = complex9.sinh();
      double double0 = complex9.getReal();
      Complex complex16 = complex8.multiply(3689);
      Complex complex17 = complex7.cos();
      double double1 = complex17.ZERO.getArgument();
      Complex complex18 = complex10.pow((double) 1);
      Complex complex19 = complex12.acos();
      List<Complex> list1 = complex1.nthRoot(1);
      Complex complex20 = complex4.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.divide(0.0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.divide((-5.53373633994532));
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex1.INF.tanh();
      Complex complex9 = complex7.I.pow(0.0);
      Complex complex10 = complex7.I.multiply(2442.142036861317);
      Complex complex11 = complex7.createComplex(0.0, 0.0);
      Complex complex12 = complex9.INF.cos();
      Complex complex13 = complex2.sin();
      Complex complex14 = complex9.sinh();
      Complex complex15 = complex1.cos();
      Complex complex16 = complex2.subtract(complex15);
      double double0 = complex3.getArgument();
      Complex complex17 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.createComplex(7, 7);
      Complex complex2 = Complex.valueOf((double) 7);
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.acos();
      double double0 = complex3.getReal();
      Object object0 = complex2.readResolve();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(1605.2);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex5.createComplex(3406.7, 1605.2);
      Complex complex7 = complex4.ZERO.add(1605.2);
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex7.I.exp();
      ComplexField complexField1 = complex9.getField();
      Complex complex10 = Complex.valueOf(1605.2);
      Complex complex11 = complex10.I.atan();
      Complex complex12 = complex11.NaN.divide(1605.2);
      Complex complex13 = complex12.INF.atan();
      ComplexField complexField2 = complex13.ZERO.getField();
      String string0 = complex10.NaN.toString();
      Complex complex14 = complex10.sin();
      Complex complex15 = complex0.I.tan();
      String string1 = complex14.NaN.toString();
      Complex complex16 = complex14.subtract((-354.89));
      Complex complex17 = complex1.cos();
      Complex complex18 = complex17.INF.negate();
      boolean boolean0 = complex3.isNaN();
      Complex complex19 = complex1.NaN.tan();
      String string2 = complex17.toString();
      Complex complex20 = complex2.negate();
      Complex complex21 = complex18.INF.reciprocal();
      Complex complex22 = complex18.negate();
      String string3 = complex18.toString();
      double double0 = complex3.getArgument();
      String string4 = complex22.toString();
      Complex complex23 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      int int0 = 0;
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.NaN.subtract((-883.432028622132));
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = complex0.I.cos();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex4.ONE.negate();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex1.I.cosh();
      String string0 = complex0.toString();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex10.pow(0.0);
      Complex complex12 = complex5.add(0.0);
      Complex complex13 = complex12.INF.reciprocal();
      boolean boolean0 = complex8.isNaN();
      Complex complex14 = complex10.I.log();
      Complex complex15 = complex6.multiply((-869));
      Complex complex16 = complex15.NaN.atan();
      ComplexField complexField0 = complex15.getField();
      Complex complex17 = complex16.ONE.conjugate();
      Complex complex18 = complex17.I.divide(6.283185307179586);
      double double1 = complex11.abs();
      Complex complex19 = complex12.sqrt();
      Complex complex20 = complex19.ONE.asin();
      Complex complex21 = complex9.atan();
      Complex complex22 = complex21.acos();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = new Complex((-1050.2805432341431));
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = Complex.valueOf((-501.3159349));
      Complex complex6 = complex5.cosh();
      List<Complex> list0 = complex1.I.nthRoot(37);
      Complex complex7 = complex2.multiply(0);
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.I.reciprocal();
      double double0 = complex2.getArgument();
      Complex complex10 = complex4.INF.cosh();
      Complex complex11 = complex10.INF.sqrt1z();
      boolean boolean1 = complex0.equals(complex4);
      Complex complex12 = complex1.acos();
      Complex complex13 = complex12.multiply(1617.467);
      List<Complex> list1 = complex4.nthRoot(439);
      Complex complex14 = complex13.reciprocal();
      double double1 = complex4.abs();
      Complex complex15 = complex4.sqrt1z();
      Complex complex16 = complex13.sinh();
      Complex complex17 = complex13.subtract(Double.NaN);
      Complex complex18 = complex17.I.divide((-2201.39575));
      double double2 = complex5.getReal();
      Complex complex19 = complex0.cos();
      Complex complex20 = complex12.multiply(complex15);
      Complex complex21 = complex12.multiply((-1009));
      Complex complex22 = complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(1626.2, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.exp();
  }
}
