/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:16:44 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex3.ONE.subtract((-3484.36965414499));
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex3.divide(complex5);
      double double0 = complex0.getArgument();
      Complex complex8 = complex6.NaN.subtract(complex5);
      Complex complex9 = complex5.INF.multiply(0);
      Complex complex10 = Complex.valueOf((-2.268994961992292E125));
      Complex complex11 = complex10.ONE.subtract(Double.NaN);
      Complex complex12 = complex2.I.exp();
      Complex complex13 = new Complex(Double.NaN, 3166.61);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex14 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex15 = complex1.sqrt1z();
      Complex complex16 = complex14.tan();
      boolean boolean1 = complex6.isNaN();
      Complex complex17 = complex2.multiply((-1));
      Complex complex18 = complex10.createComplex((-2.268994961992292E125), Double.NaN);
      Complex complex19 = complex16.cosh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add((-1182.479));
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex0.exp();
      int int0 = 1073741824;
      // Undeclared exception!
      complex3.ONE.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.subtract(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1718.5859);
      Complex complex1 = new Complex(1718.5859);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.sqrt1z();
      int int0 = complex3.hashCode();
      Complex complex4 = Complex.valueOf(1718.5859, 1718.5859);
      Complex complex5 = complex3.tan();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.createComplex(0.0, 6.283185307179586);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex2.reciprocal();
      boolean boolean0 = complex8.isNaN();
      Complex complex10 = complex0.ONE.cos();
      Complex complex11 = complex10.NaN.cos();
      Complex complex12 = complex0.add(complex9);
      boolean boolean1 = complex6.isNaN();
      boolean boolean2 = complex10.isInfinite();
      Complex complex13 = complex3.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(0.31418323516845703, 0.31418323516845703);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-6693.067052057468));
      Complex complex2 = complex0.add(0.31418323516845703);
      Complex complex3 = complex2.sinh();
      int int0 = complex0.ZERO.hashCode();
      double double0 = complex2.getImaginary();
      Complex complex4 = complex0.subtract((-1.0));
      Complex complex5 = complex2.cosh();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex6.INF.divide(complex4);
      Complex complex8 = new Complex((-586.8), 0.31418323516845703);
      double double1 = complex8.getArgument();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.multiply(complex9);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex4.INF.multiply((-6693.067052057468));
      Complex complex13 = complex12.ONE.subtract(0.31418323516845703);
      Complex complex14 = complex6.I.divide(complex8);
      Complex complex15 = complex0.log();
      Complex complex16 = complex15.ZERO.negate();
      Complex complex17 = complex1.exp();
      Complex complex18 = complex17.sin();
      Complex complex19 = complex15.acos();
      Complex complex20 = complex19.sinh();
      Complex complex21 = complex4.log();
      Complex complex22 = complex3.add(complex9);
      Complex complex23 = complex6.log();
      Complex complex24 = complex5.cos();
      Complex complex25 = complex19.sqrt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex0.I.add((-1715.3969));
      Complex complex5 = complex4.ONE.sqrt1z();
      int int0 = complex0.I.hashCode();
      Complex complex6 = complex3.ZERO.add((-1715.3969));
      Complex complex7 = complex0.divide((-633.17));
      Complex complex8 = complex6.INF.cos();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex8.NaN.divide((-633.17));
      Complex complex11 = complex7.INF.atan();
      Object object1 = complex7.ZERO.readResolve();
      double double0 = complex3.getImaginary();
      Complex complex12 = complex3.ZERO.atan();
      boolean boolean0 = complex3.isInfinite();
      Complex complex13 = complex1.ZERO.log();
      double double1 = complex1.getReal();
      Complex complex14 = complex1.add(2836.490807764);
      Complex complex15 = new Complex(0.0, 0.0);
      Complex complex16 = complex3.add(complex15);
      Complex complex17 = complex16.ZERO.createComplex(0.0, 5285.8);
      ComplexField complexField0 = complex17.NaN.getField();
      Complex complex18 = complex1.acos();
      Complex complex19 = complex18.asin();
      double double2 = complex6.getImaginary();
      Complex complex20 = complex14.tanh();
      boolean boolean1 = complex6.isInfinite();
      Complex complex21 = complex16.multiply(5285.8);
      boolean boolean2 = complex5.equals(complex17);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.I.divide(complex0);
      Complex complex7 = Complex.valueOf(0.0, Double.NaN);
      Complex complex8 = complex2.NaN.reciprocal();
      int int0 = complex7.ONE.hashCode();
      double double0 = complex5.ZERO.getArgument();
      double double1 = complex2.ZERO.abs();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex6.ONE.asin();
      Complex complex11 = complex2.add((-20.0));
      Complex complex12 = complex6.reciprocal();
      double double2 = complex1.getArgument();
      Complex complex13 = complex9.subtract(complex5);
      Complex complex14 = complex13.INF.cos();
      Complex complex15 = complex11.sqrt();
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex15.tanh();
      Complex complex18 = Complex.I;
      Complex complex19 = complex17.pow(complex18);
      Complex complex20 = complex2.conjugate();
      Complex complex21 = complex12.add(complex4);
      Complex complex22 = complex18.tan();
      Complex complex23 = complex8.ONE.add(complex20);
      ComplexField complexField1 = complex7.getField();
      Complex complex24 = complex1.divide(0.0);
      Complex complex25 = complex21.add(complex8);
      Complex complex26 = complex14.tanh();
      Complex complex27 = complex5.sqrt();
      Complex complex28 = complex7.add(2.006293773651123);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals("(");
      Complex complex1 = new Complex(0.0, 1.4565123573071036E164);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.add(complex1);
      boolean boolean1 = complex3.equals("(");
      Complex complex4 = complex1.sinh();
      boolean boolean2 = complex1.isInfinite();
      boolean boolean3 = complex3.isInfinite();
      Complex complex5 = complex1.conjugate();
      try { 
        complex3.nthRoot((-116));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -116
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.exp();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex1.reciprocal();
      String string0 = complex1.I.toString();
      Complex complex3 = complex0.I.pow(2079.69);
      Complex complex4 = complex0.I.subtract(4379.235023);
      double double1 = complex4.ONE.getArgument();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.ZERO.asin();
      String string1 = complex0.toString();
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex3.INF.exp();
      Complex complex10 = complex3.cosh();
      Complex complex11 = Complex.valueOf(0.0, 4379.235023);
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex2.pow(complex11);
      Complex complex14 = complex8.subtract(0.0);
      Complex complex15 = complex8.log();
      boolean boolean1 = complex0.isInfinite();
      boolean boolean2 = complex14.isInfinite();
      Complex complex16 = complex14.asin();
      Complex complex17 = complex6.divide(4379.235023);
      Complex complex18 = complex3.atan();
      String string2 = complex2.toString();
      boolean boolean3 = complex12.equals(complex18);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1796.231528396), Double.NaN);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      List<Complex> list0 = complex2.INF.nthRoot(1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.I.divide(complex4);
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex3.NaN.negate();
      Complex complex7 = complex3.I.cos();
      Complex complex8 = complex7.NaN.subtract((-1796.231528396));
      Complex complex9 = complex7.NaN.conjugate();
      Complex complex10 = complex7.NaN.sinh();
      Complex complex11 = complex10.ONE.log();
      double double1 = complex2.abs();
      double double2 = complex3.getReal();
      int int1 = complex8.ONE.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex8.reciprocal();
      Complex complex14 = complex13.ONE.add(0.0);
      Complex complex15 = complex3.reciprocal();
      Complex complex16 = complex10.cosh();
      Complex complex17 = complex16.NaN.sqrt();
      Complex complex18 = complex10.sin();
      Complex complex19 = Complex.valueOf((-1848.3), 1.5430806348152437);
      Complex complex20 = complex19.INF.pow(complex3);
      Complex complex21 = complex5.cos();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.cos();
      String string0 = complex1.ONE.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = new Complex(0.0, (-3209.6754));
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex1.NaN.cosh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex0.INF.tanh();
      ComplexField complexField0 = complex7.I.getField();
      Complex complex8 = complex3.I.log();
      List<Complex> list0 = complex6.ZERO.nthRoot(1622);
      Complex complex9 = complex4.INF.add(complex6);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex9.I.asin();
      Complex complex13 = complex0.createComplex((-3209.6754), (-3209.6754));
      Complex complex14 = complex9.divide(complex3);
      double double0 = complex14.I.getArgument();
      ComplexField complexField1 = complex0.getField();
      Object object0 = new Object();
      boolean boolean1 = complex6.equals(object0);
      Complex complex15 = complex1.subtract(complex2);
      Complex complex16 = complex12.subtract(complex11);
      Complex complex17 = complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2023.5);
      Complex complex1 = new Complex(2023.5, 0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.pow(34.540447208);
      List<Complex> list0 = complex3.ZERO.nthRoot(1762);
      Complex complex4 = complex0.ZERO.exp();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.INF.reciprocal();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex7 = complex6.ZERO.pow(1.7884841356632925E49);
      Complex complex8 = complex2.multiply(0);
      Complex complex9 = complex8.INF.multiply(0);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex4.pow(34.540447208);
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex14 = complex2.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = (-2680.44711073);
      Complex complex0 = Complex.valueOf((-2680.44711073));
      Complex complex1 = null;
      try { 
        complex0.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.716531820904728E50);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(6217.588022296535);
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.multiply((-1515.68992));
      double double1 = complex1.ZERO.abs();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.divide(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = complex7.I.conjugate();
      List<Complex> list0 = complex1.nthRoot(870);
      Complex complex9 = Complex.valueOf(0.6853040456771851, 0.0);
      Complex complex10 = complex8.subtract(complex9);
      Complex complex11 = complex0.asin();
      double double2 = complex11.getArgument();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex12.INF.subtract(complex8);
      double double3 = complex7.getImaginary();
      ComplexField complexField1 = complex11.getField();
      Complex complex14 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.2), (-1566.13));
      Complex complex1 = Complex.valueOf((-1566.13), (-842.2));
      Complex complex2 = complex1.I.add((-426.0482105));
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex0.I.subtract(complex1);
      Complex complex6 = new Complex((-842.2), (-1566.13));
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = Complex.valueOf((-1537.9));
      double double0 = complex7.ONE.getArgument();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex0.cos();
      Complex complex12 = Complex.valueOf((-327.297922), 0.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ONE.pow(complex2);
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex7.ONE.reciprocal();
      Complex complex9 = complex0.multiply(17);
      Object object0 = complex6.ONE.readResolve();
      Complex complex10 = complex0.NaN.negate();
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex13.atan();
      Complex complex15 = complex5.divide((-1387.900894));
      Complex complex16 = complex15.multiply((-996));
      Complex complex17 = complex4.log();
      Complex complex18 = complex6.add(complex8);
      double double0 = complex6.abs();
      Complex complex19 = complex6.subtract((-1387.900894));
      Complex complex20 = Complex.valueOf((double) (-996));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(2299.7794684, 2299.7794684);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.multiply((-20.0));
      Complex complex4 = complex1.pow(2299.7794684);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.ONE.tanh();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex3.subtract(2299.7794684);
      Complex complex11 = complex5.cosh();
      boolean boolean0 = complex0.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1576.004547349259), (-1576.004547349259));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.subtract(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = Complex.valueOf((-3078.5553393), (-3078.5553393));
      Complex complex5 = complex3.INF.tanh();
      List<Complex> list0 = complex3.INF.nthRoot(1);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex2.tanh();
      int int0 = complex2.hashCode();
      Complex complex8 = complex1.NaN.tan();
      Complex complex9 = complex8.I.add(complex3);
      boolean boolean1 = complex7.equals(complex2);
      double double0 = complex1.getImaginary();
      Complex complex10 = Complex.valueOf(127.5117649644, (-4134.35028284));
      Complex complex11 = complex3.divide(127.5117649644);
      Complex complex12 = complex11.subtract(672.630823677173);
      Complex complex13 = complex12.pow(0.3297532796859741);
      Complex complex14 = complex8.atan();
      Complex complex15 = complex14.exp();
      Complex complex16 = complex14.multiply((-338.06664651569));
      Complex complex17 = complex5.sin();
      Complex complex18 = Complex.valueOf(0.0, 672.630823677173);
      boolean boolean2 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ZERO.createComplex((-9.516785302789955), (-9.516785302789955));
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex3.divide(1878.0);
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex0.ZERO.reciprocal();
      List<Complex> list0 = complex9.INF.nthRoot(37);
      Complex complex10 = complex0.multiply(6.283185307179586);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex11.INF.multiply(1276);
      Complex complex13 = complex11.acos();
      Complex complex14 = complex4.add(1.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 1.1475955030427985E107;
      Complex complex1 = complex0.ONE.createComplex(1.1475955030427985E107, 1.1475955030427985E107);
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.NaN.sin();
      List<Complex> list0 = complex3.ZERO.nthRoot(1);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-465.1108078321615));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = Complex.valueOf(1.0, 1.1345047468988893E-8);
      Complex complex5 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.INF.pow(1573.464453605903);
      Complex complex7 = complex5.negate();
      Complex complex8 = complex5.I.sinh();
      Complex complex9 = complex1.acos();
      Complex complex10 = Complex.valueOf((-3.6206211446779087E-63));
      Complex complex11 = complex9.negate();
      Complex complex12 = complex1.subtract(complex2);
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex13.sqrt1z();
      Complex complex15 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.pow(2115.69245293885);
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex3.I.subtract(1.9540846347808838);
      Complex complex5 = complex1.I.divide((-1249.890264));
      double double0 = complex1.ONE.getArgument();
      Complex complex6 = complex0.INF.atan();
      Complex complex7 = complex1.ONE.pow(0.0);
      Complex complex8 = complex1.ONE.negate();
      String string0 = complex1.ONE.toString();
      Complex complex9 = complex0.multiply(complex1);
      Complex complex10 = complex0.sqrt();
      double double1 = complex10.getReal();
      Complex complex11 = complex6.add((-184.3960153));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-497.753251585));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sinh();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex1.ONE.getField();
      Complex complex4 = complex2.conjugate();
      List<Complex> list0 = complex2.NaN.nthRoot(1317);
      Complex complex5 = complex2.ONE.add(0.0);
      Complex complex6 = Complex.valueOf(2.0, (-1035.25877128));
      Complex complex7 = complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-6.892221115467135E-10), Double.NaN);
      Complex complex4 = complex1.multiply((-6.892221115467135E-10));
      Complex complex5 = complex4.tanh();
      try { 
        complex5.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1335.0), (-4472.6955101));
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.NaN.negate();
      String string0 = complex3.I.toString();
      Complex complex4 = complex1.I.exp();
      Complex complex5 = complex4.I.sqrt();
      Object object0 = complex0.ONE.readResolve();
      Complex complex6 = complex0.createComplex((-4472.6955101), (-1335.0));
      Complex complex7 = Complex.valueOf((-1335.0));
      Complex complex8 = complex6.divide(complex2);
      Complex complex9 = complex1.pow(complex2);
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex1.add((-4472.6955101));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      double double0 = complex0.NaN.getArgument();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = null;
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1186.9057));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(547.54545143013);
      Complex complex1 = complex0.ONE.tan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.NaN.divide(547.54545143013);
      int int1 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.reciprocal();
      int int2 = complex0.ZERO.hashCode();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.ONE.pow(547.54545143013);
      Complex complex6 = Complex.valueOf(547.54545143013, Double.NaN);
      String string0 = complex5.toString();
      Complex complex7 = complex0.I.negate();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.ONE.sqrt();
      Complex complex10 = complex8.INF.sqrt1z();
      Complex complex11 = complex8.createComplex(547.54545143013, 0.0);
      Complex complex12 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2996.91836948004), (-2996.91836948004));
      Complex complex2 = complex0.ONE.add(complex1);
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1612.0), 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 6.283185307179586);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(3525.02967586425, (-1024.0443));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(26.8695907);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = Complex.valueOf(0.6857960224151611);
      Complex complex6 = complex0.ZERO.divide(complex3);
      Complex complex7 = complex1.pow((-4243.0));
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex7.divide(26.8695907);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.divide(4.995334552140326E-8);
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      double double0 = complex6.ZERO.abs();
      Complex complex7 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex8 = complex7.INF.divide((-1130.632094814151));
      Object object0 = complex0.INF.readResolve();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex11.ONE.sqrt();
      Complex complex13 = complex12.ONE.tan();
      Complex complex14 = complex11.INF.negate();
      double double1 = complex0.ZERO.abs();
      Complex complex15 = complex4.subtract(complex0);
      Complex complex16 = complex15.tan();
      Complex complex17 = complex16.ZERO.add((-163.240357));
      Complex complex18 = Complex.valueOf(6.283185307179586, (-1247.46005118973));
      Complex complex19 = complex18.log();
      Complex complex20 = complex9.add(6.283185307179586);
      double double2 = complex20.NaN.abs();
      Complex complex21 = complex15.sin();
      Complex complex22 = complex11.cosh();
      Complex complex23 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf((-2974.35689763), (-2974.35689763));
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.atan();
      double double0 = complex5.abs();
      String string0 = complex4.toString();
      Complex complex6 = complex4.divide((-1773.3866983947014));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6049.7002886303);
      Complex complex1 = new Complex(6049.7002886303, 6049.7002886303);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(6049.7002886303);
      double double0 = complex4.I.abs();
      Complex complex5 = complex3.ONE.pow(complex0);
      Complex complex6 = complex1.ONE.subtract(complex5);
      Complex complex7 = complex5.ZERO.subtract(6049.7002886303);
      Complex complex8 = complex6.ONE.negate();
      Complex complex9 = complex5.INF.cosh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex3.INF.sqrt1z();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex3.acos();
      Complex complex14 = complex11.sinh();
      double double1 = complex1.abs();
      String string0 = complex1.toString();
      double double2 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex1.INF.add(complex0);
      Complex complex6 = complex0.sqrt();
      double double0 = complex5.NaN.abs();
      List<Complex> list0 = complex1.nthRoot(585);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.multiply(Double.NaN);
      Complex complex9 = complex4.sin();
      Complex complex10 = complex7.sin();
      Complex complex11 = new Complex(Double.NaN);
      boolean boolean1 = complex0.equals(complex11);
      Complex complex12 = complex4.sqrt1z();
      Complex complex13 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.INF.multiply(1.0);
      Complex complex4 = complex0.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.NaN.multiply(258);
      Complex complex2 = complex0.NaN.divide((-1489.04886539));
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = Complex.valueOf((-1489.04886539), (-1540.012916377869));
      double double0 = complex0.ZERO.abs();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex1.exp();
      double double1 = complex1.getImaginary();
      int int0 = complex4.hashCode();
      Complex complex6 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add(20.0);
      Complex complex2 = complex1.add(20.0);
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex3.I.multiply((-857));
      String string0 = complex0.toString();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.log();
      Complex complex8 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(0.0, (-1942.1430198964058));
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf((-1942.1430198964058));
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.acos();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex3.ONE.conjugate();
      Complex complex6 = complex1.divide(complex3);
      Complex complex7 = complex1.createComplex(0.0, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex7.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.6086184978485107);
      Complex complex1 = complex0.add(0.6086184978485107);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex2.NaN.sqrt();
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex6.NaN.divide(0.6086184978485107);
      Complex complex9 = complex1.NaN.tan();
      Complex complex10 = complex4.INF.add(complex1);
      Complex complex11 = complex2.sqrt1z();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex11.equals(complex9);
      Complex complex12 = complex1.negate();
      Complex complex13 = complex2.subtract(2.398038505188316E-163);
      Complex complex14 = complex5.negate();
      Complex complex15 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.INF.tanh();
      double double0 = complex0.NaN.getArgument();
      Complex complex6 = complex0.add(17.27262240103);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex8.divide((-1726.321242));
      Complex complex10 = complex3.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex0.cos();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1022.528807));
      Complex complex1 = complex0.ONE.cos();
      double double0 = complex0.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = complex2.ZERO.subtract(Double.NaN);
      Complex complex4 = complex0.createComplex(Double.NaN, 815.59);
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex4.INF.sqrt();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex6.I.divide(815.59);
      double double0 = complex6.NaN.abs();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex11 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex1.NaN.tanh();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex0.add(2866.65336624);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(4475.60459984);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.valueOf((-341.07737), 0.0);
      Complex complex3 = complex1.ZERO.exp();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = Complex.valueOf((-125.8299961356361));
      Complex complex9 = complex8.exp();
      Complex complex10 = complex6.log();
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex6.conjugate();
      Complex complex13 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.INF.reciprocal();
      double double0 = complex0.getReal();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.INF.sqrt1z();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex3.ONE.subtract(complex1);
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex2.cos();
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = complex0.I.multiply(Double.NaN);
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.tanh();
      boolean boolean0 = complex4.equals("eZldp dFR0ohK!7");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ONE.divide((-1655.4391353));
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.ONE.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.pow((-3320.0369457964));
      Complex complex3 = complex0.INF.log();
      double double1 = complex1.getReal();
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex1.ZERO.divide(525.9511587776965);
      Complex complex5 = complex2.asin();
      double double2 = complex5.getArgument();
      Complex complex6 = complex2.pow((-1.0));
      Complex complex7 = complex3.multiply(1.71390848833098E-15);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex3.multiply(1733);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.INF.negate();
      Complex complex7 = complex4.pow(complex0);
      Complex complex8 = complex3.multiply((-3944));
      Complex complex9 = complex4.atan();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-814.25));
      double double0 = complex0.getReal();
      Complex complex2 = complex1.pow((-1369.767769876));
      Complex complex3 = complex1.conjugate();
      double double1 = complex3.abs();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex0.cosh();
      Object object0 = complex5.readResolve();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(160.7817780875185, 160.7817780875185);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = Complex.valueOf((-4735.801771291018), (-4.820065619207094E-9));
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.subtract(160.7817780875185);
      Complex complex5 = complex0.subtract(complex4);
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex4.multiply((-4735.801771291018));
      Complex complex7 = complex1.ONE.log();
      Complex complex8 = complex5.INF.acos();
      Complex complex9 = complex1.NaN.multiply((-5287.349638));
      Complex complex10 = complex0.I.createComplex((-4.820065619207094E-9), 0.0);
      Complex complex11 = complex3.sin();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex1.sqrt1z();
      double double1 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply((-20.0));
      Complex complex3 = complex0.createComplex((-1.0), (-20.0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt1z();
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.907085854395348E-8));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.multiply(1719);
      Complex complex4 = complex2.sin();
      Complex complex5 = Complex.valueOf((double) 1719);
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex0.createComplex(1719, 0.0);
      Complex complex8 = complex0.NaN.negate();
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.NaN.add(complex1);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex2.ONE.cosh();
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex7.multiply(4673.683734013);
      double double0 = complex1.getArgument();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex0.createComplex(Double.POSITIVE_INFINITY, 4673.683734013);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex7.multiply(1026);
      Complex complex12 = complex1.sin();
      double double1 = complex10.getArgument();
      Complex complex13 = complex10.reciprocal();
      double double2 = complex10.getArgument();
      Complex complex14 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.createComplex((-481.8284218), 1864.0);
      double double0 = complex0.getArgument();
      double double1 = complex0.ONE.abs();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex3.tan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.createComplex((-2178.2), 0.4531385898590088);
      Complex complex3 = complex0.acos();
      double double0 = complex3.INF.abs();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.NaN.sin();
      double double1 = complex1.getReal();
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3.8603349913851996E-97, 0.2160874605178833);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.pow(2133.497178);
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex5.ZERO.divide(2912.53509);
      Complex complex8 = complex6.INF.sinh();
      Complex complex9 = complex8.ZERO.conjugate();
      int int1 = complex0.hashCode();
      Complex complex10 = complex4.negate();
      int int2 = complex2.hashCode();
      Complex complex11 = complex5.negate();
      double double0 = complex4.getImaginary();
      Complex complex12 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex2.multiply(37);
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex1.pow((double) 37);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2648.6742495707);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.negate();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.multiply(129);
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(4.255446699237779E-11, 4.255446699237779E-11);
      double double0 = complex0.getImaginary();
      Complex complex1 = new Complex(4.255446699237779E-11, 4.255446699237779E-11);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf(1.0);
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf((-2.0697130057384643E245), 2531.2457);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ONE.multiply(complex3);
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex0.I.negate();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract((-3664.4366315537022));
      Complex complex3 = complex2.INF.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex2.I.sinh();
      Complex complex8 = Complex.valueOf((-3664.4366315537022), (-3664.4366315537022));
      Complex complex9 = complex4.multiply(complex3);
      double double0 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2549.92981569515), (-2549.92981569515));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.abs();
      double double1 = complex3.getArgument();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1239);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.ZERO.tanh();
      double double0 = complex4.ONE.abs();
      Complex complex6 = Complex.valueOf(423.83403);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.cosh();
      int int0 = 0;
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex1.multiply(0);
      Object object0 = complex6.INF.readResolve();
      double double0 = 0.0;
      try { 
        complex3.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 161.5991066;
      Complex complex1 = complex0.ONE.subtract(161.5991066);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.multiply((-1));
      try { 
        complex3.INF.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.tan();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.subtract((-97.707753104587));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex4.sqrt();
      Object object0 = complex4.INF.readResolve();
      List<Complex> list0 = complex1.nthRoot(791);
      Object object1 = complex1.readResolve();
      Complex complex6 = complex0.pow((-2784.59074102962));
      Complex complex7 = complex0.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(2.5041985511779785);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.reciprocal();
      double double0 = complex0.getImaginary();
      double double1 = complex1.abs();
      Complex complex4 = complex2.ONE.negate();
      Complex complex5 = complex4.I.atan();
      double double2 = complex0.ZERO.getArgument();
      Complex complex6 = complex1.ZERO.reciprocal();
      Complex complex7 = complex1.add(complex0);
      boolean boolean0 = complex7.equals(complex1);
      Complex complex8 = complex1.pow(complex2);
      Complex complex9 = complex8.subtract((-1.8382923511801317E183));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(157.6959081158, 1.198363039426718E-70);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.divide((-20.0));
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = Complex.valueOf(1.198363039426718E-70);
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex7.I.cosh();
      Complex complex10 = complex1.createComplex(1.198363039426718E-70, 6.283185307179586);
      Complex complex11 = complex6.negate();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex12.NaN.multiply((-20.0));
      Complex complex14 = complex4.NaN.divide(157.6959081158);
      Complex complex15 = complex14.negate();
      Complex complex16 = Complex.valueOf(157.6959081158);
      Complex complex17 = complex0.multiply(157.6959081158);
      Complex complex18 = Complex.valueOf(1088.7994038577149);
      Complex complex19 = complex6.cos();
      Complex complex20 = complex17.INF.reciprocal();
      String string0 = complex19.toString();
      Complex complex21 = complex19.exp();
      Complex complex22 = complex19.I.add(complex2);
      double double0 = complex21.I.getArgument();
      Complex complex23 = complex4.cosh();
      double double1 = complex17.abs();
      Complex complex24 = complex4.ONE.subtract((-20.0));
      Complex complex25 = complex19.subtract(complex21);
      Complex complex26 = complex23.reciprocal();
      Complex complex27 = complex25.atan();
      Complex complex28 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.NaN.add(0.0);
      Complex complex4 = complex3.INF.asin();
      String string0 = complex4.I.toString();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex4.INF.add(0.0);
      Complex complex7 = complex0.cos();
      double double0 = complex3.abs();
      Complex complex8 = complex2.I.sqrt();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex1.I.atan();
      Complex complex12 = complex10.I.sqrt1z();
      Complex complex13 = complex2.NaN.sin();
      Complex complex14 = complex13.ONE.cosh();
      Complex complex15 = complex1.pow(complex2);
      Complex complex16 = complex15.I.divide((-82.162));
      Complex complex17 = complex9.multiply(0.0);
      Complex complex18 = complex2.asin();
      Complex complex19 = Complex.INF;
      Complex complex20 = complex8.ZERO.tanh();
      Complex complex21 = Complex.valueOf(331.9);
      String string1 = complex21.INF.toString();
      Complex complex22 = complex17.I.divide(complex19);
      Complex complex23 = complex22.ZERO.asin();
      Complex complex24 = complex2.cos();
      Complex complex25 = complex17.sin();
      Complex complex26 = complex19.atan();
      ComplexField complexField0 = complex26.INF.getField();
      String string2 = complex7.toString();
      Complex complex27 = complex4.asin();
      Complex complex28 = complex8.cos();
      Complex complex29 = complex18.atan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.multiply(531);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1329.196, 1329.196);
      Complex complex1 = complex0.I.divide((-2296.981881));
      Complex complex2 = complex0.INF.asin();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex2.INF.multiply(2091);
      Object object0 = complex1.I.readResolve();
      int int1 = complex0.INF.hashCode();
      Complex complex4 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex4.add((-2296.981881));
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex5.pow(complex6);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.divide((double) 2091);
      Complex complex11 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.conjugate();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex2.I.sinh();
      Complex complex6 = complex0.pow(complex4);
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex4.ZERO.sqrt();
      Complex complex9 = complex2.ONE.conjugate();
      Complex complex10 = complex1.log();
      double double0 = complex6.getReal();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex1.ONE.multiply((-1667.8267));
      Complex complex13 = complex11.ONE.add(702.9839792706572);
      Complex complex14 = complex10.conjugate();
      Complex complex15 = complex14.I.negate();
      Complex complex16 = complex6.I.pow(Double.NaN);
      Complex complex17 = complex11.divide(Double.NaN);
      Complex complex18 = complex11.I.multiply(complex15);
      Complex complex19 = complex6.negate();
      Complex complex20 = complex2.atan();
      Object object0 = new Object();
      boolean boolean0 = complex13.equals(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.I.subtract((-1259.7748437731323));
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.pow(4447.41959);
      Complex complex4 = complex3.NaN.createComplex(4447.41959, (-20.847243868467));
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex4.isInfinite();
      double double1 = complex3.getArgument();
      List<Complex> list0 = complex0.nthRoot(725);
      Complex complex5 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1381.938762, 1381.938762);
      Complex complex1 = complex0.I.reciprocal();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.tanh();
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.I.multiply(complex2);
      Complex complex7 = complex5.ONE.conjugate();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex0.sqrt();
      Object object1 = complex9.INF.readResolve();
      Complex complex10 = complex6.divide(complex7);
      Complex complex11 = complex4.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.ONE.multiply(0);
      Complex complex5 = complex0.tan();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex6 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.pow((-39.60452132148));
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(160.7817780875185, 160.7817780875185);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = Complex.valueOf((-4735.801771291018), (-4.820065619207094E-9));
      double double0 = complex1.getArgument();
      Complex complex3 = new Complex((-4735.801771291018), (-4735.801771291018));
      Complex complex4 = complex0.subtract(160.7817780875185);
      Complex complex5 = complex0.subtract(complex4);
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex4.multiply((-4735.801771291018));
      Complex complex7 = complex1.ONE.log();
      Complex complex8 = complex5.INF.acos();
      Complex complex9 = complex1.NaN.multiply((-5287.349638));
      Complex complex10 = complex0.I.createComplex((-4.820065619207094E-9), 0.5027006054056248);
      Complex complex11 = complex3.sin();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex1.sqrt1z();
      double double1 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.createComplex(556.8333, 556.8333);
      Complex complex7 = complex5.ZERO.add(complex0);
      Complex complex8 = Complex.valueOf(556.8333);
      Complex complex9 = complex5.ZERO.tan();
      Complex complex10 = complex4.NaN.asin();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex1.multiply(complex11);
      Complex complex13 = complex4.negate();
      double double0 = complex0.getImaginary();
      Object object1 = complex1.readResolve();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex15.reciprocal();
      Complex complex17 = complex11.cosh();
      Complex complex18 = complex13.sin();
      Complex complex19 = complex0.sqrt1z();
  }
}
