/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:13:26 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.subtract((-4886.5139072537));
      String string0 = complex1.ZERO.toString();
      double double0 = complex0.INF.getArgument();
      ComplexField complexField1 = complex1.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf(0.0, (-4886.5139072537));
      Object object0 = complex2.ZERO.readResolve();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex7.NaN.subtract(complex2);
      Complex complex9 = complex6.NaN.sqrt();
      Complex complex10 = complex2.add(2972.858);
      Complex complex11 = complex4.asin();
      Complex complex12 = complex4.NaN.multiply(968);
      Complex complex13 = complex5.negate();
      Complex complex14 = complex4.sqrt1z();
      Complex complex15 = complex14.I.divide(complex10);
      Complex complex16 = complex14.INF.acos();
      Complex complex17 = complex3.asin();
      Object object1 = complex14.readResolve();
      ComplexField complexField2 = complex13.getField();
      Complex complex18 = complex5.divide(1703.2430615139976);
      Complex complex19 = complex18.add(complex13);
      Complex complex20 = complex14.pow(0.36426329612731934);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.I.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex4.ONE.negate();
      Complex complex10 = complex0.divide(2.5631381141873417E-132);
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex6.tan();
      boolean boolean0 = complex8.equals(complex3);
      Complex complex13 = complex10.add(complex11);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2627.397877, Double.NaN);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 597.228529088044;
      Complex complex0 = Complex.valueOf(597.228529088044);
      Complex complex1 = complex0.multiply(1401);
      Complex complex2 = Complex.valueOf(597.228529088044, (double) 1401);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.INF.multiply(Double.NaN);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.ONE.negate();
      Complex complex7 = complex0.tan();
      Object object0 = complex7.INF.readResolve();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex1.NaN.multiply(597.228529088044);
      Complex complex10 = Complex.valueOf(597.228529088044, 597.228529088044);
      try { 
        complex10.nthRoot((-3426));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,426
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex1.I.nthRoot(1148);
      Complex complex2 = complex0.divide((double) 1148);
      double double0 = complex1.abs();
      double double1 = complex1.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.exp();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 138.771518);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.asin();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.NaN.multiply(138.771518);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex4.INF.reciprocal();
      boolean boolean1 = complex1.isInfinite();
      Complex complex6 = complex1.subtract(267.98);
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex6.NaN.divide(267.98);
      Complex complex9 = Complex.valueOf(1254.91579992574);
      Complex complex10 = complex9.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.008333333333329196);
      Complex complex1 = complex0.conjugate();
      double double0 = (-1166.6);
      Complex complex2 = complex1.subtract((-1166.6));
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex3.divide((-1166.6));
      Complex complex7 = Complex.valueOf((-1166.6), 0.008333333333329196);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex8.I.asin();
      double double1 = complex10.INF.getArgument();
      Complex complex12 = complex10.acos();
      try { 
        complex2.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex3.ZERO.add(complex0);
      try { 
        complex3.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.73931840013), (-1945.73931840013));
      Complex complex1 = Complex.I;
      String string0 = complex1.NaN.toString();
      String string1 = complex0.INF.toString();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.INF.cosh();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.INF.createComplex((-1945.73931840013), (-1945.73931840013));
      Complex complex6 = complex4.ZERO.sin();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex6.ZERO.add((-1945.73931840013));
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = Complex.valueOf((-1945.73931840013));
      Complex complex11 = complex9.NaN.cosh();
      Complex complex12 = complex4.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex13 = complex9.negate();
      boolean boolean1 = complex13.equals(complex8);
      Complex complex14 = complex2.tan();
      Complex complex15 = complex9.sin();
      Complex complex16 = complex12.createComplex(0.0, 0.7853981633974483);
      Complex complex17 = complex16.conjugate();
      Complex complex18 = complex2.conjugate();
      double double1 = complex16.abs();
      Complex complex19 = complex0.tan();
      Complex complex20 = complex19.ZERO.conjugate();
      Complex complex21 = complex4.tanh();
      int int0 = complex21.hashCode();
      Complex complex22 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.165958325782564E70, 6.165958325782564E70);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.NaN.multiply((-1));
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.asin();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.NaN.exp();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = Complex.ZERO;
      boolean boolean1 = complex0.equals(complex5);
      Complex complex6 = complex1.tanh();
      String string0 = complex5.toString();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.subtract(complex4);
      Complex complex9 = complex0.negate();
      Complex complex10 = Complex.valueOf((double) (-1), (double) (-1));
      Complex complex11 = complex10.NaN.multiply((double) (-1));
      Complex complex12 = complex5.sin();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex4.subtract((double) (-1));
      Complex complex15 = complex7.sin();
      Complex complex16 = Complex.valueOf((double) (-1), (double) (-1));
      Complex complex17 = complex1.ZERO.log();
      Complex complex18 = complex17.I.negate();
      Complex complex19 = complex7.reciprocal();
      Complex complex20 = complex14.tan();
      Complex complex21 = complex20.ONE.multiply(37);
      int int0 = complex0.hashCode();
      Complex complex22 = complex1.divide((-1.0));
      boolean boolean2 = complex22.isInfinite();
      Complex complex23 = complex12.reciprocal();
      Complex complex24 = complex22.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      List<Complex> list0 = complex0.ZERO.nthRoot(347);
      Complex complex2 = complex1.ONE.subtract(0.0);
      String string0 = complex1.toString();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1281.2245191062), 0.0);
      Complex complex1 = complex0.add((-2.0406580894051073E243));
      String string0 = complex1.toString();
      Complex complex2 = complex0.ZERO.createComplex((-1281.2245191062), (-1281.2245191062));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ZERO.sinh();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.subtract(complex3);
      Complex complex7 = complex6.NaN.add(0.595784068107605);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex8.INF.divide(complex7);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = complex4.pow(0.0);
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex4.add(0.0);
      Complex complex14 = complex11.INF.multiply(complex6);
      Complex complex15 = complex14.I.sqrt1z();
      Object object0 = complex14.INF.readResolve();
      Complex complex16 = complex1.multiply(0.0);
      Complex complex17 = complex9.INF.negate();
      double double0 = complex16.I.getArgument();
      Complex complex18 = complex1.tan();
      Complex complex19 = complex18.INF.acos();
      boolean boolean1 = complex4.equals(complex3);
      Complex complex20 = complex18.exp();
      Complex complex21 = complex9.sqrt1z();
      Complex complex22 = complex14.multiply(1107);
      Complex complex23 = complex4.subtract(complex20);
      int int0 = complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add(3.9205810725333715E-8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-421.46001));
      Complex complex1 = complex0.ONE.multiply((-1.0));
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply((-4157.472599605));
      Complex complex4 = complex3.subtract((-421.46001));
      Complex complex5 = Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(381.4244685558304);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-92.63593), (-3393.085650903));
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.sinh();
      ComplexField complexField1 = complex1.INF.getField();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.INF.pow((-92.63593));
      Complex complex5 = complex0.I.pow((-3393.085650903));
      Complex complex6 = complex0.atan();
      double double0 = complex6.I.abs();
      Complex complex7 = complex6.I.sin();
      double double1 = complex6.getImaginary();
      boolean boolean0 = complex2.isNaN();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex0.sqrt1z();
      ComplexField complexField2 = complex8.ZERO.getField();
      boolean boolean1 = complex6.equals(complex3);
      Complex complex10 = complex0.asin();
      Complex complex11 = Complex.valueOf((-2.9449749322254745E-4), 3434.94497284);
      Complex complex12 = complex10.NaN.sqrt();
      String string0 = complex8.toString();
      Complex complex13 = complex10.atan();
      boolean boolean2 = complex5.isNaN();
      Complex complex14 = Complex.valueOf((-2.9449749322254745E-4), (-92.63593));
      boolean boolean3 = complex3.isInfinite();
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.31845372915267944, 2190.0876);
      Complex complex1 = complex0.multiply(2190.0876);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.ONE.reciprocal();
      Complex complex6 = complex4.ZERO.tanh();
      double double0 = complex3.getReal();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex7.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.I.add(856.26);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.createComplex(856.26, 856.26);
      Complex complex5 = complex0.multiply((-3490));
      double double0 = complex5.getArgument();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.INF.add(complex5);
      Complex complex8 = complex2.ZERO.multiply(complex6);
      Complex complex9 = complex0.sinh();
      Complex complex10 = Complex.valueOf(856.26, (double) (-3490));
      Complex complex11 = complex10.NaN.multiply((-3490));
      boolean boolean0 = complex0.isInfinite();
      Complex complex12 = complex2.cosh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex13 = complex11.add(complex9);
      double double1 = complex0.abs();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex10.NaN.conjugate();
      Complex complex16 = complex14.ONE.sqrt1z();
      Complex complex17 = complex14.tanh();
      Complex complex18 = complex17.I.add(2.029955237703202E229);
      Complex complex19 = complex17.I.sinh();
      Complex complex20 = complex4.cosh();
      double double2 = complex2.abs();
      Complex complex21 = complex7.pow(complex13);
      Complex complex22 = complex6.add(complex7);
      ComplexField complexField1 = complex13.getField();
      int int0 = complex20.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 536;
      Complex complex1 = complex0.multiply(536);
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex0.add((double) 536);
      Complex complex8 = Complex.valueOf((double) 536);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex7.INF.multiply(complex6);
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex8.NaN.add(complex12);
      String string0 = complex2.ONE.toString();
      Complex complex14 = complex6.subtract((double) 536);
      Complex complex15 = complex14.NaN.acos();
      int int1 = complex15.I.hashCode();
      Complex complex16 = complex14.negate();
      Complex complex17 = complex12.cos();
      try { 
        complex17.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 20.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.createComplex(20.0, (-2171.98663));
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = Complex.valueOf(20.0, (-1.8382923511801317E183));
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = Complex.valueOf(1.6207547225168393, (-1.0));
      Complex complex8 = complex7.multiply(1689.0);
      Complex complex9 = complex2.acos();
      Complex complex10 = complex1.cos();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex4.pow(complex11);
      Complex complex13 = complex4.multiply(complex1);
      boolean boolean0 = complex10.equals(complex9);
      Complex complex14 = complex6.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.sinh();
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(560.98, (-2294.61498590911));
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.reciprocal();
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex3.pow(560.98);
      double double0 = complex3.ZERO.abs();
      Complex complex5 = complex0.divide(1259.5317027904);
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex3.subtract(complex4);
      Complex complex9 = complex5.add(complex1);
      Complex complex10 = complex1.I.multiply(3315.13799);
      double double1 = complex0.getImaginary();
      Complex complex11 = complex4.divide(complex9);
      Complex complex12 = complex11.INF.reciprocal();
      Complex complex13 = complex0.atan();
      Complex complex14 = complex6.acos();
      Complex complex15 = complex14.NaN.negate();
      Complex complex16 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1683.61051461422);
      Complex complex1 = Complex.valueOf(1683.61051461422, 2.1628672925745152E-105);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex1.asin();
      List<Complex> list0 = complex5.INF.nthRoot(531);
      Complex complex6 = complex5.pow(complex0);
      double double0 = complex0.getImaginary();
      double double1 = complex2.abs();
      Complex complex7 = complex1.ONE.sqrt();
      Complex complex8 = complex1.ONE.createComplex(1683.61051461422, 1683.61051461422);
      double double2 = complex2.getImaginary();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex5.add(0.0);
      Complex complex11 = complex6.add(complex0);
      Complex complex12 = complex10.sin();
      Complex complex13 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(342.599951511);
      Complex complex1 = complex0.multiply(342.599951511);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.INF.tanh();
      String string0 = complex4.I.toString();
      Complex complex5 = complex0.log();
      String string1 = complex4.toString();
      Complex complex6 = Complex.valueOf(1777.3052067467);
      Complex complex7 = complex5.multiply(complex2);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex8 = complex4.multiply(1);
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.multiply(1);
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex6.I.exp();
      Complex complex9 = complex7.I.multiply(2590);
      Complex complex10 = complex9.ONE.multiply((-1640));
      Complex complex11 = complex6.ONE.pow(Double.NaN);
      Complex complex12 = complex2.multiply(complex6);
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex5.NaN.exp();
      Complex complex15 = complex0.cos();
      Complex complex16 = complex15.ZERO.sqrt1z();
      Complex complex17 = complex15.ZERO.multiply(complex6);
      ComplexField complexField0 = complex15.INF.getField();
      double double0 = complex5.getReal();
      Complex complex18 = Complex.valueOf(135.39822887989, Double.NaN);
      Complex complex19 = complex4.sqrt1z();
      Complex complex20 = complex1.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex21 = complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.conjugate();
      Object object0 = complex1.readResolve();
      try { 
        complex0.nthRoot((-2246));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,246
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.add((-1.0));
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1789.0);
      Complex complex1 = complex0.ZERO.pow(1665.2863);
      Complex complex2 = complex1.pow(2870.3459519888);
      Complex complex3 = complex0.tan();
      Object object0 = complex3.ZERO.readResolve();
      String string0 = complex3.ONE.toString();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex1.pow(complex0);
      double double0 = complex3.getArgument();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.valueOf(1.2118105325725891E-113);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.exp();
      double double0 = complex2.I.abs();
      Complex complex3 = complex1.multiply(1069);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.I.multiply((double) 1069);
      Complex complex6 = complex4.pow(complex3);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.INF.multiply(complex0);
      Complex complex9 = complex0.divide(complex2);
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex0.pow(complex2);
      Complex complex12 = complex2.tanh();
      Complex complex13 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(2.6527209281921387, (-20.0));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = complex3.ONE.pow(2.6527209281921387);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.multiply(complex0);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex9.ONE.tanh();
      Object object0 = complex11.INF.readResolve();
      Complex complex13 = complex1.subtract(0.0);
      Object object1 = complex10.readResolve();
      Complex complex14 = complex3.multiply(1.401987075805664);
      String string0 = complex6.toString();
      Complex complex15 = complex10.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.ONE.multiply(4033);
      Complex complex4 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.sqrt1z();
      boolean boolean0 = complex1.equals((Object) null);
      boolean boolean1 = complex4.isInfinite();
      Complex complex6 = complex4.conjugate();
      double double1 = complex4.getArgument();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.subtract(complex7);
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = Complex.valueOf(Double.NaN, (-1.5821896727910552E-8));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1256.718066696453), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = new Complex((-3799.8), (-3799.8));
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex5.log();
      Complex complex9 = complex4.createComplex((-1.900947109027913E-7), 1094.2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1261.92385577));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.ONE.divide(complex2);
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = Complex.valueOf((-1261.92385577), (-712.267));
      double double0 = complex7.getReal();
      Complex complex10 = complex2.negate();
      Complex complex11 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(2251.9017631, 179.582719);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex0.subtract((-2.6183651590639875E-8));
      Complex complex4 = complex3.divide((-2.6183651590639875E-8));
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.createComplex((-1139.0101), (-1139.0101));
      Complex complex3 = complex1.I.sqrt();
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex1.multiply(2900);
      Complex complex5 = complex4.createComplex((-1139.0101), 2959.9046068492976);
      Complex complex6 = complex1.createComplex(0.0, 0.0);
      List<Complex> list0 = complex6.NaN.nthRoot(2900);
      Complex complex7 = complex0.multiply((double) 2900);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2021.0, 0.0);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.multiply(0);
      int int0 = complex1.I.hashCode();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.ONE.negate();
      double double0 = complex4.INF.abs();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.multiply(complex3);
      Complex complex8 = complex3.ONE.sin();
      ComplexField complexField0 = complex7.I.getField();
      String string0 = complex3.INF.toString();
      Complex complex9 = complex1.ZERO.subtract(complex0);
      Complex complex10 = Complex.valueOf(2021.0);
      Complex complex11 = complex1.subtract(complex3);
      Complex complex12 = complex5.exp();
      Complex complex13 = complex12.ZERO.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex6.acos();
      Complex complex16 = complex15.acos();
      Complex complex17 = complex16.NaN.atan();
      Complex complex18 = complex17.ONE.sin();
      Complex complex19 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex20 = complex0.sqrt();
      Complex complex21 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex((-757.931313), (-1.0235056525096769E156));
      Complex complex2 = Complex.valueOf((-757.931313));
      Complex complex3 = complex2.I.add(823.351);
      Complex complex4 = complex0.ONE.multiply(complex2);
      double double0 = complex0.abs();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(1.2133188247680664, 2628.0696371695003);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      int int0 = complex2.hashCode();
      Complex complex3 = complex1.createComplex(2628.0696371695003, 1.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(116.4214227214599, (-256.8821615414997));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = Complex.valueOf((-256.8821615414997), (-2208.06));
      double double0 = complex3.INF.abs();
      Complex complex5 = complex0.I.atan();
      Complex complex6 = complex0.INF.divide(complex1);
      String string0 = complex0.ONE.toString();
      Complex complex7 = complex0.divide(116.4214227214599);
      Complex complex8 = complex1.multiply(complex6);
      Complex complex9 = complex7.multiply(complex5);
      Complex complex10 = complex9.NaN.divide((-256.8821615414997));
      boolean boolean0 = complex7.isNaN();
      double double1 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-167.092468));
      Complex complex1 = Complex.valueOf((-167.092468), (-167.092468));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.reciprocal();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = Complex.valueOf((-3215.297034015918));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(354.02169);
      Complex complex1 = Complex.valueOf((-2556.0));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.INF.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.pow(complex0);
      Complex complex6 = complex4.sinh();
      Object object0 = complex4.ONE.readResolve();
      Complex complex7 = complex4.INF.exp();
      Complex complex8 = complex4.tanh();
      double double0 = complex6.getImaginary();
      Complex complex9 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.createComplex(1602.3121, 1602.3121);
      Complex complex4 = complex2.NaN.divide(0.0);
      Complex complex5 = Complex.valueOf(721.99);
      Complex complex6 = complex0.negate();
      double double0 = complex0.abs();
      boolean boolean0 = complex2.isInfinite();
      Complex complex7 = complex3.createComplex(1.0, 721.99);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = complex0.multiply(1602.3121);
      Complex complex11 = complex10.NaN.add(complex2);
      Complex complex12 = Complex.valueOf(1602.3121, 0.0);
      Complex complex13 = complex3.reciprocal();
      Complex complex14 = complex5.reciprocal();
      Complex complex15 = complex4.subtract(0.0);
      double double1 = complex3.getImaginary();
      int int0 = complex5.hashCode();
      Complex complex16 = complex9.sqrt1z();
      Complex complex17 = complex16.I.exp();
      Complex complex18 = complex1.NaN.tan();
      Complex complex19 = complex5.subtract(complex2);
      Complex complex20 = complex5.reciprocal();
      Complex complex21 = complex4.tan();
      Complex complex22 = complex21.NaN.subtract(721.99);
      Complex complex23 = complex17.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex24 = complex15.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 3407.10930877);
      Complex complex2 = complex0.I.add(complex1);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex3 = complex2.ZERO.multiply(3407.10930877);
      Complex complex4 = complex0.subtract(485.0);
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex0.add(complex4);
      List<Complex> list0 = complex5.ONE.nthRoot(431);
      boolean boolean0 = complex0.equals(complex4);
      boolean boolean1 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(380.3661);
      Complex complex2 = complex0.divide(1086.839);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.ZERO.cosh();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex0.asin();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex4.getArgument();
      Complex complex6 = complex1.multiply(2746);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex1.I.log();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex7.conjugate();
      ComplexField complexField0 = complex6.getField();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = Complex.valueOf(1121.414841815);
      Complex complex11 = Complex.valueOf(Double.NaN, 2202.76052368179);
      Complex complex12 = complex5.log();
      Complex complex13 = complex5.tan();
      Object object0 = complex12.readResolve();
      Complex complex14 = complex13.createComplex(Double.NaN, Double.NaN);
      Complex complex15 = complex13.divide(complex2);
      Complex complex16 = complex0.multiply(complex1);
      Complex complex17 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.28963327407836914);
      Complex complex2 = complex0.ZERO.subtract(0.0);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex4.ZERO.pow(complex1);
      Complex complex7 = complex1.NaN.atan();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex0.NaN.sinh();
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex1.divide(0.0);
      double double1 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.multiply((-3896.720128));
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.INF.reciprocal();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.sqrt();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.valueOf(1062.2000663973772);
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex4.I.multiply((-2625.202388));
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex4.INF.sinh();
      Complex complex9 = complex7.exp();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex4.sin();
      Complex complex12 = complex11.NaN.multiply(complex8);
      Complex complex13 = complex10.pow(complex4);
      ComplexField complexField0 = complex0.getField();
      Complex complex14 = complex3.acos();
      Complex complex15 = Complex.valueOf((-1115.2191445061976), 0.0);
      Complex complex16 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-4761.37983611), (-4761.37983611));
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex0.multiply(489);
      Complex complex4 = Complex.INF;
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = complex3.multiply(210);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.ONE.cos();
      String string0 = complex0.toString();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.cosh();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex3.NaN.multiply(0.0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.divide((-2663.570549194));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1660.25297, 1660.25297);
      Complex complex1 = new Complex(1660.25297);
      Complex complex2 = complex0.add(complex1);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex2.pow(1660.25297);
      Complex complex4 = complex2.multiply(630);
      Complex complex5 = complex4.INF.subtract(1660.25297);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.ONE.pow(complex2);
      Complex complex9 = complex8.ZERO.exp();
      Complex complex10 = complex8.INF.negate();
      Complex complex11 = complex2.INF.tan();
      Complex complex12 = complex10.NaN.reciprocal();
      String string0 = complex1.toString();
      Complex complex13 = complex6.pow(complex3);
      Complex complex14 = complex7.subtract(complex6);
      Complex complex15 = complex1.tanh();
      Complex complex16 = complex6.log();
      Complex complex17 = complex4.divide(0.0);
      Complex complex18 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2644.93125648403));
      Complex complex1 = complex0.ZERO.log();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.add(967.81836132);
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1309.90713677);
      Complex complex1 = complex0.exp();
      double double0 = complex0.I.abs();
      Complex complex2 = complex0.sin();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex2.INF.add(1309.90713677);
      Complex complex4 = complex2.subtract(608.8);
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply((-3410));
      int int0 = complex2.hashCode();
      Complex complex3 = Complex.valueOf(0.0, (double) (-3410));
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3888561478632076E-8);
      Complex complex1 = complex0.ONE.multiply(8);
      Complex complex2 = complex0.reciprocal();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex1.ONE.add(complex3);
      Complex complex5 = complex4.INF.createComplex(0.0, (-1635.05606));
      Complex complex6 = complex2.NaN.divide(2064.859991);
      Object object0 = complex2.NaN.readResolve();
      Complex complex7 = complex0.cosh();
      double double0 = complex7.getImaginary();
      Complex complex8 = complex1.subtract(complex2);
      Complex complex9 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(2758.95, 2758.95);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.negate();
      String string0 = complex0.toString();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2877));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1050.5409556036);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.INF.subtract(20.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex2.ONE.divide(20.0);
      int int0 = (-3158);
      try { 
        complex0.nthRoot((-3158));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,158
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-766.353), (-766.353));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.multiply((-766.353));
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.NaN.asin();
      String string0 = complex0.toString();
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex3.NaN.pow(0.0);
      double double0 = complex4.abs();
      Complex complex5 = complex0.acos();
      double double1 = complex5.getArgument();
      Complex complex6 = complex5.ZERO.cosh();
      String string1 = complex5.toString();
      Complex complex7 = complex5.sqrt1z();
      double double2 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(757.91823385935);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.multiply(1279.1634);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.I.asin();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-426.06614), (-2.0197142620980974E-8));
      Complex complex1 = complex0.multiply(1010);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.INF.tanh();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.ZERO.sinh();
      Object object1 = complex0.readResolve();
      Complex complex3 = complex1.NaN.divide((-1536.0437));
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex2.divide(0.0);
      Complex complex6 = complex5.ZERO.pow((-403.2123057642176));
      try { 
        complex0.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.tanh();
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex2.isNaN();
      Object object1 = complex4.readResolve();
      Complex complex5 = Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = complex2.NaN.createComplex((-1900.2349766673), 0.0);
      Complex complex6 = complex1.NaN.add((-1900.2349766673));
      Complex complex7 = Complex.valueOf((-1900.2349766673));
      Complex complex8 = complex1.subtract((-1900.2349766673));
      Complex complex9 = complex8.ZERO.add(complex0);
      boolean boolean0 = complex2.isInfinite();
      double double0 = complex0.getArgument();
      Complex complex10 = Complex.valueOf((-5187.042799152633));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2130.501552028479, 2130.501552028479);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.ZERO.subtract(Double.NaN);
      Complex complex4 = complex0.sinh();
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.ONE.negate();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sin();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2289.4096482709, (-597.46052));
      try { 
        complex0.nthRoot((-1297));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,297
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-145.28539914), (-145.28539914));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.divide((-145.28539914));
      Complex complex5 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.ZERO.subtract(complex0);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex2.add(complex4);
      Complex complex10 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(1151.264838979491, 0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = new Complex((-1452.16839657108));
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex2.I.exp();
      Complex complex6 = complex1.divide(1861.843857852539);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.NaN.nthRoot(1314);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.multiply(1701.811699556);
      Complex complex4 = complex2.asin();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(0.0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(23.378758119082903);
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-387.1936586261), (-387.1936586261));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.divide((-2024.2));
      Complex complex3 = new Complex((-2024.2));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = Complex.valueOf((-2024.2));
      Complex complex6 = complex5.ZERO.multiply(1356);
      Complex complex7 = complex6.I.subtract(0.0);
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.NaN.pow((-6.564672913105876E-8));
      Complex complex4 = complex1.ONE.subtract((-6.564672913105876E-8));
      Complex complex5 = complex0.ONE.cosh();
      int int0 = complex0.ONE.hashCode();
      int int1 = complex5.I.hashCode();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = Complex.valueOf((-6.564672913105876E-8), (-6.564672913105876E-8));
      Complex complex8 = complex1.ZERO.acos();
      Complex complex9 = complex0.NaN.divide(complex5);
      Complex complex10 = complex1.subtract((-6.564672913105876E-8));
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = Complex.valueOf((-6.564672913105876E-8), 0.0);
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex13.ONE.tanh();
      Complex complex15 = complex13.tanh();
      Complex complex16 = Complex.valueOf(6.283185307179586);
      Complex complex17 = complex15.sqrt();
      Complex complex18 = complex5.negate();
      Complex complex19 = complex18.NaN.add(complex0);
      Complex complex20 = complex18.tan();
      Complex complex21 = complex9.sin();
      Complex complex22 = complex6.cosh();
      Complex complex23 = complex22.I.subtract(0.0);
      Complex complex24 = complex16.cosh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.INF.negate();
      String string0 = complex0.I.toString();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.createComplex((-2308.56747), (-1165.81162));
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.asin();
      double double0 = complex0.INF.abs();
      String string1 = complex0.toString();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex6.multiply(0.0);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex4.add(complex8);
      Complex complex10 = complex9.ZERO.subtract(0.0);
      Complex complex11 = complex3.asin();
      ComplexField complexField1 = complex4.getField();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 565.3676963513444);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.exp();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.pow(2.0);
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex5.ONE.pow(complex4);
      Complex complex7 = complex5.ZERO.tan();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex5.ONE.sqrt();
      Complex complex10 = complex4.INF.add(565.3676963513444);
      Complex complex11 = complex4.pow(2.0);
      Object object1 = complex11.ZERO.readResolve();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex12 = complex0.log();
      List<Complex> list0 = complex0.nthRoot(13);
      Complex complex13 = complex0.divide(20.0);
      Complex complex14 = complex1.multiply(13);
      double double0 = complex0.abs();
      int int1 = complex1.hashCode();
      Complex complex15 = Complex.valueOf(0.6639155149459839, 1.999240777687192E-8);
      Complex complex16 = complex15.pow((double) 13);
      ComplexField complexField0 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.negate();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.I.pow(0.0);
      double double0 = complex7.I.abs();
      double double1 = complex6.abs();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.NaN.asin();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex11.INF.cosh();
      Complex complex13 = complex12.INF.createComplex(1813.946, 9.29173407843235E-166);
      Complex complex14 = complex0.pow(complex10);
      Complex complex15 = complex1.add(complex14);
      Complex complex16 = complex11.conjugate();
      Complex complex17 = complex16.conjugate();
      Complex complex18 = complex17.ONE.log();
      Complex complex19 = complex0.asin();
      Complex complex20 = complex10.reciprocal();
      Complex complex21 = complex20.add(805.92254);
      boolean boolean0 = complex0.isNaN();
      Complex complex22 = complex16.cosh();
      Complex complex23 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.NaN.pow((-3900.02));
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ONE.subtract(complex0);
      Complex complex8 = Complex.valueOf(0.0);
      Object object0 = complex8.ZERO.readResolve();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.INF.multiply(206);
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf((double) 206, 2558.929);
      double double0 = complex3.abs();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.NaN.multiply(complex6);
      Complex complex9 = complex5.NaN.sinh();
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex7.NaN.conjugate();
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex3.subtract(complex5);
      Complex complex14 = complex13.ONE.sinh();
      Complex complex15 = complex14.tan();
      Complex complex16 = complex0.exp();
      Object object0 = complex15.readResolve();
      Complex complex17 = complex14.ONE.asin();
      Complex complex18 = complex17.divide(complex3);
      ComplexField complexField0 = complex4.getField();
      Complex complex19 = complex13.sqrt();
      Complex complex20 = complex5.multiply(complex19);
      Complex complex21 = Complex.ZERO;
      Complex complex22 = complex15.divide(complex21);
      Complex complex23 = complex13.acos();
      Complex complex24 = complex6.cos();
      double double1 = complex18.getArgument();
      Complex complex25 = complex19.negate();
      Complex complex26 = complex3.multiply(complex16);
      boolean boolean0 = complex6.equals(complex14);
      Complex complex27 = Complex.valueOf(0.0, (double) 206);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Object object1 = complex1.NaN.readResolve();
      ComplexField complexField0 = complex2.ONE.getField();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.add((-183.596117));
      double double0 = complex2.abs();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex2.NaN.log();
      Complex complex6 = complex0.subtract((-3423.963117365946));
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex7.ZERO.tanh();
      Complex complex10 = complex1.divide(0.0);
      int int0 = complex10.INF.hashCode();
      Complex complex11 = complex1.subtract(complex6);
      boolean boolean1 = complex7.isNaN();
      double double1 = complex1.getImaginary();
      Complex complex12 = Complex.valueOf(0.0, (-6.663542893624021E-14));
      Complex complex13 = complex7.conjugate();
      Complex complex14 = complex9.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply((-1951));
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.divide(complex0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.cos();
      Complex complex8 = Complex.valueOf((double) (-1951));
      double double0 = complex7.getArgument();
      boolean boolean0 = complex6.isInfinite();
      Complex complex9 = complex5.multiply(complex6);
      Complex complex10 = complex7.acos();
      Complex complex11 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3348.0));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.pow(complex0);
      Complex complex6 = complex5.ONE.log();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex8.INF.divide(complex7);
      Complex complex10 = complex7.NaN.log();
      double double0 = complex7.I.getArgument();
      Complex complex11 = complex10.INF.add(1.5707963267948966);
      Complex complex12 = complex0.asin();
      Complex complex13 = complex10.INF.atan();
      Complex complex14 = complex12.I.cosh();
      double double1 = complex14.ONE.abs();
      double double2 = complex10.I.getArgument();
      Complex complex15 = complex12.acos();
      Object object0 = complex12.I.readResolve();
      Object object1 = complex8.NaN.readResolve();
      Complex complex16 = complex12.createComplex(2156.04160026812, 1.5707963267948966);
      List<Complex> list0 = complex8.nthRoot(1835);
      int int0 = complex10.hashCode();
      Complex complex17 = complex12.conjugate();
      Complex complex18 = complex4.subtract(complex0);
      Complex complex19 = complex3.createComplex(1.5707963267948966, 5.924290380648597E-224);
      Complex complex20 = complex6.cosh();
      Complex complex21 = complex11.pow(5.924290380648597E-224);
      Complex complex22 = Complex.valueOf(5.924290380648597E-224);
  }
}
