/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:23:49 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.NaN.divide(Double.NaN);
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = complex9.NaN.log();
      int int0 = 0;
      Complex complex12 = complex0.INF.sqrt();
      Complex complex13 = complex0.NaN.exp();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.INF.multiply(2671);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.sin();
      double double0 = 2954.9334724;
      Complex complex7 = complex3.pow(2.0);
      Complex complex8 = complex2.pow(2954.9334724);
      // Undeclared exception!
      complex3.nthRoot(567792967);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.subtract(1119.773962);
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex3.INF.tan();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex3.pow(0.0);
      Complex complex10 = complex9.NaN.reciprocal();
      Complex complex11 = complex9.atan();
      double double0 = complex0.getReal();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex12.ZERO.asin();
      Complex complex14 = complex5.asin();
      Complex complex15 = complex14.NaN.tan();
      int int0 = complex7.ZERO.hashCode();
      Complex complex16 = complex14.exp();
      Complex complex17 = complex1.pow(complex5);
      double double1 = complex17.I.getArgument();
      Complex complex18 = complex10.atan();
      Complex complex19 = complex0.cosh();
      Complex complex20 = complex7.add(complex13);
      Complex complex21 = complex1.cos();
      Complex complex22 = complex20.divide(complex7);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-7.956144278281947E-8);
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-7.956144278281947E-8));
      Complex complex1 = complex0.I.subtract(3100.7515014316814);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex5.createComplex((-7.956144278281947E-8), (-3636.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1887.62001, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.INF.add((-1.0));
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.ONE.multiply(98);
      Complex complex8 = complex6.add((-1.915204563140137E-9));
      Complex complex9 = complex5.ONE.sinh();
      Complex complex10 = complex9.ONE.subtract(complex5);
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex5.divide(complex2);
      Complex complex12 = Complex.valueOf(1.0);
      Complex complex13 = complex5.subtract(1.0);
      Complex complex14 = complex5.tan();
      Complex complex15 = complex10.conjugate();
      Complex complex16 = complex6.multiply(98);
      Complex complex17 = complex6.multiply((-1488.5399549));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      String string0 = complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-1.0), (-1.0));
      Complex complex2 = complex1.createComplex((-1.0), 384.0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.NaN.createComplex((-1.0), 168.9474476867);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.INF.asin();
      Complex complex7 = complex3.NaN.atan();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex8 = complex0.tan();
      Object object0 = complex7.readResolve();
      Complex complex9 = complex4.ONE.sqrt1z();
      double double0 = complex1.getImaginary();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex8.tanh();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex7.sin();
      Complex complex16 = complex2.cosh();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      Complex complex1 = null;
      double double2 = 0.0;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1501.7165, 1501.7165);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.pow(complex1);
      double double1 = complex3.ZERO.getArgument();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex1.divide(Double.NaN);
      ComplexField complexField0 = complex7.getField();
      List<Complex> list0 = complex0.nthRoot(319);
      String string0 = complex1.toString();
      Complex complex8 = complex3.subtract(0.0);
      Object object0 = complex4.readResolve();
      Complex complex9 = complex4.add((double) 319);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.INF.multiply(Double.NaN);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.ONE.log();
      double double0 = complex2.I.abs();
      Object object0 = complex2.INF.readResolve();
      double double1 = 0.0;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      double double0 = complex0.getImaginary();
      int int0 = complex3.hashCode();
      Complex complex4 = complex1.add(Double.NaN);
      Complex complex5 = complex0.atan();
      int int1 = complex5.hashCode();
      double double1 = complex4.getReal();
      Complex complex6 = complex1.pow(Double.NaN);
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.createComplex(0.0, (-1749.4519338287));
      Complex complex2 = complex0.ONE.divide((-173.5268167503));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = complex3.ONE.multiply(complex0);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ONE.log();
      ComplexField complexField0 = complex6.I.getField();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.divide(complex8);
      double double0 = complex2.getArgument();
      Complex complex11 = Complex.valueOf((-3.141592653589793), 0.0);
      Complex complex12 = complex4.subtract(complex5);
      double double1 = complex12.I.abs();
      ComplexField complexField1 = complex8.getField();
      Complex complex13 = complex8.negate();
      Complex complex14 = complex6.divide((-5.36108186384227E-9));
      Complex complex15 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2821.337508));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1419.0));
      Complex complex1 = complex0.multiply(2935);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex2.NaN.subtract(complex4);
      Complex complex7 = Complex.valueOf(6.283185307179586, 1798.34483);
      Complex complex8 = complex6.NaN.cos();
      Complex complex9 = complex2.INF.sqrt1z();
      Complex complex10 = complex5.ONE.atan();
      Complex complex11 = complex3.INF.sqrt1z();
      Complex complex12 = complex0.log();
      Complex complex13 = complex11.INF.log();
      Complex complex14 = complex12.I.conjugate();
      Complex complex15 = complex5.ZERO.atan();
      Complex complex16 = complex12.ONE.pow((-1518.983369979));
      String string0 = complex3.toString();
      Complex complex17 = complex1.sinh();
      Complex complex18 = complex1.tanh();
      Complex complex19 = complex11.multiply(2935);
      Complex complex20 = complex19.NaN.acos();
      Complex complex21 = complex18.pow((-1518.983369979));
      Complex complex22 = complex0.add(complex17);
      boolean boolean0 = complex3.equals(complex5);
      Complex complex23 = complex18.tanh();
      Complex complex24 = complex4.divide((-1419.0));
      Complex complex25 = complex21.cosh();
      Complex complex26 = complex21.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1552.9925067232), 0.0);
      Complex complex1 = complex0.cos();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.subtract(0.0);
      double double0 = complex2.abs();
      double double1 = complex2.abs();
      Complex complex3 = complex1.createComplex(0.0, (-2786.13587847));
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = Complex.valueOf((-1552.9925067232), (-1552.9925067232));
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex0.tanh();
      String string0 = complex6.INF.toString();
      Complex complex8 = complex7.I.pow((-2786.13587847));
      Complex complex9 = complex8.NaN.pow(complex6);
      Complex complex10 = complex8.ZERO.log();
      Complex complex11 = complex7.pow(complex3);
      Complex complex12 = complex3.add(complex11);
      boolean boolean0 = complex8.isInfinite();
      boolean boolean1 = complex11.isInfinite();
      Object object1 = complex0.readResolve();
      Complex complex13 = complex1.add(complex11);
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.I.atan();
      List<Complex> list0 = complex1.I.nthRoot(990);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.sinh();
      double double1 = complex4.ZERO.getArgument();
      double double2 = complex6.INF.abs();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.INF.subtract(complex4);
      Complex complex10 = complex1.subtract((double) 990);
      Complex complex11 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2286.6, 2286.6);
      Complex complex1 = new Complex(2286.6, 6.283185307179586);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.multiply(2286.6);
      String string0 = complex1.toString();
      Complex complex5 = complex2.multiply(complex3);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624879837036133));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = new Complex(1285.9, 1285.9);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex3.ONE.subtract(complex1);
      double double0 = complex1.getImaginary();
      Complex complex7 = complex2.log();
      Complex complex8 = complex3.conjugate();
      int int1 = complex0.ONE.hashCode();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex8.INF.atan();
      int int2 = complex11.I.hashCode();
      Complex complex12 = complex1.cosh();
      double double1 = complex8.abs();
      boolean boolean0 = complex12.isInfinite();
      double double2 = complex4.getImaginary();
      boolean boolean1 = complex5.isInfinite();
      Complex complex13 = complex12.INF.subtract((-1285.9));
      int int3 = complex12.hashCode();
      Complex complex14 = complex12.cosh();
      Complex complex15 = complex5.add(Double.NaN);
      Complex complex16 = complex6.multiply(2285.741895161157);
      Complex complex17 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-497.22), (-497.22));
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.ONE.add(complex0);
      Complex complex5 = complex0.I.acos();
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex6.ONE.subtract((-420.07512827936));
      Complex complex8 = complex6.NaN.cosh();
      Complex complex9 = complex6.divide((-1833.735449));
      Complex complex10 = Complex.valueOf(2.417189020581056E-8, 0.0);
      double double1 = complex0.abs();
      Object object0 = complex5.readResolve();
      Complex complex11 = complex0.pow(complex1);
      Complex complex12 = complex7.acos();
      Complex complex13 = complex12.INF.asin();
      Complex complex14 = complex5.sinh();
      Complex complex15 = complex2.add(703.1752674831504);
      Complex complex16 = complex5.reciprocal();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1166.117081977, 3095.591);
      Complex complex1 = complex0.NaN.negate();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.subtract(1166.117081977);
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.add(3095.591);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1749.0));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.valueOf(0.0, 0.6181373596191406);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1729.5313046160165), (-432.065104154065));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex0.INF.asin();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.cosh();
      Object object1 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.NaN.createComplex((-3831.0), 2593.4368179);
      Complex complex2 = complex0.acos();
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex2.multiply((-3253));
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.I.divide(complex4);
      Complex complex6 = complex3.I.multiply((double) (-3253));
      double double0 = complex6.ZERO.abs();
      boolean boolean0 = complex2.equals(complex3);
      boolean boolean1 = complex1.isNaN();
      Complex complex7 = complex0.add(2.0);
      Complex complex8 = Complex.valueOf((double) (-3253), 0.0);
      Complex complex9 = complex8.NaN.multiply((-3253));
      Complex complex10 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.NaN.subtract(1.0);
      Complex complex3 = complex0.NaN.multiply((-3141.866046096));
      ComplexField complexField1 = complex1.I.getField();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.ONE.getArgument();
      double double1 = complex0.ONE.getArgument();
      double double2 = complex1.getImaginary();
      Complex complex4 = complex0.pow(1.0);
      List<Complex> list0 = complex3.nthRoot(851);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.add(0.16690382361412048);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex0.divide(complex1);
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.ZERO.pow(2300.493610192);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex6.I.divide(complex7);
      Complex complex10 = complex1.acos();
      Complex complex11 = complex1.acos();
      double double0 = complex7.getImaginary();
      double double1 = complex5.getArgument();
      Complex complex12 = complex9.subtract(complex10);
      List<Complex> list0 = complex5.nthRoot(460);
      double double2 = complex1.getImaginary();
      Complex complex13 = complex8.pow(Double.POSITIVE_INFINITY);
      Complex complex14 = complex9.atan();
      Complex complex15 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.acos();
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex4.NaN.multiply(739);
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex6 = complex0.subtract(complex3);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.createComplex(0.0, 1538.23823381964);
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex8.NaN.reciprocal();
      Complex complex12 = complex8.pow((double) 739);
      ComplexField complexField1 = complex8.getField();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex13.I.multiply(1220.25279723);
      boolean boolean0 = complex13.isInfinite();
      Complex complex15 = complex0.atan();
      Complex complex16 = complex5.cosh();
      List<Complex> list0 = complex3.nthRoot(1528);
      Complex complex17 = complex2.sin();
      Complex complex18 = complex16.atan();
      Complex complex19 = complex14.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      ComplexField complexField0 = complex1.I.getField();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.sinh();
      double double0 = complex1.abs();
      Complex complex5 = complex0.log();
      Complex complex6 = complex4.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ZERO.reciprocal();
      String string0 = complex0.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex3.atan();
      double double1 = complex0.getReal();
      Complex complex7 = complex0.multiply((-20.0));
      Complex complex8 = complex7.INF.createComplex((-20.0), (-20.0));
      try { 
        complex7.ZERO.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2122.23689385154));
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf((-2122.23689385154), (-2122.23689385154));
      Complex complex4 = complex1.I.add(complex2);
      Complex complex5 = complex3.INF.cos();
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Complex complex6 = complex3.INF.sqrt1z();
      Complex complex7 = complex3.I.tan();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex11.I.createComplex((-2122.23689385154), (-1749.615447521619));
      Complex complex13 = complex3.pow((-2122.23689385154));
      try { 
        complex11.nthRoot((-2583));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,583
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(206.685906735, (-1125.8508));
      int int0 = 0;
      Complex complex1 = complex0.ZERO.multiply(0);
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.cosh();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex2.subtract(Double.NaN);
      Complex complex4 = complex2.INF.exp();
      try { 
        complex2.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.I.divide((-3273.5));
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex0.ZERO.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      List<Complex> list0 = complex0.ZERO.nthRoot(1638);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex1.I.asin();
      Complex complex7 = complex2.INF.tan();
      Complex complex8 = Complex.valueOf((-50.518266210832));
      Complex complex9 = complex7.ONE.cosh();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex5.createComplex(1638, 1638);
      Complex complex12 = complex2.acos();
      Complex complex13 = complex2.atan();
      Complex complex14 = complex0.sqrt1z();
      Complex complex15 = complex11.exp();
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1546.77), (-1546.77));
      double double0 = complex0.getReal();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.NaN.createComplex(279.8054, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1351.82135), (-1351.82135));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.valueOf((-1351.82135), 1583.5276);
      Complex complex3 = complex0.NaN.cos();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.createComplex((-1351.82135), 0.1307198405265808);
      String string0 = complex5.toString();
      Complex complex6 = complex0.ZERO.pow(0.1307198405265808);
      Complex complex7 = complex5.ZERO.subtract(complex2);
      Complex complex8 = complex0.createComplex(0.0, 2204.638);
      Complex complex9 = complex8.INF.createComplex(1583.5276, 4290.063308162736);
      double double1 = complex8.getArgument();
      boolean boolean0 = complex5.isInfinite();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex12 = complex10.INF.sqrt1z();
      Complex complex13 = complex2.multiply(0.0);
      Complex complex14 = new Complex(2204.638, (-3565.23332));
      Complex complex15 = complex5.add(complex14);
      Complex complex16 = complex10.tanh();
      Complex complex17 = complex9.add(complex5);
      Complex complex18 = complex17.ONE.createComplex((-4.544525556171388E15), 2.0);
      Complex complex19 = complex17.reciprocal();
      ComplexField complexField0 = complex7.getField();
      Complex complex20 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-33.20054548721), 1630.383);
      Complex complex1 = complex0.ONE.multiply((-1748));
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex1.NaN.log();
      Complex complex6 = complex4.INF.sinh();
      double double0 = complex6.getArgument();
      int int0 = complex0.I.hashCode();
      Complex complex7 = complex0.pow((-33.20054548721));
      Complex complex8 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2474.0961207));
      Complex complex1 = Complex.valueOf((-630.8625680116479));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.atan();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.atan();
      ComplexField complexField0 = complex4.I.getField();
      boolean boolean1 = complex4.isInfinite();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.multiply(complex5);
      int int0 = complex1.hashCode();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex4.log();
      Complex complex9 = Complex.valueOf(1575.05767264, 1575.05767264);
      Complex complex10 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-239.639332442));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.add(complex1);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex4 = complex0.createComplex((-239.639332442), (-4.4100097152254264E-8));
      Complex complex5 = complex1.pow((-489.11770598971));
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.ONE.multiply(7);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.I.atan();
      Object object1 = complex3.readResolve();
      boolean boolean0 = complex0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.multiply(7);
      Complex complex3 = complex2.ZERO.subtract(0.5162794589996338);
      List<Complex> list0 = complex1.nthRoot(7);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.sinh();
      Object object0 = complex2.INF.readResolve();
      Complex complex5 = Complex.valueOf(193.98868);
      boolean boolean1 = complex1.isInfinite();
      Complex complex6 = Complex.valueOf((-2009.13));
      Complex complex7 = complex3.sqrt();
      double double0 = complex1.getReal();
      Complex complex8 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1958.6444477953), 340.090747488);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex2.createComplex(Double.POSITIVE_INFINITY, (-20.0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(157.8788008, 2047.40672311013);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.add((-1401.788172993161));
      Complex complex5 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-60.52254), (-60.52254));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.I.acos();
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex3.I.divide((-3333.01));
      double double0 = complex0.getReal();
      int int1 = complex0.hashCode();
      Object object1 = new Object();
      boolean boolean0 = complex3.equals(object1);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1.4977047507315718E290);
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.ONE.tanh();
      double double1 = complex1.ZERO.abs();
      Complex complex3 = complex0.add(1.4977047507315718E290);
      Complex complex4 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.createComplex(1142.0, 1142.0);
      String string0 = complex1.INF.toString();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex2.pow(complex5);
      Complex complex8 = Complex.valueOf(0.0, 791.9429692129245);
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex8.multiply(complex6);
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex6.subtract(complex10);
      Complex complex13 = complex0.exp();
      Complex complex14 = complex2.multiply((-485));
      Complex complex15 = complex5.negate();
      Complex complex16 = complex6.multiply(complex15);
      Complex complex17 = complex2.sin();
      Complex complex18 = complex0.conjugate();
      Complex complex19 = Complex.valueOf((-340.3519000168731));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1833.84), (-122.201457141808));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex0.INF.add(complex1);
      Complex complex5 = complex0.negate();
      double double0 = complex5.abs();
      Complex complex6 = complex1.multiply(205);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.8339009284973145);
      Complex complex2 = complex0.INF.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.multiply(725.902142817);
      int int0 = (-1433);
      try { 
        complex1.ZERO.nthRoot((-3599));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,599
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.ONE.multiply((-76.471691));
      Complex complex7 = complex5.ONE.multiply(complex3);
      ComplexField complexField0 = complex7.INF.getField();
      double double0 = complex4.abs();
      Complex complex8 = complex3.divide((-1704.818));
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex9.INF.createComplex((-76.471691), 0.0);
      Complex complex11 = complex3.reciprocal();
      Object object0 = complex9.readResolve();
      Complex complex12 = complex6.multiply(2633);
      Complex complex13 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-2.9275804461593914E217), (-2.9275804461593914E217));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.multiply((-2.9275804461593914E217));
      Complex complex3 = complex0.reciprocal();
      try { 
        complex0.nthRoot((-1540));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,540
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.createComplex(9.597302512507479E247, 0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.83892088580041E80), (-7.83892088580041E80));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.multiply((-5091));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double double0 = (-1177.547617);
      Complex complex0 = Complex.valueOf((-1177.547617));
      Complex complex1 = Complex.valueOf(2181.62);
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1786.12163838007);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex0.NaN.add(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex1.NaN.multiply(complex6);
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex1.asin();
      List<Complex> list0 = complex8.nthRoot(17);
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.ZERO.multiply(complex1);
      int int0 = complex0.NaN.hashCode();
      Complex complex5 = complex4.I.multiply(0);
      ComplexField complexField0 = complex0.I.getField();
      int int1 = complex1.INF.hashCode();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex6.divide(complex5);
      Complex complex10 = complex9.ONE.pow(1.9276698418065647E249);
      Complex complex11 = complex7.add(0.14095008373260498);
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(0.0);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1243.199544006706);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.ZERO.cosh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex4.subtract(1243.199544006706);
      Complex complex8 = complex7.asin();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.divide(complex0);
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex3.ONE.multiply((-3684));
      Complex complex8 = complex3.divide(2.05597910889115E159);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.I.getArgument();
      double double1 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-302.22011028));
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1645.1551587227);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.add((-1.8981247089866317E-7));
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.multiply((-1.8981247089866317E-7));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract((-1750.739427574823));
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.ZERO.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.acos();
      try { 
        complex0.nthRoot((-749));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -749
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex0.createComplex(0.0, (-1089.2));
      double double0 = complex4.getReal();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.tan();
      List<Complex> list0 = complex0.nthRoot(36);
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.ZERO.pow(0.0);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(195.585019, 1087.168568);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.ONE.conjugate();
      Complex complex6 = complex2.atan();
      double double0 = complex0.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      double double1 = complex3.abs();
      Complex complex7 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-211.6708), (-69.582401288));
      Complex complex1 = complex0.NaN.add((-2151.0676609768007));
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex1.multiply((-69.582401288));
      double double0 = (-597.280031);
      Complex complex7 = complex5.INF.createComplex((-1.0), (-597.280031));
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex8.NaN.subtract((-1.0));
      Complex complex10 = complex3.ONE.subtract((-2151.0676609768007));
      Complex complex11 = complex10.NaN.negate();
      Complex complex12 = Complex.valueOf((-211.6708), (-2151.0676609768007));
      Complex complex13 = complex0.tan();
      Complex complex14 = complex3.NaN.log();
      Complex complex15 = complex13.subtract((-211.6708));
      Complex complex16 = Complex.valueOf(2239.226043);
      int int0 = 1057;
      Complex complex17 = complex2.ZERO.divide(complex13);
      List<Complex> list0 = complex12.nthRoot(1057);
      Complex complex18 = complex10.add(complex2);
      Complex complex19 = complex2.I.negate();
      // Undeclared exception!
      complex4.nthRoot(1312145731);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(17);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = Complex.valueOf(1906.5, (double) 17);
      Complex complex6 = complex4.I.conjugate();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex5.INF.add(complex4);
      Complex complex8 = complex6.ONE.multiply((-3690.36445));
      Complex complex9 = complex8.NaN.tan();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex8.pow(complex1);
      Complex complex12 = complex5.ONE.conjugate();
      Complex complex13 = complex0.add(1514.822262297);
      Complex complex14 = complex2.NaN.sin();
      Complex complex15 = complex5.ONE.reciprocal();
      Complex complex16 = complex5.pow(complex6);
      Complex complex17 = complex16.NaN.negate();
      Complex complex18 = complex3.subtract(0.0);
      Complex complex19 = complex18.INF.asin();
      Complex complex20 = complex18.exp();
      Complex complex21 = complex19.I.sin();
      Complex complex22 = complex13.atan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex23 = complex19.cosh();
      Complex complex24 = complex23.INF.sqrt1z();
      boolean boolean1 = complex6.equals((Object) null);
      Complex complex25 = complex19.tanh();
      Complex complex26 = complex21.add(2698.0);
      int int0 = complex22.hashCode();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3207.545133);
      Complex complex1 = complex0.pow(3207.545133);
      Complex complex2 = Complex.valueOf(3207.545133, 3207.545133);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex1.I.reciprocal();
      Complex complex5 = complex4.ZERO.divide(complex2);
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex6 = complex2.ONE.divide(complex1);
      Complex complex7 = complex6.INF.add(complex2);
      double double0 = complex0.INF.getArgument();
      Complex complex8 = complex2.I.cosh();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex1.INF.subtract(complex2);
      Complex complex11 = complex0.ZERO.multiply(complex2);
      int int0 = complex11.I.hashCode();
      Complex complex12 = complex0.INF.reciprocal();
      Complex complex13 = complex10.NaN.subtract(1568.780875088782);
      Complex complex14 = complex13.I.cosh();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex0.cos();
      ComplexField complexField0 = complex16.INF.getField();
      List<Complex> list1 = complex3.nthRoot(1);
      Complex complex17 = complex15.multiply(1568.780875088782);
      String string0 = complex15.toString();
      Complex complex18 = complex12.subtract((double) 1);
      Complex complex19 = complex4.negate();
      boolean boolean0 = complex18.isNaN();
      Complex complex20 = complex15.multiply(complex19);
      Complex complex21 = complex10.conjugate();
      Complex complex22 = Complex.valueOf(1591.29595);
      Complex complex23 = complex0.reciprocal();
      Complex complex24 = complex13.multiply(0.6588751077651978);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.NaN.divide(Double.NaN);
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = complex9.NaN.log();
      int int0 = 0;
      Complex complex12 = complex0.INF.sqrt();
      Complex complex13 = complex0.NaN.exp();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.acos();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex2.log();
      Complex complex7 = complex4.multiply(0.0);
      double double1 = complex0.INF.abs();
      Complex complex8 = complex7.ZERO.multiply(5606.13281);
      boolean boolean0 = complex4.isInfinite();
      Complex complex9 = complex7.createComplex(0.0, 394.045);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-764.43327028), 1179.503775800581);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.multiply((-391.3873426833585));
      Complex complex3 = Complex.valueOf((-764.43327028));
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = complex1.tan();
      double double0 = complex1.getImaginary();
      Complex complex6 = complex0.INF.sinh();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex1.pow(complex7);
      Complex complex10 = complex0.divide((-764.43327028));
      Complex complex11 = complex9.pow(0.0);
      Complex complex12 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1627.1366933846), (-1627.1366933846));
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.INF.subtract(complex0);
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.INF.pow(complex4);
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex0.I.multiply(complex1);
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex0.multiply(0.0);
      Complex complex10 = complex4.negate();
      Complex complex11 = complex10.INF.cosh();
      List<Complex> list0 = complex10.ZERO.nthRoot(1427);
      Complex complex12 = complex5.ONE.subtract(complex3);
      String string0 = complex10.toString();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex10.equals(object0);
      double double1 = complex3.getImaginary();
      Complex complex13 = complex5.sinh();
      Complex complex14 = complex6.createComplex((-9.598330731102836E-8), (-9.598330731102836E-8));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.negate();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex5.toString();
      Complex complex7 = complex0.INF.exp();
      Complex complex8 = complex1.createComplex(0.0, 0.0);
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex1.tanh();
      boolean boolean1 = complex8.isNaN();
      double double0 = complex7.getImaginary();
      Complex complex11 = complex6.pow(complex0);
      Complex complex12 = complex4.multiply(1362);
      Complex complex13 = complex7.ONE.acos();
      Complex complex14 = new Complex(Double.NaN);
      Complex complex15 = complex12.subtract(complex14);
      Complex complex16 = Complex.valueOf(0.0, 2.0);
      Complex complex17 = complex5.cosh();
      Complex complex18 = complex4.sin();
      int int0 = complex18.I.hashCode();
      Complex complex19 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4167.0, (-2929.508633762));
      String string0 = complex0.NaN.toString();
      int int0 = complex0.ZERO.hashCode();
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf(2589.51078);
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = Complex.valueOf(0.0, 5.609418227003629E-301);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.divide(5093.712775106788);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex4.add(complex3);
      Object object1 = complex3.readResolve();
      Complex complex9 = complex4.pow(complex7);
      Complex complex10 = complex2.pow((-2929.508633762));
  }
}
