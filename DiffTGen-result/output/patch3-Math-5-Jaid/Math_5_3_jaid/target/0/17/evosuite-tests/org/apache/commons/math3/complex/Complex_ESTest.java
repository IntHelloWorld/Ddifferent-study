/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:20:13 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-333.9861421), (-333.9861421));
      Complex complex1 = complex0.multiply((-1090));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.add((-333.9861421));
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex3.INF.multiply((-5144.59828673371));
      double double0 = complex5.getArgument();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex6.subtract(complex7);
      Complex complex10 = complex6.multiply((-333.9861421));
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex6.I.asin();
      Complex complex14 = complex12.INF.multiply(complex10);
      Complex complex15 = complex14.tanh();
      Complex complex16 = complex15.ZERO.reciprocal();
      Complex complex17 = complex10.acos();
      Complex complex18 = complex7.createComplex((-1090), 0.0);
      Complex complex19 = complex10.pow(complex6);
      Complex complex20 = complex18.log();
      Complex complex21 = complex20.divide(complex4);
      Complex complex22 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-77.16408), (-77.16408));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.NaN.multiply(1385);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.NaN.multiply(1152);
      Complex complex8 = complex7.INF.divide(921.7955);
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex9.ONE.multiply((-916));
      String string0 = complex9.INF.toString();
      Complex complex11 = complex9.INF.acos();
      double double0 = complex1.getImaginary();
      double double1 = complex1.getImaginary();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex6.acos();
      Complex complex15 = complex14.tanh();
      Complex complex16 = complex14.add(1134.230827322);
      Complex complex17 = complex1.sinh();
      Complex complex18 = complex12.multiply(complex14);
      Complex complex19 = complex17.tanh();
      Complex complex20 = complex0.cosh();
      Complex complex21 = complex7.sinh();
      double double2 = complex3.getImaginary();
      Complex complex22 = complex4.divide(0.0);
      Complex complex23 = complex1.add(complex6);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1343.2388358));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.620899738203635E200);
      Complex complex1 = complex0.I.createComplex(1.620899738203635E200, 1.620899738203635E200);
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex4.cosh();
      Object object1 = complex4.NaN.readResolve();
      double double0 = ((Complex) object1).ONE.getArgument();
      Complex complex7 = complex6.I.tanh();
      int int0 = complex0.hashCode();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex10.NaN.divide(1.620899738203635E200);
      Complex complex12 = complex11.ONE.log();
      Complex complex13 = complex7.log();
      Complex complex14 = complex13.NaN.atan();
      Complex complex15 = complex6.subtract(complex3);
      Complex complex16 = complex5.sqrt();
      Complex complex17 = new Complex(1.620899738203635E200);
      boolean boolean0 = complex1.equals(complex17);
      Complex complex18 = complex14.multiply(4442);
      boolean boolean1 = complex15.isNaN();
      Complex complex19 = complex16.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2400.0638, 2400.0638);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      String string0 = complex0.ZERO.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex4.I.cosh();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex6 = complex0.multiply(2400.0638);
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.ZERO.add(2110.19626);
      Complex complex10 = complex4.ONE.sinh();
      Complex complex11 = complex3.NaN.cos();
      Complex complex12 = complex5.ZERO.multiply(complex2);
      Complex complex13 = complex12.ONE.add(complex11);
      String string1 = complex11.ONE.toString();
      double double0 = complex11.I.abs();
      double double1 = complex0.getReal();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex2.divide(complex5);
      Complex complex16 = complex15.NaN.add(complex14);
      Complex complex17 = complex12.asin();
      Complex complex18 = complex17.createComplex(1.0, (-1.2277120342804144E295));
      Complex complex19 = complex3.cosh();
      Complex complex20 = complex2.log();
      Complex complex21 = complex10.add(1.0);
      ComplexField complexField0 = complex21.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1462.0), 2.3278688667580978E-7);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = new Complex((-2211.11122022), Double.NaN);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.620899738203635E200);
      Complex complex1 = complex0.I.createComplex(1.620899738203635E200, 1.620899738203635E200);
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex4.cosh();
      Object object1 = complex4.NaN.readResolve();
      Complex complex7 = complex6.I.tanh();
      int int0 = complex0.hashCode();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex10.NaN.divide(1.620899738203635E200);
      Complex complex12 = complex11.ONE.log();
      Complex complex13 = complex7.log();
      Complex complex14 = complex13.NaN.atan();
      Complex complex15 = complex6.subtract(complex3);
      Complex complex16 = complex5.sqrt();
      Object object2 = complex14.readResolve();
      boolean boolean0 = complex1.equals(object2);
      Complex complex17 = complex14.multiply(4442);
      boolean boolean1 = complex15.isNaN();
      Complex complex18 = complex16.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(310.8979682861);
      Complex complex1 = Complex.valueOf(310.8979682861);
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.ONE.divide(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.NaN.negate();
      double double0 = complex7.I.abs();
      Complex complex9 = complex6.ZERO.divide((double) 1);
      Complex complex10 = complex3.multiply(complex6);
      Complex complex11 = complex1.subtract(310.8979682861);
      Complex complex12 = complex6.ZERO.conjugate();
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex14 = complex8.negate();
      Complex complex15 = complex3.tanh();
      Complex complex16 = complex6.multiply(1);
      Complex complex17 = complex0.INF.subtract(complex11);
      Complex complex18 = complex1.tan();
      Complex complex19 = complex3.divide(complex7);
      Complex complex20 = complex8.subtract(1.0);
      List<Complex> list1 = complex19.INF.nthRoot(1);
      Complex complex21 = complex18.cos();
      Complex complex22 = complex8.divide(complex3);
      Complex complex23 = Complex.valueOf(0.0, (double) 1);
      double double1 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 211.6366527);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.NaN.sqrt1z();
      String string0 = complex0.I.toString();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.NaN.multiply(complex3);
      Complex complex7 = complex3.ONE.sinh();
      Complex complex8 = complex5.NaN.createComplex(0.0, 703.11310997);
      Complex complex9 = complex5.ONE.subtract(2.0);
      Complex complex10 = Complex.valueOf((-1037.16181), 0.0);
      Complex complex11 = complex6.I.add(558.95885779741);
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex4.reciprocal();
      Complex complex15 = complex4.tanh();
      Complex complex16 = complex11.sqrt();
      Complex complex17 = complex16.NaN.pow((-515.58611223));
      Complex complex18 = complex15.subtract(complex0);
      Complex complex19 = complex2.atan();
      Complex complex20 = complex2.multiply(complex5);
      Complex complex21 = complex3.multiply(558.95885779741);
      Complex complex22 = complex15.tanh();
      Complex complex23 = complex4.multiply(Double.NaN);
      Complex complex24 = complex0.multiply(60);
      Complex complex25 = Complex.valueOf(703.11310997);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1556.7617203447464, (-2786.844017));
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.createComplex(1762.917103465, 1556.7617203447464);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.tan();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.log();
      List<Complex> list0 = complex6.nthRoot(1123);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex1.NaN.multiply(501.072);
      Complex complex3 = complex2.NaN.exp();
      double double0 = complex3.INF.abs();
      Complex complex4 = Complex.valueOf(0.0, 501.072);
      Complex complex5 = complex0.createComplex(2713.170998, 2713.170998);
      Complex complex6 = complex0.createComplex(2713.170998, 2713.170998);
      String string0 = complex2.I.toString();
      Complex complex7 = complex6.I.multiply(0);
      Complex complex8 = complex6.subtract(140.47);
      Complex complex9 = complex2.acos();
      Object object0 = complex6.readResolve();
      Complex complex10 = complex7.pow(0.0);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex7.createComplex(0.0, 0.0);
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 1.1122405335641184E307);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.multiply(1.1122405335641184E307);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex4.I.add(complex1);
      Complex complex6 = Complex.valueOf(725.0797582196675, Double.NaN);
      List<Complex> list0 = complex4.I.nthRoot(1402);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex2.pow(Double.NaN);
      Complex complex9 = complex5.acos();
      Complex complex10 = complex6.sqrt();
      List<Complex> list1 = complex6.nthRoot(1402);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(4260.5592912385, (-2867.843960119233));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.I.tanh();
      double double0 = complex0.getImaginary();
      double double1 = complex1.getArgument();
      double double2 = complex2.getReal();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex3.NaN.multiply(0.0);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1467.6469, (-3168.35171084));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex0.equals(", ");
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex3 = complex2.divide(complex1);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.I.multiply(1363);
      Complex complex6 = complex4.ZERO.acos();
      double double1 = complex2.getArgument();
      Complex complex7 = complex3.subtract((-1.1372623029198934));
      Complex complex8 = complex7.NaN.subtract((-1.1370024096520552));
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex4.multiply(complex0);
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex8.negate();
      String string0 = complex10.toString();
      Complex complex13 = complex10.add(1467.6469);
      Complex complex14 = complex13.NaN.multiply(5.221136819669415E-9);
      Complex complex15 = complex1.divide(complex7);
      Complex complex16 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-647.95278947765));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-658.49411970807));
      Complex complex1 = complex0.pow((-658.49411970807));
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.I.sqrt();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.multiply((-72.367695928764));
      Complex complex3 = complex2.tan();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = complex0.I.exp();
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex4.INF.createComplex(0.0, 0.0);
      Object object0 = complex2.NaN.readResolve();
      double double0 = complex0.getReal();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex4.ONE.divide(complex6);
      ComplexField complexField1 = complex4.I.getField();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex4.add(complex9);
      Complex complex11 = complex2.cosh();
      int int1 = complex11.ONE.hashCode();
      Complex complex12 = complex2.sqrt();
      Complex complex13 = complex10.subtract(Double.NaN);
      Complex complex14 = complex0.cos();
      try { 
        complex4.nthRoot((-190));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -190
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.cos();
      double double0 = complex0.ONE.abs();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.INF.acos();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex1.isInfinite();
      Complex complex6 = complex2.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6180.47779);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.cos();
      try { 
        complex4.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(5378.35575463, 5378.35575463);
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex3.NaN.add(5378.35575463);
      Complex complex5 = complex2.ZERO.createComplex(5378.35575463, Double.NaN);
      Complex complex6 = complex5.ONE.divide(1.0);
      Complex complex7 = complex2.I.add(complex1);
      Complex complex8 = complex7.ONE.multiply(0.0);
      Complex complex9 = complex8.subtract(complex0);
      int int0 = complex0.hashCode();
      Complex complex10 = complex2.acos();
      double double0 = complex7.abs();
      double double1 = complex5.getImaginary();
      double double2 = complex3.abs();
      Complex complex11 = complex9.reciprocal();
      Complex complex12 = complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.ZERO.pow(1.0);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = Complex.valueOf(2195.74601053);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.ZERO.negate();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex8.I.divide(8.761416875971053E-298);
      double double0 = complex7.I.abs();
      double double1 = complex7.NaN.getArgument();
      Complex complex10 = complex4.ONE.pow(complex6);
      Complex complex11 = complex10.INF.asin();
      int int0 = complex11.INF.hashCode();
      Complex complex12 = complex5.I.cosh();
      Complex complex13 = complex10.ZERO.log();
      Complex complex14 = complex13.I.pow(0.0);
      Complex complex15 = complex12.ZERO.pow((-1.0));
      String string0 = complex15.I.toString();
      Complex complex16 = complex4.divide(2195.74601053);
      String string1 = complex6.toString();
      Complex complex17 = complex0.sinh();
      double double2 = complex10.getImaginary();
      Complex complex18 = complex6.multiply(complex17);
      ComplexField complexField0 = complex18.getField();
      Complex complex19 = complex5.multiply(1.0);
      Object object0 = complex11.readResolve();
      Complex complex20 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = Complex.valueOf(6.283185307179586);
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex0.INF.multiply((-910.14));
      Complex complex8 = complex7.subtract(6.283185307179586);
      int int0 = complex1.INF.hashCode();
      Complex complex9 = complex3.I.conjugate();
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex0.atan();
      int int1 = complex1.hashCode();
      Object object0 = complex3.readResolve();
      Complex complex12 = complex3.NaN.negate();
      Complex complex13 = Complex.valueOf((-910.14));
      Complex complex14 = complex5.ZERO.log();
      Complex complex15 = Complex.I;
      Complex complex16 = complex15.conjugate();
      Complex complex17 = complex15.NaN.atan();
      Complex complex18 = complex3.divide(complex15);
      String string0 = complex17.toString();
      Complex complex19 = complex6.sinh();
      Complex complex20 = complex15.ONE.conjugate();
      Complex complex21 = complex2.subtract(complex5);
      Complex complex22 = complex15.cosh();
      Complex complex23 = complex5.acos();
      boolean boolean0 = complex8.isInfinite();
      Complex complex24 = complex6.divide(0.0);
      Complex complex25 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex3.divide(complex0);
      Complex complex8 = complex7.NaN.divide(complex1);
      Complex complex9 = complex6.negate();
      ComplexField complexField0 = complex3.getField();
      Complex complex10 = complex0.atan();
      Complex complex11 = Complex.NaN;
      boolean boolean0 = complex9.equals(complex11);
      Complex complex12 = complex2.subtract((-242.37));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex0.exp();
      String string0 = complex0.toString();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.createComplex(1, 3641.717925695);
      Complex complex5 = complex3.I.multiply(complex4);
      Complex complex6 = complex4.ZERO.tanh();
      Complex complex7 = complex4.INF.sqrt();
      double double0 = complex3.getImaginary();
      boolean boolean0 = complex4.isNaN();
      Complex complex8 = complex0.NaN.createComplex(1, 258.500252721);
      Complex complex9 = complex0.INF.atan();
      boolean boolean1 = complex0.equals("4`4<'P;8'B0|");
      Complex complex10 = complex1.add((double) 1);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex8.multiply(Double.NaN);
      Complex complex13 = complex12.NaN.sinh();
      Complex complex14 = complex1.createComplex(20.0, 791.76076656);
      Complex complex15 = complex14.INF.cosh();
      try { 
        complex10.nthRoot((-783));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -783
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.pow((-2273.9686799192177));
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 20.0);
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(8.013164089994031E46);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex1.I.multiply(8.013164089994031E46);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.ZERO.add(complex5);
      int int0 = complex6.ZERO.hashCode();
      Complex complex7 = complex0.sin();
      ComplexField complexField0 = complex1.getField();
      double double0 = complex0.getImaginary();
      double double1 = complex6.getReal();
      Complex complex8 = complex1.tanh();
      List<Complex> list0 = complex8.INF.nthRoot(1164);
      Complex complex9 = complex6.exp();
      double double2 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1738.31270393, 1738.31270393);
      Complex complex1 = complex0.ZERO.pow(1738.31270393);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex4.ZERO.tan();
      Complex complex7 = complex6.INF.divide(1738.31270393);
      int int0 = complex7.I.hashCode();
      int int1 = complex1.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex3.log();
      Complex complex9 = complex3.pow((-3227.463177838));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-373.0));
      Complex complex1 = Complex.valueOf((-373.0));
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.NaN.subtract((-373.0));
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex5.I.multiply((-4587));
      Complex complex7 = complex2.ONE.tanh();
      Complex complex8 = complex2.ZERO.negate();
      Complex complex9 = complex8.I.divide(3648.22057472);
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.NaN.asin();
      double double0 = complex10.getReal();
      Complex complex12 = complex10.pow(complex1);
      List<Complex> list0 = complex12.INF.nthRoot(580);
      boolean boolean0 = complex7.isInfinite();
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex13.sqrt1z();
      Complex complex15 = Complex.valueOf((double) 580);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.cos();
      Object object0 = complex0.NaN.readResolve();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex6.NaN.divide(complex3);
      Object object1 = complex5.ZERO.readResolve();
      int int0 = complex5.hashCode();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex5.exp();
      Complex complex11 = complex10.NaN.negate();
      ComplexField complexField0 = complex10.I.getField();
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex12.INF.sqrt();
      Complex complex14 = complex9.multiply(complex7);
      Complex complex15 = complex9.multiply(complex1);
      Complex complex16 = complex10.sqrt1z();
      Complex complex17 = complex10.multiply((-1295.396));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-127.8819680896));
      Complex complex1 = complex0.I.createComplex(1433.283646246, (-127.8819680896));
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.INF.add(complex3);
      Complex complex5 = complex4.ZERO.pow((-127.8819680896));
      Complex complex6 = complex4.I.createComplex((-127.8819680896), (-127.8819680896));
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.pow(1433.283646246);
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex0.add((-127.8819680896));
      Object object0 = complex8.readResolve();
      int int0 = complex0.hashCode();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex10.I.multiply(complex11);
      Complex complex13 = complex10.multiply(2130.0);
      double double0 = complex10.abs();
      Complex complex14 = complex9.createComplex(2130.0, 1433.283646246);
      Complex complex15 = complex13.atan();
      Complex complex16 = complex6.tan();
      Complex complex17 = Complex.valueOf(2130.0, 1433.283646246);
      Complex complex18 = complex6.negate();
      Complex complex19 = new Complex(1.0, 2130.0);
      Complex complex20 = complex18.ZERO.multiply(complex19);
      boolean boolean0 = complex6.isNaN();
      boolean boolean1 = complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex0.ZERO.cosh();
      int int0 = complex2.I.hashCode();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex4.NaN.createComplex(3.204135737993823E-8, 20.0);
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex6.createComplex(450.637150706, 0.0);
      Object object0 = complex2.readResolve();
      Complex complex10 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.subtract(3793.3520269399537);
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex2.INF.sin();
      Complex complex8 = Complex.valueOf(3793.3520269399537);
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex6.sinh();
      String string0 = complex8.I.toString();
      int int0 = complex0.hashCode();
      Complex complex11 = complex8.divide(0.0);
      Complex complex12 = complex2.asin();
      Complex complex13 = complex5.log();
      Complex complex14 = complex5.divide(1721.547);
      Complex complex15 = Complex.valueOf(2.0);
      Complex complex16 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-2188.11970927);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.valueOf((-2188.11970927), (-2188.11970927));
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.add((-2188.11970927));
      double double1 = complex3.getArgument();
      try { 
        complex2.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1677.74490267));
      Complex complex1 = complex0.ZERO.log();
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.INF.subtract((-1677.74490267));
      Complex complex5 = complex2.ZERO.pow(complex0);
      Complex complex6 = complex3.NaN.add(0.9285714285714286);
      ComplexField complexField0 = complex2.getField();
      double double1 = complex2.getReal();
      Complex complex7 = complex0.pow(Double.POSITIVE_INFINITY);
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(505.693827392, 1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1721.9069143748);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2751.739741937));
      Complex complex1 = complex0.NaN.reciprocal();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1770.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.log();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex3.INF.reciprocal();
      String string0 = complex3.NaN.toString();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex7 = complex0.add(2142.3);
      double double0 = complex1.abs();
      Complex complex8 = complex7.subtract(2142.3);
      Complex complex9 = Complex.valueOf(Double.NaN);
      List<Complex> list0 = complex9.nthRoot(7);
      int int0 = complex9.hashCode();
      Complex complex10 = Complex.valueOf(1.7647101734915075E47, 2142.3);
      Complex complex11 = complex0.acos();
      Complex complex12 = complex11.ZERO.acos();
      Complex complex13 = complex0.pow((-1770.0));
      Complex complex14 = complex5.asin();
      Complex complex15 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1744.7918), 0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.ZERO.sqrt1z();
      List<Complex> list0 = complex3.I.nthRoot(1340);
      Complex complex4 = complex0.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex5.atan();
      Object object0 = complex5.readResolve();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex3.divide(473.13866902267756);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex3.pow(0.0);
      double double0 = complex6.getImaginary();
      Complex complex7 = complex4.pow(complex2);
      Complex complex8 = complex3.multiply(1);
      boolean boolean0 = complex0.equals(complex4);
      Complex complex9 = Complex.NaN;
      boolean boolean1 = complex7.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, (-1100.1124413132563));
      Complex complex3 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex4.ZERO.multiply(0.0);
      ComplexField complexField0 = complex4.getField();
      double double0 = complex0.getImaginary();
      Complex complex6 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.NaN.nthRoot(3681);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.multiply(complex0);
      Object object0 = complex4.readResolve();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.multiply(1253.984973);
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex3.INF.divide(complex1);
      Complex complex7 = complex6.INF.divide((-1.0));
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex9.I.subtract(3036.0256);
      Complex complex11 = complex0.negate();
      double double0 = complex6.getReal();
      boolean boolean0 = complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1320.2540243), (-1320.2540243));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.pow((-1320.2540243));
      String string0 = complex2.ONE.toString();
      Complex complex3 = Complex.valueOf(2496.38);
      double double0 = 0.0;
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex5.ONE.createComplex((-1.0), 2496.38);
      try { 
        complex0.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(0.0, (-572.8));
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.ONE.sinh();
      String string0 = complex0.toString();
      double double0 = complex1.abs();
      Complex complex4 = complex1.atan();
      double double1 = complex1.getReal();
      Complex complex5 = complex0.asin();
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = new Complex(1594.6, 1594.6);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.ONE.add(complex0);
      Object object0 = complex5.NaN.readResolve();
      Complex complex7 = complex0.multiply(1544.5112576877);
      Complex complex8 = complex1.exp();
      Object object1 = complex1.readResolve();
      Complex complex9 = complex8.cos();
      Complex complex10 = Complex.valueOf(1594.6);
      Object object2 = complex4.readResolve();
      List<Complex> list0 = complex3.nthRoot(1133);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.NaN.multiply(17);
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex4.ZERO.asin();
      String string0 = complex1.toString();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ZERO.atan();
      List<Complex> list0 = complex7.nthRoot(17);
      Complex complex8 = complex0.divide(714.085733651);
      Complex complex9 = Complex.valueOf((double) 1);
      Complex complex10 = complex1.tan();
      Complex complex11 = complex8.ZERO.sin();
      Complex complex12 = complex11.INF.multiply(1780.0257409237865);
      Complex complex13 = complex8.divide(0.0);
      double double0 = complex8.getArgument();
      Complex complex14 = complex7.subtract((-1263.883));
      String string1 = complex14.ZERO.toString();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex15.log();
      Complex complex17 = complex13.multiply(complex4);
      Complex complex18 = Complex.valueOf((-1263.883), 1780.0257409237865);
      Complex complex19 = complex8.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.ZERO.subtract(1083.7121143513264);
      double double0 = complex0.getArgument();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = Complex.valueOf(1083.7121143513264, 0.3784096837043762);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.NaN.add(complex1);
      Object object1 = complex4.I.readResolve();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex1.add(1083.7121143513264);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4131.370583352783), (-4131.370583352783));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex4.I.divide(complex1);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = Complex.valueOf((-4131.370583352783));
      Complex complex8 = complex0.tanh();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex((-2130.633), (-2130.633));
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex3.INF.pow((-2130.633));
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.I.pow(complex2);
      Complex complex6 = complex2.asin();
      String string0 = complex0.toString();
      ComplexField complexField1 = complex3.getField();
      Complex complex7 = complex1.reciprocal();
      String string1 = complex5.toString();
      boolean boolean1 = complex4.equals("(Infinity, Infinity)");
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.subtract(complex4);
      Complex complex10 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = null;
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.divide(0.0);
      Complex complex4 = complex3.I.subtract(1088.143);
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1307.2991689983);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex5.divide(1307.2991689983);
      Complex complex8 = complex2.multiply(complex0);
      Complex complex9 = complex8.multiply((-1115));
      Complex complex10 = complex9.ONE.createComplex(1307.2991689983, 3988.541394139);
      try { 
        complex9.I.nthRoot((-1115));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,115
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 387.8245612158);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.NaN.subtract(387.8245612158);
      Complex complex4 = complex2.tanh();
      Complex complex5 = new Complex(2.0, 0.0);
      Complex complex6 = complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4721.716));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.divide((-1.4356011804377797E-9));
      Complex complex3 = complex2.NaN.multiply((-779.506746537773));
      Complex complex4 = complex1.NaN.add(complex0);
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(1601.27757579);
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.acos();
      Object object0 = complex1.readResolve();
      Complex complex4 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.getArgument();
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.INF.divide(complex0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = Complex.valueOf((-20.0), 0.0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2579.7366938));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.I.pow((-2579.7366938));
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.NaN.multiply(0.0);
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex2.NaN.multiply(0.42096930742263794);
      Complex complex10 = complex2.multiply(1);
      Complex complex11 = complex10.NaN.sqrt1z();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex3.sinh();
      Complex complex14 = complex1.cos();
      Complex complex15 = complex11.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1.8112388823726723E41, 1.8112388823726723E41);
      Complex complex1 = Complex.valueOf(1.8112388823726723E41, 1.8112388823726723E41);
      Complex complex2 = complex1.INF.sin();
      double double0 = complex0.getReal();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex4.ZERO.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = complex6.NaN.add(1.8112388823726723E41);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex2.divide(complex1);
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.I.cosh();
      Object object0 = complex0.readResolve();
      double double0 = complex0.abs();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.subtract(3409.3213757478);
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.valueOf(3309.7515705111477, 2389.19543085);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.2546725273132324);
      Complex complex1 = complex0.INF.sqrt1z();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex1.I.multiply(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.createComplex(0.2546725273132324, 0.2546725273132324);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex4.createComplex(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.cos();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex1.isInfinite();
      Complex complex2 = complex0.multiply((-227));
      Complex complex3 = complex0.pow(3832.43);
      Complex complex4 = Complex.valueOf(1.016740083694458, 3832.43);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex3.subtract(1.184154459111628E-8);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(9.5985669644661E-8);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-821.8468886501777), 1016.19912563);
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.INF.createComplex((-1345.52525134), 2855.861107836);
      double double0 = complex2.NaN.getArgument();
      Complex complex4 = complex1.ONE.subtract((-821.8468886501777));
      Complex complex5 = complex0.pow(1016.19912563);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.INF.asin();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex0.asin();
      ComplexField complexField1 = complex1.getField();
      boolean boolean0 = complex1.isNaN();
      int int0 = complex7.INF.hashCode();
      Complex complex8 = complex7.add(0.0);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.INF.divide(complex1);
      Complex complex11 = Complex.valueOf(1400.00027006562);
      boolean boolean1 = complex9.isNaN();
      Complex complex12 = Complex.valueOf(1400.00027006562, 0.0);
      Complex complex13 = complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = complex2.createComplex((-3204.0), (-3204.0));
      Complex complex4 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3421.7100863957403), 0.0);
      Complex complex1 = complex0.INF.add((-3421.7100863957403));
      double double0 = complex0.abs();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add((-2.7943366835352838E-8));
      Complex complex2 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2900.2612819));
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.tanh();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex2.I.subtract(0.0);
      Complex complex5 = complex0.add(1420.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex0.subtract(complex1);
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.negate();
      String string0 = complex2.ONE.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(3825.918504, 2.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.ONE.exp();
      try { 
        complex2.nthRoot((-1460));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,460
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ONE.divide(2.0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex0.ONE.asin();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex1.multiply(complex2);
      boolean boolean0 = complex5.isNaN();
      int int1 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(1.4779040813446045, 0.0);
      Complex complex1 = Complex.valueOf(20.0, 1.4779040813446045);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sin();
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex1.atan();
      boolean boolean0 = complex3.equals(complex1);
      Complex complex4 = complex3.NaN.subtract((-326.4957939076413));
      Complex complex5 = complex3.add((-3678.092));
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex5.ONE.cosh();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.NaN.cos();
      Complex complex11 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2768.8578419092), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-467.291481));
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.multiply((-467.291481));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(337.8);
      Complex complex2 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2343.872405341475);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.sqrt1z();
      double double0 = complex3.getArgument();
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = complex1.createComplex(1692.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.NaN.divide(1706.09);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.tanh();
      ComplexField complexField1 = complex6.INF.getField();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex5.pow(complex3);
      ComplexField complexField2 = complex8.NaN.getField();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex4.sin();
      Complex complex12 = complex10.cosh();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.valueOf(1195.70319, (-2570.945872492837));
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex5.ZERO.reciprocal();
      Complex complex10 = complex2.INF.atan();
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex1.createComplex(3532.2848624569, 1532.9561615987127);
      String string0 = complex2.toString();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex1.log();
      double double0 = complex10.getArgument();
      Complex complex16 = complex1.multiply(945);
      Complex complex17 = complex7.NaN.divide(2521.286883);
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex18 = complex12.add(0.0);
      Complex complex19 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex20 = complex0.subtract(3.7920054509691455E-261);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex3.atan();
      Object object0 = complex5.ONE.readResolve();
      Complex complex7 = complex2.subtract((-1.1264032993918548E58));
      Complex complex8 = complex6.add((-1.1264032993918548E58));
      Complex complex9 = complex7.INF.tan();
      Complex complex10 = complex9.pow(complex6);
      Complex complex11 = complex10.ONE.log();
      Complex complex12 = complex10.cosh();
      double double0 = complex1.ZERO.abs();
      Complex complex13 = complex7.ZERO.tan();
      Complex complex14 = ((Complex) object0).ZERO.reciprocal();
      Complex complex15 = complex9.NaN.log();
      Complex complex16 = complex5.divide((-4518.17027));
      Complex complex17 = complex0.negate();
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = complex3.acos();
      Complex complex20 = complex0.add(complex9);
      Object object1 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.pow(complex0);
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.INF.reciprocal();
      Complex complex4 = complex1.subtract(3527.51726);
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex4.ZERO.divide(complex1);
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex1.ZERO.asin();
      Complex complex9 = complex4.ONE.multiply((-1854.4986275662));
      double double1 = complex7.INF.getArgument();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex10.add(complex9);
      Complex complex12 = complex10.exp();
      Complex complex13 = complex10.multiply(980.52711922);
      Complex complex14 = new Complex((-225.7));
      Complex complex15 = complex14.divide(Double.POSITIVE_INFINITY);
      Complex complex16 = complex0.multiply(complex14);
      Complex complex17 = Complex.valueOf(2188.39033);
      Complex complex18 = complex10.pow(0.0);
      ComplexField complexField0 = complex7.getField();
      Complex complex19 = complex4.pow(1911.0881101762);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-3881));
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex3.ONE.cosh();
      Complex complex6 = complex2.INF.sinh();
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex1.ZERO.multiply((-1894));
      Complex complex9 = complex8.INF.sin();
      int int0 = complex9.hashCode();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex1.I.reciprocal();
      Complex complex12 = complex8.divide(2064.165074524529);
      Complex complex13 = complex12.NaN.divide(complex8);
      Complex complex14 = complex13.acos();
      double double0 = complex14.NaN.abs();
      int int1 = complex0.hashCode();
      Complex complex15 = complex1.sqrt1z();
      Complex complex16 = complex15.divide((double) (-1894));
      Complex complex17 = complex15.pow(2120.707923489);
      Complex complex18 = complex15.acos();
      Complex complex19 = complex18.INF.tan();
      double double1 = complex19.INF.getArgument();
      Complex complex20 = complex6.exp();
      Complex complex21 = complex10.cos();
      int int2 = complex1.hashCode();
      String string0 = complex12.toString();
      Object object0 = complex10.readResolve();
      Complex complex22 = complex16.multiply(complex8);
      Complex complex23 = complex4.atan();
      Complex complex24 = complex6.subtract(3149.0641358878315);
      Complex complex25 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(574.57201, (-3.9793609609721186E-8));
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.ZERO.divide(complex0);
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.I.add(complex3);
      Complex complex6 = complex4.NaN.multiply(2209);
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = complex5.INF.acos();
      Complex complex8 = Complex.valueOf(2365.115359627);
      Complex complex9 = complex8.sqrt1z();
      List<Complex> list0 = complex4.ONE.nthRoot(2209);
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex10.I.multiply(complex4);
      Complex complex12 = Complex.valueOf((double) 2209, (-1961.540981));
      String string0 = complex12.I.toString();
      Complex complex13 = Complex.valueOf((double) 2209, (double) 2209);
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex13.INF.add(1.0);
      Complex complex16 = complex15.INF.add(complex14);
      Complex complex17 = complex16.NaN.exp();
      Complex complex18 = complex14.ONE.tanh();
      Complex complex19 = complex13.asin();
      Complex complex20 = complex0.tan();
      String string1 = complex5.toString();
      Object object0 = new Object();
      boolean boolean0 = complex10.equals(object0);
      boolean boolean1 = complex14.isNaN();
      boolean boolean2 = complex13.isInfinite();
      Complex complex21 = complex4.tan();
      Complex complex22 = complex3.acos();
      boolean boolean3 = complex5.equals("(NaN, NaN)");
  }
}
