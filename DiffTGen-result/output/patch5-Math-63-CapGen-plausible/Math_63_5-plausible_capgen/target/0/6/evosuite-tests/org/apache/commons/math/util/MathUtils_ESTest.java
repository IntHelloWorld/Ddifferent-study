/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:58:51 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1851);
      intArray0[1] = 52;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.gcd(1, 2707);
      int int2 = MathUtils.lcm((-469), 1);
      boolean boolean0 = MathUtils.equals((-1737.0), (double) (-469));
      double double0 = MathUtils.distance(intArray0, intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 1937;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1838;
      int int1 = MathUtils.sign(1838);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 18;
      int int1 = MathUtils.subAndCheck(18, (-2));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 18);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1493);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck((-1493), (-1493));
      int int2 = 1419;
      double double0 = MathUtils.scalb(0.0, 1419);
      int int3 = 1423;
      double double1 = MathUtils.factorialLog(1423);
      // Undeclared exception!
      MathUtils.factorialLog(2229049);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.hash(Double.NaN);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 2146959360, 2146959360);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog((short)0, (short)0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1;
      double double2 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) (short)1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3684.3552629);
      doubleArray0[1] = (-231.23);
      doubleArray0[2] = 3699.98273938352;
      doubleArray0[3] = (-1291.7296);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1055.894284052106);
      doubleArray0[7] = 1.625;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3699.98273938352;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.indicator(1260.92193011);
      int int0 = 6;
      float float0 = MathUtils.round(Float.NaN, 6, 6);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int1 = MathUtils.indicator(6);
      double double1 = MathUtils.scalb((-2709.333266633), 6);
      short short0 = MathUtils.sign((short)20);
      int int2 = MathUtils.compareTo((short)1, 1260.92193011, 1318.977322782);
      int int3 = (-300);
      try { 
        MathUtils.pow((int) (short)1, (-300));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-300)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-847.85), (-847.85));
      int[] intArray0 = new int[3];
      int int0 = 13;
      intArray0[0] = 13;
      intArray0[1] = 187;
      int int1 = 158;
      intArray0[2] = 158;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      long long0 = 113236205062349959L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(622L, 113236205062349959L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(1611.372761129439, Double.NaN, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)20);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte)20, 1627);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 20, k = 1,627
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb((-964.0), 0);
      long long0 = (-2309L);
      long long1 = MathUtils.mulAndCheck((long) 0, (-2309L));
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, 0L);
      long long2 = (-415L);
      long long3 = MathUtils.mulAndCheck((-415L), (-415L));
      int int0 = (-385);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-385));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -385
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 860.5591044;
      doubleArray0[1] = (-1163.111725296916);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2971.7785);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 8.0E298;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,163.112 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = MathUtils.round((-861.0131F), (-1994), 0);
      long long0 = MathUtils.gcd((long) 0, (-459L));
      double double0 = 0.0;
      double double1 = MathUtils.scalb(0.0, 0);
      int int0 = 19;
      double double2 = MathUtils.scalb(3555.4791, 19);
      long long1 = MathUtils.factorial(0);
      float float1 = (-535.2857F);
      float float2 = MathUtils.sign((-535.2857F));
      int int1 = MathUtils.gcd(0, 0);
      int int2 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) Float.NEGATIVE_INFINITY, 91.548591663235, 0.0);
      int int3 = MathUtils.lcm((-2665), 0);
      long long2 = MathUtils.addAndCheck((long) (-2665), 3952090531849364496L);
      long long3 = MathUtils.binomialCoefficient(0, (-2665));
      int int4 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.sign(1131L);
      double double0 = MathUtils.binomialCoefficientLog(3925, 67);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3925;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 336.129694444931;
      doubleArray0[3] = (double) 3925;
      doubleArray0[4] = (double) 67;
      doubleArray0[5] = (double) 1L;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.log(336.129694444931, (-76.34));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L, (double) 0L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = MathUtils.sign((short)64);
      double double0 = MathUtils.indicator(0.0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)64;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)64;
      double double1 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigInteger0.isProbablePrime(195);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.normalizeAngle(0.0, (-1.0));
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      int int0 = 6;
      int int1 = MathUtils.addAndCheck(6, 6);
      int int2 = 939;
      int int3 = MathUtils.mulAndCheck(6, 939);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2595.872264);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.sign((int) (byte)0);
      int int2 = MathUtils.gcd((int) (byte)0, 130);
      float float0 = MathUtils.round((float) 130, 67);
      int int3 = MathUtils.lcm(8, 130);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) (byte)0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger3, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = (-785L);
      long long1 = (-5034868814120038111L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-785L), (-5034868814120038111L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2630.5339, 2630.5339, 2630.5339);
      double double0 = MathUtils.factorialDouble(1438);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NaN, Double.POSITIVE_INFINITY, Double.NaN);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(2083.463545134133, Double.POSITIVE_INFINITY);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 2083.463545134133;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 2630.5339;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 2083.463545134133;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3162.46678006);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 885.50129;
      doubleArray0[3] = (-115.2911545818);
      doubleArray0[4] = (-1903.594579381106);
      doubleArray0[5] = 7.74258;
      doubleArray0[6] = 0.2857142686843872;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-\u221E < 885.501)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1690.86451);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1690.86451);
      doubleArray1[3] = (-1690.86451);
      doubleArray1[4] = (-1690.86451);
      doubleArray1[5] = (-1690.86451);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1690.86451);
      doubleArray1[8] = (-1690.86451);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 0.0);
      try { 
        MathUtils.normalizeArray(doubleArray2, (-0.25));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-22));
      double double0 = MathUtils.round((double) (byte) (-22), (int) (byte) (-22));
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, (-366L));
      short short0 = (short)91;
      short short1 = MathUtils.sign((short)91);
      int int0 = MathUtils.gcd((-24), (int) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 2694;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 2694, 2694);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,694, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.pow(2028, (long) 2028);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      int int1 = MathUtils.addAndCheck(2028, (int) (short)0);
      long long0 = MathUtils.sign((long) (short)0);
      int int2 = 165;
      int int3 = MathUtils.mulAndCheck(165, 2028);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 334620;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.addAndCheck((-2925L), (long) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (long) 2028);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.9736429850260626E-8;
      doubleArray0[1] = (-1.0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = (-3230);
      int int1 = MathUtils.sign((-3230));
      long long0 = MathUtils.addAndCheck((long) (-1), (long) (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = bigInteger1.toString();
      String string1 = bigInteger1.toString();
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.remainder(bigInteger0);
      int int2 = bigInteger0.bitCount();
      BigInteger bigInteger4 = bigInteger0.min(bigInteger1);
      double double0 = bigInteger0.doubleValue();
      try { 
        MathUtils.pow(bigInteger0, (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-224.238262762);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.sinh((-224.238262762));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 3;
      long long0 = MathUtils.pow((-2734L), 3);
      long long1 = MathUtils.gcd((-3763L), 543L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(38.00873956531829, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.hash((-2633.1414230857736));
      short short0 = (short)1643;
      short short1 = MathUtils.indicator((short)1643);
      int int3 = MathUtils.subAndCheck((-1472216368), (-1472216368));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-622);
      intArray0[1] = 845;
      intArray0[2] = 945;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-592);
      intArray0[6] = 2828;
      intArray0[7] = 2600;
      int[] intArray1 = new int[4];
      intArray1[0] = 2828;
      intArray1[1] = 2828;
      intArray1[2] = 0;
      intArray1[3] = (-622);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = 1206.0F;
      float float1 = MathUtils.sign(1206.0F);
      try { 
        MathUtils.pow((-1142), (-1142));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,142^-1,142)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      long long0 = 1088L;
      // Undeclared exception!
      try { 
        MathUtils.lcm((-9223372036854775808L), 1088L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-1100L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.round(0.0, (int) (byte)1, (int) (byte)1);
      byte byte1 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 18;
      int int1 = MathUtils.sign(18);
      int int2 = MathUtils.indicator(1);
      int int3 = MathUtils.addAndCheck(1, (-3891));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((-256.70419048), (double) (-3891));
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.round((double) (-3890), 0, 1);
      short short0 = MathUtils.indicator((short)0);
      float float1 = MathUtils.round((float) (short)1, 5);
      double double2 = MathUtils.binomialCoefficientLog(0, (-3890));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = bigInteger1.toString(5);
      int int4 = bigInteger1.bitLength();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (long) (-3891));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-3,891)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.round((-1303.50174936619), 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2260.588236752), (-1304.0), (-2260.588236752));
      double double1 = MathUtils.cosh(0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      double double3 = MathUtils.factorialLog(41);
      int int0 = MathUtils.pow(0, 41);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.abs();
      try { 
        MathUtils.pow(bigInteger0, (-897L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-897)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.scalb(1319.18921231014, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1319.18921231014;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1319.18921231014;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1319.18921231014;
      doubleArray1[5] = 1319.18921231014;
      doubleArray1[6] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      double double2 = MathUtils.binomialCoefficientLog(0, (-1297));
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1297);
      doubleArray2[1] = 1319.18921231014;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 1319.18921231014;
      doubleArray2[5] = 1319.18921231014;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray2, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,297 < 1,319.189)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2189.402, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short)0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, 59L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      float float0 = MathUtils.round(1366.725F, 2140, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 556.769730811978;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.indicator(2.2250738585072014E-308);
      int int0 = 2327;
      int int1 = MathUtils.pow(2327, 1307674368000L);
      int int2 = 100;
      int int3 = MathUtils.subAndCheck(100, (-448));
      int int4 = 46;
      try { 
        MathUtils.pow(46, (-448));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (46^-448)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-72));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = Integer.MIN_VALUE;
      intArray0[4] = (-3879);
      intArray0[5] = (-2055);
      intArray0[6] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.indicator(53);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3879);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-911.8184);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (-1779.0);
      doubleArray1[4] = (double) (-3879);
      doubleArray1[5] = (double) (-3879);
      doubleArray1[6] = (double) Integer.MIN_VALUE;
      doubleArray1[7] = (-911.8184);
      doubleArray1[8] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (53 > -1,779)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-30);
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = bigInteger4.pow((byte)37);
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger6 = bigInteger0.multiply(bigInteger4);
      BigInteger bigInteger7 = bigInteger3.not();
      boolean boolean0 = bigInteger3.isProbablePrime((-1));
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, bigInteger3);
      double double0 = MathUtils.sinh(1551.5);
      float float0 = MathUtils.sign((float) (byte)87);
      boolean boolean1 = MathUtils.equals((double) (-1), 29.74, (int) (byte)37);
      int int1 = MathUtils.mulAndCheck(153, (int) (byte) (-30));
      long long1 = MathUtils.subAndCheck(4607182418800017408L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) (byte)37;
      doubleArray0[2] = (double) (byte)37;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (byte)87;
      doubleArray0[5] = (double) (byte) (-30);
      doubleArray0[6] = (double) 4607182418800017408L;
      doubleArray0[7] = (double) (byte) (-30);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1087.486364769, 1087.486364769);
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1624), (-1624));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,624
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3741.94016;
      doubleArray0[1] = 781.66;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 781.66;
      doubleArray1[1] = 781.66;
      doubleArray1[2] = 3741.94016;
      doubleArray1[3] = 781.66;
      doubleArray1[4] = 781.66;
      doubleArray1[5] = 3741.94016;
      doubleArray1[6] = (-2993.13357);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.lcm((-1124), 13);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1124);
      doubleArray0[5] = (double) 14612;
      doubleArray0[6] = (double) (-1124);
      doubleArray0[7] = (double) (-1124);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-4737.31F), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-4737.31F);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-4737.31F);
      doubleArray0[3] = (double) (-4737.31F);
      doubleArray0[4] = (double) (-4737.31F);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.sinh(9474.6201171875);
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.pow(1811918301, 7910884519577875640L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("rK]Um0oqa^(Yo.&");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.rK]Um0oqa^(Yo.&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1561);
      long long0 = MathUtils.pow((long) 1561, (long) 1561);
      double double1 = MathUtils.sign(9921.756410802629);
      int int0 = MathUtils.sign(1561);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1561;
      doubleArray0[1] = (double) 1561;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 9921.756410802629;
      double double2 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-3225496481915940007L);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1561;
      double double3 = MathUtils.distance(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      double double4 = MathUtils.distance(doubleArray2, doubleArray0);
      int int1 = MathUtils.pow(1561, 1561);
      long long1 = MathUtils.subAndCheck((long) 1, (-880L));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0L);
      long long2 = MathUtils.binomialCoefficient((short)1, (short)1);
      long long3 = MathUtils.sign(779L);
      double double0 = MathUtils.round((double) 779L, (int) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4097.8);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.indicator((-490.02191));
      double double1 = MathUtils.round((-1.0), 705);
      double double2 = MathUtils.sinh(705);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      int int0 = bigInteger0.signum();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 705);
      short short0 = MathUtils.sign((short)589);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.sinh(1.304E19);
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      double double1 = MathUtils.indicator(0.0);
      int int1 = MathUtils.gcd(0, 0);
      int int2 = MathUtils.mulAndCheck(1638, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1638;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.addAndCheck((long) 0, (-1129L));
      long long2 = MathUtils.indicator(6402373705728000L);
      double double2 = MathUtils.factorialLog(0);
      boolean boolean1 = MathUtils.equals(227.2373612662909, (double) 1638, (double) (-1129L));
      int int4 = MathUtils.pow((-1268), 0L);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1497.62644705;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-2164.17451);
      doubleArray0[3] = (-2140.3);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.log(3.834E-20, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 574.0;
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.gcd(2819561105158720014L, 2819561105158720014L);
      int int0 = MathUtils.indicator(97);
      long long1 = MathUtils.gcd((long) 97, (long) 97);
      long long2 = MathUtils.pow(2819561105158720014L, 1271L);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-40);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2257));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,738,187,551,225,064,488^-2,257)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.subAndCheck((long) 0, 3628800L);
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(4030.6264, 318.03);
      double double1 = MathUtils.scalb((-3069.6), (-1803));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3069.6);
      doubleArray0[1] = (double) (-3628800L);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 4030.6264;
      doubleArray0[4] = (double) 0.0F;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = (-1041L);
      long long1 = MathUtils.lcm(0L, (-1041L));
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.indicator(1691.43224);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1691.43224;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck(565L, 565L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1691.43224, 1.0, 0.0);
      double double2 = MathUtils.factorialDouble(939);
      double double3 = MathUtils.scalb(0L, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(345.0144, 345.0144, 4426);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      double double4 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double5 = MathUtils.cosh(2157.833);
      long long1 = MathUtils.mulAndCheck(0L, 565L);
      int int0 = MathUtils.lcm(1123, 0);
      long long2 = MathUtils.binomialCoefficient(1123, 0);
      double double6 = MathUtils.binomialCoefficientLog(0, 0);
      float float0 = MathUtils.round(0.0F, 0);
      long long3 = MathUtils.gcd(210L, 1L);
      boolean boolean4 = MathUtils.equals(3.141592653589793, 1690.43224, (double) 4426);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(294, (-3461));
      int int0 = MathUtils.compareTo(0.0, 1665.0, 0.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 294;
      intArray0[1] = 294;
      intArray0[2] = (-1);
      intArray0[3] = (-3461);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.addAndCheck(843, 294);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-404.5181748944), 3.834E-20, 3.834E-20);
      boolean boolean1 = MathUtils.equals((double) (-3461), Double.NaN, 843);
      int int3 = MathUtils.addAndCheck((-1332), 447);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-2001.607278081), Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1122;
      int int1 = MathUtils.pow(1122, 549L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1087.2648), (double) 0);
      long long0 = MathUtils.indicator((long) 1122);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 1122);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,122
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        MathUtils.pow(2200L, (-2019L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,200^-2,019)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 39916800L);
      int int0 = MathUtils.gcd(198, 194);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      int int1 = 0;
      float float0 = MathUtils.round((float) 2, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, (double) 39916800L);
      try { 
        MathUtils.pow(594L, (-2329L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (594^-2,329)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.scalb(0.1818181574344635, 231);
      long long0 = MathUtils.gcd(752L, 2L);
      long long1 = MathUtils.gcd((-2644281811660520851L), 2424L);
      float float0 = MathUtils.indicator(3313.0F);
      long long2 = MathUtils.binomialCoefficient(4, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3313.0F;
      doubleArray0[1] = (double) (-2644281811660520851L);
      doubleArray0[2] = (double) 2L;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.pow(4, 231);
      double double3 = MathUtils.sinh(6.2743140192675E68);
      long long3 = MathUtils.factorial(0);
      double double4 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.compareTo(3.141592653589793, 0.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      int int1 = MathUtils.indicator(836);
      long long0 = MathUtils.sign((-2537L));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.log((-1.9841269659586505E-4), 3398.33);
      double double1 = MathUtils.factorialLog(15);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3398.33;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 15;
      doubleArray0[7] = (-1.9841269659586505E-4);
      doubleArray0[8] = (-1.9841269659586505E-4);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 4268.631272);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-888L), (-888L));
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 66;
      intArray0[2] = 0;
      intArray0[3] = 418;
      intArray0[4] = (-2665);
      intArray0[5] = 157;
      intArray0[6] = 155;
      intArray0[7] = (-3386);
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-91);
      intArray0[1] = 0;
      int int0 = 2938;
      intArray0[2] = 2938;
      intArray0[3] = 1115;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.scalb(0.0, 2938);
      long long0 = MathUtils.pow(5648769086999809661L, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1115, (double) 0);
      long long1 = MathUtils.mulAndCheck(5648769086999809661L, 1L);
      double double1 = MathUtils.cosh(1115);
      short short0 = MathUtils.indicator((short) (-927));
      int int2 = MathUtils.indicator((-1287));
      boolean boolean1 = MathUtils.equalsIncludingNaN(1537.033157, 388.928298, 2512.67917);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-736));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -736
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-1705);
      float float0 = MathUtils.sign(3026.6F);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.cosh(1756.56753338);
      long long0 = MathUtils.sign((-302932621132653753L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(" p~r;4@L.w");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection. p~r;4@L.w
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(3181);
      boolean boolean0 = MathUtils.equals(0.0, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2882.384;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 3181;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 3181, (-1534L));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1201.79662), (-1201.79662), 3181);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.2499999997677497), (-21.45), 731);
      int[] intArray0 = new int[5];
      intArray0[0] = 731;
      intArray0[1] = 731;
      intArray0[2] = 731;
      intArray0[3] = 731;
      intArray0[4] = 731;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-1387);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1387));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,387
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(282.50442, (-1655.23884146286));
      boolean boolean1 = MathUtils.equals((-0.16666666666666666), (-0.16666666666666666));
      double double0 = MathUtils.factorialDouble(0);
      short short0 = MathUtils.sign((short) (-3177));
      int int0 = MathUtils.indicator((-3259));
      double double1 = MathUtils.cosh((-1655.23884146286));
      boolean boolean2 = MathUtils.equals(0.0, Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2935.37669281652);
      doubleArray0[1] = 382.612172;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign(1830.61F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1624), (-1624));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,624
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = MathUtils.round(491.86002F, 208);
      // Undeclared exception!
      try { 
        MathUtils.factorial(208);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.factorialLog(62);
      int int0 = MathUtils.indicator(62);
      boolean boolean0 = MathUtils.equals((double) 62, 0.0);
      double double1 = MathUtils.binomialCoefficientLog(62, 31);
      double double2 = MathUtils.round(0.0, 66);
      long long0 = MathUtils.pow((-2436L), 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      double double3 = bigInteger0.doubleValue();
      boolean boolean1 = bigInteger0.equals("");
      double double4 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 62);
      double double5 = MathUtils.cosh(62.0);
      long long1 = MathUtils.pow(1010L, (long) 66);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.sign(1826.0);
      long long0 = MathUtils.indicator((-3357L));
      long long1 = MathUtils.gcd((-3512299194304650054L), (-3357L));
      double double1 = MathUtils.round((-1630.8), 0);
      double double2 = MathUtils.round((-1031.124804522144), 0);
      double double3 = MathUtils.round(713.9297, (-1148), 0);
      byte byte0 = MathUtils.indicator((byte)94);
      byte byte1 = MathUtils.sign((byte) (-68));
      long long2 = MathUtils.binomialCoefficient(0, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.pow(4576, 243);
      short short0 = (short) (-647);
      short short1 = MathUtils.indicator((short) (-647));
      int int1 = (-7360);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-7360));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -7,360
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-17));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(5.0, (-1103.42965), (-1936));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 22);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3962.3482772);
      doubleArray0[2] = (-78.581);
      doubleArray0[3] = 1.570796251296997;
      doubleArray0[4] = 0.14982303977012634;
      doubleArray0[5] = (-801.04835);
      doubleArray0[6] = (-786.0);
      doubleArray0[7] = (-3035.0);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-786.0));
      boolean boolean0 = MathUtils.equals(0.14982303977012634, 5291.75045056022);
      int int0 = MathUtils.gcd((-1366), (-1366));
      int int1 = MathUtils.pow(1366, 0);
      int int2 = 5977;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-701), 5977);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -701, k = 5,977
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2781.0;
      doubleArray0[1] = (-5582.208445279311);
      doubleArray0[2] = (-3476.629);
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 3627;
      int int1 = (-2560);
      // Undeclared exception!
      try { 
        MathUtils.round((-5582.208445279311), 3627, (-2560));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.SAFE_MIN;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = 574.0;
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm((-2256), (-2256));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-373));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -373
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, (-1791.19427856), 2378.399);
      double double0 = MathUtils.round(0.0, (-234));
      try { 
        MathUtils.pow(9154082963658192752L, (-2004L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (9,154,082,963,658,192,752^-2,004)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.hash(544.45);
      long long0 = MathUtils.gcd((long) (-652699133), (-571L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-652699133);
      doubleArray0[1] = (double) (-571L);
      doubleArray0[2] = 2454.4;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 544.45;
      doubleArray1[1] = 2454.4;
      doubleArray1[2] = (-154.793435049179);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(946L, 946L);
      int int0 = MathUtils.pow((-2479), 0L);
      double double0 = MathUtils.normalizeAngle(1479.9259259, (-1.7168146928204135));
      int int1 = MathUtils.pow(75, 1660);
      double double1 = MathUtils.scalb(0.5, (-1571));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 700.4839147;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 700.4839147);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      MathUtils.checkOrder(doubleArray1);
      int int1 = MathUtils.mulAndCheck(53, 53);
      double double0 = MathUtils.log(700.4839147, (-1321.8059028));
      float float0 = MathUtils.indicator((float) 2809);
      long long0 = MathUtils.pow((-3190L), 2809);
      int int2 = MathUtils.mulAndCheck(1704, 0);
      long long1 = MathUtils.lcm(2L, 0L);
      int int3 = MathUtils.subAndCheck((-1182), (-1182));
      int int4 = MathUtils.compareTo((-1630.373561), 0, 857.35383271);
      long long2 = MathUtils.pow((-3190L), 2L);
      double double1 = MathUtils.binomialCoefficientDouble(1704, 0);
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray0);
      short short0 = MathUtils.indicator((short) (-321));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = (-2047.330857689);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2047.330857689));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, 0L);
      int int0 = (-3351);
      int int1 = 101;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3351), 101);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,351, k = 101
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = (-3311);
      try { 
        MathUtils.pow(0L, (-3311));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,311)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-1100L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.lcm((-2644281811660520851L), 0L);
      int int0 = MathUtils.subAndCheck((int) (byte)0, 16);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(114, 114);
      long long1 = MathUtils.sign(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      byte byte0 = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-98);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.shiftLeft((byte) (-4));
      byte[] byteArray1 = bigInteger1.toByteArray();
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      int int0 = bigInteger0.compareTo(bigInteger3);
      BigInteger bigInteger4 = bigInteger0.shiftLeft(0);
      int int1 = bigInteger0.signum();
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-65,631,586^-65,631,586)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_CEILING");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_CEILING
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.sinh(16.34581);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6278632.873482902;
      doubleArray0[1] = 16.34581;
      doubleArray0[2] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(272L, 272L);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.gcd(3750L, 3750L);
      double double0 = MathUtils.round(Double.NaN, 5747);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 5747;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 3750L;
      doubleArray1[3] = (double) 3750L;
      doubleArray1[4] = (double) 5747;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double1 = MathUtils.sign(Double.NaN);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (double) 3750L;
      doubleArray2[2] = (double) 5747;
      doubleArray2[3] = (double) 3750L;
      int int0 = MathUtils.hash(doubleArray2);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1100637055));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,100,637,055
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-1.0F));
      int int0 = MathUtils.subAndCheck((-809), 61);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.scalb(0.11113807559013367, 3096);
      double double1 = MathUtils.indicator(0.11113807559013367);
      long long0 = MathUtils.indicator((-5034868814120038111L));
      float float0 = MathUtils.indicator((float) 3096);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 3096, 1233.440379694, 3096);
      int int0 = MathUtils.pow(16, 16);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1493);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck((-1493), 0);
      int int2 = 1419;
      double double0 = MathUtils.scalb(0.0, 1419);
      double double1 = MathUtils.factorialLog(1423);
      double double2 = MathUtils.factorialLog(0);
      float float0 = MathUtils.round((float) 0, 0);
      int int3 = MathUtils.sign(0);
      int int4 = MathUtils.addAndCheck(0, 2);
      double double3 = 1.304E19;
      double double4 = MathUtils.log(0, 1.304E19);
      int int5 = MathUtils.hash(1.304E19);
      float float1 = MathUtils.indicator((float) 0);
      short short0 = MathUtils.indicator((short)6);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-1209L));
      boolean boolean0 = MathUtils.equals((double) 0L, (double) (-1209L), (double) 0L);
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.binomialCoefficientDouble(10, 10);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = MathUtils.indicator(1299.13F);
      long long0 = MathUtils.lcm(0L, (-4267615245585081135L));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 850.9;
      doubleArray0[1] = 1.25;
      doubleArray0[2] = 1249.329845422881;
      doubleArray0[3] = 1113.52363;
      double double0 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short)138);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.factorialLog((short)1);
      double double3 = MathUtils.factorialLog((short)1);
      boolean boolean0 = MathUtils.equals(3812.55656, 1877.4430243639183, 0.99);
      double double4 = MathUtils.factorialDouble((short)138);
      double double5 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double6 = MathUtils.sign((-6.032174644509064E-23));
      long long0 = MathUtils.pow(1L, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.pow((-7278142539171889152L), 0);
      long long1 = MathUtils.pow((-577L), 0L);
      double double1 = MathUtils.sign(6.0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      short short0 = (short) (-247);
      short short1 = MathUtils.indicator((short) (-247));
      int int0 = (-363);
      try { 
        MathUtils.pow((int) (short) (-247), (-363));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-247^-363)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = MathUtils.sign((short)157);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)157;
      double double0 = (-3992.260295269851);
      doubleArray0[1] = (-3992.260295269851);
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)157;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (-4455.0);
      doubleArray0[8] = 3324.98861;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (157 >= -3,992.26)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = (-459);
      int int1 = MathUtils.subAndCheck((-459), 186);
      long long0 = (-2338L);
      long long1 = MathUtils.gcd(1307674368000L, (-2338L));
      float float0 = 988.78357F;
      // Undeclared exception!
      try { 
        MathUtils.round(988.78357F, 186, (-459));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -459, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 17;
      long long0 = MathUtils.pow(0L, 17);
      double double0 = MathUtils.scalb((-210.73), 17);
      int int1 = MathUtils.pow(17, (long) 17);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      double double1 = 2.85040095144011776E17;
      int int2 = MathUtils.hash(2.85040095144011776E17);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-2.762080256E7);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (-2.762080256E7);
      doubleArray0[8] = (double) 0L;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int3 = MathUtils.sign(130);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-210.73), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 1308;
      try { 
        MathUtils.pow(1308, (-1727L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,308^-1,727)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = MathUtils.sign((-267.1349F));
      double double0 = MathUtils.sign((double) (-1.0F));
      double double1 = MathUtils.binomialCoefficientDouble(1585, 0);
      int int0 = MathUtils.addAndCheck(973, 0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.lcm(1, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.scalb(0.0, (byte)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.indicator(0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd((-225), (-1956));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 1.225743062930824E-8, 0.0);
      long long0 = MathUtils.pow((long) (-1), 1307674368000L);
      float float0 = MathUtils.round((float) 1L, (-1));
      int int1 = MathUtils.lcm((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      int int1 = MathUtils.indicator(836);
      long long0 = MathUtils.sign((long) 0);
      short short0 = MathUtils.indicator((short)257);
      int int2 = MathUtils.pow(2139, 1493L);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1030, 1030);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.compareTo(1520.309007511252, 1520.309007511252, 0.0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.factorialLog(3994);
      int int0 = MathUtils.subAndCheck(0, 185);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)15);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)15;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.lcm(91L, (-2481L));
      int int1 = MathUtils.mulAndCheck((-2769), 627);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.log(1025.8, (-3108.52));
      boolean boolean0 = MathUtils.equals(1025.8, Double.NaN, (-3108.52));
      int int0 = MathUtils.compareTo(0.0, 1025.8, 1025.8);
      double double1 = MathUtils.factorialDouble(719);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.indicator(4607182418800017408L);
      double double0 = MathUtils.binomialCoefficientLog(4129, 2317);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.pow(816L, 4129);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.indicator(1.2958646899018938E-9);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.2958646899018938E-9;
      double double1 = MathUtils.safeNorm(doubleArray0);
      try { 
        MathUtils.pow((-1854L), (-509));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,854^-509)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.pow((int) (short)0, (int) (short)0);
      int int1 = MathUtils.sign((int) (short)0);
      int int2 = MathUtils.addAndCheck(0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.log(7.549789948768648E-8, 11.0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.compareTo(3.834E-20, Double.NEGATIVE_INFINITY, 2219.54165973065);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1054.433645486);
      doubleArray0[0] = (-1054.433645486);
      doubleArray0[1] = 0.0;
      double double1 = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      int int0 = (-369);
      try { 
        MathUtils.pow((-369), (long) (-369));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-369^-369)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(16, 16);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 32;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 32, (long) 16);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int1 = 63;
      int int2 = MathUtils.gcd(1107, 63);
      float float0 = MathUtils.indicator((-195.3F));
      double double1 = MathUtils.factorialDouble(0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 1107, 32);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 32, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.sign((-1090L));
      double double0 = MathUtils.factorialLog(67);
      int int0 = MathUtils.hash(1481.37111);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 67;
      doubleArray0[1] = 217.73693411395422;
      doubleArray0[2] = (double) 1154851228;
      doubleArray0[3] = (double) 1154851228;
      doubleArray0[4] = (double) (-1090L);
      doubleArray0[5] = 217.73693411395422;
      doubleArray0[6] = (double) 67;
      doubleArray0[7] = 1481.37111;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1,154,851,228 >= 1,154,851,228)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = 0.19999954120254515;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.hash(15.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double0 = MathUtils.sign(0.6931470632553101);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.6931470632553101, 0.0, 491.45);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((-2832L), 40320L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.hash(3119.93273279808);
      long long0 = MathUtils.mulAndCheck((long) (-812687217), (long) (-812687217));
      try { 
        MathUtils.pow(3, (-397L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3^-397)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)92;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.flipBit(66);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) (byte)92);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.gcd(1841, 4897);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1841;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 4897;
      doubleArray0[3] = (double) 4897;
      doubleArray0[4] = (double) 4897;
      doubleArray0[5] = (double) 1841;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(4897.0, (double) 1841, (double) 1);
      boolean boolean2 = MathUtils.equals(0.0, 3108.397, (double) 4897);
      double double0 = MathUtils.binomialCoefficientDouble(4897, 1841);
      int int1 = MathUtils.hash(Double.POSITIVE_INFINITY);
      double double1 = MathUtils.binomialCoefficientDouble(2146435072, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      short short0 = bigInteger0.shortValueExact();
      int int2 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger3 = bigInteger0.setBit((byte)0);
      BigInteger bigInteger4 = bigInteger0.pow(187);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.sign((long) 4897);
      int int3 = MathUtils.sign(4897);
      int int4 = MathUtils.gcd(187, 0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1109.3616614), 4351.1, 9.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(740.7579125173065, 10.0, 2277);
      double double0 = MathUtils.scalb(3.141592653589793, 0);
      double double1 = MathUtils.scalb((-3401.89215576751), 0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2277);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = 1416;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0, 1416);
      long long0 = MathUtils.mulAndCheck((long) 1416, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3103, 3103);
      long long0 = MathUtils.pow((long) 6206, 20922789888000L);
      byte byte0 = MathUtils.sign((byte) (-73));
      double double0 = MathUtils.normalizeAngle(3103, 3103);
      int[] intArray0 = new int[1];
      intArray0[0] = 6206;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.sign((long) (byte) (-73));
      double double1 = MathUtils.scalb((-1640.93324959979), 4);
      long long2 = MathUtils.subAndCheck((long) 3103, 0L);
      short short0 = MathUtils.sign((short) (byte) (-73));
      double double2 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round(6091.15F, 1639);
      float float1 = MathUtils.round((float) 0L, (-1861), 0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1588;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-953), 1588);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -953, k = 1,588
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.2246467991473532E-16);
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.sign(0.0);
      float float0 = MathUtils.round(0.0F, (-138), 0);
      boolean boolean1 = MathUtils.equals(2.404307984052299E-9, 753.13, 819);
      float float1 = MathUtils.round((float) 819, (-138));
      double double3 = MathUtils.indicator((double) Float.POSITIVE_INFINITY);
      int int0 = MathUtils.pow(681, 20922789888000L);
      int int1 = MathUtils.addAndCheck((-1799), 0);
      int int2 = MathUtils.indicator(1878);
      boolean boolean2 = MathUtils.equals(10.0, 0.0);
      short short0 = MathUtils.sign((short)1500);
      double double4 = MathUtils.safeNorm(doubleArray0);
      int int3 = MathUtils.indicator(3030);
      // Undeclared exception!
      try { 
        MathUtils.round(1307.057316301684, (-5035), 971767809);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.pow(2187, 2187);
      short short0 = MathUtils.indicator((short)637);
      long long0 = MathUtils.sign((long) (short)1);
      int int1 = MathUtils.pow(169, 860429523);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, Double.NEGATIVE_INFINITY, 1712.32);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.log(1712.32, 4.455505956692757);
      int int2 = MathUtils.pow((-1025), (long) 2187);
      long long1 = MathUtils.subAndCheck((-469L), 1L);
      boolean boolean1 = MathUtils.equals((-1213.358396), (double) 2187);
      int[] intArray0 = new int[5];
      intArray0[0] = 742;
      intArray0[1] = (-579);
      intArray0[2] = 169;
      intArray0[3] = (int) (short)1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long2 = MathUtils.subAndCheck((long) 742, (long) (short)637);
      byte byte0 = MathUtils.indicator((byte)5);
      double double2 = MathUtils.indicator(1.304E19);
      try { 
        MathUtils.pow(1, (-639));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-639)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = (-1466);
      int int1 = MathUtils.addAndCheck((-1466), (-1466));
      int int2 = (-2414);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-1466), 1.304E19, (-2414));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 5);
      int int1 = MathUtils.mulAndCheck(0, 0);
      short short0 = MathUtils.indicator((short) (-1170));
      long long0 = MathUtils.sign((-4169L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4169L);
      doubleArray0[1] = (double) (short) (-1170);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short) (-1170);
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      boolean boolean0 = MathUtils.equals((-4169.0), (-1170.0));
      double double1 = MathUtils.factorialLog(5);
  }
}
