/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 16:02:03 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.1921056801463227E-8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 21316689;
      doubleArray0[2] = (double) 21316689;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 21,316,689)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 9;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (9 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 12;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1024;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 18030.3050564842;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-462);
      int[] intArray1 = new int[2];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-462);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2147483648L);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.pow((-2136L), 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.pow(1030, 1030);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, (-2907), 0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-2802.99098);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.lcm((-168), (-168));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.lcm((-1869), 390);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = MathUtils.indicator((short)128);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.indicator((long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)93);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-2147483648L));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(66);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[3];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[3];
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 10.0, 10.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 0.0F, (-652.47233666));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.cosh((-1076.732494098));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 1307674368000L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4294967295L, 1347L);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(6L, 0L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(901, (-2014));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 2326);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.sinh((-23.818));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1498, 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.round((double) 1632L, 0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.round((-412.21206581), 331, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.round((-1363.031805), (-1723));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3348);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 172);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)17;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)63);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.pow((long) (byte)1, 1979L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.pow((long) 9, 387420489L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.pow(2103L, 1734);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.pow(915L, 237);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.pow(1, 1841L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.pow(2039065177, (long) 2039065177);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.pow(15, 0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(175.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(4617, 4617);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(14, (-3886));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.log((byte)0, 1L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.log(185, 0L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.1921056801463227E-8;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.hash(110.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = MathUtils.hash((-1.0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      double double0 = MathUtils.distanceInf(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      double[] doubleArray1 = new double[3];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 160;
      int[] intArray1 = new int[5];
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2326, (-1330));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-412.21206581), 3876, 1102);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 600.0522645448643);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(4194304);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.2250738585072014E-308, 10.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[4];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 43);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 43
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(279L, 9193070505571053912L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-118L), 932L);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-20L), (-20L));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-1727L), 4607182418800017408L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1050L, 5040L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-3936), 0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = MathUtils.indicator((float) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.gcd((long) 8, (-504L));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.gcd(3492, 3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.gcd(2, 2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.factorialLog(2623);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.factorial(8);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.4384203044354907E-8, 2.4384203044354907E-8, 104);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1280.853560652532), (-2802.99098), (int) (byte)18);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 31, 2.4384203044354907E-8, 258.43080849);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 3.834E-20, 0.0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-940.755698), (-940.755698), (-940.755698));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1009.0150187), (-1009.0150187));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1011, 37);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1248, (-393));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(14, (-2147483647));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = Double.NaN;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 9218868437227405312L;
      doubleArray0[3] = (double) 9218868437227405312L;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 263.3971712308269;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1631.8062;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,631.806)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 753.241108;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2271L);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        MathUtils.pow((BigInteger) null, (long) (byte) (-73));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-73)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 339100609);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-107));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-107)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathUtils.pow(1L, (-1569L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,569)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 2048L);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-1030));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,030)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.pow((long) (-54404), 2166);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        MathUtils.pow((-158), (-3018L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-158^-3,018)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.pow((int) (short)1458, 4530L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        MathUtils.pow((-1799), (-458));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,799^-458)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((long) 0, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(685, 685);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-3054));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = MathUtils.sign((short)1458);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.sign((-1735L));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.sign(1L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = MathUtils.sign(1539);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.sign((int) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = MathUtils.sign((float) 0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.sign(1.225743062930824E-8);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = MathUtils.sign((-0.16624879837036133));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)9);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-73));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float float0 = MathUtils.round((-2550.5525F), 0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float float0 = MathUtils.round((float) 6, 0, 6);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float float0 = MathUtils.round((float) 1L, 6, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float float0 = MathUtils.round((-120.74995F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.19999998807907104);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1381.902957));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathUtils.normalizeArray(doubleArray0, Float.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = MathUtils.scalb((-0.16624879837036133), 61);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(49L, 0L);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-590L), 4659690206377347392L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long long0 = MathUtils.lcm((-5034868814120038111L), (-5034868814120038111L));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long long0 = MathUtils.lcm((long) 1483, (long) (-383));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1079738368, 1079738368);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long long0 = MathUtils.lcm((long) 1, 0L);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = MathUtils.lcm(220, 0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 1306);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1467));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long long0 = MathUtils.indicator((-4790L));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = MathUtils.indicator(66);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = MathUtils.indicator((-1433));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-1263.16F), 0, (-938));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -938, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double double0 = MathUtils.indicator((double) (-1));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double double0 = MathUtils.indicator(1667.6563299);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-97));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long long0 = MathUtils.gcd((-1464L), (-1464L));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long long0 = MathUtils.gcd((-20L), 2257L);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long long0 = MathUtils.gcd(1664L, 0L);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = MathUtils.gcd((int) (byte) (-1), (-139));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = MathUtils.gcd((-3378), 0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 10);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-143));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -143
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1346);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2030));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,030
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double double0 = MathUtils.factorialLog((byte)0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[8];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(178.627349, 178.627349, 61);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2569.213, 2317);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-1723));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.125, 30.999999975615797, (double) 1464L);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, (-762.7760909), 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, 0.0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (double) 1.0F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = MathUtils.compareTo((-493.32365644), 1.1102230246251565E-16, 1.0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = MathUtils.compareTo((-799), Double.NaN, 97);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-899), (-899));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -899
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1864), 2317);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,864, k = 2,317
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1348, 1179);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2467, 37);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(4, (-3544));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(17, 0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(324, 153);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(6, 6);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1463, 80);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble((byte)0, (-3886));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(9, 0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient((byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2312L), 523L);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(3929L, (-2644281811660520851L));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double double0 = MathUtils.log(0.058823529411764705, 0.0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double double0 = MathUtils.round(263.3971712308269, 14);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double double0 = MathUtils.cosh(99.915913631581);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 2265L);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double double0 = MathUtils.sinh(0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float float0 = MathUtils.round((float) 0, 8);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
  }
}
