/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:58:51 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(20, 20);
      long long0 = MathUtils.factorial(20);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      long long1 = MathUtils.lcm((long) 20, 0L);
      long long2 = MathUtils.pow(0L, 400);
      double double0 = MathUtils.indicator((double) 400);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte)0, 1445, 20);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(686, 686);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 686;
      intArray0[3] = 686;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 109;
      int int1 = (-368);
      double double0 = MathUtils.binomialCoefficientDouble(109, (-2742));
      double double1 = MathUtils.binomialCoefficientDouble(109, (-368));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.cosh(70.0);
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.sign(9L);
      int[] intArray0 = new int[8];
      intArray0[0] = 2146613601;
      intArray0[1] = 1231;
      intArray0[2] = 31;
      intArray0[3] = 63;
      intArray0[4] = 2768;
      intArray0[5] = (-2242);
      intArray0[6] = 256;
      intArray0[7] = (-2635);
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(31, 1064);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.pow(1064, (long) 32984);
      int int2 = MathUtils.gcd(18, 18);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1064;
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = 0.003;
      doubleArray0[4] = (double) 18;
      doubleArray0[5] = (double) 1064;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(261, 225);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 225, 0.0, (double) 261);
      byte byte0 = MathUtils.sign((byte)70);
      short short0 = MathUtils.sign((short) (byte)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 225;
      doubleArray0[1] = (double) 261;
      doubleArray0[2] = (double) 58725;
      doubleArray0[3] = (double) (short)1;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.indicator((double) (byte)70);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.signum();
      BigInteger bigInteger1 = bigInteger0.pow(216);
      int int2 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.not();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 58725;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) (short)1;
      doubleArray1[3] = 1953.4446904112629;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (1 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.sign(819);
      int int1 = MathUtils.lcm(1, 4003);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 3409.280875;
      doubleArray0[2] = (double) 4003;
      doubleArray0[3] = (double) 4003;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 4003;
      doubleArray0[6] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(4003);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-680.7023053847));
      long long0 = MathUtils.indicator((-696L));
      byte byte0 = MathUtils.indicator((byte)52);
      long long1 = MathUtils.pow((-696L), 4003);
      int[] intArray0 = new int[4];
      intArray0[0] = 4003;
      intArray0[1] = 819;
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)1;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.pow(4003, 819);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 3409.280875);
      // Undeclared exception!
      try { 
        MathUtils.round(2.2250738585072014E-308, 4003, (-682));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-673.0290717717116), 0.07692307692307693);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-673.0290717717116), 0.07692307692307693);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck((-4035746434778044925L), (-4035746434778044925L));
      long long1 = MathUtils.sign(3312L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)20;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = (-2770);
      double double0 = MathUtils.TWO_PI;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck((-2770), (-2770));
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-2770);
      intArray0[2] = 0;
      intArray0[3] = (-2770);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2770);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.subAndCheck((-4341L), (-2903L));
      double double0 = 0.0;
      double double1 = MathUtils.round(0.0, 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-142.7996216);
      doubleArray0[3] = (double) (-4341L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.indicator((long) 0);
      double double0 = MathUtils.normalizeAngle(1L, 2.2250738585072014E-308);
      int int1 = MathUtils.compareTo(0, 2.2250738585072014E-308, 1.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int2 = bigInteger0.bitCount();
      BigInteger bigInteger1 = bigInteger0.negate();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger2 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2641);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1309.004789;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-711.786067);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.sinh((-711.786067));
      double double3 = MathUtils.sinh(0.7853981633974483);
      long long0 = MathUtils.lcm(0L, 0L);
      long long1 = MathUtils.mulAndCheck(0L, (-4267615245585081135L));
      int int0 = MathUtils.sign((-1549));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,309.005 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.sign(928.24226);
      double double1 = MathUtils.factorialDouble(3055);
      int int0 = MathUtils.gcd(3055, (-947));
      int[] intArray0 = new int[4];
      intArray0[0] = 3332;
      int int1 = 2194;
      intArray0[1] = 2194;
      intArray0[2] = 3055;
      intArray0[3] = (-947);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientLog(2194, (-947));
      long long0 = MathUtils.sign((long) 0);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)4);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)4;
      intArray0[3] = (int) (byte)4;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(1090);
      boolean boolean0 = MathUtils.equals((double) 1, 0.0);
      double double1 = MathUtils.binomialCoefficientDouble(4, 1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = MathUtils.normalizeAngle((-806.8), 1.304E19);
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.pow((long) 1090, (long) 4);
      double double3 = MathUtils.factorialLog((short)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-965.2972965469025);
      doubleArray0[3] = 4.0;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) (byte)4;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)55);
      double double0 = MathUtils.log((-5030.0), (byte)55);
      double double1 = MathUtils.scalb(0.0, (-1));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)55;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = bigInteger0.isProbablePrime((byte)1);
      BigInteger bigInteger1 = bigInteger0.negate();
      float float0 = bigInteger0.floatValue();
      int int0 = bigInteger0.signum();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger2);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) (byte)1);
      double double2 = MathUtils.sinh((-1379.664747567034));
      int int1 = MathUtils.pow((-1), 2537L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.sign((-160));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-160);
      doubleArray0[1] = (double) (-160);
      doubleArray0[2] = (double) (-160);
      doubleArray0[3] = (double) (-160);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-1831.921175);
      doubleArray0[6] = (double) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int1 = 769;
      int int2 = MathUtils.addAndCheck((-160), 769);
      int int3 = MathUtils.indicator(769);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.sign(22L);
      int int4 = (-561);
      int int5 = MathUtils.indicator((-561));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      byte byte0 = MathUtils.indicator((byte) (-9));
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigInteger0.testBit(0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int1 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 214);
      int int2 = MathUtils.addAndCheck((int) (byte) (-1), (int) (byte) (-9));
      boolean boolean1 = MathUtils.equals((double) 214, 0.0);
      byte byte1 = MathUtils.sign((byte) (-18));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 214;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = 4053.2698;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 4053.2698);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1481.537730224701;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sign(Double.NaN);
      double double1 = MathUtils.sign(0.0);
      float float0 = MathUtils.indicator((-4478.72F));
      short short0 = (short) (-428);
      short short1 = MathUtils.sign((short) (-428));
      double double2 = MathUtils.normalizeAngle(Double.NaN, 1481.537730224701);
      // Undeclared exception!
      MathUtils.factorialLog(1633687266);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.indicator((-285L));
      long long1 = MathUtils.indicator(574L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.pow(10);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 2467);
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger2);
      long long2 = MathUtils.binomialCoefficient(14, (-2170));
      double double0 = MathUtils.cosh(0.0);
      long long3 = MathUtils.gcd(0L, 450L);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 14);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 2467;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 450L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,467 >= 14)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2873.8397627278277;
      doubleArray0[0] = 2873.8397627278277;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.1430250008909141E-8;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      long long0 = MathUtils.indicator(1166L);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.cosh((byte)0);
      double double1 = MathUtils.sign((-1629.5));
      float float0 = MathUtils.round((float) (byte)0, 731);
      long long0 = MathUtils.binomialCoefficient((byte)0, 0);
      long long1 = MathUtils.binomialCoefficient((byte)0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0.0F, (double) (byte)0, 31);
      long long2 = MathUtils.addAndCheck((long) 31, 1L);
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb((byte)0, 4194304);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2791.8057405, 2791.8057405, 415);
      float float0 = MathUtils.indicator((float) 415);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1499.491528), 2817.9466197);
      long long0 = MathUtils.gcd((-397L), 0L);
      boolean boolean2 = MathUtils.equals(2817.9466197, 0.0);
      int int0 = MathUtils.sign(109);
      int int1 = MathUtils.compareTo(0.0, 654.3, 109);
      boolean boolean3 = MathUtils.equalsIncludingNaN(9.1, 1.0, 1);
      double double0 = MathUtils.cosh(0.0);
      double double1 = MathUtils.binomialCoefficientLog(1, (-1));
      short short0 = MathUtils.indicator((short)2547);
      int int2 = MathUtils.gcd(59, 14);
      short short1 = MathUtils.sign((short)2547);
      long long1 = MathUtils.subAndCheck((long) 109, (-45L));
      long long2 = MathUtils.addAndCheck((-397L), (long) 109);
      double double2 = MathUtils.distance(doubleArray0, (double[]) null);
      int int3 = MathUtils.gcd(1, 0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-4.9E-324), (-4.9E-324));
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble((byte)1, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2820.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-4.9E-324);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.getLowestSetBit();
      int int2 = 31;
      BigInteger bigInteger1 = bigInteger0.flipBit(31);
      try { 
        MathUtils.pow(bigInteger0, (-86L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-86)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.gcd(455, 1088);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 455;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1088;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      byte byte0 = MathUtils.sign((byte)24);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign((long) 1088);
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      boolean boolean0 = MathUtils.equals(1.0, 4538.25899783642, 455);
      int int1 = MathUtils.compareTo(0.0, 1.4142135623730951, 2.2250738585072014E-308);
      int int2 = MathUtils.sign(66);
      short short0 = MathUtils.sign((short) (byte)24);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.gcd((long) 66, 6L);
      byte byte1 = MathUtils.sign((byte)24);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.round(16.0, (-1334));
      double[] doubleArray2 = new double[0];
      double double5 = MathUtils.safeNorm(doubleArray2);
      double double6 = MathUtils.safeNorm(doubleArray0);
      int int3 = MathUtils.indicator((int) (short)1);
      int int4 = MathUtils.compareTo(454.0, 1, (-1911.07476453264));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.pow(1844L, 19);
      double double0 = MathUtils.log(5635486649904267264L, 1.073741824E9);
      long long1 = MathUtils.pow(5635486649904267264L, 1844L);
      int int0 = MathUtils.gcd(19, 19);
      int int1 = MathUtils.gcd(19, (-390));
      long long2 = MathUtils.lcm(2147483648L, 1150L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-334.364212905), 1.073741824E9);
      long long3 = MathUtils.gcd(2461L, 5635486649904267264L);
      float float0 = MathUtils.round((float) 1L, 830);
      int int2 = MathUtils.mulAndCheck((-3986), 19);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.2857142686843872;
      doubleArray0[2] = 987.4369933495507;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3);
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = bigInteger1.clearBit(3);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger1);
      int int0 = bigInteger0.compareTo(bigInteger4);
      try { 
        MathUtils.pow(bigInteger0, (-732L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-732)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2820.0);
      doubleArray0[6] = (-4.9E-324);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.getLowestSetBit();
      try { 
        MathUtils.pow(bigInteger0, (-86L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-86)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-939.10945), (-939.10945), (-939.10945));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-939.10945);
      doubleArray0[1] = (-939.10945);
      doubleArray0[2] = (-939.10945);
      doubleArray0[3] = (-939.10945);
      doubleArray0[4] = (-939.10945);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1837.96878, (-1007.669352362933));
      double double1 = MathUtils.indicator((-939.10945));
      int int0 = MathUtils.pow(102, 820L);
      double double2 = MathUtils.scalb((-939.10945), 0);
      int int1 = MathUtils.compareTo(1.0, 10.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 2.2250738585072014E-308);
      double double1 = MathUtils.log(989.822371, 2.2250738585072014E-308);
      double double2 = MathUtils.cosh(2.2250738585072014E-308);
      byte byte0 = (byte) (-29);
      byte byte1 = MathUtils.sign((byte) (-29));
      double double3 = MathUtils.scalb(558.6137503247, (byte) (-29));
      long long0 = MathUtils.lcm((long) (byte) (-29), (long) (byte) (-29));
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1091.8862401;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1861.8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 62.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,091.886 >= 2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      double double0 = 0.125;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1.0F, 0.125, (-88.0));
      long long0 = MathUtils.factorial(0);
      int int0 = 1497;
      int int1 = MathUtils.subAndCheck(1497, 1497);
      double double1 = MathUtils.log(0, 0.125);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 2988;
      float float0 = MathUtils.round(0.0F, 2988, 0);
      double double0 = MathUtils.sinh(0.08713622391223907);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.08713622391223907;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.08724653262812526;
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553359L, 403L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-1));
      double double0 = MathUtils.round(0.0, (int) (byte) (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = BigInteger.valueOf((byte) (-1));
      int int0 = bigInteger1.intValueExact();
      BigInteger bigInteger4 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      byte byte1 = MathUtils.sign((byte) (-120));
      int int1 = MathUtils.hash(0.0);
      float float0 = MathUtils.indicator((-1.0F));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-893.86), (int) (byte) (-120), 5131);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      int int1 = 0;
      double double0 = MathUtils.round((-4740.248028516), 0, 0);
      double double1 = MathUtils.indicator((double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)23;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      boolean boolean0 = bigInteger0.isProbablePrime(0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (long) 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.round((-129.5F), 0, 0);
      double double0 = MathUtils.factorialLog(14);
      double double1 = MathUtils.log((-129.5F), 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 25.19122118273868);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1227.53109;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 110.0;
      doubleArray1[3] = 1.1102230246251565E-16;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (-5437.35458);
      doubleArray1[6] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 0;
      double double1 = MathUtils.scalb(0.19999954104423523, 0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = (-258);
      float float0 = MathUtils.round((float) 0, (-258));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-3099.687962), (-3584.632753492));
      double double1 = MathUtils.factorialLog(1752);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3099.687962);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-3099.687962);
      doubleArray0[3] = 11337.488494395211;
      doubleArray0[4] = (-3584.632753492);
      doubleArray0[5] = (-3583.493230652828);
      doubleArray0[6] = (-3099.687962);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = 626;
      double double3 = MathUtils.factorialLog(626);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3099.687962));
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double double4 = MathUtils.cosh(2.0);
      int int1 = MathUtils.lcm((int) (short)0, (int) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1752, 626);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2401.535553629521), 6.283185307179586);
      float float0 = MathUtils.round((-3438.36F), 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3438.36F);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double double2 = MathUtils.round((double) 0, 0);
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.indicator((long) 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash((-1868.459452788578));
      long long1 = MathUtils.indicator(1L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.sinh((-2458.242636));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1424));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1424);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1424);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.sign((long) 0);
      double double0 = MathUtils.factorialDouble(0);
      try { 
        MathUtils.pow(0, (-1370));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,370)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 355);
      int[] intArray0 = new int[4];
      intArray0[0] = 355;
      intArray0[1] = 355;
      intArray0[2] = 355;
      intArray0[3] = 355;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.sign(1692);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 5190.150854;
      doubleArray0[3] = (double) 1692;
      doubleArray0[4] = (double) 1692;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-1992);
      int int1 = MathUtils.lcm(927, (-1992));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1992), 927);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,992, k = 927
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = (byte)31;
      byte byte1 = MathUtils.sign((byte)31);
      long long0 = (-1131L);
      long long1 = MathUtils.subAndCheck((-1131L), (long) (byte)31);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.sign((double) 0.0F);
      double double1 = MathUtils.cosh(0.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 128;
      // Undeclared exception!
      try { 
        MathUtils.factorial(128);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.sign((double) 0.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      int int0 = 128;
      // Undeclared exception!
      try { 
        MathUtils.factorial(128);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = bigInteger1.signum();
      boolean boolean0 = bigInteger1.equals(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.flipBit(0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger1);
      double double0 = MathUtils.sign((-2438.809344959068));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2438.809344959068);
      doubleArray0[4] = (-2438.809344959068);
      doubleArray0[5] = (-2438.809344959068);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-2438.809344959068);
      doubleArray0[8] = (-2438.809344959068);
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1476), (-1476));
      double double0 = MathUtils.cosh(0);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-45));
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-45);
      intArray0[1] = (int) (byte) (-45);
      intArray0[2] = (int) (byte) (-45);
      intArray0[3] = (int) (byte) (-45);
      intArray0[4] = (int) (byte) (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte1 = MathUtils.indicator((byte) (-1));
      double double0 = MathUtils.sign((double) (byte) (-45));
      int int1 = MathUtils.indicator((-1221));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-1.0), (double) (byte) (-45), (int) (byte) (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2925.38161557651, 2925.38161557651, 2925.38161557651);
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0);
      double double1 = MathUtils.sinh(0);
      double double2 = MathUtils.scalb(0.0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-2451.426975));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1431.4433), Double.POSITIVE_INFINITY, (-1431.4433));
      long long0 = MathUtils.mulAndCheck(848L, 848L);
      byte byte0 = MathUtils.sign((byte)105);
      int int0 = MathUtils.gcd((int) (byte)105, (int) (byte)105);
      double double1 = MathUtils.round(0.0, 153);
      boolean boolean1 = MathUtils.equals((-152.19002794), 1382.0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)105;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1013);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = MathUtils.sign(1037.2135F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1037.2135F, 213.738845438, 2.2250738585072014E-308);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3270.0894373));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.subAndCheck((-1329), 1845);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      int int1 = MathUtils.mulAndCheck((-2027), (int) (short)1);
      int int2 = MathUtils.subAndCheck((-3174), (-1991));
      int int3 = (-2376);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1848), (-2376));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,848
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1933, 1933);
      int int1 = 0;
      long long0 = MathUtils.factorial(0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      int int2 = MathUtils.sign((int) (byte)0);
      byte byte2 = MathUtils.sign((byte)0);
      int int3 = MathUtils.compareTo(1.2393345855018391E-8, (byte)0, 1.2393345855018391E-8);
      double double0 = MathUtils.round(0.0036, 0, (int) (byte)0);
      byte byte3 = MathUtils.sign((byte) (-13));
      float float0 = MathUtils.round((-1.0F), 810);
      float float1 = MathUtils.sign(1119.2921F);
      int int4 = 1660;
      int int5 = MathUtils.subAndCheck(1660, 0);
      long long1 = MathUtils.subAndCheck((long) 1660, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1721), 1660);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,721, k = 1,660
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = 940;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 940);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 940
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 163.6611808381272;
      doubleArray0[1] = (-1735.31492);
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      long long0 = MathUtils.indicator((-3642L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(4095L, 52);
      int int0 = 1184;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 4095L, 52, 1184);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,184, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 85;
      int int1 = MathUtils.indicator(85);
      int int2 = (-769);
      try { 
        MathUtils.pow((long) 1, (-769));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-769)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.cosh(0.5);
      byte byte0 = MathUtils.sign((byte)127);
      double double1 = MathUtils.round((-5360.744), (int) (byte)127);
      double double2 = MathUtils.factorialDouble((byte)127);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-356);
      intArray0[1] = 0;
      intArray0[2] = 2003;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-356);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1973;
      intArray1[6] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2625.2472), (double) (-356));
      long long0 = MathUtils.pow((-1364L), (long) 0);
      short short0 = MathUtils.indicator((short)3129);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2330.555);
      doubleArray0[1] = 4142.9123775;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2407.408045418017);
      doubleArray0[4] = (-568.8237);
      doubleArray0[5] = 3.7487;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 4142.9123775);
      int int0 = (-1913);
      int int1 = MathUtils.mulAndCheck((-472), (-1913));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3424));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,424
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1064;
      int int1 = MathUtils.lcm(31, 1064);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = (-1067L);
      try { 
        MathUtils.pow(1064, (-1067L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,064^-1,067)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-2770);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2770));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,770
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2194);
      intArray0[1] = 637;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1219;
      intArray0[7] = 1193;
      intArray0[8] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(3022.7646, (-3471.37263087819), 1219);
      int int0 = MathUtils.mulAndCheck(0, 0);
      byte byte0 = MathUtils.sign((byte)106);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 0.1428571343421936;
      int int0 = MathUtils.hash(0.1428571343421936);
      try { 
        MathUtils.pow(0, (long) (-1077786332));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,077,786,332)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2832));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,832
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(191, (-91));
      long long1 = MathUtils.subAndCheck(1L, (-1007L));
      double double0 = MathUtils.factorialLog(0);
      float float0 = MathUtils.sign((float) (-91));
      long long2 = MathUtils.binomialCoefficient(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 191;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 191;
      intArray0[4] = 0;
      intArray0[5] = (-91);
      intArray0[6] = 0;
      intArray0[7] = (-91);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.hash((double) 0);
      int int2 = MathUtils.pow(18, (long) 0);
      short short0 = MathUtils.sign((short) (-578));
      double double1 = MathUtils.scalb(Double.NEGATIVE_INFINITY, 0);
      boolean boolean0 = MathUtils.equals((-1499.2472455754), Double.NEGATIVE_INFINITY, 0.0);
      double double2 = MathUtils.factorialLog(575);
      long long3 = MathUtils.sign(1L);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (double) (-91), (-1226));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 190;
      double double0 = MathUtils.factorialDouble(190);
      double double1 = MathUtils.log((-1854.415432957), 190);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = 3190;
      double double1 = MathUtils.scalb(Double.POSITIVE_INFINITY, 3190);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 819.233606;
      double double1 = MathUtils.sign(819.233606);
      int int0 = 705;
      int int1 = 181;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(705, 181);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      int int1 = 2419;
      int int2 = MathUtils.gcd(2419, (-1747));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = (-9218868437227405313L);
      long long1 = MathUtils.indicator((-9218868437227405313L));
      int int0 = (-3513);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3513), (-3513));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,513
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)8);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.scalb(0.0, (short)8);
      float float0 = MathUtils.indicator(Float.NaN);
      long long0 = MathUtils.pow((-9223372036854775808L), 4634);
      double double2 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.lcm((long) (short)1, 6L);
      int int1 = MathUtils.mulAndCheck((int) (short)8, (int) (short)8);
      int int2 = MathUtils.indicator((int) (short)8);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = 4634;
      intArray0[3] = (int) (short)8;
      intArray0[4] = 0;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      int int4 = 43;
      double double3 = MathUtils.round(1.0, 43);
      double double4 = MathUtils.indicator((double) 6L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 2047.81567551);
      double double5 = MathUtils.factorialDouble(0);
      long long2 = MathUtils.factorial((short)1);
      long long3 = MathUtils.binomialCoefficient(1, 0);
      // Undeclared exception!
      try { 
        MathUtils.round(3254.6F, (int) (short)8, (int) (short)8);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 8, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(213, 213);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      int int1 = MathUtils.hash((double) 213);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-197);
      try { 
        MathUtils.pow((-197), (-197));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-197^-197)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1133, 0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1133;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.indicator(1778L);
      double double0 = MathUtils.factorialLog(1016);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.pow(0, 19);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, 6022.787521056917, 19);
      long long1 = MathUtils.subAndCheck((long) 19, 0L);
      long long2 = MathUtils.binomialCoefficient(61, 0);
      long long3 = MathUtils.mulAndCheck(0L, 9218868437227405312L);
      int int1 = MathUtils.subAndCheck(0, 0);
      double double1 = MathUtils.round((double) 9218868437227405312L, 5);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 19;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = 6022.787521056917;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.sign(195);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 195;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 195;
      doubleArray0[4] = (double) 195;
      doubleArray0[5] = (double) 195;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 195;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 195;
      doubleArray1[7] = (double) 195;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)1);
      long long0 = MathUtils.mulAndCheck((long) (byte)1, 0L);
      float float0 = MathUtils.round((float) (byte)1, (int) (byte)1, (int) (byte)1);
      boolean boolean0 = MathUtils.equals(1325.2577, (double) 0.9F, (double) (byte)1);
      int int0 = MathUtils.gcd((int) (byte)1, 4140);
      boolean boolean1 = MathUtils.equals(2627.53, 2627.53, 0.7853981633974483);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = bigInteger0.toString(823);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.pow(1201, 153);
      double double0 = MathUtils.binomialCoefficientLog(1756, 124);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(355687428096000L);
      double double1 = MathUtils.normalizeAngle(0.0, 1L);
      int int0 = MathUtils.addAndCheck(1518, 1914);
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.factorialLog(540);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 540;
      intArray1[2] = 0;
      intArray1[3] = 0;
      double double1 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1607;
      intArray0[1] = (-731);
      int[] intArray1 = new int[3];
      intArray1[0] = 1607;
      intArray1[1] = 1607;
      intArray1[2] = (-731);
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      int int1 = MathUtils.distanceInf(intArray1, intArray1);
      int int2 = MathUtils.gcd(66, 1607);
      long long0 = MathUtils.addAndCheck(0L, (-1324L));
      byte byte0 = MathUtils.indicator((byte)0);
      int int3 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int4 = MathUtils.mulAndCheck(1, 8);
      long long1 = MathUtils.gcd(87178291200L, 0L);
      int int5 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 66);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = (-696L);
      long long1 = MathUtils.addAndCheck((-696L), (-696L));
      int int0 = (-2053);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-696L), 1483, (-2053));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 63;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.round((double) 0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (-1644L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.07490822288864472;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = 121645100408832000L;
      long long1 = MathUtils.addAndCheck(121645100408832000L, 121645100408832000L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 243290200817664000L;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 243290200817664000L;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 243290200817664000L;
      doubleArray0[7] = (double) 121645100408832000L;
      doubleArray0[8] = (-61.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (\u221E >= 243,290,200,817,664,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = 556L;
      long long1 = MathUtils.sign(556L);
      int int0 = 4194304;
      // Undeclared exception!
      MathUtils.factorialDouble(4194304);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(0.0, 244, 0);
      int int1 = 556;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 556);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 556
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1426), (-1426));
      double double0 = MathUtils.normalizeAngle((-1426), (-1426));
      double double1 = MathUtils.binomialCoefficientDouble(2033476, 2206);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2206;
      doubleArray0[1] = (double) 2206;
      doubleArray0[2] = (double) (-1426);
      doubleArray0[3] = (double) (-1426);
      doubleArray0[4] = (double) 2206;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.indicator((-1426));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.08371849358081818, (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1465L), 866L);
      long long1 = MathUtils.gcd(2398L, (-2331L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4950.21060760424;
      doubleArray0[2] = 2295.42604928525;
      doubleArray0[3] = 1003.6282581316026;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-3885.186193371653);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.hash(Double.NEGATIVE_INFINITY);
      int int1 = MathUtils.gcd((-1048576), (-1048576));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.lcm((-1048576), 66);
      int int3 = MathUtils.hash((double) 66);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2880), (-2880));
      int int1 = (-2681);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2681));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,681
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(20, 0);
      long long0 = MathUtils.factorial(0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      long long1 = MathUtils.lcm((long) 0, 0L);
      long long2 = MathUtils.pow(0L, 0);
      double double0 = MathUtils.indicator((double) 0);
      // Undeclared exception!
      try { 
        MathUtils.round(1105.0, 1445, 20);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = (-2031.32);
      double double1 = MathUtils.log((-2031.32), 19.26232286053985);
      short short0 = MathUtils.indicator((short)213);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = 0.0;
      double double3 = MathUtils.normalizeAngle((short)1, 0.0);
      int int0 = MathUtils.pow((int) (short)1, (long) (short)1);
      float float0 = MathUtils.round((float) 1, 1);
      int int1 = MathUtils.indicator(66);
      int int2 = MathUtils.compareTo(0.0, 10.0, 19.26232286053985);
      double double4 = MathUtils.indicator((-9.3965890714834));
      int int3 = MathUtils.sign(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1);
      try { 
        MathUtils.pow(0L, (-276L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-276)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 362880L;
      long long1 = MathUtils.subAndCheck(362880L, 9154082963658192752L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9154082963658192752L, 9154082963658192752L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-730);
      int int1 = (-1005);
      int int2 = MathUtils.addAndCheck((-730), (-1005));
      double double0 = 0.0;
      double double1 = MathUtils.sinh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.4456468917292502E-16, (double) (-1735), (-730));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      int int0 = MathUtils.hash(doubleArray0);
      float float1 = MathUtils.sign(0.0F);
      double double0 = MathUtils.scalb(1.0F, 961);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-3958705157555305932L));
      double double0 = MathUtils.log(264.3862296, 188.2269996);
      boolean boolean0 = MathUtils.equals(264.3862296, 939.0, (double) 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-4208));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,208
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.hash((double) (byte)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Pt");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Pt
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = MathUtils.round((-698.2861F), 4);
      long long0 = 24L;
      long long1 = MathUtils.sign(24L);
      int int0 = MathUtils.compareTo(24L, 24L, 1L);
      float float1 = MathUtils.round((float) 1L, 4, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        MathUtils.pow((-9223372036854775808L), (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = MathUtils.round((-718.4F), (-3237));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-31.346929897);
      doubleArray0[1] = (-1577.8363234283356);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck(747, 747);
      double double1 = MathUtils.binomialCoefficientLog(1494, (-5621));
      int int1 = MathUtils.indicator(2057);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(15, 15);
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 225, 9193070505571053912L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0952233225107193;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-377.138282);
      doubleArray0[3] = 322.42035910284375;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 1983.38001698833;
      doubleArray0[6] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0.095 <= 2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 371.0120871393;
      doubleArray0[1] = 0.008336750013465571;
      doubleArray0[2] = (-1078.705989039943);
      doubleArray0[3] = (-2202.82780256444);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-2,202.828 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.compareTo(2729.832189, (-1.0), (-1.0));
      double double0 = MathUtils.round((-402.44), 1, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 292.139130060071;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2729.832189;
      doubleArray0[4] = (-1.0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(73);
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 1);
      int int1 = MathUtils.lcm(36, 36);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.0), 2198.637855975688, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2198.637855975688;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(1235, 1235);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.signum();
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1235);
      short short0 = MathUtils.sign((short) (-451));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 2198.637855975688);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-1320);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1320), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,320, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.log(1776.560973816, 1776.560973816);
      boolean boolean0 = MathUtils.equals(587.95451, 0.0, 1776.560973816);
      byte byte0 = MathUtils.sign((byte) (-108));
      double double1 = MathUtils.cosh((byte) (-1));
      double double2 = MathUtils.normalizeAngle(0.0, (byte) (-108));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-686.57048140353), 1.0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float float0 = MathUtils.sign(1534.3215F);
      boolean boolean0 = MathUtils.equals((double) 1.0F, (double) 1534.3215F, 758.791);
      int int0 = MathUtils.compareTo(1.0F, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      float float1 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2651);
      intArray0[3] = 1;
      intArray0[4] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 944.85375;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm((-136), 5072);
      double double1 = MathUtils.normalizeAngle((-574.0), 944.85375);
      long long0 = MathUtils.sign((-1002L));
      float float0 = MathUtils.sign((float) (-1002L));
      int int1 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.indicator((short)1489);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck((long) 980205977, (-1L));
      double double3 = MathUtils.factorialDouble(177);
      double double4 = MathUtils.sinh(309.4);
      int int2 = MathUtils.lcm(0, (int) (short)1489);
      long long2 = MathUtils.mulAndCheck((-1954L), 648L);
      short short1 = MathUtils.indicator((short)1489);
      short short2 = MathUtils.sign((short)1);
      double double5 = MathUtils.binomialCoefficientDouble(0, (-254));
      long long3 = MathUtils.pow(0L, (long) 86224);
      int int3 = MathUtils.hash(doubleArray0);
      int int4 = MathUtils.sign(2061);
      double double6 = MathUtils.indicator(946.5308443374599);
      double double7 = MathUtils.scalb(1225.0201508, 1539);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.gcd(229, (-1564));
      boolean boolean0 = MathUtils.equals((double) (-1564), (double) 229, (double) 229);
      double double0 = MathUtils.normalizeAngle(3.141592653589793, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      int int0 = MathUtils.gcd(0, 0);
      int int1 = 6256;
      int int2 = MathUtils.lcm(6256, 0);
      float float0 = MathUtils.indicator((float) 0);
      int int3 = MathUtils.lcm(0, (-463));
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6256;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 6256;
      doubleArray0[6] = Double.NaN;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2518), Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,518
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(355687428096000L, 355687428096000L);
      int int0 = MathUtils.sign(19);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 118);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      long long0 = MathUtils.pow(2737L, 9154082963658192752L);
      double double0 = MathUtils.indicator(2817.9466197);
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 118;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck((-3152), 0);
      long long1 = MathUtils.factorial(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (26 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      int int0 = MathUtils.gcd((-2933), (-2933));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-696L), (-696L));
      long long1 = MathUtils.sign((long) (-2053));
      long long2 = MathUtils.subAndCheck(6L, 7910884519577875640L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1392L);
      doubleArray0[1] = (double) (-1392L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long3 = MathUtils.subAndCheck(373L, (-1481L));
      boolean boolean0 = MathUtils.equals(1968.5852788233483, (-1392.0), 2120);
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short)3568);
      double double1 = MathUtils.round((double) (-696L), (int) (short)3568, 0);
      int int1 = MathUtils.compareTo((-696L), 0.0, 14.0);
      long long4 = MathUtils.binomialCoefficient(1674, (-2053));
      double double2 = MathUtils.indicator((double) (-2053));
      try { 
        MathUtils.pow(0L, (-696L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-696)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float float0 = MathUtils.sign((-2436.4F));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.lcm((-345L), (-345L));
      int int0 = MathUtils.mulAndCheck(164, 164);
      double double0 = MathUtils.round((double) 164, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-93);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2789L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-93);
      doubleArray0[1] = (double) (byte) (-93);
      doubleArray0[2] = (double) 164;
      doubleArray0[3] = (double) 164;
      doubleArray0[4] = (double) 345L;
      doubleArray0[5] = 164.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 164;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 3, 3, 1);
      double[] doubleArray1 = new double[0];
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), (-971), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) (-1.0F);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.sign(121645100408832000L);
      long long1 = MathUtils.gcd(121645100408832000L, 3035L);
      long long2 = MathUtils.pow(5L, 121645100408832000L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3035L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 121645100408832000L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 754466984004681729L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = MathUtils.indicator(2134.9927F);
      double double0 = MathUtils.sinh(1.0F);
      long long0 = MathUtils.subAndCheck(362880L, 362880L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.sign((-1816));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.gcd((-439L), (-439L));
      float float0 = MathUtils.sign(3786.2798F);
      double double0 = MathUtils.normalizeAngle(1220.230057, 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = 79;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1305.62872202, (-6545.67), 79);
      long long0 = MathUtils.addAndCheck((long) 79, (long) 79);
      long long1 = MathUtils.lcm((-2787L), 529L);
      long long2 = MathUtils.sign(529L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(79);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.log((-1209.837), (-1209.837));
      int int0 = MathUtils.gcd(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3512299194304650054L), 910L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-3958705157555305932L), (-3958705157555305932L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.lcm(4398046511103L, 47L);
      float float0 = MathUtils.round(0.0F, 1, 1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.compareTo(0.0F, 0.0F, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.lcm((-2320), 0);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.lcm(4499201580859392L, (long) 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(0);
      int int4 = bigInteger0.intValue();
      try { 
        MathUtils.pow(bigInteger0, (-257));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-257)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2639);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)2639;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = (double) (short)2639;
      doubleArray0[3] = (double) (short)2639;
      doubleArray0[4] = (double) (short)2639;
      doubleArray0[5] = (-2201.03357);
      doubleArray0[6] = (double) (short)1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(1.0, 2639.0, (int) (short)2639);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3.940510424527919E-20), 0.0);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, 1, 61);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 61, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = MathUtils.gcd(229, (-1564));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(14.0, (double) 229, (-990));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.lcm(1224, 1224);
      double double0 = MathUtils.binomialCoefficientLog(1583, 1224);
      double double1 = MathUtils.round(0.0, 1224);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1224, (double) 1224, (double) 1224);
      double double2 = MathUtils.round(17.0, 1224);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.lcm(35, 35);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1222);
      byte byte0 = MathUtils.indicator((byte)19);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = (byte)92;
      byte byte1 = MathUtils.sign((byte)92);
      double double0 = MathUtils.binomialCoefficientDouble(22, (-265));
      double double1 = 2347.107011392595;
      double double2 = MathUtils.indicator(2347.107011392595);
      double double3 = MathUtils.scalb((-265), (byte)1);
      long long0 = MathUtils.gcd((long) (-265), (long) (-265));
      long long1 = MathUtils.mulAndCheck((long) (byte)1, (long) (byte)1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-3852), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,852, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (-1862));
      int int0 = 3;
      double double1 = MathUtils.binomialCoefficientLog(3, (short) (-1862));
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(17, (-2478));
      int int1 = MathUtils.compareTo((-2478), (-2478), (-9.3965890714834));
      int[] intArray0 = new int[5];
      intArray0[0] = (-2478);
      intArray0[1] = (-2478);
      intArray0[2] = 17;
      intArray0[3] = 0;
      intArray0[4] = (-1073741823);
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((-1816.02116985466), (double) 0);
      long long0 = MathUtils.mulAndCheck((long) (-2478), (long) (-2478));
      long long1 = MathUtils.lcm((-2920L), 845L);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-8.0E298);
      doubleArray0[1] = (-1477.11769);
      doubleArray0[2] = (-7.44321345601866E-11);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.5);
      double double0 = 2366.31;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-8.0E298), (-348.58071413704), 2366.31);
      int int0 = 4542;
      int int1 = MathUtils.pow(4542, 4542);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2366.31, (-2685.672406151256), 1);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, (-8.0E298));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.round((-8.0E298), 1, 4542);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 900.7041637864;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 900.7041637864;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-237.9975);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-237.9975));
      int[] intArray0 = new int[5];
      intArray0[0] = 101;
      intArray0[1] = (-3757);
      intArray0[2] = (-1630);
      intArray0[3] = 4274;
      intArray0[4] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = MathUtils.pow(1844L, 19);
      double double0 = MathUtils.log(5635486649904267264L, 1.073741824E9);
      long long1 = MathUtils.pow(5635486649904267264L, 1844L);
      int int0 = MathUtils.gcd(19, 19);
      int int1 = MathUtils.gcd(19, (-390));
      long long2 = MathUtils.lcm(2147483648L, 1150L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 684.9299092698664, 1.073741824E9);
      long long3 = MathUtils.gcd(2461L, 5635486649904267264L);
      float float0 = MathUtils.round((float) 1L, 830);
      int int2 = MathUtils.mulAndCheck((-3986), 19);
      // Undeclared exception!
      try { 
        MathUtils.factorial(119);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1335.0467090774991);
      doubleArray0[1] = 0.058823529411764705;
      doubleArray0[2] = 4278.46002;
      doubleArray0[3] = 1141.0;
      doubleArray0[4] = (-697.2126);
      doubleArray0[5] = 1060.2924464681284;
      doubleArray0[6] = (-2433.3383228767343);
      doubleArray0[7] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (4,278.46 >= 1,141)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float float0 = MathUtils.indicator(1633.207F);
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 12);
      double double0 = MathUtils.factorialDouble(0);
      int int2 = 3;
      int int3 = MathUtils.addAndCheck(3, 0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = 13.3711786167342;
      double double3 = MathUtils.scalb(13.3711786167342, (-12));
      long long0 = MathUtils.pow((long) (-12), 0L);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      int int4 = MathUtils.hash(223.89043);
      double double5 = MathUtils.binomialCoefficientDouble(660983917, 3824);
      try { 
        MathUtils.pow(0, (-834));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-834)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = MathUtils.compareTo(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0, 478);
      int[] intArray0 = new int[5];
      intArray0[0] = 478;
      intArray0[1] = 478;
      intArray0[2] = 0;
      intArray0[3] = 478;
      intArray0[4] = 478;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.indicator(3910L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 478;
      doubleArray0[1] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.compareTo(0, 1780.113094, 3910L);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      int int0 = 77;
      // Undeclared exception!
      try { 
        MathUtils.factorial(77);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 67;
      int int1 = MathUtils.pow(67, (long) 67);
      long long0 = MathUtils.addAndCheck((long) 882693595, (long) 67);
      int[] intArray0 = new int[1];
      intArray0[0] = 67;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 67, (-445.77269614523), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
