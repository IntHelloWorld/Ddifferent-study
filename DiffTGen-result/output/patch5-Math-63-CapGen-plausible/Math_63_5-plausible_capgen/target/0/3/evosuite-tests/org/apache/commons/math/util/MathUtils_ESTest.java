/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:58:51 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.LongStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1741.7328766108), 1797);
      long long0 = MathUtils.addAndCheck((-976L), (-976L));
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-1952L);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-976L);
      doubleArray0[4] = (-1741.7328766108);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (-1952L);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (short)0;
      doubleArray1[3] = (double) (short)0;
      doubleArray1[4] = (double) 1797;
      doubleArray1[5] = (double) 1797;
      doubleArray1[6] = (double) (short)0;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      try { 
        MathUtils.pow((-4572080428279603501L), (-2754L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,572,080,428,279,603,501^-2,754)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.lcm(4046L, (-1420L));
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      double double0 = MathUtils.sinh(2.2250738585072014E-308);
      boolean boolean0 = MathUtils.equals((-2240.87167702945), 0.0, 35);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2240.87167702945);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1420L);
      doubleArray0[3] = (-559.766148);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2128479367, 35);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.log(645.01467959, 645.01467959);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.indicator(830.99454481);
      double double1 = MathUtils.binomialCoefficientLog(2678, 2678);
      boolean boolean0 = MathUtils.equals((double) 2678, 830.99454481);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, 3065.95909675);
      int int0 = MathUtils.addAndCheck(2678, 3);
      byte byte0 = MathUtils.indicator((byte)4);
      int[] intArray0 = new int[5];
      intArray0[0] = 2678;
      intArray0[1] = 2681;
      intArray0[2] = (int) (byte)4;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.gcd((int) (byte)4, 190);
      double double2 = MathUtils.scalb(0.3333333134651184, 3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2513.0;
      doubleArray0[0] = 2513.0;
      doubleArray0[1] = 0.9999997615814209;
      doubleArray0[2] = (-1121.3);
      double double1 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short) (-422));
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) (short) (-422), (-4616189618054758400L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 289);
      short short0 = MathUtils.indicator((short) (-1451));
      long long0 = MathUtils.indicator((-1443L));
      boolean boolean0 = MathUtils.equals((double) 0.0F, (-0.16666666666666666), 3411.55369166);
      byte byte0 = MathUtils.sign((byte)80);
      byte byte1 = MathUtils.sign((byte) (-52));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0.0F, 674.519222, (int) (byte)80);
      boolean boolean2 = MathUtils.equals((double) 289, (double) (byte) (-1), (double) (byte) (-52));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-52);
      doubleArray0[3] = (double) 289;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (byte) (-52);
      doubleArray1[1] = (double) (byte)80;
      doubleArray1[2] = 674.519222;
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[4] = (double) (byte)80;
      doubleArray1[5] = (double) (byte) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1683.8475901134764, 0.0);
      int int0 = MathUtils.lcm(0, (-3248));
      int int1 = MathUtils.gcd((-3884), 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      boolean boolean0 = bigInteger0.equals("");
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)0;
      byte byte0 = (byte) (-84);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)9;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      double double0 = (-4097.7);
      doubleArray0[1] = (-4097.7);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = 0.087;
      doubleArray0[3] = 0.087;
      double double3 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-4,097.7 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      byte byte0 = (byte) (-4);
      byte byte1 = MathUtils.indicator((byte) (-4));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.gcd(0, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.round((-1371.3253796903489), 0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck((-84L), (long) 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.cosh(2077.612108997445);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2077.612108997445;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 217.74987624;
      doubleArray1[1] = (-1395.5374069824995);
      doubleArray1[2] = 0.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int0 = MathUtils.indicator((-109));
      int int1 = MathUtils.gcd((-109), (-2236));
      double double3 = MathUtils.normalizeAngle(2077.612108997445, (-109));
      double double4 = MathUtils.normalizeAngle(217.74987624, 217.74987624);
      double double5 = MathUtils.round(Double.POSITIVE_INFINITY, (-1), 3594);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-549.7);
      doubleArray0[1] = 122.89;
      doubleArray0[2] = (-1488.20711863);
      doubleArray0[3] = 2313.2166132892;
      doubleArray0[4] = (-4.9E-324);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 16.0;
      doubleArray0[7] = 1.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1679);
      intArray0[2] = (-1959);
      intArray0[3] = 67;
      intArray0[4] = (-771);
      intArray0[5] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-3318);
      int int1 = MathUtils.lcm((-3318), 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3318);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3318);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3318), (-1227));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,318, k = -1,227
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-795L), 813L);
      long long1 = MathUtils.gcd(3384L, (-795L));
      float float0 = MathUtils.indicator((-306.27414F));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, (double) (-1.0F));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3L;
      doubleArray0[1] = (double) (-1.0F);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-571);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-571));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -571
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.indicator(585);
      int[] intArray0 = new int[8];
      intArray0[0] = 585;
      intArray0[1] = 585;
      intArray0[2] = 585;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 585;
      intArray0[7] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.compareTo(585, 296.13, 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-682));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-682)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.gcd(3979L, 762L);
      float float0 = MathUtils.round(0.0F, 21);
      int int0 = MathUtils.subAndCheck(1030, 21);
      int int1 = MathUtils.compareTo(1L, (-1798.33374656), (-2044.515));
      int int2 = MathUtils.compareTo(1708.0, (-1798.33374656), (-1798.33374656));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.375, 1.375, (-478.91792));
      double double0 = MathUtils.binomialCoefficientDouble(208, 173);
      long long0 = MathUtils.lcm((long) 208, (long) 173);
      boolean boolean1 = MathUtils.equalsIncludingNaN(6.318758112039687E39, (-367.19579206359), 2805);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2805;
      doubleArray0[1] = 6.318758112039687E39;
      doubleArray0[2] = 1.375;
      doubleArray0[3] = (double) 208;
      doubleArray0[4] = 1.375;
      doubleArray0[5] = (double) 2805;
      doubleArray0[6] = (double) 208;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1380.624));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.lcm((long) (short)0, (-3352L));
      float float0 = MathUtils.round(1.0F, (-209));
      double double0 = MathUtils.cosh(1.5707963267948966);
      long long1 = MathUtils.pow((-1322L), 0L);
      short short1 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)0, 0.0, (double) (-3352L));
      byte byte0 = MathUtils.indicator((byte)4);
      short short2 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2734.846282457856), (-2277.765583131));
      byte byte0 = (byte)80;
      byte byte1 = MathUtils.indicator((byte)80);
      boolean boolean1 = MathUtils.equals((-1574.9381926788), (-2277.765583131));
      int int0 = MathUtils.indicator((int) (byte)1);
      int int1 = MathUtils.sign((int) (byte)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1574.9381926788);
      doubleArray0[1] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (byte)80;
      doubleArray1[1] = (double) (byte)1;
      doubleArray1[2] = (-2734.846282457856);
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (-2277.765583131);
      doubleArray1[7] = (-1574.9381926788);
      doubleArray1[8] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 184);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-184);
      doubleArray0[3] = (double) (-184);
      doubleArray0[4] = (double) 184;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-184);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 184;
      intArray0[1] = 184;
      intArray0[2] = 184;
      intArray0[3] = 184;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientDouble(2984, 184);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3.2571080731497834E298;
      doubleArray1[1] = (double) 184;
      doubleArray1[2] = (double) 184;
      doubleArray1[3] = (double) 184;
      doubleArray1[4] = (double) 2984;
      doubleArray1[5] = (double) 184;
      doubleArray1[6] = (double) 184;
      doubleArray1[7] = (double) 0;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.sign((-1092L));
      double double0 = MathUtils.factorialDouble(230);
      int int0 = MathUtils.pow(0, 230);
      double double1 = MathUtils.scalb(0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.signum();
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = BigInteger.ONE;
      byte byte0 = bigInteger2.byteValueExact();
      boolean boolean0 = bigInteger0.testBit((byte)1);
      BigInteger bigInteger3 = bigInteger2.divide(bigInteger1);
      BigInteger bigInteger4 = bigInteger2.min(bigInteger0);
      BigInteger bigInteger5 = bigInteger0.modPow(bigInteger2, bigInteger2);
      int int2 = bigInteger0.bitLength();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0);
      int int3 = MathUtils.hash(1638.366218730294);
      long long1 = MathUtils.mulAndCheck(1394L, 6L);
      double double2 = MathUtils.round((double) 8364L, 55);
      int int4 = MathUtils.pow(0, 1574);
      long long2 = MathUtils.gcd(6L, 0L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1901.0539444539281, 1901.0539444539281);
      double double0 = MathUtils.factorialDouble(126);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 88;
      intArray0[1] = Integer.MIN_VALUE;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = (-1845);
      int int2 = MathUtils.subAndCheck(0, (-1845));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 88, (double) (-1845));
      int int3 = MathUtils.indicator(18);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Integer.MIN_VALUE;
      doubleArray0[1] = (double) Integer.MIN_VALUE;
      doubleArray0[2] = (double) (-1845);
      doubleArray0[3] = (double) (-1845);
      double double0 = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (double) Integer.MIN_VALUE;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)1695);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(1845, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: 1,845 - -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sinh(0.0);
      int int0 = 478;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 478, 478);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 478, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.scalb((-2611.6173), 0);
      float float0 = MathUtils.round(0.0F, (-3479), 0);
      int int0 = MathUtils.mulAndCheck(0, (-146));
      long long0 = MathUtils.pow((long) (-146), (long) 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-146);
      intArray0[3] = (-146);
      intArray0[4] = (-3479);
      intArray0[5] = (-3188);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-3188);
      doubleArray1[1] = (double) (-3479);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-146);
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.pow(113236205062349959L, 0);
      double double0 = MathUtils.sign(2081.28);
      long long1 = MathUtils.addAndCheck(6402373705728000L, 113236205062349959L);
      short short0 = MathUtils.indicator((short)78);
      int int0 = MathUtils.mulAndCheck(0, (int) (short)1);
      boolean boolean0 = MathUtils.equals(7.549789948768648E-8, (double) 6402373705728000L, (double) (short)1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2734.846282457856), (-2277.765583131));
      byte byte0 = MathUtils.indicator((byte)80);
      boolean boolean1 = MathUtils.equals((-1574.9381926788), (-2277.765583131));
      int int0 = MathUtils.indicator((int) (byte)1);
      int int1 = MathUtils.sign((int) (byte)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1574.9381926788);
      doubleArray0[1] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (byte)80;
      doubleArray1[1] = (double) (byte)1;
      doubleArray1[2] = (-2734.846282457856);
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (-2277.765583131);
      doubleArray1[7] = (-1574.9381926788);
      doubleArray1[8] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-594);
      int int0 = 1131;
      intArray0[1] = 1131;
      intArray0[2] = (-1468);
      intArray0[3] = 0;
      int int1 = 0;
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1131);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1400, (-1863));
      int int1 = MathUtils.lcm((-1767), (-3875));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3875);
      doubleArray0[1] = (double) (-3875);
      doubleArray0[3] = (double) 220875;
      doubleArray0[4] = (double) 220875;
      doubleArray0[5] = (double) (-1767);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-3,875 >= -3,875)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = MathUtils.indicator((-1524.346F));
      long long0 = 0L;
      long long1 = (-3958705157555305932L);
      long long2 = MathUtils.mulAndCheck(0L, (-3958705157555305932L));
      double double0 = MathUtils.indicator((double) (-1.0F));
      int int0 = (-1540);
      double double1 = MathUtils.scalb((-1372.172), (-1540));
      long long3 = MathUtils.subAndCheck((-3958705157555305932L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1540), 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,540, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1699.6438769457);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.08713622391223907;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.08713622391223907);
      int[] intArray0 = new int[5];
      int int0 = (-65);
      intArray0[0] = (-65);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 12;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck((-2147L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-65), 705, (-1521));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,521, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.log((-469.86148283266107), (-469.86148283266107));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.round((-469.86148283266107), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(301.59486534907, 0.0);
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 178;
      intArray0[1] = 229;
      int[] intArray1 = new int[6];
      intArray1[0] = 178;
      intArray1[1] = 229;
      intArray1[2] = 178;
      intArray1[3] = 229;
      intArray1[4] = 229;
      intArray1[5] = 178;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 17;
      intArray0[0] = 17;
      intArray0[1] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1158.9972;
      doubleArray0[1] = (-2372.58167647);
      doubleArray0[2] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-2,372.582 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator((-634L));
      long long1 = MathUtils.addAndCheck((-977L), (-977L));
      double double0 = MathUtils.sign((double) (-977L));
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign((float) (-1L));
      int int1 = MathUtils.hash(doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-7));
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 108;
      intArray0[3] = 1;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(2432902008176640000L, (-3585L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-120));
      short short0 = MathUtils.indicator((short) (byte) (-120));
      double double0 = MathUtils.cosh((-3990.9989483869));
      byte byte1 = MathUtils.indicator((byte) (-120));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      long long0 = (-7278142539171889152L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(115L, (-7278142539171889152L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-563.86107378);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3865.849211);
      doubleArray0[3] = 0.016;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.indicator(0.016);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger0.toByteArray();
      // Undeclared exception!
      try { 
        bigInteger0.multiply((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.scalb(375.0444756113555, (-660));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 7.839450721158247E-197;
      doubleArray0[1] = 375.0444756113555;
      doubleArray0[2] = 375.0444756113555;
      doubleArray0[3] = 7.839450721158247E-197;
      doubleArray0[4] = 375.0444756113555;
      doubleArray0[5] = 375.0444756113555;
      doubleArray0[6] = 375.0444756113555;
      doubleArray0[7] = 7.839450721158247E-197;
      doubleArray0[8] = 7.839450721158247E-197;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-1));
      long long0 = MathUtils.sign((long) (-1));
      float float0 = MathUtils.indicator(0.0F);
      long long1 = MathUtils.pow((long) (-1), (long) 0);
      long long2 = MathUtils.addAndCheck((-1L), (long) (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.pow((-198));
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1324.4924286094258, 1324.4924286094258, 626);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 626;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 626, 4294967295L);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 626, 3294198.0, (double) 2688649526670L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1324.4924286094258;
      doubleArray1[1] = (double) 2688649526670L;
      doubleArray1[2] = 3294198.0;
      double double0 = MathUtils.distance(doubleArray1, doubleArray1);
      int int0 = MathUtils.sign(626);
      int[] intArray0 = new int[6];
      intArray0[0] = 626;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.sign(1678.412378392448);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.356194490192345, 1678.412378392448, 228);
      long long0 = MathUtils.mulAndCheck(1L, 0L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.sign((-384));
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-384);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      byte byte0 = MathUtils.sign((byte)51);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (byte)1;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (double) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double double0 = MathUtils.factorialLog(2170);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-1368);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1368));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,368
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-965);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-965));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -965
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.scalb(3.834E-20, (-1558));
      long long0 = MathUtils.binomialCoefficient(3139, 3139);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.round(0.0, 15);
      long long0 = 2919L;
      long long1 = MathUtils.pow(0L, 2919L);
      int int0 = MathUtils.pow(15, (long) 15);
      int int1 = 1339;
      int int2 = MathUtils.subAndCheck(1500973039, 1339);
      int int3 = (-3978);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 15, 1500973039, (-3978));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = (byte)22;
      byte byte1 = MathUtils.indicator((byte)22);
      int int0 = MathUtils.pow((int) (byte)22, 1751L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)22;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(0, byteArray0);
      } catch(NumberFormatException e) {
         //
         // signum-magnitude mismatch
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 5, 7);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 1979.7959323657;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.sinh(520.722);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0, (-5509.434));
      int int0 = MathUtils.hash((-3416.64063389));
      int int1 = MathUtils.subAndCheck((-1048511027), 474);
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1048511027);
      intArray0[1] = 61;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = MathUtils.gcd(0, (-1048511027));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, 1048511027);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 726;
      intArray0[1] = 70;
      intArray0[2] = 0;
      intArray0[3] = 471;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.gcd(0, (-1488));
      double double0 = MathUtils.normalizeAngle(0.0, (-0.16624879837036133));
      int int1 = MathUtils.mulAndCheck(20, (-1488));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.indicator(5305L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign(1.0F);
      double double0 = MathUtils.sign((double) 5305L);
      double double1 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sign((double) 0);
      long long0 = MathUtils.indicator(3704L);
      int int0 = MathUtils.mulAndCheck(57, 63);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-3898);
      int int1 = 95;
      int int2 = MathUtils.lcm((-3898), 95);
      long long0 = 4503599627370496L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 370310, 4503599627370496L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.sign(8.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 8.0;
      doubleArray0[3] = 8.0;
      doubleArray0[4] = 8.0;
      doubleArray0[5] = (-63.248104775);
      doubleArray0[6] = 8.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-2145);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2145), (-2145));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,145
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      int int0 = MathUtils.sign((int) (short)0);
      double double0 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) (short)1;
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.normalizeAngle(0.0, (-249.2));
      int int2 = 44;
      double double2 = MathUtils.binomialCoefficientDouble(44, 0);
      double[] doubleArray1 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 476.2620914;
      doubleArray0[1] = 3465.27244103;
      doubleArray0[2] = 0.99;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-985.8);
      doubleArray0[6] = (-392.1);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 736.06687;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(2076.5023792352, 0.0, 1952257861);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger0.min(bigInteger3);
      long long0 = (-1L);
      try { 
        MathUtils.pow(bigInteger0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = MathUtils.indicator(4676.992F);
      double double0 = MathUtils.binomialCoefficientDouble(3562, 3562);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.pow((long) 0, 2873L);
      long long1 = MathUtils.addAndCheck((long) 0, 2873L);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1544;
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.sign(0.0F);
      double double1 = MathUtils.round((double) 0, 0);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.pow((-3838L), 1544);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3598.0);
      doubleArray0[1] = 944.1338523136;
      double double0 = (-2405.92207508681);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2405.92207508681));
      int int0 = 855;
      long long0 = MathUtils.binomialCoefficient(855, (-518));
      byte byte0 = MathUtils.sign((byte)52);
      long long1 = MathUtils.subAndCheck((long) 855, (long) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-2481.43818), (-518));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-4.9E-324), 3777);
      double double0 = MathUtils.sign(0.0);
      float float0 = MathUtils.indicator(3690.0F);
      int int0 = MathUtils.mulAndCheck(3777, 3777);
      long long0 = MathUtils.pow((-1355L), 0);
      long long1 = MathUtils.indicator((-1355L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.sinh(609.60064815);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      int int0 = 4543;
      intArray1[0] = 4543;
      intArray1[1] = 113;
      double double0 = MathUtils.distance(intArray0, intArray1);
      int int1 = MathUtils.pow(4543, 4543);
      int int2 = MathUtils.distance1(intArray0, intArray1);
      double double1 = MathUtils.factorialLog(2286);
      boolean boolean0 = MathUtils.equals(0.0, 15399.98777260414);
      short short0 = MathUtils.sign((short)64);
      short short1 = MathUtils.sign((short)1);
      int int3 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (short)1, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.sign(2078);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2872660L, 2872660L);
      long long1 = MathUtils.binomialCoefficient(4651, (-2142346126));
      int int0 = (-1);
      try { 
        MathUtils.pow(2872660L, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,872,660^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1276, 1276);
      long long0 = (-1L);
      long long1 = MathUtils.indicator((-1L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 1276;
      doubleArray0[2] = (double) 2552;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long2 = 1845L;
      long long3 = MathUtils.addAndCheck(1845L, (long) 2552);
      double double1 = MathUtils.scalb((-308.5766755851), 1276);
      int int1 = 172;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2552, 172);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-1174);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1174));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,174
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(5, 5);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(5, 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 5, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 5;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 5);
      BigInteger bigInteger2 = bigInteger1.remainder(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      int int1 = bigInteger0.intValue();
      String string0 = bigInteger1.toString();
      int int2 = bigInteger1.signum();
      BigInteger bigInteger4 = null;
      try {
        bigInteger4 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2640;
      intArray0[1] = 3;
      intArray0[2] = 2169;
      intArray0[3] = 1103;
      intArray0[4] = 67;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1103;
      doubleArray0[1] = (double) 2169;
      doubleArray0[2] = (double) 67;
      doubleArray0[3] = (double) 67;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1574));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(480L, 480L);
      int int0 = MathUtils.sign(2844);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 230400L);
      double double0 = MathUtils.log(230400L, (-918.6343));
      int int1 = MathUtils.hash((-1961.70408989));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 0;
      float float1 = MathUtils.round(0.0F, 0, 0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 5648769086999809661L);
      long long1 = MathUtils.sign(24L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 869;
      doubleArray0[1] = (double) 24L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[8];
      intArray0[0] = 869;
      intArray0[1] = 869;
      intArray0[2] = 869;
      intArray0[3] = 869;
      intArray0[4] = 869;
      intArray0[5] = 869;
      intArray0[6] = 869;
      intArray0[7] = 869;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(5.650007086920087E-9, 0.0, 5.650007086920087E-9);
      int int0 = MathUtils.indicator(123);
      long long0 = MathUtils.mulAndCheck(3066L, (long) 123);
      int int1 = MathUtils.subAndCheck(1, 1);
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.round((double) 1, 0, 1);
      double double2 = MathUtils.cosh(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      float float0 = MathUtils.sign(1767.0F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = bigInteger2.flipBit(27);
      BigInteger bigInteger4 = bigInteger1.min(bigInteger2);
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger7 = bigInteger0.shiftRight(11);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, 0);
      long long0 = MathUtils.binomialCoefficient(11, (-956));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-956);
      doubleArray0[1] = (double) (-956);
      doubleArray0[2] = (double) (-956);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.gcd((-960L), 1833L);
      long long2 = MathUtils.addAndCheck(0L, (long) (-956));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-1012);
      int int1 = (-931);
      // Undeclared exception!
      try { 
        MathUtils.round((-8.0E298), (-1012), (-931));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.indicator(585);
      int[] intArray0 = new int[8];
      intArray0[1] = 585;
      intArray0[2] = 585;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 585;
      intArray0[7] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.compareTo(585, 296.13, 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger0.toByteArray();
      long long0 = MathUtils.sign(629L);
      double double1 = MathUtils.normalizeAngle(1L, (-343.969965));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-3199L), (-1714L));
      long long1 = MathUtils.gcd((-3199L), (-1714L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.16624882440418567);
      doubleArray0[1] = (double) (-1714L);
      doubleArray0[2] = (double) 5483086L;
      doubleArray0[3] = (double) 5483086L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-0.166 >= -1,714)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.binomialCoefficientLog(1529, 66);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 66;
      doubleArray0[2] = (double) 1529;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1810);
      float float0 = MathUtils.round(2029.76F, (-1810));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2029.76F;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) (-1810);
      doubleArray0[3] = (double) (-1810);
      doubleArray0[4] = (double) 2029.76F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (-1,810 >= -1,810)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      double double0 = 42.0;
      doubleArray0[1] = 42.0;
      MathUtils.checkOrder(doubleArray0);
      long long0 = 0L;
      int int0 = (-1161);
      try { 
        MathUtils.pow(0L, (-1161));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,161)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(362880L, (-1012L));
      int int0 = MathUtils.hash((double) (-1012L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-367234560L);
      doubleArray0[1] = (double) (-1012L);
      doubleArray0[2] = (double) 362880L;
      doubleArray0[3] = 442.5;
      doubleArray0[4] = (double) (-1064329216);
      doubleArray0[5] = (double) (-1012L);
      doubleArray0[6] = (double) (-367234560L);
      doubleArray0[7] = (double) (-1012L);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-941.47), 0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.not();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-2699);
      int int1 = MathUtils.mulAndCheck((-2699), (-2699));
      float float0 = MathUtils.indicator(1284.351F);
      int int2 = (-311);
      int int3 = (-3570);
      int int4 = MathUtils.lcm((-311), (-3570));
      long long0 = MathUtils.subAndCheck((long) 1110270, 3622L);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long1 = MathUtils.lcm(0L, (-2587L));
      float float1 = MathUtils.round(1.0F, (-3570));
      try { 
        MathUtils.pow(9154082963658192752L, (-3570));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (9,154,082,963,658,192,752^-3,570)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-516), (-516));
      int int1 = MathUtils.sign((-1885));
      byte byte0 = MathUtils.indicator((byte)0);
      int int2 = MathUtils.hash((double[]) null);
      byte byte1 = MathUtils.sign((byte)21);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow(4607182418800017408L, (-3656));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,607,182,418,800,017,408^-3,656)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow((-1041L), 0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.pow(0, 2104L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2104L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.binomialCoefficientLog(0, (-1591));
      long long0 = MathUtils.lcm((long) (-1591), 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(478);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1136.7818579066936, 1136.7818579066936);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[4];
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.404307984052299E-9;
      doubleArray0[2] = (-733.171);
      doubleArray0[3] = 2629.4631731176764;
      doubleArray0[4] = 31.06679300413103;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.7553817452272217E-6;
      doubleArray0[7] = (-321.1497448073672);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(1206L, 1206L);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1562L), (-980L));
      boolean boolean0 = MathUtils.equals((-1.0), (double) (-980L));
      int int0 = (-857);
      // Undeclared exception!
      try { 
        MathUtils.round((-2619.683F), (-857), (-857));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -857, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-6.032174644509064E-23);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-771.25776);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1167.20224196095);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-382.2);
      doubleArray0[7] = 0.008336750013465571;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (3.142 > -771.258)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short short0 = (short) (-1213);
      short short1 = MathUtils.sign((short) (-1213));
      int int0 = 2179;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2179);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-1);
      try { 
        MathUtils.pow((-1), (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-1859.666);
      double double1 = MathUtils.sign((-1859.666));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(0.13333332538604736, 0.13333332538604736);
      double double0 = MathUtils.sign(476.2620914);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        MathUtils.pow(0, (-952L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-952)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 1052.378608512264;
      int int0 = (-257);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1052.378608512264, 1052.378608512264, (-257));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1187);
      intArray0[1] = 1104;
      intArray0[2] = 127;
      intArray0[3] = (-2281);
      intArray0[4] = (-1272);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.round(Double.NaN, (-2349));
      int int0 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-898);
      try { 
        MathUtils.pow(632, (-898));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (632^-898)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = (-1101.83226);
      boolean boolean0 = MathUtils.equals(632.5018884964, 632.5018884964, (-1101.83226));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1101.83226);
      doubleArray0[1] = (-1070.9313716204942);
      doubleArray0[2] = 632.5018884964;
      doubleArray0[3] = (-1101.83226);
      doubleArray0[4] = (-1101.83226);
      doubleArray0[5] = 632.5018884964;
      doubleArray0[6] = (-1101.83226);
      doubleArray0[7] = (-1101.83226);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1374), (-1374));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,374
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-158.043786815983);
      doubleArray0[1] = (-1336.2207547724709);
      doubleArray0[2] = 2879.9778755901;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1820.109);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3763.8309853823807);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-158.044 > -1,336.221)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 2474L;
      long long1 = MathUtils.gcd(2474L, 2474L);
      long long2 = 0L;
      long long3 = MathUtils.indicator(0L);
      int int0 = 91;
      long long4 = MathUtils.binomialCoefficient(91, 91);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(2.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.633123935319537E16, 1.633123935319537E16);
      int int0 = 14;
      int int1 = MathUtils.sign(14);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1770.36040895948), (-1770.36040895948), (-1770.36040895948));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.gcd(2729, (-1246));
      int int1 = MathUtils.addAndCheck(0, 107);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 107;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-1920);
      try { 
        MathUtils.pow((-1920), (-1920));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,920^-1,920)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.log((-1305.6704883), (-1305.6704883));
      int int0 = MathUtils.addAndCheck(0, 57);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, (-1305.6704883));
      int int1 = MathUtils.mulAndCheck(57, 1983);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 113031;
      doubleArray0[1] = (double) 113031;
      doubleArray0[2] = 3272.4846;
      doubleArray0[3] = (double) 1983;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (113,031 > 3,272.485)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2382;
      intArray0[1] = 0;
      intArray0[2] = 831;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(480L, 480L);
      int int0 = MathUtils.sign(2844);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 230400L);
      double double0 = MathUtils.log(230400L, 480L);
      int int1 = MathUtils.hash((-1961.70408989));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.pow(1880L, 1880L);
      double double0 = MathUtils.scalb(0L, (-1399));
      int int0 = MathUtils.lcm((-1399), (-1399));
      int int1 = MathUtils.hash((double) (-1399));
      double double1 = MathUtils.log(0.0, (-3247.41597691));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1399);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 130;
      double double0 = MathUtils.factorialLog(130);
      double double1 = (-4439.469);
      double double2 = MathUtils.normalizeAngle(130, (-4439.469));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 130, 130, 130);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 130, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 20922789888000L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 20922789888000L;
      doubleArray0[1] = (double) 20922789888000L;
      doubleArray0[2] = (double) 20922789888000L;
      doubleArray0[3] = (double) 20922789888000L;
      doubleArray0[4] = (-1385.84);
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 254;
      // Undeclared exception!
      try { 
        MathUtils.round((-438.7375F), 254, 254);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 254, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.round(0.08713622391223907, 66);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.08713622391223907, (double) 66);
      boolean boolean1 = MathUtils.equals(0.08713622391223907, 0.0, (double) 66);
      int int0 = MathUtils.lcm(66, 66);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)101);
      byte byte1 = MathUtils.indicator((byte)1);
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.indicator((-1439));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1933));
      short short1 = MathUtils.sign((short) (-1933));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1933);
      doubleArray0[2] = (double) (short) (-1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -1,933)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 1743;
      float float0 = MathUtils.round((-1662.2024F), 1743);
      int int1 = MathUtils.lcm(0, 100);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = (-3327L);
      long long1 = MathUtils.indicator((-3327L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      LongStream longStream0 = mockRandom0.longs();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(0, 0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.shiftRight(31);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4, 4);
      int int0 = MathUtils.indicator(4);
      long long1 = MathUtils.gcd(750L, (long) 1);
      double double0 = MathUtils.log(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      byte byte0 = bigInteger0.byteValueExact();
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double0 = MathUtils.log(0, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.pow(1075, 1075);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1075;
      doubleArray0[1] = (double) 1075;
      doubleArray0[2] = (double) 1075;
      doubleArray0[3] = (double) (-1867603349);
      doubleArray0[4] = (double) 1075;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,075 >= 1,075)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.hash(2033.2642599);
      long long0 = MathUtils.sign((long) (-625314406));
      int int1 = MathUtils.indicator(0);
      short short0 = MathUtils.sign((short)31);
      int int2 = MathUtils.addAndCheck(0, 4466);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.indicator(1261);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 1, 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-4702), (-4702));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -4,702
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle((-1550.3471262850028), (-1550.3471262850028));
      long long0 = MathUtils.pow(2610L, 0L);
      try { 
        MathUtils.pow((-941L), (-2021L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-941^-2,021)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-2852), 27);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 27, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-20));
      long long0 = MathUtils.indicator(2047L);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-120));
      short short0 = MathUtils.indicator((short) (byte) (-120));
      float float0 = MathUtils.round(0.0F, 1264);
      double double0 = MathUtils.cosh((-3990.9989483869));
      byte byte1 = MathUtils.indicator((byte)116);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)15);
      long long0 = MathUtils.addAndCheck(413L, (long) (byte)1);
      boolean boolean0 = MathUtils.equals(0.0, 6.123233995736766E-17, (int) (byte)15);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)15;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 6.123233995736766E-17);
      double double0 = MathUtils.binomialCoefficientDouble(2541, 2513);
      double double1 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      MathUtils.checkOrder(doubleArray1);
      double double2 = MathUtils.distance1(doubleArray1, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      boolean boolean2 = MathUtils.equals(0.0, (double) 2513, 0.0);
      double double3 = MathUtils.binomialCoefficientDouble(13, (-1292));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-795L), 813L);
      long long1 = MathUtils.gcd(3384L, (-795L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3L;
      doubleArray0[1] = (double) 3L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-571);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-571));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -571
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathUtils.indicator(0.5);
      boolean boolean0 = MathUtils.equals((-3478.6276968308), (-3478.6276968308), 1.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("@fb}5O,{bHcz[CY71A");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.@fb}5O,{bHcz[CY71A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.1102230246251565E-16, 1.1102230246251565E-16);
      int int0 = MathUtils.subAndCheck(0, 4);
      float float0 = MathUtils.sign(701.5073F);
      double double1 = MathUtils.log(185.93775891403035, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.lcm(0, 4);
      short short0 = MathUtils.indicator((short)3215);
      double double2 = MathUtils.factorialLog(4);
      int int2 = MathUtils.addAndCheck((-320), (int) (short)3215);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (-3407.21628785);
      doubleArray0[3] = (double) (short)3215;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 10.0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 69;
      // Undeclared exception!
      try { 
        MathUtils.factorial(69);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(155, 155);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 155, (-1320.0));
      int[] intArray0 = new int[6];
      intArray0[0] = 155;
      intArray0[1] = 155;
      intArray0[2] = 155;
      intArray0[3] = 155;
      intArray0[4] = 155;
      intArray0[5] = 155;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.mulAndCheck(155, 1343);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1320.0);
      doubleArray0[3] = (double) 155;
      int int1 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.log(0.0, 2127656833);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = MathUtils.pow(0, (long) 155);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (155 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1719.0, 0.0, 0.036);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = MathUtils.pow(40320L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1787.25), (-1787.25));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1787.25);
      doubleArray0[1] = (-1787.25);
      doubleArray0[2] = (-1787.25);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 40320L;
      doubleArray0[7] = (double) 40320L;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign((float) 0L);
      int int1 = MathUtils.compareTo(3.834E-20, 1.0, 0L);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.subAndCheck(1916813825, 3265);
      double double0 = MathUtils.sinh((-0.7853981633974483));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1916813825);
      int int3 = MathUtils.subAndCheck(21, 0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1183, 1);
      long long1 = MathUtils.addAndCheck(2047L, 2047L);
      int int0 = MathUtils.gcd(2225, 2225);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1183L;
      doubleArray0[1] = (double) 2225;
      doubleArray0[2] = (double) 1183;
      doubleArray0[3] = (double) 2225;
      doubleArray0[4] = (double) 2225;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1183L;
      doubleArray0[7] = (double) 2225;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1183.0);
      double double0 = MathUtils.round((double) 1183L, 3319);
      int[] intArray0 = new int[2];
      intArray0[0] = 2225;
      intArray0[1] = 3319;
      double double1 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2225, 2519);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 2,225, k = 2,519
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
