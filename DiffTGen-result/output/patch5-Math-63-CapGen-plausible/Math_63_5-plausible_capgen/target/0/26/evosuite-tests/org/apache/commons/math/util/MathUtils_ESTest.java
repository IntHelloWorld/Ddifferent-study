/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 16:08:30 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3140L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 15;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 15)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2196.7081);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1413;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2639);
      int[] intArray1 = new int[7];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = (-854);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.9270934651914332E59;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.pow((long) 0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.sinh(0.16666666666666666);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2616.759021668138;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.lcm(14, (-54));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.indicator((long) 13);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.indicator((int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)40);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(67);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[5];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[7];
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 0, 1.0E-6, 232.0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 0, (double) 1L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.cosh(14);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 0, (long) 170);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 0, (-1561L));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(2, 2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(17, 4194304);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.sinh(1148.589636);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.scalb((-407.17), 72);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = MathUtils.round((float) 21, 0, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = MathUtils.round((float) (-1883001087), 0, 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1524);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.round((float) (byte)1, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = MathUtils.round((-225.095F), 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.round(1786.1231, 4, 4);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.round(1258.64, 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.round((-412.7572906317), 1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1411L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1881);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.pow(4398046511103L, 4398046511103L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.pow(3643L, 335);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.pow(4577762542105553359L, 19);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.pow(31, (long) 31);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.pow(8, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.pow(14, 14);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-91.52), 0.0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1750.0), (-1750.0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(2032, 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-113), 110);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathUtils.log(0.036, 1.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.log(594.67, 594.67);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.log(1060.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-96.9173);
      doubleArray0[1] = (-96.9173);
      doubleArray0[6] = (-1.0);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.hash((double) 396317650);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 833;
      int[] intArray1 = new int[9];
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1371.66);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 506890274350L);
      double double0 = MathUtils.distance(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 1, 3140L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(11, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte)0, 9, 1598);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1883001087), (-1883001087));
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-304L));
      BigInteger bigInteger0 = new BigInteger(1178, mockRandom0);
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) (byte)63);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 17);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-5974.628213448211));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[4];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 234);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 234
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 2390.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,390 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(374L, 3618L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) (byte) (-108), 1511L);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-4035746434778044925L), 0L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1241, (int) (short)10);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.gcd(1560L, 2L);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.gcd((-1L), (-258L));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.gcd(1030, 1030);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.gcd((-2936), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1548);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.factorial(15);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.0922789888E13, 2.0922789888E13, 16);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-228.0), 3926.0, 1598);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 1.1102230246251565E-16, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 13, (double) 832, (-2350.184443191));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2225.420383563213), (-2225.420383563213));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-749));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-165);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1994L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,994)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1307674368000L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-29^-29)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (long) (-2010103841));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,010,103,841)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 91);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        MathUtils.pow((BigInteger) null, (-5646));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-5,646)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1881);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.pow((-1194229288441379952L), 1139L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        MathUtils.pow(39916800L, (-2071L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (39,916,800^-2,071)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-1195));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,195)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 987);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 833);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        MathUtils.pow(6423182, (-2010L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (6,423,182^-2,010)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.pow(3594, 0L);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        MathUtils.pow(0, (-1267));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,267)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.pow(24, 24);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(257, 21);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = MathUtils.sign((short)78);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-981));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.sign(2L);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.sign((-2242L));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.sign((-4194287));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.sign(212);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float float0 = MathUtils.sign((float) 1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float float0 = MathUtils.sign((float) 0L);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = MathUtils.sign((float) (-2558));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.sign((-2730.0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.sign((double) 396317650);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = MathUtils.sign(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)14);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-81));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1430.1112F, 1101, 1101);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,101, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[4] = (double) Float.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 788.4435886708);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (double) Float.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, 788.4435886708);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 97.371);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 58);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 146);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 0, 973L);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-4745L), 6402373705728000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 0, (long) (-854));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-302932621132653753L), (-2927L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-386L), (-386L));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2616, 2143289344);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2223), 4194304);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long long0 = MathUtils.lcm((long) 58, 0L);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = MathUtils.lcm(177, 0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (byte)14);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1809));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long long0 = MathUtils.indicator((long) 0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long long0 = MathUtils.indicator((-137L));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = MathUtils.indicator(110);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = MathUtils.indicator((-3728));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 91, 0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = MathUtils.indicator((-1809.6559256811408));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = MathUtils.indicator(3520.096686);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-108));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long long0 = MathUtils.lcm(720L, (-2612L));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long long0 = MathUtils.lcm((long) (-1279), (long) 396317650);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long long0 = MathUtils.gcd((long) 153, (long) 0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 121L);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = MathUtils.gcd(52, (-70));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = MathUtils.lcm((-165), 15);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = MathUtils.gcd(731, 0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = MathUtils.gcd(0, (-833));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-729));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -729
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1219));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,219
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1763));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,763
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(153);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = new double[7];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[9];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.3, 0.3, 15);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-65.47861755188), 0.0, 2299);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-19.027128), (-1589.4724343096314));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0, 1895.0139797, (int) (short) (-1809));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1511L, (-2892.003), (double) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 83, (double) 0, (double) 83);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1317747831, (double) 1317747831, (double) 1317747831);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 0, (double) (short)1, 1.0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = MathUtils.compareTo(17.0, 2055.4, 0.0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 1448.257);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, (-8.0E298), (-1816.37));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1256), (-1256));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,256
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 230);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 230
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3008, 182);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(123, (-2));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(123, 0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1117, 31);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2550, 2550);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(645, (-2829));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(31, 8);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-2223));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1818, (byte)14);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(230, 0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(10, 10);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3958705157555305932L), (-3958705157555305932L));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2145L, 134842L);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1279), (-1279));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-1179));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 1L);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double double0 = MathUtils.sinh((-4013.8246));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = MathUtils.hash((-1371.66));
  }
}
