/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:04:23 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.IntStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      int int0 = MathUtils.hash(1.1102230246251565E-16);
      int int1 = (-191);
      int int2 = MathUtils.sign((-191));
      // Undeclared exception!
      try { 
        MathUtils.equals(3289.18185, (-918.430394765), 1017118720);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.indicator((-1621L));
      double double0 = MathUtils.TWO_PI;
      double double1 = MathUtils.binomialCoefficientDouble(2889, (-617));
      int int0 = MathUtils.mulAndCheck(656, (-617));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)89;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)89);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1921056801463227E-8, 1.1921056801463227E-8);
      float float0 = MathUtils.indicator(2233.472F);
      double double0 = MathUtils.scalb((-155.1564591), 69);
      double double1 = MathUtils.cosh((-155.1564591));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.1921056801463227E-8;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = MathUtils.cosh(2233.472F);
      int int0 = MathUtils.sign(69);
      long long0 = MathUtils.gcd((long) 69, (-2286L));
      double double3 = MathUtils.cosh(Double.POSITIVE_INFINITY);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-9.158820775682187E22);
      doubleArray1[1] = (double) 1.0F;
      doubleArray1[2] = (double) 69;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1.0F;
      doubleArray2[1] = (-9.158820775682187E22);
      doubleArray2[2] = 1.2093834554994256E67;
      doubleArray2[3] = 1.1921056801463227E-8;
      doubleArray2[4] = (double) 3L;
      double double4 = MathUtils.distance(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-0.12502530217170715));
      int int0 = MathUtils.pow(0, 67);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-117);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte) (-117);
      intArray0[2] = 67;
      intArray0[3] = (int) (byte)5;
      intArray0[4] = (int) (byte)5;
      intArray0[5] = 67;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (double) 67;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (5 <= 67)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1600.46972164);
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (-176.82447);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-1188496002), (-1188496002));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -1,188,496,002 + -1,188,496,002
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2145780647;
      // Undeclared exception!
      MathUtils.factorialDouble(2145780647);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.pow(469, 5040L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 5040L;
      doubleArray0[1] = (double) 469;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 5040L;
      doubleArray1[2] = (double) 469;
      doubleArray1[3] = (double) (-755073983);
      doubleArray1[4] = (double) 5040L;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int1 = MathUtils.subAndCheck(5066, 5066);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.indicator(200);
      int int1 = MathUtils.subAndCheck(1, 3);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-356.0));
      short short0 = MathUtils.indicator((short)12);
      boolean boolean0 = MathUtils.equals(10.0, (-253.2658), 1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 11040779257965449L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.cosh((-2707.955503));
      int int0 = MathUtils.addAndCheck(0, (-3724));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (-2707.955503), 3660);
      int int1 = MathUtils.sign((-2882));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (-2707.955503);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-2707.955503);
      doubleArray0[5] = (double) 3660;
      doubleArray0[6] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.normalizeAngle((-1.0), 11.0);
      int int3 = MathUtils.lcm((-374), 2437);
      int[] intArray0 = new int[3];
      intArray0[0] = 2437;
      intArray0[1] = 3660;
      intArray0[2] = (-3724);
      int[] intArray1 = new int[4];
      intArray1[0] = (-3724);
      intArray1[1] = 2437;
      intArray1[2] = (-1);
      intArray1[3] = (-814);
      double double2 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1600.46972164);
      doubleArray0[0] = 1.304E19;
      doubleArray0[5] = (-176.82447);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(1561.084631, 1561.084631, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(1387445637, 1387445637);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 1,387,445,637 + 1,387,445,637
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 2054;
      int int1 = 5;
      double double0 = MathUtils.binomialCoefficientLog(2054, 5);
      int int2 = MathUtils.sign(173);
      long long0 = MathUtils.sign(39916800L);
      long long1 = MathUtils.gcd(39916800L, (long) 5);
      double double1 = MathUtils.factorialLog(2054);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, (-1581L));
      int int0 = MathUtils.pow(0, 0);
      int int1 = MathUtils.pow(0, (long) 1);
      double double0 = MathUtils.round((-4438.370769023807), 9);
      float float0 = MathUtils.round(0.0F, 92, 0);
      short short0 = MathUtils.indicator((short)1021);
      double double1 = MathUtils.sign((double) 0);
      short short1 = MathUtils.indicator((short)1021);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator(0L);
      double double2 = MathUtils.log((-1581L), 0L);
      float float1 = MathUtils.round((float) 0L, (-2572));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      float float0 = MathUtils.round((-351.9F), 0);
      long long1 = MathUtils.addAndCheck(1L, (-2860L));
      long long2 = MathUtils.binomialCoefficient(0, 0);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.normalizeAngle(1.0, 1.0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.indicator((double) (short)0);
      float float1 = MathUtils.sign((float) (short)0);
      float float2 = MathUtils.round(765.3F, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2860L);
      doubleArray0[1] = (double) 0;
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(0, 254);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double5 = MathUtils.factorialDouble((short)0);
      long long3 = MathUtils.subAndCheck(121645100408832000L, 501L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.round((-2140.271124676), 190);
      double double1 = MathUtils.log((-422.7167018), 0.0);
      int int0 = MathUtils.lcm(190, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2140.271124676);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-2140.271124676);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-422.7167018);
      doubleArray0[8] = (-2140.271124676);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.pow(3401L, 3401L);
      int int1 = (-515);
      int int2 = 73;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-515), 73);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -515, k = 73
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-5219L), (-5219L));
      int[] intArray0 = new int[3];
      intArray0[0] = 1007;
      int int0 = (-2458);
      intArray0[1] = (-2458);
      int int1 = 44;
      intArray0[2] = 44;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.gcd((long) 44, (long) (-2458));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(" ");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection. 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 61;
      double double0 = MathUtils.binomialCoefficientLog(61, 0);
      long long0 = MathUtils.sign((-1278L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-464.2670447412999));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.lcm((-1323L), 0L);
      double double0 = MathUtils.sinh(0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1323L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1488.64582039706);
      int int0 = MathUtils.hash(1818.267827549623);
      long long1 = MathUtils.addAndCheck(0L, (-1323L));
      int int1 = MathUtils.hash((-1953.71020916));
      float float0 = MathUtils.sign((float) 33485687);
      long long2 = MathUtils.subAndCheck(24L, 2680L);
      double double1 = MathUtils.normalizeAngle(33485687, (-2656L));
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1818.267827549623;
      doubleArray2[1] = (double) 33485687;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (-1323L);
      doubleArray2[4] = 1488.64582039706;
      doubleArray2[5] = (double) 1.0F;
      doubleArray2[6] = (double) (-1323L);
      doubleArray2[7] = (double) 2680L;
      double[] doubleArray3 = MathUtils.normalizeArray(doubleArray2, 0.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.gcd(0, (-758));
      byte byte0 = MathUtils.indicator((byte)47);
      float float0 = MathUtils.round((float) 758, 0, 0);
      double double0 = MathUtils.sinh((byte)1);
      long long0 = MathUtils.lcm(2L, (long) 0);
      float float1 = MathUtils.sign((float) 2L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1.0F, (double) (-758));
      double double1 = MathUtils.sign(0.0);
      long long1 = MathUtils.pow((long) (-758), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = MathUtils.sign((-3556.223F));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3556.223F);
      doubleArray0[1] = (double) (-3556.223F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-3556.223F);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.pow((-9218868437227405313L), 1398L);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.round(828.565, 0, 0);
      double double4 = MathUtils.normalizeAngle((-3556.222900390625), (-3556.222900390625));
      double double5 = MathUtils.binomialCoefficientLog(0, 0);
      long long1 = MathUtils.lcm((long) 0, 1398L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1800);
      float float0 = MathUtils.sign((float) (short)1);
      int int0 = MathUtils.compareTo(2936.6437, 2936.6437, 0.0);
      int int1 = MathUtils.pow((int) (short)1800, (long) (short)1800);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2936.6437;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1655.2523);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, (-4535.42118), 0.0);
      double double1 = MathUtils.log(2936.6437, 0.0952233225107193);
      int int2 = MathUtils.addAndCheck(0, (-2743));
      int int3 = MathUtils.pow(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("E|>0c=f}d");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.E|>0c=f}d
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 190;
      double double0 = MathUtils.factorialDouble(190);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2245;
      intArray0[1] = 691;
      intArray0[2] = 719;
      intArray0[3] = 326;
      intArray0[4] = (-351);
      intArray0[5] = 0;
      intArray0[6] = 1337;
      int[] intArray1 = new int[8];
      intArray1[0] = 2245;
      intArray1[1] = 1337;
      intArray1[2] = 326;
      intArray1[3] = 2245;
      intArray1[4] = (-351);
      intArray1[5] = (-351);
      intArray1[6] = 2245;
      intArray1[7] = (-351);
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.5);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      float float0 = bigInteger0.floatValue();
      int int0 = bigInteger0.signum();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
      int int1 = (-631);
      int int2 = 221;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-631), 221);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -631, k = 221
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (-1608.52));
      double double0 = MathUtils.cosh(0.0);
      int int2 = MathUtils.subAndCheck(1, 1);
      long long0 = MathUtils.mulAndCheck(0L, (long) 0);
      float float0 = MathUtils.sign((float) 0);
      long long1 = MathUtils.subAndCheck(0L, (long) 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (-1608.52);
      doubleArray0[5] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not decreasing (-1,608.52 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-2063);
      long long0 = MathUtils.binomialCoefficient(582, (-2063));
      double double0 = 0.0;
      double double1 = MathUtils.log(0.0, 0.0);
      int int1 = (-1174);
      int int2 = MathUtils.pow((-1174), 582);
      int int3 = 476;
      int int4 = 92;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(476, 92);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 1522.813, 0.0);
      long long0 = MathUtils.mulAndCheck((-1097L), (-1097L));
      double double0 = MathUtils.log(0.0, 0.0);
      try { 
        MathUtils.pow((-558), (-558));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-558^-558)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.lcm(393L, 3628800L);
      float float1 = MathUtils.round(1.0F, 154);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) Float.NaN;
      doubleArray1[1] = (double) 154;
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      double double1 = MathUtils.cosh(1.0F);
      float float2 = MathUtils.round((float) 475372800L, 3, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double2 = MathUtils.log((-1397.26), 2.0);
      double double3 = MathUtils.binomialCoefficientLog(3, (-2271));
      double double4 = MathUtils.indicator((-392.1518871025902));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        MathUtils.pow((-809), (-1584));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-809^-1,584)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 3424.26;
      int int0 = MathUtils.hash(3424.26);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.compareTo(2.0, 2.0, 0.0);
      long long0 = MathUtils.sign((long) 0);
      double double0 = MathUtils.round(1266.28, 889, 0);
      int int1 = MathUtils.indicator((-1022));
      int int2 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 2143, 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.log(1111.29108, (-1821.0625596410046));
      double double1 = MathUtils.sinh((-339.67));
      boolean boolean0 = MathUtils.equals(0.0, (-339.67), 1279.3886838);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger3 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 167L);
      double double2 = MathUtils.scalb((-1.6435263540513494E147), 990);
      boolean boolean1 = MathUtils.equals(766.5108630671773, 1279.3886838);
      int int0 = MathUtils.indicator(990);
      boolean boolean2 = MathUtils.equals((-339.67), (-1821.0625596410046), 0.0);
      int[] intArray0 = new int[9];
      intArray0[0] = 990;
      intArray0[1] = 990;
      intArray0[2] = 990;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 990;
      intArray0[8] = 1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 2017.441;
      int int0 = 988;
      boolean boolean0 = MathUtils.equals(3.141592653589793, 2017.441, 988);
      // Undeclared exception!
      try { 
        MathUtils.factorial(988);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.indicator(2219.0);
      int int0 = 4448;
      // Undeclared exception!
      try { 
        MathUtils.factorial(4448);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1571.0), 0.0);
      double double0 = MathUtils.factorialDouble(2665);
      int int0 = MathUtils.indicator(2665);
      int int1 = 3508;
      float float0 = MathUtils.round((-3101.4F), 3508, 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.087;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.cosh((-661.557595603));
      double double3 = MathUtils.sign(Double.POSITIVE_INFINITY);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(0.0, 0.0, 3508);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (\u221E >= \u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-1313.7018697);
      doubleArray0[2] = 90.3525;
      doubleArray0[3] = (-2937.0);
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.binomialCoefficientLog(120, (-2569));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1048.10769), (-1048.10769), 1.570796251296997);
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.addAndCheck(0, (int) (byte)0);
      double double0 = MathUtils.sign((-173.99263898285216));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-987.4);
      doubleArray0[1] = 1.570796251296997;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1048.10769);
      doubleArray0[4] = 1.570796251296997;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (byte)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-189);
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 0;
      intArray0[5] = (-1847);
      intArray0[6] = 0;
      intArray0[7] = (int) (short)1;
      intArray0[8] = (int) (byte)0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(63, 1230);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 63, k = 1,230
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 7);
      long long0 = MathUtils.binomialCoefficient(7, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 7;
      doubleArray0[7] = 1514.0302344272452;
      doubleArray0[8] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float1 = MathUtils.round((float) 7, 7);
      double double1 = MathUtils.cosh(7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.indicator(6612L);
      long long1 = MathUtils.gcd(0L, 2819561105158720014L);
      long long2 = MathUtils.sign(0L);
      byte byte0 = MathUtils.indicator((byte)46);
      int int0 = MathUtils.lcm((-444), 2628);
      boolean boolean0 = MathUtils.equals((double) 2819561105158720014L, (double) 97236, 0.0);
      long long3 = MathUtils.pow(0L, 205L);
      int int1 = MathUtils.lcm(4592, 14);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distance1(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round((double) 205L, 66);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1386.335836446792);
      doubleArray0[1] = (double) 2819561105158720014L;
      doubleArray0[2] = (double) 2819561105158720014L;
      doubleArray0[3] = (double) 4592;
      doubleArray0[4] = (double) 97236;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1785.9508);
      doubleArray1[1] = (double) 0L;
      double double2 = MathUtils.distance(doubleArray1, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (byte)46, (double) 0L, (int) (byte)46);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1336.81806723, (-145.994926), 97236.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 655L;
      int int2 = 499;
      IntStream intStream0 = mockRandom0.ints(655L, 0, 499);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = 9154082963658192752L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9154082963658192752L, (-2936L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      BigInteger bigInteger4 = bigInteger3.pow(2237);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger3);
      int int0 = MathUtils.indicator(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round(0.0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 483);
      int int0 = MathUtils.indicator(3133);
      int int1 = MathUtils.pow((-3811), 1334);
      float float0 = MathUtils.sign((float) 1);
      float float1 = MathUtils.indicator((-1131.0F));
      byte byte0 = MathUtils.indicator((byte) (-124));
      long long0 = MathUtils.pow(3946L, 0L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2L, 2L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 2L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (double) 2L;
      doubleArray0[6] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1983;
      long long0 = MathUtils.pow(621L, 1983);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = Integer.MIN_VALUE;
      int int3 = (-726);
      // Undeclared exception!
      try { 
        MathUtils.lcm(Integer.MIN_VALUE, (-726));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 15;
      int int1 = 0;
      int int2 = MathUtils.lcm(15, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = (double) 15;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(781.78, 781.78, 132);
      boolean boolean1 = MathUtils.equals((double) 132, 0.0, 781.78);
      byte byte0 = (byte)11;
      byte byte1 = MathUtils.sign((byte)11);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 781.78;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.mulAndCheck(193L, 193L);
      int int1 = MathUtils.lcm((-1326), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte byte2 = bigInteger1.byteValueExact();
      try { 
        MathUtils.pow(bigInteger1, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 140;
      intArray0[1] = (-1831);
      intArray0[2] = 2527;
      intArray0[3] = (-1546);
      intArray0[4] = 0;
      intArray0[5] = (-2062);
      intArray0[6] = 0;
      intArray0[7] = (-529);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.sinh(0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-4637.716), (-1255.5));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1831), 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,831, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 2;
      intArray0[0] = 2;
      intArray0[1] = 4714;
      intArray0[2] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((double) 2, (double) 2);
      int int2 = MathUtils.compareTo(0.4342944622039795, 4714, (byte)0);
      long long0 = MathUtils.indicator((long) 0);
      double double0 = MathUtils.scalb((-685.70074978219), (-579));
      int[] intArray1 = new int[1];
      intArray1[0] = (int) (byte)0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.binomialCoefficientDouble((byte)1, (-394));
      double double1 = 0.0;
      double double2 = MathUtils.indicator(0.0);
      try { 
        MathUtils.pow((-548L), (long) (-394));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-548^-394)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.compareTo(1280.9277439, 1280.9277439, 1280.9277439);
      try { 
        MathUtils.pow((long) 0, (-2654L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,654)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-76));
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte) (-1), 2078.9572, (double) 0L);
      double double0 = MathUtils.normalizeAngle(3674.03744, 0.0);
      double double1 = MathUtils.binomialCoefficientDouble(29, (-739));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3364.8037, 3364.8037, 3364.8037);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.indicator((-716L));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1422.720580314249), 3364.8037, 183);
      int int1 = MathUtils.pow(183, 13);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (-1609.65648093877);
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-716L);
      doubleArray0[5] = (double) (-716L);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-102));
      long long1 = MathUtils.gcd((long) (byte) (-1), (long) 13);
      try { 
        MathUtils.pow((long) 1005007319, (int) (byte) (-102));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,005,007,319^-102)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-2404);
      double double0 = MathUtils.round(1509.924434506, (-2404));
      byte byte0 = (byte)86;
      byte byte1 = MathUtils.sign((byte)86);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(8);
      long long0 = MathUtils.binomialCoefficient(324, 8);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2760672930113736L;
      doubleArray0[1] = (double) 324;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 2760672930113736L;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 324;
      doubleArray0[7] = (double) 8;
      doubleArray0[8] = (double) 2760672930113736L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,760,672,930,113,736 > 324)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5816.103);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-1708.86429575892);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-5,816.103 < 2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.pow(4607182418800017408L, 742L);
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(1, 1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1086.04812014611;
      doubleArray0[1] = 5333.902093;
      doubleArray0[2] = 0.1111111111111111;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.1111111111111111, 5333.902093);
      int int0 = MathUtils.hash(0.1111111111111111);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.1111111111111111, (-771.7249890446), 600684251);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.scalb(1.304E19, 0);
      double double1 = MathUtils.sinh(0.0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      double double2 = MathUtils.scalb(1.304E19, 0);
      try { 
        MathUtils.pow((-3102), (long) (-3102));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,102^-3,102)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 4;
      int int1 = 218;
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 4, 218);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 218, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = 34.477804172513785;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.1102230246251565E-16;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (34.478 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 1476;
      double double0 = MathUtils.factorialLog(1476);
      long long0 = 0L;
      long long1 = MathUtils.lcm(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 1476);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathUtils.factorialLog(61);
      double double1 = MathUtils.log(61, 192.7390472878449);
      int int0 = MathUtils.gcd(58, 0);
      long long0 = MathUtils.indicator(362880L);
      double double2 = MathUtils.normalizeAngle((-825.4), 58);
      int[] intArray0 = new int[7];
      intArray0[0] = 61;
      intArray0[1] = 58;
      intArray0[2] = 0;
      intArray0[3] = 58;
      intArray0[4] = 61;
      intArray0[5] = 58;
      intArray0[6] = 61;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double3 = MathUtils.sinh(58);
      int int2 = MathUtils.subAndCheck(58, 58);
      int int3 = MathUtils.mulAndCheck(61, 58);
      int int4 = MathUtils.pow(58, 1423L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 58;
      doubleArray0[1] = (double) 61;
      doubleArray0[2] = (double) 61;
      int int5 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(0.14982303977012634, 1442.0527048951983, 0.0);
      int int0 = MathUtils.pow(0, 0);
      double double1 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 1);
      int int1 = MathUtils.gcd(880, (-1959));
      int int2 = MathUtils.gcd(0, 880);
      boolean boolean2 = MathUtils.equals(0.14982303977012634, 1733.47469472);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.sinh(106.12);
      long long0 = MathUtils.subAndCheck(0L, (-225L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 225L, 106.12);
      try { 
        MathUtils.pow(3541, (-302932621132653753L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,541^-302,932,621,132,653,753)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 81;
      int int1 = MathUtils.mulAndCheck(81, 81);
      int int2 = MathUtils.compareTo(6561, 1661.002699125546, Double.NaN);
      int int3 = MathUtils.hash((double) 6561);
      int int4 = 0;
      int int5 = MathUtils.subAndCheck(1, 0);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int6 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.scalb((-0.49999999999999994), 67);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-7.37869762948382E19);
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (-7.37869762948382E19);
      doubleArray0[3] = (double) 67;
      doubleArray0[4] = (-7.37869762948382E19);
      doubleArray0[5] = 1382.0;
      doubleArray0[6] = (-0.49999999999999994);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1382.0);
      long long0 = MathUtils.pow((long) 67, (long) 67);
      long long1 = 3358L;
      long long2 = MathUtils.mulAndCheck(3358L, 3358L);
      int int0 = MathUtils.pow(3801, 11276164L);
      // Undeclared exception!
      try { 
        MathUtils.round(1382.0, 1790741729, 7);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-868), (-868));
      double double1 = MathUtils.scalb(0.0, 2243);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1095.280460220876), (-1095.280460220876));
      double double0 = MathUtils.binomialCoefficientDouble(2543, 2543);
      int int0 = MathUtils.indicator(2543);
      int int1 = MathUtils.sign(450);
      long long0 = MathUtils.gcd((long) 1, (-3271L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.abs();
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 3878);
      BigInteger bigInteger3 = bigInteger0.mod(bigInteger2);
      int int2 = bigInteger2.compareTo(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.mod(bigInteger3);
      BigInteger bigInteger5 = bigInteger2.mod(bigInteger0);
      float float0 = MathUtils.sign((-1960.8671F));
      BigInteger bigInteger6 = MathUtils.pow(bigInteger2, bigInteger0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 450;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.sign((-536L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-954.989710099), (double) (-3271L));
      int int3 = MathUtils.sign(0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientLog(1, 1);
      long long2 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.5, 0.5);
      double double0 = MathUtils.indicator(0.5);
      int int0 = (-574);
      float float0 = MathUtils.round(0.0F, (-574));
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, 40320L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.sign((-2226L));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1212;
      double double0 = MathUtils.factorialLog(1212);
      int int1 = 1744;
      double double1 = MathUtils.factorialDouble(1744);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(65, 65);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.indicator((-1089L));
      byte byte0 = MathUtils.sign((byte) (-3));
      double double0 = MathUtils.round(0.0, (int) (byte) (-3));
      long long1 = MathUtils.subAndCheck(0L, 0L);
      int int0 = MathUtils.pow(0, 0);
      long long2 = MathUtils.mulAndCheck((-1089L), 0L);
      boolean boolean0 = MathUtils.equals(0.0, (-1965.069733417));
      float float0 = MathUtils.sign((float) (byte) (-3));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Inexact result from rounding");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Inexact result from rounding
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-758.1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.pow(5040L, 90);
      int int0 = MathUtils.addAndCheck(212, 90);
      float float0 = MathUtils.sign(1340.11F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.sign((-0.2499999997677497));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.2499999997677497);
      doubleArray0[1] = (-0.2499999997677497);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-206);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-1.0), (-206));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 2584);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2584;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.pow(1469, (long) 1469);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1469);
      boolean boolean1 = MathUtils.equals(0.0, 0.0);
      int int1 = MathUtils.lcm(1469, 12);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.15, (-695.047187759277), (double) (-598947923));
      int int2 = MathUtils.gcd(1469, 6);
      int int3 = MathUtils.mulAndCheck(0, 3);
      double double0 = MathUtils.sign((double) 1);
      byte byte0 = MathUtils.sign((byte)3);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)3;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-695.047187759277);
      doubleArray0[5] = (double) (-598947923);
      doubleArray0[6] = (double) (-598947923);
      doubleArray0[7] = (double) 1;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.sign(72.0);
      boolean boolean0 = MathUtils.equals(1.633123935319537E16, 1.0, (double) (byte)0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3838.063696971;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3838.063696971);
      int int0 = MathUtils.pow(1754, (long) 1754);
      double double0 = MathUtils.log(0.0, 3838.063696971);
      double double1 = MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1398.15;
      doubleArray0[1] = 0.036;
      doubleArray0[2] = (-3240.384854701779);
      doubleArray0[3] = (-1574.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 307.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.lcm(2979L, 2979L);
      double double1 = MathUtils.log(0.3333333333332802, 0.0F);
      int int0 = MathUtils.compareTo(3122.94745, 0.0, 0.0);
      int int1 = MathUtils.gcd(1, (-1129));
      double double2 = MathUtils.factorialLog(1);
      byte byte0 = MathUtils.sign((byte) (-30));
      double double3 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      float float0 = MathUtils.sign((-901.74F));
      long long0 = MathUtils.pow(113236205062349959L, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float1 = MathUtils.sign((-1.0F));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-632.20524));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1351);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-616);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      long long1 = MathUtils.gcd(0L, 0L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2257.0), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      double double0 = MathUtils.normalizeAngle((-5056.7), Float.NaN);
      float float1 = MathUtils.round(1.0F, (-1657), 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1313.1020257;
      doubleArray0[2] = 83.98226;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1998.2474);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.sign(3628800L);
      long long1 = MathUtils.gcd((-342L), 3628800L);
      long long2 = MathUtils.sign(1L);
      int int0 = MathUtils.mulAndCheck(1097, (-111));
      long long3 = MathUtils.sign((long) 1097);
      long long4 = MathUtils.addAndCheck(1L, 18L);
      long long5 = MathUtils.mulAndCheck((long) (-111), 1L);
      double double0 = MathUtils.log((-111L), 1L);
      int int1 = MathUtils.lcm(1283, (-121767));
      long long6 = MathUtils.indicator((long) 156227061);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-342L);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 19L;
      doubleArray0[4] = (-1337.3);
      doubleArray0[5] = (double) 156227061;
      int int2 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (19 >= -1,337.3)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(966, 966);
      int int0 = MathUtils.mulAndCheck(966, 966);
      int int1 = MathUtils.gcd(966, 933156);
      int int2 = MathUtils.sign(417);
      int[] intArray0 = new int[7];
      intArray0[0] = 966;
      intArray0[1] = 417;
      intArray0[2] = 966;
      intArray0[3] = 966;
      intArray0[4] = 1;
      intArray0[5] = 417;
      intArray0[6] = 417;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int3 = MathUtils.lcm(213, 4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.sign(31);
      int int1 = MathUtils.indicator((-2025));
      boolean boolean0 = MathUtils.equals((double) (-2025), 0.0, (double) 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 31;
      doubleArray0[3] = (double) (-2025);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (31 > -2,025)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 1522.813, 0.0);
      long long0 = MathUtils.mulAndCheck((-1097L), (-1097L));
      double double0 = MathUtils.log(0.0, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.indicator(124.24285);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.gcd((-1746), (-1746));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.lcm(0L, (long) 1746);
      double double0 = MathUtils.indicator((double) 0L);
      int int1 = MathUtils.lcm((-1746), 7);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.indicator((-961));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1.0));
      double double0 = MathUtils.scalb(0L, 0);
      double[] doubleArray2 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = MathUtils.sign((-1878.58F));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1878.58F);
      doubleArray0[3] = (double) (-1878.58F);
      doubleArray0[4] = (double) (-1878.58F);
      doubleArray0[5] = (double) (-1878.58F);
      doubleArray0[6] = (double) (-1878.58F);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (-1110.4);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (-1 > -1,878.58)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.pow((long) 0, 5377);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5377;
      doubleArray0[1] = (double) 5377;
      doubleArray0[2] = 4236.78;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator(4236.78);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-2707.0);
      boolean boolean0 = MathUtils.equals((-2707.0), 1906.9628362018);
      int int0 = (-1720);
      // Undeclared exception!
      try { 
        MathUtils.equals(1906.9628362018, 0.0, (-1720));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)7;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger2.modInverse(bigInteger0);
      int int1 = 78;
      MockRandom mockRandom0 = new MockRandom(78);
      BigInteger bigInteger4 = BigInteger.probablePrime(78, mockRandom0);
      BigInteger bigInteger5 = bigInteger0.add(bigInteger2);
      try { 
        MathUtils.pow(bigInteger0, (-1803L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,803)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, Double.POSITIVE_INFINITY, 236);
      int int0 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-827));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-2745L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,745)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.sign((-1570));
      long long0 = MathUtils.gcd((long) (-1570), (long) (-1570));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1570);
      intArray0[4] = (-1570);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1570);
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1269);
      intArray0[1] = 15;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = 4155;
      intArray0[4] = 0;
      intArray0[5] = 4561;
      intArray0[6] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3348.9851029), 3.141592653589793, 534.1);
      int int1 = MathUtils.pow(15, 4155);
      int int2 = MathUtils.indicator((-1088));
      short short0 = MathUtils.sign((short)2526);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.lcm((long) 4561, (long) (-1945361233));
      long long1 = MathUtils.gcd(0L, 0L);
      float float0 = MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.gcd(1814L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1814L, (-3.940510424527919E-20), (-3.940510424527919E-20));
      int int0 = MathUtils.subAndCheck(1118, 237);
      long long1 = MathUtils.indicator((-2238L));
      int int1 = MathUtils.indicator(0);
      double double0 = MathUtils.cosh(237);
      int int2 = MathUtils.compareTo(1118, 481.96058, (-4544.0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.cosh(10.0);
      long long0 = MathUtils.lcm(0L, 1569L);
      boolean boolean0 = MathUtils.equals(4183.425093248797, 1582.63918);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1626);
      short short0 = MathUtils.sign((short) (-913));
      long long1 = MathUtils.sign((long) 1626);
      short short1 = MathUtils.sign((short) (-913));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-869);
      try { 
        MathUtils.pow((-869), (long) (-869));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-869^-869)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 1.5;
      double double1 = MathUtils.normalizeAngle(1957.9465029662, 1.5);
      double double2 = MathUtils.binomialCoefficientDouble(466, 466);
      int[] intArray0 = new int[6];
      intArray0[0] = 466;
      intArray0[1] = 466;
      intArray0[2] = 466;
      intArray0[3] = 466;
      intArray0[4] = 466;
      intArray0[5] = 466;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck((-2135L), 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 466;
      doubleArray0[1] = (double) 466;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (466 >= 466)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.indicator((-737));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.pow(0L, 2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2 >= 2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.9868161777724352E-8;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator((float) 1046780338);
      MathUtils.checkOrder(doubleArray0);
      int int1 = MathUtils.hash((double) 1046780338);
      double double0 = MathUtils.round((-3316.0942701), 0);
      double double1 = MathUtils.binomialCoefficientDouble(1772, 1772);
      int int2 = MathUtils.gcd((-917), 1046780338);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-1731251636), (-1731251636));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1812), (-1812));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 3283344, (double) (-1812), 1.304E19);
      long long0 = MathUtils.subAndCheck(480L, 4294967295L);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(10.0, 10.0, 10.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 963.3;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 10.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((-32L), (-32L));
      int[] intArray0 = new int[8];
      intArray0[0] = 212;
      intArray0[1] = 18;
      intArray0[2] = 1240;
      intArray0[3] = 477;
      intArray0[4] = 1277;
      intArray0[5] = 266;
      intArray0[6] = 680;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.gcd(2104L, (-1L));
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2793));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,793
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1044.4496), 1164.2);
      int int0 = MathUtils.sign(746);
      long long0 = MathUtils.lcm((long) 746, (long) 746);
      double double0 = MathUtils.normalizeAngle(746, 746L);
      long long1 = MathUtils.lcm((long) 1, 746L);
      long long2 = MathUtils.indicator((long) 1);
      long long3 = MathUtils.addAndCheck((long) 746, 746L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.indicator((-1612L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1612L);
      doubleArray0[2] = (double) (-1612L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1612L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1873.4;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 5);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 97.82;
      doubleArray0[2] = (-893.4656155385799);
      doubleArray0[3] = 1460.3588;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2193.3503012;
      double double0 = 13.0;
      doubleArray0[7] = 13.0;
      doubleArray0[8] = (-5622.04105102);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 97.82)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 284;
      int int1 = MathUtils.addAndCheck(284, 5357);
      int[] intArray0 = new int[9];
      intArray0[0] = 5641;
      intArray0[1] = 5641;
      intArray0[2] = 5641;
      intArray0[3] = 5357;
      intArray0[4] = 284;
      intArray0[5] = 20;
      intArray0[6] = 284;
      intArray0[7] = 5641;
      intArray0[8] = 284;
      int[] intArray1 = new int[3];
      intArray1[0] = 20;
      intArray1[1] = 25;
      intArray1[2] = 5357;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, 0L);
      int int0 = (-2694);
      int int1 = MathUtils.subAndCheck((-2694), 0);
      double double0 = MathUtils.indicator((-2788.60981));
      float float0 = MathUtils.indicator((float) 0L);
      int int2 = 233;
      double double1 = MathUtils.binomialCoefficientDouble(233, 21);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-4595));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,595
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = 0.1666666505023083;
      int int0 = (-30);
      // Undeclared exception!
      try { 
        MathUtils.round(0.1666666505023083, 6973, (-30));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-2040);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2040), (-2040));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,040
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.sinh(3143.82163996829);
      try { 
        MathUtils.pow((-587), (-34L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-587^-34)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(4194304, 4194304);
      byte byte0 = MathUtils.indicator((byte)16);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4156.450478), (-1652.55891), (-1652.55891));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 637L);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(16, 16);
      float float0 = MathUtils.round((float) 16, 256);
      long long0 = MathUtils.mulAndCheck(0L, (-3797L));
      short short0 = MathUtils.indicator((short)975);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(256, 2255);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 256, k = 2,255
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float float0 = MathUtils.indicator(911.17F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.round((-141.7824), 0);
      double double1 = MathUtils.indicator((-142.0));
      long long0 = MathUtils.pow(2787L, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 191;
      int int1 = MathUtils.sign(191);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2737));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,737
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      int int0 = MathUtils.pow(0, (long) 0);
      double double1 = MathUtils.cosh((-3.940510424527919E-20));
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = (-4018);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1685), (-4018));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,685
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2945.265);
      doubleArray0[1] = 2.356194490192345;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1820;
      intArray0[1] = (-1581);
      intArray0[2] = 0;
      intArray0[3] = 52;
      intArray0[4] = (-3181);
      intArray0[5] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.sign(1.0F);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 790.701891);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double3 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float float0 = MathUtils.sign((-281.0F));
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int1 = (-3390);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3390));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,390
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = MathUtils.sign((short)1229);
      long long0 = MathUtils.indicator((-1621L));
      boolean boolean0 = MathUtils.equals((double) (-1L), (double) (short)1, 2928);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (short)1, (double) (short)1, 843);
      double double0 = MathUtils.binomialCoefficientDouble(2928, 2889);
      double double1 = MathUtils.binomialCoefficientDouble(2889, (-617));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1600.46972164);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-176.82447);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      int int1 = MathUtils.addAndCheck((-547007726), (-547007726));
      int int2 = MathUtils.compareTo(0.0, 2166.40346, 201.0);
      long long0 = MathUtils.gcd((long) (-1094015452), 0L);
      short short0 = MathUtils.indicator((short)61);
      int int3 = MathUtils.pow((-2262), 1205);
      int int4 = MathUtils.sign(0);
      double double0 = MathUtils.sign((-176.82447));
      int int5 = MathUtils.pow((-1), (long) 0);
      int int6 = MathUtils.mulAndCheck((-2262), 750);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1025;
      intArray0[1] = (-1);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.gcd(19, 19);
      long long0 = MathUtils.mulAndCheck((-528L), (-1055L));
      byte byte0 = MathUtils.sign((byte) (-28));
      int int2 = MathUtils.compareTo((byte) (-28), 19, 617.63200263067);
      byte byte1 = MathUtils.sign((byte)92);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.pow((-3346L), 4252L);
      long long1 = MathUtils.pow(4252L, 4252L);
      double double0 = MathUtils.round((double) (-3346L), 0, 0);
      short short0 = MathUtils.sign((short) (-2323));
      double double1 = MathUtils.scalb(1044.198377, 0);
      double double2 = MathUtils.binomialCoefficientLog(0, (short) (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) (-3346L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.lcm((-311L), 4499201580859392L);
      double double0 = MathUtils.round((-1.0), 0);
      double double1 = MathUtils.factorialDouble(0);
      int int0 = 0;
      long long1 = MathUtils.binomialCoefficient(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.indicator(383);
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 383;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1399251691647270912L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 1399251691647270912L;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.binomialCoefficient(0, (-1576));
      int int2 = MathUtils.sign((int) (byte)0);
      long long3 = MathUtils.mulAndCheck(5147L, (-1669L));
      try { 
        MathUtils.pow((long) 0, (-3644));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,644)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3532.783068344726);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-704.373);
      doubleArray0[5] = 0.5;
      doubleArray0[6] = 1166.105;
      doubleArray0[7] = (-2916.494285279);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-3,532.783 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
