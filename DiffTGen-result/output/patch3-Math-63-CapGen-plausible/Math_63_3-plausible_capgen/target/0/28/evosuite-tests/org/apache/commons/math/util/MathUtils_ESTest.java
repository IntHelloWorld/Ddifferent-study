/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:11:40 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.sign(12);
      double double0 = MathUtils.binomialCoefficientDouble(1195, 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1195.0;
      doubleArray0[1] = 1195.0;
      doubleArray0[2] = 1195.0;
      doubleArray0[3] = (double) 12;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.cosh((-111.9803833));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(4176.4216207684885, (-108.0));
      int int0 = MathUtils.mulAndCheck(2631, 2631);
      double double1 = MathUtils.indicator((-108.71075872798883));
      short short0 = MathUtils.indicator((short)0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      int int1 = MathUtils.mulAndCheck((-3293), 378);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2631, 0.0, 2631);
      long long0 = MathUtils.addAndCheck((long) 6922161, (long) (short)0);
      float float0 = MathUtils.indicator((float) 2631);
      int int2 = MathUtils.gcd((int) (short)1, (int) (short)1);
      int int3 = MathUtils.subAndCheck(221, (-82));
      double double2 = MathUtils.round((-938.803816551), 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short1 = MathUtils.indicator((short)205);
      int int4 = 0;
      int int5 = MathUtils.gcd(0, 221);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = (-1074L);
      long long1 = (-1L);
      long long2 = MathUtils.mulAndCheck((-1074L), (-1L));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-734), 0);
      double double0 = MathUtils.factorialDouble(527);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.SAFE_MIN;
      int[] intArray0 = new int[8];
      intArray0[0] = 19;
      intArray0[1] = 193;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 193;
      intArray0[6] = (-69);
      intArray0[7] = (-734);
      double double2 = MathUtils.distance(intArray0, intArray0);
      int[] intArray1 = new int[0];
      int int1 = MathUtils.distanceInf(intArray1, intArray1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-4684.7019);
      doubleArray0[3] = (double) (-734);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.1818181574344635);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int0 = MathUtils.addAndCheck(0, 66);
      long long1 = MathUtils.lcm(0L, (long) 66);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 1.0;
      int int1 = MathUtils.hash(doubleArray0);
      long long2 = MathUtils.pow(0L, (long) 1073616769);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 66);
      float float0 = MathUtils.sign(1523.0F);
      byte byte0 = MathUtils.indicator((byte) (-62));
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(2873, 2873);
      int int1 = MathUtils.mulAndCheck(2873, 2873);
      long long0 = MathUtils.mulAndCheck((-977L), (long) 8254129);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.sinh(1863.752799);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 1863.752799;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = 1863.752799;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1098.3531), 1047.22943614302);
      double double1 = MathUtils.log(0.0, 0.0);
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((-174.71901F), (int) (short)1);
      double double2 = MathUtils.factorialDouble((short)0);
      double double3 = MathUtils.sign(0.0);
      double double4 = MathUtils.binomialCoefficientLog(5, (short)0);
      int int0 = MathUtils.pow((int) (short)0, 1542L);
      long long0 = MathUtils.sign((-9218868437227405313L));
      short short1 = MathUtils.indicator((short)1);
      double double5 = MathUtils.normalizeAngle(0, 0.0);
      int int1 = MathUtils.pow(0, 0L);
      int int2 = MathUtils.compareTo((-124.89871491), 0.0, (-124.89871491));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1098.3531);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-9218868437227405313L);
      doubleArray0[4] = (-124.89871491);
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,098.353 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.pow(1244, 1244);
      short short0 = MathUtils.sign((short)1);
      double double0 = MathUtils.scalb((-2148.4664224), 1244);
      double double1 = MathUtils.binomialCoefficientLog(1244, 0);
      int int1 = MathUtils.lcm((-2832), (int) (short)1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 2832);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.compareTo(1978.7, 1978.7, 0.5);
      float float0 = MathUtils.round((-775.31F), 0, 0);
      int int1 = 2463;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1978.7, 0.0952233225107193, 2463);
      double double0 = MathUtils.log(0.0, 2650.3784615111003);
      int int2 = 250;
      double double1 = MathUtils.factorialLog(250);
      long long0 = MathUtils.factorial(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger1 = bigInteger0.abs();
      byteArray0[1] = (byte) (-21);
      byte byte0 = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = BigInteger.ZERO;
      BigInteger bigInteger4 = bigInteger3.max(bigInteger0);
      float float1 = bigInteger2.floatValue();
      float float2 = bigInteger2.floatValue();
      BigInteger bigInteger5 = bigInteger2.pow(0);
      int int3 = bigInteger2.intValue();
      // Undeclared exception!
      try { 
        bigInteger2.modPow(bigInteger3, bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3269, 1916);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 5185;
      doubleArray0[1] = (double) 5185;
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 3269, 5185.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1916);
      byte byte0 = MathUtils.indicator((byte) (-40));
      int int2 = MathUtils.gcd((-1159), 0);
      double double0 = MathUtils.log((-4189.6337343846), 0.0);
      double double1 = MathUtils.factorialLog(0);
      int int3 = MathUtils.pow(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 370L);
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      long long0 = bigInteger1.longValueExact();
      int int4 = bigInteger1.bitLength();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, bigInteger1);
      int int5 = MathUtils.pow(3547, 442L);
      byte byte1 = MathUtils.indicator((byte)55);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      int int1 = (-940);
      int int2 = MathUtils.lcm(0, (-940));
      long long0 = MathUtils.pow(720L, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.indicator((byte) (-63));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (byte) (-63);
      doubleArray1[1] = (double) (byte) (-1);
      doubleArray1[2] = (double) (byte) (-63);
      doubleArray1[3] = (double) (byte) (-1);
      doubleArray1[4] = (double) (byte) (-1);
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) (byte) (-63);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1.1102230246251565E-16);
      boolean boolean1 = MathUtils.equals((-63.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2046L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-5205.5), (-5205.5));
      float float0 = MathUtils.round(0.0F, 1127, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 1127;
      doubleArray0[4] = (double) 1127;
      doubleArray0[5] = (double) 0.0F;
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.indicator((-5205.5));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.16666666666745392;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      double double0 = MathUtils.scalb(0.0, 0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = (byte)8;
      byte byte1 = MathUtils.sign((byte)8);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = MathUtils.sign((short)2151);
      short short1 = MathUtils.indicator((short)2151);
      double double0 = MathUtils.round((double) (short)1, 0);
      int int0 = MathUtils.gcd((-1), (-755));
      long long0 = MathUtils.subAndCheck((long) (short)1, 0L);
      int int1 = MathUtils.lcm((-733), 1);
      double double1 = MathUtils.binomialCoefficientDouble(107, 0);
      double double2 = MathUtils.binomialCoefficientDouble((short)2151, 733);
      double double3 = MathUtils.cosh((-283.582493393042));
      boolean boolean0 = MathUtils.equalsIncludingNaN(7.199163705115048E122, 2.85040095144011776E17, 0.0);
      double double4 = MathUtils.log((short)1, 1.0);
      double double5 = MathUtils.sign(1.073741824E9);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.compareTo(0.041666666666666664, (short)1, 514.616240711);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = 0.625;
      double double1 = 0.0;
      double double2 = 1015.3;
      int int0 = MathUtils.compareTo(0.625, 0.0, 1015.3);
      double double3 = (-439.156);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.625, (-439.156), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.round(0.0, (-501));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(24L, 24L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      try { 
        MathUtils.normalizeArray(doubleArray0, 24L);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int0 = MathUtils.addAndCheck(0, 66);
      long long1 = MathUtils.lcm(95L, (long) 66);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6270L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 1.0;
      int int1 = MathUtils.hash(doubleArray0);
      try { 
        MathUtils.pow(0L, (long) (-577971839));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-577,971,839)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-933.45770241), (-933.45770241));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-933.45770241);
      doubleArray0[1] = (-933.45770241);
      doubleArray0[2] = (-933.45770241);
      doubleArray0[3] = (-933.45770241);
      doubleArray0[4] = (-933.45770241);
      doubleArray0[5] = (-933.45770241);
      doubleArray0[6] = (-933.45770241);
      doubleArray0[7] = (-933.45770241);
      doubleArray0[8] = 86.537613817323;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2143586218, 2139702910);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1.9841269659586505E-4), (-1.9841269659586505E-4));
      boolean boolean0 = MathUtils.equals((-1.9841269659586505E-4), 3135.58803561349, 3135.58803561349);
      long long0 = MathUtils.indicator((-2541L));
      byte byte0 = MathUtils.indicator((byte) (-34));
      float float0 = MathUtils.sign((-1.0F));
      try { 
        MathUtils.pow((-937L), (-3183605296591799669L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-937^-3,183,605,296,591,799,669)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        MathUtils.pow((-3179L), (-3364L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,179^-3,364)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1152.35922302;
      doubleArray0[1] = (-351.3);
      doubleArray0[2] = 569.0;
      doubleArray0[3] = (-1.0E-6);
      doubleArray0[4] = (-506.202802918);
      doubleArray0[5] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)75;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1703L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (13,992,236,363^-1,703)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1246.986822;
      doubleArray0[1] = 1996.2690138889639;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 6.283185307179586;
      double double0 = (-1227.632033200598);
      doubleArray0[5] = (-1227.632033200598);
      double double1 = (-2355.845);
      doubleArray0[6] = (-2355.845);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,996.269 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1701.8165522;
      doubleArray0[1] = 0.1666666505023083;
      doubleArray0[2] = 1.2958646899018938E-9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-963.3);
      doubleArray0[5] = 1986.931;
      doubleArray0[6] = (-2241.7864245);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,701.817 >= 0.167)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.sign(171);
      long long0 = MathUtils.subAndCheck((long) 171, (-1088L));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.sinh((-1469.656));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1088L);
      doubleArray1[1] = (double) 1259L;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-1469.656);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (double) (-1088L);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.1428571343421936;
      double double2 = MathUtils.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.indicator((-3848.882398913));
      double double1 = MathUtils.sign((-1682.856451326));
      long long0 = (-3162L);
      long long1 = MathUtils.mulAndCheck((-3162L), (-3162L));
      int int0 = MathUtils.sign(679);
      double double2 = MathUtils.indicator(0.0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-3162L), 679, 1265);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.indicator(720L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(4095L, 2935890503282001226L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-1038);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1038), (-1038));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,038
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.mulAndCheck(4607182418800017408L, (long) 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.log(Double.NaN, Double.NaN);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.subAndCheck(3716, 625);
      int int1 = MathUtils.lcm(625, 625);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 3716;
      doubleArray0[2] = (-353.266791);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 625;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,716 >= -353.267)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.6931470632553101;
      doubleArray0[1] = 703.7711;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1352.6);
      doubleArray0[4] = 571.769523972476;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.indicator(0L);
      int int1 = MathUtils.pow(252, (long) 252);
      long long1 = MathUtils.indicator((long) 252);
      int int2 = MathUtils.addAndCheck(0, 252);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.mulAndCheck((long) 1092432368, (-2625L));
      long long3 = MathUtils.sign((long) 1092432368);
      long long4 = MathUtils.sign(1477L);
      short short0 = MathUtils.sign((short)227);
      long long5 = MathUtils.indicator((-1787L));
      double double1 = MathUtils.indicator((-1939.24518));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2817, 2817);
      double double1 = MathUtils.indicator((-0.12502530217170715));
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValue();
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(34);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger2 = bigInteger0.flipBit(74);
      int int0 = bigInteger0.getLowestSetBit();
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2817);
      long long2 = MathUtils.indicator(1755L);
      long long3 = MathUtils.gcd(0L, 2705L);
      float float0 = MathUtils.sign((-639.0F));
      int int2 = MathUtils.hash((double) 2817);
      long long4 = MathUtils.lcm(2L, 937L);
      long long5 = MathUtils.lcm((long) 1, 0L);
      long long6 = MathUtils.pow((long) 1, 2014L);
      double double2 = MathUtils.binomialCoefficientLog(1430, 1430);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigInteger0.isProbablePrime(698);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      int int0 = bigInteger2.intValue();
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger1);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.shiftRight(698);
      BigInteger bigInteger6 = bigInteger0.negate();
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 0);
      boolean boolean1 = MathUtils.equals(0.0, 1.125);
      float float0 = MathUtils.sign((float) 0);
      int int1 = MathUtils.subAndCheck(0, 223);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 1.1102230246251565E-16, (-1144.53));
      long long0 = MathUtils.pow(39916800L, 0);
      long long1 = MathUtils.addAndCheck((long) 0, 6722166367014452318L);
      long long2 = MathUtils.indicator(6402373705728000L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.1102230246251565E-16;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long3 = MathUtils.gcd((long) 0, 1L);
      long long4 = MathUtils.pow(2624L, 0);
      double double2 = MathUtils.factorialLog(0);
      int int0 = MathUtils.sign(0);
      long long5 = MathUtils.pow(0L, 6402373705728000L);
      double double3 = MathUtils.scalb(818.5, 0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.gcd(2175, 158);
      short short0 = MathUtils.sign((short)4087);
      double double4 = MathUtils.sign(818.5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(505.7, 505.7);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      int int1 = 6;
      int int2 = MathUtils.pow(6, 378);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-0.49999999999999994);
      doubleArray0[1] = 505.7;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = 505.7;
      doubleArray0[4] = (double) 6;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.round((double) 6, 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 505.7;
      doubleArray1[1] = (double) 378;
      doubleArray1[2] = 715.2183093293963;
      doubleArray1[3] = 715.2183093293963;
      doubleArray1[4] = 505.7;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2817, 2817);
      double double1 = MathUtils.indicator((-0.12502530217170715));
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValue();
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(34);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger2 = bigInteger0.flipBit(74);
      int int0 = bigInteger0.getLowestSetBit();
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2817);
      long long2 = MathUtils.indicator(1755L);
      long long3 = MathUtils.gcd(0L, 2705L);
      float float0 = MathUtils.sign((float) 1);
      int int2 = MathUtils.hash((double) 2817);
      long long4 = MathUtils.lcm(2L, 937L);
      long long5 = MathUtils.pow((long) 74, 0L);
      long long6 = MathUtils.pow((long) 1, 2045L);
      double double2 = MathUtils.binomialCoefficientLog(1430, 1430);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2998.44544386883;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      short short0 = MathUtils.sign((short)236);
      int int0 = (-2581);
      int int1 = MathUtils.gcd((int) (short)236, (-2581));
      int int2 = MathUtils.addAndCheck((int) (short)1, (int) (short)236);
      double double0 = MathUtils.scalb(2998.44544386883, 1);
      int[] intArray0 = new int[0];
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.normalizeAngle(1.0, 3806.9);
      int int4 = MathUtils.subAndCheck(1970, 1970);
      boolean boolean1 = MathUtils.equals((double) 1, 1532.316, 3808.610296150829);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double2 = MathUtils.indicator(1.0);
      double double3 = MathUtils.distance(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, (-2581), (-1092));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,092, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 165.65261;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.sign(2756L);
      double double0 = MathUtils.scalb(791763328, 0);
      double double1 = MathUtils.indicator(5.650007086920087E-9);
      float float0 = MathUtils.indicator((-1.0F));
      double double2 = MathUtils.factorialLog(1694);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-89));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-89);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-0.1666666567325592), (-89.0), 63);
      boolean boolean1 = MathUtils.equals((-89.0), (-89.0), 63);
      int int0 = MathUtils.lcm(196, 1491);
      int[] intArray0 = new int[5];
      intArray0[0] = 41748;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = 0;
      intArray0[3] = 1491;
      intArray0[4] = 63;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.scalb(9.0, 1857);
      double double1 = MathUtils.cosh((-4478.38622));
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 1857;
      doubleArray0[2] = (double) 1857;
      doubleArray0[3] = (-4478.38622);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1857;
      doubleArray0[8] = (-2.867565440038414E-57);
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 176;
      intArray0[1] = 7;
      intArray0[2] = 1;
      intArray0[3] = 210;
      int[] intArray1 = new int[4];
      intArray1[0] = 7;
      intArray1[1] = 7;
      intArray1[2] = 1;
      intArray1[3] = 176;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 210, (-2104), 8);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd((int) (short)0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, 799.3649674788505);
      int int2 = MathUtils.subAndCheck(169, 195);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.indicator((-2590L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9218868437227405312L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte byte0 = (byte) (-126);
      byte byte1 = MathUtils.sign((byte) (-126));
      int int0 = MathUtils.hash((double) (byte) (-1));
      double double0 = MathUtils.sinh((-1378.4584045066426));
      double double1 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      double double2 = MathUtils.round(Double.NEGATIVE_INFINITY, 0, 0);
      short short0 = MathUtils.sign((short) (-2449));
      long long0 = MathUtils.gcd((-372L), 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(44);
      double double3 = bigInteger0.doubleValue();
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      int int1 = bigInteger0.intValue();
      byte[] byteArray0 = bigInteger0.toByteArray();
      try { 
        MathUtils.pow(bigInteger0, (-372L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-372)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 61;
      int int1 = 2062;
      int int2 = MathUtils.pow(61, 2062);
      try { 
        MathUtils.pow((BigInteger) null, (long) (-1773999879));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,773,999,879)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.gcd((-1), (-1));
      byte byte0 = MathUtils.sign((byte) (-111));
      double double0 = MathUtils.round((-2709.839397742663), (-683));
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (int) (byte) (-1));
      short short0 = MathUtils.indicator((short) (byte) (-1));
      double double2 = MathUtils.factorialLog(152);
      double double3 = MathUtils.indicator(Double.NaN);
      int int2 = 0;
      int int3 = MathUtils.gcd(0, 696);
      int int4 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(2045.134F, 0, 2392);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,392, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      long long0 = MathUtils.subAndCheck((long) 0, (-2848L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2848L);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2848L));
      int int1 = MathUtils.hash(0.0);
      long long1 = MathUtils.lcm((-691L), (-757L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -2,848)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(545.528658667, 0.0, Double.POSITIVE_INFINITY);
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.lcm(1, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-3165.427650224235);
      doubleArray0[3] = 545.528658667;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = 545.528658667;
      doubleArray0[8] = (-491.93772);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)1971);
      long long0 = MathUtils.pow((long) 1, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (short)1971);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, (long) 0);
      long long1 = MathUtils.mulAndCheck((long) (short)1971, 5040L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1, 4155.042626109979, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-195L), (-195L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-195L), (double) 0L, 150);
      int int0 = MathUtils.pow(150, 0L);
      short short0 = MathUtils.indicator((short) (-18349));
      boolean boolean1 = MathUtils.equals(42.0, 4568.09, 4568.09);
      int int1 = MathUtils.gcd(1, (int) (short) (-1));
      int int2 = MathUtils.pow(1579, 1579);
      int int3 = MathUtils.addAndCheck(1579, (-3018));
      double double0 = MathUtils.sign(2203.0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-968196557);
      intArray0[1] = (-968196557);
      intArray0[2] = (-3018);
      intArray0[3] = 1579;
      intArray0[4] = (-1439);
      intArray0[5] = 1;
      int[] intArray1 = new int[3];
      intArray1[0] = (int) (short) (-18349);
      intArray1[1] = 1579;
      intArray1[2] = (int) (short) (-18349);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 522.0;
      doubleArray0[1] = (-55.9375);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2160.813174914;
      doubleArray0[4] = 1.176342548272881E-8;
      doubleArray0[5] = 1792.869446419099;
      doubleArray0[6] = (-118.253576116199);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1392.8516552885349));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 996.0;
      double double1 = MathUtils.sinh(996.0);
      int int0 = (-1822);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1822), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,822, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 5040L;
      long long1 = MathUtils.addAndCheck(5040L, 5040L);
      boolean boolean0 = MathUtils.equals((-3719.2858216239), 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5040L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.checkOrder(doubleArray0);
      BigInteger bigInteger0 = null;
      int int0 = 20;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 20);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, (-281));
      short short0 = MathUtils.sign((short) (-245));
      int int1 = MathUtils.subAndCheck(11, 0);
      int int2 = MathUtils.compareTo(0.0, (-2419.2873769507), (-1519.64));
      double double0 = MathUtils.cosh(4362.79726793);
      int int3 = (-2145);
      long long0 = MathUtils.binomialCoefficient(11, (-2145));
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 11, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 152.39192);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      long long1 = MathUtils.pow(2760L, 0);
      long long2 = MathUtils.subAndCheck(726L, 1L);
      long long3 = MathUtils.pow(725L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 726L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sinh(0);
      double[] doubleArray1 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 13;
      long long0 = MathUtils.binomialCoefficient(13, 13);
      int int1 = MathUtils.compareTo((-1.0), 1L, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 2309.4584864487706;
      double double1 = MathUtils.sinh(2309.4584864487706);
      int int0 = (-872);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-872));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -872
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = MathUtils.indicator((-881.1471F));
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.compareTo((-881.1471F), 0, (-1.0F));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-881.1471F);
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle((-881.1471F), (-881.1470947265625));
      double double2 = MathUtils.factorialDouble(0);
      double double3 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.304E19);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-1606);
      long long0 = 1L;
      int int1 = MathUtils.pow((-1606), 1L);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1606));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,606
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-123.1244973975);
      doubleArray0[1] = 1382.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
      int int0 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.cosh(0);
      double double2 = MathUtils.round(0.0, 11, 0);
      double double3 = MathUtils.scalb(0.0, 11);
      int int1 = MathUtils.pow(1292, 1490L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(147);
      int int0 = MathUtils.sign((-2448));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int1 = MathUtils.subAndCheck(1921, 8);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(768, 768);
      long long0 = MathUtils.gcd((long) 768, (-126L));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 6L;
      doubleArray1[1] = (double) 6L;
      doubleArray1[2] = 1.0;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 1.0);
      byte byte0 = MathUtils.indicator((byte)75);
      short short0 = (short) (-3199);
      short short1 = MathUtils.sign((short) (-3199));
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 768, 0.0, (int) (short) (-3199));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 6722166367014452318L;
      int int0 = (-1);
      try { 
        MathUtils.pow(6722166367014452318L, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (6,722,166,367,014,452,318^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = MathUtils.sign((-119.8004F));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1589.911368;
      doubleArray0[1] = 643.0;
      doubleArray0[2] = 907.4691203149866;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.indicator(1589.911368);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.058823529411764705, 10.0);
      int int0 = (-1730);
      int int1 = MathUtils.subAndCheck((-1730), (-1730));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (643 <= 907.469)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 148.383781;
      doubleArray0[3] = 1.176342548272881E-8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (6.283 <= \u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.indicator(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int2 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.round(585.3119482642574, 0, 2872);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 78;
      doubleArray0[2] = 4463.6;
      doubleArray0[3] = (double) 78;
      doubleArray0[4] = (double) (-2827);
      doubleArray0[5] = (double) (-2827);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.pow((long) 78, 0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck((long) (-2827), (long) 0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.pow(0L, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 1L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 506;
      intArray0[1] = (-1632);
      intArray0[2] = 0;
      intArray0[3] = 2242;
      intArray0[4] = 11;
      intArray0[5] = (-2101);
      intArray0[6] = 704;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.round(1.0, 796);
      long long0 = MathUtils.subAndCheck(4503599627370496L, 2022L);
      boolean boolean0 = MathUtils.equals((-1913.105537054), (-1913.105537054));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4503599627368474L;
      doubleArray0[1] = (double) 2022L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (-2813));
      boolean boolean1 = MathUtils.equals((double) 4503599627368474L, (-1913.105537054));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 886L);
      BigInteger bigInteger3 = BigInteger.valueOf(796);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger2, bigInteger0);
      byte byte0 = MathUtils.sign((byte) (-7));
      double double2 = MathUtils.log(1.0, 0.0);
      double double3 = MathUtils.round(1654.8421, 686);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-501.186), 907.150500873405);
      double double0 = MathUtils.sign(907.150500873405);
      long long0 = MathUtils.gcd((-1L), 0L);
      long long1 = MathUtils.addAndCheck(0L, (-148L));
      boolean boolean1 = MathUtils.equals((double) 1L, 0.0);
      short short0 = MathUtils.sign((short)1163);
      double double1 = MathUtils.binomialCoefficientDouble((short)1163, (short)1163);
      byte byte0 = MathUtils.indicator((byte)37);
      int int0 = MathUtils.lcm((int) (byte)37, (-883));
      long long2 = MathUtils.mulAndCheck(0L, (-302932621132653753L));
      double double2 = MathUtils.sinh((short)1);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean2 = bigInteger0.testBit(32671);
      BigInteger bigInteger1 = bigInteger0.clearBit(1186);
      try { 
        MathUtils.pow(bigInteger0, (-2146));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,146)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-816.5442648013641);
      doubleArray0[2] = 0.041666666666666664;
      doubleArray0[3] = (-1521.75);
      doubleArray0[4] = (-857.453457433807);
      doubleArray0[5] = 2.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-1521.75), 0.0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.compareTo(0.041666666666666664, (-947.53947102884), 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.lcm(0L, 0L);
      int int1 = MathUtils.gcd(0, (-1838));
      int int2 = MathUtils.compareTo(0.06666666666666667, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-3378);
      int int1 = MathUtils.indicator((-3378));
      double double0 = MathUtils.sign(5.669184079525E-24);
      double double1 = MathUtils.normalizeAngle(232.83, 0.0);
      int int2 = MathUtils.hash((double[]) null);
      double double2 = MathUtils.round((-2593.412092), (-1));
      double double3 = MathUtils.indicator((-2593.412092));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 186;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(186, 2820);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 186, k = 2,820
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-3378);
      int int1 = MathUtils.indicator((-3378));
      double double0 = MathUtils.sign(5.669184079525E-24);
      double double1 = MathUtils.normalizeAngle(232.83, 0.0);
      int int2 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      int int0 = MathUtils.subAndCheck((-200), 0);
      long long1 = MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-300.9387394113), (-1719.740917425), 4339.0);
      double double0 = MathUtils.indicator((-995.639730081733));
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9218868437227405312L, 1455L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.lcm(1791, 2);
      int int1 = MathUtils.sign(2);
      float float0 = MathUtils.round((float) 2, 3582, 2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 3582;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(0.0, 933);
      long long0 = MathUtils.pow((long) 3582, (long) 1791);
      int int2 = MathUtils.subAndCheck(0, 1);
      double double1 = MathUtils.round(Double.NaN, 0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1546.08488);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1643.586609);
      doubleArray0[3] = 0.08371849358081818;
      doubleArray0[4] = 1104.5036364207;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -1,643.587)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = 3023.50688233549;
      double double1 = MathUtils.log(3023.50688233549, 2049.8703561);
      double double2 = MathUtils.round(0.0, 1078, 0);
      long long0 = (-165L);
      long long1 = MathUtils.sign((-165L));
      int int0 = 1760;
      int int1 = MathUtils.gcd((-2578), 1760);
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1262), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,262, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(36, 36);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      byte byte0 = MathUtils.indicator((byte) (-83));
      boolean boolean0 = MathUtils.equals((-1644.1076638114748), (double) (byte) (-1), 1.375);
      double double1 = MathUtils.log(1.0, 936.2541420375);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 936.2541420375;
      doubleArray0[3] = (double) (byte) (-83);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (byte) (-83);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 1.375;
      doubleArray0[8] = 1.375;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-317.497238), (-1664.528987373739));
      long long2 = MathUtils.lcm(597L, (-2715L));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(40320L, 40320L);
      long long1 = MathUtils.addAndCheck(40320L, 1L);
      long long2 = MathUtils.addAndCheck(4607182418800017408L, (-2702L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 40321L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 1199;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 4607182418800014706L, 1199, 1199);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.pow(24L, 937L);
      double double0 = MathUtils.sign(1631.75851);
      double double1 = MathUtils.sinh(1.0);
      short short0 = MathUtils.sign((short)1313);
      // Undeclared exception!
      try { 
        MathUtils.round(1631.75851, (int) (short)1, (-350));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.sign((-2203L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2203L);
      doubleArray0[1] = 0.003;
      doubleArray0[2] = (double) (-2203L);
      doubleArray0[3] = (double) (-2203L);
      doubleArray0[4] = (double) (-2203L);
      doubleArray0[5] = (double) (-2203L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-2203L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2203.0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-736.141327085);
      doubleArray0[3] = 13.0;
      doubleArray0[4] = 2.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-\u221E < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)9);
      int int0 = MathUtils.subAndCheck((int) (byte)9, (-901));
      double double0 = MathUtils.sinh((-553.44722));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)9, (double) (byte)1, 0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 161.15842627417788;
      double double1 = MathUtils.normalizeAngle(0.0, 161.15842627417788);
      double double2 = (-2810.72117);
      int int0 = 0;
      double double3 = MathUtils.round((-2810.72117), 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 161.15842627417788;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2811.0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 161.15842627417788;
      doubleArray0[6] = 161.15842627417788;
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-2811.0));
      int int1 = 148;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 148);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 148
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-1237.46);
      double double1 = 9.313225746154785E-10;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1237.46), (-1237.46), 9.313225746154785E-10);
      int int0 = (-2828);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2828));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,828
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 5);
      double double0 = MathUtils.factorialDouble(0);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.4342944622039795, (double) 5, 0.0);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.factorialLog(5);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.4342944622039795;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 0.4342944622039795;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 11.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double4 = MathUtils.indicator((-1632.641326173));
      short short0 = MathUtils.indicator((short) (byte)0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(241.551546603897, (-1911.1), 0.4342944622039795);
      int int1 = MathUtils.addAndCheck((-5322), (int) (byte)0);
      byte byte1 = MathUtils.sign((byte)0);
      double double5 = MathUtils.safeNorm(doubleArray0);
      try { 
        MathUtils.pow((int) (byte)0, (-94));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-94)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(142.6337307805685, 142.6337307805685, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.1818181574344635;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = (-2481.1784523612);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.182 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1523, 0);
      short short0 = MathUtils.sign((short) (-3232));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1407), 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,407, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("", (byte)0);
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-1487.3734);
      double double1 = MathUtils.indicator((-1487.3734));
      int int0 = (-1061);
      try { 
        MathUtils.pow((BigInteger) null, (-1061));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,061)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-950.3068);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.round(1627.59029287, (-822), 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-198), 183);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -198, k = 183
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(31, 31);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-291);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-291));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -291
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.gcd(226, 226);
      long long0 = MathUtils.subAndCheck(2644L, 2644L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 226;
      doubleArray0[2] = (double) 2644L;
      doubleArray0[3] = (double) 226;
      doubleArray0[4] = (double) 226;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 226;
      doubleArray0[7] = (double) 2644L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.lcm((-4194), (-4194));
      double double0 = MathUtils.scalb((-4194), 4194);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1689.07284343), (double) (-4194));
      int int1 = MathUtils.sign(4194);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3295.374982159);
      doubleArray0[1] = 0.3333333134651184;
      doubleArray0[2] = (-2179.54358);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.3333333134651184, (-2179.54358), (-1204.457213560834));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1785.0;
      doubleArray0[1] = (-1518.4487);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1785.0;
      doubleArray1[1] = 1785.0;
      doubleArray1[2] = (-1518.4487);
      doubleArray1[3] = (-1518.4487);
      doubleArray1[4] = 1785.0;
      doubleArray1[5] = 1785.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.indicator(18);
      double double0 = MathUtils.sinh(0.7853981633974483);
      int int1 = MathUtils.pow(1, 18);
      double double1 = MathUtils.factorialLog(0);
      MockRandom mockRandom0 = new MockRandom(18);
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4525.016667979509);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.compareTo(0, (-4525.016667979509), 0.0);
      double double0 = MathUtils.log(0, (-4525.016667979509));
      float float0 = MathUtils.sign((float) 1);
      long long0 = MathUtils.subAndCheck((long) 1, (long) 1);
      long long1 = MathUtils.pow(857L, 1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.lcm((-2013), (-2013));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-141.44593), 0.0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 2013;
      doubleArray1[2] = (double) 2013;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-902.45003133), (-902.45003133), 17);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-501), (-501));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -501, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((-223L), 184);
      long long1 = MathUtils.gcd((-6956104091718291711L), (-6956104091718291711L));
      double double1 = MathUtils.binomialCoefficientDouble(184, 184);
      boolean boolean0 = MathUtils.equals(1184.1279194, 0.1111111111111111);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1034.1133106816917), 0.1111111111111111, 1184.1279194);
      boolean boolean2 = MathUtils.equals((-1034.1133106816917), 0.0);
      double double2 = MathUtils.sign(0.0);
      double double3 = MathUtils.binomialCoefficientDouble(184, 31);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-61);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)59);
      boolean boolean0 = MathUtils.equals((double) (byte)1, 42.0, 2205);
      int int0 = MathUtils.addAndCheck((int) (byte)59, 99);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("LQOjxF5g@^X]5|.|S");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.LQOjxF5g@^X]5|.|S
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.indicator(2.2250738585072014E-308);
      double double1 = MathUtils.normalizeAngle(2.2250738585072014E-308, 21.0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = 4728L;
      int int0 = 13;
      long long1 = MathUtils.pow(4728L, 13);
      long long2 = MathUtils.subAndCheck(4728L, (-6831952388383834112L));
      int int1 = (-505);
      try { 
        MathUtils.pow((-505), (-190L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-505^-190)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1867.7, 575.6362098645, 575.6362098645);
      long long0 = MathUtils.gcd(2574L, 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      double double0 = bigInteger0.doubleValue();
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(6722166367014452318L, 6722166367014452318L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 6,722,166,367,014,452,318 + 6,722,166,367,014,452,318
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.11113807559013367, 0.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 63;
      intArray0[1] = 1771;
      intArray0[2] = 14;
      intArray0[3] = 1263;
      intArray0[4] = 23;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = 4607182418800017408L;
      long long1 = 632L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4607182418800017408L, 632L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 681;
      // Undeclared exception!
      try { 
        MathUtils.factorial(681);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-430);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-430), (-430));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -430, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.pow(4637, 17);
      float float0 = MathUtils.indicator(4213.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1187.1), 0.11111095942313305, (double) 4637);
      long long0 = MathUtils.gcd((long) 122107485, (long) 17);
      byte byte0 = MathUtils.indicator((byte) (-37));
      short short0 = MathUtils.indicator((short)87);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equals((-268.470751844), 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (int) (short)1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1069), 5389);
      int int1 = MathUtils.lcm(5389, 0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(8L, 9154082963658192752L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.cosh(945.32526);
      boolean boolean0 = MathUtils.equals(0.5000000000042687, 1189.0808557589835, (-804.7417));
      double double1 = MathUtils.sinh((-804.7417));
      float float0 = MathUtils.round(150.11151F, 0);
      long long0 = MathUtils.lcm((-629L), (-629L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.pow(720L, 475);
      double double0 = MathUtils.binomialCoefficientDouble(0, (-2179));
      int int0 = MathUtils.addAndCheck(0, 475);
      short short0 = MathUtils.sign((short)840);
      int int1 = MathUtils.mulAndCheck(475, 475);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1206);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.gcd(5797, 5797);
      boolean boolean0 = MathUtils.equals((double) 5797, (double) 5797, (double) 5797);
      long long0 = MathUtils.indicator(0L);
      float float0 = MathUtils.round((float) 5797, (-1881));
      double double0 = MathUtils.cosh(1287.607427);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.compareTo(3.141592653589793, 3.141592653589793, -0.0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int0 = MathUtils.pow((-169), 0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 113);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 113, 0.0, 113);
      int int0 = MathUtils.lcm(113, 2161);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathUtils.sign((-516.837306));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = 437.07071644157;
      double double1 = MathUtils.normalizeAngle(437.07071644157, 0.3333333134651184);
      int int0 = MathUtils.pow(944, 19);
      float float0 = MathUtils.sign((float) 19);
      int int1 = 0;
      int int2 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 0.3333333134651184, (double) 0);
      double double2 = MathUtils.round(0.3333333134651184, 0);
      int int3 = 175;
      double double3 = MathUtils.binomialCoefficientDouble(2184, 175);
      try { 
        MathUtils.pow(0, (-720L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-720)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 65L);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(305.4, 305.4, (-2993.52));
      double double0 = MathUtils.binomialCoefficientDouble(162, (-3766));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.lcm(8, 595);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)11;
      BigInteger bigInteger3 = BigInteger.valueOf((-1963L));
      byteArray0[2] = (byte)0;
      BigInteger bigInteger4 = bigInteger0.negate();
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-51);
      byte byte0 = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger5 = new BigInteger(byteArray0);
      int int1 = bigInteger5.intValue();
      BigInteger bigInteger6 = bigInteger5.remainder(bigInteger3);
      String string0 = bigInteger5.toString((int) (byte) (-75));
      BigInteger bigInteger7 = bigInteger0.divide(bigInteger5);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, bigInteger0);
      int int2 = MathUtils.lcm((int) (byte)18, (int) (byte)11);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(8, 115);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 8, k = 115
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.log((-1429.010774149), (-1429.010774149));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1429.010774149);
      double double1 = (-0.0013888888689039883);
      doubleArray0[1] = (-0.0013888888689039883);
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.pow((long) 66419838, 66419838);
      int int1 = MathUtils.sign(66419838);
      int int2 = (-1804);
      try { 
        MathUtils.pow(66419838, (-1804));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (66,419,838^-1,804)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 20;
      double double0 = MathUtils.round(0.0, 20);
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1098.3531), 1047.22943614302);
      double double1 = MathUtils.log(0.0, 0.0);
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((-174.71901F), (int) (short)1);
      double double2 = MathUtils.factorialDouble((short)0);
      double double3 = MathUtils.sign(0.0);
      int int0 = 5;
      double double4 = MathUtils.binomialCoefficientLog(5, (short)0);
      int int1 = MathUtils.pow((int) (short)0, 1542L);
      long long0 = MathUtils.sign((-9218868437227405313L));
      short short1 = MathUtils.indicator((short)1);
      double double5 = MathUtils.normalizeAngle(0, 0.0);
      int int2 = MathUtils.pow(0, 0L);
      int int3 = MathUtils.compareTo((-124.89871491), 0.0, (-124.89871491));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1098.3531);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-9218868437227405313L);
      doubleArray0[4] = (-124.89871491);
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,098.353 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = MathUtils.sign(1198.1871F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("}if,m)CC h3-A*Wk1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.}if,m)CC h3-A*Wk1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 167;
      int int1 = 1182;
      // Undeclared exception!
      try { 
        MathUtils.round((-4487.01F), 167, 1182);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,182, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-541.23210542);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1701.901881;
      doubleArray0[3] = 121.0;
      doubleArray0[4] = (-4469.38145905207);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = 1.997844754509471E-9;
      int int0 = (-954);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.997844754509471E-9, 0.0, (-954));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = 390L;
      long long1 = MathUtils.lcm(390L, 390L);
      long long2 = 4162L;
      long long3 = MathUtils.indicator(4162L);
      double double0 = MathUtils.indicator(0.0);
      try { 
        MathUtils.pow((-1314), (-1781L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,314^-1,781)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
      double double0 = MathUtils.cosh(1.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-858.123726), (double) 1.0F);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-337);
      intArray0[2] = 78;
      intArray0[3] = 504;
      intArray0[4] = 0;
      intArray0[5] = 3907;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3907;
      doubleArray0[1] = (double) 3907;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.5430806348152437;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,907 >= 3,907)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.compareTo((short)0, 0.0, 0.0);
      double double0 = MathUtils.scalb((-798.99829), (short)0);
      short short1 = MathUtils.indicator((short)0);
      long long0 = MathUtils.lcm((long) (short)1, (-2041L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 2041L;
      doubleArray0[2] = (double) 2041L;
      doubleArray0[3] = (-798.99829);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2041L;
      doubleArray0[7] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.indicator((-3958705157555305932L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      double double3 = MathUtils.binomialCoefficientDouble(1, (-1397));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      float float0 = MathUtils.indicator((float) 1L);
      int int2 = MathUtils.addAndCheck(0, 0);
      int int3 = (-99);
      try { 
        MathUtils.pow(0L, (-99));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-99)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
