/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:00:27 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.LongStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3580.436;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(1057L, 1399);
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.normalizeAngle((-1.0), 0.0);
      boolean boolean0 = MathUtils.equals((-1069.0555428569248), 3580.436, 1399);
      double double2 = MathUtils.scalb(1057L, 0);
      int int0 = MathUtils.gcd(0, 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 3580.436;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1399;
      doubleArray1[6] = (double) 1399;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      double double0 = MathUtils.binomialCoefficientDouble(0, (-2991));
      int int0 = MathUtils.mulAndCheck(166, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2991), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,991, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.lcm(2011L, 3991L);
      long long1 = MathUtils.gcd(4658029423251924286L, 8025901L);
      float float0 = MathUtils.indicator((float) 4658029423251924286L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3991L;
      doubleArray0[1] = (double) 3991L;
      doubleArray0[2] = (double) 3991L;
      doubleArray0[3] = (double) 3991L;
      doubleArray0[4] = 0.625;
      doubleArray0[5] = (double) 4658029423251924286L;
      int int0 = MathUtils.hash(doubleArray0);
      long long2 = 1725L;
      long long3 = MathUtils.pow(1725L, 456L);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 456L;
      doubleArray1[1] = (double) 8025901L;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) 4658029423251924286L;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-8));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-8);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-8);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-8);
      intArray0[5] = (int) (byte) (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.indicator((short) (byte) (-8));
      long long0 = MathUtils.gcd((-926L), (-926L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(3372.9246428852, 3.834E-20, 113);
      float float0 = MathUtils.round((float) (-8), (int) (short) (-1), 2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 148);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-1789569705), 18);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1828.27;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 12.0;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = (-2186.170747624924);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = (-1095);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-1095), (-1095));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,095, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3925.20242128327), (-3925.20242128327));
      int int0 = MathUtils.indicator(401);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 401;
      doubleArray0[1] = (double) 401;
      doubleArray0[2] = (-3925.20242128327);
      doubleArray0[3] = (-3925.20242128327);
      doubleArray0[4] = (-3925.20242128327);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 401;
      doubleArray0[7] = (-1569.0);
      doubleArray0[8] = (double) 401;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 401.0);
      int int1 = MathUtils.mulAndCheck(1, 17);
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 401;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray2);
      long long0 = MathUtils.gcd(0L, (long) 401);
      short short0 = MathUtils.indicator((short) (-541));
      long long1 = MathUtils.gcd(401L, 401L);
      long long2 = MathUtils.factorial(1);
      double double1 = MathUtils.normalizeAngle((-2449.1813378), (-2060.417610252802));
      int int2 = MathUtils.gcd((-2145838065), 203);
      long long3 = MathUtils.mulAndCheck(401L, (long) (short) (-541));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4363, (-1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(5, 5);
      int int0 = MathUtils.compareTo(1.0, 1.0, (-7003.7789644851));
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, 5);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      int int1 = MathUtils.indicator(175);
      double double1 = MathUtils.factorialDouble(1);
      double double2 = MathUtils.round(717.59024, 0, 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-7003.7789644851), (-7003.7789644851), 223);
      int int2 = MathUtils.addAndCheck(0, 8);
      double double3 = 335.9123527412676;
      double double4 = MathUtils.scalb(335.9123527412676, 8);
      long long1 = (-7278142539171889152L);
      int int3 = 138;
      long long2 = MathUtils.pow((-7278142539171889152L), 138);
      // Undeclared exception!
      try { 
        MathUtils.factorial(175);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 375;
      intArray0[2] = 229;
      int[] intArray1 = new int[4];
      intArray1[0] = 4423;
      intArray1[1] = 229;
      intArray1[2] = 375;
      intArray1[3] = 229;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      double double0 = MathUtils.binomialCoefficientDouble(4423, 0);
      double double1 = MathUtils.log(0.0, 4423);
      long long0 = MathUtils.sign(5040L);
      double double2 = MathUtils.distance(intArray0, intArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      MockRandom mockRandom0 = new MockRandom(2422L);
      LongStream longStream0 = mockRandom0.longs((-2876L), (long) 10);
      BigInteger bigInteger2 = BigInteger.probablePrime(10, mockRandom0);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger1, bigInteger1);
      double double3 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1114.787;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-264.10000387);
      doubleArray0[3] = 2076.152;
      doubleArray0[4] = 2164.3615;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-270.03687390271);
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.lcm((-686L), (-1168L));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3116), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,116, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.lcm((-1484L), (-1484L));
      double double0 = MathUtils.log(0.0, Double.NaN);
      boolean boolean0 = MathUtils.equals((-134.71146785476), 2642.5405750169, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-2072.484815));
      long long1 = MathUtils.mulAndCheck(1484L, 0L);
      double double1 = MathUtils.factorialDouble(67);
      int int0 = MathUtils.addAndCheck(2070, 2070);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(4140);
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 197);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 4140;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-134.71146785476);
      doubleArray0[7] = (double) (-1484L);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-630.157038), 197, (-414));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-288.819);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-1762.02772832));
      short short0 = MathUtils.sign((short)83);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short1 = MathUtils.indicator((short)2962);
      short short2 = MathUtils.sign((short) (-2727));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round((float) (short)1, (int) (short)83);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (long) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.2250738585072014E-308, 2.2250738585072014E-308);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = (-2454.6687982282947);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2.2250738585072014E-308;
      doubleArray0[6] = 2.2250738585072014E-308;
      doubleArray0[7] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.compareTo(0.0, (-111.98084477916), 2454.6687982282947);
      int int1 = MathUtils.mulAndCheck(2390, 0);
      short short0 = MathUtils.indicator((short)10);
      short short1 = MathUtils.indicator((short)10);
      int int2 = 0;
      int int3 = MathUtils.subAndCheck(0, 2767);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)10;
      double double1 = MathUtils.distance(intArray0, intArray0);
      try { 
        MathUtils.pow(0, (-2767));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,767)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1707.4810545211603, 1707.4810545211603);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1631.771986102);
      doubleArray0[1] = 55.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-669.88966526208);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1091.9061;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.074;
      doubleArray1[5] = 1143.64695708013;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1143.64695708013;
      doubleArray2[1] = 1091.9061;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1091.9061;
      double double0 = MathUtils.distanceInf(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.pow((-2342), 624);
      int int1 = MathUtils.subAndCheck(159, (-2342));
      double double0 = MathUtils.scalb(159, (-1807));
      double double1 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.addAndCheck((long) 2501, (long) 624);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.addAndCheck((long) 0, 1094L);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1977.8747);
      doubleArray0[1] = (-829.0982507345);
      doubleArray0[2] = (-50.8174405);
      doubleArray0[3] = 0.5;
      doubleArray0[4] = (-1396.172154);
      doubleArray0[5] = 1.494140625;
      doubleArray0[6] = 1.176342548272881E-8;
      doubleArray0[7] = (-1133.9509971671);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.176342548272881E-8;
      doubleArray1[1] = 2799.4854313904793;
      doubleArray1[2] = (-1133.9509971671);
      doubleArray1[3] = 2799.4854313904793;
      doubleArray1[4] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.cosh(2680.5829198);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2680.5829198;
      doubleArray0[1] = 2680.5829198;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialLog(651);
      double double3 = MathUtils.normalizeAngle(2816.187462132138, 2680.5829198);
      int int0 = 16;
      float float0 = MathUtils.round(0.0F, 16);
      long long0 = MathUtils.indicator((-889L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.factorial(16);
      int int1 = (-1934);
      int int2 = MathUtils.addAndCheck(1228, (-1934));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1809.0, 0.0);
      boolean boolean1 = MathUtils.equals((-415.61347), (double) (-1934), (-0.33333333333333287));
      double double4 = MathUtils.sign((-1778.57131460464));
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553359L, 4208363204685324176L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-829.0982507345);
      doubleArray0[2] = (-50.8174405);
      doubleArray0[3] = 0.5;
      doubleArray0[4] = (-1396.172154);
      doubleArray0[5] = 1.494140625;
      doubleArray0[6] = 1.176342548272881E-8;
      doubleArray0[7] = (-1133.9509971671);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.176342548272881E-8;
      doubleArray1[1] = 1981.1941731358504;
      doubleArray1[2] = (-1133.9509971671);
      doubleArray1[4] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.cosh(2680.5829198);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2680.5829198;
      doubleArray0[1] = 2680.5829198;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialLog(651);
      double double3 = MathUtils.normalizeAngle(2816.187462132138, 2680.5829198);
      float float0 = MathUtils.round(0.0F, 16);
      long long0 = MathUtils.indicator((-889L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.factorial(16);
      int int0 = MathUtils.addAndCheck(1228, (-1934));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1809.0, 0.0);
      boolean boolean1 = MathUtils.equals((-415.61347), (double) (-1934), (-0.33333333333333287));
      double double4 = MathUtils.sign((-1778.57131460464));
      short short0 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553359L, 4208363204685324176L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.sinh(46.6027656);
      int int3 = 36;
      int int4 = MathUtils.subAndCheck(0, 36);
      double double2 = MathUtils.log((-36), (-3407.58));
      double double3 = MathUtils.sign(1081.182561229445);
      MockRandom mockRandom0 = new MockRandom((-3398L));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 2421;
      int int1 = MathUtils.mulAndCheck(2421, 2421);
      int int2 = 67;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2421, 67);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      short short0 = bigInteger0.shortValueExact();
      int int1 = (-1233);
      try { 
        MathUtils.pow(bigInteger0, (-1233));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,233)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(15);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.307674368E12, 1.307674368E12);
      int int0 = 2388;
      // Undeclared exception!
      try { 
        MathUtils.round(1.307674368E12, 2388, 3671);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger2.andNot(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.add(bigInteger2);
      BigInteger bigInteger5 = bigInteger0.divide(bigInteger4);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger6 = BigInteger.valueOf((-2472L));
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2472L);
      doubleArray0[1] = (double) (-2472L);
      doubleArray0[2] = (double) (-2472L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      long long0 = bigInteger6.longValue();
      doubleArray0[6] = 4831.0;
      doubleArray0[7] = (double) (-2472L);
      doubleArray0[8] = (double) (-2472L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.scalb((-2472.0), 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, (-2472.0));
      long long1 = MathUtils.factorial(0);
      byte byte0 = MathUtils.indicator((byte)77);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger6, 0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 4831.0;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      double double0 = MathUtils.log(1795.0, 1.1102230246251565E-16);
      double double1 = MathUtils.round((double) 0L, 882);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 250;
      intArray0[2] = 49;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2288;
      intArray0[6] = 1852;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.gcd((long) 1852, 2L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 250;
      doubleArray0[1] = (-37.0100638);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      short short1 = MathUtils.sign((short)0);
      float float0 = MathUtils.sign((-2423.808F));
      int int1 = MathUtils.mulAndCheck((-585), 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1286);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1286;
      doubleArray0[1] = (double) 1286;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1,286 <= 1,286)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-4712.879944796707), (-4712.879944796707), 2338);
      int int0 = MathUtils.pow((-1045), (long) 2338);
      byte byte0 = MathUtils.sign((byte) (-32));
      double double0 = MathUtils.round((double) (byte) (-32), (int) (byte) (-1));
      int[] intArray0 = new int[4];
      intArray0[0] = 2338;
      intArray0[1] = 2338;
      intArray0[2] = (-1045);
      intArray0[3] = 2338;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) (-1045));
      double double2 = MathUtils.round((double) (byte) (-32), (int) (byte) (-1));
      long long1 = MathUtils.addAndCheck(277L, (long) 2338);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 277L;
      doubleArray0[1] = 3033.4339594102603;
      doubleArray0[2] = (double) (-1045);
      doubleArray0[3] = (double) 1581368121;
      doubleArray0[4] = (double) 2338;
      doubleArray0[5] = (-4712.879944796707);
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.gcd(12, 12);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValueExact();
      short short0 = bigInteger0.shortValueExact();
      int int1 = bigInteger0.intValueExact();
      int int2 = bigInteger0.getLowestSetBit();
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-920.206566588188);
      String string1 = bigInteger0.toString(10);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = MathUtils.lcm(10, 12);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int4 = MathUtils.hash((-2147.494));
      double double0 = MathUtils.sinh(240.4792300294971);
      int int5 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 128.103787;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 198524913;
      intArray0[1] = 198524913;
      intArray0[2] = 198524913;
      intArray0[3] = 198524913;
      intArray0[4] = 198524913;
      intArray0[5] = 198524913;
      intArray0[6] = 198524913;
      intArray0[7] = 198524913;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) 198524913, 0L);
      double double1 = MathUtils.normalizeAngle(0.0, 3569.57812684);
      double double2 = MathUtils.cosh(0.0);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      long long2 = MathUtils.gcd(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-168.2));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.sign(40320L);
      long long1 = MathUtils.addAndCheck(1140L, (-3084L));
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3580.436;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(1057L, 1401);
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.normalizeAngle((-1.0), 0.0);
      boolean boolean0 = MathUtils.equals((-1069.0555428569248), 3580.436, 1401);
      double double2 = MathUtils.scalb(1057L, 0);
      int int0 = MathUtils.gcd(0, 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 3580.436;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1401;
      doubleArray1[6] = (double) 1401;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.sinh(3.834E-20);
      int int0 = MathUtils.indicator(1693);
      long long0 = MathUtils.factorial(0);
      float float0 = MathUtils.round((-1.0F), 13);
      float float1 = MathUtils.round((float) 1, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1.0F), 0.5, 1693);
      int int1 = MathUtils.lcm(0, 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1721L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 466;
      intArray0[1] = 329;
      intArray0[2] = 0;
      intArray0[3] = 215;
      intArray0[4] = 0;
      intArray0[5] = 20;
      intArray0[6] = 1669;
      intArray0[7] = 184;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1399.51), (-1399.51), (-1399.51));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.add(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.not();
      int int0 = bigInteger0.intValue();
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger4 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.pow(35L, 116);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 116;
      doubleArray0[1] = (double) 981762497190145681L;
      doubleArray0[2] = (double) 981762497190145681L;
      doubleArray0[3] = (double) 35L;
      doubleArray0[4] = (-1399.51);
      doubleArray0[5] = (-1399.51);
      doubleArray0[6] = (double) 981762497190145681L;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 35L;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray1);
      double double1 = MathUtils.cosh(Double.POSITIVE_INFINITY);
      long long1 = MathUtils.pow(9218868437227405312L, 1558);
      double double2 = MathUtils.log(9.8176249719014566E17, (-1.0));
      float float0 = MathUtils.round(0.0F, 1558);
      double double3 = MathUtils.binomialCoefficientLog(116, 0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.lcm(1558, 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(49L, 49L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, 0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 49L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 49L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (-4163.240932229);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-622.3726447823458);
      doubleArray0[2] = (-2085.7915161);
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 5123.054669;
      doubleArray0[5] = 787.68462636;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-2,085.792 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-1263));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1263);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1972.23160024271;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-1263);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.indicator(623.76589208);
      double double1 = MathUtils.factorialLog(8);
      double double2 = MathUtils.log(4605.0, 3190.932909424);
      long long0 = MathUtils.pow(107L, 107L);
      int int0 = MathUtils.indicator((-1158));
      int int1 = MathUtils.hash((-4707.88157519));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 107L;
      doubleArray0[3] = (double) 1851458021;
      doubleArray0[4] = (-5082.013830244496);
      doubleArray0[5] = 3190.932909424;
      doubleArray0[6] = 3190.932909424;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (1,851,458,021 > -5,082.014)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 753);
      int int0 = MathUtils.gcd(753, (-1555));
      int int1 = 0;
      int int2 = MathUtils.lcm(0, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.subAndCheck((long) 1, (long) 753);
      long long3 = MathUtils.addAndCheck(0L, 893L);
      double double1 = 1414.438;
      double double2 = MathUtils.cosh(1414.438);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = MathUtils.round((-2998.53F), (-1004));
      double double0 = MathUtils.binomialCoefficientDouble(431, 431);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1460);
      int int0 = MathUtils.lcm((-665), 14);
      boolean boolean0 = MathUtils.equals(1.0, (double) 14, 2793.5781266260465);
      boolean boolean1 = MathUtils.equals((double) 14, 1282.60633, 1330);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      float float0 = MathUtils.sign((float) (short)1460);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1330;
      doubleArray0[2] = (double) (short)1460;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (short)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1,460 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.round((-2234.208145796035), 0);
      int int0 = MathUtils.gcd(0, 0);
      float float0 = MathUtils.round((float) 0, 0);
      int int1 = MathUtils.sign(4144);
      long long0 = MathUtils.lcm((long) 0, (long) 4144);
      short short0 = MathUtils.indicator((short)1024);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)1024;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 1, Double.NaN, 0.0);
      double double1 = MathUtils.sign(Double.NaN);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,024 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2955.0804, 2955.0804, 2955.0804);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(2955.0804, 1982, 1982);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-3175));
      long long0 = MathUtils.pow((-1258L), 428);
      int int0 = MathUtils.lcm((int) (short) (-3175), 428);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1358900;
      doubleArray0[1] = (-858.511832057);
      doubleArray0[2] = (double) (short) (-3175);
      doubleArray0[3] = (double) 1358900;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("S}'.#S=LpGrP>4/");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.S}'.#S=LpGrP>4/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.sign(2L);
      double double0 = MathUtils.scalb(1270.7390213, 0);
      short short0 = MathUtils.indicator((short) (-2520));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = 1270.7390213;
      doubleArray0[3] = 1270.7390213;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = 1270.7390213;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = 1270.7390213;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (int) (short) (-2520);
      intArray0[5] = (int) (short) (-2520);
      intArray0[6] = (int) (short) (-1);
      intArray0[7] = (int) (short) (-1);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.indicator(0.0);
      int int1 = MathUtils.mulAndCheck((int) (short) (-1), (-2636));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int0 = MathUtils.sign(Integer.MIN_VALUE);
      int int1 = MathUtils.subAndCheck(16, 16);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int2 = 2;
      double double1 = MathUtils.binomialCoefficientDouble(1292, 2);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathUtils.log(1145.6067731512294, Double.NaN);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      int int0 = MathUtils.subAndCheck(0, 1030);
      try { 
        MathUtils.pow(0, (-1030));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,030)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.gcd(2261L, (-9223372036854775808L));
      int int0 = MathUtils.subAndCheck(1580, 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      try { 
        MathUtils.pow(0, (-679L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-679)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 3051;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 3051, 3051);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-292));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-292);
      doubleArray0[1] = (double) (short) (-292);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) (short) (-1), 0L);
      long long1 = MathUtils.indicator(0L);
      long long2 = (-257L);
      long long3 = MathUtils.mulAndCheck(4464L, (-257L));
      double double1 = MathUtils.cosh(1L);
      double double2 = MathUtils.sign(1.5430806348152437);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.indicator((-2039.2752443458));
      int int0 = (-759);
      try { 
        MathUtils.pow((-759), (long) (-759));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-759^-759)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      float float0 = MathUtils.indicator((float) 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.indicator(5009);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.indicator(0.625);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.625;
      doubleArray0[1] = 1.0;
      double double1 = (-422.98048726391096);
      doubleArray0[2] = (-422.98048726391096);
      doubleArray0[3] = 0.625;
      doubleArray0[4] = 0.625;
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals((-422.98048726391096), 1094.0, 19);
      int int0 = 115;
      int int1 = MathUtils.addAndCheck(19, 115);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= -422.98)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = (-1538);
      intArray0[1] = (-1538);
      intArray0[2] = 0;
      intArray0[3] = (-788);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.pow(1981, 0);
      int int3 = MathUtils.indicator(1);
      byte byte0 = MathUtils.indicator((byte) (-118));
      int int4 = 6;
      long long0 = MathUtils.pow((long) 0, 6);
      int int5 = MathUtils.compareTo(1981, 6, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte) (-118));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -118
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(0.0, 0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = 3;
      double double2 = MathUtils.scalb((-2811.3973), 3);
      float float0 = MathUtils.indicator(0.0F);
      double double3 = MathUtils.sign(55.0);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 1718, 127);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 127, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double double0 = MathUtils.factorialLog(0);
      int int0 = (-3375);
      float float0 = MathUtils.round((float) 0, (-3375), 0);
      int int1 = MathUtils.compareTo(5257.125100671, 2428.803976, 2428.803976);
      double double1 = MathUtils.normalizeAngle(0L, (-2616.5944907));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2428.803976;
      doubleArray1[1] = 5257.125100671;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = 2428.803976;
      doubleArray1[4] = (double) 1;
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      int int2 = MathUtils.gcd((-841), 0);
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.pow(0L, 0);
      long long2 = MathUtils.lcm((long) (short)0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-3375), 1603.44214, (int) (short)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = (-3807L);
      try { 
        MathUtils.pow(1814L, (-3807L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,814^-3,807)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.cosh((-1718.67964809078));
      double double1 = MathUtils.sign(Double.POSITIVE_INFINITY);
      int int0 = 9;
      int int1 = MathUtils.indicator(9);
      double double2 = MathUtils.round(0.0, 171);
      int int2 = MathUtils.hash(985.5726614253933);
      boolean boolean0 = MathUtils.equals(1.0, (-2458.6667032765), (-1718.67964809078));
      double double3 = MathUtils.binomialCoefficientDouble(171, (-1894932126));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1739.0719653654;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = 0;
      float float0 = MathUtils.round(1154.3694F, 0, 0);
      double double0 = MathUtils.round((double) 1155.0F, 454);
      byte byte0 = MathUtils.indicator((byte) (-15));
      short short0 = MathUtils.indicator((short) (byte) (-15));
      int int1 = 52;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 52);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 2179;
      int int1 = 161;
      double double0 = MathUtils.binomialCoefficientLog(2179, 161);
      int int2 = (-160);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-160));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -160
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-115));
      byte byte1 = MathUtils.indicator((byte) (-115));
      int int0 = MathUtils.gcd(61, 17);
      float float0 = MathUtils.round(0.0F, 62);
      int int1 = MathUtils.hash((-94.349083575154));
      double double0 = MathUtils.normalizeAngle((-94.349083575154), 0.003);
      double double1 = MathUtils.cosh(444.8);
      float float1 = MathUtils.round((float) (byte) (-1), 0, 6);
      short short0 = MathUtils.sign((short)13);
      short short1 = MathUtils.sign((short)2179);
      double double2 = MathUtils.binomialCoefficientLog((short)13, (-2213));
      float float2 = MathUtils.indicator(1.0F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2213), 1508);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,213, k = 1,508
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.scalb(2146.2, (-3089));
      long long0 = MathUtils.addAndCheck((long) (-3089), (-1388L));
      int int0 = MathUtils.hash(0.0);
      long long1 = MathUtils.gcd((-3825L), 1390L);
      float float0 = MathUtils.round((float) 5L, 2);
      int int1 = MathUtils.addAndCheck((-15), 112);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(5, (-723));
      int int1 = MathUtils.mulAndCheck(172, (-1746));
      int[] intArray0 = new int[7];
      intArray0[0] = (-3615);
      intArray0[1] = (-723);
      intArray0[2] = (-3615);
      intArray0[3] = (-723);
      intArray0[4] = (-723);
      intArray0[5] = (-946);
      intArray0[6] = (-300312);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1812.753474055085, (-3964.7696507749347));
      byte byte0 = MathUtils.indicator((byte)74);
      int int0 = MathUtils.addAndCheck((-1685), (int) (byte)1);
      long long0 = MathUtils.gcd((long) (-1684), (-27L));
      double double0 = MathUtils.indicator(1064.25099803);
      double double1 = MathUtils.scalb((-108.4746073), (-1685));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(50, 50);
      short short0 = MathUtils.indicator((short)1282);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1282;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.25;
      doubleArray0[3] = (double) 50;
      doubleArray0[4] = (double) 50;
      doubleArray0[5] = (double) (short)1282;
      doubleArray0[6] = (double) (short)1;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short)1;
      doubleArray1[1] = 0.25;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) (short)1282;
      doubleArray1[4] = (double) (short)1282;
      doubleArray1[5] = (double) (short)1;
      doubleArray1[6] = (double) (short)1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = (-228);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-228));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -228
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.sign(1.225743062930824E-8);
      int int0 = 1519;
      double double1 = MathUtils.scalb(10.0, 1519);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5.690262398681798E-159);
      doubleArray0[1] = (-5.690262398681798E-159);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 10.0;
      doubleArray0[5] = (-1289.0716883497876);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-0 >= -0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.sign(0.008336750013465571);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-394), 29);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -394, k = 29
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-3563);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3563));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,563
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = (-1956.9517);
      doubleArray0[2] = (-1956.9517);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.sinh((-1956.9517));
      double double3 = MathUtils.cosh((-141.0));
      long long0 = MathUtils.pow((long) 0, (long) 0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-761);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-761), 1292);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -761, k = 1,292
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.addAndCheck((-9223372036854775808L), 24L);
      int int0 = MathUtils.sign(218);
      double double0 = MathUtils.scalb((-9223372036854775784L), 52);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.indicator(21);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.sinh((-1946.39845899764));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, Double.NEGATIVE_INFINITY);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2601.06778, (-2198.34624671));
      int int1 = MathUtils.compareTo((-38.16), 0.0, 1);
      double double3 = MathUtils.scalb((-1), (-1));
      long long0 = MathUtils.sign(1480L);
      long long1 = MathUtils.mulAndCheck(1480L, 1480L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1L);
      float float0 = MathUtils.round(672.4F, 1);
      long long2 = MathUtils.subAndCheck(5040L, 324L);
      int int2 = MathUtils.pow(5, 0L);
      int int3 = MathUtils.gcd(0, 67);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.indicator((-1636.9101212518));
      boolean boolean0 = MathUtils.equals((-1.0), (-1.0));
      double double1 = 0.0;
      double double2 = 4348.71195337;
      int int0 = (-1169);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 4348.71195337, (-1169));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.indicator((-2475.4923108));
      long long0 = 2222L;
      long long1 = MathUtils.mulAndCheck(2222L, 2222L);
      byte byte0 = MathUtils.indicator((byte)59);
      int int0 = MathUtils.hash((-0.2499999701976776));
      double double1 = MathUtils.factorialLog((byte)59);
      long long2 = 184L;
      long long3 = MathUtils.mulAndCheck((long) (byte)1, 184L);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4208363204685324176L, 4208363204685324176L);
      long long1 = MathUtils.binomialCoefficient(3034, 3034);
      int int0 = MathUtils.sign((-1167));
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1167);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 0.1111111111111111;
      doubleArray0[3] = (double) 4208363204685324176L;
      doubleArray0[4] = (double) (-1167);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 8416726409370648352L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (4,208,363,204,685,324,300 >= -1,167)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.sign(725);
      long long0 = MathUtils.subAndCheck((long) 725, 2432902008176640000L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 725;
      doubleArray0[1] = (double) 725;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.binomialCoefficient(725, 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1467;
      int int1 = MathUtils.gcd(1467, 1467);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-644.5974393607), (double) 1467, (-818));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-5);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = bigInteger0.testBit(52);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.remainder(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) (byte)4);
      double double0 = MathUtils.round((double) (byte)86, 0, 0);
      double double1 = MathUtils.round((double) (byte) (-5), (int) (byte)86);
      double double2 = MathUtils.factorialLog(1206);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int3 = MathUtils.mulAndCheck(0, 13);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = MathUtils.sign((-1606.677F));
      long long0 = MathUtils.binomialCoefficient(1746, 1746);
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, (double) (-1606.677F), 1746);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.hash((-152.0));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1067253760));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,067,253,760
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 181;
      intArray0[1] = 0;
      int[] intArray1 = new int[3];
      intArray1[0] = 181;
      intArray1[1] = 181;
      intArray1[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.hash(21.0);
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.factorialDouble(80);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 80;
      doubleArray0[1] = (-2089.4237181);
      doubleArray0[2] = (double) 80;
      doubleArray0[3] = (-2202.808386);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 7.156945704626677E118;
      doubleArray0[6] = (double) 80;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (80 > -2,089.424)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.log((-1528.5244444473), 135.70893145);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 135.70893145;
      doubleArray0[1] = 135.70893145;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1528.5244444473);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-2183.8165904);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 135.70893145);
      boolean boolean0 = MathUtils.equals(Double.NaN, (-2183.8165904), 1662);
      long long0 = MathUtils.sign((long) 1662);
      long long1 = MathUtils.addAndCheck((long) 1662, 0L);
      long long2 = 708L;
      long long3 = MathUtils.indicator(708L);
      long long4 = MathUtils.addAndCheck(0L, 1L);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1662);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.sign(3432L);
      int int0 = MathUtils.pow(20, 1L);
      long long1 = MathUtils.lcm(1L, 1L);
      double double0 = MathUtils.factorialDouble(20);
      double double1 = MathUtils.indicator((double) 20);
      double double2 = MathUtils.log(0.0, 10.0);
      boolean boolean0 = MathUtils.equals((-2120.032356969896), (-0.2499999997677497), (double) 20);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.clearBit(20);
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2020.12828846;
      doubleArray0[1] = (-0.1428571423679182);
      doubleArray0[2] = (-2879.852);
      doubleArray0[3] = (-840.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3753.801;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1876.06);
      double double0 = MathUtils.indicator((-2712.3985926926));
      double double1 = MathUtils.indicator(2654.178103708915);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2197.479));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.indicator(146);
      int int1 = MathUtils.indicator(146);
      long long0 = MathUtils.factorial(1);
      double double0 = MathUtils.log(1L, 146);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (double) 146, 1);
      double double1 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1094);
      double double0 = MathUtils.log(0.0, (short)1);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1094;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 0);
      double double1 = MathUtils.indicator(0.0);
      long long0 = MathUtils.pow(640L, (long) 1094);
      double double2 = MathUtils.cosh(1.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.pow(1922, (long) 1922);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1922;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1922;
      doubleArray0[3] = (double) 1922;
      doubleArray0[4] = (double) 1922;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1026.1;
      doubleArray0[7] = (double) 1922;
      doubleArray0[8] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.gcd(1070491423, 0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 1334.99;
      double double1 = (-34.324525064);
      double double2 = MathUtils.normalizeAngle(1334.99, (-34.324525064));
      // Undeclared exception!
      try { 
        MathUtils.factorial(104);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.subAndCheck(570L, 0L);
      int int0 = MathUtils.pow((int) (short)0, 2147483647L);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short short0 = MathUtils.sign((short)1024);
      float float0 = MathUtils.sign(Float.NaN);
      int int0 = MathUtils.gcd((-660), (int) (short)1);
      double double0 = MathUtils.factorialLog((short)1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2331.97060883), (-73.6));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1146), 4528);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,146, k = 4,528
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-104));
      int int0 = MathUtils.lcm(2053, (int) (byte) (-1));
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 2053;
      intArray0[2] = 30;
      intArray0[3] = (int) (byte) (-104);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = 2053;
      intArray0[6] = (int) (byte) (-104);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.binomialCoefficient(0, (-104));
      int int2 = MathUtils.pow(2053, 30);
      boolean boolean0 = MathUtils.equals(0.11113807559013367, (double) (-2063374423), 1.073741824E9);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.073741824E9;
      doubleArray0[1] = 0.11113807559013367;
      doubleArray0[2] = (double) 30;
      doubleArray0[3] = (double) 30;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-104);
      doubleArray0[7] = (double) (-104);
      doubleArray0[8] = (double) (byte) (-1);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-3370L));
      LongStream longStream0 = mockRandom0.longs((long) 30);
      boolean boolean1 = mockRandom0.nextBoolean();
      BigInteger bigInteger0 = BigInteger.probablePrime(14, mockRandom0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.lcm(1315L, 1315L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1315L;
      doubleArray0[1] = (double) 1315L;
      doubleArray0[2] = (double) 1315L;
      doubleArray0[3] = (double) 1315L;
      doubleArray0[4] = (double) 1315L;
      doubleArray0[5] = (double) 1315L;
      doubleArray0[6] = (double) 1315L;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.indicator(2.0);
      int int1 = MathUtils.lcm(108083423, 0);
      int int2 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 108083423;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 108083423;
      double double1 = MathUtils.distance(doubleArray1, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray1);
      long long1 = MathUtils.gcd(0L, (long) 108083423);
      int int3 = MathUtils.compareTo(0.003, 1315L, 3816.2);
      long long2 = MathUtils.mulAndCheck((long) 0, (-3183605296591799669L));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 108083423;
      intArray0[3] = 108083423;
      intArray0[4] = 108083423;
      intArray0[5] = 0;
      double double3 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3466.925449;
      doubleArray0[1] = 1054.67637;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.normalizeAngle(3466.925449, 1054.67637);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(84.62367, 1042.5313811, (-6171.332));
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(2054.45, (-410.1200993982));
      float float0 = MathUtils.sign(1912.3949F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator((-1));
      long long0 = MathUtils.gcd(0L, (long) (-1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 224;
      int int1 = MathUtils.pow(1494, 224);
      float float0 = MathUtils.sign((float) 224);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1494;
      doubleArray0[2] = (double) 224;
      doubleArray0[3] = (double) 1494;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 224;
      doubleArray0[7] = (double) 224;
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-521), (-521));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -521
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.pow(135, 33);
      float float0 = MathUtils.sign(378.5F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.sign((-5034868814120038111L));
      int int0 = 95;
      int int1 = MathUtils.lcm(95, 95);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.pow((-3055L), 3315);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5266475594555676209L;
      doubleArray0[1] = (double) (-3055L);
      doubleArray0[2] = (double) (-3055L);
      doubleArray0[3] = (double) 3315;
      doubleArray0[4] = (double) 5266475594555676209L;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 5266475594555676209L;
      doubleArray0[7] = (-1818.9);
      doubleArray0[8] = (double) (-3055L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (5,266,475,594,555,676,700 >= -3,055)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-701.914166853109), (-701.914166853109));
      int int0 = MathUtils.compareTo((-1151.9), 0.0, (-1151.9));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1151.9);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-701.914166853109);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-701.914166853109);
      doubleArray0[5] = (-1151.9);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1286.759003792));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 2300.1, 0.0);
      int int1 = MathUtils.compareTo(498.0, 498.0, 2300.1);
      long long0 = MathUtils.lcm(0L, 20922789888000L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = MathUtils.round(1305.0F, 1923);
      short short0 = MathUtils.indicator((short)3321);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Float.NaN;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((long) (short)1);
      double double0 = MathUtils.scalb(1923, 2271);
      int int1 = MathUtils.lcm(2271, 3792);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)66);
      int int2 = MathUtils.compareTo(0.0, 0.1818181574344635, 1923);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 909.61219952;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = (-1116L);
      long long1 = MathUtils.subAndCheck((-1116L), (-1116L));
      try { 
        MathUtils.pow((-1116L), (-1097));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,116^-1,097)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.gcd(3628800L, 3628800L);
      long long1 = MathUtils.pow(0L, 0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.scalb((-5676.027809863), 70);
      double double1 = MathUtils.binomialCoefficientDouble(2562, 2562);
      int int0 = MathUtils.pow((-2591), 138);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      float float0 = MathUtils.sign((float) 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.sign((-4985));
      boolean boolean0 = MathUtils.equals(2151.291010871081, 0.0, (-2152.55254697756));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1), (-4985));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(3055, 0);
      double double0 = MathUtils.binomialCoefficientLog(2144896624, 0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float float0 = MathUtils.indicator((-3476.0F));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      boolean boolean1 = MathUtils.equals((double) (-1.0F), 520.353067888059);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double double0 = 1.1102230246251565E-16;
      double double1 = MathUtils.indicator(1.1102230246251565E-16);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = 0.0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = 0.008333333333329196;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.008333333333329196, 0.0);
      long long0 = MathUtils.subAndCheck((long) (short)1, (long) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 1150L);
      long long1 = MathUtils.lcm(1150L, 121645100408832000L);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 957.170984151482;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-835.88894123719);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(14.32293314260504, 0.0, 14.32293314260504);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 14.32293314260504, 4588.7527615);
      double double1 = MathUtils.normalizeAngle(4588.7527615, 2197.6870616067);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.shiftRight((-1));
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      float float0 = MathUtils.round(2233.8638F, 0);
      double double0 = MathUtils.indicator(0.0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 8);
      double double1 = MathUtils.log(668.8964845967, 668.8964845967);
      float float1 = MathUtils.round((-2292.7876F), 8);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.mulAndCheck(0L, (long) (-1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(2L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: lcm(2, -9,223,372,036,854,775,808) is 2^63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.mulAndCheck(2785L, 120L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 120L;
      doubleArray0[1] = (double) 120L;
      doubleArray0[2] = (double) 120L;
      doubleArray0[3] = (double) 334200L;
      doubleArray0[4] = (double) 334200L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(3096, 0);
      int int1 = MathUtils.lcm(3096, 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.sign((-561.4366194289655));
      double double1 = MathUtils.round((-1.0), (-2518));
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.lcm((long) (short)0, 0L);
      double double2 = MathUtils.indicator((-561.4366194289655));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 419.3546636;
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short)829);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      int int0 = bigInteger0.signum();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2251);
      long long0 = MathUtils.gcd((-231L), 0L);
      int int1 = MathUtils.mulAndCheck(2251, 0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2781), (-2781));
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-420.0), 1.0, (double) 0L);
      long long2 = MathUtils.addAndCheck((-929L), 0L);
      double double1 = MathUtils.sinh(2467.7);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.lcm((-1484L), (-1484L));
      double double0 = MathUtils.log(0.0, Double.NaN);
      boolean boolean0 = MathUtils.equals((-134.71146785476), 2642.5405750169, 0.0);
      long long1 = MathUtils.mulAndCheck(1484L, 0L);
      double double1 = MathUtils.factorialDouble(67);
      int int0 = MathUtils.addAndCheck(2070, 2070);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(4140);
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 197);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 4140;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[7] = (double) (-1484L);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-630.157038), 197, (-414));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1895.429657082);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (-2232));
      double double0 = MathUtils.scalb((-3366.0), (-61));
      double double1 = MathUtils.cosh((-1895.429657082));
      int int0 = MathUtils.compareTo(0.0, (-2460.540999244508), 0.0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(173.69, 173.69);
      double double1 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.sign(0.0);
      boolean boolean0 = MathUtils.equals(0.0, 173.69, 0.0);
      long long0 = MathUtils.lcm(9218868437227405312L, 9218868437227405312L);
      int int0 = MathUtils.gcd(224, 224);
      long long1 = MathUtils.addAndCheck(468L, 9218868437227405312L);
      long long2 = MathUtils.indicator(0L);
      int int1 = (-746);
      int int2 = MathUtils.lcm(1586, (-746));
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.flipBit((-746));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = (-4157);
      // Undeclared exception!
      try { 
        MathUtils.round(913.0F, (-4157), 24);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 24, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
